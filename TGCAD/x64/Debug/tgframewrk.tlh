// Created by Microsoft (R) C/C++ Compiler Version 14.32.31332.0 (8332c2d6).
//
// D:\visualstudio\project\TGCAD\TGCAD\x64\Debug\tgframewrk.tlh
//
// C++ source equivalent of type library tgframewrk.tlb
// compiler-generated file - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace TGFramework {

//
// Forward references and typedefs
//

struct __declspec(uuid("46635c46-c1c2-4c2c-b86f-b2159ad4b573"))
/* LIBID */ __TGFramework;
struct __declspec(uuid("8a7efa36-f000-11d1-bdfc-080036b4d502"))
/* interface */ _IApplicationAuto;
struct __declspec(uuid("f9293970-4812-11ce-9647-0800367e0502"))
/* dispinterface */ SelectSet;
struct __declspec(uuid("d008fb46-f0e0-11d1-bdfe-080036b4d502"))
/* interface */ _ISelectSetAuto;
struct __declspec(uuid("ded89db0-45b6-11ce-b307-0800363a1e02"))
/* dispinterface */ Application;
enum ObjectType;
struct __declspec(uuid("290d47b0-f718-11cd-8b57-080036181e02"))
/* dispinterface */ Documents;
struct __declspec(uuid("c1e8fdf7-fbe0-11d1-be0a-080036b4d502"))
/* interface */ _IDocumentsAuto;
struct __declspec(uuid("b6861a91-0ae6-465d-a7e8-9ce03269b9cd"))
/* dispinterface */ TemplateManager;
struct __declspec(uuid("b91eaa5b-a40c-4119-99fe-29ed3cdc85aa"))
/* interface */ _ITemplateManagerAuto;
enum TemplatesListType;
struct __declspec(uuid("a6713ae0-2bda-11ce-8e45-08003601bbd5"))
/* dispinterface */ Environments;
struct __declspec(uuid("c1e8fdfb-fbe0-11d1-be0a-080036b4d502"))
/* interface */ _IEnvironmentsAuto;
struct __declspec(uuid("024091d0-2bdb-11ce-8e45-08003601bbd5"))
/* dispinterface */ Environment;
struct __declspec(uuid("c1e8fdff-fbe0-11d1-be0a-080036b4d502"))
/* interface */ _IEnvironmentAuto;
struct __declspec(uuid("1d3da501-9bff-11d1-ba96-080036230602"))
/* dispinterface */ CommandBars;
struct __declspec(uuid("5a1831f3-9da4-11d1-ba98-080036230602"))
/* interface */ ISECommandBars;
struct __declspec(uuid("1d3da502-9bff-11d1-ba96-080036230602"))
/* dispinterface */ CommandBar;
struct __declspec(uuid("5a1831f2-9da4-11d1-ba98-080036230602"))
/* interface */ ISECommandBar;
struct __declspec(uuid("1d3da503-9bff-11d1-ba96-080036230602"))
/* dispinterface */ CommandBarControls;
struct __declspec(uuid("5a1831ed-9da4-11d1-ba98-080036230602"))
/* interface */ ISECommandBarControls;
struct __declspec(uuid("59de959f-9ca6-11d1-ba97-080036230602"))
/* dispinterface */ CommandBarControl;
struct __declspec(uuid("5a1831ee-9da4-11d1-ba98-080036230602"))
/* interface */ ISECommandBarControl;
enum SeControlType;
enum SeBarPosition;
enum SeBarType;
struct __declspec(uuid("e0fec934-e01f-47c1-8b08-dae756cb973f"))
/* dispinterface */ Accelerators;
struct __declspec(uuid("3bbfd6ac-92c9-4028-a704-5ed42da265f6"))
/* interface */ ISEAccelerators;
struct __declspec(uuid("56271f1e-7387-46c1-a78d-0ca381997917"))
/* dispinterface */ Accelerator;
struct __declspec(uuid("dd1a3cc8-ae28-4d33-b9f9-58e2ea159f5d"))
/* interface */ ISEAccelerator;
struct __declspec(uuid("7524fac6-48f8-4d07-a048-48e49da21713"))
/* dispinterface */ KeyBinding;
struct __declspec(uuid("ca442117-2b8d-4346-8501-38e1e3b52aeb"))
/* interface */ ISEKeyBinding;
enum AcceleratorTypeConstants;
struct __declspec(uuid("38f26aba-1a45-4423-ac3a-1c79d0ba52bc"))
/* dispinterface */ CommandCategories;
struct __declspec(uuid("84d6c89d-9b38-49cb-9277-efc947f931b9"))
/* interface */ ISECommandCategories;
struct __declspec(uuid("cd9c184e-798b-45fe-bda2-920f71bb1c5a"))
/* dispinterface */ CommandCategory;
struct __declspec(uuid("3c14caef-ffae-4733-aa03-fb3fe6fba579"))
/* interface */ ISECommandCategory;
struct __declspec(uuid("9333babb-0d74-4c42-97bc-f348d1f6ed63"))
/* dispinterface */ CommandInfo;
struct __declspec(uuid("89400a0e-036a-45c9-a3d9-c3834dba59d2"))
/* interface */ ISECommandInfo;
enum LinksUpdateOption;
enum DocumentAccess;
enum NotifyOption;
struct __declspec(uuid("76118c70-fc09-11cd-8b57-080036181e02"))
/* dispinterface */ Windows;
struct __declspec(uuid("c1e8fdf2-fbe0-11d1-be0a-080036b4d502"))
/* interface */ _IWindowsAuto;
struct /* coclass */ ApplicationEvents;
struct __declspec(uuid("5e23ed5b-64e5-11d1-ba6b-080036230602"))
/* dispinterface */ DISEApplicationEvents;
struct __declspec(uuid("90223887-09cd-11d1-ba07-080036230602"))
/* interface */ ISEApplicationEvents;
struct /* coclass */ ApplicationWindowEvents;
struct __declspec(uuid("25045f7d-965c-11d1-ba90-080036230602"))
/* dispinterface */ DISEApplicationWindowEvents;
struct __declspec(uuid("25045f7b-965c-11d1-ba90-080036230602"))
/* interface */ ISEApplicationWindowEvents;
enum DocumentTypeConstants;
struct /* coclass */ FileUIEvents;
struct __declspec(uuid("ecc667a2-a4aa-11d1-aecc-08003616ce02"))
/* dispinterface */ DISEFileUIEvents;
enum SeImageQualityType;
struct __declspec(uuid("ecc667a1-a4aa-11d1-aecc-08003616ce02"))
/* interface */ ISEFileUIEvents;
struct /* coclass */ BeforeFileSaveAsEvents;
struct __declspec(uuid("c2640031-a528-4bbb-beff-27ced79c18bf"))
/* dispinterface */ DISEBeforeFileSaveAsEvents;
struct __declspec(uuid("55da85aa-e3f6-4d68-983a-8fe24445bafe"))
/* interface */ ISEBeforeFileSaveAsEvents;
enum SolidEdgeCommandConstants;
struct /* coclass */ Command;
struct __declspec(uuid("ca3f01d2-cdca-11d1-91c2-08003601be21"))
/* dispinterface */ DISECommand;
struct __declspec(uuid("f3484607-2af7-11d1-ba2f-080036230602"))
/* interface */ ISECommand;
struct /* coclass */ Mouse;
struct __declspec(uuid("ca3f01d1-cdca-11d1-91c2-08003601be21"))
/* dispinterface */ DISEMouse;
struct __declspec(uuid("fe939157-a69f-49d4-b9ba-447f07d191c2"))
/* interface */ ISEMouseEx3;
struct __declspec(uuid("e46d9541-81a0-4040-b9fa-9c140845dcb1"))
/* interface */ ISEMouseEx2;
struct __declspec(uuid("c3e5510f-72aa-11d3-a3e3-0004ac969a5d"))
/* interface */ ISEMouseEx;
struct __declspec(uuid("f3484608-2af7-11d1-ba2f-080036230602"))
/* interface */ ISEMouse;
struct __declspec(uuid("3b77de43-6b3e-11d1-919e-08003601be21"))
/* dispinterface */ DISEMouseEvents;
struct __declspec(uuid("19466b48-2a10-11d1-ba2e-080036230602"))
/* interface */ ISEMouseEvents;
struct /* coclass */ CommandWindow;
struct __declspec(uuid("3b77de45-6b3e-11d1-919e-08003601be21"))
/* dispinterface */ DISECommandWindowEvents;
struct __declspec(uuid("8460ffd7-2a24-11d1-ba2e-080036230602"))
/* interface */ ISECommandWindowEvents;
struct __declspec(uuid("3b77de41-6b3e-11d1-919e-08003601be21"))
/* dispinterface */ DISECommandEvents;
struct __declspec(uuid("19466b47-2a10-11d1-ba2e-080036230602"))
/* interface */ ISECommandEvents;
struct __declspec(uuid("a50d497a-288a-11d2-b586-080036e8b802"))
/* dispinterface */ AddIns;
struct __declspec(uuid("a50d497c-288a-11d2-b586-080036e8b802"))
/* interface */ ISEAddIns;
struct __declspec(uuid("a50d497d-288a-11d2-b586-080036e8b802"))
/* dispinterface */ AddIn;
struct __declspec(uuid("a50d497b-288a-11d2-b586-080036e8b802"))
/* interface */ ISEAddIn;
struct /* coclass */ AddInEvents;
struct __declspec(uuid("0f539244-4816-11d2-b5ac-080036e8b802"))
/* interface */ ISEAddInEvents;
struct __declspec(uuid("0f539245-4816-11d2-b5ac-080036e8b802"))
/* dispinterface */ DISEAddInEvents;
struct __declspec(uuid("1d3da505-9bff-11d1-ba96-080036230602"))
/* dispinterface */ CommandBarButton;
struct __declspec(uuid("5a1831f1-9da4-11d1-ba98-080036230602"))
/* interface */ ISECommandBarButton;
struct /* coclass */ CommandBarButtonEvents;
struct __declspec(uuid("5a1831f0-9da4-11d1-ba98-080036230602"))
/* interface */ ISECommandBarButtonEvents;
struct __declspec(uuid("1d3da506-9bff-11d1-ba96-080036230602"))
/* dispinterface */ DISECommandBarButtonEvents;
enum SeButtonState;
enum SeButtonStyle;
struct /* coclass */ FeatureLibraryEvents;
struct __declspec(uuid("ebf71669-acf0-11d3-a3f3-0004ac969a5d"))
/* interface */ ISEFeatureLibraryEvents;
enum ApplicationGlobalConstants;
enum SeObjectType;
struct __declspec(uuid("738b5227-09f9-4b9e-a2eb-c27c04d954f3"))
/* dispinterface */ Insight;
struct __declspec(uuid("e1f41560-116d-4f9f-9d23-30a142a85a15"))
/* interface */ _IInsightAuto;
enum UploadType;
enum CheckInOptions;
enum OverWriteFilesOption;
enum DocumentStatus;
enum SPServerType;
enum InsightSPUserRights;
enum CookieDataToGet;
enum RevisionRuleType;
struct /* coclass */ ApplicationV8DocumentOpenEvent;
struct __declspec(uuid("7cd4b08c-fd20-4dde-8b3b-19d4db129ede"))
/* interface */ ISEApplicationV8AfterDocumentOpenEvent;
struct /* coclass */ FeatureSelectedFromPFEvents;
struct __declspec(uuid("8515aba6-cc94-40a2-93f1-0fb41a5e347c"))
/* dispinterface */ DISEFeatureSelectedFromPFEvents;
struct __declspec(uuid("2062cc80-fe02-4267-819b-c9f8d095a0e7"))
/* interface */ ISEFeatureSelectedFromPFEvents;
enum BulkMigrationTypeConstants;
struct __declspec(uuid("e25441e6-a8ec-4907-b3c5-0454ee164e1d"))
/* dispinterface */ MatTable;
struct __declspec(uuid("102a9dba-54f5-4522-9d3e-5e9464024adf"))
/* interface */ _IMatTableAuto;
enum MatTablePropIndexConstants;
enum UnitTypeConstants;
struct /* coclass */ NewFileUIEvents;
struct __declspec(uuid("768a88a7-c417-453a-a70c-fa292379c148"))
/* interface */ ISENewFileUIEvents;
struct /* coclass */ ShortcutMenuEvents;
struct __declspec(uuid("906f7a2e-ac43-409d-9933-c9a88b930c99"))
/* interface */ ISEShortCutMenuEvents;
enum ShortCutMenuContextConstants;
struct __declspec(uuid("9214a28e-88fa-46e5-96d8-fa25882d6c6f"))
/* dispinterface */ SolidEdgeTCE;
struct __declspec(uuid("a082ac06-99a9-44aa-861a-b811509cd098"))
/* interface */ _ISolidEdgeTCEAuto;
enum DocumentDownloadLevel;
enum SyncOption;
enum TCESETypes;
enum SEECOptions;
struct __declspec(uuid("51d3fe4d-98aa-4cab-9070-1dde81e801f9"))
/* dispinterface */ SolidEdgeInsightXT;
struct __declspec(uuid("1e06567b-81ed-4133-85b1-e9bc336db6e2"))
/* interface */ _ISolidEdgeInsightXTAuto;
struct /* coclass */ SEECEvents;
struct __declspec(uuid("a4db51be-1187-4c34-a93b-d9c376f6a5be"))
/* interface */ ISEECEvents;
enum eCPDMode;
struct /* coclass */ SESPEvents;
struct __declspec(uuid("f1c5113c-880b-4456-b5da-b40eadfad39b"))
/* interface */ ISESPEvents;
struct /* coclass */ BiDMEvents;
struct __declspec(uuid("e9829432-a716-47e7-ae6c-fdebd20592b3"))
/* interface */ IBiDMEvents;
struct __declspec(uuid("6442b504-1c6a-4c7c-9c49-31a20985a33c"))
/* dispinterface */ Customization;
struct __declspec(uuid("c8093a5a-db50-4e32-bd93-a3176780fcfc"))
/* interface */ _ICustomizationAuto;
struct __declspec(uuid("6c140ba1-e93a-4d4a-8b07-cee1578a2f0b"))
/* dispinterface */ RibbonBarThemes;
struct __declspec(uuid("cfad8581-a0d0-4763-9741-894bc9890c98"))
/* interface */ _IRibbonBarThemesAuto;
struct __declspec(uuid("15945626-fc1d-4a12-913e-78c4b297e19c"))
/* dispinterface */ RibbonBarTheme;
struct __declspec(uuid("07f664c0-9fcb-4be8-a101-59a031489d1f"))
/* interface */ _IRibbonBarThemeAuto;
struct __declspec(uuid("9df76f46-7386-4ac1-9ecc-2b1bdbf5f74f"))
/* dispinterface */ RibbonBars;
struct __declspec(uuid("9f6c2a11-8d82-4c43-b2c6-d58b8ed02377"))
/* interface */ _IRibbonBarsAuto;
struct __declspec(uuid("5b536e10-d0de-4c67-8ee4-aac91a2f2754"))
/* dispinterface */ RibbonBar;
struct __declspec(uuid("5bac8949-d756-43e5-9a2d-2733132b0ad8"))
/* interface */ _IRibbonBarAuto;
struct __declspec(uuid("65a7b8a2-0a86-4ea7-92fb-2a78e944ff96"))
/* dispinterface */ RibbonBarTabs;
struct __declspec(uuid("a109d38f-1f5d-4af5-a6c3-b9171b3f7857"))
/* interface */ _IRibbonBarTabsAuto;
struct __declspec(uuid("88df0957-6b0f-4755-8af4-573d4c249145"))
/* dispinterface */ RibbonBarTab;
struct __declspec(uuid("c23c3363-0f8f-4742-9c0f-c79eb68c5e4b"))
/* interface */ _IRibbonBarTabAuto;
struct __declspec(uuid("4393d083-890c-4646-92b7-7310966ccf06"))
/* dispinterface */ RibbonBarGroups;
struct __declspec(uuid("11ba1264-0a35-4bbc-b8ad-efce5c7bda1c"))
/* interface */ _IRibbonBarGroupsAuto;
struct __declspec(uuid("df446eb9-aafa-48a7-ae3f-d46994b80c2e"))
/* dispinterface */ RibbonBarGroup;
struct __declspec(uuid("97d7dc66-2ead-4b8d-92f5-70e13ede5247"))
/* interface */ _IRibbonBarGroupAuto;
struct __declspec(uuid("b047921f-a87f-4c17-8152-156802737b4b"))
/* dispinterface */ RibbonBarControls;
struct __declspec(uuid("18f0ea35-44a8-4040-a4e7-0ceb92955922"))
/* interface */ _IRibbonBarControlsAuto;
struct __declspec(uuid("b2b9bd62-2a57-4173-87e8-761541368633"))
/* dispinterface */ RibbonBarControl;
struct __declspec(uuid("b123ea0d-457b-40ee-98f3-6ff84f3345fe"))
/* interface */ _IRibbonBarControlAuto;
enum RibbonBarControlSize;
enum RibbonBarControlText;
enum RibbonBarInsertMode;
struct __declspec(uuid("48bf6a82-1e35-4679-9315-c3345bfd819a"))
/* dispinterface */ RadialMenu;
struct __declspec(uuid("ece0da2a-84e1-4b8a-b6ea-57c4a4f619dc"))
/* interface */ _IRadialMenuAuto;
struct __declspec(uuid("195c0bf2-fb0e-41d3-aa5a-8e084be95851"))
/* dispinterface */ SwitchWindowCust;
struct __declspec(uuid("5e1d27de-3414-4073-b8f7-28fbaf6d2546"))
/* interface */ _ISwitchWindowCustAuto;
enum ArrangeWindowsStyles;
enum GenerateMasterImportListError;
enum ConfigResetType;
enum ConfigForForeignFileType;
enum FileTranslationMode;
struct SolidEdgeWorkflowInfo;
enum WorkflowType;
enum WorkflowAction;
struct SolidEdgeWorkflowQueryInfo;
enum GenerateSourceImportListError;
struct __declspec(uuid("2eb9310a-e2d7-4e98-a786-db6ff3b44d10"))
/* dispinterface */ DynamicVisualization;
struct __declspec(uuid("dc99a528-3559-4999-923d-12f5acd6e64c"))
/* interface */ _IDynamicVisualizationAuto;
struct /* coclass */ OpenNonSolidEdgeFileUIEvents;
struct __declspec(uuid("4aa48ed8-e0eb-4649-9a21-30fbae5117b8"))
/* interface */ ISEOpenNonSolidEdgeFileUIEvents;
enum OpenNonSolidEdgeFileContext;
enum SELicenseCheck;
struct __declspec(uuid("c1e8fe26-fbe0-11d1-be0a-080036b4d502"))
/* interface */ _IWindowAuto;
struct __declspec(uuid("45bae7f1-b014-11d0-98e4-08003616ce02"))
/* dispinterface */ View;
struct __declspec(uuid("fc3fbfd4-fbfe-11d1-be0a-080036b4d502"))
/* interface */ _IViewAuto;
struct __declspec(uuid("e68f7241-c6a7-11ce-a434-0800367e0502"))
/* dispinterface */ Window;
struct /* coclass */ ViewEvents;
struct __declspec(uuid("5bdaad32-966b-11d1-aecb-08003616ce02"))
/* dispinterface */ DISEViewEvents;
struct __declspec(uuid("5bdaad31-966b-11d1-aecb-08003616ce02"))
/* interface */ ISEViewEvents;
struct /* coclass */ DisplayEvents;
struct __declspec(uuid("791849e2-a4aa-11d1-aecc-08003616ce02"))
/* dispinterface */ DISEhDCDisplayEvents;
struct __declspec(uuid("791849e1-a4aa-11d1-aecc-08003616ce02"))
/* interface */ ISEhDCDisplayEvents;
struct /* coclass */ GLDisplayEvents;
struct __declspec(uuid("177afed7-cbf3-11d2-9230-00c04f79be98"))
/* interface */ ISEIGLDisplayEvents;
struct /* coclass */ RenderEvents;
struct __declspec(uuid("1776f00d-cbf3-11d2-9230-00c04f79be98"))
/* interface */ ISERenderEvents;
struct /* coclass */ AnimationEvents;
struct __declspec(uuid("8e4ca55f-2065-4590-b55b-eb804743568f"))
/* dispinterface */ DISEAnimationEvents;
struct __declspec(uuid("97b0a502-9486-478b-ba8a-39ead409ef18"))
/* interface */ ISEAnimationEvents;
enum AnimationEventConstants;
enum SeRenderModeType;
enum seMovieStandardResolutionConstants;
enum seMovieFormatConstants;
enum seSharpenLevelConstants;
struct __declspec(uuid("31261339-0e47-4ab0-a8c5-dae5c42828d9"))
/* interface */ _INamedViewsAuto;
struct __declspec(uuid("f53e5bec-5e2a-4570-bc6e-aed209928ff7"))
/* dispinterface */ NamedView;
struct __declspec(uuid("ed4410da-106b-4b10-bed2-8783a57ec8f7"))
/* interface */ _INamedViewAuto;
struct __declspec(uuid("c1e8fe1e-fbe0-11d1-be0a-080036b4d502"))
/* interface */ _IUnitsOfMeasureAuto;
struct __declspec(uuid("6fe25d8d-331e-4449-ac45-58d52b08aeef"))
/* dispinterface */ UnitOfMeasure;
struct __declspec(uuid("fd9bd5a2-7df6-46c6-9d5d-d13e6d7dbdb4"))
/* interface */ _IUnitOfMeasureAuto;
struct __declspec(uuid("d8586fc2-2c77-4ed1-b1f5-7a48ce52d4cd"))
/* interface */ _ICPDInitializerBiDMAuto;
struct __declspec(uuid("1d3da504-9bff-11d1-ba96-080036230602"))
/* dispinterface */ CommandBarPopup;
struct __declspec(uuid("5a1831ef-9da4-11d1-ba98-080036230602"))
/* interface */ ISECommandBarPopup;
struct __declspec(uuid("52233663-75c7-41ec-893c-9e600130d9bc"))
/* dispinterface */ DISEBendTableEvents;
struct __declspec(uuid("0ea0d1f1-a199-11d1-aecc-08003616ce02"))
/* interface */ ISEDocumentEvents;
struct __declspec(uuid("a33cbf78-14e8-45b2-87f0-157eac2b28dc"))
/* interface */ ISEDocumentEventsEx;
struct __declspec(uuid("a38bc1f3-4aee-4733-9046-c7e6fd9f67f0"))
/* interface */ ISEBendTableEvents;
struct __declspec(uuid("6a89dfd1-9e7d-11d1-aecc-08003616ce02"))
/* interface */ ISEModelRecomputeEvents;
enum SeFeatureAddFlag;
enum SeFeatureDeleteFlag;
enum SeFeatureModifyFlag;
struct __declspec(uuid("89b0cf26-3216-4381-b62f-4a08f70f153c"))
/* interface */ ISEDynamicEditEvents;
struct __declspec(uuid("d5dfdee6-4b6d-4527-961d-95c3b227d7a7"))
/* interface */ ISEApplicationEventsEx;
enum ApplicationBeforeDocumentOpenEvent;
struct __declspec(uuid("194c4d42-c34b-4ed9-af15-fda41b5fca65"))
/* interface */ ISEApplicationEventsEx2;
enum ApplicationReadyEvent;
struct __declspec(uuid("29e6a1dc-02c7-41fa-9de0-9f07a6e61cfd"))
/* interface */ ISEApplicationReadyEvents;
enum ApplicationActiveFrameSwitchingEvent;
struct __declspec(uuid("c50f7d77-0b9d-4e8e-bf2c-d26e5bc2d0df"))
/* interface */ ISEApplicationActiveFrameSwitchingEvents;
enum ApplicationLicenseEvent;
struct __declspec(uuid("dec45181-8b9b-4d15-8828-eb26dfdd1901"))
/* interface */ ISEApplicationLicenseEvents;
enum ApplicationDocumentLoadingEvent;
struct __declspec(uuid("bacd7768-ee51-445a-8213-e754eab677bc"))
/* interface */ ISEApplicationDocumentLoadingEvents;
struct __declspec(uuid("39decc17-34d7-43e0-99b4-e62fa3c34b55"))
/* interface */ ISEAddInEventsEx;
struct __declspec(uuid("eadfa570-c1f0-45e8-a5fe-d7ff9274fc46"))
/* interface */ ISEAddInEventsEx2;
struct __declspec(uuid("6574db79-dc47-4a1b-8f54-32b332037d7f"))
/* interface */ ISEAddInEdgeBarEvents;
struct __declspec(uuid("1d108618-612d-4afb-ac17-2d776f5e68e8"))
/* interface */ ISEAddInEdgeBarEventsEx;
struct __declspec(uuid("06a9d08e-057e-470a-a194-75aacd9660cf"))
/* interface */ ISEAssemblyChangeEvents;
enum AssemblyChangeEventsConstants;
struct __declspec(uuid("86e2c718-779e-4d11-a896-11554151c26d"))
/* dispinterface */ DISEAssemblyChangeEvents;
struct __declspec(uuid("0d615fce-d0b2-4fe4-8e31-6719619b3ff3"))
/* interface */ ISEAssemblyConfigurationChangeEvents;
struct __declspec(uuid("f44953eb-532f-4d54-82bc-f2debcc817ad"))
/* dispinterface */ DISEAssemblyConfigurationChangeEvents;
struct __declspec(uuid("f865f7bd-8d49-11d3-a3e6-0004ac969a5d"))
/* interface */ ISEAssemblyRecomputeEvents;
enum AssemblyEventConstants;
struct __declspec(uuid("c92c4390-944e-438b-9d02-772802edde42"))
/* dispinterface */ DISEAssemblyRecomputeEvents;
struct __declspec(uuid("a1901cbe-e2b2-4862-a4ce-d430344b1173"))
/* interface */ ISEAssemblyFamilyEvents;
struct __declspec(uuid("aba30234-04a4-47d7-86e4-e7fa1f162909"))
/* interface */ ISEAssemblyFamilyEvents2;
struct __declspec(uuid("a054f88b-9c75-11d3-a3f0-0004ac969a5d"))
/* interface */ ISEFamilyOfPartsEvents;
struct __declspec(uuid("dd8a8f60-b2af-4bfd-a106-99d3717a7650"))
/* interface */ ISEFamilyOfPartsExEvents;
struct __declspec(uuid("03a58a85-9cfb-11d3-a3f0-0004ac969a5d"))
/* interface */ ISEDividePartEvents;
struct __declspec(uuid("2d93aeee-3b14-11d4-a4d3-0004ac9695cb"))
/* interface */ ISEDrawingViewEvents;
struct __declspec(uuid("21ee3696-5bcc-4815-8a40-209ef7d3eee4"))
/* interface */ ISEPartsListEvents;
struct __declspec(uuid("f1f670b8-2891-4a30-8b9f-f91de7efd502"))
/* interface */ ISEDraftBendTableEvents;
struct __declspec(uuid("95bd6ef5-4dbb-4d8a-8da9-526f56a6002f"))
/* interface */ ISEConnectorTableEvents;
struct __declspec(uuid("55dde1f4-8afb-472e-af0d-5f04ffb25748"))
/* interface */ ISEBlockTableEvents;
struct __declspec(uuid("0ea0d1f2-a199-11d1-aecc-08003616ce02"))
/* dispinterface */ DISEDocumentEvents;
struct __declspec(uuid("01d3f2a6-1e13-4761-8d3a-0fb28c957193"))
/* interface */ ISECommandInfoEx;
struct __declspec(uuid("c16f467f-7c54-4e70-8fcd-03929dfef310"))
/* interface */ ISEAssemblyPhysicalPropertiesChangeEvents;
struct __declspec(uuid("c9ce85d8-9fb8-498e-9a7d-b322a10f8bb5"))
/* dispinterface */ DISEAssemblyPhysicalPropertiesChangeEvents;
struct __declspec(uuid("2e957eea-0812-40db-8909-9a5805c8f69e"))
/* interface */ ISEPhysicalPropertiesChangeEvents;
struct __declspec(uuid("27ffd566-b818-43c1-90fb-ad85188c1b62"))
/* interface */ ISELocateFilterEvents;
struct __declspec(uuid("62e0a0ab-1460-4f48-8014-1d7c13a1cf73"))
/* interface */ ISECommandEx;
struct __declspec(uuid("7c4aeeeb-93b0-48f4-b81d-07713327a293"))
/* interface */ ISECommandEx2;
struct __declspec(uuid("2f2f586e-00f1-4992-bbcb-c9987d30797a"))
/* dispinterface */ DISEAddInEventsEx;
struct __declspec(uuid("76e0e7d9-e28b-43e6-91e6-2854c5fde18b"))
/* dispinterface */ DISEAddInEventsEx2;
struct __declspec(uuid("dc601e2f-5bb3-4bf2-a9c7-03e60975e897"))
/* interface */ ISEAddInEx;
struct /* coclass */ AddInEdgeBarEvents;
struct __declspec(uuid("8517e9e0-387b-45d1-8dcd-ac9388224e35"))
/* interface */ ISEAddInEx2;
struct __declspec(uuid("f14957a8-23ce-48e6-ad17-2052d07fdd74"))
/* interface */ ISEAddInSaveAsTranslatorEvents;
struct __declspec(uuid("687193bc-5302-443a-b267-96f54d355db6"))
/* interface */ ISEAddInSaveAsTranslator;
struct /* coclass */ AddInSaveAsTranslatorEvents;
struct __declspec(uuid("d3f30ae5-2582-11d2-baf9-080036230602"))
/* interface */ ISolidEdgeAddIn;
enum SeConnectMode;
enum SeDisconnectMode;
struct __declspec(uuid("7824063b-7678-11d3-a3e3-0004ac969a5d"))
/* interface */ ISolidEdgeBar;
struct __declspec(uuid("21ebd9be-7f3c-455d-b1c2-ac4102f389d5"))
/* interface */ ISolidEdgeBarEx;
struct __declspec(uuid("b7156f1b-03d6-45c1-a923-c461472d843a"))
/* interface */ ISolidEdgeBarEx2;
struct __declspec(uuid("b48cba07-c2c5-11d3-a3f6-0004ac969a5d"))
/* interface */ ISolidEdgeRibbonBar;
struct __declspec(uuid("87bf7ba6-d2c0-4e8c-a187-566a3f8f02d3"))
/* interface */ ISolidEdgeRibbonBarEx;
enum CommandBarHeaderDialogControlIDs;
struct __declspec(uuid("7fb49cdf-9905-49a5-91bb-955c3d5b4b82"))
/* interface */ ISolidEdgeCommandBar;
struct __declspec(uuid("570b1d76-bca1-4f8b-81a6-802598254e46"))
/* dispinterface */ DISEAssemblyFamilyEvents;
struct __declspec(uuid("96ef941e-a14e-40cb-8947-b56a79e6da47"))
/* dispinterface */ DISEAssemblyFamilyEvents2;
struct __declspec(uuid("172df9bc-f422-477e-a04d-016152e41652"))
/* interface */ ISEECEventsEx;
struct __declspec(uuid("af423276-017d-4df6-ac19-516f6dba0642"))
/* interface */ ISESketchRecomputeEvents;
enum SeModifySketchFlag;
struct __declspec(uuid("270f89d0-0824-4aad-932f-52eaa954f81e"))
/* dispinterface */ DISESketchRecomputeEvents;
struct /* coclass */ DocumentEvents;
struct /* coclass */ ModelRecomputeEvents;
struct /* coclass */ BendTableEvents;
struct /* coclass */ AssemblyRecomputeEvents;
struct /* coclass */ AssemblyChangeEvents;
struct /* coclass */ AssemblyConfigurationChangeEvents;
struct /* coclass */ FamilyOfPartsEvents;
struct /* coclass */ FamilyOfPartsExEvents;
struct /* coclass */ DividePartEvents;
struct /* coclass */ DrawingViewEvents;
struct /* coclass */ PartsListEvents;
struct /* coclass */ DraftBendTableEvents;
struct /* coclass */ AssemblyFamilyEvents;
struct /* coclass */ AssemblyFamilyEvents2;
struct /* coclass */ ConnectorTableEvents;
struct /* coclass */ BlockTableEvents;
struct /* coclass */ AssemblyPhysicalPropertiesChangeEvents;
struct /* coclass */ PhysicalPropertiesChangeEvents;
struct /* coclass */ SketchRecomputeEvents;
struct __declspec(uuid("67b667c1-5be3-11cf-bd3b-0800368a1102"))
/* interface */ _IVariableAuto;
enum seVariableTypeConstants;
enum seUnitsTypeConstants;
enum VariableLimitValueConstant;
struct __declspec(uuid("1033e6a1-2f02-11cf-bd0c-0800368a1102"))
/* interface */ _IVariableListAuto;
struct __declspec(uuid("7647edc5-19d6-11cf-bcfb-0800368a1102"))
/* interface */ _IVariablesAuto;
struct __declspec(uuid("3db3add1-e66c-4e1b-8147-3d3f331b8628"))
/* interface */ _IInterpartLinkAuto;
struct __declspec(uuid("bdc621a8-eee7-4ec5-ba07-8ac60582c5f1"))
/* interface */ _IInterpartLinksAuto;
struct __declspec(uuid("1d001cbc-b19c-11d3-b960-0004ac969177"))
/* interface */ _ISensorAuto;
enum SensorTypeConstants;
enum SensorStatusConstants;
enum SensorOperatorConstants;
enum SensorDisplayTypeConstants;
enum SensorUpdateMechanismConstants;
struct __declspec(uuid("e3f0b476-b19c-11d3-b960-0004ac969177"))
/* interface */ _ISensorsAuto;
enum SurfaceAreaSensorAreaTypeConstants;
enum SurfaceAreaSensorSelectionTypeConstants;
struct __declspec(uuid("acdac91f-c5f0-11d3-a98b-00c04f79b2b4"))
/* interface */ _ISheetMetalSensorsAuto;
enum SheetMetalSensorFeatureTypeConstants;
struct __declspec(uuid("c0286643-07de-4008-acd4-5816205d773e"))
/* interface */ _ISectionViewAuto;
enum PMISectionDisplayModeConstants;
enum SectionViewPlaneExtentTypeConstant;
enum SectionViewPlaneType;
struct __declspec(uuid("c7a5e645-2d08-45bd-9626-e660d8d8cb7b"))
/* interface */ _ISectionViewsAuto;
enum SectionViewExtentSide;
enum SectionViewProfileSide;
struct __declspec(uuid("296b0541-e53b-11ce-9dfa-08003601e012"))
/* interface */ _ILayerAuto;
struct __declspec(uuid("af7f70b0-dbef-11ce-9df3-08003601e012"))
/* interface */ _ILayersAuto;
struct __declspec(uuid("296b0542-e53b-11ce-9dfa-08003601e012"))
/* dispinterface */ Layer;
struct __declspec(uuid("8d7a7d60-b7d0-11ce-bb76-08003601e855"))
/* interface */ _ILinearStyleAuto;
enum StyleUnitsConstant;
struct __declspec(uuid("6457bb8e-1ae1-11cf-8ed0-080036062402"))
/* interface */ _IFillStyleAuto;
struct __declspec(uuid("6457bb92-1ae1-11cf-8ed0-080036062402"))
/* interface */ _IHatchPatternStyleAuto;
enum HatchElementType;
enum RadialHatchElementCenterLocation;
struct __declspec(uuid("25736050-f726-11cd-a82a-08003601e855"))
/* interface */ _ILinearStylesAuto;
struct __declspec(uuid("0c60fba0-ffe3-11cd-a82a-08003601e855"))
/* dispinterface */ LinearStyle;
struct __declspec(uuid("6457bb90-1ae1-11cf-8ed0-080036062402"))
/* interface */ _IFillStylesAuto;
struct __declspec(uuid("6457bb8f-1ae1-11cf-8ed0-080036062402"))
/* dispinterface */ FillStyle;
struct __declspec(uuid("6457bb95-1ae1-11cf-8ed0-080036062402"))
/* interface */ _IHatchPatternStylesAuto;
struct __declspec(uuid("6457bb93-1ae1-11cf-8ed0-080036062402"))
/* dispinterface */ HatchPatternStyle;
struct __declspec(uuid("fd6f2d48-6ee2-44a2-8ce3-a84ebab764e6"))
/* interface */ _IDashStyleAuto;
struct __declspec(uuid("426fd0e4-1d1c-41ff-af99-50eff336b97b"))
/* interface */ _IDashStylesAuto;
struct __declspec(uuid("7bb29e6a-123b-4f55-bed8-3b553b82869c"))
/* dispinterface */ DashStyle;
struct __declspec(uuid("56466ea0-5e0b-11ce-8137-08003601e504"))
/* interface */ _IFaceStyleAuto;
enum SeSkyboxType;
enum SeRenderSpaceType;
enum SeRenderShapeType;
enum SeRenderFillMode;
enum SeRenderShadeMode;
enum SeRenderMaterialGetMode;
enum SeRenderMaterialSetMode;
struct __declspec(uuid("b57f8e00-a66f-11ce-815f-08003601e504"))
/* interface */ _IFaceStylesAuto;
struct __declspec(uuid("7f5ef5c0-a66f-11ce-815f-08003601e504"))
/* dispinterface */ FaceStyle;
struct __declspec(uuid("6a92ff52-ec4f-11ce-a7c0-080036d40102"))
/* interface */ _ITextStyleAuto;
enum TextStyleNumberJustificationConstants;
struct __declspec(uuid("c47b7d14-ec6b-11ce-a7c0-080036d40102"))
/* interface */ _ITextStylesAuto;
struct __declspec(uuid("c47b7d13-ec6b-11ce-a7c0-080036d40102"))
/* dispinterface */ TextStyle;
struct __declspec(uuid("5684e0e5-24de-11cf-a80a-080036d40102"))
/* interface */ _ITextCharStyleAuto;
struct __declspec(uuid("5684e0e4-24de-11cf-a80a-080036d40102"))
/* interface */ _ITextCharStylesAuto;
struct __declspec(uuid("5684e0e3-24de-11cf-a80a-080036d40102"))
/* dispinterface */ TextCharStyle;
struct __declspec(uuid("77bab3c2-c118-11ce-a0c6-080036c91102"))
/* interface */ _ISymbol2dAuto;
enum DisplayTypeConstant;
enum OLEInsertionTypeConstant;
enum OLEUpdateOptionConstant;
enum KeyPointType;
struct __declspec(uuid("77bab3cb-c118-11ce-a0c6-080036c91102"))
/* interface */ _ISymbolsAuto;
struct __declspec(uuid("77bab3c5-c118-11ce-a0c6-080036c91102"))
/* dispinterface */ Symbol2d;
struct __declspec(uuid("dd7ea711-2852-11d2-a451-080036ecf202"))
/* interface */ _ISymbolPropertiesAuto;
struct __declspec(uuid("ceed3411-d723-11ce-8173-08003601e504"))
/* interface */ _IViewStyleAuto;
enum SeAnalysisStateType;
enum SeAnalysisModeType;
enum SeBackgroundType;
enum SeGradientType;
enum SeAntiAliasLevel;
enum SeHiddenLineMode;
struct __declspec(uuid("ceed3414-d723-11ce-8173-08003601e504"))
/* interface */ _IViewStylesAuto;
struct __declspec(uuid("ceed3412-d723-11ce-8173-08003601e504"))
/* dispinterface */ ViewStyle;
struct __declspec(uuid("8ff2dd01-19b3-11d1-aeaf-08003616ce02"))
/* interface */ _IReferenceAuto;
struct __declspec(uuid("c50df910-29a8-11ce-bf0e-08003601c1be"))
/* interface */ _IRoutingSlipAuto;
enum RouteType;
enum RouteStatus;
struct __declspec(uuid("d6fc1080-54db-11ce-87e4-08003601aa14"))
/* interface */ _IPropertySetsAuto;
struct __declspec(uuid("aed8fe61-3129-11d1-bc83-0800360e1e02"))
/* dispinterface */ Properties;
struct __declspec(uuid("e8bd0e70-5a5f-11ce-87e4-08003601aa14"))
/* interface */ _IPropertiesAuto;
struct __declspec(uuid("aed8fe63-3129-11d1-bc83-0800360e1e02"))
/* dispinterface */ Property;
struct __declspec(uuid("85c981a0-5e4c-11ce-87e4-08003601aa14"))
/* interface */ _IPropertyAuto;
struct __declspec(uuid("a0cfaaba-2f1a-436c-bd53-f8a54d8cfafd"))
/* interface */ _IPropertyExAuto;
struct __declspec(uuid("a745cf30-6949-11ce-87e4-08003601bd52"))
/* interface */ _ISummaryInfoAuto;
struct __declspec(uuid("7575d492-9633-11d3-a3fe-0004ac969602"))
/* interface */ _IAttributeSetsAuto;
struct __declspec(uuid("89694167-9634-11d3-a3fe-0004ac969602"))
/* dispinterface */ AttributeSet;
struct __declspec(uuid("7575d499-9633-11d3-a3fe-0004ac969602"))
/* interface */ _IAttributeSetAuto;
struct __declspec(uuid("89694168-9634-11d3-a3fe-0004ac969602"))
/* dispinterface */ Attribute;
struct __declspec(uuid("7575d49f-9633-11d3-a3fe-0004ac969602"))
/* interface */ _IAttributeAuto;
enum AttributeTypeConstants;
struct __declspec(uuid("a49cfe92-40b3-11d2-9948-080036947803"))
/* interface */ _IAttributeQueryAuto;
struct __declspec(uuid("120662e2-4190-11d2-9948-080036947803"))
/* dispinterface */ QueryObjects;
struct __declspec(uuid("a49cfe93-40b3-11d2-9948-080036947803"))
/* interface */ _IQueryObjectsAuto;
struct __declspec(uuid("c2c04ac6-c764-11d2-bec4-080036b4d502"))
/* interface */ _IHighlightSetsAuto;
struct __declspec(uuid("c2c04aba-c764-11d2-bec4-080036b4d502"))
/* dispinterface */ HighlightSet;
struct __declspec(uuid("c2c04ad4-c764-11d2-bec4-080036b4d502"))
/* interface */ _IHighlightSetAuto;
struct __declspec(uuid("e3946111-6037-11d3-aed8-00500471c49e"))
/* interface */ _ISEGenericCollectionAuto;
struct __declspec(uuid("5316a1d8-6a47-4bd2-955f-a28869a77277"))
/* dispinterface */ NamedViews;
struct __declspec(uuid("431df110-2d0d-11cf-9442-08003601e047"))
/* dispinterface */ UnitsOfMeasure;
struct __declspec(uuid("7647edc3-19d6-11cf-bcfb-0800368a1102"))
/* dispinterface */ variable;
struct __declspec(uuid("1033e6a2-2f02-11cf-bd0c-0800368a1102"))
/* dispinterface */ VariableList;
struct __declspec(uuid("7647edc6-19d6-11cf-bcfb-0800368a1102"))
/* dispinterface */ Variables;
struct __declspec(uuid("a192d85b-81fc-490b-9ace-8f7cd5bd960d"))
/* dispinterface */ InterpartLink;
struct __declspec(uuid("35157ffc-3dec-4ba7-9d6f-c511416a1d5f"))
/* dispinterface */ InterpartLinks;
struct __declspec(uuid("efc0d740-acbf-11d3-b960-0004ac969177"))
/* dispinterface */ Sensor;
struct __declspec(uuid("c1f9ae38-acc2-11d3-b960-0004ac969177"))
/* dispinterface */ Sensors;
struct __declspec(uuid("acdac91e-c5f0-11d3-a98b-00c04f79b2b4"))
/* dispinterface */ SheetMetalSensors;
struct __declspec(uuid("fd092650-dbef-11ce-9df3-08003601e012"))
/* dispinterface */ Layers;
struct __declspec(uuid("db38638d-c898-42bc-8b0d-338e01b26fb3"))
/* dispinterface */ DashStyles;
struct __declspec(uuid("e4d115c0-4999-11ce-a82a-08003601e855"))
/* dispinterface */ LinearStyles;
struct __declspec(uuid("6457bb91-1ae1-11cf-8ed0-080036062402"))
/* dispinterface */ FillStyles;
struct __declspec(uuid("6457bb98-1ae1-11cf-8ed0-080036062402"))
/* dispinterface */ HatchPatternStyles;
struct __declspec(uuid("a5e9bf70-a66f-11ce-815f-08003601e504"))
/* dispinterface */ FaceStyles;
struct __declspec(uuid("c47b7d12-ec6b-11ce-a7c0-080036d40102"))
/* dispinterface */ TextStyles;
struct __declspec(uuid("5684e0e1-24de-11cf-a80a-080036d40102"))
/* dispinterface */ TextCharStyles;
struct __declspec(uuid("77bab3cf-c118-11ce-a0c6-080036c91102"))
/* dispinterface */ Symbols;
struct __declspec(uuid("ceed3415-d723-11ce-8173-08003601e504"))
/* dispinterface */ ViewStyles;
struct __declspec(uuid("8ff2dd02-19b3-11d1-aeaf-08003616ce02"))
/* dispinterface */ Reference;
struct __declspec(uuid("c50df910-29ab-11ce-bf0e-08003601c1be"))
/* dispinterface */ RoutingSlip;
struct __declspec(uuid("64a80742-296b-11cf-a102-080036c91102"))
/* dispinterface */ SymbolProperties;
struct __declspec(uuid("aed8fe5f-3129-11d1-bc83-0800360e1e02"))
/* dispinterface */ PropertySets;
struct __declspec(uuid("a5494c57-1529-4333-a992-c7d893e549e8"))
/* dispinterface */ PropertyEx;
struct __declspec(uuid("95840dc0-6957-11ce-87e4-08003601bd52"))
/* dispinterface */ SummaryInfo;
struct __declspec(uuid("ff48e641-4249-11d2-9949-080036947803"))
/* dispinterface */ AttributeQuery;
struct __declspec(uuid("c2c04ab3-c764-11d2-bec4-080036b4d502"))
/* dispinterface */ HighlightSets;
struct __declspec(uuid("e3946112-6037-11d3-aed8-00500471c49e"))
/* dispinterface */ SEGenericCollection;
struct __declspec(uuid("89694166-9634-11d3-a3fe-0004ac969602"))
/* dispinterface */ AttributeSets;
struct __declspec(uuid("206144cb-e939-4cdc-a41d-4954ad3b0e4b"))
/* dispinterface */ SolidEdgeDocument;
struct __declspec(uuid("d3026abe-764e-4744-b7b4-a82b36513180"))
/* interface */ _ISolidEdgeDocumentAuto;
enum seStyleTypeConstants;
struct __declspec(uuid("89780597-2eec-47c8-876f-5d87f554f217"))
/* dispinterface */ PredefineRelationProducer;
struct __declspec(uuid("55625738-65cb-4c3f-85c7-51e1687055bc"))
/* interface */ _IPredefineRelationProducerAuto;
enum PredefineRelationGroupPolarityConstants;
enum CapturedRelationshipTypeConstants;
enum CapturedRelationshipOffsetTypeConstants;
struct __declspec(uuid("f0f14395-2811-4790-af4d-9f8dabffdffc"))
/* dispinterface */ CPDInitializerInsightXT;
struct __declspec(uuid("4ab14139-faab-46eb-a93b-da3888de8a4a"))
/* interface */ _ICPDInitializerInsightXTAuto;
struct __declspec(uuid("b7ccf9e0-0a3c-4ed4-859b-60097e8057ed"))
/* dispinterface */ CPDInitializer;
struct __declspec(uuid("7e2f3921-cfe3-449e-879f-a20c0c306fdb"))
/* interface */ _ICPDInitializerAuto;
struct __declspec(uuid("bad9aa0f-6c17-4b46-8eba-96f9e7d8aeb2"))
/* dispinterface */ SectionView;
struct __declspec(uuid("138a7bcf-8256-41ad-99b7-466370ffc7ce"))
/* dispinterface */ SectionViews;
struct __declspec(uuid("98430d5e-ab9b-4b9c-bfcb-540b28ff9a55"))
/* dispinterface */ InterDocumentUpdate;
struct __declspec(uuid("310765a2-0306-4d3c-8944-86661d3c13eb"))
/* interface */ _IInterDocumentUpdateAuto;
enum InterDocumentUpdateMode;
struct __declspec(uuid("16e4bce4-2d7a-46b7-ac91-941d1125897a"))
/* dispinterface */ SteeringWheel;
struct __declspec(uuid("5c6f9716-8a18-4de2-8dc9-1dc6e59eb0a2"))
/* interface */ _ISteeringWheelAuto;
enum seSteeringWheelConstants;
struct __declspec(uuid("10b0f1ec-377e-4d9f-a133-aa79f510e831"))
/* dispinterface */ CPDInitializerBiDM;
struct __declspec(uuid("116f20be-b357-4fe6-a9b9-60a919e320af"))
/* interface */ _ISEInsight;
struct __declspec(uuid("154499a8-48ed-4db9-b7a8-c5ef8a97d528"))
/* interface */ _ISolidEdgeTCE;
struct __declspec(uuid("b952fc46-daa7-48df-99d7-60240be446e5"))
/* interface */ _ISolidEdgeInsightXT;
struct __declspec(uuid("a1645a15-5ab9-47c6-90a5-f3db4ff3e288"))
/* interface */ _IDynamicVisualization;
typedef enum MatTablePropIndexConstants MatTablePropIndex;
typedef enum AssemblyChangeEventsConstants seAssemblyChangeEventsConstants;
typedef enum AssemblyEventConstants seAssemblyEventConstants;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(SelectSet, __uuidof(SelectSet));
_COM_SMARTPTR_TYPEDEF(Application, __uuidof(Application));
_COM_SMARTPTR_TYPEDEF(_ISelectSetAuto, __uuidof(_ISelectSetAuto));
_COM_SMARTPTR_TYPEDEF(Documents, __uuidof(Documents));
_COM_SMARTPTR_TYPEDEF(TemplateManager, __uuidof(TemplateManager));
_COM_SMARTPTR_TYPEDEF(_IDocumentsAuto, __uuidof(_IDocumentsAuto));
_COM_SMARTPTR_TYPEDEF(_ITemplateManagerAuto, __uuidof(_ITemplateManagerAuto));
_COM_SMARTPTR_TYPEDEF(Environments, __uuidof(Environments));
_COM_SMARTPTR_TYPEDEF(Environment, __uuidof(Environment));
_COM_SMARTPTR_TYPEDEF(_IEnvironmentsAuto, __uuidof(_IEnvironmentsAuto));
_COM_SMARTPTR_TYPEDEF(CommandBars, __uuidof(CommandBars));
_COM_SMARTPTR_TYPEDEF(CommandBar, __uuidof(CommandBar));
_COM_SMARTPTR_TYPEDEF(CommandBarControls, __uuidof(CommandBarControls));
_COM_SMARTPTR_TYPEDEF(CommandBarControl, __uuidof(CommandBarControl));
_COM_SMARTPTR_TYPEDEF(ISECommandBars, __uuidof(ISECommandBars));
_COM_SMARTPTR_TYPEDEF(ISECommandBarControls, __uuidof(ISECommandBarControls));
_COM_SMARTPTR_TYPEDEF(ISECommandBarControl, __uuidof(ISECommandBarControl));
_COM_SMARTPTR_TYPEDEF(ISECommandBar, __uuidof(ISECommandBar));
_COM_SMARTPTR_TYPEDEF(Accelerators, __uuidof(Accelerators));
_COM_SMARTPTR_TYPEDEF(Accelerator, __uuidof(Accelerator));
_COM_SMARTPTR_TYPEDEF(ISEAccelerators, __uuidof(ISEAccelerators));
_COM_SMARTPTR_TYPEDEF(KeyBinding, __uuidof(KeyBinding));
_COM_SMARTPTR_TYPEDEF(ISEKeyBinding, __uuidof(ISEKeyBinding));
_COM_SMARTPTR_TYPEDEF(ISEAccelerator, __uuidof(ISEAccelerator));
_COM_SMARTPTR_TYPEDEF(CommandCategories, __uuidof(CommandCategories));
_COM_SMARTPTR_TYPEDEF(CommandCategory, __uuidof(CommandCategory));
_COM_SMARTPTR_TYPEDEF(ISECommandCategories, __uuidof(ISECommandCategories));
_COM_SMARTPTR_TYPEDEF(CommandInfo, __uuidof(CommandInfo));
_COM_SMARTPTR_TYPEDEF(_IEnvironmentAuto, __uuidof(_IEnvironmentAuto));
_COM_SMARTPTR_TYPEDEF(ISECommandCategory, __uuidof(ISECommandCategory));
_COM_SMARTPTR_TYPEDEF(ISECommandInfo, __uuidof(ISECommandInfo));
_COM_SMARTPTR_TYPEDEF(Windows, __uuidof(Windows));
_COM_SMARTPTR_TYPEDEF(_IWindowsAuto, __uuidof(_IWindowsAuto));
_COM_SMARTPTR_TYPEDEF(DISEApplicationEvents, __uuidof(DISEApplicationEvents));
_COM_SMARTPTR_TYPEDEF(ISEApplicationEvents, __uuidof(ISEApplicationEvents));
_COM_SMARTPTR_TYPEDEF(DISEApplicationWindowEvents, __uuidof(DISEApplicationWindowEvents));
_COM_SMARTPTR_TYPEDEF(ISEApplicationWindowEvents, __uuidof(ISEApplicationWindowEvents));
_COM_SMARTPTR_TYPEDEF(DISEFileUIEvents, __uuidof(DISEFileUIEvents));
_COM_SMARTPTR_TYPEDEF(ISEFileUIEvents, __uuidof(ISEFileUIEvents));
_COM_SMARTPTR_TYPEDEF(DISEBeforeFileSaveAsEvents, __uuidof(DISEBeforeFileSaveAsEvents));
_COM_SMARTPTR_TYPEDEF(ISEBeforeFileSaveAsEvents, __uuidof(ISEBeforeFileSaveAsEvents));
_COM_SMARTPTR_TYPEDEF(DISECommand, __uuidof(DISECommand));
_COM_SMARTPTR_TYPEDEF(DISEMouse, __uuidof(DISEMouse));
_COM_SMARTPTR_TYPEDEF(ISEMouse, __uuidof(ISEMouse));
_COM_SMARTPTR_TYPEDEF(ISEMouseEx, __uuidof(ISEMouseEx));
_COM_SMARTPTR_TYPEDEF(ISEMouseEx2, __uuidof(ISEMouseEx2));
_COM_SMARTPTR_TYPEDEF(ISEMouseEx3, __uuidof(ISEMouseEx3));
_COM_SMARTPTR_TYPEDEF(DISEMouseEvents, __uuidof(DISEMouseEvents));
_COM_SMARTPTR_TYPEDEF(ISEMouseEvents, __uuidof(ISEMouseEvents));
_COM_SMARTPTR_TYPEDEF(ISECommand, __uuidof(ISECommand));
_COM_SMARTPTR_TYPEDEF(DISECommandWindowEvents, __uuidof(DISECommandWindowEvents));
_COM_SMARTPTR_TYPEDEF(ISECommandWindowEvents, __uuidof(ISECommandWindowEvents));
_COM_SMARTPTR_TYPEDEF(DISECommandEvents, __uuidof(DISECommandEvents));
_COM_SMARTPTR_TYPEDEF(ISECommandEvents, __uuidof(ISECommandEvents));
_COM_SMARTPTR_TYPEDEF(AddIns, __uuidof(AddIns));
_COM_SMARTPTR_TYPEDEF(AddIn, __uuidof(AddIn));
_COM_SMARTPTR_TYPEDEF(ISEAddIns, __uuidof(ISEAddIns));
_COM_SMARTPTR_TYPEDEF(ISEAddInEvents, __uuidof(ISEAddInEvents));
_COM_SMARTPTR_TYPEDEF(DISEAddInEvents, __uuidof(DISEAddInEvents));
_COM_SMARTPTR_TYPEDEF(CommandBarButton, __uuidof(CommandBarButton));
_COM_SMARTPTR_TYPEDEF(ISEAddIn, __uuidof(ISEAddIn));
_COM_SMARTPTR_TYPEDEF(ISECommandBarButtonEvents, __uuidof(ISECommandBarButtonEvents));
_COM_SMARTPTR_TYPEDEF(DISECommandBarButtonEvents, __uuidof(DISECommandBarButtonEvents));
_COM_SMARTPTR_TYPEDEF(ISECommandBarButton, __uuidof(ISECommandBarButton));
_COM_SMARTPTR_TYPEDEF(ISEFeatureLibraryEvents, __uuidof(ISEFeatureLibraryEvents));
_COM_SMARTPTR_TYPEDEF(Insight, __uuidof(Insight));
_COM_SMARTPTR_TYPEDEF(_IInsightAuto, __uuidof(_IInsightAuto));
_COM_SMARTPTR_TYPEDEF(ISEApplicationV8AfterDocumentOpenEvent, __uuidof(ISEApplicationV8AfterDocumentOpenEvent));
_COM_SMARTPTR_TYPEDEF(DISEFeatureSelectedFromPFEvents, __uuidof(DISEFeatureSelectedFromPFEvents));
_COM_SMARTPTR_TYPEDEF(ISEFeatureSelectedFromPFEvents, __uuidof(ISEFeatureSelectedFromPFEvents));
_COM_SMARTPTR_TYPEDEF(MatTable, __uuidof(MatTable));
_COM_SMARTPTR_TYPEDEF(_IMatTableAuto, __uuidof(_IMatTableAuto));
_COM_SMARTPTR_TYPEDEF(ISENewFileUIEvents, __uuidof(ISENewFileUIEvents));
_COM_SMARTPTR_TYPEDEF(ISEShortCutMenuEvents, __uuidof(ISEShortCutMenuEvents));
_COM_SMARTPTR_TYPEDEF(SolidEdgeTCE, __uuidof(SolidEdgeTCE));
_COM_SMARTPTR_TYPEDEF(_ISolidEdgeTCEAuto, __uuidof(_ISolidEdgeTCEAuto));
_COM_SMARTPTR_TYPEDEF(SolidEdgeInsightXT, __uuidof(SolidEdgeInsightXT));
_COM_SMARTPTR_TYPEDEF(_ISolidEdgeInsightXTAuto, __uuidof(_ISolidEdgeInsightXTAuto));
_COM_SMARTPTR_TYPEDEF(ISEECEvents, __uuidof(ISEECEvents));
_COM_SMARTPTR_TYPEDEF(ISESPEvents, __uuidof(ISESPEvents));
_COM_SMARTPTR_TYPEDEF(IBiDMEvents, __uuidof(IBiDMEvents));
_COM_SMARTPTR_TYPEDEF(Customization, __uuidof(Customization));
_COM_SMARTPTR_TYPEDEF(RibbonBarThemes, __uuidof(RibbonBarThemes));
_COM_SMARTPTR_TYPEDEF(RibbonBarTheme, __uuidof(RibbonBarTheme));
_COM_SMARTPTR_TYPEDEF(_IRibbonBarThemesAuto, __uuidof(_IRibbonBarThemesAuto));
_COM_SMARTPTR_TYPEDEF(RibbonBars, __uuidof(RibbonBars));
_COM_SMARTPTR_TYPEDEF(RibbonBar, __uuidof(RibbonBar));
_COM_SMARTPTR_TYPEDEF(_IRibbonBarsAuto, __uuidof(_IRibbonBarsAuto));
_COM_SMARTPTR_TYPEDEF(RibbonBarTabs, __uuidof(RibbonBarTabs));
_COM_SMARTPTR_TYPEDEF(_IRibbonBarAuto, __uuidof(_IRibbonBarAuto));
_COM_SMARTPTR_TYPEDEF(RibbonBarTab, __uuidof(RibbonBarTab));
_COM_SMARTPTR_TYPEDEF(RibbonBarGroups, __uuidof(RibbonBarGroups));
_COM_SMARTPTR_TYPEDEF(_IRibbonBarTabAuto, __uuidof(_IRibbonBarTabAuto));
_COM_SMARTPTR_TYPEDEF(RibbonBarGroup, __uuidof(RibbonBarGroup));
_COM_SMARTPTR_TYPEDEF(RibbonBarControls, __uuidof(RibbonBarControls));
_COM_SMARTPTR_TYPEDEF(_IRibbonBarGroupAuto, __uuidof(_IRibbonBarGroupAuto));
_COM_SMARTPTR_TYPEDEF(RibbonBarControl, __uuidof(RibbonBarControl));
_COM_SMARTPTR_TYPEDEF(_IRibbonBarThemeAuto, __uuidof(_IRibbonBarThemeAuto));
_COM_SMARTPTR_TYPEDEF(_IRibbonBarControlAuto, __uuidof(_IRibbonBarControlAuto));
_COM_SMARTPTR_TYPEDEF(_IRibbonBarTabsAuto, __uuidof(_IRibbonBarTabsAuto));
_COM_SMARTPTR_TYPEDEF(_IRibbonBarGroupsAuto, __uuidof(_IRibbonBarGroupsAuto));
_COM_SMARTPTR_TYPEDEF(_IRibbonBarControlsAuto, __uuidof(_IRibbonBarControlsAuto));
_COM_SMARTPTR_TYPEDEF(RadialMenu, __uuidof(RadialMenu));
_COM_SMARTPTR_TYPEDEF(_IRadialMenuAuto, __uuidof(_IRadialMenuAuto));
_COM_SMARTPTR_TYPEDEF(SwitchWindowCust, __uuidof(SwitchWindowCust));
_COM_SMARTPTR_TYPEDEF(_ICustomizationAuto, __uuidof(_ICustomizationAuto));
_COM_SMARTPTR_TYPEDEF(_ISwitchWindowCustAuto, __uuidof(_ISwitchWindowCustAuto));
_COM_SMARTPTR_TYPEDEF(DynamicVisualization, __uuidof(DynamicVisualization));
_COM_SMARTPTR_TYPEDEF(_IDynamicVisualizationAuto, __uuidof(_IDynamicVisualizationAuto));
_COM_SMARTPTR_TYPEDEF(ISEOpenNonSolidEdgeFileUIEvents, __uuidof(ISEOpenNonSolidEdgeFileUIEvents));
_COM_SMARTPTR_TYPEDEF(_IApplicationAuto, __uuidof(_IApplicationAuto));
_COM_SMARTPTR_TYPEDEF(View, __uuidof(View));
_COM_SMARTPTR_TYPEDEF(_IWindowAuto, __uuidof(_IWindowAuto));
_COM_SMARTPTR_TYPEDEF(Window, __uuidof(Window));
_COM_SMARTPTR_TYPEDEF(DISEViewEvents, __uuidof(DISEViewEvents));
_COM_SMARTPTR_TYPEDEF(ISEViewEvents, __uuidof(ISEViewEvents));
_COM_SMARTPTR_TYPEDEF(DISEhDCDisplayEvents, __uuidof(DISEhDCDisplayEvents));
_COM_SMARTPTR_TYPEDEF(ISEhDCDisplayEvents, __uuidof(ISEhDCDisplayEvents));
_COM_SMARTPTR_TYPEDEF(ISEIGLDisplayEvents, __uuidof(ISEIGLDisplayEvents));
_COM_SMARTPTR_TYPEDEF(ISERenderEvents, __uuidof(ISERenderEvents));
_COM_SMARTPTR_TYPEDEF(DISEAnimationEvents, __uuidof(DISEAnimationEvents));
_COM_SMARTPTR_TYPEDEF(ISEAnimationEvents, __uuidof(ISEAnimationEvents));
_COM_SMARTPTR_TYPEDEF(_IViewAuto, __uuidof(_IViewAuto));
_COM_SMARTPTR_TYPEDEF(NamedView, __uuidof(NamedView));
_COM_SMARTPTR_TYPEDEF(_INamedViewsAuto, __uuidof(_INamedViewsAuto));
_COM_SMARTPTR_TYPEDEF(_INamedViewAuto, __uuidof(_INamedViewAuto));
_COM_SMARTPTR_TYPEDEF(UnitOfMeasure, __uuidof(UnitOfMeasure));
_COM_SMARTPTR_TYPEDEF(_IUnitsOfMeasureAuto, __uuidof(_IUnitsOfMeasureAuto));
_COM_SMARTPTR_TYPEDEF(_IUnitOfMeasureAuto, __uuidof(_IUnitOfMeasureAuto));
_COM_SMARTPTR_TYPEDEF(_ICPDInitializerBiDMAuto, __uuidof(_ICPDInitializerBiDMAuto));
_COM_SMARTPTR_TYPEDEF(CommandBarPopup, __uuidof(CommandBarPopup));
_COM_SMARTPTR_TYPEDEF(ISECommandBarPopup, __uuidof(ISECommandBarPopup));
_COM_SMARTPTR_TYPEDEF(DISEBendTableEvents, __uuidof(DISEBendTableEvents));
_COM_SMARTPTR_TYPEDEF(ISEDocumentEvents, __uuidof(ISEDocumentEvents));
_COM_SMARTPTR_TYPEDEF(ISEDocumentEventsEx, __uuidof(ISEDocumentEventsEx));
_COM_SMARTPTR_TYPEDEF(ISEBendTableEvents, __uuidof(ISEBendTableEvents));
_COM_SMARTPTR_TYPEDEF(ISEModelRecomputeEvents, __uuidof(ISEModelRecomputeEvents));
_COM_SMARTPTR_TYPEDEF(ISEDynamicEditEvents, __uuidof(ISEDynamicEditEvents));
_COM_SMARTPTR_TYPEDEF(ISEApplicationEventsEx, __uuidof(ISEApplicationEventsEx));
_COM_SMARTPTR_TYPEDEF(ISEApplicationEventsEx2, __uuidof(ISEApplicationEventsEx2));
_COM_SMARTPTR_TYPEDEF(ISEApplicationReadyEvents, __uuidof(ISEApplicationReadyEvents));
_COM_SMARTPTR_TYPEDEF(ISEApplicationActiveFrameSwitchingEvents, __uuidof(ISEApplicationActiveFrameSwitchingEvents));
_COM_SMARTPTR_TYPEDEF(ISEApplicationLicenseEvents, __uuidof(ISEApplicationLicenseEvents));
_COM_SMARTPTR_TYPEDEF(ISEApplicationDocumentLoadingEvents, __uuidof(ISEApplicationDocumentLoadingEvents));
_COM_SMARTPTR_TYPEDEF(ISEAddInEventsEx, __uuidof(ISEAddInEventsEx));
_COM_SMARTPTR_TYPEDEF(ISEAddInEventsEx2, __uuidof(ISEAddInEventsEx2));
_COM_SMARTPTR_TYPEDEF(ISEAddInEdgeBarEvents, __uuidof(ISEAddInEdgeBarEvents));
_COM_SMARTPTR_TYPEDEF(ISEAddInEdgeBarEventsEx, __uuidof(ISEAddInEdgeBarEventsEx));
_COM_SMARTPTR_TYPEDEF(ISEAssemblyChangeEvents, __uuidof(ISEAssemblyChangeEvents));
_COM_SMARTPTR_TYPEDEF(DISEAssemblyChangeEvents, __uuidof(DISEAssemblyChangeEvents));
_COM_SMARTPTR_TYPEDEF(ISEAssemblyConfigurationChangeEvents, __uuidof(ISEAssemblyConfigurationChangeEvents));
_COM_SMARTPTR_TYPEDEF(DISEAssemblyConfigurationChangeEvents, __uuidof(DISEAssemblyConfigurationChangeEvents));
_COM_SMARTPTR_TYPEDEF(ISEAssemblyRecomputeEvents, __uuidof(ISEAssemblyRecomputeEvents));
_COM_SMARTPTR_TYPEDEF(DISEAssemblyRecomputeEvents, __uuidof(DISEAssemblyRecomputeEvents));
_COM_SMARTPTR_TYPEDEF(ISEAssemblyFamilyEvents, __uuidof(ISEAssemblyFamilyEvents));
_COM_SMARTPTR_TYPEDEF(ISEAssemblyFamilyEvents2, __uuidof(ISEAssemblyFamilyEvents2));
_COM_SMARTPTR_TYPEDEF(ISEFamilyOfPartsEvents, __uuidof(ISEFamilyOfPartsEvents));
_COM_SMARTPTR_TYPEDEF(ISEFamilyOfPartsExEvents, __uuidof(ISEFamilyOfPartsExEvents));
_COM_SMARTPTR_TYPEDEF(ISEDividePartEvents, __uuidof(ISEDividePartEvents));
_COM_SMARTPTR_TYPEDEF(ISEDrawingViewEvents, __uuidof(ISEDrawingViewEvents));
_COM_SMARTPTR_TYPEDEF(ISEPartsListEvents, __uuidof(ISEPartsListEvents));
_COM_SMARTPTR_TYPEDEF(ISEDraftBendTableEvents, __uuidof(ISEDraftBendTableEvents));
_COM_SMARTPTR_TYPEDEF(ISEConnectorTableEvents, __uuidof(ISEConnectorTableEvents));
_COM_SMARTPTR_TYPEDEF(ISEBlockTableEvents, __uuidof(ISEBlockTableEvents));
_COM_SMARTPTR_TYPEDEF(DISEDocumentEvents, __uuidof(DISEDocumentEvents));
_COM_SMARTPTR_TYPEDEF(ISECommandInfoEx, __uuidof(ISECommandInfoEx));
_COM_SMARTPTR_TYPEDEF(ISEAssemblyPhysicalPropertiesChangeEvents, __uuidof(ISEAssemblyPhysicalPropertiesChangeEvents));
_COM_SMARTPTR_TYPEDEF(DISEAssemblyPhysicalPropertiesChangeEvents, __uuidof(DISEAssemblyPhysicalPropertiesChangeEvents));
_COM_SMARTPTR_TYPEDEF(ISEPhysicalPropertiesChangeEvents, __uuidof(ISEPhysicalPropertiesChangeEvents));
_COM_SMARTPTR_TYPEDEF(ISELocateFilterEvents, __uuidof(ISELocateFilterEvents));
_COM_SMARTPTR_TYPEDEF(ISECommandEx, __uuidof(ISECommandEx));
_COM_SMARTPTR_TYPEDEF(ISECommandEx2, __uuidof(ISECommandEx2));
_COM_SMARTPTR_TYPEDEF(DISEAddInEventsEx, __uuidof(DISEAddInEventsEx));
_COM_SMARTPTR_TYPEDEF(DISEAddInEventsEx2, __uuidof(DISEAddInEventsEx2));
_COM_SMARTPTR_TYPEDEF(ISEAddInEx, __uuidof(ISEAddInEx));
_COM_SMARTPTR_TYPEDEF(ISEAddInEx2, __uuidof(ISEAddInEx2));
_COM_SMARTPTR_TYPEDEF(ISEAddInSaveAsTranslatorEvents, __uuidof(ISEAddInSaveAsTranslatorEvents));
_COM_SMARTPTR_TYPEDEF(ISEAddInSaveAsTranslator, __uuidof(ISEAddInSaveAsTranslator));
_COM_SMARTPTR_TYPEDEF(ISolidEdgeAddIn, __uuidof(ISolidEdgeAddIn));
_COM_SMARTPTR_TYPEDEF(ISolidEdgeBar, __uuidof(ISolidEdgeBar));
_COM_SMARTPTR_TYPEDEF(ISolidEdgeBarEx, __uuidof(ISolidEdgeBarEx));
_COM_SMARTPTR_TYPEDEF(ISolidEdgeBarEx2, __uuidof(ISolidEdgeBarEx2));
_COM_SMARTPTR_TYPEDEF(ISolidEdgeRibbonBar, __uuidof(ISolidEdgeRibbonBar));
_COM_SMARTPTR_TYPEDEF(ISolidEdgeRibbonBarEx, __uuidof(ISolidEdgeRibbonBarEx));
_COM_SMARTPTR_TYPEDEF(ISolidEdgeCommandBar, __uuidof(ISolidEdgeCommandBar));
_COM_SMARTPTR_TYPEDEF(DISEAssemblyFamilyEvents, __uuidof(DISEAssemblyFamilyEvents));
_COM_SMARTPTR_TYPEDEF(DISEAssemblyFamilyEvents2, __uuidof(DISEAssemblyFamilyEvents2));
_COM_SMARTPTR_TYPEDEF(ISEECEventsEx, __uuidof(ISEECEventsEx));
_COM_SMARTPTR_TYPEDEF(ISESketchRecomputeEvents, __uuidof(ISESketchRecomputeEvents));
_COM_SMARTPTR_TYPEDEF(DISESketchRecomputeEvents, __uuidof(DISESketchRecomputeEvents));
_COM_SMARTPTR_TYPEDEF(_IVariableAuto, __uuidof(_IVariableAuto));
_COM_SMARTPTR_TYPEDEF(_IVariableListAuto, __uuidof(_IVariableListAuto));
_COM_SMARTPTR_TYPEDEF(_IVariablesAuto, __uuidof(_IVariablesAuto));
_COM_SMARTPTR_TYPEDEF(_IInterpartLinkAuto, __uuidof(_IInterpartLinkAuto));
_COM_SMARTPTR_TYPEDEF(_IInterpartLinksAuto, __uuidof(_IInterpartLinksAuto));
_COM_SMARTPTR_TYPEDEF(_ISensorAuto, __uuidof(_ISensorAuto));
_COM_SMARTPTR_TYPEDEF(_ISensorsAuto, __uuidof(_ISensorsAuto));
_COM_SMARTPTR_TYPEDEF(_ISheetMetalSensorsAuto, __uuidof(_ISheetMetalSensorsAuto));
_COM_SMARTPTR_TYPEDEF(_ISectionViewAuto, __uuidof(_ISectionViewAuto));
_COM_SMARTPTR_TYPEDEF(_ISectionViewsAuto, __uuidof(_ISectionViewsAuto));
_COM_SMARTPTR_TYPEDEF(_ILayerAuto, __uuidof(_ILayerAuto));
_COM_SMARTPTR_TYPEDEF(Layer, __uuidof(Layer));
_COM_SMARTPTR_TYPEDEF(_ILayersAuto, __uuidof(_ILayersAuto));
_COM_SMARTPTR_TYPEDEF(_ILinearStyleAuto, __uuidof(_ILinearStyleAuto));
_COM_SMARTPTR_TYPEDEF(_IFillStyleAuto, __uuidof(_IFillStyleAuto));
_COM_SMARTPTR_TYPEDEF(_IHatchPatternStyleAuto, __uuidof(_IHatchPatternStyleAuto));
_COM_SMARTPTR_TYPEDEF(LinearStyle, __uuidof(LinearStyle));
_COM_SMARTPTR_TYPEDEF(_ILinearStylesAuto, __uuidof(_ILinearStylesAuto));
_COM_SMARTPTR_TYPEDEF(FillStyle, __uuidof(FillStyle));
_COM_SMARTPTR_TYPEDEF(_IFillStylesAuto, __uuidof(_IFillStylesAuto));
_COM_SMARTPTR_TYPEDEF(HatchPatternStyle, __uuidof(HatchPatternStyle));
_COM_SMARTPTR_TYPEDEF(_IHatchPatternStylesAuto, __uuidof(_IHatchPatternStylesAuto));
_COM_SMARTPTR_TYPEDEF(_IDashStyleAuto, __uuidof(_IDashStyleAuto));
_COM_SMARTPTR_TYPEDEF(DashStyle, __uuidof(DashStyle));
_COM_SMARTPTR_TYPEDEF(_IDashStylesAuto, __uuidof(_IDashStylesAuto));
_COM_SMARTPTR_TYPEDEF(_IFaceStyleAuto, __uuidof(_IFaceStyleAuto));
_COM_SMARTPTR_TYPEDEF(FaceStyle, __uuidof(FaceStyle));
_COM_SMARTPTR_TYPEDEF(_IFaceStylesAuto, __uuidof(_IFaceStylesAuto));
_COM_SMARTPTR_TYPEDEF(_ITextStyleAuto, __uuidof(_ITextStyleAuto));
_COM_SMARTPTR_TYPEDEF(TextStyle, __uuidof(TextStyle));
_COM_SMARTPTR_TYPEDEF(_ITextStylesAuto, __uuidof(_ITextStylesAuto));
_COM_SMARTPTR_TYPEDEF(_ITextCharStyleAuto, __uuidof(_ITextCharStyleAuto));
_COM_SMARTPTR_TYPEDEF(TextCharStyle, __uuidof(TextCharStyle));
_COM_SMARTPTR_TYPEDEF(_ITextCharStylesAuto, __uuidof(_ITextCharStylesAuto));
_COM_SMARTPTR_TYPEDEF(_ISymbol2dAuto, __uuidof(_ISymbol2dAuto));
_COM_SMARTPTR_TYPEDEF(Symbol2d, __uuidof(Symbol2d));
_COM_SMARTPTR_TYPEDEF(_ISymbolsAuto, __uuidof(_ISymbolsAuto));
_COM_SMARTPTR_TYPEDEF(_ISymbolPropertiesAuto, __uuidof(_ISymbolPropertiesAuto));
_COM_SMARTPTR_TYPEDEF(_IViewStyleAuto, __uuidof(_IViewStyleAuto));
_COM_SMARTPTR_TYPEDEF(ViewStyle, __uuidof(ViewStyle));
_COM_SMARTPTR_TYPEDEF(_IViewStylesAuto, __uuidof(_IViewStylesAuto));
_COM_SMARTPTR_TYPEDEF(_IReferenceAuto, __uuidof(_IReferenceAuto));
_COM_SMARTPTR_TYPEDEF(_IRoutingSlipAuto, __uuidof(_IRoutingSlipAuto));
_COM_SMARTPTR_TYPEDEF(Properties, __uuidof(Properties));
_COM_SMARTPTR_TYPEDEF(_IPropertySetsAuto, __uuidof(_IPropertySetsAuto));
_COM_SMARTPTR_TYPEDEF(Property, __uuidof(Property));
_COM_SMARTPTR_TYPEDEF(_IPropertiesAuto, __uuidof(_IPropertiesAuto));
_COM_SMARTPTR_TYPEDEF(_IPropertyAuto, __uuidof(_IPropertyAuto));
_COM_SMARTPTR_TYPEDEF(_IPropertyExAuto, __uuidof(_IPropertyExAuto));
_COM_SMARTPTR_TYPEDEF(_ISummaryInfoAuto, __uuidof(_ISummaryInfoAuto));
_COM_SMARTPTR_TYPEDEF(AttributeSet, __uuidof(AttributeSet));
_COM_SMARTPTR_TYPEDEF(_IAttributeSetsAuto, __uuidof(_IAttributeSetsAuto));
_COM_SMARTPTR_TYPEDEF(Attribute, __uuidof(Attribute));
_COM_SMARTPTR_TYPEDEF(_IAttributeSetAuto, __uuidof(_IAttributeSetAuto));
_COM_SMARTPTR_TYPEDEF(_IAttributeAuto, __uuidof(_IAttributeAuto));
_COM_SMARTPTR_TYPEDEF(QueryObjects, __uuidof(QueryObjects));
_COM_SMARTPTR_TYPEDEF(_IAttributeQueryAuto, __uuidof(_IAttributeQueryAuto));
_COM_SMARTPTR_TYPEDEF(_IQueryObjectsAuto, __uuidof(_IQueryObjectsAuto));
_COM_SMARTPTR_TYPEDEF(HighlightSet, __uuidof(HighlightSet));
_COM_SMARTPTR_TYPEDEF(_IHighlightSetsAuto, __uuidof(_IHighlightSetsAuto));
_COM_SMARTPTR_TYPEDEF(_IHighlightSetAuto, __uuidof(_IHighlightSetAuto));
_COM_SMARTPTR_TYPEDEF(_ISEGenericCollectionAuto, __uuidof(_ISEGenericCollectionAuto));
_COM_SMARTPTR_TYPEDEF(NamedViews, __uuidof(NamedViews));
_COM_SMARTPTR_TYPEDEF(UnitsOfMeasure, __uuidof(UnitsOfMeasure));
_COM_SMARTPTR_TYPEDEF(variable, __uuidof(variable));
_COM_SMARTPTR_TYPEDEF(VariableList, __uuidof(VariableList));
_COM_SMARTPTR_TYPEDEF(Variables, __uuidof(Variables));
_COM_SMARTPTR_TYPEDEF(InterpartLink, __uuidof(InterpartLink));
_COM_SMARTPTR_TYPEDEF(InterpartLinks, __uuidof(InterpartLinks));
_COM_SMARTPTR_TYPEDEF(Sensor, __uuidof(Sensor));
_COM_SMARTPTR_TYPEDEF(Sensors, __uuidof(Sensors));
_COM_SMARTPTR_TYPEDEF(SheetMetalSensors, __uuidof(SheetMetalSensors));
_COM_SMARTPTR_TYPEDEF(Layers, __uuidof(Layers));
_COM_SMARTPTR_TYPEDEF(DashStyles, __uuidof(DashStyles));
_COM_SMARTPTR_TYPEDEF(LinearStyles, __uuidof(LinearStyles));
_COM_SMARTPTR_TYPEDEF(FillStyles, __uuidof(FillStyles));
_COM_SMARTPTR_TYPEDEF(HatchPatternStyles, __uuidof(HatchPatternStyles));
_COM_SMARTPTR_TYPEDEF(FaceStyles, __uuidof(FaceStyles));
_COM_SMARTPTR_TYPEDEF(TextStyles, __uuidof(TextStyles));
_COM_SMARTPTR_TYPEDEF(TextCharStyles, __uuidof(TextCharStyles));
_COM_SMARTPTR_TYPEDEF(Symbols, __uuidof(Symbols));
_COM_SMARTPTR_TYPEDEF(ViewStyles, __uuidof(ViewStyles));
_COM_SMARTPTR_TYPEDEF(Reference, __uuidof(Reference));
_COM_SMARTPTR_TYPEDEF(RoutingSlip, __uuidof(RoutingSlip));
_COM_SMARTPTR_TYPEDEF(SymbolProperties, __uuidof(SymbolProperties));
_COM_SMARTPTR_TYPEDEF(PropertySets, __uuidof(PropertySets));
_COM_SMARTPTR_TYPEDEF(PropertyEx, __uuidof(PropertyEx));
_COM_SMARTPTR_TYPEDEF(SummaryInfo, __uuidof(SummaryInfo));
_COM_SMARTPTR_TYPEDEF(AttributeQuery, __uuidof(AttributeQuery));
_COM_SMARTPTR_TYPEDEF(HighlightSets, __uuidof(HighlightSets));
_COM_SMARTPTR_TYPEDEF(SEGenericCollection, __uuidof(SEGenericCollection));
_COM_SMARTPTR_TYPEDEF(AttributeSets, __uuidof(AttributeSets));
_COM_SMARTPTR_TYPEDEF(SolidEdgeDocument, __uuidof(SolidEdgeDocument));
_COM_SMARTPTR_TYPEDEF(PredefineRelationProducer, __uuidof(PredefineRelationProducer));
_COM_SMARTPTR_TYPEDEF(_ISolidEdgeDocumentAuto, __uuidof(_ISolidEdgeDocumentAuto));
_COM_SMARTPTR_TYPEDEF(_IPredefineRelationProducerAuto, __uuidof(_IPredefineRelationProducerAuto));
_COM_SMARTPTR_TYPEDEF(CPDInitializerInsightXT, __uuidof(CPDInitializerInsightXT));
_COM_SMARTPTR_TYPEDEF(_ICPDInitializerInsightXTAuto, __uuidof(_ICPDInitializerInsightXTAuto));
_COM_SMARTPTR_TYPEDEF(CPDInitializer, __uuidof(CPDInitializer));
_COM_SMARTPTR_TYPEDEF(_ICPDInitializerAuto, __uuidof(_ICPDInitializerAuto));
_COM_SMARTPTR_TYPEDEF(SectionView, __uuidof(SectionView));
_COM_SMARTPTR_TYPEDEF(SectionViews, __uuidof(SectionViews));
_COM_SMARTPTR_TYPEDEF(InterDocumentUpdate, __uuidof(InterDocumentUpdate));
_COM_SMARTPTR_TYPEDEF(_IInterDocumentUpdateAuto, __uuidof(_IInterDocumentUpdateAuto));
_COM_SMARTPTR_TYPEDEF(SteeringWheel, __uuidof(SteeringWheel));
_COM_SMARTPTR_TYPEDEF(_ISteeringWheelAuto, __uuidof(_ISteeringWheelAuto));
_COM_SMARTPTR_TYPEDEF(CPDInitializerBiDM, __uuidof(CPDInitializerBiDM));
_COM_SMARTPTR_TYPEDEF(_ISEInsight, __uuidof(_ISEInsight));
_COM_SMARTPTR_TYPEDEF(_ISolidEdgeTCE, __uuidof(_ISolidEdgeTCE));
_COM_SMARTPTR_TYPEDEF(_ISolidEdgeInsightXT, __uuidof(_ISolidEdgeInsightXT));
_COM_SMARTPTR_TYPEDEF(_IDynamicVisualization, __uuidof(_IDynamicVisualization));

//
// Type library items
//

struct __declspec(uuid("f9293970-4812-11ce-9647-0800367e0502"))
SelectSet : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetType))
    enum ObjectType Type;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    HRESULT Add (
        IDispatch * Dispatch );
    HRESULT Remove (
        const _variant_t & Index );
    HRESULT RemoveAll ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT AddAll ( );
    enum ObjectType GetType ( );
    HRESULT CopyProfile ( );
    HRESULT CutProfile ( );
    HRESULT SuspendDisplay ( );
    HRESULT ResumeDisplay ( );
    HRESULT RefreshDisplay ( );
};

struct __declspec(uuid("ded89db0-45b6-11ce-b307-0800363a1e02"))
Application : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetActiveDocument))
    IDispatchPtr ActiveDocument;
    __declspec(property(get=GetActiveEnvironment))
    _bstr_t ActiveEnvironment;
    __declspec(property(get=GetActivePrinter))
    _bstr_t ActivePrinter;
    __declspec(property(get=GetActiveSelectSet))
    SelectSetPtr ActiveSelectSet;
    __declspec(property(get=GetActiveStatusBarPart,put=PutActiveStatusBarPart))
    int ActiveStatusBarPart;
    __declspec(property(get=GetActiveWindow))
    IDispatchPtr ActiveWindow;
    __declspec(property(get=GetAddIns))
    AddInsPtr AddIns;
    __declspec(property(get=GetApplication))
    ApplicationPtr _Application;
    __declspec(property(get=GetCommandPredictionLearningMode,put=PutCommandPredictionLearningMode))
    VARIANT_BOOL CommandPredictionLearningMode;
    __declspec(property(get=GetSoldToID))
    _bstr_t SoldToID;
    __declspec(property(get=GetLicenseType))
    _bstr_t LicenseType;
    __declspec(property(get=GetActiveFramehWnd))
    long ActiveFramehWnd;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetDynamicVisualization))
    DynamicVisualizationPtr DynamicVisualization;
    __declspec(property(get=GetDefaultFilePath,put=PutDefaultFilePath))
    _bstr_t DefaultFilePath;
    __declspec(property(get=GetDisplayAlerts,put=PutDisplayAlerts))
    VARIANT_BOOL DisplayAlerts;
    __declspec(property(get=GetDisplayFullScreen,put=PutDisplayFullScreen))
    VARIANT_BOOL DisplayFullScreen;
    __declspec(property(get=GetDisplayRecentFiles,put=PutDisplayRecentFiles))
    VARIANT_BOOL DisplayRecentFiles;
    __declspec(property(get=GetDocuments))
    DocumentsPtr Documents;
    __declspec(property(get=GetLicenseHandle))
    __int64 LicenseHandle;
    __declspec(property(get=GetEnvironments))
    EnvironmentsPtr Environments;
    __declspec(property(get=GetOpenNonSolidEdgeFileUIEvents))
    IUnknownPtr OpenNonSolidEdgeFileUIEvents;
    __declspec(property(get=GetHeight,put=PutHeight))
    int Height;
    __declspec(property(get=GethWnd))
    long hWnd;
    __declspec(property(get=GetInteractive,put=PutInteractive))
    VARIANT_BOOL Interactive;
    __declspec(property(get=GetLeft,put=PutLeft))
    int Left;
    __declspec(property(get=GetMailSession))
    long MailSession;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetParent))
    ApplicationPtr Parent;
    __declspec(property(get=GetScreenUpdating,put=PutScreenUpdating))
    VARIANT_BOOL ScreenUpdating;
    __declspec(property(get=GetStatusBar,put=PutStatusBar))
    _bstr_t StatusBar;
    __declspec(property(get=GetStatusBarDelayUpdate,put=PutStatusBarDelayUpdate))
    VARIANT_BOOL StatusBarDelayUpdate;
    __declspec(property(get=GetStatusBarPartCount,put=PutStatusBarPartCount))
    int StatusBarPartCount;
    __declspec(property(get=GetStatusBarPartWidth,put=PutStatusBarPartWidth))
    int StatusBarPartWidth;
    __declspec(property(get=GetStatusBarVisible,put=PutStatusBarVisible))
    VARIANT_BOOL StatusBarVisible;
    __declspec(property(get=GetTop,put=PutTop))
    int Top;
    __declspec(property(get=GetUsableHeight))
    int UsableHeight;
    __declspec(property(get=GetUsableWidth))
    int UsableWidth;
    __declspec(property(get=GetUserName,put=PutUserName))
    _bstr_t UserName;
    __declspec(property(get=GetValue))
    _bstr_t Value;
    __declspec(property(get=GetVersion))
    _bstr_t Version;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetWidth,put=PutWidth))
    int Width;
    __declspec(property(get=GetWindows))
    WindowsPtr Windows;
    __declspec(property(get=GetWindowState,put=PutWindowState))
    int WindowState;
    __declspec(property(get=GetStatusBarHeight))
    int StatusBarHeight;
    __declspec(property(get=GetDisplayRecentFilesCount,put=PutDisplayRecentFilesCount))
    long DisplayRecentFilesCount;
    __declspec(property(get=GetDelayCompute,put=PutDelayCompute))
    VARIANT_BOOL DelayCompute;
    __declspec(property(get=GetApplicationWindowEvents))
    IUnknownPtr ApplicationWindowEvents;
    __declspec(property(get=GetApplicationEvents))
    IUnknownPtr ApplicationEvents;
    __declspec(property(get=GetActiveDocumentType))
    enum DocumentTypeConstants ActiveDocumentType;
    __declspec(property(get=GetFileUIEvents))
    IUnknownPtr FileUIEvents;
    __declspec(property(get=GetEnableStereo,put=PutEnableStereo))
    VARIANT_BOOL EnableStereo;
    __declspec(property(get=GetEdgeBarVisible,put=PutEdgeBarVisible))
    VARIANT_BOOL EdgeBarVisible;
    __declspec(property(get=GetFeatureLibraryEvents))
    IUnknownPtr FeatureLibraryEvents;
    __declspec(property(get=GetActiveObject))
    IDispatchPtr ActiveObject[];
    __declspec(property(get=GetInsight))
    InsightPtr Insight;
    __declspec(property(get=GetApplicationV8AfterDocumentOpenEvent))
    IUnknownPtr ApplicationV8AfterDocumentOpenEvent;
    __declspec(property(get=GetNewFileUIEvents))
    IUnknownPtr NewFileUIEvents;
    __declspec(property(get=GetShortcutMenuEvents))
    IUnknownPtr ShortcutMenuEvents;
    __declspec(property(get=GetApprenticeMode,put=PutApprenticeMode))
    VARIANT_BOOL ApprenticeMode;
    __declspec(property(get=GetShowStartupScreen,put=PutShowStartupScreen))
    VARIANT_BOOL ShowStartupScreen;
    __declspec(property(get=GetSolidEdgeTCE))
    SolidEdgeTCEPtr SolidEdgeTCE;
    __declspec(property(get=GetIsIdling))
    VARIANT_BOOL IsIdling[];
    __declspec(property(get=GetResolveLink,put=PutResolveLink))
    VARIANT_BOOL ResolveLink;
    __declspec(property(get=GetProcessID))
    int ProcessID;
    __declspec(property(get=GetSEECEvents))
    IUnknownPtr SEECEvents;
    __declspec(property(get=GetCustomization))
    CustomizationPtr Customization;
    __declspec(property(get=GetSolidEdgeInsightXT))
    SolidEdgeInsightXTPtr SolidEdgeInsightXT;
    __declspec(property(get=GetSESPEvents))
    IUnknownPtr SESPEvents;
    __declspec(property(get=GetBeforeFileSaveAsEvents))
    IUnknownPtr BeforeFileSaveAsEvents;
    __declspec(property(get=GetRegistryPath))
    _bstr_t RegistryPath;
    __declspec(property(get=GetAppDataFolder))
    _bstr_t AppDataFolder;
    __declspec(property(get=GetFeatureSelectedFromPFEvents))
    IUnknownPtr FeatureSelectedFromPFEvents;
    __declspec(property(get=GetBiDMEvents))
    IUnknownPtr BiDMEvents;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT Activate ( );
    IDispatchPtr GetActiveDocument ( );
    _bstr_t GetActiveEnvironment ( );
    _bstr_t GetActivePrinter ( );
    SelectSetPtr GetActiveSelectSet ( );
    int GetActiveStatusBarPart ( );
    void PutActiveStatusBarPart (
        int _arg1 );
    IDispatchPtr GetActiveWindow ( );
    ApplicationPtr GetApplication ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    _bstr_t GetDefaultFilePath ( );
    void PutDefaultFilePath (
        _bstr_t _arg1 );
    void PutDelayCompute (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDelayCompute ( );
    VARIANT_BOOL GetDisplayAlerts ( );
    void PutDisplayAlerts (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayFullScreen ( );
    void PutDisplayFullScreen (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayRecentFiles ( );
    void PutDisplayRecentFiles (
        VARIANT_BOOL _arg1 );
    long GetDisplayRecentFilesCount ( );
    void PutDisplayRecentFilesCount (
        long _arg1 );
    DocumentsPtr GetDocuments ( );
    EnvironmentsPtr GetEnvironments ( );
    _variant_t SEGetOpenFileName (
        enum LinksUpdateOption * LinksUpdate,
        BSTR * AltLinkPath,
        enum DocumentAccess * DocAccess,
        enum NotifyOption * OptNotify,
        IDispatch * * DocRelationAutoServer,
        const _variant_t & FileFilter = vtMissing,
        const _variant_t & FilterIndex = vtMissing,
        const _variant_t & Title = vtMissing,
        const _variant_t & IgnoreWarnings = vtMissing );
    long SearchDocuments (
        VARIANT_BOOL bUseSearchScope,
        _bstr_t bstrFolders,
        VARIANT_BOOL bIncludeSubFolders,
        VARIANT * ListOfFoundDocuments,
        long * iNumDocsFound,
        const _variant_t & varFileFilterOrText = vtMissing,
        const _variant_t & PropertyList = vtMissing,
        const _variant_t & ConditionList = vtMissing,
        const _variant_t & PropertyValueList = vtMissing,
        const _variant_t & varNumProps = vtMissing,
        const _variant_t & varCheckModified = vtMissing,
        const _variant_t & varNumberOfDays = vtMissing,
        VARIANT * ListOfTitles = &vtMissing,
        VARIANT * ListOfSubjects = &vtMissing,
        VARIANT * ListOfModifiedDates = &vtMissing );
    _variant_t GetSaveAsFileName (
        int * LinkSaveOption,
        long * SelectedFilter,
        const _variant_t & InitialFilename = vtMissing,
        const _variant_t & FileFilter = vtMissing,
        const _variant_t & FilterIndex = vtMissing,
        const _variant_t & Title = vtMissing,
        const _variant_t & IsTemplate = vtMissing );
    _variant_t FindFile ( );
    _variant_t GetDirectoryName ( );
    int GetHeight ( );
    void PutHeight (
        int _arg1 );
    long GethWnd ( );
    VARIANT_BOOL GetInteractive ( );
    void PutInteractive (
        VARIANT_BOOL _arg1 );
    int GetLeft ( );
    void PutLeft (
        int _arg1 );
    HRESULT MailLogoff ( );
    HRESULT MailLogon (
        const _variant_t & Name = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & DownloadNewMail = vtMissing );
    long GetMailSession ( );
    _bstr_t GetName ( );
    ApplicationPtr GetParent ( );
    HRESULT Quit ( );
    VARIANT_BOOL GetScreenUpdating ( );
    void PutScreenUpdating (
        VARIANT_BOOL _arg1 );
    _bstr_t GetStatusBar ( );
    void PutStatusBar (
        _bstr_t _arg1 );
    VARIANT_BOOL GetStatusBarDelayUpdate ( );
    void PutStatusBarDelayUpdate (
        VARIANT_BOOL _arg1 );
    int GetStatusBarHeight ( );
    int GetStatusBarPartCount ( );
    void PutStatusBarPartCount (
        int _arg1 );
    int GetStatusBarPartWidth ( );
    void PutStatusBarPartWidth (
        int _arg1 );
    VARIANT_BOOL GetStatusBarVisible ( );
    void PutStatusBarVisible (
        VARIANT_BOOL _arg1 );
    int GetTop ( );
    void PutTop (
        int _arg1 );
    int GetUsableHeight ( );
    int GetUsableWidth ( );
    _bstr_t GetUserName ( );
    void PutUserName (
        _bstr_t _arg1 );
    _bstr_t GetValue ( );
    _bstr_t GetVersion ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    int GetWidth ( );
    void PutWidth (
        int _arg1 );
    WindowsPtr GetWindows ( );
    int GetWindowState ( );
    void PutWindowState (
        int _arg1 );
    IUnknownPtr GetApplicationEvents ( );
    IUnknownPtr GetApplicationWindowEvents ( );
    enum DocumentTypeConstants GetActiveDocumentType ( );
    IUnknownPtr GetFileUIEvents ( );
    IUnknownPtr GetBeforeFileSaveAsEvents ( );
    HRESULT StartCommand (
        enum SolidEdgeCommandConstants CommandID );
    VARIANT_BOOL CommandEnabled (
        int CommandID,
        _bstr_t strEnvironment,
        VARIANT_BOOL * bLicensed,
        VARIANT_BOOL * bUnknownCmd );
    DISECommandPtr CreateCommand (
        long CmdFlags );
    HRESULT ReplaceReference (
        const _variant_t & FromReference = vtMissing,
        const _variant_t & ToReference = vtMissing,
        const _variant_t & Scope = vtMissing,
        const _variant_t & Recursive = vtMissing );
    HRESULT RunMacro (
        _bstr_t Filename );
    AddInsPtr GetAddIns ( );
    VARIANT_BOOL GetEnableStereo ( );
    void PutEnableStereo (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetEdgeBarVisible ( );
    void PutEdgeBarVisible (
        VARIANT_BOOL _arg1 );
    IUnknownPtr GetFeatureLibraryEvents ( );
    HRESULT GetGlobalParameter (
        enum ApplicationGlobalConstants Parameter,
        VARIANT * Value );
    HRESULT SetGlobalParameter (
        enum ApplicationGlobalConstants Parameter,
        const _variant_t & Value );
    IDispatchPtr GetActiveObject (
        enum SeObjectType Type );
    InsightPtr GetInsight ( );
    IUnknownPtr GetApplicationV8AfterDocumentOpenEvent ( );
    HRESULT SetOLERequestPendingTimeout (
        const _variant_t & SetOLERequestPendingTimeout = vtMissing );
    HRESULT SetOLEServerBusyTimeout (
        const _variant_t & SetOLEServerBusyTimeout = vtMissing );
    IUnknownPtr GetFeatureSelectedFromPFEvents ( );
    HRESULT CreateSEDocumentFromTDMAuto (
        _bstr_t bstrHostName,
        _bstr_t bstrServerName,
        _bstr_t bstrFolderLocation,
        _bstr_t bstrProject,
        _bstr_t bstrLibrary,
        _bstr_t bstrItemGUID,
        _bstr_t bstrVersionGUID,
        _bstr_t bstrVersionNumber,
        enum DocumentTypeConstants SEDocType,
        _bstr_t bstrAssemblyTemplate,
        _bstr_t bstrPartTemplate );
    HRESULT CreateSEDraftDocFromDXFAuto (
        _bstr_t bstrDxfFileName,
        _bstr_t bstrDraftFileLocation,
        _bstr_t bstrDraftTemplateFile,
        _bstr_t bstrclsidDoc );
    HRESULT CreateSEDocumentFromForeignFile (
        _bstr_t bstrForeignFilePath,
        _bstr_t bstrSEFileLocation,
        _bstr_t bstrTemplatePath,
        _bstr_t bstrClsid,
        enum BulkMigrationTypeConstants MigrationType );
    _bstr_t GetTemplateFileName (
        enum DocumentTypeConstants * DocType,
        const _variant_t & FileFilter = vtMissing );
    _bstr_t GetDefaultTemplatePath (
        enum DocumentTypeConstants DocType );
    HRESULT SetDefaultTemplatePath (
        enum DocumentTypeConstants DocType,
        _bstr_t TemplatePath );
    HRESULT DoIdle ( );
    MatTablePtr GetMaterialTable ( );
    IUnknownPtr GetNewFileUIEvents ( );
    HRESULT SEAdminUpdate ( );
    IUnknownPtr GetShortcutMenuEvents ( );
    VARIANT_BOOL GetApprenticeMode ( );
    void PutApprenticeMode (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowStartupScreen ( );
    void PutShowStartupScreen (
        VARIANT_BOOL _arg1 );
    SolidEdgeTCEPtr GetSolidEdgeTCE ( );
    SolidEdgeInsightXTPtr GetSolidEdgeInsightXT ( );
    VARIANT_BOOL GetIsIdling (
        long MilliSec );
    VARIANT_BOOL GetResolveLink ( );
    void PutResolveLink (
        VARIANT_BOOL _arg1 );
    HRESULT DisableEventsForGivenAddIn (
        _bstr_t bstrClsid );
    HRESULT SetAddInInterfaces (
        _bstr_t bstrClsid,
        SAFEARRAY * * pSaUnknownPtrs );
    HRESULT EnableEventsForGivenAddIn (
        _bstr_t bstrClsid );
    HRESULT ShowCommand (
        int nCmdID,
        VARIANT_BOOL Highlight );
    int GetProcessID ( );
    IUnknownPtr GetSEECEvents ( );
    IUnknownPtr GetSESPEvents ( );
    IUnknownPtr GetBiDMEvents ( );
    HRESULT WriteDocumentFormulaIntoXML (
        _bstr_t outputXMLPath,
        _bstr_t knownResXMLPath,
        VARIANT_BOOL bDeepTree );
    HRESULT SetBuiltInATPRunningFlagAndATPID (
        VARIANT_BOOL bRunningFlag,
        _bstr_t strATPID );
    HRESULT SetValuesForBIDMCPD (
        VARIANT * pvarListOfValues );
    HRESULT SetMessageForBIDMCPD (
        VARIANT * pvarListOfMessages );
    HRESULT SetBIDMATPInfo (
        _bstr_t bstrATPClassName,
        _bstr_t bstrATPName,
        long ATPId );
    int GetCountOfOpenModelsInFemap ( );
    CustomizationPtr GetCustomization ( );
    IDispatchPtr GetDraftPrintUtility ( );
    HRESULT ArrangeWindows (
        enum ArrangeWindowsStyles Style );
    _variant_t GetOpenFileNameWithOptions (
        unsigned long dwFlagForOpen,
        enum LinksUpdateOption * LinksUpdate,
        BSTR * AltLinkPath,
        enum DocumentAccess * DocAccess,
        enum NotifyOption * OptNotify,
        IDispatch * * DocRelationAutoServer,
        const _variant_t & FileFilter = vtMissing,
        const _variant_t & FilterIndex = vtMissing,
        const _variant_t & Title = vtMissing,
        const _variant_t & IgnoreWarnings = vtMissing );
    HRESULT SEGetFileVersionInfo (
        _bstr_t Filename,
        enum DocumentTypeConstants * DocType,
        BSTR * CreatedVersion,
        BSTR * LastSavedVersion,
        unsigned long * GeometricVersion );
    HRESULT GenerateMasterImportListForDataPrep (
        SAFEARRAY * * psalistOfFilesFolders,
        VARIANT_BOOL IncludeSubFolders,
        unsigned long FileTypes,
        _bstr_t TimeStamp,
        _bstr_t WorkingFolderLocation,
        BSTR * OrderedCSVFilePath,
        BSTR * UnOrderedCSVFilePath,
        BSTR * BrokenLinkXMLFilePath,
        int * iNumberOfBrokenLinks,
        BSTR * LinkReportFilePath,
        BSTR * ErrorMsg,
        enum GenerateMasterImportListError * ErrCode );
    _variant_t FindWhereUsedDocuments (
        const _variant_t & DocumentPathName,
        SAFEARRAY * * psalistOfDirectories,
        VARIANT_BOOL IncludeSubFolders,
        SAFEARRAY * * psaFilterList );
    _variant_t QuerySystemInformation (
        _bstr_t Search );
    HRESULT DisableBuilInDataMgmt (
        VARIANT_BOOL bDisableBuiltInDM );
    _bstr_t GetRegistryPath ( );
    _bstr_t GetAppDataFolder ( );
    HRESULT GetRevisionLinkInfo (
        _bstr_t bstrFilePath,
        VARIANT * pVarRevisionRoot,
        VARIANT * pVarRevisedFrom );
    HRESULT GetRevisionsHistory (
        _bstr_t PathName,
        SAFEARRAY * * psaScope,
        VARIANT * psaRevHistoryFileNameList,
        VARIANT * psaRevHistoryRevisionFromList );
    HRESULT OpenDraft ( );
    HRESULT GetLatestRevision (
        _bstr_t PathName,
        SAFEARRAY * * psaScope,
        BSTR * bLatestRevPath,
        BSTR * bLatestReleasedRevPath );
    HRESULT GetTopLevelAssemblyFileNames (
        SAFEARRAY * * FileNames,
        SAFEARRAY * * TopLevelAssemblyFileNames );
    HRESULT FindSEDocumentsContainingText (
        _bstr_t text_to_search,
        SAFEARRAY * * psaScope,
        _bstr_t file_types,
        VARIANT_BOOL bIncludeSubFolders,
        SAFEARRAY * * FilesFoundInSearch );
    HRESULT ResetConfigFile (
        enum ConfigResetType eResetType,
        enum ConfigForForeignFileType eConfigFileType,
        enum FileTranslationMode eTranslationMode,
        _bstr_t GroupName,
        VARIANT * pFile = &vtMissing,
        VARIANT * pTemplateName = &vtMissing );
    long GetNextDocumentNumbers (
        int countOfFiles,
        VARIANT * pVarPrefix,
        VARIANT * pVarDocNumbs );
    HRESULT Get_Set_UseBiDM_SEOption (
        VARIANT_BOOL bGet,
        VARIANT_BOOL * iValue );
    HRESULT Get_Set_FileNamingRule (
        VARIANT_BOOL bGet,
        VARIANT_BOOL * bValue );
    _bstr_t GetDocNameFormulaForFile (
        _bstr_t bFilename );
    HRESULT BiDM_RegisterCustomProps (
        VARIANT_BOOL bProcessCustomPropsFromPropSeed,
        VARIANT_BOOL bProcessCustomPropsFromTemplates );
    HRESULT PerformSolidEdgeWorkflow (
        _bstr_t bstrFilePath,
        struct SolidEdgeWorkflowInfo * pSEWorkflowInfo );
    HRESULT GetSolidEdgeWorkflowInformation (
        _bstr_t bstrFilePath,
        struct SolidEdgeWorkflowQueryInfo * pSEWorkflowQueryInfo );
    HRESULT SuspendMRU ( );
    HRESULT ResumeMRU ( );
    HRESULT ClearMRU ( );
    HRESULT AbortCommand (
        VARIANT_BOOL AbortAllCommands );
    VARIANT_BOOL Publish3DPDF (
        _bstr_t bstrInputFileOrFolderPath,
        _bstr_t bstr3DPDFTemplateFile,
        VARIANT_BOOL bIncludeSubFolders,
        _bstr_t bstrOutputFolderPath,
        _bstr_t bstr3DPDFFileName,
        VARIANT_BOOL bOpenPDFAfterPublish,
        VARIANT_BOOL bPublishHTML,
        VARIANT_BOOL bAddNextPrevButtons,
        VARIANT_BOOL bAddFileCustomPropsToPDF,
        VARIANT_BOOL bSelectAllPMIModelViewsForPDF,
        _bstr_t bstrDefaultModelView,
        VARIANT_BOOL bGenAndAttachSTEPAP242,
        VARIANT_BOOL bGenAndAttachJT,
        const _variant_t & ListOfAttachments = vtMissing );
    VARIANT_BOOL ConvertByFilePath (
        _bstr_t InputFileOrFolderPath,
        _bstr_t OutputFileOrFolderPath );
    VARIANT_BOOL GetCommandPredictionLearningMode ( );
    void PutCommandPredictionLearningMode (
        VARIANT_BOOL _arg1 );
    _bstr_t GetSoldToID ( );
    HRESULT GetListOfTopLevelAssembliesFromFolder (
        _bstr_t FolderPath,
        SAFEARRAY * * TopAssembliesList );
    _bstr_t GetLicenseType ( );
    HRESULT GenerateSourceImportListForDataPrep (
        SAFEARRAY * * psalistOfFilesFolders,
        VARIANT_BOOL IncludeSubFolders,
        unsigned long FileTypes,
        _bstr_t TimeStamp,
        _bstr_t WorkingFolderLocation,
        BSTR * OrderedCSVFilePath,
        BSTR * UnOrderedCSVFilePath,
        BSTR * BrokenLinkXMLFilePath,
        int * iNumberOfBrokenLinks,
        BSTR * LinkReportFilePath,
        BSTR * ErrorMsg,
        enum GenerateSourceImportListError * ErrCode );
    long GetActiveFramehWnd ( );
    DynamicVisualizationPtr GetDynamicVisualization ( );
    __int64 GetLicenseHandle ( );
    HRESULT OpenNoteLibrary ( );
    HRESULT CloseNoteLibrary ( );
    HRESULT GetSavedNoteList (
        SAFEARRAY * * saSavedNote );
    IUnknownPtr GetSavedNote (
        _bstr_t bstrNoteName );
    HRESULT AddNote (
        _bstr_t bstrNoteName,
        _bstr_t bstrText,
        VARIANT_BOOL bNoteOverWrite );
    VARIANT_BOOL Publish3DPDFEx (
        _bstr_t bstrInputFileOrFolderPath,
        _bstr_t bstr3DPDFTemplateFile,
        VARIANT_BOOL bIncludeSubFolders,
        _bstr_t bstrOutputFolderPath,
        _bstr_t bstr3DPDFFileName,
        VARIANT_BOOL bOpenPDFAfterPublish,
        VARIANT_BOOL bPublishHTML,
        VARIANT_BOOL bAddNextPrevButtons,
        VARIANT_BOOL bAddFileCustomPropsToPDF,
        VARIANT_BOOL bSelectAllPMIModelViewsForPDF,
        _bstr_t bstrDefaultModelView,
        VARIANT_BOOL bGenAndAttachSTEPAP242,
        VARIANT_BOOL bGenAndAttachJT,
        const _variant_t & ListOfAttachments,
        VARIANT_BOOL bSelectAllNamedViewsForPDF,
        const _variant_t & ListOfNamedViews = vtMissing,
        const _variant_t & ListOfPMIModelViews = vtMissing );
    long GetActiveCommand ( );
    IUnknownPtr GetOpenNonSolidEdgeFileUIEvents ( );
    VARIANT_BOOL LicenseCheck (
        enum SELicenseCheck Type,
        _bstr_t Feature );
};

enum ObjectType
{
    igReference = -768828720,
    igHorizontalRelation2d = -280074960,
    igVerticalRelation2d = -83892864,
    igPointOnRelation2d = 273497200,
    igParallelRelation2d = 463670656,
    igPerpendicularRelation2d = 640124384,
    igKeyPointRelation2d = 768508992,
    igIntersectRelation2d = 1166881824,
    igSetRelation2d = 769466240,
    igTangentRelation2d = 709097856,
    igFixRelation2d = -902087584,
    igHorizontalAlignRelation2d = -401894992,
    igVerticalAlignRelation2d = -1179755088,
    igConcentricRelation2d = 1679388272,
    igSymmetricRelation2d = -1337543808,
    igOffsetRelation2d = 296913277,
    igEqualRelation2d = -1337543803,
    igColinearRelation2d = -1337543801,
    igFilletRelation2d = -367594016,
    igChamferRelation2d = 1650559520,
    igLinkRelation2d = 1650559521,
    igSheetView = -945616692,
    igDimension = 488188096,
    igLeader = 1421415312,
    igDatumFrame = -1727514096,
    igFeatureContolFrame = 77832960,
    igFeatureControlFrame = 77832960,
    igSurfaceFinishTexture = 1546072208,
    igWeldSymbol = -42581280,
    igBalloon = 384307874,
    igCenterMark = 505332096,
    igCenterLine = 505332097,
    igBoltHoleCircle = -1157564964,
    igDatumTarget = 1370023760,
    igPinSymbol = 278904517,
    igDatumPoint = -1927130447,
    igTextBox = 2004510816,
    igTextProfile = 18394125,
    igSmartFrame2d = 1532309040,
    igArc2d = -1654322688,
    igBsplineCurve2d = -1803336960,
    igCircle2d = -1876241792,
    igComplexString2d = 928044128,
    igFittedCurve2d = -822504112,
    igEllipticalArc2d = -566911424,
    igEllipse2d = -1555480560,
    igLine2d = 760091584,
    igLineString2d = -126503776,
    igPoint2d = -1728529392,
    igBoundary2d = 515045920,
    igSymbol2d = 1906059870,
    igHole2d = 82322336,
    igRectangularPattern2d = -318384800,
    igCircularPattern2d = 161169008,
    igImage2d = 2018227021,
    igGroundRelation3d = 1959028688,
    igAxialRelation3d = 1472929712,
    igPlanarRelation3d = -2058948880,
    igPointRelation3d = -31813184,
    igAngularRelation3d = 1290792304,
    igTangentRelation3d = 918452310,
    igCamFollowerRelation3d = -1356510324,
    igGearRelation3d = -1244417873,
    igCenterPlaneRelation3d = -890093169,
    igRigidSetRelation3d = 1917428400,
    igPathRelation3d = -1356510323,
    igCoordinateSystemRelation3d = -1282956375,
    igPart = -1879909117,
    igSubAssembly = -1879909116,
    igDrawingView = 1298446368,
    igViewPlane = -1454771360,
    igCuttingPlane = -987770656,
    igDetailEnvelope = -1650313040,
    igGroup = -637360432,
    igSubOccurrence = -1020639365,
    igTopologyReference = 1820054840,
    igDividedPart = -1940558319,
    igFamilyMember = 640059719,
    igTube = 1453593158,
    igVariable = 1984425411,
    igRefPlane = 732824896,
    igRefAxis = -961115504,
    igAsmRefPlane = -1442041198,
    igSketch = 1689979564,
    seDVLine2d = 877758166,
    seDVArc2d = -1804156302,
    seDVBSplineCurve2d = 1550814640,
    seDVCircle2d = -2074243498,
    seDVEllipse2d = -429893932,
    seDVLineString2d = 1720171476,
    seDVEllipticalArc2d = -1799795820,
    seDVPoint2d = 206852904,
    seLineSegment = 1453593156,
    seArcSegment = -1796011174,
    seSegmentDirectionRelation3d = 1491687901,
    seSegmentDistanceRelation3d = 1491687902,
    seSegmentRadiusRelation3d = -1607610092,
    seSegmentAngularRelation3d = -1887087796,
    seSegmentPointRelation3d = 1491687900,
    seSegmentTangentRelation3d = 1576341804,
    seOccurrences = -825730197,
    seLayout = 911078209,
    seSelectSet = -586046304,
    seCurveSegment = 1430040056,
    seVirtualComponent = 1890705030,
    seVirtualComponentOccurrence = -1170758697,
    igComponentImage2d = -1362100758,
    igComponentSketch = -1272438573,
    seComponentLayout = 2038767277,
    seConfiguration = 2079619202,
    seAssemblyBodies = 1900166059,
    seAssemblyBody = -1873862129,
    seSubassemblyBodies = -794120783,
    seSubassemblyBody = 1233590176,
    seAssemblyGroup = 676108639,
    seAssemblyGroups = -2004545918,
    igGostWeldSymbol = -94114560,
    igConnector = 1859111096,
    igProfile = 1584866912,
    igProfileSet = -1521484909,
    igOccurrence = 1610764741,
    seSimplifiedAssembly = -1840907999,
    igSketch3D = -2054330988,
    igCircle3D = -1495700349,
    igArc3D = 2034152404,
    igLine3D = 940686830,
    igBSplineCurve3D = 1245532886,
    igCornerAnnotation = 815208865,
    igPoint3D = 1870596239,
    igMeasureVariable = 922931924,
    igConic2d = 1525194611,
    igSlotRelation3d = 1821854966
};

struct __declspec(uuid("d008fb46-f0e0-11d1-bdfe-080036b4d502"))
_ISelectSetAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetType))
    enum ObjectType Type;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    HRESULT Add (
        IDispatch * Dispatch );
    HRESULT Remove (
        const _variant_t & Index );
    HRESULT RemoveAll ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT AddAll ( );
    enum ObjectType GetType ( );
    HRESULT CopyProfile ( );
    HRESULT CutProfile ( );
    HRESULT SuspendDisplay ( );
    HRESULT ResumeDisplay ( );
    HRESULT RefreshDisplay ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ IDispatch * Dispatch ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ VARIANT Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Unknown ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_AddAll ( ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ObjectType * Type ) = 0;
      virtual HRESULT __stdcall raw_CopyProfile ( ) = 0;
      virtual HRESULT __stdcall raw_CutProfile ( ) = 0;
      virtual HRESULT __stdcall raw_SuspendDisplay ( ) = 0;
      virtual HRESULT __stdcall raw_ResumeDisplay ( ) = 0;
      virtual HRESULT __stdcall raw_RefreshDisplay ( ) = 0;
};

struct __declspec(uuid("290d47b0-f718-11cd-8b57-080036181e02"))
Documents : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetParent))
    ApplicationPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetTemplatePath))
    _bstr_t TemplatePath;
    __declspec(property(get=GetAutoCadConfigFile,put=PutAutoCadConfigFile))
    _bstr_t AutoCadConfigFile;
    __declspec(property(get=GetTemplateManager))
    TemplateManagerPtr TemplateManager;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    ApplicationPtr GetApplication ( );
    HRESULT Close ( );
    long GetCount ( );
    ApplicationPtr GetParent ( );
    IDispatchPtr Add (
        const _variant_t & ProgID = vtMissing,
        const _variant_t & TemplateDoc = vtMissing );
    IDispatchPtr Item (
        const _variant_t & Index );
    IDispatchPtr Open (
        _bstr_t Filename,
        const _variant_t & DocRelationAutoServer = vtMissing,
        const _variant_t & AltPath = vtMissing,
        const _variant_t & RecognizeFeaturesIfPartTemplate = vtMissing,
        const _variant_t & RevisionRuleOption = vtMissing,
        const _variant_t & StopFileOpenIfRevisionRuleNotApplicable = vtMissing );
    IDispatchPtr OpenWithTemplate (
        _bstr_t Filename,
        _bstr_t Template,
        const _variant_t & RecognizeFeaturesIfPartTemplate = vtMissing );
    _bstr_t GetTemplatePath ( );
    _bstr_t GetAutoCadConfigFile ( );
    void PutAutoCadConfigFile (
        _bstr_t _arg1 );
    HRESULT SetForeignFileConfigValue (
        _bstr_t DocumentProgID,
        _bstr_t Filename,
        _bstr_t SectionName,
        _bstr_t Name,
        _bstr_t Value );
    _bstr_t GetForeignFileConfigValue (
        _bstr_t DocumentProgID,
        _bstr_t Filename,
        _bstr_t SectionName,
        _bstr_t Name );
    HRESULT CloseDocument (
        _bstr_t Filename,
        const _variant_t & SaveChanges = vtMissing,
        const _variant_t & SaveAsFileName = vtMissing,
        const _variant_t & RouteWorkbook = vtMissing,
        const _variant_t & DoIdle = vtMissing );
    TemplateManagerPtr GetTemplateManager ( );
    IDispatchPtr OpenWithFileOpenDialog (
        const _variant_t & Filename = vtMissing,
        const _variant_t & DialogTitle = vtMissing,
        const _variant_t & Flags = vtMissing );
};

struct __declspec(uuid("b6861a91-0ae6-465d-a7e8-9ce03269b9cd"))
TemplateManager : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    HRESULT GetActiveTemplates (
        BSTR * bstrActiveListPath,
        enum TemplatesListType * eActiveListType,
        SAFEARRAY * * astrActiveTemplates );
};

struct __declspec(uuid("c1e8fdf7-fbe0-11d1-be0a-080036b4d502"))
_IDocumentsAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetParent))
    ApplicationPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetTemplatePath))
    _bstr_t TemplatePath;
    __declspec(property(get=GetAutoCadConfigFile,put=PutAutoCadConfigFile))
    _bstr_t AutoCadConfigFile;
    __declspec(property(get=GetTemplateManager))
    TemplateManagerPtr TemplateManager;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    ApplicationPtr GetApplication ( );
    HRESULT Close ( );
    long GetCount ( );
    ApplicationPtr GetParent ( );
    IDispatchPtr Add (
        const _variant_t & ProgID = vtMissing,
        const _variant_t & TemplateDoc = vtMissing );
    IDispatchPtr Item (
        const _variant_t & Index );
    IDispatchPtr Open (
        _bstr_t Filename,
        const _variant_t & DocRelationAutoServer = vtMissing,
        const _variant_t & AltPath = vtMissing,
        const _variant_t & RecognizeFeaturesIfPartTemplate = vtMissing,
        const _variant_t & RevisionRuleOption = vtMissing,
        const _variant_t & StopFileOpenIfRevisionRuleNotApplicable = vtMissing );
    IUnknownPtr Get_NewEnum ( );
    IDispatchPtr OpenWithTemplate (
        _bstr_t Filename,
        _bstr_t Template,
        const _variant_t & RecognizeFeaturesIfPartTemplate = vtMissing );
    _bstr_t GetTemplatePath ( );
    _bstr_t GetAutoCadConfigFile ( );
    void PutAutoCadConfigFile (
        _bstr_t AutoCadConfigFile );
    HRESULT SetForeignFileConfigValue (
        _bstr_t DocumentProgID,
        _bstr_t Filename,
        _bstr_t SectionName,
        _bstr_t Name,
        _bstr_t Value );
    _bstr_t GetForeignFileConfigValue (
        _bstr_t DocumentProgID,
        _bstr_t Filename,
        _bstr_t SectionName,
        _bstr_t Name );
    HRESULT CloseDocument (
        _bstr_t Filename,
        const _variant_t & SaveChanges = vtMissing,
        const _variant_t & SaveAsFileName = vtMissing,
        const _variant_t & RouteWorkbook = vtMissing,
        const _variant_t & DoIdle = vtMissing );
    TemplateManagerPtr GetTemplateManager ( );
    IDispatchPtr OpenWithFileOpenDialog (
        const _variant_t & Filename = vtMissing,
        const _variant_t & DialogTitle = vtMissing,
        const _variant_t & Flags = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct Application * * Application ) = 0;
      virtual HRESULT __stdcall raw_Close ( ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct Application * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT ProgID,
        /*[in]*/ VARIANT TemplateDoc,
        /*[out,retval]*/ IDispatch * * NewDocument ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * Item ) = 0;
      virtual HRESULT __stdcall raw_Open (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT DocRelationAutoServer,
        /*[in]*/ VARIANT AltPath,
        /*[in]*/ VARIANT RecognizeFeaturesIfPartTemplate,
        /*[in]*/ VARIANT RevisionRuleOption,
        /*[in]*/ VARIANT StopFileOpenIfRevisionRuleNotApplicable,
        /*[out,retval]*/ IDispatch * * Document ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Unknown ) = 0;
      virtual HRESULT __stdcall raw_OpenWithTemplate (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR Template,
        /*[in]*/ VARIANT RecognizeFeaturesIfPartTemplate,
        /*[out,retval]*/ IDispatch * * Document ) = 0;
      virtual HRESULT __stdcall get_TemplatePath (
        /*[out,retval]*/ BSTR * TemplatePath ) = 0;
      virtual HRESULT __stdcall get_AutoCadConfigFile (
        /*[out,retval]*/ BSTR * AutoCadConfigFile ) = 0;
      virtual HRESULT __stdcall put_AutoCadConfigFile (
        /*[in]*/ BSTR AutoCadConfigFile ) = 0;
      virtual HRESULT __stdcall raw_SetForeignFileConfigValue (
        /*[in]*/ BSTR DocumentProgID,
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR SectionName,
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall raw_GetForeignFileConfigValue (
        /*[in]*/ BSTR DocumentProgID,
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR SectionName,
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall raw_CloseDocument (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT SaveChanges = vtMissing,
        /*[in]*/ VARIANT SaveAsFileName = vtMissing,
        /*[in]*/ VARIANT RouteWorkbook = vtMissing,
        /*[in]*/ VARIANT DoIdle = vtMissing ) = 0;
      virtual HRESULT __stdcall get_TemplateManager (
        /*[out,retval]*/ struct TemplateManager * * ppTemplateManager ) = 0;
      virtual HRESULT __stdcall raw_OpenWithFileOpenDialog (
        /*[in]*/ VARIANT Filename,
        /*[in]*/ VARIANT DialogTitle,
        /*[in]*/ VARIANT Flags,
        /*[out,retval]*/ IDispatch * * Document ) = 0;
};

enum TemplatesListType
{
    eUnknownTemplateList = 0,
    eStandardTemplateList = 1,
    eUserTemplateList = 2,
    eCustomTemplateList = 3
};

struct __declspec(uuid("b91eaa5b-a40c-4119-99fe-29ed3cdc85aa"))
_ITemplateManagerAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    HRESULT GetActiveTemplates (
        BSTR * bstrActiveListPath,
        enum TemplatesListType * eActiveListType,
        SAFEARRAY * * astrActiveTemplates );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct Application * * ppApplication ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * ppParent ) = 0;
      virtual HRESULT __stdcall raw_GetActiveTemplates (
        /*[out]*/ BSTR * bstrActiveListPath,
        /*[out]*/ enum TemplatesListType * eActiveListType,
        /*[out]*/ SAFEARRAY * * astrActiveTemplates ) = 0;
};

struct __declspec(uuid("a6713ae0-2bda-11ce-8e45-08003601bbd5"))
Environments : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    ApplicationPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    ApplicationPtr GetApplication ( );
    long GetCount ( );
    ApplicationPtr GetParent ( );
    EnvironmentPtr Item (
        const _variant_t & Index );
};

struct __declspec(uuid("024091d0-2bdb-11ce-8e45-08003601bbd5"))
Environment : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetIndex))
    int Index;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetParent))
    EnvironmentsPtr Parent;
    __declspec(property(get=GetCommandBars))
    CommandBarsPtr CommandBars;
    __declspec(property(get=GetAccelerators))
    AcceleratorsPtr Accelerators;
    __declspec(property(get=GetSubTypeName))
    _bstr_t SubTypeName;
    __declspec(property(get=GetCommandCategories))
    CommandCategoriesPtr CommandCategories;
    __declspec(property(get=GetCATID))
    _bstr_t CATID;
    __declspec(property(get=GetCustomizeDisplayName))
    _bstr_t CustomizeDisplayName;
    __declspec(property(get=GetCommandInfo))
    CommandInfoPtr CommandInfo[];

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    ApplicationPtr GetApplication ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    int GetIndex ( );
    _bstr_t GetName ( );
    EnvironmentsPtr GetParent ( );
    CommandBarsPtr GetCommandBars ( );
    AcceleratorsPtr GetAccelerators ( );
    _bstr_t GetSubTypeName ( );
    CommandCategoriesPtr GetCommandCategories ( );
    _bstr_t GetCATID ( );
    _bstr_t GetCustomizeDisplayName ( );
    CommandInfoPtr GetCommandInfo (
        long CommandID );
};

struct __declspec(uuid("c1e8fdfb-fbe0-11d1-be0a-080036b4d502"))
_IEnvironmentsAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    ApplicationPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    ApplicationPtr GetApplication ( );
    long GetCount ( );
    ApplicationPtr GetParent ( );
    EnvironmentPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct Application * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Environment * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Unknown ) = 0;
};

struct __declspec(uuid("1d3da501-9bff-11d1-ba96-080036230602"))
CommandBars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetActiveMenuBar))
    CommandBarPtr ActiveMenuBar;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetDisplayTooltips,put=PutDisplayTooltips))
    VARIANT_BOOL DisplayTooltips;
    __declspec(property(get=GetLargeButtons,put=PutLargeButtons))
    VARIANT_BOOL LargeButtons;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    CommandBarPtr GetActiveMenuBar ( );
    IDispatchPtr GetApplication ( );
    long GetCount ( );
    VARIANT_BOOL GetDisplayTooltips ( );
    void PutDisplayTooltips (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetLargeButtons ( );
    void PutLargeButtons (
        VARIANT_BOOL _arg1 );
    IDispatchPtr GetParent ( );
    CommandBarPtr Add (
        const _variant_t & Name = vtMissing,
        const _variant_t & Position = vtMissing,
        const _variant_t & MenuBar = vtMissing,
        const _variant_t & Temporary = vtMissing );
    CommandBarControlPtr FindControl (
        const _variant_t & Type = vtMissing,
        const _variant_t & Id = vtMissing,
        const _variant_t & Tag = vtMissing,
        const _variant_t & Visible = vtMissing );
    CommandBarPtr Item (
        const _variant_t & Index );
};

struct __declspec(uuid("1d3da502-9bff-11d1-ba96-080036230602"))
CommandBar : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetBuiltIn))
    VARIANT_BOOL BuiltIn;
    __declspec(property(get=GetControls))
    CommandBarControlsPtr Controls;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetLeft,put=PutLeft))
    long Left;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetNameLocal,put=PutNameLocal))
    _bstr_t NameLocal;
    __declspec(property(get=GetParent))
    EnvironmentPtr Parent;
    __declspec(property(get=GetPosition,put=PutPosition))
    enum SeBarPosition Position;
    __declspec(property(get=GetTop,put=PutTop))
    long Top;
    __declspec(property(get=GetType))
    enum SeBarType Type;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetApplication ( );
    VARIANT_BOOL GetBuiltIn ( );
    CommandBarControlsPtr GetControls ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    long GetHeight ( );
    void PutHeight (
        long _arg1 );
    long GetIndex ( );
    long GetLeft ( );
    void PutLeft (
        long _arg1 );
    _bstr_t GetName ( );
    _bstr_t GetNameLocal ( );
    void PutNameLocal (
        _bstr_t _arg1 );
    EnvironmentPtr GetParent ( );
    enum SeBarPosition GetPosition ( );
    void PutPosition (
        enum SeBarPosition _arg1 );
    long GetTop ( );
    void PutTop (
        long _arg1 );
    enum SeBarType GetType ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    long GetWidth ( );
    void PutWidth (
        long _arg1 );
    HRESULT Delete ( );
    CommandBarControlPtr FindControl (
        const _variant_t & Type = vtMissing,
        const _variant_t & Id = vtMissing,
        const _variant_t & Tag = vtMissing,
        const _variant_t & Visible = vtMissing,
        const _variant_t & Recursive = vtMissing );
    HRESULT Reset ( );
    HRESULT ShowPopup (
        const _variant_t & x = vtMissing,
        const _variant_t & y = vtMissing );
};

struct __declspec(uuid("1d3da503-9bff-11d1-ba96-080036230602"))
CommandBarControls : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    CommandBarPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetApplication ( );
    long GetCount ( );
    CommandBarPtr GetParent ( );
    CommandBarControlPtr Add (
        const _variant_t & Type = vtMissing,
        const _variant_t & Id = vtMissing,
        const _variant_t & Before = vtMissing,
        const _variant_t & Temporary = vtMissing );
    CommandBarControlPtr Item (
        const _variant_t & Index );
};

struct __declspec(uuid("59de959f-9ca6-11d1-ba97-080036230602"))
CommandBarControl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetBeginGroup,put=PutBeginGroup))
    VARIANT_BOOL BeginGroup;
    __declspec(property(get=GetBuiltIn))
    VARIANT_BOOL BuiltIn;
    __declspec(property(get=GetBuiltInFace,put=PutBuiltInFace))
    VARIANT_BOOL BuiltInFace;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetDescriptionText,put=PutDescriptionText))
    _bstr_t DescriptionText;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetFaceId,put=PutFaceId))
    long FaceId;
    __declspec(property(get=GetHeight))
    long Height;
    __declspec(property(get=GetHelpContextId,put=PutHelpContextId))
    long HelpContextId;
    __declspec(property(get=GetHelpFile,put=PutHelpFile))
    _bstr_t HelpFile;
    __declspec(property(get=GetId))
    long Id;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetLeft))
    long Left;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetParameterText,put=PutParameterText))
    _bstr_t ParameterText;
    __declspec(property(get=GetParent))
    CommandBarPtr Parent;
    __declspec(property(get=GetShortcutText,put=PutShortcutText))
    _bstr_t ShortcutText;
    __declspec(property(get=GetTag,put=PutTag))
    _bstr_t Tag;
    __declspec(property(get=GetTooltipText,put=PutTooltipText))
    _bstr_t TooltipText;
    __declspec(property(get=GetTop))
    long Top;
    __declspec(property(get=GetType))
    enum SeControlType Type;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetWidth))
    long Width;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetApplication ( );
    VARIANT_BOOL GetBeginGroup ( );
    void PutBeginGroup (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetBuiltIn ( );
    VARIANT_BOOL GetBuiltInFace ( );
    void PutBuiltInFace (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    _bstr_t GetDescriptionText ( );
    void PutDescriptionText (
        _bstr_t _arg1 );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    long GetFaceId ( );
    void PutFaceId (
        long _arg1 );
    long GetHeight ( );
    long GetHelpContextId ( );
    void PutHelpContextId (
        long _arg1 );
    _bstr_t GetHelpFile ( );
    void PutHelpFile (
        _bstr_t _arg1 );
    long GetId ( );
    long GetIndex ( );
    long GetLeft ( );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _bstr_t GetParameterText ( );
    void PutParameterText (
        _bstr_t _arg1 );
    CommandBarPtr GetParent ( );
    _bstr_t GetShortcutText ( );
    void PutShortcutText (
        _bstr_t _arg1 );
    _bstr_t GetTag ( );
    void PutTag (
        _bstr_t _arg1 );
    _bstr_t GetTooltipText ( );
    void PutTooltipText (
        _bstr_t _arg1 );
    long GetTop ( );
    enum SeControlType GetType ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    long GetWidth ( );
    HRESULT Delete (
        const _variant_t & Temporary = vtMissing );
    HRESULT Execute ( );
    HRESULT Help ( );
    HRESULT LoadFace (
        _bstr_t Face );
};

struct __declspec(uuid("5a1831f3-9da4-11d1-ba98-080036230602"))
ISECommandBars : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetActiveMenuBar))
    CommandBarPtr ActiveMenuBar;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetDisplayTooltips,put=PutDisplayTooltips))
    VARIANT_BOOL DisplayTooltips;
    __declspec(property(get=GetLargeButtons,put=PutLargeButtons))
    VARIANT_BOOL LargeButtons;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    CommandBarPtr GetActiveMenuBar ( );
    IDispatchPtr GetApplication ( );
    long GetCount ( );
    VARIANT_BOOL GetDisplayTooltips ( );
    void PutDisplayTooltips (
        VARIANT_BOOL DisplayTooltips );
    VARIANT_BOOL GetLargeButtons ( );
    void PutLargeButtons (
        VARIANT_BOOL LargeButtons );
    IDispatchPtr GetParent ( );
    CommandBarPtr Add (
        const _variant_t & Name = vtMissing,
        const _variant_t & Position = vtMissing,
        const _variant_t & MenuBar = vtMissing,
        const _variant_t & Temporary = vtMissing );
    CommandBarControlPtr FindControl (
        const _variant_t & Type = vtMissing,
        const _variant_t & Id = vtMissing,
        const _variant_t & Tag = vtMissing,
        const _variant_t & Visible = vtMissing );
    CommandBarPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ActiveMenuBar (
        /*[out,retval]*/ struct CommandBar * * CommandBar ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * Application ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_DisplayTooltips (
        /*[out,retval]*/ VARIANT_BOOL * DisplayTooltips ) = 0;
      virtual HRESULT __stdcall put_DisplayTooltips (
        /*[in]*/ VARIANT_BOOL DisplayTooltips ) = 0;
      virtual HRESULT __stdcall get_LargeButtons (
        /*[out,retval]*/ VARIANT_BOOL * LargeButtons ) = 0;
      virtual HRESULT __stdcall put_LargeButtons (
        /*[in]*/ VARIANT_BOOL LargeButtons ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Name,
        /*[in]*/ VARIANT Position,
        /*[in]*/ VARIANT MenuBar,
        /*[in]*/ VARIANT Temporary,
        /*[out,retval]*/ struct CommandBar * * CommandBar ) = 0;
      virtual HRESULT __stdcall raw_FindControl (
        /*[in]*/ VARIANT Type,
        /*[in]*/ VARIANT Id,
        /*[in]*/ VARIANT Tag,
        /*[in]*/ VARIANT Visible,
        /*[out,retval]*/ struct CommandBarControl * * CommandBarControl ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct CommandBar * * CommandBar ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Unknown ) = 0;
};

struct __declspec(uuid("5a1831ed-9da4-11d1-ba98-080036230602"))
ISECommandBarControls : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    CommandBarPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCount ( );
    CommandBarPtr GetParent ( );
    CommandBarControlPtr Add (
        const _variant_t & Type = vtMissing,
        const _variant_t & Id = vtMissing,
        const _variant_t & Before = vtMissing,
        const _variant_t & Temporary = vtMissing );
    CommandBarControlPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * Application ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct CommandBar * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Type,
        /*[in]*/ VARIANT Id,
        /*[in]*/ VARIANT Before,
        /*[in]*/ VARIANT Temporary,
        /*[out,retval]*/ struct CommandBarControl * * CommandBarControl ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct CommandBarControl * * CommandBarControl ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Unknown ) = 0;
};

enum SeControlType
{
    seControlPopup = 1,
    seControlButton = 2,
    seControlSeparator = 3
};

struct __declspec(uuid("5a1831ee-9da4-11d1-ba98-080036230602"))
ISECommandBarControl : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetBeginGroup,put=PutBeginGroup))
    VARIANT_BOOL BeginGroup;
    __declspec(property(get=GetBuiltIn))
    VARIANT_BOOL BuiltIn;
    __declspec(property(get=GetBuiltInFace,put=PutBuiltInFace))
    VARIANT_BOOL BuiltInFace;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetDescriptionText,put=PutDescriptionText))
    _bstr_t DescriptionText;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetFaceId,put=PutFaceId))
    long FaceId;
    __declspec(property(get=GetHeight))
    long Height;
    __declspec(property(get=GetHelpContextId,put=PutHelpContextId))
    long HelpContextId;
    __declspec(property(get=GetHelpFile,put=PutHelpFile))
    _bstr_t HelpFile;
    __declspec(property(get=GetId))
    long Id;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetLeft))
    long Left;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetParameterText,put=PutParameterText))
    _bstr_t ParameterText;
    __declspec(property(get=GetParent))
    CommandBarPtr Parent;
    __declspec(property(get=GetShortcutText,put=PutShortcutText))
    _bstr_t ShortcutText;
    __declspec(property(get=GetTag,put=PutTag))
    _bstr_t Tag;
    __declspec(property(get=GetTooltipText,put=PutTooltipText))
    _bstr_t TooltipText;
    __declspec(property(get=GetTop))
    long Top;
    __declspec(property(get=GetType))
    enum SeControlType Type;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetWidth))
    long Width;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    VARIANT_BOOL GetBeginGroup ( );
    void PutBeginGroup (
        VARIANT_BOOL BeginGroup );
    VARIANT_BOOL GetBuiltIn ( );
    VARIANT_BOOL GetBuiltInFace ( );
    void PutBuiltInFace (
        VARIANT_BOOL BuiltInFace );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t Caption );
    _bstr_t GetDescriptionText ( );
    void PutDescriptionText (
        _bstr_t DescriptionText );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL Enabled );
    long GetFaceId ( );
    void PutFaceId (
        long FaceId );
    long GetHeight ( );
    long GetHelpContextId ( );
    void PutHelpContextId (
        long HelpContextId );
    _bstr_t GetHelpFile ( );
    void PutHelpFile (
        _bstr_t HelpFile );
    long GetId ( );
    long GetIndex ( );
    long GetLeft ( );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t OnAction );
    _bstr_t GetParameterText ( );
    void PutParameterText (
        _bstr_t ParameterText );
    CommandBarPtr GetParent ( );
    _bstr_t GetShortcutText ( );
    void PutShortcutText (
        _bstr_t ShortcutText );
    _bstr_t GetTag ( );
    void PutTag (
        _bstr_t Tag );
    _bstr_t GetTooltipText ( );
    void PutTooltipText (
        _bstr_t TooltipText );
    long GetTop ( );
    enum SeControlType GetType ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Visible );
    long GetWidth ( );
    HRESULT Delete (
        const _variant_t & Temporary = vtMissing );
    HRESULT Execute ( );
    HRESULT Help ( );
    HRESULT LoadFace (
        _bstr_t Face );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * Application ) = 0;
      virtual HRESULT __stdcall get_BeginGroup (
        /*[out,retval]*/ VARIANT_BOOL * BeginGroup ) = 0;
      virtual HRESULT __stdcall put_BeginGroup (
        /*[in]*/ VARIANT_BOOL BeginGroup ) = 0;
      virtual HRESULT __stdcall get_BuiltIn (
        /*[out,retval]*/ VARIANT_BOOL * BuiltIn ) = 0;
      virtual HRESULT __stdcall get_BuiltInFace (
        /*[out,retval]*/ VARIANT_BOOL * BuiltInFace ) = 0;
      virtual HRESULT __stdcall put_BuiltInFace (
        /*[in]*/ VARIANT_BOOL BuiltInFace ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * Caption ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR Caption ) = 0;
      virtual HRESULT __stdcall get_DescriptionText (
        /*[out,retval]*/ BSTR * DescriptionText ) = 0;
      virtual HRESULT __stdcall put_DescriptionText (
        /*[in]*/ BSTR DescriptionText ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * Enabled ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL Enabled ) = 0;
      virtual HRESULT __stdcall get_FaceId (
        /*[out,retval]*/ long * FaceId ) = 0;
      virtual HRESULT __stdcall put_FaceId (
        /*[in]*/ long FaceId ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ long * Height ) = 0;
      virtual HRESULT __stdcall get_HelpContextId (
        /*[out,retval]*/ long * HelpContextId ) = 0;
      virtual HRESULT __stdcall put_HelpContextId (
        /*[in]*/ long HelpContextId ) = 0;
      virtual HRESULT __stdcall get_HelpFile (
        /*[out,retval]*/ BSTR * HelpFile ) = 0;
      virtual HRESULT __stdcall put_HelpFile (
        /*[in]*/ BSTR HelpFile ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * Id ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ long * Left ) = 0;
      virtual HRESULT __stdcall get_OnAction (
        /*[out,retval]*/ BSTR * OnAction ) = 0;
      virtual HRESULT __stdcall put_OnAction (
        /*[in]*/ BSTR OnAction ) = 0;
      virtual HRESULT __stdcall get_ParameterText (
        /*[out,retval]*/ BSTR * ParameterText ) = 0;
      virtual HRESULT __stdcall put_ParameterText (
        /*[in]*/ BSTR ParameterText ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct CommandBar * * Parent ) = 0;
      virtual HRESULT __stdcall get_ShortcutText (
        /*[out,retval]*/ BSTR * ShortcutText ) = 0;
      virtual HRESULT __stdcall put_ShortcutText (
        /*[in]*/ BSTR ShortcutText ) = 0;
      virtual HRESULT __stdcall get_Tag (
        /*[out,retval]*/ BSTR * Tag ) = 0;
      virtual HRESULT __stdcall put_Tag (
        /*[in]*/ BSTR Tag ) = 0;
      virtual HRESULT __stdcall get_TooltipText (
        /*[out,retval]*/ BSTR * TooltipText ) = 0;
      virtual HRESULT __stdcall put_TooltipText (
        /*[in]*/ BSTR TooltipText ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ long * Top ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum SeControlType * Type ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * Width ) = 0;
      virtual HRESULT __stdcall raw_Delete (
        /*[in]*/ VARIANT Temporary = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Execute ( ) = 0;
      virtual HRESULT __stdcall raw_Help ( ) = 0;
      virtual HRESULT __stdcall raw_LoadFace (
        BSTR Face ) = 0;
};

enum SeBarPosition
{
    seBarTop = 1,
    seBarBottom = 2,
    seBarLeft = 3,
    seBarRight = 4,
    seBarFloating = 5
};

enum SeBarType
{
    seBarTypeMenuBar = 1,
    seBarTypeNormal = 2,
    seBarTypePopup = 3
};

struct __declspec(uuid("5a1831f2-9da4-11d1-ba98-080036230602"))
ISECommandBar : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetBuiltIn))
    VARIANT_BOOL BuiltIn;
    __declspec(property(get=GetControls))
    CommandBarControlsPtr Controls;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetLeft,put=PutLeft))
    long Left;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetNameLocal,put=PutNameLocal))
    _bstr_t NameLocal;
    __declspec(property(get=GetParent))
    EnvironmentPtr Parent;
    __declspec(property(get=GetPosition,put=PutPosition))
    enum SeBarPosition Position;
    __declspec(property(get=GetTop,put=PutTop))
    long Top;
    __declspec(property(get=GetType))
    enum SeBarType Type;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    VARIANT_BOOL GetBuiltIn ( );
    CommandBarControlsPtr GetControls ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL Enabled );
    long GetHeight ( );
    void PutHeight (
        long Height );
    long GetIndex ( );
    long GetLeft ( );
    void PutLeft (
        long Left );
    _bstr_t GetName ( );
    _bstr_t GetNameLocal ( );
    void PutNameLocal (
        _bstr_t NameLocal );
    EnvironmentPtr GetParent ( );
    enum SeBarPosition GetPosition ( );
    void PutPosition (
        enum SeBarPosition Position );
    long GetTop ( );
    void PutTop (
        long Top );
    enum SeBarType GetType ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Visible );
    long GetWidth ( );
    void PutWidth (
        long Width );
    HRESULT Delete ( );
    CommandBarControlPtr FindControl (
        const _variant_t & Type = vtMissing,
        const _variant_t & Id = vtMissing,
        const _variant_t & Tag = vtMissing,
        const _variant_t & Visible = vtMissing,
        const _variant_t & Recursive = vtMissing );
    HRESULT Reset ( );
    HRESULT ShowPopup (
        const _variant_t & x = vtMissing,
        const _variant_t & y = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * Application ) = 0;
      virtual HRESULT __stdcall get_BuiltIn (
        /*[out,retval]*/ VARIANT_BOOL * BuiltIn ) = 0;
      virtual HRESULT __stdcall get_Controls (
        /*[out,retval]*/ struct CommandBarControls * * CommandBarControls ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * Enabled ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL Enabled ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ long * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ long Height ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ long * Left ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ long Left ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_NameLocal (
        /*[out,retval]*/ BSTR * NameLocal ) = 0;
      virtual HRESULT __stdcall put_NameLocal (
        /*[in]*/ BSTR NameLocal ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct Environment * * Parent ) = 0;
      virtual HRESULT __stdcall get_Position (
        /*[out,retval]*/ enum SeBarPosition * Position ) = 0;
      virtual HRESULT __stdcall put_Position (
        /*[in]*/ enum SeBarPosition Position ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ long * Top ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ long Top ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum SeBarType * Type ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * Width ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long Width ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_FindControl (
        /*[in]*/ VARIANT Type,
        /*[in]*/ VARIANT Id,
        /*[in]*/ VARIANT Tag,
        /*[in]*/ VARIANT Visible,
        /*[in]*/ VARIANT Recursive,
        /*[out,retval]*/ struct CommandBarControl * * CommandBarControl ) = 0;
      virtual HRESULT __stdcall raw_Reset ( ) = 0;
      virtual HRESULT __stdcall raw_ShowPopup (
        /*[in]*/ VARIANT x = vtMissing,
        /*[in]*/ VARIANT y = vtMissing ) = 0;
};

struct __declspec(uuid("e0fec934-e01f-47c1-8b08-dae756cb973f"))
Accelerators : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetCount ( );
    IDispatchPtr GetParent ( );
    AcceleratorPtr Item (
        const _variant_t & Index );
};

struct __declspec(uuid("56271f1e-7387-46c1-a78d-0ca381997917"))
Accelerator : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetType))
    enum AcceleratorTypeConstants Type;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetCount ( );
    IDispatchPtr GetParent ( );
    KeyBindingPtr Item (
        const _variant_t & Index );
    enum AcceleratorTypeConstants GetType ( );
    HRESULT Reset ( );
    HRESULT Remove (
        long KeyCode );
    KeyBindingPtr Add (
        long CommandID,
        long KeyCode );
    KeyBindingPtr KeyBinding (
        long KeyCode );
    long BuildKeyCode (
        long KeyModifier,
        long Key );
};

struct __declspec(uuid("3bbfd6ac-92c9-4028-a704-5ed42da265f6"))
ISEAccelerators : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IDispatchPtr GetParent ( );
    AcceleratorPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Accelerator * * ppAccelerator ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Unknown ) = 0;
};

struct __declspec(uuid("7524fac6-48f8-4d07-a048-48e49da21713"))
KeyBinding : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCommandID))
    long CommandID;
    __declspec(property(get=GetCommandString))
    _bstr_t CommandString;
    __declspec(property(get=GetKeyString))
    _bstr_t KeyString;
    __declspec(property(get=GetKeyCode))
    long KeyCode;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetParent ( );
    long GetCommandID ( );
    _bstr_t GetCommandString ( );
    _bstr_t GetKeyString ( );
    long GetKeyCode ( );
};

struct __declspec(uuid("ca442117-2b8d-4346-8501-38e1e3b52aeb"))
ISEKeyBinding : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCommandID))
    long CommandID;
    __declspec(property(get=GetCommandString))
    _bstr_t CommandString;
    __declspec(property(get=GetKeyString))
    _bstr_t KeyString;
    __declspec(property(get=GetKeyCode))
    long KeyCode;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    long GetCommandID ( );
    _bstr_t GetCommandString ( );
    _bstr_t GetKeyString ( );
    long GetKeyCode ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_CommandID (
        /*[out,retval]*/ long * CommandID ) = 0;
      virtual HRESULT __stdcall get_CommandString (
        /*[out,retval]*/ BSTR * CommandString ) = 0;
      virtual HRESULT __stdcall get_KeyString (
        /*[out,retval]*/ BSTR * KeyString ) = 0;
      virtual HRESULT __stdcall get_KeyCode (
        /*[out,retval]*/ long * KeyCode ) = 0;
};

enum AcceleratorTypeConstants
{
    seExecutable = 1,
    seEmbeded = 2,
    seServerInPlace = 3,
    seContainerInPlace = 4,
    seMainFrame = 5,
    seServerInPlaceLink = 6,
    seContainerInPlaceLink = 7
};

struct __declspec(uuid("dd1a3cc8-ae28-4d33-b9f9-58e2ea159f5d"))
ISEAccelerator : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetType))
    enum AcceleratorTypeConstants Type;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IDispatchPtr GetParent ( );
    KeyBindingPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    enum AcceleratorTypeConstants GetType ( );
    HRESULT Reset ( );
    HRESULT Remove (
        long KeyCode );
    KeyBindingPtr Add (
        long CommandID,
        long KeyCode );
    KeyBindingPtr KeyBinding (
        long KeyCode );
    long BuildKeyCode (
        long KeyModifier,
        long Key );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct KeyBinding * * ppKeyBinding ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Unknown ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AcceleratorTypeConstants * Type ) = 0;
      virtual HRESULT __stdcall raw_Reset ( ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long KeyCode ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ long CommandID,
        /*[in]*/ long KeyCode,
        /*[out,retval]*/ struct KeyBinding * * ppKeyBinding ) = 0;
      virtual HRESULT __stdcall raw_KeyBinding (
        /*[in]*/ long KeyCode,
        /*[out,retval]*/ struct KeyBinding * * ppKeyBinding ) = 0;
      virtual HRESULT __stdcall raw_BuildKeyCode (
        /*[in]*/ long KeyModifier,
        /*[in]*/ long Key,
        /*[out,retval]*/ long * KeyCode ) = 0;
};

struct __declspec(uuid("38f26aba-1a45-4423-ac3a-1c79d0ba52bc"))
CommandCategories : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetParent ( );
    long GetCount ( );
    CommandCategoryPtr Item (
        const _variant_t & Index );
};

struct __declspec(uuid("cd9c184e-798b-45fe-bda2-920f71bb1c5a"))
CommandCategory : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCaption))
    _bstr_t Caption;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _bstr_t GetCaption ( );
    long GetCount ( );
    CommandInfoPtr Item (
        const _variant_t & Index );
};

struct __declspec(uuid("84d6c89d-9b38-49cb-9277-efc947f931b9"))
ISECommandCategories : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetParent ( );
    long GetCount ( );
    CommandCategoryPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct CommandCategory * * CommandCategory ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Unknown ) = 0;
};

struct __declspec(uuid("9333babb-0d74-4c42-97bc-f348d1f6ed63"))
CommandInfo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCaption))
    _bstr_t Caption;
    __declspec(property(get=GetId))
    long Id;
    __declspec(property(get=GetTooltip))
    _bstr_t Tooltip;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetBuiltIn))
    VARIANT_BOOL BuiltIn;
    __declspec(property(get=GetIcon))
    long Icon;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _bstr_t GetCaption ( );
    long GetId ( );
    _bstr_t GetTooltip ( );
    _bstr_t GetDescription ( );
    VARIANT_BOOL GetBuiltIn ( );
    long GetIcon ( );
    HRESULT SaveImage (
        _bstr_t Filename,
        const _variant_t & Background = vtMissing );
};

struct __declspec(uuid("c1e8fdff-fbe0-11d1-be0a-080036b4d502"))
_IEnvironmentAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetIndex))
    int Index;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetParent))
    EnvironmentsPtr Parent;
    __declspec(property(get=GetCommandBars))
    CommandBarsPtr CommandBars;
    __declspec(property(get=GetAccelerators))
    AcceleratorsPtr Accelerators;
    __declspec(property(get=GetSubTypeName))
    _bstr_t SubTypeName;
    __declspec(property(get=GetCommandCategories))
    CommandCategoriesPtr CommandCategories;
    __declspec(property(get=GetCATID))
    _bstr_t CATID;
    __declspec(property(get=GetCustomizeDisplayName))
    _bstr_t CustomizeDisplayName;
    __declspec(property(get=GetCommandInfo))
    CommandInfoPtr CommandInfo[];

    //
    // Wrapper methods for error-handling
    //

    ApplicationPtr GetApplication ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t Caption );
    int GetIndex ( );
    _bstr_t GetName ( );
    EnvironmentsPtr GetParent ( );
    CommandBarsPtr GetCommandBars ( );
    AcceleratorsPtr GetAccelerators ( );
    _bstr_t GetSubTypeName ( );
    CommandCategoriesPtr GetCommandCategories ( );
    _bstr_t GetCATID ( );
    _bstr_t GetCustomizeDisplayName ( );
    CommandInfoPtr GetCommandInfo (
        long CommandID );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * Caption ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR Caption ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ int * Index ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct Environments * * Parent ) = 0;
      virtual HRESULT __stdcall get_CommandBars (
        /*[out,retval]*/ struct CommandBars * * CommandBars ) = 0;
      virtual HRESULT __stdcall get_Accelerators (
        /*[out,retval]*/ struct Accelerators * * Accelerators ) = 0;
      virtual HRESULT __stdcall get_SubTypeName (
        /*[out,retval]*/ BSTR * SubTypeName ) = 0;
      virtual HRESULT __stdcall get_CommandCategories (
        /*[out,retval]*/ struct CommandCategories * * CommandCategories ) = 0;
      virtual HRESULT __stdcall get_CATID (
        /*[out,retval]*/ BSTR * CATID ) = 0;
      virtual HRESULT __stdcall get_CustomizeDisplayName (
        /*[out,retval]*/ BSTR * CustomizeDisplayName ) = 0;
      virtual HRESULT __stdcall get_CommandInfo (
        /*[in]*/ long CommandID,
        /*[out,retval]*/ struct CommandInfo * * Info ) = 0;
};

struct __declspec(uuid("3c14caef-ffae-4733-aa03-fb3fe6fba579"))
ISECommandCategory : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCaption))
    _bstr_t Caption;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetCaption ( );
    long GetCount ( );
    CommandInfoPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * Caption ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct CommandInfo * * CommandInfo ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Unknown ) = 0;
};

struct __declspec(uuid("89400a0e-036a-45c9-a3d9-c3834dba59d2"))
ISECommandInfo : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCaption))
    _bstr_t Caption;
    __declspec(property(get=GetId))
    long Id;
    __declspec(property(get=GetTooltip))
    _bstr_t Tooltip;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetBuiltIn))
    VARIANT_BOOL BuiltIn;
    __declspec(property(get=GetIcon))
    long Icon;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetCaption ( );
    long GetId ( );
    _bstr_t GetTooltip ( );
    _bstr_t GetDescription ( );
    VARIANT_BOOL GetBuiltIn ( );
    long GetIcon ( );
    HRESULT SaveImage (
        _bstr_t Filename,
        const _variant_t & Background = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * Caption ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * Id ) = 0;
      virtual HRESULT __stdcall get_Tooltip (
        /*[out,retval]*/ BSTR * Tooltip ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * Description ) = 0;
      virtual HRESULT __stdcall get_BuiltIn (
        /*[out,retval]*/ VARIANT_BOOL * BuiltIn ) = 0;
      virtual HRESULT __stdcall get_Icon (
        /*[out,retval]*/ long * Icon ) = 0;
      virtual HRESULT __stdcall raw_SaveImage (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT Background = vtMissing ) = 0;
};

enum LinksUpdateOption
{
    igNoLinksUpdate = 0,
    igLinksUpdateWithDefpath = 1,
    igLinksUpdateWithAltPath = 2
};

enum DocumentAccess
{
    igReadWrite = 0,
    igReadOnly = 1,
    igReadExclusive = 2
};

enum NotifyOption
{
    igNotifyWhenReadable = 0,
    igNotifyWhenWriteable = 1,
    igNotifyWhenAvailable = 2,
    igNoNotify = 3,
    igNotifyWhenExclusive = 4
};

struct __declspec(uuid("76118c70-fc09-11cd-8b57-080036181e02"))
Windows : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr Item (
        const _variant_t & Index );
};

struct __declspec(uuid("c1e8fdf2-fbe0-11d1-be0a-080036b4d502"))
_IWindowsAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Unknown ) = 0;
};

struct __declspec(uuid("eb4193c7-8c5a-11d1-ba85-080036230602"))
ApplicationEvents;
    // [ default ] interface IUnknown
    // [ default, source ] dispinterface DISEApplicationEvents
    // [ source ] interface ISEApplicationEvents

struct __declspec(uuid("5e23ed5b-64e5-11d1-ba6b-080036230602"))
DISEApplicationEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT AfterActiveDocumentChange (
        IDispatch * theDocument );
    HRESULT AfterCommandRun (
        long theCommandID );
    HRESULT AfterDocumentOpen (
        IDispatch * theDocument );
    HRESULT AfterDocumentPrint (
        IDispatch * theDocument,
        long hDC,
        SAFEARRAY * * ModelToDC,
        SAFEARRAY * * Rect );
    HRESULT AfterDocumentSave (
        IDispatch * theDocument );
    HRESULT AfterEnvironmentActivate (
        IDispatch * theEnvironment );
    HRESULT AfterNewDocumentOpen (
        IDispatch * theDocument );
    HRESULT AfterNewWindow (
        IDispatch * theWindow );
    HRESULT AfterWindowActivate (
        IDispatch * theWindow );
    HRESULT BeforeCommandRun (
        long theCommandID );
    HRESULT BeforeDocumentClose (
        IDispatch * theDocument );
    HRESULT BeforeDocumentPrint (
        IDispatch * theDocument,
        long hDC,
        SAFEARRAY * * ModelToDC,
        SAFEARRAY * * Rect );
    HRESULT BeforeEnvironmentDeactivate (
        IDispatch * theEnvironment );
    HRESULT BeforeWindowDeactivate (
        IDispatch * theWindow );
    HRESULT BeforeQuit ( );
    HRESULT BeforeDocumentSave (
        IDispatch * theDocument );
};

struct __declspec(uuid("90223887-09cd-11d1-ba07-080036230602"))
ISEApplicationEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT AfterActiveDocumentChange (
        IDispatch * theDocument );
    HRESULT AfterCommandRun (
        long theCommandID );
    HRESULT AfterDocumentOpen (
        IDispatch * theDocument );
    HRESULT AfterDocumentPrint (
        IDispatch * theDocument,
        long hDC,
        double * ModelToDC,
        long * Rect );
    HRESULT AfterDocumentSave (
        IDispatch * theDocument );
    HRESULT AfterEnvironmentActivate (
        IDispatch * theEnvironment );
    HRESULT AfterNewDocumentOpen (
        IDispatch * theDocument );
    HRESULT AfterNewWindow (
        IDispatch * theWindow );
    HRESULT AfterWindowActivate (
        IDispatch * theWindow );
    HRESULT BeforeCommandRun (
        long theCommandID );
    HRESULT BeforeDocumentClose (
        IDispatch * theDocument );
    HRESULT BeforeDocumentPrint (
        IDispatch * theDocument,
        long hDC,
        double * ModelToDC,
        long * Rect );
    HRESULT BeforeEnvironmentDeactivate (
        IDispatch * theEnvironment );
    HRESULT BeforeWindowDeactivate (
        IDispatch * theWindow );
    HRESULT BeforeQuit ( );
    HRESULT BeforeDocumentSave (
        IDispatch * theDocument );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AfterActiveDocumentChange (
        /*[in]*/ IDispatch * theDocument ) = 0;
      virtual HRESULT __stdcall raw_AfterCommandRun (
        long theCommandID ) = 0;
      virtual HRESULT __stdcall raw_AfterDocumentOpen (
        /*[in]*/ IDispatch * theDocument ) = 0;
      virtual HRESULT __stdcall raw_AfterDocumentPrint (
        /*[in]*/ IDispatch * theDocument,
        /*[in]*/ long hDC,
        /*[in]*/ double * ModelToDC,
        /*[in]*/ long * Rect ) = 0;
      virtual HRESULT __stdcall raw_AfterDocumentSave (
        /*[in]*/ IDispatch * theDocument ) = 0;
      virtual HRESULT __stdcall raw_AfterEnvironmentActivate (
        /*[in]*/ IDispatch * theEnvironment ) = 0;
      virtual HRESULT __stdcall raw_AfterNewDocumentOpen (
        /*[in]*/ IDispatch * theDocument ) = 0;
      virtual HRESULT __stdcall raw_AfterNewWindow (
        /*[in]*/ IDispatch * theWindow ) = 0;
      virtual HRESULT __stdcall raw_AfterWindowActivate (
        /*[in]*/ IDispatch * theWindow ) = 0;
      virtual HRESULT __stdcall raw_BeforeCommandRun (
        long theCommandID ) = 0;
      virtual HRESULT __stdcall raw_BeforeDocumentClose (
        /*[in]*/ IDispatch * theDocument ) = 0;
      virtual HRESULT __stdcall raw_BeforeDocumentPrint (
        /*[in]*/ IDispatch * theDocument,
        /*[in]*/ long hDC,
        /*[in]*/ double * ModelToDC,
        /*[in]*/ long * Rect ) = 0;
      virtual HRESULT __stdcall raw_BeforeEnvironmentDeactivate (
        /*[in]*/ IDispatch * theEnvironment ) = 0;
      virtual HRESULT __stdcall raw_BeforeWindowDeactivate (
        /*[in]*/ IDispatch * theWindow ) = 0;
      virtual HRESULT __stdcall raw_BeforeQuit ( ) = 0;
      virtual HRESULT __stdcall raw_BeforeDocumentSave (
        /*[in]*/ IDispatch * theDocument ) = 0;
};

struct __declspec(uuid("25045f7e-965c-11d1-ba90-080036230602"))
ApplicationWindowEvents;
    // [ default ] interface IUnknown
    // [ default, source ] dispinterface DISEApplicationWindowEvents
    // [ source ] interface ISEApplicationWindowEvents

struct __declspec(uuid("25045f7d-965c-11d1-ba90-080036230602"))
DISEApplicationWindowEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT WindowProc (
        long hWnd,
        long nMsg,
        long wParam,
        long lParam );
};

struct __declspec(uuid("25045f7b-965c-11d1-ba90-080036230602"))
ISEApplicationWindowEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT WindowProc (
        long hWnd,
        long nMsg,
        long wParam,
        long lParam );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_WindowProc (
        /*[in]*/ long hWnd,
        /*[in]*/ long nMsg,
        /*[in]*/ long wParam,
        /*[in]*/ long lParam ) = 0;
};

enum DocumentTypeConstants
{
    igPartDocument = 1,
    igDraftDocument = 2,
    igAssemblyDocument = 3,
    igSheetMetalDocument = 4,
    igUnknownDocument = 5,
    igWeldmentDocument = 6,
    igWeldmentAssemblyDocument = 7,
    igSyncPartDocument = 8,
    igSyncSheetMetalDocument = 9,
    igSyncAssemblyDocument = 10,
    igAssemblyViewerDocument = 11,
    igPartViewerDocument = 12,
    igDraftViewerDocument = 13
};

struct __declspec(uuid("ecc667a0-a4aa-11d1-aecc-08003616ce02"))
FileUIEvents;
    // [ default ] interface IUnknown
    // [ default, source ] dispinterface DISEFileUIEvents
    // [ source ] interface ISEFileUIEvents

struct __declspec(uuid("ecc667a2-a4aa-11d1-aecc-08003616ce02"))
DISEFileUIEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT OnFileOpenUI (
        BSTR * Filename,
        BSTR * AppendToTitle );
    HRESULT OnFileSaveAsUI (
        BSTR * Filename,
        BSTR * AppendToTitle );
    HRESULT OnFileNewUI (
        BSTR * Filename,
        BSTR * AppendToTitle );
    HRESULT OnFileSaveAsImageUI (
        BSTR * Filename,
        BSTR * AppendToTitle,
        long * Width,
        long * Height,
        enum SeImageQualityType * ImageQuality );
    HRESULT OnPlacePartUI (
        BSTR * Filename,
        BSTR * AppendToTitle );
    HRESULT OnCreateInPlacePartUI (
        BSTR * Filename,
        BSTR * AppendToTitle,
        BSTR * Template );
};

enum SeImageQualityType
{
    seImageQualityLow = 1,
    seImageQualityMedium = 2,
    seImageQualityHigh = 3
};

struct __declspec(uuid("ecc667a1-a4aa-11d1-aecc-08003616ce02"))
ISEFileUIEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT OnFileOpenUI (
        BSTR * Filename,
        BSTR * AppendToTitle );
    HRESULT OnFileSaveAsUI (
        BSTR * Filename,
        BSTR * AppendToTitle );
    HRESULT OnFileNewUI (
        BSTR * Filename,
        BSTR * AppendToTitle );
    HRESULT OnFileSaveAsImageUI (
        BSTR * Filename,
        BSTR * AppendToTitle,
        long * Width,
        long * Height,
        enum SeImageQualityType * ImageQuality );
    HRESULT OnPlacePartUI (
        BSTR * Filename,
        BSTR * AppendToTitle );
    HRESULT OnCreateInPlacePartUI (
        BSTR * Filename,
        BSTR * AppendToTitle,
        BSTR * Template );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_OnFileOpenUI (
        /*[out]*/ BSTR * Filename,
        /*[out]*/ BSTR * AppendToTitle ) = 0;
      virtual HRESULT __stdcall raw_OnFileSaveAsUI (
        /*[out]*/ BSTR * Filename,
        /*[out]*/ BSTR * AppendToTitle ) = 0;
      virtual HRESULT __stdcall raw_OnFileNewUI (
        /*[out]*/ BSTR * Filename,
        /*[out]*/ BSTR * AppendToTitle ) = 0;
      virtual HRESULT __stdcall raw_OnFileSaveAsImageUI (
        /*[out]*/ BSTR * Filename,
        /*[out]*/ BSTR * AppendToTitle,
        /*[in,out]*/ long * Width,
        /*[in,out]*/ long * Height,
        /*[in,out]*/ enum SeImageQualityType * ImageQuality ) = 0;
      virtual HRESULT __stdcall raw_OnPlacePartUI (
        /*[out]*/ BSTR * Filename,
        /*[out]*/ BSTR * AppendToTitle ) = 0;
      virtual HRESULT __stdcall raw_OnCreateInPlacePartUI (
        /*[out]*/ BSTR * Filename,
        /*[out]*/ BSTR * AppendToTitle,
        /*[out]*/ BSTR * Template ) = 0;
};

struct __declspec(uuid("18b5c96e-71a3-417b-bdaa-97923794acac"))
BeforeFileSaveAsEvents;
    // [ default ] interface IUnknown
    // [ default, source ] dispinterface DISEBeforeFileSaveAsEvents
    // [ source ] interface ISEBeforeFileSaveAsEvents

struct __declspec(uuid("c2640031-a528-4bbb-beff-27ced79c18bf"))
DISEBeforeFileSaveAsEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT OnBeforeFileSaveAsUI (
        _bstr_t TemplatePath );
};

struct __declspec(uuid("55da85aa-e3f6-4d68-983a-8fe24445bafe"))
ISEBeforeFileSaveAsEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT OnBeforeFileSaveAsUI (
        _bstr_t TemplatePath );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_OnBeforeFileSaveAsUI (
        /*[in]*/ BSTR TemplatePath ) = 0;
};

enum SolidEdgeCommandConstants
{
    seAssemblyPlacePartCommand = 32791,
    sePartSelectCommand = 45000,
    sePartInsertPartCommand = 40254,
    seSheetMetalSelectCommand = 45000,
    seAssemblySelectCommand = 45000,
    seDraftSelectCommand = 45000,
    seConvertCommand = 10452,
    seRefreshViewCommand = 32876,
    seSurfaceVisualCommand = 11129
};

struct __declspec(uuid("3b77de42-6b3e-11d1-919e-08003601be21"))
Command;
    // [ default ] dispinterface DISECommand
    // [ default, source ] dispinterface DISECommandEvents
    // interface ISECommand
    // [ source ] interface ISECommandEvents

struct __declspec(uuid("ca3f01d2-cdca-11d1-91c2-08003601be21"))
DISECommand : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMouse))
    DISEMousePtr Mouse;
    __declspec(property(get=GetWindow))
    IUnknownPtr Window;
    __declspec(property(get=GetDone,put=PutDone))
    VARIANT_BOOL Done;
    __declspec(property(get=GetOnEditOwnerChange,put=PutOnEditOwnerChange))
    long OnEditOwnerChange;
    __declspec(property(get=GetOnEnvironmentChange,put=PutOnEnvironmentChange))
    long OnEnvironmentChange;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    DISEMousePtr GetMouse ( );
    IUnknownPtr GetWindow ( );
    VARIANT_BOOL GetDone ( );
    void PutDone (
        VARIANT_BOOL _arg1 );
    long GetOnEditOwnerChange ( );
    void PutOnEditOwnerChange (
        long _arg1 );
    long GetOnEnvironmentChange ( );
    void PutOnEnvironmentChange (
        long _arg1 );
    HRESULT Start ( );
};

struct __declspec(uuid("3b77de44-6b3e-11d1-919e-08003601be21"))
Mouse;
    // [ default ] dispinterface DISEMouse
    // [ default, source ] dispinterface DISEMouseEvents
    // interface ISEMouse
    // interface ISEMouseEx
    // [ source ] interface ISEMouseEvents

struct __declspec(uuid("ca3f01d1-cdca-11d1-91c2-08003601be21"))
DISEMouse : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetScaleMode,put=PutScaleMode))
    long ScaleMode;
    __declspec(property(get=GetInterDocumentLocate,put=PutInterDocumentLocate))
    VARIANT_BOOL InterDocumentLocate;
    __declspec(property(get=GetEnabledMove,put=PutEnabledMove))
    VARIANT_BOOL EnabledMove;
    __declspec(property(get=GetLocateFrontToBack,put=PutLocateFrontToBack))
    VARIANT_BOOL LocateFrontToBack;
    __declspec(property(get=GetLastEventWindow))
    IDispatchPtr LastEventWindow;
    __declspec(property(get=GetLastUpEventWindow))
    IDispatchPtr LastUpEventWindow;
    __declspec(property(get=GetLastDownEventWindow))
    IDispatchPtr LastDownEventWindow;
    __declspec(property(get=GetLastMoveEventWindow))
    IDispatchPtr LastMoveEventWindow;
    __declspec(property(get=GetLastEventShift))
    short LastEventShift;
    __declspec(property(get=GetLastUpEventShift))
    short LastUpEventShift;
    __declspec(property(get=GetLastDownEventShift))
    short LastDownEventShift;
    __declspec(property(get=GetLastMoveEventShift))
    short LastMoveEventShift;
    __declspec(property(get=GetLastEventButton))
    short LastEventButton;
    __declspec(property(get=GetLastUpEventButton))
    short LastUpEventButton;
    __declspec(property(get=GetLastDownEventButton))
    short LastDownEventButton;
    __declspec(property(get=GetLastMoveEventButton))
    short LastMoveEventButton;
    __declspec(property(get=GetLastEventX))
    double LastEventX;
    __declspec(property(get=GetLastEventY))
    double LastEventY;
    __declspec(property(get=GetLastEventZ))
    double LastEventZ;
    __declspec(property(get=GetLastUpEventX))
    double LastUpEventX;
    __declspec(property(get=GetLastUpEventY))
    double LastUpEventY;
    __declspec(property(get=GetLastUpEventZ))
    double LastUpEventZ;
    __declspec(property(get=GetLastDownEventX))
    double LastDownEventX;
    __declspec(property(get=GetLastDownEventY))
    double LastDownEventY;
    __declspec(property(get=GetLastDownEventZ))
    double LastDownEventZ;
    __declspec(property(get=GetLastMoveEventX))
    double LastMoveEventX;
    __declspec(property(get=GetLastMoveEventY))
    double LastMoveEventY;
    __declspec(property(get=GetLastMoveEventZ))
    double LastMoveEventZ;
    __declspec(property(get=GetWindowTypes,put=PutWindowTypes))
    long WindowTypes;
    __declspec(property(get=GetPathfinderLocate,put=PutPathfinderLocate))
    VARIANT_BOOL PathfinderLocate;
    __declspec(property(get=GetLastEventType))
    long LastEventType;
    __declspec(property(get=GetEnabledDrag,put=PutEnabledDrag))
    VARIANT_BOOL EnabledDrag;
    __declspec(property(get=GetLocateMode,put=PutLocateMode))
    long LocateMode;
    __declspec(property(get=GetDynamicsMode,put=PutDynamicsMode))
    long DynamicsMode;
    __declspec(property(get=GetPauseLocate,put=PutPauseLocate))
    long PauseLocate;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    void PutScaleMode (
        long _arg1 );
    long GetScaleMode ( );
    VARIANT_BOOL GetEnabledMove ( );
    void PutEnabledMove (
        VARIANT_BOOL _arg1 );
    IDispatchPtr GetLastEventWindow ( );
    IDispatchPtr GetLastUpEventWindow ( );
    IDispatchPtr GetLastDownEventWindow ( );
    IDispatchPtr GetLastMoveEventWindow ( );
    short GetLastEventShift ( );
    short GetLastUpEventShift ( );
    short GetLastDownEventShift ( );
    short GetLastMoveEventShift ( );
    short GetLastEventButton ( );
    short GetLastUpEventButton ( );
    short GetLastDownEventButton ( );
    short GetLastMoveEventButton ( );
    double GetLastEventX ( );
    double GetLastEventY ( );
    double GetLastEventZ ( );
    double GetLastUpEventX ( );
    double GetLastUpEventY ( );
    double GetLastUpEventZ ( );
    double GetLastDownEventX ( );
    double GetLastDownEventY ( );
    double GetLastDownEventZ ( );
    double GetLastMoveEventX ( );
    double GetLastMoveEventY ( );
    double GetLastMoveEventZ ( );
    long GetWindowTypes ( );
    void PutWindowTypes (
        long _arg1 );
    long GetLastEventType ( );
    VARIANT_BOOL GetEnabledDrag ( );
    void PutEnabledDrag (
        VARIANT_BOOL _arg1 );
    long GetLocateMode ( );
    void PutLocateMode (
        long _arg1 );
    long GetDynamicsMode ( );
    void PutDynamicsMode (
        long _arg1 );
    long GetPauseLocate ( );
    void PutPauseLocate (
        long _arg1 );
    HRESULT ClearLocateFilter ( );
    HRESULT AddToLocateFilter (
        long lFilter );
    HRESULT PointOnGraphic (
        long * PointOnGraphicFlag,
        double * PointOnGraphic_X,
        double * PointOnGraphic_Y,
        double * PointOnGraphic_Z );
    VARIANT_BOOL GetInterDocumentLocate ( );
    void PutInterDocumentLocate (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetLocateFrontToBack ( );
    void PutLocateFrontToBack (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetPathfinderLocate ( );
    void PutPathfinderLocate (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("f3484608-2af7-11d1-ba2f-080036230602"))
ISEMouse : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetScaleMode,put=PutScaleMode))
    long ScaleMode;
    __declspec(property(get=GetEnabledMove,put=PutEnabledMove))
    VARIANT_BOOL EnabledMove;
    __declspec(property(get=GetLastEventWindow))
    IDispatchPtr LastEventWindow;
    __declspec(property(get=GetLastUpEventWindow))
    IDispatchPtr LastUpEventWindow;
    __declspec(property(get=GetLastDownEventWindow))
    IDispatchPtr LastDownEventWindow;
    __declspec(property(get=GetLastMoveEventWindow))
    IDispatchPtr LastMoveEventWindow;
    __declspec(property(get=GetLastEventShift))
    short LastEventShift;
    __declspec(property(get=GetLastUpEventShift))
    short LastUpEventShift;
    __declspec(property(get=GetLastDownEventShift))
    short LastDownEventShift;
    __declspec(property(get=GetLastMoveEventShift))
    short LastMoveEventShift;
    __declspec(property(get=GetLastEventButton))
    short LastEventButton;
    __declspec(property(get=GetLastUpEventButton))
    short LastUpEventButton;
    __declspec(property(get=GetLastDownEventButton))
    short LastDownEventButton;
    __declspec(property(get=GetLastMoveEventButton))
    short LastMoveEventButton;
    __declspec(property(get=GetLastEventX))
    double LastEventX;
    __declspec(property(get=GetLastEventY))
    double LastEventY;
    __declspec(property(get=GetLastEventZ))
    double LastEventZ;
    __declspec(property(get=GetLastUpEventX))
    double LastUpEventX;
    __declspec(property(get=GetLastUpEventY))
    double LastUpEventY;
    __declspec(property(get=GetLastUpEventZ))
    double LastUpEventZ;
    __declspec(property(get=GetLastDownEventX))
    double LastDownEventX;
    __declspec(property(get=GetLastDownEventY))
    double LastDownEventY;
    __declspec(property(get=GetLastDownEventZ))
    double LastDownEventZ;
    __declspec(property(get=GetLastMoveEventX))
    double LastMoveEventX;
    __declspec(property(get=GetLastMoveEventY))
    double LastMoveEventY;
    __declspec(property(get=GetLastMoveEventZ))
    double LastMoveEventZ;
    __declspec(property(get=GetWindowTypes,put=PutWindowTypes))
    long WindowTypes;
    __declspec(property(get=GetLastEventType))
    long LastEventType;
    __declspec(property(get=GetEnabledDrag,put=PutEnabledDrag))
    VARIANT_BOOL EnabledDrag;
    __declspec(property(get=GetLocateMode,put=PutLocateMode))
    long LocateMode;
    __declspec(property(get=GetDynamicsMode,put=PutDynamicsMode))
    long DynamicsMode;

    //
    // Wrapper methods for error-handling
    //

    void PutScaleMode (
        long plScaleMode );
    long GetScaleMode ( );
    VARIANT_BOOL GetEnabledMove ( );
    void PutEnabledMove (
        VARIANT_BOOL pbMoveEnabled );
    IDispatchPtr GetLastEventWindow ( );
    IDispatchPtr GetLastUpEventWindow ( );
    IDispatchPtr GetLastDownEventWindow ( );
    IDispatchPtr GetLastMoveEventWindow ( );
    short GetLastEventShift ( );
    short GetLastUpEventShift ( );
    short GetLastDownEventShift ( );
    short GetLastMoveEventShift ( );
    short GetLastEventButton ( );
    short GetLastUpEventButton ( );
    short GetLastDownEventButton ( );
    short GetLastMoveEventButton ( );
    double GetLastEventX ( );
    double GetLastEventY ( );
    double GetLastEventZ ( );
    double GetLastUpEventX ( );
    double GetLastUpEventY ( );
    double GetLastUpEventZ ( );
    double GetLastDownEventX ( );
    double GetLastDownEventY ( );
    double GetLastDownEventZ ( );
    double GetLastMoveEventX ( );
    double GetLastMoveEventY ( );
    double GetLastMoveEventZ ( );
    long GetWindowTypes ( );
    void PutWindowTypes (
        long plTypes );
    long GetLastEventType ( );
    VARIANT_BOOL GetEnabledDrag ( );
    void PutEnabledDrag (
        VARIANT_BOOL pbEnabledDrag );
    long GetLocateMode ( );
    void PutLocateMode (
        long plLocateMode );
    long GetDynamicsMode ( );
    void PutDynamicsMode (
        long plDynamicsMode );
    long GetPauseLocate ( );
    void PutPauseLocate (
        long plPauseLocate );
    HRESULT ClearLocateFilter ( );
    HRESULT AddToLocateFilter (
        long lFilter );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_ScaleMode (
        /*[in]*/ long plScaleMode ) = 0;
      virtual HRESULT __stdcall get_ScaleMode (
        /*[out,retval]*/ long * plScaleMode ) = 0;
      virtual HRESULT __stdcall get_EnabledMove (
        /*[out,retval]*/ VARIANT_BOOL * pbMoveEnabled ) = 0;
      virtual HRESULT __stdcall put_EnabledMove (
        /*[in]*/ VARIANT_BOOL pbMoveEnabled ) = 0;
      virtual HRESULT __stdcall get_LastEventWindow (
        /*[out,retval]*/ IDispatch * * pWindowDispatch ) = 0;
      virtual HRESULT __stdcall get_LastUpEventWindow (
        /*[out,retval]*/ IDispatch * * pWindowDispatch ) = 0;
      virtual HRESULT __stdcall get_LastDownEventWindow (
        /*[out,retval]*/ IDispatch * * pWindowDispatch ) = 0;
      virtual HRESULT __stdcall get_LastMoveEventWindow (
        /*[out,retval]*/ IDispatch * * pWindowDispatch ) = 0;
      virtual HRESULT __stdcall get_LastEventShift (
        /*[out,retval]*/ short * pShift ) = 0;
      virtual HRESULT __stdcall get_LastUpEventShift (
        /*[out,retval]*/ short * pShift ) = 0;
      virtual HRESULT __stdcall get_LastDownEventShift (
        /*[out,retval]*/ short * pShift ) = 0;
      virtual HRESULT __stdcall get_LastMoveEventShift (
        /*[out,retval]*/ short * pShift ) = 0;
      virtual HRESULT __stdcall get_LastEventButton (
        /*[out,retval]*/ short * pButton ) = 0;
      virtual HRESULT __stdcall get_LastUpEventButton (
        /*[out,retval]*/ short * pButton ) = 0;
      virtual HRESULT __stdcall get_LastDownEventButton (
        /*[out,retval]*/ short * pButton ) = 0;
      virtual HRESULT __stdcall get_LastMoveEventButton (
        /*[out,retval]*/ short * pButton ) = 0;
      virtual HRESULT __stdcall get_LastEventX (
        /*[out,retval]*/ double * pX ) = 0;
      virtual HRESULT __stdcall get_LastEventY (
        /*[out,retval]*/ double * pY ) = 0;
      virtual HRESULT __stdcall get_LastEventZ (
        /*[out,retval]*/ double * pZ ) = 0;
      virtual HRESULT __stdcall get_LastUpEventX (
        /*[out,retval]*/ double * pX ) = 0;
      virtual HRESULT __stdcall get_LastUpEventY (
        /*[out,retval]*/ double * pY ) = 0;
      virtual HRESULT __stdcall get_LastUpEventZ (
        /*[out,retval]*/ double * pZ ) = 0;
      virtual HRESULT __stdcall get_LastDownEventX (
        /*[out,retval]*/ double * pX ) = 0;
      virtual HRESULT __stdcall get_LastDownEventY (
        /*[out,retval]*/ double * pY ) = 0;
      virtual HRESULT __stdcall get_LastDownEventZ (
        /*[out,retval]*/ double * pZ ) = 0;
      virtual HRESULT __stdcall get_LastMoveEventX (
        /*[out,retval]*/ double * pX ) = 0;
      virtual HRESULT __stdcall get_LastMoveEventY (
        /*[out,retval]*/ double * pY ) = 0;
      virtual HRESULT __stdcall get_LastMoveEventZ (
        /*[out,retval]*/ double * pZ ) = 0;
      virtual HRESULT __stdcall get_WindowTypes (
        /*[out,retval]*/ long * plTypes ) = 0;
      virtual HRESULT __stdcall put_WindowTypes (
        /*[in]*/ long plTypes ) = 0;
      virtual HRESULT __stdcall get_LastEventType (
        /*[out,retval]*/ long * plType ) = 0;
      virtual HRESULT __stdcall get_EnabledDrag (
        /*[out,retval]*/ VARIANT_BOOL * pbEnabledDrag ) = 0;
      virtual HRESULT __stdcall put_EnabledDrag (
        /*[in]*/ VARIANT_BOOL pbEnabledDrag ) = 0;
      virtual HRESULT __stdcall get_LocateMode (
        /*[out,retval]*/ long * plLocateMode ) = 0;
      virtual HRESULT __stdcall put_LocateMode (
        /*[in]*/ long plLocateMode ) = 0;
      virtual HRESULT __stdcall get_DynamicsMode (
        /*[out,retval]*/ long * plDynamicsMode ) = 0;
      virtual HRESULT __stdcall put_DynamicsMode (
        /*[in]*/ long plDynamicsMode ) = 0;
      virtual HRESULT __stdcall get_PauseLocate (
        /*[out,retval]*/ long * plPauseLocate ) = 0;
      virtual HRESULT __stdcall put_PauseLocate (
        long plPauseLocate ) = 0;
      virtual HRESULT __stdcall raw_ClearLocateFilter ( ) = 0;
      virtual HRESULT __stdcall raw_AddToLocateFilter (
        /*[in]*/ long lFilter ) = 0;
};

struct __declspec(uuid("c3e5510f-72aa-11d3-a3e3-0004ac969a5d"))
ISEMouseEx : ISEMouse
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT PointOnGraphic (
        long * PointOnGraphicFlag,
        double * PointOnGraphic_X,
        double * PointOnGraphic_Y,
        double * PointOnGraphic_Z );
    VARIANT_BOOL GetInterDocumentLocate ( );
    void PutInterDocumentLocate (
        VARIANT_BOOL plInterDocumentLocate );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_PointOnGraphic (
        /*[out]*/ long * PointOnGraphicFlag,
        /*[out]*/ double * PointOnGraphic_X,
        /*[out]*/ double * PointOnGraphic_Y,
        /*[out]*/ double * PointOnGraphic_Z ) = 0;
      virtual HRESULT __stdcall get_InterDocumentLocate (
        /*[out,retval]*/ VARIANT_BOOL * plInterDocumentLocate ) = 0;
      virtual HRESULT __stdcall put_InterDocumentLocate (
        VARIANT_BOOL plInterDocumentLocate ) = 0;
};

struct __declspec(uuid("e46d9541-81a0-4040-b9fa-9c140845dcb1"))
ISEMouseEx2 : ISEMouseEx
{
    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetLocateFrontToBack ( );
    void PutLocateFrontToBack (
        VARIANT_BOOL LocateFrontToBack );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_LocateFrontToBack (
        /*[out,retval]*/ VARIANT_BOOL * LocateFrontToBack ) = 0;
      virtual HRESULT __stdcall put_LocateFrontToBack (
        VARIANT_BOOL LocateFrontToBack ) = 0;
};

struct __declspec(uuid("fe939157-a69f-49d4-b9ba-447f07d191c2"))
ISEMouseEx3 : ISEMouseEx2
{
    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetPathfinderLocate ( );
    void PutPathfinderLocate (
        VARIANT_BOOL PathfinderLocate );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PathfinderLocate (
        /*[out,retval]*/ VARIANT_BOOL * PathfinderLocate ) = 0;
      virtual HRESULT __stdcall put_PathfinderLocate (
        VARIANT_BOOL PathfinderLocate ) = 0;
};

struct __declspec(uuid("3b77de43-6b3e-11d1-919e-08003601be21"))
DISEMouseEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT MouseDown (
        short sButton,
        short sShift,
        double dX,
        double dY,
        double dZ,
        IDispatch * pWindowDispatch,
        long lKeyPointType,
        IDispatch * pGraphicDispatch );
    HRESULT MouseUp (
        short sButton,
        short sShift,
        double dX,
        double dY,
        double dZ,
        IDispatch * pWindowDispatch,
        long lKeyPointType,
        IDispatch * pGraphicDispatch );
    HRESULT MouseMove (
        short sButton,
        short sShift,
        double dX,
        double dY,
        double dZ,
        IDispatch * pWindowDispatch,
        long lKeyPointType,
        IDispatch * pGraphicDispatch );
    HRESULT MouseClick (
        short sButton,
        short sShift,
        double dX,
        double dY,
        double dZ,
        IDispatch * pWindowDispatch,
        long lKeyPointType,
        IDispatch * pGraphicDispatch );
    HRESULT MouseDblClick (
        short sButton,
        short sShift,
        double dX,
        double dY,
        double dZ,
        IDispatch * pWindowDispatch,
        long lKeyPointType,
        IDispatch * pGraphicDispatch );
    HRESULT MouseDrag (
        short sButton,
        short sShift,
        double dX,
        double dY,
        double dZ,
        IDispatch * pWindowDispatch,
        short DragState,
        long lKeyPointType,
        IDispatch * pGraphicDispatch );
};

struct __declspec(uuid("19466b48-2a10-11d1-ba2e-080036230602"))
ISEMouseEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT MouseDown (
        short sButton,
        short sShift,
        double dX,
        double dY,
        double dZ,
        IDispatch * pWindowDispatch,
        long lKeyPointType,
        IDispatch * pGraphicDispatch );
    HRESULT MouseUp (
        short sButton,
        short sShift,
        double dX,
        double dY,
        double dZ,
        IDispatch * pWindowDispatch,
        long lKeyPointType,
        IDispatch * pGraphicDispatch );
    HRESULT MouseMove (
        short sButton,
        short sShift,
        double dX,
        double dY,
        double dZ,
        IDispatch * pWindowDispatch,
        long lKeyPointType,
        IDispatch * pGraphicDispatch );
    HRESULT MouseClick (
        short sButton,
        short sShift,
        double dX,
        double dY,
        double dZ,
        IDispatch * pWindowDispatch,
        long lKeyPointType,
        IDispatch * pGraphicDispatch );
    HRESULT MouseDblClick (
        short sButton,
        short sShift,
        double dX,
        double dY,
        double dZ,
        IDispatch * pWindowDispatch,
        long lKeyPointType,
        IDispatch * pGraphicDispatch );
    HRESULT MouseDrag (
        short sButton,
        short sShift,
        double dX,
        double dY,
        double dZ,
        IDispatch * pWindowDispatch,
        short DragState,
        long lKeyPointType,
        IDispatch * pGraphicDispatch );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_MouseDown (
        /*[in]*/ short sButton,
        /*[in]*/ short sShift,
        /*[in]*/ double dX,
        /*[in]*/ double dY,
        /*[in]*/ double dZ,
        /*[in]*/ IDispatch * pWindowDispatch,
        /*[in]*/ long lKeyPointType,
        /*[in]*/ IDispatch * pGraphicDispatch ) = 0;
      virtual HRESULT __stdcall raw_MouseUp (
        /*[in]*/ short sButton,
        /*[in]*/ short sShift,
        /*[in]*/ double dX,
        /*[in]*/ double dY,
        /*[in]*/ double dZ,
        /*[in]*/ IDispatch * pWindowDispatch,
        /*[in]*/ long lKeyPointType,
        /*[in]*/ IDispatch * pGraphicDispatch ) = 0;
      virtual HRESULT __stdcall raw_MouseMove (
        /*[in]*/ short sButton,
        /*[in]*/ short sShift,
        /*[in]*/ double dX,
        /*[in]*/ double dY,
        /*[in]*/ double dZ,
        /*[in]*/ IDispatch * pWindowDispatch,
        /*[in]*/ long lKeyPointType,
        /*[in]*/ IDispatch * pGraphicDispatch ) = 0;
      virtual HRESULT __stdcall raw_MouseClick (
        /*[in]*/ short sButton,
        /*[in]*/ short sShift,
        /*[in]*/ double dX,
        /*[in]*/ double dY,
        /*[in]*/ double dZ,
        /*[in]*/ IDispatch * pWindowDispatch,
        /*[in]*/ long lKeyPointType,
        /*[in]*/ IDispatch * pGraphicDispatch ) = 0;
      virtual HRESULT __stdcall raw_MouseDblClick (
        /*[in]*/ short sButton,
        /*[in]*/ short sShift,
        /*[in]*/ double dX,
        /*[in]*/ double dY,
        /*[in]*/ double dZ,
        /*[in]*/ IDispatch * pWindowDispatch,
        /*[in]*/ long lKeyPointType,
        /*[in]*/ IDispatch * pGraphicDispatch ) = 0;
      virtual HRESULT __stdcall raw_MouseDrag (
        /*[in]*/ short sButton,
        /*[in]*/ short sShift,
        /*[in]*/ double dX,
        /*[in]*/ double dY,
        /*[in]*/ double dZ,
        /*[in]*/ IDispatch * pWindowDispatch,
        /*[in]*/ short DragState,
        /*[in]*/ long lKeyPointType,
        /*[in]*/ IDispatch * pGraphicDispatch ) = 0;
};

struct __declspec(uuid("3b77de46-6b3e-11d1-919e-08003601be21"))
CommandWindow;
    // [ default ] interface IUnknown
    // [ default, source ] dispinterface DISECommandWindowEvents
    // [ source ] interface ISECommandWindowEvents

struct __declspec(uuid("f3484607-2af7-11d1-ba2f-080036230602"))
ISECommand : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetMouse))
    DISEMousePtr Mouse;
    __declspec(property(get=GetWindow))
    IUnknownPtr Window;
    __declspec(property(get=GetDone,put=PutDone))
    VARIANT_BOOL Done;
    __declspec(property(get=GetOnEditOwnerChange,put=PutOnEditOwnerChange))
    long OnEditOwnerChange;
    __declspec(property(get=GetOnEnvironmentChange,put=PutOnEnvironmentChange))
    long OnEnvironmentChange;

    //
    // Wrapper methods for error-handling
    //

    DISEMousePtr GetMouse ( );
    IUnknownPtr GetWindow ( );
    VARIANT_BOOL GetDone ( );
    void PutDone (
        VARIANT_BOOL pbDone );
    long GetOnEditOwnerChange ( );
    void PutOnEditOwnerChange (
        long plContinueOnChange );
    long GetOnEnvironmentChange ( );
    void PutOnEnvironmentChange (
        long plContinueOnChange );
    HRESULT Start ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Mouse (
        /*[out,retval]*/ struct DISEMouse * * ppMouse ) = 0;
      virtual HRESULT __stdcall get_Window (
        /*[out,retval]*/ struct IUnknown * * ppWindow ) = 0;
      virtual HRESULT __stdcall get_Done (
        /*[out,retval]*/ VARIANT_BOOL * pbDone ) = 0;
      virtual HRESULT __stdcall put_Done (
        /*[in]*/ VARIANT_BOOL pbDone ) = 0;
      virtual HRESULT __stdcall get_OnEditOwnerChange (
        /*[out,retval]*/ long * plContinueOnChange ) = 0;
      virtual HRESULT __stdcall put_OnEditOwnerChange (
        /*[in]*/ long plContinueOnChange ) = 0;
      virtual HRESULT __stdcall get_OnEnvironmentChange (
        /*[out,retval]*/ long * plContinueOnChange ) = 0;
      virtual HRESULT __stdcall put_OnEnvironmentChange (
        /*[in]*/ long plContinueOnChange ) = 0;
      virtual HRESULT __stdcall raw_Start ( ) = 0;
};

struct __declspec(uuid("3b77de45-6b3e-11d1-919e-08003601be21"))
DISECommandWindowEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT WindowProc (
        IDispatch * pUnkDoc,
        IDispatch * pUnkView,
        long nMsg,
        long wParam,
        long lParam,
        long * lResult );
};

struct __declspec(uuid("8460ffd7-2a24-11d1-ba2e-080036230602"))
ISECommandWindowEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    LONG_PTR WindowProc (
        IDispatch * pTheDoc,
        IDispatch * pTheView,
        unsigned int nMsg,
        UINT_PTR wParam,
        LONG_PTR lParam );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_WindowProc (
        /*[in]*/ IDispatch * pTheDoc,
        /*[in]*/ IDispatch * pTheView,
        /*[in]*/ unsigned int nMsg,
        /*[in]*/ UINT_PTR wParam,
        /*[in]*/ LONG_PTR lParam,
        /*[out,retval]*/ LONG_PTR * lResult ) = 0;
};

struct __declspec(uuid("3b77de41-6b3e-11d1-919e-08003601be21"))
DISECommandEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT Activate ( );
    HRESULT Deactivate ( );
    HRESULT Terminate ( );
    HRESULT Idle (
        long lCount,
        VARIANT_BOOL * pbMore );
    HRESULT KeyDown (
        short * KeyCode,
        short Shift );
    HRESULT KeyPress (
        short * KeyAscii );
    HRESULT KeyUp (
        short * KeyCode,
        short Shift );
};

struct __declspec(uuid("19466b47-2a10-11d1-ba2e-080036230602"))
ISECommandEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Activate ( );
    HRESULT Deactivate ( );
    HRESULT Terminate ( );
    HRESULT Idle (
        long lCount,
        VARIANT_BOOL * pbMore );
    HRESULT KeyDown (
        short * KeyCode,
        short Shift );
    HRESULT KeyPress (
        short * KeyAscii );
    HRESULT KeyUp (
        short * KeyCode,
        short Shift );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Activate ( ) = 0;
      virtual HRESULT __stdcall raw_Deactivate ( ) = 0;
      virtual HRESULT __stdcall raw_Terminate ( ) = 0;
      virtual HRESULT __stdcall raw_Idle (
        /*[in]*/ long lCount,
        /*[out]*/ VARIANT_BOOL * pbMore ) = 0;
      virtual HRESULT __stdcall raw_KeyDown (
        /*[in]*/ short * KeyCode,
        /*[in]*/ short Shift ) = 0;
      virtual HRESULT __stdcall raw_KeyPress (
        /*[in]*/ short * KeyAscii ) = 0;
      virtual HRESULT __stdcall raw_KeyUp (
        /*[in]*/ short * KeyCode,
        /*[in]*/ short Shift ) = 0;
};

struct __declspec(uuid("a50d497a-288a-11d2-b586-080036e8b802"))
AddIns : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetApplication ( );
    long GetCount ( );
    AddInPtr Item (
        const _variant_t & Index );
    HRESULT Update ( );
};

struct __declspec(uuid("a50d497d-288a-11d2-b586-080036e8b802"))
AddIn : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetAddInEvents))
    IUnknownPtr AddInEvents;
    __declspec(property(get=GetConnect,put=PutConnect))
    VARIANT_BOOL Connect;
    __declspec(property(get=GetDescription,put=PutDescription))
    _bstr_t Description;
    __declspec(property(get=GetGUID))
    _bstr_t GUID;
    __declspec(property(get=GetGuiVersion,put=PutGuiVersion))
    long GuiVersion;
    __declspec(property(get=GetObject,put=PutObject))
    IDispatchPtr Object;
    __declspec(property(get=GetProgID))
    _bstr_t ProgID;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetApplication ( );
    IUnknownPtr GetAddInEvents ( );
    VARIANT_BOOL GetConnect ( );
    void PutConnect (
        VARIANT_BOOL _arg1 );
    _bstr_t GetDescription ( );
    void PutDescription (
        _bstr_t _arg1 );
    _bstr_t GetGUID ( );
    long GetGuiVersion ( );
    void PutGuiVersion (
        long _arg1 );
    IDispatchPtr GetObject ( );
    void PutObject (
        IDispatch * _arg1 );
    _bstr_t GetProgID ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    HRESULT SetAddInInfo (
        long InstanceHandle,
        _bstr_t EnvironmentCatID,
        _bstr_t CategoryName,
        long IDColorBitmapMedium,
        long IDColorBitmapLarge,
        long IDMonochromeBitmapMedium,
        long IDMonochromeBitmapLarge,
        long NumberOfCommands,
        SAFEARRAY * * CommandNames,
        SAFEARRAY * * CommandIDs );
    long AddCommand (
        _bstr_t EnvironmentCatID,
        _bstr_t CommandName,
        long CommandID );
    CommandBarButtonPtr AddCommandBarButton (
        _bstr_t EnvironmentCatID,
        _bstr_t CommandBarName,
        long CommandID );
};

struct __declspec(uuid("a50d497c-288a-11d2-b586-080036e8b802"))
ISEAddIns : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    AddInPtr Item (
        const _variant_t & Index );
    HRESULT Update ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * Application ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Unknown ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct AddIn * * AddIn ) = 0;
      virtual HRESULT __stdcall raw_Update ( ) = 0;
};

struct __declspec(uuid("0f539243-4816-11d2-b5ac-080036e8b802"))
AddInEvents;
    // [ default ] interface IUnknown
    // [ source ] interface ISEAddInEvents
    // [ default, source ] dispinterface DISEAddInEvents

struct __declspec(uuid("0f539244-4816-11d2-b5ac-080036e8b802"))
ISEAddInEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT OnCommand (
        long CommandID );
    HRESULT OnCommandHelp (
        long hFrameWnd,
        long HelpCommandID,
        long CommandID );
    HRESULT OnCommandUpdateUI (
        long CommandID,
        long * CommandFlags,
        BSTR * MenuItemText,
        long * BitmapID );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_OnCommand (
        /*[in]*/ long CommandID ) = 0;
      virtual HRESULT __stdcall raw_OnCommandHelp (
        /*[in]*/ long hFrameWnd,
        /*[in]*/ long HelpCommandID,
        /*[in]*/ long CommandID ) = 0;
      virtual HRESULT __stdcall raw_OnCommandUpdateUI (
        /*[in]*/ long CommandID,
        /*[in,out]*/ long * CommandFlags,
        /*[out]*/ BSTR * MenuItemText,
        /*[in,out]*/ long * BitmapID ) = 0;
};

struct __declspec(uuid("0f539245-4816-11d2-b5ac-080036e8b802"))
DISEAddInEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT OnCommand (
        long nCmdID );
    HRESULT OnCommandHelp (
        long hFrameWnd,
        long uHelpCommand,
        long nCmdID );
    HRESULT OnCommandUpdateUI (
        long nCmdID,
        long * lCmdFlags,
        BSTR * MenuItemText,
        long * nIDBitmap );
};

struct __declspec(uuid("1d3da505-9bff-11d1-ba96-080036230602"))
CommandBarButton : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetBeginGroup,put=PutBeginGroup))
    VARIANT_BOOL BeginGroup;
    __declspec(property(get=GetBuiltIn))
    VARIANT_BOOL BuiltIn;
    __declspec(property(get=GetBuiltInFace,put=PutBuiltInFace))
    VARIANT_BOOL BuiltInFace;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetDescriptionText,put=PutDescriptionText))
    _bstr_t DescriptionText;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetFaceId,put=PutFaceId))
    long FaceId;
    __declspec(property(get=GetHeight))
    long Height;
    __declspec(property(get=GetHelpContextId,put=PutHelpContextId))
    long HelpContextId;
    __declspec(property(get=GetHelpFile,put=PutHelpFile))
    _bstr_t HelpFile;
    __declspec(property(get=GetId))
    long Id;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetLeft))
    long Left;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetParameterText,put=PutParameterText))
    _bstr_t ParameterText;
    __declspec(property(get=GetParent))
    CommandBarPtr Parent;
    __declspec(property(get=GetShortcutText,put=PutShortcutText))
    _bstr_t ShortcutText;
    __declspec(property(get=GetTag,put=PutTag))
    _bstr_t Tag;
    __declspec(property(get=GetTooltipText,put=PutTooltipText))
    _bstr_t TooltipText;
    __declspec(property(get=GetTop))
    long Top;
    __declspec(property(get=GetType))
    enum SeControlType Type;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetWidth))
    long Width;
    __declspec(property(get=GetCommandBarButtonEvents))
    IUnknownPtr CommandBarButtonEvents;
    __declspec(property(get=GetState,put=PutState))
    enum SeButtonState State;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum SeButtonStyle Style;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetApplication ( );
    VARIANT_BOOL GetBeginGroup ( );
    void PutBeginGroup (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetBuiltIn ( );
    VARIANT_BOOL GetBuiltInFace ( );
    void PutBuiltInFace (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    _bstr_t GetDescriptionText ( );
    void PutDescriptionText (
        _bstr_t _arg1 );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    long GetFaceId ( );
    void PutFaceId (
        long _arg1 );
    long GetHeight ( );
    long GetHelpContextId ( );
    void PutHelpContextId (
        long _arg1 );
    _bstr_t GetHelpFile ( );
    void PutHelpFile (
        _bstr_t _arg1 );
    long GetId ( );
    long GetIndex ( );
    long GetLeft ( );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _bstr_t GetParameterText ( );
    void PutParameterText (
        _bstr_t _arg1 );
    CommandBarPtr GetParent ( );
    _bstr_t GetShortcutText ( );
    void PutShortcutText (
        _bstr_t _arg1 );
    _bstr_t GetTag ( );
    void PutTag (
        _bstr_t _arg1 );
    _bstr_t GetTooltipText ( );
    void PutTooltipText (
        _bstr_t _arg1 );
    long GetTop ( );
    enum SeControlType GetType ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    long GetWidth ( );
    HRESULT Delete (
        const _variant_t & Temporary = vtMissing );
    HRESULT Execute ( );
    HRESULT Help ( );
    HRESULT LoadFace (
        _bstr_t Face );
    IUnknownPtr GetCommandBarButtonEvents ( );
    enum SeButtonState GetState ( );
    void PutState (
        enum SeButtonState _arg1 );
    enum SeButtonStyle GetStyle ( );
    void PutStyle (
        enum SeButtonStyle _arg1 );
};

struct __declspec(uuid("a50d497b-288a-11d2-b586-080036e8b802"))
ISEAddIn : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetAddInEvents))
    IUnknownPtr AddInEvents;
    __declspec(property(get=GetConnect,put=PutConnect))
    VARIANT_BOOL Connect;
    __declspec(property(get=GetDescription,put=PutDescription))
    _bstr_t Description;
    __declspec(property(get=GetGUID))
    _bstr_t GUID;
    __declspec(property(get=GetGuiVersion,put=PutGuiVersion))
    long GuiVersion;
    __declspec(property(get=GetObject,put=PutObject))
    IDispatchPtr Object;
    __declspec(property(get=GetProgID))
    _bstr_t ProgID;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    IUnknownPtr GetAddInEvents ( );
    VARIANT_BOOL GetConnect ( );
    void PutConnect (
        VARIANT_BOOL Connect );
    _bstr_t GetDescription ( );
    void PutDescription (
        _bstr_t Description );
    _bstr_t GetGUID ( );
    long GetGuiVersion ( );
    void PutGuiVersion (
        long GuiVersion );
    IDispatchPtr GetObject ( );
    void PutObject (
        IDispatch * Object );
    _bstr_t GetProgID ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Visible );
    HRESULT SetAddInInfo (
        long InstanceHandle,
        _bstr_t EnvironmentCatID,
        _bstr_t CategoryName,
        long IDColorBitmapMedium,
        long IDColorBitmapLarge,
        long IDMonochromeBitmapMedium,
        long IDMonochromeBitmapLarge,
        long NumberOfCommands,
        SAFEARRAY * * CommandNames,
        SAFEARRAY * * CommandIDs );
    long AddCommand (
        _bstr_t EnvironmentCatID,
        _bstr_t CommandName,
        long CommandID );
    CommandBarButtonPtr AddCommandBarButton (
        _bstr_t EnvironmentCatID,
        _bstr_t CommandBarName,
        long CommandID );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * Application ) = 0;
      virtual HRESULT __stdcall get_AddInEvents (
        /*[out,retval]*/ struct IUnknown * * AddInEvents ) = 0;
      virtual HRESULT __stdcall get_Connect (
        /*[out,retval]*/ VARIANT_BOOL * Connect ) = 0;
      virtual HRESULT __stdcall put_Connect (
        /*[in]*/ VARIANT_BOOL Connect ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * Description ) = 0;
      virtual HRESULT __stdcall put_Description (
        /*[in]*/ BSTR Description ) = 0;
      virtual HRESULT __stdcall get_GUID (
        /*[out,retval]*/ BSTR * GUID ) = 0;
      virtual HRESULT __stdcall get_GuiVersion (
        /*[out,retval]*/ long * GuiVersion ) = 0;
      virtual HRESULT __stdcall put_GuiVersion (
        /*[in]*/ long GuiVersion ) = 0;
      virtual HRESULT __stdcall get_Object (
        /*[out,retval]*/ IDispatch * * Object ) = 0;
      virtual HRESULT __stdcall put_Object (
        /*[in]*/ IDispatch * Object ) = 0;
      virtual HRESULT __stdcall get_ProgID (
        /*[out,retval]*/ BSTR * ProgID ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
      virtual HRESULT __stdcall raw_SetAddInInfo (
        /*[in]*/ long InstanceHandle,
        /*[in]*/ BSTR EnvironmentCatID,
        /*[in]*/ BSTR CategoryName,
        /*[in]*/ long IDColorBitmapMedium,
        /*[in]*/ long IDColorBitmapLarge,
        /*[in]*/ long IDMonochromeBitmapMedium,
        /*[in]*/ long IDMonochromeBitmapLarge,
        /*[in]*/ long NumberOfCommands,
        /*[in]*/ SAFEARRAY * * CommandNames,
        /*[in,out]*/ SAFEARRAY * * CommandIDs ) = 0;
      virtual HRESULT __stdcall raw_AddCommand (
        /*[in]*/ BSTR EnvironmentCatID,
        /*[in]*/ BSTR CommandName,
        /*[in]*/ long CommandID,
        /*[out,retval]*/ long * SolidEdgeCommandID ) = 0;
      virtual HRESULT __stdcall raw_AddCommandBarButton (
        /*[in]*/ BSTR EnvironmentCatID,
        /*[in]*/ BSTR CommandBarName,
        /*[in]*/ long CommandID,
        /*[out,retval]*/ struct CommandBarButton * * CommandBarButton ) = 0;
};

struct __declspec(uuid("59de95a1-9ca6-11d1-ba97-080036230602"))
CommandBarButtonEvents;
    // [ default ] interface IUnknown
    // [ source ] interface ISECommandBarButtonEvents
    // [ default, source ] dispinterface DISECommandBarButtonEvents

struct __declspec(uuid("5a1831f0-9da4-11d1-ba98-080036230602"))
ISECommandBarButtonEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Click ( );
    HRESULT Help (
        long hFrameWnd,
        long HelpCommandID );
    HRESULT UpdateUI ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Click ( ) = 0;
      virtual HRESULT __stdcall raw_Help (
        /*[in]*/ long hFrameWnd,
        /*[in]*/ long HelpCommandID ) = 0;
      virtual HRESULT __stdcall raw_UpdateUI ( ) = 0;
};

struct __declspec(uuid("1d3da506-9bff-11d1-ba96-080036230602"))
DISECommandBarButtonEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT Click ( );
    HRESULT Help (
        long hFrameWnd,
        long uHelpCommand );
    HRESULT UpdateUI ( );
};

enum SeButtonState
{
    seButtonDown = 1,
    seButtonMixed = 2,
    seButtonUp = 3
};

enum SeButtonStyle
{
    seButtonAutomatic = 1,
    seButtonCaption = 2,
    seButtonIcon = 3,
    seButtonIconAndCaption = 4,
    seButtonIconAndCaptionBelow = 5,
    seCheckButton = 6,
    seCheckButtonAndIcon = 7,
    seRadioButton = 8,
    seNoExitBackstageButton = 9
};

struct __declspec(uuid("5a1831f1-9da4-11d1-ba98-080036230602"))
ISECommandBarButton : ISECommandBarControl
{
    //
    // Property data
    //

    __declspec(property(get=GetCommandBarButtonEvents))
    IUnknownPtr CommandBarButtonEvents;
    __declspec(property(get=GetState,put=PutState))
    enum SeButtonState State;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum SeButtonStyle Style;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr GetCommandBarButtonEvents ( );
    enum SeButtonState GetState ( );
    void PutState (
        enum SeButtonState State );
    enum SeButtonStyle GetStyle ( );
    void PutStyle (
        enum SeButtonStyle Style );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CommandBarButtonEvents (
        /*[out,retval]*/ struct IUnknown * * CommandBarButtonEvents ) = 0;
      virtual HRESULT __stdcall get_State (
        /*[out,retval]*/ enum SeButtonState * State ) = 0;
      virtual HRESULT __stdcall put_State (
        /*[in]*/ enum SeButtonState State ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum SeButtonStyle * Style ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum SeButtonStyle Style ) = 0;
};

struct __declspec(uuid("ebf71668-acf0-11d3-a3f3-0004ac969a5d"))
FeatureLibraryEvents;
    // [ default ] interface IUnknown
    // [ default, source ] interface ISEFeatureLibraryEvents

struct __declspec(uuid("ebf71669-acf0-11d3-a3f3-0004ac969a5d"))
ISEFeatureLibraryEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT AfterFeatureLibraryDocumentCreated (
        _bstr_t Name );
    HRESULT AfterFeatureLibraryDocumentRenamed (
        _bstr_t NewName,
        _bstr_t OldName );
    HRESULT AfterFeatureLibraryDocumentDeleted (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AfterFeatureLibraryDocumentCreated (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall raw_AfterFeatureLibraryDocumentRenamed (
        /*[in]*/ BSTR NewName,
        /*[in]*/ BSTR OldName ) = 0;
      virtual HRESULT __stdcall raw_AfterFeatureLibraryDocumentDeleted (
        /*[in]*/ BSTR Name ) = 0;
};

enum ApplicationGlobalConstants
{
    seApplicationGlobalDisplayQuality = 0,
    seApplicationGlobalDisplayArcQuality = 1,
    seApplicationGlobalColorActive = 2,
    seApplicationGlobalColorBackground = 3,
    seApplicationGlobalColorConstruction = 4,
    seApplicationGlobalColorDisabled = 5,
    seApplicationGlobalColorFailed = 6,
    seApplicationGlobalColorHandle = 7,
    seApplicationGlobalColorHighlight = 8,
    seApplicationGlobalColorProfile = 9,
    seApplicationGlobalColorSelected = 10,
    seApplicationGlobalColorSheet = 11,
    seApplicationGlobalAutomaticSave = 12,
    seApplicationGlobalAutomaticSaveTime = 13,
    seApplicationGlobalDisplayStatistics = 14,
    seApplicationGlobalDisplaySectionCaps = 15,
    seApplicationGlobalSoftwareVHL = 16,
    seApplicationGlobalDynamicTransition = 17,
    seApplicationGlobalApplicationDisplay = 18,
    seApplicationGlobalDefaultSharpness = 19,
    seApplicationGlobalCheckInOnClose = 20,
    seApplicationGlobalLogFilesLocation = 21,
    seApplicationGlobalInsightCacheLocation = 22,
    seApplicationGlobalInsightFolderMappingFileLocation = 23,
    seApplicationGlobalSearchScope = 24,
    seApplicationGlobalOfflineMode = 25,
    seApplicationGlobalLookAheadVersion = 26,
    seApplicationGlobalUploadOnClose = 27,
    seApplicationGlobalOverlayColor = 28,
    seApplicationGlobalOverlayColorMode = 29,
    seApplicationGlobalEnableThreadedDisplay = 30,
    seApplicationGlobalColorRefPlane = 31,
    seApplicationGlobalOpacityRefPlane = 32,
    seApplicationGlobalRevisionDelimiter = 33,
    seApplicationGlobalCurvatureCombDensity = 34,
    seApplicationGlobalCurvatureCombMagnitude = 35,
    seApplicationGlobalApplyStatusToLinks = 36,
    seApplicationGlobalUpdateDraft = 37,
    seApplicationGlobalMakeRevisionsObsolete = 38,
    seApplicationGlobalAvailableRootFolder = 39,
    seApplicationGlobalObsoleteRootFolder = 40,
    seApplicationGlobalInWorkRootFolder = 41,
    seApplicationGlobalReleasedRootFolder = 42,
    seApplicationGlobalInReviewRootFolder = 43,
    seApplicationGlobalBaselinedRootFolder = 44,
    seApplicationGlobalEnableDynamicTolerance = 45,
    seApplicationGlobalSystemInfo = 46,
    seApplicationGlobalPrereleaseRootFolder = 47,
    seApplicationGlobalPackagedCollaborationRootFolder = 48,
    seApplicationGlobalECRRootFolder = 49,
    seApplicationGlobalECORootFolder = 50,
    seApplicationGlobalTemplateRootFolder = 51,
    seApplicationGlobalUseDimensionStyleMapping = 52,
    seApplicationGlobalAdminFileLocation = 53,
    seApplicationGlobalColorManagerUseToolsOptionsColorSettings = 54,
    seApplicationGlobalColorManagerUseIndividualPartStyles = 55,
    seApplicationGlobalColorManagerShowPartFaceColors = 56,
    seApplicationGlobalColorManagerShowAssemblyStyleOverrides = 57,
    seApplicationGlobalColorManagerCopyIndividualFaceColors = 58,
    seApplicationGlobalTeamCenterMode = 59,
    seApplicationGlobalSessionDraftOpenInactive = 60,
    seApplicationGlobalHoleSizeFile = 61,
    seApplicationGlobalPipeThreadfsFile = 62,
    seApplicationGlobalCustomSettingFile = 63,
    seApplicationGlobalHideAllComponents = 64,
    seApplicationGlobalApplyActivationOverridesToParts = 65,
    seApplicationGlobalActivateAllParts = 66,
    seApplicationGlobalApplySimplifyOverridesToParts = 67,
    seApplicationGlobalUseAllSimplifiedParts = 68,
    seApplicationGlobalApplySimplifyOverridesToSubAssemblies = 69,
    seApplicationGlobalUseAllSimplifiedSubAssemblies = 70,
    seApplicationGlobalStatusBarZoom = 71,
    seApplicationGlobalStatusBarZoomArea = 72,
    seApplicationGlobalStatusBarFit = 73,
    seApplicationGlobalStatusBarPan = 74,
    seApplicationGlobalStatusBarRotateView = 75,
    seApplicationGlobalStatusBarSpinAbout = 76,
    seApplicationGlobalStatusBarLookAtFace = 77,
    seApplicationGlobalStatusBarCommonViews = 78,
    seApplicationGlobalStatusBarPreviousView = 79,
    seApplicationGlobalStatusBarNamedViews = 80,
    seApplicationGlobalStatusBarViewStyles = 81,
    seApplicationGlobalStatusBarZoomSlider = 82,
    seApplicationGlobalStatusBarZoomTool = 83,
    seApplicationGlobalStatusBarCmdFinder = 84,
    seApplicationGlobalUserType = 85,
    seApplicationGlobalStatusBarSketchView = 86,
    seApplicationGlobalTeamcenterFormula = 87,
    seApplicationGlobalDocumentNameFormula = 88,
    seApplicationGlobalOpenAsReadOnly3DFile = 89,
    seApplicationGlobalOpenAsReadOnlyDftFile = 90,
    seApplicationGlobalColorLiveSectionEdge = 91,
    seApplicationGlobalColorLiveSectionCenterline = 92,
    seApplicationGlobalColorLiveSectionRegion = 93,
    seApplicationGlobalColorLiveSectionOpacity = 94,
    seApplicationGlobalOpenAsReadOnly3DFile_IndirectFiles = 95,
    seApplicationGlobalOpenAsReadOnlyDftFile_IndirectFiles = 96,
    seApplicationGlobalANSIInchToleranceFile = 97,
    seApplicationGlobalANSIMetricToleranceFile = 98,
    seApplicationGlobalISOToleranceFile = 99,
    seApplicationGlobalUseISOToleranceTable = 100,
    seApplicationGlobalUseDetailEnvelopeStandard = 101,
    seApplicationGlobalUseDetailEnvelopeDisplayAsCircle = 102,
    seApplicationGlobalUseDrawingViewShowCroppingEdges = 103,
    seApplicationGlobalShowUnitsInValueFields = 104,
    seApplicationGlobalCommandBarMode = 105,
    seApplicationGlobalUseDrawingViewShowEdgesHiddenTangentEdgesSelfHidden = 106,
    seApplicationGlobalUseDrawingViewShowEdgesHiddenTangentEdgesHiddenByOtherParts = 107,
    seApplicationGlobalZebraFormula = 108,
    seApplicationGlobalZebraFolderMapping = 109,
    seApplicationGlobalAutoSharpenLevel = 110,
    seApplicationGlobalUseDimensionStyleElementMapLinDim = 111,
    seApplicationGlobalUseDimensionStyleElementMapRadialDim = 112,
    seApplicationGlobalUseDimensionStyleElementMapRadialDiameterDim = 113,
    seApplicationGlobalUseDimensionStyleElementMapCircularDiameterDim = 114,
    seApplicationGlobalUseDimensionStyleElementMapSymmetricDiameterDim = 115,
    seApplicationGlobalUseDimensionStyleElementMapCoordinateDim = 116,
    seApplicationGlobalUseDimensionStyleElementMapAngularDim = 117,
    seApplicationGlobalUseDimensionStyleElementMapAngularCoordinateDim = 118,
    seApplicationGlobalUseDimensionStyleElementMapChamferDim = 119,
    seApplicationGlobalUseDimensionStyleElementMapCenterline = 120,
    seApplicationGlobalUseDimensionStyleElementMapCenterMark = 121,
    seApplicationGlobalUseDimensionStyleElementMapBHC = 122,
    seApplicationGlobalUseDimensionStyleElementMapBalloon = 123,
    seApplicationGlobalUseDimensionStyleElementMapCallouts = 124,
    seApplicationGlobalUseDimensionStyleElementMapLeaders = 125,
    seApplicationGlobalUseDimensionStyleElementMapConnectors = 126,
    seApplicationGlobalUseDimensionStyleElementMapSTSymbols = 127,
    seApplicationGlobalUseDimensionStyleElementMapWeldSymbols = 128,
    seApplicationGlobalUseDimensionStyleElementMapEdgeCondition = 129,
    seApplicationGlobalUseDimensionStyleElementMapDatumFrames = 130,
    seApplicationGlobalUseDimensionStyleElementMapDatumPoints = 131,
    seApplicationGlobalUseDimensionStyleElementMapDatumTargets = 132,
    seApplicationGlobalUseDimensionStyleElementMapFCF = 133,
    seApplicationGlobalUseDimensionStyleElementMapBlockLabels = 134,
    seApplicationGlobalSaveMultiCADDatasettoTC = 135,
    seApplicationGlobalSheetTabDisplayInfo = 136,
    seApplicationGlobalSheetTabDisplayInfoSeparator = 137,
    seApplicationGlobalColorSheetTab1 = 138,
    seApplicationGlobalColorSheetTab2 = 139,
    seApplicationGlobalChangedPartActivation = 140,
    seApplicationGlobalSectionCurvatureCombDensity = 141,
    seApplicationGlobalSectionCurvatureCombMagnitude = 142,
    seApplicationGlobalUseOnLineHelp = 143,
    seApplicationGlobalOnLineHelpLocation = 144,
    seApplicationGlobalStatusBarRecordVideo = 145,
    seApplicationGlobalStatusBarUploadToYouTube = 146,
    seApplicationGlobalGRID_Draft_ShowGrid = 147,
    seApplicationGlobalGRID_Draft_SnapToGrid = 148,
    seApplicationGlobalGRID_Draft_ShowReadout = 149,
    seApplicationGlobalGRID_Draft_ShowAlignmentLines = 150,
    seApplicationGlobalGRID_Draft_ShowKeyIns = 151,
    seApplicationGlobalGRID_Draft_MajorLineColor = 152,
    seApplicationGlobalGRID_Draft_MinorLineColor = 153,
    seApplicationGlobalGRID_Sync_ShowGrid = 154,
    seApplicationGlobalGRID_Sync_SnapToGrid = 155,
    seApplicationGlobalGRID_Sync_ShowReadout = 156,
    seApplicationGlobalGRID_Sync_ShowAlignmentLines = 157,
    seApplicationGlobalGRID_Sync_ShowKeyIns = 158,
    seApplicationGlobalGRID_Sync_MajorLineColor = 159,
    seApplicationGlobalGRID_Sync_MinorLineColor = 160,
    seApplicationGlobalGRID_Ordered_ShowGrid = 161,
    seApplicationGlobalGRID_Ordered_SnapToGrid = 162,
    seApplicationGlobalGRID_Ordered_ShowReadout = 163,
    seApplicationGlobalGRID_Ordered_ShowAlignmentLines = 164,
    seApplicationGlobalGRID_Ordered_ShowKeyIns = 165,
    seApplicationGlobalGRID_Ordered_MajorLineColor = 166,
    seApplicationGlobalGRID_Ordered_MinorLineColor = 167,
    seApplicationGlobalDraftSaveAsPDFSaveAllColorsBlack = 168,
    seApplicationGlobalDraftSaveAsPDFIncludeGridDisplay = 169,
    seApplicationGlobalDraftSaveAsPDFTransparentDVBackgrounds = 170,
    seApplicationGlobalDraftSaveAsPDFPrintQualityDPI = 171,
    seApplicationGlobalDraftSaveAsPDFSheetOptions = 172,
    seApplicationGlobalDraftSaveAsPDFSheetsRange = 173,
    seApplicationGlobalDraftSaveAsPDFUseIndividualSheetSizes = 174,
    seApplicationGlobalShowUnitsValueField = 175,
    seApplicationGlobalPromptMatmodelDoc = 176,
    seApplicationGlobalStoreGeomPart = 177,
    seApplicationGlobalRecentlyUsedFilesBool = 178,
    seApplicationGlobalReferencePlaneSize = 179,
    seApplicationGlobalMaximumPrintFileSize = 180,
    seApplicationGlobalFeatureOriginSize = 181,
    seApplicationGlobalPartandAsmUndoSteps = 182,
    seApplicationGlobalEnableDynamicEditProfiles = 183,
    seApplicationGlobalRecomputeAssemblySketchEdit = 184,
    seApplicationGlobalEnableValuechangeUsingMouseWheel = 185,
    seApplicationGlobalProfileUndoSteps = 186,
    seApplicationGlobalPaste2dBehaviourConstant = 187,
    seApplicationGlobalIndicateUnderConstraintProfilesPF = 188,
    seApplicationGlobalEnableUndoAllProfileSketch = 189,
    seApplicationGlobalEnterProfileSketchCreateNewWindow = 190,
    seApplicationGlobalOrientWindowSelectedPlane = 191,
    seApplicationGlobalPropertyTextError = 192,
    seApplicationGlobalRecentlyUsedFilesValue = 193,
    seApplicationGlobalShowOrientationTriad = 194,
    seApplicationGlobal3dInputdevice = 195,
    seApplicationGlobalViewTransitionValue = 196,
    seApplicationGlobalCullingBool = 197,
    seApplicationGlobalAutomaticSelection = 198,
    seApplicationGlobalAutoSharpen = 200,
    seApplicationGlobalReferenceScale = 201,
    seApplicationGlobalSteeringwheelSize = 202,
    seApplicationGlobalArcSmoothness = 203,
    seApplicationGlobalOrientXpressSize = 204,
    seApplicationGlobalUseShadingSelection = 205,
    seApplicationGlobalAutoPreserveDocBackup = 206,
    seApplicationGlobalUseShadingRefplanes = 207,
    seApplicationGlobalDimSurroundingComponents = 208,
    seApplicationGlobalProcesshiddenedges = 209,
    seApplicationGlobalDisplaydropshadows = 210,
    seApplicationGlobalDisplayInterPartCopies = 211,
    seApplicationGlobalShowtriangulationbendlines = 212,
    seApplicationGlobalDynamicClipping = 213,
    seApplicationGlobalDynamicPreviewFeaturecreation = 214,
    seApplicationGlobalCullingValue = 215,
    seApplicationGlobalSetBackGroundColor = 216,
    seApplicationGlobalSetHighlightColor = 217,
    seApplicationGlobalSetSelectedColor = 218,
    seApplicationGlobalSetProfileSelectionColor = 219,
    seApplicationGlobalSetGuidePathColor = 220,
    seApplicationGlobalSetSketchColor = 221,
    seApplicationGlobalSetPlaneColor = 222,
    seApplicationGlobalSetPlaneEdgesColor = 223,
    seApplicationGlobalSetPlaneFeatureColor = 224,
    seApplicationGlobalSetChildFeatureColor = 225,
    seApplicationGlobalSetHandle1Color = 226,
    seApplicationGlobalSetHandle2Color = 227,
    seApplicationGlobalSetHandle3Color = 228,
    seApplicationGlobalSetDrivenColor = 229,
    seApplicationGlobalSetFailedColor = 230,
    seApplicationGlobalActivePartColor = 231,
    seApplicationGlobalSetInactiveColor = 232,
    seApplicationGlobalSetConstructionColor = 233,
    seApplicationGlobalSetGeneralBodyColor = 234,
    seApplicationGlobalSetFullyDefinedColor = 235,
    seApplicationGlobalSetUnderDefinedColor = 236,
    seApplicationGlobalSetOverDefinedColor = 237,
    seApplicationGlobalSetInconsistantColor = 238,
    seApplicationGlobalSetRegionColor = 239,
    seApplicationGlobalSetRegionOpacity = 240,
    seApplicationGlobalUseshading2DFence = 241,
    seApplicationGlobalSet2DSelectionFenceOpacity = 242,
    seApplicationGlobalInside = 243,
    seApplicationGlobalInsideOutside = 244,
    seApplicationGlobalAutoPreserveDoc = 245,
    seApplicationGlobalAutoPreserveDocAutoSave = 246,
    seApplicationGlobalAutoSaveMinutes = 247,
    seApplicationGlobalBackupMinutes = 248,
    seApplicationGlobalBackupModelfiles = 249,
    seApplicationGlobalBackupDraftfiles = 250,
    seApplicationGlobalPromptForfileProp = 251,
    seApplicationGlobalUpdateAll = 252,
    seApplicationGlobalAllowInterPart = 253,
    seApplicationGlobalInterPartCopyCommand = 254,
    seApplicationGlobalIncludeCommandPartAssemblySketches = 255,
    seApplicationGlobalSketchRelationshipPeerEdges = 256,
    seApplicationGlobalAssemblyReferencePlanefeature = 257,
    seApplicationGlobalAssemblydrivenPartfeatures = 258,
    seApplicationGlobalPasteLinkVariableTable = 259,
    seApplicationGlobalLinkMgmt = 260,
    seApplicationGlobalMacros = 261,
    seApplicationGlobalPropSeedFile = 262,
    seApplicationGlobalReports = 263,
    seApplicationGlobalConfigNames = 264,
    seApplicationGlobalMatTableFile = 265,
    seApplicationGlobalSheetMetalGage = 266,
    seApplicationGlobalMatTableFolder = 267,
    seApplicationGlobalObsolute = 270,
    seApplicationGlobalManagedStdParts = 271,
    seApplicationGlobalExternalBom = 272,
    seApplicationGlobalNXNAsternScratch = 273,
    seApplicationGlobalAlwayaUploadToServerCheekedOutToMe = 274,
    seApplicationGlobalAlwaysUploadToServerCheckDocIn = 275,
    seApplicationGlobalAutomaticallyReviseDrawingSelected3Ddoc = 276,
    seApplicationGlobalAutoMakeSiblingParentRevisionObsolute = 277,
    seApplicationGlobalAutoSetDraftStatus = 278,
    seApplicationGlobalStopLifeCycleProcess = 279,
    seApplicationGlobalLimitSearchToSearchServicesScope = 280,
    seApplicationGlobalEdgeCondition = 282,
    seApplicationGlobalLimitsAndFits = 283,
    seApplicationGlobalWeldSymbols = 284,
    seApplicationGlobalStudyType = 285,
    seApplicationGlobalGraphicsColorForce = 286,
    seApplicationGlobalGraphicsColorPressure = 287,
    seApplicationGlobalGraphicsColorGravity = 288,
    seApplicationGlobalGraphicsColorTorqueMomnent = 289,
    seApplicationGlobalGraphicsColorBearing = 290,
    seApplicationGlobalGraphicsColorBeamCurve = 291,
    seApplicationGlobalGraphicsColorNode = 292,
    seApplicationGlobalGraphicsColorRigidLink = 293,
    seApplicationGlobalGraphicsColorAngVelocity = 294,
    seApplicationGlobalGraphicsColorAngAccleration = 295,
    seApplicationGlobalGraphicsColorDisplacement = 296,
    seApplicationGlobalGraphicsColorBodyTemp = 297,
    seApplicationGlobalGraphicsColorConstraints = 298,
    seApplicationGlobalGraphicsColorConnectorTarget = 299,
    seApplicationGlobalGraphicsColorConnectorSource = 300,
    seApplicationGlobalGraphicsColorHeatFlux = 301,
    seApplicationGlobalGraphicsColorHeatGen = 302,
    seApplicationGlobalGraphicsColorConvection = 303,
    seApplicationGlobalGraphicsColorRadition = 304,
    seApplicationGlobalGraphicsColorTemperature = 305,
    seApplicationGlobalShowStartUpScreen = 306,
    seApplicationGlobalStartUsingTemplate = 307,
    seApplicationGlobalStartLastSaveDoc = 308,
    seApplicationGlobalStartEnvironmentSyncOrOrdered = 309,
    seApplicationGlobalShowCommandTips = 310,
    seApplicationGlobalShowSensorIndicator = 311,
    seApplicationGlobalApplicationColorScheme = 312,
    seApplicationGlobalShowPFDocView = 313,
    seApplicationGlobalPFAppereance = 314,
    seApplicationGlobalIncreaseButtonsCommandRibbon2x = 315,
    seApplicationGlobalCommandUserInterface = 316,
    seApplicationGlobalUseGesters = 317,
    seApplicationGlobalShowLiveRules = 318,
    seApplicationGlobalMakeLiveRulePanelVertical = 319,
    seApplicationGlobalUseWebBrowser = 320,
    seApplicationGlobalDisperseAsmPlacePart = 321,
    seApplicationGlobalDontCreateNewWndPlacePart = 322,
    seApplicationGlobalFastlocateboxDisplayParts = 323,
    seApplicationGlobalFastlocateBoxDisplayAsm = 324,
    seApplicationGlobalFastlocateOverPathfinder = 325,
    seApplicationGlobalUseformulaPlacementName = 326,
    seApplicationGlobalUseDefaultPlacementName = 327,
    seApplicationGlobalPatternedPartsInherit = 328,
    seApplicationGlobalInactiveHiddenUnusedComponents = 329,
    seApplicationGlobalMaintainRelationships = 330,
    seApplicationGlobalShowPartReference = 331,
    seApplicationGlobalUseSimplifiedModels = 332,
    seApplicationGlobalAutoHideRelationshipPathfinder = 333,
    seApplicationGlobalAsmOpenas = 334,
    seApplicationGlobalUsewhenPlacingAsmPartslib = 335,
    seApplicationGlobalPartActivationSmallAsm = 336,
    seApplicationGlobalPartActivationMediumAsm = 337,
    seApplicationGlobalPartActivationLargeAsm = 338,
    seApplicationGlobalPartSimplificationSmallAsm = 339,
    seApplicationGlobalPartSimplificationMedAsm = 340,
    seApplicationGlobalPartSimplificationLargeAsm = 341,
    seApplicationGlobalSubAsmSimplificationSmallAsm = 342,
    seApplicationGlobalSubAsmSimplificationMedAsm = 343,
    seApplicationGlobalSubAsmSimplificationLargeAsm = 344,
    seApplicationGlobalMaintainItemNumbers = 345,
    seApplicationGlobalUselevelbaseNumbers = 346,
    seApplicationGlobalExpandWeldmentSubasms = 347,
    seApplicationGlobalFramePipingUniquenessCutLength = 348,
    seApplicationGlobalFramePipingUniquenessMass = 349,
    seApplicationGlobalFramePipingUniquenessMiter = 350,
    seApplicationGlobalAutoScrollASMPathfinder = 351,
    seApplicationGlobalHideAllComponentsSmallAsm = 352,
    seApplicationGlobalHideAllComponentsMedAsm = 353,
    seApplicationGlobalHideAllComponentsLargeAsm = 354,
    seApplicationGlobalActivateChangePartFileSmallAsm = 355,
    seApplicationGlobalActivateChangedPartsFileMedAsm = 356,
    seApplicationGlobalActivateChangedPartsFileLargeAsm = 357,
    seApplicationGlobalIncludeDraftViewerData = 358,
    seApplicationGlobalSaveColorsBlackWhite = 359,
    seApplicationGlobalIncludeWorkingSheets = 360,
    seApplicationGlobalInclude2DModelSheets = 361,
    seApplicationGlobalIncludeBackgroundSheets = 362,
    seApplicationGlobalUpdateLinkAutomatically = 363,
    seApplicationGlobalDisplayUnitsMeasurement = 364,
    seApplicationGlobalDoubleClickblock = 365,
    seApplicationGlobalDoubleclickEmbeddedObjects = 366,
    seApplicationGlobalCheckModelChanges = 367,
    seApplicationGlobalAsmConfigurationChangesDrawingView = 368,
    seApplicationGlobalUseConfigOrModelViewShow = 369,
    seApplicationGlobalEnableSheetDistanceDimValue = 370,
    seApplicationGlobalDimKeyInValueAuto = 371,
    seApplicationGlobalHorizontalScrollBar = 372,
    seApplicationGlobalVerticalScrollBar = 373,
    seApplicationGlobalShowDragRectTimeValue = 374,
    seApplicationGlobalZoomToolLeftClick = 375,
    seApplicationGlobalZoomToolRightClick = 376,
    seApplicationGlobalZoomToolLeftDrag = 377,
    seApplicationGlobalZoomToolRightDrag = 378,
    seApplicationGlobalSheetNoNameSeprator = 379,
    seApplicationGlobalNumberSheetGroupSeparately = 380,
    seApplicationGlobalDisplaySheet = 381,
    seApplicationGlobalSheetColorDraft = 382,
    seApplicationGlobalHighlightColorDraft = 383,
    seApplicationGlobalSelElementColorDraft = 384,
    seApplicationGlobalDisabledEleColorDraft = 385,
    seApplicationGlobalHandle1ColorDraft = 386,
    seApplicationGlobalHandle2ColorDraft = 387,
    seApplicationGlobalHandle3ColorDraft = 388,
    seApplicationGlobalUseShadingDraft = 389,
    seApplicationGlobalOpacityColorDraft = 390,
    seApplicationGlobalInsideColorDraft = 391,
    seApplicationGlobalInsideOutsideColorDraft = 392,
    seApplicationGlobalSheetTab1ColorDraft = 393,
    seApplicationGlobalSheetTab2ColorDraft = 394,
    seApplicationGlobalDeriveDisplayAsReference = 395,
    seApplicationGlobalVisibleEdgesStyleFromAsm = 396,
    seApplicationGlobalHiddenEdgeStyleFromAsm = 397,
    seApplicationGlobalTangentEdgeStyleFromAsm = 398,
    seApplicationGlobalVisibleEdgeStyle = 399,
    seApplicationGlobalHiddenEdgeStyle = 400,
    seApplicationGlobalTangentEdgeStyle = 401,
    seApplicationGlobalOnlyGenerateEdgesInsideOverlappingCroppedBoundaries = 402,
    seApplicationGlobalShowEdgesByCuttingPlane = 403,
    seApplicationGlobalSimplifyBSplineEdges = 404,
    seApplicationGlobalPartIntersections = 405,
    seApplicationGlobalThreadDisplayMode = 406,
    seApplicationGlobalProjectionAngleDraft = 407,
    seApplicationGlobalEdgeConditionDraft = 408,
    seApplicationGlobalWeldSymbolsDraft = 409,
    seApplicationGlobalCutHardwareSectionViews = 410,
    seApplicationGlobalHatchRibsSectionViews = 411,
    seApplicationGlobalLimitsViewsDraft = 412,
    seApplicationGlobalDetailEnvelope = 413,
    seApplicationGlobalDisplayAsCircle = 414,
    seApplicationGlobalExplodedFlowLineStyle = 415,
    seApplicationGlobalBoundaryEdgesStyle = 416,
    seApplicationGlobalShowSheetNumberParentAnnotation = 417,
    seApplicationGlobalShowDrawingViewScale = 418,
    seApplicationGlobalShowRotationAngle = 419,
    seApplicationGlobalBendupCenterlineStyle = 421,
    seApplicationGlobalBendDownCenterlineStyle = 422,
    seApplicationGlobalOriginEdgeStyle = 423,
    seApplicationGlobalProfileEdgeStyle = 424,
    seApplicationGlobalUseDrawingViewWizardModelsDragged = 425,
    seApplicationGlobalUseDrawingViewCommandBarDRWcommand = 426,
    seApplicationGlobalPartDynamicDisplay = 427,
    seApplicationGlobalSheetMetalDynamicDisplay = 428,
    seApplicationGlobalSmallAsmDynamicDisplay = 429,
    seApplicationGlobalMediumAsmDynamicDisplay = 430,
    seApplicationGlobalLargeAsmDynamicDisplay = 431,
    seApplicationGlobalSmallAsmOccurence = 432,
    seApplicationGlobalLargeAsmOccurence = 433,
    seApplicationGlobalLimitedUpdate = 434,
    seApplicationGlobalLimitedSave = 435,
    seApplicationGlobalStatusBarQuickViewCube = 436,
    seApplicationGlobalLimitedUpdateEnable = 437,
    seApplicationGlobalLimitedSaveEnable = 438,
    seApplicationGlobalZone = 439,
    seApplicationGlobalConfiguration = 440,
    seApplicationGlobalEnableDotNet2GC = 441,
    seApplicationGlobalEnableDotNet4GC = 442,
    seApplicationGlobalTemplatePathFolder = 443,
    seApplicationGlobalTextProfileText = 444,
    seApplicationGlobalTextProfileSize = 445,
    seApplicationGlobalTextProfileLetterSpacing = 446,
    seApplicationGlobalTextProfileLineSpacing = 447,
    seApplicationGlobalTextProfileLeftAlignment = 448,
    seApplicationGlobalTextProfileCenterAlignment = 449,
    seApplicationGlobalTextProfileRightAlignment = 450,
    seApplicationGlobalTextProfileSmoothness = 451,
    seApplicationGlobalTextProfileMargin = 452,
    seApplicationGlobalTextProfileBoldState = 453,
    seApplicationGlobalTextProfileItalicState = 454,
    seApplicationGlobalTextProfileFontName = 455,
    seApplicationGlobalTextProfileScript = 456,
    seApplicationGlobalModelingStandard = 457,
    seApplicationGlobalSTEPAdapterKey = 458,
    seApplicationGlobalSimulationToggleSwitch = 459,
    seApplicationGlobalAntiAliasLevel = 460,
    seApplicationGlobalAntiAliasActiveLevel = 461,
    seApplicationGlobalAntiAliasState = 462,
    seApplicationGlobalCustomOccurrencePropertyFile = 463,
    seApplicationGlobalPopupSwapping = 464,
    seApplicationGlobalStatusBarGhostMode = 465,
    seApplicationGlobalFloorReflectionIntensity = 466,
    seApplicationGlobalEnableRegionsWithinSketches = 467,
    seApplicationGlobalCheckOODMaterialOnFileOpen = 468,
    seApplicationGlobalDefaultUserLangID = 469,
    seApplicationGlobalDraftSaveAsPDFAutoRotateSheetsForTextReadability = 470,
    seApplicationGlobalUseShadingHighlight = 475,
    seApplicationGlobalOEMMode = 476,
    seApplicationGlobalOEMName = 477,
    seApplicationGlobalOEMApplicationName = 478,
    seApplicationGlobalOEMMajorVersion = 479,
    seApplicationGlobalOEMBuildVersion = 480,
    seApplicationGlobalNewDocumentTabPosition = 481,
    seApplicationGlobal_AutoScalePreference = 482,
    seApplicationGlobalSEDMObsoletePreviousRevision = 483,
    seApplicationGlobalSEDMSetDraftStatusAsPlacedPart = 484,
    seApplicationGlobalOnLineHelpUseDefaultBrowser = 485,
    seApplicationGlobalDraftCullingEnabled = 486,
    seApplicationGlobalDraftCullingLevel = 487,
    seApplicationGlobalConceptMode = 489,
    seApplicationGlobalFramePipingUniquenessAngleOrientation = 490,
    seApplicationGlobalStatusBarYouTube = 491,
    seApplicationGlobalDraftIncludeWatermarkInPdf = 492,
    seApplicationGlobalStoreGeometryInAssemblyForPreview = 493,
    seApplicationGlobalUsePreviewForLargeAssemblies = 494,
    seApplicationGlobalSWMigrationInProgress = 495,
    seApplicationGlobalSWMigrationModeReq = 496,
    seApplicationGlobalShadedSketches = 497,
    seApplicationGlobalHolesDatabaseFolder = 498,
    seApplicationGlobalLastPathRegValue = 499,
    seApplicationGlobalLastFilterRegValue = 500,
    seApplicationGlobalUseGeometricMatchingOnBlockCopy = 501,
    seApplicationGlobalFenceOption = 502,
    seApplicationGlobalFenceMode = 503,
    seApplicationGlobalUseDimensionStyleElementMapPinSymbols = 2000,
    tgApplicationGlobalSliceObservationValue = 2001,
    seApplicationGlobalUpdateViewAutomatically = 2002,
    tgApplicationGlobalImageCaptureValue = 2003,
    tgApplicationGlobalIntelligenDrawReviewLic = 30011
};

enum SeObjectType
{
    seObjectNamedViews = 1,
    seObjectViewStyles = 2,
    seObjectFaceStyles = 3
};

struct __declspec(uuid("738b5227-09f9-4b9e-a2eb-c27c04d954f3"))
Insight : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT DownloadDocumentFromServer (
        _bstr_t DocumentToDownLoadFromServer,
        enum DocumentAccess DocumentAccessMode,
        BSTR * LocalPath,
        const _variant_t & GetLatestDocuments = vtMissing,
        const _variant_t & ProcessIndirectDocuments = vtMissing,
        const _variant_t & RevisionRuleOption = vtMissing,
        const _variant_t & StopFileOpenIfRevisionRuleNotApplicable = vtMissing );
    HRESULT ImportDocumentsToServer (
        long NumberOfDocumentsFoldersToImport,
        const _variant_t & ListOfDocumentsFoldersToImport,
        _bstr_t ImportLocation,
        enum UploadType TypeOfUpload,
        enum CheckInOptions CheckInOption );
    HRESULT UploadDocumentsToServer (
        long NumberOfDocumentsToUpload,
        const _variant_t & DocumentsToUpload );
    HRESULT ExportDocumentsFromServer (
        long NumberOfDocumentsToExport,
        const _variant_t & ListOfDocumentsToExport,
        _bstr_t ExportToLocation,
        VARIANT_BOOL SetDocToReadOnly,
        enum OverWriteFilesOption OverWriteOption );
    HRESULT DeleteDocumentsFromServer (
        long NumberOfDocumentsToBeDeleted,
        const _variant_t & ListOfDocumentsToBeDeleted,
        long * NumberOfSuccessfullyDeletedDocuments,
        VARIANT * SuccessfullyDeletedDocuments );
    HRESULT FindWhereUsedOnServer (
        long NumberOfProperties,
        const _variant_t & ListOfProperties,
        long NumberOfSharePointDirectories,
        const _variant_t & ListOfSharePointDirectories,
        long NumberOfDocuments,
        const _variant_t & ListOfDocumentsForWhereUsed,
        long * NumberOfUserFiles,
        VARIANT * DocumentsUsedByList,
        const _variant_t & TypeOfSearch = vtMissing );
    HRESULT CheckOutDocumentsFromServer (
        long NumberOfDocumentsToCheckOutFromServer,
        const _variant_t & ListOfDocumentsToCheckOutFromServer );
    HRESULT CheckInDocumentsToServer (
        long NumberOfDocumentsToCheckInToServer,
        const _variant_t & ListOfDocumentsToCheckInFromServer,
        const _variant_t & FailIfDocumentsOpenInSolidEdge = vtMissing );
    HRESULT UndoCheckOutDocumentsFromServer (
        long NumberOfDocumentsToUndoCheckOutFromServer,
        const _variant_t & ListOfDocumentsToUndoCheckOutFromServer );
    HRESULT ShowRevisionsForServerDocument (
        _bstr_t DocumentNameToShowRevisions,
        long * NumberOfRevisions,
        VARIANT * DocumentNamesOfRevisions );
    HRESULT GetRevisedFrom (
        _bstr_t RevisedDocumentName,
        BSTR * RevisedFromDocument );
    HRESULT SetInsightUserNamePassword (
        _bstr_t WorkspaceUrl,
        _bstr_t UserName,
        _bstr_t Password,
        _bstr_t DomainName );
    HRESULT GetLastInsightTransactionMessages (
        BSTR * TransactionString,
        long * NumberOfDocuments,
        VARIANT * ListofDocumentNamesWithPath,
        VARIANT * ListofMessages,
        VARIANT * ListofSeverityCodes );
    HRESULT GetOutOfDateDocuments (
        long * NumberOfOutOfDateDocuments,
        VARIANT * ListOfOutOfDateDocuments );
    HRESULT ClearCache ( );
    HRESULT DeleteDocumentsFromCache (
        long NumberOfDocumentsToBeDeletedFromCache,
        const _variant_t & ListOfDocumentsToBeDeletedFromCache,
        long * NumberOfNotDeletedDocuments,
        VARIANT * ListOfNotDeletedDocuments );
    HRESULT PutUserNameAndPasswordIntoCache (
        _bstr_t WorkspaceUrl );
    HRESULT EnableDeveloperLog (
        VARIANT_BOOL bCreateFlag );
    HRESULT SynchronizeDocumentsInCache (
        long NumberOfDocumentsToBeSynchronizedWithServer,
        const _variant_t & ListOfDocumentsInCacheToBeSynchronized );
    HRESULT SynchronizeAllDocumentsInCache ( );
    HRESULT CheckInAllCheckedOutDocumentsInCache ( );
    HRESULT GetFilePropertiesFromServer (
        long NumberOfFilesToBeQueriedForProperties,
        const _variant_t & FileUrlsList,
        long NumberOfPropertiesTobeQueried,
        const _variant_t & PropertyUrisList,
        long * numberOfPropertiesValues,
        VARIANT * PropertyValueList );
    HRESULT MoveDocumentsThroughWorkFlow (
        _bstr_t Filename,
        enum DocumentStatus newstatus,
        const _variant_t & NumberOfDraftFiles = vtMissing,
        const _variant_t & draftFileList = vtMissing,
        const _variant_t & draftFileStatusList = vtMissing,
        const _variant_t & NumberOfRevisionFiles = vtMissing,
        const _variant_t & revisionFileList = vtMissing,
        const _variant_t & RevisionFileStatusList = vtMissing );
    HRESULT MoveAllDocumentsThroughWorkFlow (
        _bstr_t Filename,
        enum DocumentStatus newstatus );
    HRESULT GetSharePointServerType (
        _bstr_t Filename,
        enum SPServerType * SPServerType,
        VARIANT * bProcessChecks = &vtMissing );
    HRESULT FileExists (
        _bstr_t FileUrl,
        VARIANT_BOOL * bFileExists );
    HRESULT CreateFolder (
        long numberOfFoldersToCreate,
        const _variant_t & varListOfFoldersToCreate );
    HRESULT DeleteFolder (
        long NumberOfDocumentsToBeDeleted,
        const _variant_t & varlistOfFilesToDelete,
        long * NumberOfSuccessfullyDeletedDocuments,
        VARIANT * listOfFoldersSuccessfullyDeleted );
    HRESULT FolderExists (
        _bstr_t bstrFolderName,
        VARIANT_BOOL * bFolderExists );
    HRESULT GetDirs (
        _bstr_t ParentUrl,
        long * numberOfSubFoldersFound,
        VARIANT * ListOfSubFoldersFound );
    HRESULT GetFiles (
        _bstr_t ParentUrl,
        long * numberOfFilesFound,
        VARIANT * ListOfFilesFound,
        const _variant_t & FileFilter = vtMissing );
    HRESULT DoesUserHaveAdminRights (
        _bstr_t FileOrFolderUrl,
        _bstr_t UserName,
        VARIANT_BOOL * bUserHasAdminRights );
    HRESULT IsInsightSupported (
        VARIANT_BOOL * bInsightIsSupported );
    HRESULT IsFileCheckedOut (
        _bstr_t FileUrl,
        VARIANT_BOOL * bFileIsCheckedOut,
        BSTR * UserName );
    HRESULT GetCachePath (
        long numberOfFilesToGetPathFor,
        const _variant_t & varListOfFilePaths,
        long * numberOfFilesReturned,
        VARIANT * varListOfFilesContainingCachePaths );
    HRESULT GetUserRole (
        _bstr_t FileOrFolderUrl,
        _bstr_t UserName,
        BSTR * UserRole );
    HRESULT GetDocState (
        _bstr_t UrlToGetStateFor,
        VARIANT * docState );
    HRESULT CheckSupport (
        _bstr_t ServerUrl,
        VARIANT_BOOL * bSPSIsSupported );
    HRESULT GetUserRights (
        _bstr_t FileOrFolderUrl,
        enum InsightSPUserRights * UserRights );
    HRESULT GetIndirectFilesTree (
        _bstr_t containerFileName,
        VARIANT * pIndirectFilesTree );
    HRESULT UsePathAsDefaultFolderMapPath (
        _bstr_t WorkspaceUrl );
    HRESULT RemoveAllFilesFromRecycleBin (
        _bstr_t bstrDocLibUrl );
    HRESULT RestoreAllFilesFromRecycleBin (
        _bstr_t bstrDocLibUrl );
    HRESULT DownloadDocumentFromServerWithAllLinks (
        _bstr_t DocumentToDownLoadFromServer,
        enum DocumentAccess DocumentAccessMode,
        BSTR * LocalPath,
        const _variant_t & GetLatestDocuments = vtMissing,
        const _variant_t & ProcessIndirectDocuments = vtMissing,
        const _variant_t & RevisionRuleOption = vtMissing,
        const _variant_t & StopFileOpenIfRevisionRuleNotApplicable = vtMissing );
    HRESULT SetInsightATPRunning (
        VARIANT_BOOL bRunningInsightATP );
    HRESULT SetInsightATPInfo (
        _bstr_t bstrATPLevel1,
        _bstr_t bstrATPClassName,
        _bstr_t bstrATPName,
        long ATPId );
    HRESULT ValidateDocsOnLCA (
        _bstr_t bstrInputURL,
        long numberOfDocumentstoValidate,
        const _variant_t & varlistOfDocsToValidate,
        _bstr_t bstrInputData );
    HRESULT IsVersioningEnabledForTheInputDocLib (
        _bstr_t docLibName,
        VARIANT_BOOL * pbIsVersioningOnForTheInputDocLib );
    HRESULT IsFileCheckedOutToSameUser (
        _bstr_t filePath,
        _bstr_t UserName,
        _bstr_t Password,
        BSTR * checkedoutby,
        VARIANT_BOOL UpdateCache );
    HRESULT IsDocumentLibraryContainsRequiredProperty (
        _bstr_t docLibName,
        VARIANT_BOOL * pbIsRequiredPropertyExist );
    HRESULT SetInsightOfflineMode (
        VARIANT_BOOL bOfflineModeVal );
    HRESULT DisplayPropertyManagerDlg (
        _bstr_t bstrFilename );
    HRESULT GetCookieData (
        _bstr_t bstrFilename,
        enum CookieDataToGet valCookieDataToGet,
        enum RevisionRuleType * varRevisionRule );
    HRESULT SetFilePropertiesOnServer (
        _bstr_t bstrInputURL,
        long NumberOfPropertiesToSet,
        const _variant_t & PropertyUrIList,
        const _variant_t & PropertyValueList );
    HRESULT ISDocumentParserEnabled (
        _bstr_t bstrInputURL,
        VARIANT_BOOL * bDocParserEnabled );
    HRESULT GetLWFPathForUrl (
        _bstr_t bstrUrl,
        BSTR * bstrLWFPath );
    HRESULT DisplaySEPackNGoDlg (
        _bstr_t bstrFilename );
};

enum UploadType
{
    DeepUploadType = 0,
    ShallowUploadType = 1
};

enum CheckInOptions
{
    DoNotCheckInOption = 0,
    UploadAndCheckInOption = 1
};

enum OverWriteFilesOption
{
    NoToAll = 0,
    YesToAll = 1
};

enum DocumentStatus
{
    igStatusAvailable = 0,
    igStatusInWork = 1,
    igStatusInReview = 2,
    igStatusReleased = 3,
    igStatusBaselined = 4,
    igStatusObsolete = 5,
    igStatusUnknown = 6
};

enum SPServerType
{
    SERVER_TYPE_NOT_SHAREPOINT = 0,
    SHAREPOINT_V1_SERVER = 1,
    SHAREPOINT_V2_SERVER = 2,
    SHAREPOINT_V3_SERVER = 3,
    SHAREPOINT_V4_SERVER = 4,
    SHAREPOINT_V5_SERVER = 5
};

enum InsightSPUserRights
{
    seAddAndCustomizePages = 262144,
    seAddDelPrivateWebParts = 268435456,
    seAddListItems = 2,
    seApplyStyleSheets = 1048576,
    seApplyThemeAndBorder = 524288,
    seBrowseDirectories = 67108864,
    seBrowseUserInfo = 134217728,
    seCancelCheckout = 256,
    seCreatePersonalGroups = 16777216,
    seCreateSSCSite = 4194304,
    seDeleteListItems = 8,
    seEditListItems = 4,
    seManageListPermissions = 1024,
    seManageLists = 2048,
    seManagePersonalViews = 512,
    seManageRoles = 33554432,
    seManageSubwebs = 8388608,
    seManageWeb = 1073741824,
    seOpenWeb = 65536,
    seUpdatePersonalWebParts = 536870912,
    seViewListItems = 1,
    seViewPages = 131072,
    seViewUsageData = 2097152
};

enum CookieDataToGet
{
    GET_REVISION_RULE = 0
};

enum RevisionRuleType
{
    LastSavedType = 0,
    LatestReleasedRevision = 1,
    LatestRevision = 2,
    ExternalBOM = 3,
    VersionFromCache = 4
};

struct __declspec(uuid("e1f41560-116d-4f9f-9d23-30a142a85a15"))
_IInsightAuto : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT DownloadDocumentFromServer (
        _bstr_t DocumentToDownLoadFromServer,
        enum DocumentAccess DocumentAccessMode,
        BSTR * LocalPath,
        const _variant_t & GetLatestDocuments = vtMissing,
        const _variant_t & ProcessIndirectDocuments = vtMissing,
        const _variant_t & RevisionRuleOption = vtMissing,
        const _variant_t & StopFileOpenIfRevisionRuleNotApplicable = vtMissing );
    HRESULT ImportDocumentsToServer (
        long NumberOfDocumentsFoldersToImport,
        const _variant_t & ListOfDocumentsFoldersToImport,
        _bstr_t ImportLocation,
        enum UploadType TypeOfUpload,
        enum CheckInOptions CheckInOption );
    HRESULT UploadDocumentsToServer (
        long NumberOfDocumentsToUpload,
        const _variant_t & DocumentsToUpload );
    HRESULT ExportDocumentsFromServer (
        long NumberOfDocumentsToExport,
        const _variant_t & ListOfDocumentsToExport,
        _bstr_t ExportToLocation,
        VARIANT_BOOL SetDocToReadOnly,
        enum OverWriteFilesOption OverWriteOption );
    HRESULT DeleteDocumentsFromServer (
        long NumberOfDocumentsToBeDeleted,
        const _variant_t & ListOfDocumentsToBeDeleted,
        long * NumberOfSuccessfullyDeletedDocuments,
        VARIANT * SuccessfullyDeletedDocuments );
    HRESULT FindWhereUsedOnServer (
        long NumberOfProperties,
        const _variant_t & ListOfProperties,
        long NumberOfSharePointDirectories,
        const _variant_t & ListOfSharePointDirectories,
        long NumberOfDocuments,
        const _variant_t & ListOfDocumentsForWhereUsed,
        long * NumberOfUserFiles,
        VARIANT * DocumentsUsedByList,
        const _variant_t & TypeOfSearch = vtMissing );
    HRESULT CheckOutDocumentsFromServer (
        long NumberOfDocumentsToCheckOutFromServer,
        const _variant_t & ListOfDocumentsToCheckOutFromServer );
    HRESULT CheckInDocumentsToServer (
        long NumberOfDocumentsToCheckInToServer,
        const _variant_t & ListOfDocumentsToCheckInFromServer,
        const _variant_t & FailIfDocumentsOpenInSolidEdge = vtMissing );
    HRESULT UndoCheckOutDocumentsFromServer (
        long NumberOfDocumentsToUndoCheckOutFromServer,
        const _variant_t & ListOfDocumentsToUndoCheckOutFromServer );
    HRESULT ShowRevisionsForServerDocument (
        _bstr_t DocumentNameToShowRevisions,
        long * NumberOfRevisions,
        VARIANT * DocumentNamesOfRevisions );
    HRESULT GetRevisedFrom (
        _bstr_t RevisedDocumentName,
        BSTR * RevisedFromDocument );
    HRESULT SetInsightUserNamePassword (
        _bstr_t WorkspaceUrl,
        _bstr_t UserName,
        _bstr_t Password,
        _bstr_t DomainName );
    HRESULT GetLastInsightTransactionMessages (
        BSTR * TransactionString,
        long * NumberOfDocuments,
        VARIANT * ListofDocumentNamesWithPath,
        VARIANT * ListofMessages,
        VARIANT * ListofSeverityCodes );
    HRESULT GetOutOfDateDocuments (
        long * NumberOfOutOfDateDocuments,
        VARIANT * ListOfOutOfDateDocuments );
    HRESULT ClearCache ( );
    HRESULT DeleteDocumentsFromCache (
        long NumberOfDocumentsToBeDeletedFromCache,
        const _variant_t & ListOfDocumentsToBeDeletedFromCache,
        long * NumberOfNotDeletedDocuments,
        VARIANT * ListOfNotDeletedDocuments );
    HRESULT PutUserNameAndPasswordIntoCache (
        _bstr_t WorkspaceUrl );
    HRESULT EnableDeveloperLog (
        VARIANT_BOOL bCreateFlag );
    HRESULT SynchronizeDocumentsInCache (
        long NumberOfDocumentsToBeSynchronizedWithServer,
        const _variant_t & ListOfDocumentsInCacheToBeSynchronized );
    HRESULT SynchronizeAllDocumentsInCache ( );
    HRESULT CheckInAllCheckedOutDocumentsInCache ( );
    HRESULT GetFilePropertiesFromServer (
        long NumberOfFilesToBeQueriedForProperties,
        const _variant_t & FileUrlsList,
        long NumberOfPropertiesTobeQueried,
        const _variant_t & PropertyUrisList,
        long * numberOfPropertiesValues,
        VARIANT * PropertyValueList );
    HRESULT MoveDocumentsThroughWorkFlow (
        _bstr_t Filename,
        enum DocumentStatus newstatus,
        const _variant_t & NumberOfDraftFiles = vtMissing,
        const _variant_t & draftFileList = vtMissing,
        const _variant_t & draftFileStatusList = vtMissing,
        const _variant_t & NumberOfRevisionFiles = vtMissing,
        const _variant_t & revisionFileList = vtMissing,
        const _variant_t & RevisionFileStatusList = vtMissing );
    HRESULT MoveAllDocumentsThroughWorkFlow (
        _bstr_t Filename,
        enum DocumentStatus newstatus );
    HRESULT GetSharePointServerType (
        _bstr_t Filename,
        enum SPServerType * SPServerType,
        VARIANT * bProcessChecks = &vtMissing );
    HRESULT FileExists (
        _bstr_t FileUrl,
        VARIANT_BOOL * bFileExists );
    HRESULT CreateFolder (
        long numberOfFoldersToCreate,
        const _variant_t & varListOfFoldersToCreate );
    HRESULT DeleteFolder (
        long NumberOfDocumentsToBeDeleted,
        const _variant_t & varlistOfFilesToDelete,
        long * NumberOfSuccessfullyDeletedDocuments,
        VARIANT * listOfFoldersSuccessfullyDeleted );
    HRESULT FolderExists (
        _bstr_t bstrFolderName,
        VARIANT_BOOL * bFolderExists );
    HRESULT GetDirs (
        _bstr_t ParentUrl,
        long * numberOfSubFoldersFound,
        VARIANT * ListOfSubFoldersFound );
    HRESULT GetFiles (
        _bstr_t ParentUrl,
        long * numberOfFilesFound,
        VARIANT * ListOfFilesFound,
        const _variant_t & FileFilter = vtMissing );
    HRESULT DoesUserHaveAdminRights (
        _bstr_t FileOrFolderUrl,
        _bstr_t UserName,
        VARIANT_BOOL * bUserHasAdminRights );
    HRESULT IsInsightSupported (
        VARIANT_BOOL * bInsightIsSupported );
    HRESULT IsFileCheckedOut (
        _bstr_t FileUrl,
        VARIANT_BOOL * bFileIsCheckedOut,
        BSTR * UserName );
    HRESULT GetCachePath (
        long numberOfFilesToGetPathFor,
        const _variant_t & varListOfFilePaths,
        long * numberOfFilesReturned,
        VARIANT * varListOfFilesContainingCachePaths );
    HRESULT GetUserRole (
        _bstr_t FileOrFolderUrl,
        _bstr_t UserName,
        BSTR * UserRole );
    HRESULT GetDocState (
        _bstr_t UrlToGetStateFor,
        VARIANT * docState );
    HRESULT CheckSupport (
        _bstr_t ServerUrl,
        VARIANT_BOOL * bSPSIsSupported );
    HRESULT GetUserRights (
        _bstr_t FileOrFolderUrl,
        enum InsightSPUserRights * UserRights );
    HRESULT GetIndirectFilesTree (
        _bstr_t containerFileName,
        VARIANT * pIndirectFilesTree );
    HRESULT UsePathAsDefaultFolderMapPath (
        _bstr_t WorkspaceUrl );
    HRESULT RemoveAllFilesFromRecycleBin (
        _bstr_t bstrDocLibUrl );
    HRESULT RestoreAllFilesFromRecycleBin (
        _bstr_t bstrDocLibUrl );
    HRESULT DownloadDocumentFromServerWithAllLinks (
        _bstr_t DocumentToDownLoadFromServer,
        enum DocumentAccess DocumentAccessMode,
        BSTR * LocalPath,
        const _variant_t & GetLatestDocuments = vtMissing,
        const _variant_t & ProcessIndirectDocuments = vtMissing,
        const _variant_t & RevisionRuleOption = vtMissing,
        const _variant_t & StopFileOpenIfRevisionRuleNotApplicable = vtMissing );
    HRESULT SetInsightATPRunning (
        VARIANT_BOOL bRunningInsightATP );
    HRESULT SetInsightATPInfo (
        _bstr_t bstrATPLevel1,
        _bstr_t bstrATPClassName,
        _bstr_t bstrATPName,
        long ATPId );
    HRESULT ValidateDocsOnLCA (
        _bstr_t bstrInputURL,
        long numberOfDocumentstoValidate,
        const _variant_t & varlistOfDocsToValidate,
        _bstr_t bstrInputData );
    HRESULT IsVersioningEnabledForTheInputDocLib (
        _bstr_t docLibName,
        VARIANT_BOOL * pbIsVersioningOnForTheInputDocLib );
    HRESULT IsFileCheckedOutToSameUser (
        _bstr_t filePath,
        _bstr_t UserName,
        _bstr_t Password,
        BSTR * checkedoutby,
        VARIANT_BOOL UpdateCache );
    HRESULT IsDocumentLibraryContainsRequiredProperty (
        _bstr_t docLibName,
        VARIANT_BOOL * pbIsRequiredPropertyExist );
    HRESULT SetInsightOfflineMode (
        VARIANT_BOOL bOfflineModeVal );
    HRESULT DisplayPropertyManagerDlg (
        _bstr_t bstrFilename );
    HRESULT GetCookieData (
        _bstr_t bstrFilename,
        enum CookieDataToGet valCookieDataToGet,
        enum RevisionRuleType * varRevisionRule );
    HRESULT SetFilePropertiesOnServer (
        _bstr_t bstrInputURL,
        long NumberOfPropertiesToSet,
        const _variant_t & PropertyUrIList,
        const _variant_t & PropertyValueList );
    HRESULT ISDocumentParserEnabled (
        _bstr_t bstrInputURL,
        VARIANT_BOOL * bDocParserEnabled );
    HRESULT GetLWFPathForUrl (
        _bstr_t bstrUrl,
        BSTR * bstrLWFPath );
    HRESULT DisplaySEPackNGoDlg (
        _bstr_t bstrFilename );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_DownloadDocumentFromServer (
        /*[in]*/ BSTR DocumentToDownLoadFromServer,
        /*[in]*/ enum DocumentAccess DocumentAccessMode,
        /*[out]*/ BSTR * LocalPath,
        /*[in]*/ VARIANT GetLatestDocuments = vtMissing,
        /*[in]*/ VARIANT ProcessIndirectDocuments = vtMissing,
        /*[in]*/ VARIANT RevisionRuleOption = vtMissing,
        /*[in]*/ VARIANT StopFileOpenIfRevisionRuleNotApplicable = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_ImportDocumentsToServer (
        /*[in]*/ long NumberOfDocumentsFoldersToImport,
        /*[in]*/ VARIANT ListOfDocumentsFoldersToImport,
        /*[in]*/ BSTR ImportLocation,
        /*[in]*/ enum UploadType TypeOfUpload,
        /*[in]*/ enum CheckInOptions CheckInOption ) = 0;
      virtual HRESULT __stdcall raw_UploadDocumentsToServer (
        /*[in]*/ long NumberOfDocumentsToUpload,
        /*[in]*/ VARIANT DocumentsToUpload ) = 0;
      virtual HRESULT __stdcall raw_ExportDocumentsFromServer (
        /*[in]*/ long NumberOfDocumentsToExport,
        /*[in]*/ VARIANT ListOfDocumentsToExport,
        /*[in]*/ BSTR ExportToLocation,
        VARIANT_BOOL SetDocToReadOnly,
        enum OverWriteFilesOption OverWriteOption ) = 0;
      virtual HRESULT __stdcall raw_DeleteDocumentsFromServer (
        /*[in]*/ long NumberOfDocumentsToBeDeleted,
        /*[in]*/ VARIANT ListOfDocumentsToBeDeleted,
        /*[out]*/ long * NumberOfSuccessfullyDeletedDocuments,
        /*[out]*/ VARIANT * SuccessfullyDeletedDocuments ) = 0;
      virtual HRESULT __stdcall raw_FindWhereUsedOnServer (
        /*[in]*/ long NumberOfProperties,
        /*[in]*/ VARIANT ListOfProperties,
        /*[in]*/ long NumberOfSharePointDirectories,
        /*[in]*/ VARIANT ListOfSharePointDirectories,
        /*[in]*/ long NumberOfDocuments,
        /*[in]*/ VARIANT ListOfDocumentsForWhereUsed,
        /*[out]*/ long * NumberOfUserFiles,
        /*[out]*/ VARIANT * DocumentsUsedByList,
        /*[in]*/ VARIANT TypeOfSearch = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_CheckOutDocumentsFromServer (
        /*[in]*/ long NumberOfDocumentsToCheckOutFromServer,
        /*[in]*/ VARIANT ListOfDocumentsToCheckOutFromServer ) = 0;
      virtual HRESULT __stdcall raw_CheckInDocumentsToServer (
        /*[in]*/ long NumberOfDocumentsToCheckInToServer,
        /*[in]*/ VARIANT ListOfDocumentsToCheckInFromServer,
        /*[in]*/ VARIANT FailIfDocumentsOpenInSolidEdge = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_UndoCheckOutDocumentsFromServer (
        /*[in]*/ long NumberOfDocumentsToUndoCheckOutFromServer,
        /*[in]*/ VARIANT ListOfDocumentsToUndoCheckOutFromServer ) = 0;
      virtual HRESULT __stdcall raw_ShowRevisionsForServerDocument (
        /*[in]*/ BSTR DocumentNameToShowRevisions,
        /*[out]*/ long * NumberOfRevisions,
        /*[out]*/ VARIANT * DocumentNamesOfRevisions ) = 0;
      virtual HRESULT __stdcall raw_GetRevisedFrom (
        /*[in]*/ BSTR RevisedDocumentName,
        /*[out]*/ BSTR * RevisedFromDocument ) = 0;
      virtual HRESULT __stdcall raw_SetInsightUserNamePassword (
        /*[in]*/ BSTR WorkspaceUrl,
        /*[in]*/ BSTR UserName,
        /*[in]*/ BSTR Password,
        /*[in]*/ BSTR DomainName ) = 0;
      virtual HRESULT __stdcall raw_GetLastInsightTransactionMessages (
        /*[out]*/ BSTR * TransactionString,
        /*[out]*/ long * NumberOfDocuments,
        /*[out]*/ VARIANT * ListofDocumentNamesWithPath,
        /*[out]*/ VARIANT * ListofMessages,
        /*[out]*/ VARIANT * ListofSeverityCodes ) = 0;
      virtual HRESULT __stdcall raw_GetOutOfDateDocuments (
        /*[out]*/ long * NumberOfOutOfDateDocuments,
        VARIANT * ListOfOutOfDateDocuments ) = 0;
      virtual HRESULT __stdcall raw_ClearCache ( ) = 0;
      virtual HRESULT __stdcall raw_DeleteDocumentsFromCache (
        /*[in]*/ long NumberOfDocumentsToBeDeletedFromCache,
        /*[in]*/ VARIANT ListOfDocumentsToBeDeletedFromCache,
        /*[out]*/ long * NumberOfNotDeletedDocuments,
        /*[out]*/ VARIANT * ListOfNotDeletedDocuments ) = 0;
      virtual HRESULT __stdcall raw_PutUserNameAndPasswordIntoCache (
        /*[in]*/ BSTR WorkspaceUrl ) = 0;
      virtual HRESULT __stdcall raw_EnableDeveloperLog (
        /*[in]*/ VARIANT_BOOL bCreateFlag ) = 0;
      virtual HRESULT __stdcall raw_SynchronizeDocumentsInCache (
        /*[in]*/ long NumberOfDocumentsToBeSynchronizedWithServer,
        /*[in]*/ VARIANT ListOfDocumentsInCacheToBeSynchronized ) = 0;
      virtual HRESULT __stdcall raw_SynchronizeAllDocumentsInCache ( ) = 0;
      virtual HRESULT __stdcall raw_CheckInAllCheckedOutDocumentsInCache ( ) = 0;
      virtual HRESULT __stdcall raw_GetFilePropertiesFromServer (
        /*[in]*/ long NumberOfFilesToBeQueriedForProperties,
        /*[in]*/ VARIANT FileUrlsList,
        /*[in]*/ long NumberOfPropertiesTobeQueried,
        /*[in]*/ VARIANT PropertyUrisList,
        /*[out]*/ long * numberOfPropertiesValues,
        /*[out]*/ VARIANT * PropertyValueList ) = 0;
      virtual HRESULT __stdcall raw_MoveDocumentsThroughWorkFlow (
        /*[in]*/ BSTR Filename,
        /*[in]*/ enum DocumentStatus newstatus,
        /*[in]*/ VARIANT NumberOfDraftFiles = vtMissing,
        /*[in]*/ VARIANT draftFileList = vtMissing,
        /*[in]*/ VARIANT draftFileStatusList = vtMissing,
        /*[in]*/ VARIANT NumberOfRevisionFiles = vtMissing,
        /*[in]*/ VARIANT revisionFileList = vtMissing,
        /*[in]*/ VARIANT RevisionFileStatusList = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_MoveAllDocumentsThroughWorkFlow (
        /*[in]*/ BSTR Filename,
        /*[in]*/ enum DocumentStatus newstatus ) = 0;
      virtual HRESULT __stdcall raw_GetSharePointServerType (
        /*[in]*/ BSTR Filename,
        /*[out]*/ enum SPServerType * SPServerType,
        /*[in]*/ VARIANT * bProcessChecks = &vtMissing ) = 0;
      virtual HRESULT __stdcall raw_FileExists (
        /*[in]*/ BSTR FileUrl,
        /*[out]*/ VARIANT_BOOL * bFileExists ) = 0;
      virtual HRESULT __stdcall raw_CreateFolder (
        /*[in]*/ long numberOfFoldersToCreate,
        /*[in]*/ VARIANT varListOfFoldersToCreate ) = 0;
      virtual HRESULT __stdcall raw_DeleteFolder (
        /*[in]*/ long NumberOfDocumentsToBeDeleted,
        /*[in]*/ VARIANT varlistOfFilesToDelete,
        /*[out]*/ long * NumberOfSuccessfullyDeletedDocuments,
        /*[out]*/ VARIANT * listOfFoldersSuccessfullyDeleted ) = 0;
      virtual HRESULT __stdcall raw_FolderExists (
        /*[in]*/ BSTR bstrFolderName,
        /*[out]*/ VARIANT_BOOL * bFolderExists ) = 0;
      virtual HRESULT __stdcall raw_GetDirs (
        /*[in]*/ BSTR ParentUrl,
        /*[out]*/ long * numberOfSubFoldersFound,
        /*[out]*/ VARIANT * ListOfSubFoldersFound ) = 0;
      virtual HRESULT __stdcall raw_GetFiles (
        /*[in]*/ BSTR ParentUrl,
        /*[out]*/ long * numberOfFilesFound,
        /*[out]*/ VARIANT * ListOfFilesFound,
        /*[in]*/ VARIANT FileFilter = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_DoesUserHaveAdminRights (
        /*[in]*/ BSTR FileOrFolderUrl,
        /*[in]*/ BSTR UserName,
        /*[out]*/ VARIANT_BOOL * bUserHasAdminRights ) = 0;
      virtual HRESULT __stdcall raw_IsInsightSupported (
        /*[out]*/ VARIANT_BOOL * bInsightIsSupported ) = 0;
      virtual HRESULT __stdcall raw_IsFileCheckedOut (
        /*[in]*/ BSTR FileUrl,
        /*[out]*/ VARIANT_BOOL * bFileIsCheckedOut,
        /*[out]*/ BSTR * UserName ) = 0;
      virtual HRESULT __stdcall raw_GetCachePath (
        /*[in]*/ long numberOfFilesToGetPathFor,
        /*[in]*/ VARIANT varListOfFilePaths,
        /*[out]*/ long * numberOfFilesReturned,
        /*[out]*/ VARIANT * varListOfFilesContainingCachePaths ) = 0;
      virtual HRESULT __stdcall raw_GetUserRole (
        /*[in]*/ BSTR FileOrFolderUrl,
        /*[in]*/ BSTR UserName,
        /*[out]*/ BSTR * UserRole ) = 0;
      virtual HRESULT __stdcall raw_GetDocState (
        /*[in]*/ BSTR UrlToGetStateFor,
        /*[out]*/ VARIANT * docState ) = 0;
      virtual HRESULT __stdcall raw_CheckSupport (
        /*[in]*/ BSTR ServerUrl,
        /*[out]*/ VARIANT_BOOL * bSPSIsSupported ) = 0;
      virtual HRESULT __stdcall raw_GetUserRights (
        /*[in]*/ BSTR FileOrFolderUrl,
        /*[out]*/ enum InsightSPUserRights * UserRights ) = 0;
      virtual HRESULT __stdcall raw_GetIndirectFilesTree (
        /*[in]*/ BSTR containerFileName,
        /*[out]*/ VARIANT * pIndirectFilesTree ) = 0;
      virtual HRESULT __stdcall raw_UsePathAsDefaultFolderMapPath (
        /*[in]*/ BSTR WorkspaceUrl ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllFilesFromRecycleBin (
        /*[in]*/ BSTR bstrDocLibUrl ) = 0;
      virtual HRESULT __stdcall raw_RestoreAllFilesFromRecycleBin (
        /*[in]*/ BSTR bstrDocLibUrl ) = 0;
      virtual HRESULT __stdcall raw_DownloadDocumentFromServerWithAllLinks (
        /*[in]*/ BSTR DocumentToDownLoadFromServer,
        /*[in]*/ enum DocumentAccess DocumentAccessMode,
        /*[out]*/ BSTR * LocalPath,
        /*[in]*/ VARIANT GetLatestDocuments = vtMissing,
        /*[in]*/ VARIANT ProcessIndirectDocuments = vtMissing,
        /*[in]*/ VARIANT RevisionRuleOption = vtMissing,
        /*[in]*/ VARIANT StopFileOpenIfRevisionRuleNotApplicable = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_SetInsightATPRunning (
        /*[in]*/ VARIANT_BOOL bRunningInsightATP ) = 0;
      virtual HRESULT __stdcall raw_SetInsightATPInfo (
        /*[in]*/ BSTR bstrATPLevel1,
        /*[in]*/ BSTR bstrATPClassName,
        /*[in]*/ BSTR bstrATPName,
        /*[in]*/ long ATPId ) = 0;
      virtual HRESULT __stdcall raw_ValidateDocsOnLCA (
        /*[in]*/ BSTR bstrInputURL,
        /*[in]*/ long numberOfDocumentstoValidate,
        /*[in]*/ VARIANT varlistOfDocsToValidate,
        /*[in]*/ BSTR bstrInputData ) = 0;
      virtual HRESULT __stdcall raw_IsVersioningEnabledForTheInputDocLib (
        /*[in]*/ BSTR docLibName,
        /*[out]*/ VARIANT_BOOL * pbIsVersioningOnForTheInputDocLib ) = 0;
      virtual HRESULT __stdcall raw_IsFileCheckedOutToSameUser (
        /*[in]*/ BSTR filePath,
        /*[in]*/ BSTR UserName,
        /*[in]*/ BSTR Password,
        /*[out]*/ BSTR * checkedoutby,
        /*[in]*/ VARIANT_BOOL UpdateCache ) = 0;
      virtual HRESULT __stdcall raw_IsDocumentLibraryContainsRequiredProperty (
        /*[in]*/ BSTR docLibName,
        /*[out]*/ VARIANT_BOOL * pbIsRequiredPropertyExist ) = 0;
      virtual HRESULT __stdcall raw_SetInsightOfflineMode (
        /*[in]*/ VARIANT_BOOL bOfflineModeVal ) = 0;
      virtual HRESULT __stdcall raw_DisplayPropertyManagerDlg (
        /*[in]*/ BSTR bstrFilename ) = 0;
      virtual HRESULT __stdcall raw_GetCookieData (
        /*[in]*/ BSTR bstrFilename,
        /*[in]*/ enum CookieDataToGet valCookieDataToGet,
        /*[out]*/ enum RevisionRuleType * varRevisionRule ) = 0;
      virtual HRESULT __stdcall raw_SetFilePropertiesOnServer (
        /*[in]*/ BSTR bstrInputURL,
        /*[in]*/ long NumberOfPropertiesToSet,
        /*[in]*/ VARIANT PropertyUrIList,
        /*[in]*/ VARIANT PropertyValueList ) = 0;
      virtual HRESULT __stdcall raw_ISDocumentParserEnabled (
        /*[in]*/ BSTR bstrInputURL,
        /*[out]*/ VARIANT_BOOL * bDocParserEnabled ) = 0;
      virtual HRESULT __stdcall raw_GetLWFPathForUrl (
        /*[in]*/ BSTR bstrUrl,
        /*[out]*/ BSTR * bstrLWFPath ) = 0;
      virtual HRESULT __stdcall raw_DisplaySEPackNGoDlg (
        /*[in]*/ BSTR bstrFilename ) = 0;
};

struct __declspec(uuid("3adaf821-ef13-41b6-a7f6-d3a2f297c0e6"))
ApplicationV8DocumentOpenEvent;
    // [ default ] interface IUnknown
    // [ default, source ] interface ISEApplicationV8AfterDocumentOpenEvent

struct __declspec(uuid("7cd4b08c-fd20-4dde-8b3b-19d4db129ede"))
ISEApplicationV8AfterDocumentOpenEvent : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT AfterDocumentOpen (
        IDispatch * theDocument );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AfterDocumentOpen (
        /*[in]*/ IDispatch * theDocument ) = 0;
};

struct __declspec(uuid("215c74c1-ec59-4dc1-9888-b806b9bab3a3"))
FeatureSelectedFromPFEvents;
    // [ default ] interface IUnknown
    // [ default, source ] dispinterface DISEFeatureSelectedFromPFEvents
    // [ source ] interface ISEFeatureSelectedFromPFEvents

struct __declspec(uuid("8515aba6-cc94-40a2-93f1-0fb41a5e347c"))
DISEFeatureSelectedFromPFEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT AfterFeatureSelectedFromPF (
        IDispatch * theDocument,
        IDispatch * SelectedFeature,
        long lFeatureType );
};

struct __declspec(uuid("2062cc80-fe02-4267-819b-c9f8d095a0e7"))
ISEFeatureSelectedFromPFEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT AfterFeatureSelectedFromPF (
        IDispatch * theDocument,
        IDispatch * SelectedFeature,
        long lFeatureType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AfterFeatureSelectedFromPF (
        /*[in]*/ IDispatch * theDocument,
        /*[in]*/ IDispatch * SelectedFeature,
        /*[in]*/ long lFeatureType ) = 0;
};

enum BulkMigrationTypeConstants
{
    igNoBulkMigration = 0,
    igTDMBulkMigration = 1,
    igProEBulkMigration = 2,
    igNX2DBulkMigration = 3,
    igMDTBulkMigration = 4,
    igSWBulkMigration = 5
};

struct __declspec(uuid("e25441e6-a8ec-4907-b3c5-0454ee164e1d"))
MatTable : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT GetMaterialList (
        long * plNumMaterials,
        VARIANT * listOfMaterials );
    HRESULT SetActiveDocument (
        IDispatch * pDocument );
    HRESULT AddMaterial (
        _bstr_t bstrMatName,
        long lNumProps,
        const _variant_t & varPropList,
        _bstr_t bstrFaceStyle,
        _bstr_t bstrFillStyle,
        _bstr_t bstrVSPlusStyle );
    HRESULT GetMatPropValue (
        _bstr_t bstrMatName,
        MatTablePropIndex lPropIndex,
        VARIANT * varPropValue );
    HRESULT SetMatPropValue (
        _bstr_t bstrMatName,
        MatTablePropIndex lPropIndex,
        const _variant_t & varPropValue );
    HRESULT DeleteMaterial (
        _bstr_t bstrMatName );
    HRESULT ApplyMaterial (
        IDispatch * pDocument,
        _bstr_t bstrMatName );
    HRESULT GetMatLibFileName (
        VARIANT * varMatLibName );
    HRESULT WriteMatLibFileFromXML (
        _bstr_t bstrXMLFile,
        _bstr_t bstrMatLibName );
    HRESULT WriteMaterialDataToXML (
        _bstr_t bstrXMLFile );
    HRESULT GetPSMGaugeListFromExcel (
        _bstr_t bstrGageTableName,
        long * plNumGages,
        VARIANT * listOfGages );
    HRESULT GetPSMGaugeInfoForDoc (
        IDispatch * pDocument,
        BSTR * bstrGageName,
        BSTR * bstrGageFilePath,
        int * iMTLUsingExcel,
        BSTR * bstrMTLGageTableName,
        int * iDocUsingExcel,
        BSTR * bstrDocGageTableName,
        int * iCountBendRadiusVals,
        int * iCountBendAngleVals,
        int * iCountNFVals );
    HRESULT GetDefaultGageFileName (
        BSTR * strGageFileName );
    VARIANT_BOOL PerformGageDataValidation (
        _bstr_t strExcelFile,
        _bstr_t strGageTable,
        _bstr_t strGage );
    HRESULT SetMaterialToGageTableAssociation (
        IDispatch * pDocument,
        _bstr_t bstrMaterialName,
        _bstr_t bstrMaterialGageTableName,
        VARIANT_BOOL bAddAssociation );
    HRESULT SetDocumentToGageTableAssociation (
        IDispatch * pDocument,
        _bstr_t bstrDocGageName,
        _bstr_t bstrDocGageTableName,
        VARIANT_BOOL bUseNeutralFactorFromExcel,
        VARIANT_BOOL bAddAssociation );
    HRESULT UseNeutralFactorFromExcel (
        IDispatch * pDocument,
        VARIANT_BOOL bUseNeutralFactorFromExcel );
    HRESULT EditOpenGageExcelFile (
        _bstr_t bstrDocGageTableName );
    HRESULT GetCurrentGageName (
        IDispatch * pDocument,
        BSTR * bstrGageName );
    HRESULT GetCurrentMaterialName (
        IDispatch * pDocument,
        BSTR * bstrMaterialName );
    HRESULT GetMaterialListFromLibrary (
        _bstr_t bstrLibraryName,
        long * plNumMaterials,
        VARIANT * listOfMaterials );
    HRESULT AddMaterialToLibrary (
        _bstr_t bstrMatName,
        _bstr_t bstrLibrary,
        _bstr_t bstrMaterialPath,
        long lNumProps,
        const _variant_t & varPropList,
        _bstr_t bstrFaceStyle,
        _bstr_t bstrFillStyle );
    HRESULT DeleteMaterialFromLibrary (
        _bstr_t bstrMatName,
        _bstr_t bstrLibraryName );
    HRESULT GetMaterialPropValueFromLibrary (
        _bstr_t bstrMatName,
        _bstr_t bstrLibraryName,
        MatTablePropIndex lPropIndex,
        VARIANT * varPropValue );
    HRESULT SetMaterialPropValueToLibrary (
        _bstr_t bstrMatName,
        _bstr_t bstrLibraryName,
        MatTablePropIndex lPropIndex,
        const _variant_t & varPropValue );
    HRESULT GetMaterialPropValueFromDoc (
        IDispatch * pDocument,
        MatTablePropIndex lPropIndex,
        VARIANT * varPropValue );
    HRESULT ApplyMaterialToDoc (
        IDispatch * pDocument,
        _bstr_t bstrMatName,
        _bstr_t bstrLibraryName );
    HRESULT AddMaterialToFavorites (
        _bstr_t bstrMaterialName,
        _bstr_t bstrLibraryName );
    HRESULT GetFavoriteMaterialList (
        VARIANT * MaterialNames,
        VARIANT * LibraryNames,
        long * plNumMaterials );
    HRESULT GetMRUMaterialList (
        VARIANT * MaterialNames,
        VARIANT * LibraryNames,
        long * plNumMaterials );
    HRESULT SetMRUMaterialLimit (
        int nNoOfMRUMtls );
    HRESULT GetMRUMaterialLimit (
        int * nNoOfMRUMtls );
    HRESULT ClearMRUList ( );
    HRESULT AddCustomProperty (
        _bstr_t bstrMatName,
        _bstr_t bstrMatLibName,
        _bstr_t bstrPropName,
        enum UnitTypeConstants ePropUnitType,
        const _variant_t & varPropValue );
    HRESULT DeleteCustomProperty (
        _bstr_t bstrMatName,
        _bstr_t bstrMatLibName,
        int nPropIndex );
    HRESULT GetCountOfCustomProperties (
        _bstr_t bstrMatName,
        _bstr_t bstrMatLibName,
        int * nNumOfCustProps );
    HRESULT GetCustomMaterialPropertyFromLibrary (
        _bstr_t bstrMatName,
        _bstr_t bstrMatLibName,
        int nPropIndex,
        BSTR * bstrPropName,
        enum UnitTypeConstants * ePropUnitType,
        VARIANT * varPropValue );
    HRESULT GetCustomMaterialPropertyFromDoc (
        IDispatch * pDocument,
        int nPropIndex,
        BSTR * bstrPropName,
        enum UnitTypeConstants * ePropUnitType,
        VARIANT * varPropValue );
    HRESULT GetMaterialsFolderPath (
        BSTR * bstrMtlFolderPath );
    HRESULT GetMaterialLibraryFileList (
        VARIANT * MaterialLibList,
        long * plNumMaterialLibraries );
    HRESULT CreateNewMaterialLibrary (
        _bstr_t bstrLibInputName );
    HRESULT CreateNewDirectory (
        _bstr_t bstrLibname,
        _bstr_t bstrDirectoryPath );
    HRESULT RenameMaterial (
        _bstr_t bstrMatOldName,
        _bstr_t bstrLibname,
        _bstr_t bstrMatNewName );
    HRESULT RenameLibrary (
        _bstr_t bstrLibOldName,
        _bstr_t bstrLibNeName );
    HRESULT RenameDirectory (
        _bstr_t bstrDirOldName,
        _bstr_t bstrLibname,
        _bstr_t bstrDirNewName );
    HRESULT ExportMaterialDataToFile (
        _bstr_t bstrMaterialLibraryName,
        _bstr_t bstrXMLFile );
    HRESULT ImportMaterialDataFromFile (
        _bstr_t bstrXMLFile,
        _bstr_t bstrMatLibFile );
    HRESULT SetMaterialsFolderPath (
        _bstr_t bstrMtlFolderPath );
    HRESULT DeleteDirectory (
        _bstr_t bstrDirName,
        _bstr_t bstrLibname );
    HRESULT GetMaterialLibraryList (
        VARIANT * MaterialLibList,
        long * plNumMaterialLibraries );
    HRESULT ApplyMaterialToFile (
        _bstr_t bstrFilename,
        _bstr_t bstrMatName,
        _bstr_t bstrLibraryName );
    HRESULT GetOODStatusofMaterialAndGage (
        IDispatch * pDoc,
        VARIANT_BOOL * vbMaterialPropOOD,
        VARIANT_BOOL * vbGagePropOOD );
    HRESULT UpdateOODMaterialAndGageProperties (
        IDispatch * pDoc,
        VARIANT_BOOL vbUpdateMaterialProp,
        VARIANT_BOOL vbUpdateGageProp );
    HRESULT GetNeutralFactor (
        IDispatch * pDoc,
        double dBendAngle,
        double dBendRadius,
        double * dNeutralFactor );
    HRESULT ApplyGageFromLibraryToDoc (
        IDispatch * pDocument,
        _bstr_t bstrGage,
        _bstr_t bstrLibraryName );
    HRESULT ApplyGageFromGageTableToDoc (
        IDispatch * pDocument,
        _bstr_t bstrGage,
        _bstr_t bstrGageTableName );
    HRESULT ApplyMaterialToInternalComponents (
        IDispatch * pDocument,
        long NumOfInternalComponents,
        SAFEARRAY * * psaInternalComponents,
        _bstr_t bstrMatName,
        _bstr_t bstrLibraryName );
    HRESULT ApplyGageFromLibraryToInternalComponents (
        IDispatch * pDocument,
        long NumOfInternalComponents,
        SAFEARRAY * * psaInternalComponents,
        _bstr_t bstrGage,
        _bstr_t bstrLibraryName );
    HRESULT ApplyGageFromGageTableToInternalComponents (
        IDispatch * pDocument,
        long NumOfInternalComponents,
        SAFEARRAY * * psaInternalComponents,
        _bstr_t bstrGage,
        _bstr_t bstrGageTableName );
};

enum MatTablePropIndexConstants
{
    seMaterialName = 3,
    seFaceStyle = 20,
    seFillStyle = 21,
    seVSPlusStyle = 22,
    seDensity = 23,
    seCoefOfThermalExpansion = 24,
    seThermalConductivity = 25,
    seSpecificHeat = 26,
    seModulusElasticity = 27,
    sePoissonRatio = 28,
    seYieldStress = 29,
    seUltimateStress = 30,
    seElongation = 31
};

enum UnitTypeConstants
{
    igUnitDistance = 1,
    igUnitAngle = 2,
    igUnitMass = 3,
    igUnitTime = 4,
    igUnitTemperature = 5,
    igUnitElectricCharge = 6,
    igUnitLuminousIntensity = 7,
    igUnitAmountOfSubstance = 8,
    igUnitSolidAngle = 9,
    igUnitAngularAcceleration = 10,
    igUnitAngularMomentum = 11,
    igUnitAngularVelocity = 12,
    igUnitArea = 13,
    igUnitBodyForce = 14,
    igUnitCoefficientOfThermalExpansion = 15,
    igUnitDensity = 16,
    igUnitElectricalCapacitance = 17,
    igUnitElectricalConductance = 18,
    igUnitElectricalFieldStrength = 19,
    igUnitElectricalInductance = 20,
    igUnitElectricalPotential = 21,
    igUnitElectricalResistance = 22,
    igUnitEnergy = 23,
    igUnitEntropy = 24,
    igUnitFilmCoefficient = 25,
    igUnitForce = 26,
    igUnitForcePerArea = 27,
    igUnitForcePerDistance = 28,
    igUnitFrequency = 29,
    igUnitHeatCapacity = 30,
    igUnitHeatFluxPerArea = 31,
    igUnitHeatFluxPerDistance = 32,
    igUnitHeatSource = 33,
    igUnitIlluminance = 34,
    igUnitLinearAcceleration = 35,
    igUnitLinearPerAngular = 36,
    igUnitLinearVelocity = 37,
    igUnitLuminousFlux = 38,
    igUnitMagneticFieldStrength = 39,
    igUnitMagneticFlux = 40,
    igUnitMagneticFluxDensity = 41,
    igUnitMassFlowRate = 42,
    igUnitMassMomentOfInertia = 43,
    igUnitMassPerArea = 44,
    igUnitMassPerLength = 45,
    igUnitMomentum = 46,
    igUnitPerDistance = 47,
    igUnitPower = 48,
    igUnitQuantityOfElectricity = 49,
    igUnitRadiantIntensity = 50,
    igUnitRotationalStiffness = 51,
    igUnitSecondMomentOfArea = 52,
    igUnitThermalConductivity = 53,
    igUnitDynamicViscosity = 54,
    igUnitKinematicViscosity = 55,
    igUnitVolume = 56,
    igUnitVolumeFlowRate = 57,
    igUnitScalar = 58,
    igUnitTorque = 59,
    igUnitEnergyDensity = 60,
    igUnitPressure = 61,
    igUnitHeatGeneration = 62,
    igUnitTemperatureGradient = 63
};

struct __declspec(uuid("102a9dba-54f5-4522-9d3e-5e9464024adf"))
_IMatTableAuto : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT GetMaterialList (
        long * plNumMaterials,
        VARIANT * listOfMaterials );
    HRESULT SetActiveDocument (
        IDispatch * pDocument );
    HRESULT AddMaterial (
        _bstr_t bstrMatName,
        long lNumProps,
        const _variant_t & varPropList,
        _bstr_t bstrFaceStyle,
        _bstr_t bstrFillStyle,
        _bstr_t bstrVSPlusStyle );
    HRESULT GetMatPropValue (
        _bstr_t bstrMatName,
        MatTablePropIndex lPropIndex,
        VARIANT * varPropValue );
    HRESULT SetMatPropValue (
        _bstr_t bstrMatName,
        MatTablePropIndex lPropIndex,
        const _variant_t & varPropValue );
    HRESULT DeleteMaterial (
        _bstr_t bstrMatName );
    HRESULT ApplyMaterial (
        IDispatch * pDocument,
        _bstr_t bstrMatName );
    HRESULT GetMatLibFileName (
        VARIANT * varMatLibName );
    HRESULT WriteMatLibFileFromXML (
        _bstr_t bstrXMLFile,
        _bstr_t bstrMatLibName );
    HRESULT WriteMaterialDataToXML (
        _bstr_t bstrXMLFile );
    HRESULT GetPSMGaugeListFromExcel (
        _bstr_t bstrGageTableName,
        long * plNumGages,
        VARIANT * listOfGages );
    HRESULT GetPSMGaugeInfoForDoc (
        IDispatch * pDocument,
        BSTR * bstrGageName,
        BSTR * bstrGageFilePath,
        int * iMTLUsingExcel,
        BSTR * bstrMTLGageTableName,
        int * iDocUsingExcel,
        BSTR * bstrDocGageTableName,
        int * iCountBendRadiusVals,
        int * iCountBendAngleVals,
        int * iCountNFVals );
    HRESULT GetDefaultGageFileName (
        BSTR * strGageFileName );
    VARIANT_BOOL PerformGageDataValidation (
        _bstr_t strExcelFile,
        _bstr_t strGageTable,
        _bstr_t strGage );
    HRESULT SetMaterialToGageTableAssociation (
        IDispatch * pDocument,
        _bstr_t bstrMaterialName,
        _bstr_t bstrMaterialGageTableName,
        VARIANT_BOOL bAddAssociation );
    HRESULT SetDocumentToGageTableAssociation (
        IDispatch * pDocument,
        _bstr_t bstrDocGageName,
        _bstr_t bstrDocGageTableName,
        VARIANT_BOOL bUseNeutralFactorFromExcel,
        VARIANT_BOOL bAddAssociation );
    HRESULT UseNeutralFactorFromExcel (
        IDispatch * pDocument,
        VARIANT_BOOL bUseNeutralFactorFromExcel );
    HRESULT EditOpenGageExcelFile (
        _bstr_t bstrDocGageTableName );
    HRESULT GetCurrentGageName (
        IDispatch * pDocument,
        BSTR * bstrGageName );
    HRESULT GetCurrentMaterialName (
        IDispatch * pDocument,
        BSTR * bstrMaterialName );
    HRESULT GetMaterialListFromLibrary (
        _bstr_t bstrLibraryName,
        long * plNumMaterials,
        VARIANT * listOfMaterials );
    HRESULT AddMaterialToLibrary (
        _bstr_t bstrMatName,
        _bstr_t bstrLibrary,
        _bstr_t bstrMaterialPath,
        long lNumProps,
        const _variant_t & varPropList,
        _bstr_t bstrFaceStyle,
        _bstr_t bstrFillStyle );
    HRESULT DeleteMaterialFromLibrary (
        _bstr_t bstrMatName,
        _bstr_t bstrLibraryName );
    HRESULT GetMaterialPropValueFromLibrary (
        _bstr_t bstrMatName,
        _bstr_t bstrLibraryName,
        MatTablePropIndex lPropIndex,
        VARIANT * varPropValue );
    HRESULT SetMaterialPropValueToLibrary (
        _bstr_t bstrMatName,
        _bstr_t bstrLibraryName,
        MatTablePropIndex lPropIndex,
        const _variant_t & varPropValue );
    HRESULT GetMaterialPropValueFromDoc (
        IDispatch * pDocument,
        MatTablePropIndex lPropIndex,
        VARIANT * varPropValue );
    HRESULT ApplyMaterialToDoc (
        IDispatch * pDocument,
        _bstr_t bstrMatName,
        _bstr_t bstrLibraryName );
    HRESULT AddMaterialToFavorites (
        _bstr_t bstrMaterialName,
        _bstr_t bstrLibraryName );
    HRESULT GetFavoriteMaterialList (
        VARIANT * MaterialNames,
        VARIANT * LibraryNames,
        long * plNumMaterials );
    HRESULT GetMRUMaterialList (
        VARIANT * MaterialNames,
        VARIANT * LibraryNames,
        long * plNumMaterials );
    HRESULT SetMRUMaterialLimit (
        int nNoOfMRUMtls );
    HRESULT GetMRUMaterialLimit (
        int * nNoOfMRUMtls );
    HRESULT ClearMRUList ( );
    HRESULT AddCustomProperty (
        _bstr_t bstrMatName,
        _bstr_t bstrMatLibName,
        _bstr_t bstrPropName,
        enum UnitTypeConstants ePropUnitType,
        const _variant_t & varPropValue );
    HRESULT DeleteCustomProperty (
        _bstr_t bstrMatName,
        _bstr_t bstrMatLibName,
        int nPropIndex );
    HRESULT GetCountOfCustomProperties (
        _bstr_t bstrMatName,
        _bstr_t bstrMatLibName,
        int * nNumOfCustProps );
    HRESULT GetCustomMaterialPropertyFromLibrary (
        _bstr_t bstrMatName,
        _bstr_t bstrMatLibName,
        int nPropIndex,
        BSTR * bstrPropName,
        enum UnitTypeConstants * ePropUnitType,
        VARIANT * varPropValue );
    HRESULT GetCustomMaterialPropertyFromDoc (
        IDispatch * pDocument,
        int nPropIndex,
        BSTR * bstrPropName,
        enum UnitTypeConstants * ePropUnitType,
        VARIANT * varPropValue );
    HRESULT GetMaterialsFolderPath (
        BSTR * bstrMtlFolderPath );
    HRESULT GetMaterialLibraryFileList (
        VARIANT * MaterialLibList,
        long * plNumMaterialLibraries );
    HRESULT CreateNewMaterialLibrary (
        _bstr_t bstrLibInputName );
    HRESULT CreateNewDirectory (
        _bstr_t bstrLibname,
        _bstr_t bstrDirectoryPath );
    HRESULT RenameMaterial (
        _bstr_t bstrMatOldName,
        _bstr_t bstrLibname,
        _bstr_t bstrMatNewName );
    HRESULT RenameLibrary (
        _bstr_t bstrLibOldName,
        _bstr_t bstrLibNeName );
    HRESULT RenameDirectory (
        _bstr_t bstrDirOldName,
        _bstr_t bstrLibname,
        _bstr_t bstrDirNewName );
    HRESULT ExportMaterialDataToFile (
        _bstr_t bstrMaterialLibraryName,
        _bstr_t bstrXMLFile );
    HRESULT ImportMaterialDataFromFile (
        _bstr_t bstrXMLFile,
        _bstr_t bstrMatLibFile );
    HRESULT SetMaterialsFolderPath (
        _bstr_t bstrMtlFolderPath );
    HRESULT DeleteDirectory (
        _bstr_t bstrDirName,
        _bstr_t bstrLibname );
    HRESULT GetMaterialLibraryList (
        VARIANT * MaterialLibList,
        long * plNumMaterialLibraries );
    HRESULT ApplyMaterialToFile (
        _bstr_t bstrFilename,
        _bstr_t bstrMatName,
        _bstr_t bstrLibraryName );
    HRESULT GetOODStatusofMaterialAndGage (
        IDispatch * pDoc,
        VARIANT_BOOL * vbMaterialPropOOD,
        VARIANT_BOOL * vbGagePropOOD );
    HRESULT UpdateOODMaterialAndGageProperties (
        IDispatch * pDoc,
        VARIANT_BOOL vbUpdateMaterialProp,
        VARIANT_BOOL vbUpdateGageProp );
    HRESULT GetNeutralFactor (
        IDispatch * pDoc,
        double dBendAngle,
        double dBendRadius,
        double * dNeutralFactor );
    HRESULT ApplyGageFromLibraryToDoc (
        IDispatch * pDocument,
        _bstr_t bstrGage,
        _bstr_t bstrLibraryName );
    HRESULT ApplyGageFromGageTableToDoc (
        IDispatch * pDocument,
        _bstr_t bstrGage,
        _bstr_t bstrGageTableName );
    HRESULT ApplyMaterialToInternalComponents (
        IDispatch * pDocument,
        long NumOfInternalComponents,
        SAFEARRAY * * psaInternalComponents,
        _bstr_t bstrMatName,
        _bstr_t bstrLibraryName );
    HRESULT ApplyGageFromLibraryToInternalComponents (
        IDispatch * pDocument,
        long NumOfInternalComponents,
        SAFEARRAY * * psaInternalComponents,
        _bstr_t bstrGage,
        _bstr_t bstrLibraryName );
    HRESULT ApplyGageFromGageTableToInternalComponents (
        IDispatch * pDocument,
        long NumOfInternalComponents,
        SAFEARRAY * * psaInternalComponents,
        _bstr_t bstrGage,
        _bstr_t bstrGageTableName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetMaterialList (
        /*[out]*/ long * plNumMaterials,
        /*[out]*/ VARIANT * listOfMaterials ) = 0;
      virtual HRESULT __stdcall raw_SetActiveDocument (
        IDispatch * pDocument ) = 0;
      virtual HRESULT __stdcall raw_AddMaterial (
        /*[in]*/ BSTR bstrMatName,
        /*[in]*/ long lNumProps,
        /*[in]*/ VARIANT varPropList,
        /*[in]*/ BSTR bstrFaceStyle,
        /*[in]*/ BSTR bstrFillStyle,
        /*[in]*/ BSTR bstrVSPlusStyle ) = 0;
      virtual HRESULT __stdcall raw_GetMatPropValue (
        /*[in]*/ BSTR bstrMatName,
        /*[in]*/ MatTablePropIndex lPropIndex,
        /*[out]*/ VARIANT * varPropValue ) = 0;
      virtual HRESULT __stdcall raw_SetMatPropValue (
        /*[in]*/ BSTR bstrMatName,
        /*[in]*/ MatTablePropIndex lPropIndex,
        /*[in]*/ VARIANT varPropValue ) = 0;
      virtual HRESULT __stdcall raw_DeleteMaterial (
        /*[in]*/ BSTR bstrMatName ) = 0;
      virtual HRESULT __stdcall raw_ApplyMaterial (
        /*[in]*/ IDispatch * pDocument,
        /*[in]*/ BSTR bstrMatName ) = 0;
      virtual HRESULT __stdcall raw_GetMatLibFileName (
        /*[out]*/ VARIANT * varMatLibName ) = 0;
      virtual HRESULT __stdcall raw_WriteMatLibFileFromXML (
        /*[in]*/ BSTR bstrXMLFile,
        /*[in]*/ BSTR bstrMatLibName ) = 0;
      virtual HRESULT __stdcall raw_WriteMaterialDataToXML (
        /*[in]*/ BSTR bstrXMLFile ) = 0;
      virtual HRESULT __stdcall raw_GetPSMGaugeListFromExcel (
        /*[in]*/ BSTR bstrGageTableName,
        /*[out]*/ long * plNumGages,
        /*[out]*/ VARIANT * listOfGages ) = 0;
      virtual HRESULT __stdcall raw_GetPSMGaugeInfoForDoc (
        /*[in]*/ IDispatch * pDocument,
        /*[out]*/ BSTR * bstrGageName,
        /*[out]*/ BSTR * bstrGageFilePath,
        /*[out]*/ int * iMTLUsingExcel,
        /*[out]*/ BSTR * bstrMTLGageTableName,
        /*[out]*/ int * iDocUsingExcel,
        /*[out]*/ BSTR * bstrDocGageTableName,
        /*[out]*/ int * iCountBendRadiusVals,
        /*[out]*/ int * iCountBendAngleVals,
        /*[out]*/ int * iCountNFVals ) = 0;
      virtual HRESULT __stdcall raw_GetDefaultGageFileName (
        /*[out]*/ BSTR * strGageFileName ) = 0;
      virtual HRESULT __stdcall raw_PerformGageDataValidation (
        /*[in]*/ BSTR strExcelFile,
        /*[in]*/ BSTR strGageTable,
        /*[in]*/ BSTR strGage,
        /*[out,retval]*/ VARIANT_BOOL * bValidGage ) = 0;
      virtual HRESULT __stdcall raw_SetMaterialToGageTableAssociation (
        /*[in]*/ IDispatch * pDocument,
        /*[in]*/ BSTR bstrMaterialName,
        /*[in]*/ BSTR bstrMaterialGageTableName,
        /*[in]*/ VARIANT_BOOL bAddAssociation ) = 0;
      virtual HRESULT __stdcall raw_SetDocumentToGageTableAssociation (
        /*[in]*/ IDispatch * pDocument,
        /*[in]*/ BSTR bstrDocGageName,
        /*[in]*/ BSTR bstrDocGageTableName,
        /*[in]*/ VARIANT_BOOL bUseNeutralFactorFromExcel,
        /*[in]*/ VARIANT_BOOL bAddAssociation ) = 0;
      virtual HRESULT __stdcall raw_UseNeutralFactorFromExcel (
        /*[in]*/ IDispatch * pDocument,
        /*[in]*/ VARIANT_BOOL bUseNeutralFactorFromExcel ) = 0;
      virtual HRESULT __stdcall raw_EditOpenGageExcelFile (
        /*[in]*/ BSTR bstrDocGageTableName ) = 0;
      virtual HRESULT __stdcall raw_GetCurrentGageName (
        /*[in]*/ IDispatch * pDocument,
        /*[out]*/ BSTR * bstrGageName ) = 0;
      virtual HRESULT __stdcall raw_GetCurrentMaterialName (
        /*[in]*/ IDispatch * pDocument,
        /*[out]*/ BSTR * bstrMaterialName ) = 0;
      virtual HRESULT __stdcall raw_GetMaterialListFromLibrary (
        /*[in]*/ BSTR bstrLibraryName,
        /*[out]*/ long * plNumMaterials,
        /*[out]*/ VARIANT * listOfMaterials ) = 0;
      virtual HRESULT __stdcall raw_AddMaterialToLibrary (
        /*[in]*/ BSTR bstrMatName,
        /*[in]*/ BSTR bstrLibrary,
        /*[in]*/ BSTR bstrMaterialPath,
        /*[in]*/ long lNumProps,
        /*[in]*/ VARIANT varPropList,
        /*[in]*/ BSTR bstrFaceStyle,
        /*[in]*/ BSTR bstrFillStyle ) = 0;
      virtual HRESULT __stdcall raw_DeleteMaterialFromLibrary (
        /*[in]*/ BSTR bstrMatName,
        /*[in]*/ BSTR bstrLibraryName ) = 0;
      virtual HRESULT __stdcall raw_GetMaterialPropValueFromLibrary (
        /*[in]*/ BSTR bstrMatName,
        /*[in]*/ BSTR bstrLibraryName,
        /*[in]*/ MatTablePropIndex lPropIndex,
        /*[out]*/ VARIANT * varPropValue ) = 0;
      virtual HRESULT __stdcall raw_SetMaterialPropValueToLibrary (
        /*[in]*/ BSTR bstrMatName,
        /*[in]*/ BSTR bstrLibraryName,
        /*[in]*/ MatTablePropIndex lPropIndex,
        /*[in]*/ VARIANT varPropValue ) = 0;
      virtual HRESULT __stdcall raw_GetMaterialPropValueFromDoc (
        /*[in]*/ IDispatch * pDocument,
        /*[in]*/ MatTablePropIndex lPropIndex,
        /*[out]*/ VARIANT * varPropValue ) = 0;
      virtual HRESULT __stdcall raw_ApplyMaterialToDoc (
        /*[in]*/ IDispatch * pDocument,
        /*[in]*/ BSTR bstrMatName,
        /*[in]*/ BSTR bstrLibraryName ) = 0;
      virtual HRESULT __stdcall raw_AddMaterialToFavorites (
        /*[in]*/ BSTR bstrMaterialName,
        /*[in]*/ BSTR bstrLibraryName ) = 0;
      virtual HRESULT __stdcall raw_GetFavoriteMaterialList (
        /*[out]*/ VARIANT * MaterialNames,
        /*[out]*/ VARIANT * LibraryNames,
        /*[out]*/ long * plNumMaterials ) = 0;
      virtual HRESULT __stdcall raw_GetMRUMaterialList (
        /*[out]*/ VARIANT * MaterialNames,
        /*[out]*/ VARIANT * LibraryNames,
        /*[out]*/ long * plNumMaterials ) = 0;
      virtual HRESULT __stdcall raw_SetMRUMaterialLimit (
        /*[in]*/ int nNoOfMRUMtls ) = 0;
      virtual HRESULT __stdcall raw_GetMRUMaterialLimit (
        /*[out]*/ int * nNoOfMRUMtls ) = 0;
      virtual HRESULT __stdcall raw_ClearMRUList ( ) = 0;
      virtual HRESULT __stdcall raw_AddCustomProperty (
        /*[in]*/ BSTR bstrMatName,
        /*[in]*/ BSTR bstrMatLibName,
        /*[in]*/ BSTR bstrPropName,
        /*[in]*/ enum UnitTypeConstants ePropUnitType,
        /*[in]*/ VARIANT varPropValue ) = 0;
      virtual HRESULT __stdcall raw_DeleteCustomProperty (
        /*[in]*/ BSTR bstrMatName,
        /*[in]*/ BSTR bstrMatLibName,
        /*[in]*/ int nPropIndex ) = 0;
      virtual HRESULT __stdcall raw_GetCountOfCustomProperties (
        /*[in]*/ BSTR bstrMatName,
        /*[in]*/ BSTR bstrMatLibName,
        /*[out]*/ int * nNumOfCustProps ) = 0;
      virtual HRESULT __stdcall raw_GetCustomMaterialPropertyFromLibrary (
        /*[in]*/ BSTR bstrMatName,
        /*[in]*/ BSTR bstrMatLibName,
        /*[in]*/ int nPropIndex,
        /*[out]*/ BSTR * bstrPropName,
        /*[out]*/ enum UnitTypeConstants * ePropUnitType,
        /*[out]*/ VARIANT * varPropValue ) = 0;
      virtual HRESULT __stdcall raw_GetCustomMaterialPropertyFromDoc (
        /*[in]*/ IDispatch * pDocument,
        /*[in]*/ int nPropIndex,
        /*[out]*/ BSTR * bstrPropName,
        /*[out]*/ enum UnitTypeConstants * ePropUnitType,
        /*[out]*/ VARIANT * varPropValue ) = 0;
      virtual HRESULT __stdcall raw_GetMaterialsFolderPath (
        /*[out]*/ BSTR * bstrMtlFolderPath ) = 0;
      virtual HRESULT __stdcall raw_GetMaterialLibraryFileList (
        /*[out]*/ VARIANT * MaterialLibList,
        /*[out]*/ long * plNumMaterialLibraries ) = 0;
      virtual HRESULT __stdcall raw_CreateNewMaterialLibrary (
        /*[in]*/ BSTR bstrLibInputName ) = 0;
      virtual HRESULT __stdcall raw_CreateNewDirectory (
        /*[in]*/ BSTR bstrLibname,
        /*[in]*/ BSTR bstrDirectoryPath ) = 0;
      virtual HRESULT __stdcall raw_RenameMaterial (
        /*[in]*/ BSTR bstrMatOldName,
        /*[in]*/ BSTR bstrLibname,
        /*[in]*/ BSTR bstrMatNewName ) = 0;
      virtual HRESULT __stdcall raw_RenameLibrary (
        /*[in]*/ BSTR bstrLibOldName,
        /*[in]*/ BSTR bstrLibNeName ) = 0;
      virtual HRESULT __stdcall raw_RenameDirectory (
        /*[in]*/ BSTR bstrDirOldName,
        /*[in]*/ BSTR bstrLibname,
        /*[in]*/ BSTR bstrDirNewName ) = 0;
      virtual HRESULT __stdcall raw_ExportMaterialDataToFile (
        /*[in]*/ BSTR bstrMaterialLibraryName,
        /*[in]*/ BSTR bstrXMLFile ) = 0;
      virtual HRESULT __stdcall raw_ImportMaterialDataFromFile (
        /*[in]*/ BSTR bstrXMLFile,
        /*[in]*/ BSTR bstrMatLibFile ) = 0;
      virtual HRESULT __stdcall raw_SetMaterialsFolderPath (
        /*[in]*/ BSTR bstrMtlFolderPath ) = 0;
      virtual HRESULT __stdcall raw_DeleteDirectory (
        /*[in]*/ BSTR bstrDirName,
        /*[in]*/ BSTR bstrLibname ) = 0;
      virtual HRESULT __stdcall raw_GetMaterialLibraryList (
        /*[out]*/ VARIANT * MaterialLibList,
        /*[out]*/ long * plNumMaterialLibraries ) = 0;
      virtual HRESULT __stdcall raw_ApplyMaterialToFile (
        /*[in]*/ BSTR bstrFilename,
        /*[in]*/ BSTR bstrMatName,
        /*[in]*/ BSTR bstrLibraryName ) = 0;
      virtual HRESULT __stdcall raw_GetOODStatusofMaterialAndGage (
        /*[in]*/ IDispatch * pDoc,
        /*[out]*/ VARIANT_BOOL * vbMaterialPropOOD,
        /*[out]*/ VARIANT_BOOL * vbGagePropOOD ) = 0;
      virtual HRESULT __stdcall raw_UpdateOODMaterialAndGageProperties (
        /*[in]*/ IDispatch * pDoc,
        /*[in]*/ VARIANT_BOOL vbUpdateMaterialProp,
        /*[in]*/ VARIANT_BOOL vbUpdateGageProp ) = 0;
      virtual HRESULT __stdcall raw_GetNeutralFactor (
        /*[in]*/ IDispatch * pDoc,
        /*[in]*/ double dBendAngle,
        /*[in]*/ double dBendRadius,
        /*[out]*/ double * dNeutralFactor ) = 0;
      virtual HRESULT __stdcall raw_ApplyGageFromLibraryToDoc (
        /*[in]*/ IDispatch * pDocument,
        /*[in]*/ BSTR bstrGage,
        /*[in]*/ BSTR bstrLibraryName ) = 0;
      virtual HRESULT __stdcall raw_ApplyGageFromGageTableToDoc (
        /*[in]*/ IDispatch * pDocument,
        /*[in]*/ BSTR bstrGage,
        /*[in]*/ BSTR bstrGageTableName ) = 0;
      virtual HRESULT __stdcall raw_ApplyMaterialToInternalComponents (
        /*[in]*/ IDispatch * pDocument,
        /*[in]*/ long NumOfInternalComponents,
        /*[in]*/ SAFEARRAY * * psaInternalComponents,
        /*[in]*/ BSTR bstrMatName,
        /*[in]*/ BSTR bstrLibraryName ) = 0;
      virtual HRESULT __stdcall raw_ApplyGageFromLibraryToInternalComponents (
        /*[in]*/ IDispatch * pDocument,
        /*[in]*/ long NumOfInternalComponents,
        /*[in]*/ SAFEARRAY * * psaInternalComponents,
        /*[in]*/ BSTR bstrGage,
        /*[in]*/ BSTR bstrLibraryName ) = 0;
      virtual HRESULT __stdcall raw_ApplyGageFromGageTableToInternalComponents (
        /*[in]*/ IDispatch * pDocument,
        /*[in]*/ long NumOfInternalComponents,
        /*[in]*/ SAFEARRAY * * psaInternalComponents,
        /*[in]*/ BSTR bstrGage,
        /*[in]*/ BSTR bstrGageTableName ) = 0;
};

struct __declspec(uuid("206af232-e02e-4f19-9101-b28c2a565100"))
NewFileUIEvents;
    // [ default ] interface IUnknown
    // [ default, source ] interface ISENewFileUIEvents

struct __declspec(uuid("768a88a7-c417-453a-a70c-fa292379c148"))
ISENewFileUIEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT OnNewFileUI (
        enum DocumentTypeConstants DocumentType,
        BSTR * Filename,
        BSTR * AppendToTitle );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_OnNewFileUI (
        /*[in]*/ enum DocumentTypeConstants DocumentType,
        /*[out]*/ BSTR * Filename,
        /*[out]*/ BSTR * AppendToTitle ) = 0;
};

struct __declspec(uuid("fefb7665-5732-4bf0-8e46-d1e158ed20d3"))
ShortcutMenuEvents;
    // [ default ] interface IUnknown
    // [ default, source ] interface ISEShortCutMenuEvents

enum ShortCutMenuContextConstants
{
    seShortCutForGraphicLocate = 1,
    seShortCutForView = 2,
    seShortCutForFeaturePathFinder = 3,
    seShortCutForFeaturePathFinderDocument = 4,
    seShortCutNone = 5,
    seShortCutSimulationPathfinder = 6,
    seShortCutForPredictCommand = 7
};

struct __declspec(uuid("906f7a2e-ac43-409d-9933-c9a88b930c99"))
ISEShortCutMenuEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT BuildMenu (
        _bstr_t EnvCatID,
        enum ShortCutMenuContextConstants Context,
        IDispatch * pGraphicDispatch,
        SAFEARRAY * * MenuStrings,
        SAFEARRAY * * CommandIDs );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_BuildMenu (
        /*[in]*/ BSTR EnvCatID,
        /*[in]*/ enum ShortCutMenuContextConstants Context,
        /*[in]*/ IDispatch * pGraphicDispatch,
        /*[out]*/ SAFEARRAY * * MenuStrings,
        /*[out]*/ SAFEARRAY * * CommandIDs ) = 0;
};

struct __declspec(uuid("9214a28e-88fa-46e5-96d8-fa25882d6c6f"))
SolidEdgeTCE : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT GetPDMCachePath (
        BSTR * bStrCachePath );
    HRESULT CheckInDocumentsToTeamCenterServer (
        SAFEARRAY * * ppsaFileList,
        VARIANT_BOOL bOnlyUpload );
    HRESULT CheckOutDocumentsFromTeamCenterServer (
        _bstr_t bstrDirctFileItemId,
        _bstr_t bstrDirctFileItemRevId,
        VARIANT_BOOL bOnlyDownload,
        _bstr_t bstrFilename,
        enum DocumentDownloadLevel enumDownloadLevel );
    int IsTeamCenterFileCheckedOut (
        _bstr_t bstrFilename );
    HRESULT GetDocumentUID (
        _bstr_t bstrFilename,
        BSTR * bstrItemId,
        BSTR * bstrItemRev );
    HRESULT DoesTeamCenterFileExists (
        _bstr_t bstrItemId,
        _bstr_t bstrItemRev,
        VARIANT_BOOL * bFileExists );
    HRESULT GetTeamCenterMode (
        VARIANT_BOOL * bIsTeamCenterMode );
    HRESULT SetTeamCenterMode (
        VARIANT_BOOL bMode );
    HRESULT ValidateLogin (
        _bstr_t bstrUserName,
        _bstr_t bstrPassword,
        _bstr_t bstrGroup,
        _bstr_t bstrUserRole,
        _bstr_t bstrDBUrl );
    HRESULT AssignItemID (
        _bstr_t bstrItemType,
        BSTR * bstrItemId,
        BSTR * bstrItemRev );
    HRESULT PutItemTypeAsCustomProp (
        _bstr_t bstrFilename,
        _bstr_t bstrItemType );
    HRESULT GetDatasetNameFromCookie (
        _bstr_t bstrFilename,
        BSTR * bstrDatasetName );
    HRESULT DeleteFilesFromCache (
        SAFEARRAY * * psaCacheFiles );
    HRESULT ImportDocumentsToServer (
        long lnumberOfDocumentsFoldersToImport,
        SAFEARRAY * * psalistOfFilesFoldersToImport,
        _bstr_t bstrUserName,
        _bstr_t bstrPassword,
        _bstr_t bstrGroup,
        _bstr_t bstrUserRole,
        _bstr_t bstrDBUrl,
        VARIANT_BOOL bImportAsPrecise,
        VARIANT_BOOL bPerformOnlyDryRun,
        VARIANT_BOOL bDisplayAlert,
        VARIANT_BOOL bIsFromATP,
        VARIANT_BOOL bIsOverwrite,
        VARIANT_BOOL brestart,
        VARIANT_BOOL bLinkTraversal,
        VARIANT_BOOL bIncludeSubFolders,
        BSTR * bstrFolderUID );
    HRESULT OnUndoCheckOutDocuments (
        SAFEARRAY * * psaCacheFiles );
    HRESULT OnSynchronizeFile (
        SAFEARRAY * * psaSynchFiles,
        enum SyncOption enumSyncOption );
    HRESULT GetOutOfDateDocuments (
        VARIANT * pvarListOfOutOfDateDocuments );
    HRESULT GetUserLogMessages (
        VARIANT * pvarUserLogMessages );
    HRESULT SaveAsToTeamCenter (
        _bstr_t bstrItemId,
        _bstr_t bstrItemRev,
        _bstr_t bstrDataSetFileName,
        _bstr_t bstrRevisionRule,
        _bstr_t bstrFolderName,
        VARIANT * pvarListOldAndNewItemIDRevsFileNames );
    HRESULT ReviseToTeamCenter (
        _bstr_t bstrItemId,
        _bstr_t bstrItemRev,
        _bstr_t bstrDataSetFileName,
        _bstr_t bstrRevisionRule,
        _bstr_t bstrFolderName,
        VARIANT * pvarListOldAndNewItemIDRevsFileNames );
    HRESULT OnGetWhereUsedForAutomation (
        _bstr_t bstrItemId,
        _bstr_t bstrItemRev,
        _bstr_t bstrDataSetFileName,
        VARIANT * pvarListOfWhereUsedDocuments );
    HRESULT CreateNewProject (
        _bstr_t bstrProjectName );
    HRESULT DeleteProject (
        _bstr_t bstrProjectName );
    HRESULT DeleteAllProjects ( );
    HRESULT DownladDocumentsFromServerWithOptions (
        _bstr_t bstrItemId,
        _bstr_t bstrItemRev,
        _bstr_t bstrDataSetFileName,
        _bstr_t bstrRevisionRule,
        _bstr_t bstrVariantRule,
        VARIANT_BOOL vbReadOnly,
        VARIANT_BOOL vbAllLevel,
        unsigned long dwDownloadOption,
        SAFEARRAY * * pvarListOfFiles );
    HRESULT GetListOfIndirectFilesForGivenFile (
        _bstr_t bstrItemId,
        _bstr_t bstrItemRev,
        _bstr_t bstrDataSetFileName,
        _bstr_t bstrRevisionRule,
        _bstr_t bstrVariantRule,
        VARIANT * pvarListOfIndirectFiles );
    HRESULT GetMappedPropertiesForGivenFile (
        _bstr_t bstrItemId,
        _bstr_t bstrItemRev,
        _bstr_t bstrDataSetFileName,
        VARIANT * pvarListOfProperties );
    HRESULT GetListOfFilesFromTeamcenterServer (
        _bstr_t bstrDirctFileItemId,
        _bstr_t bstrDirctFileItemRevId,
        VARIANT * vFileNames,
        long * nFiles );
    HRESULT GetTALLogFileName (
        BSTR * bstrLogFileName );
    HRESULT ValidateTcObjectModel (
        _bstr_t bstrFilename,
        _bstr_t bstrOldItemID,
        _bstr_t bstrOldRev,
        VARIANT_BOOL * bIsTcModelCorrect,
        BSTR * bsrtCompResult,
        VARIANT * vRevisionRule,
        VARIANT * vValidateBOMOnly,
        long * nNoOfServerComponents );
    HRESULT GetBomStructure (
        _bstr_t bstrItemId,
        _bstr_t bstrItemRevId,
        _bstr_t bstrRevisionRule,
        VARIANT_BOOL bDeepList,
        long * NoOfComponents,
        VARIANT * ListOfItemRevIds,
        VARIANT * ListOfFileSpecs );
    HRESULT GetItemRevBasedOnSEType (
        enum TCESETypes nSEType,
        _bstr_t bstrUserName,
        VARIANT * ListOfItemRevIds );
    HRESULT GetItemTypesInfo (
        BSTR * pbstrXML,
        BSTR * pbstrDefaultItemType );
    HRESULT GetSmartCodes (
        VARIANT * pvarSmartCodesInfo );
    HRESULT UnGetSmartCodes (
        SAFEARRAY * * ppsaUnGetInfo );
    HRESULT CheckInDocumentsToTeamCenterServerEx (
        VARIANT * pvarFilesToBeCheckedInInfo,
        VARIANT * pvarArguments );
    HRESULT IsItemTypeSmartCodesConfigured (
        _bstr_t bstrItemType,
        VARIANT_BOOL * pvbIsSmartCodesConfigured );
    HRESULT GetSEECOrTCPreferenceValues (
        VARIANT * pvarPreferenceInfo );
    HRESULT UpdateStatusInformation (
        SAFEARRAY * * psaCacheFiles );
    HRESULT GetProjectsForLoggedInUSer (
        VARIANT * pvarListOfUserProjects,
        VARIANT * pvarListOfUserProjectUIDs );
    HRESULT GetProjectsForGivenItemIDs (
        VARIANT * pvarListOfItemIDsAndProjects );
    HRESULT AddOrRemoveItemsToOrFromProjects (
        VARIANT * pvarItemInfoToAddOrRemoveToProjects );
    HRESULT CheckBomStructure (
        _bstr_t bstrItemId,
        _bstr_t bstrItemRevId,
        _bstr_t bstrRevisionRule,
        VARIANT_BOOL * bIsDuplicateBOMLineExists,
        VARIANT * ListOfDupliacteObjIDs );
    HRESULT AutoAssign (
        VARIANT_BOOL vbAutoAssign );
    HRESULT GetMFKAttributesForGivenItemType (
        _bstr_t bstrItemType,
        VARIANT * pvMFKAttributes );
    HRESULT SetPDMProperties (
        _bstr_t bstrOldFileName,
        VARIANT * pvarListOfPropsForFileSaveAs,
        BSTR * bstrNewFileName );
    HRESULT GetCurrentUserName (
        BSTR * bStrCurrentUser );
    HRESULT GetDocumentUIDEx (
        _bstr_t bstrFilename,
        BSTR * bstrItemId,
        BSTR * bstrItemRev,
        BSTR * bstrItemUID,
        BSTR * bstrRevUID );
    HRESULT DoesTeamCenterFileExistsUsingKeyProperties (
        _bstr_t bstrItemType,
        VARIANT * pvarMFKAttrInfo,
        _bstr_t bstrItemRev,
        VARIANT_BOOL * bFileExists );
    HRESULT CheckOutDocumentsFromTeamCenterServerUsingKeyProperties (
        VARIANT * pvarMFKAttrInfo,
        _bstr_t bstrItemType,
        _bstr_t bstrDirctFileItemRevId,
        VARIANT_BOOL bOnlyDownload,
        _bstr_t bstrFilename,
        enum DocumentDownloadLevel enumDownloadLevel );
    HRESULT GetTeamcenterVersion (
        BSTR * bstrMajorVersion,
        BSTR * bstrCompleteVersion );
    HRESULT GetItemIDAndRevisionPatterns (
        _bstr_t bstrItemType,
        VARIANT * pvarItemIDPattern,
        VARIANT * pvarRevisionPattern );
    HRESULT AssignItemIDAndRevUsingPatterns (
        _bstr_t bstrItemType,
        _bstr_t bstrItemIDPattern,
        _bstr_t bstrRevisionPattern,
        BSTR * pItemIDPattern,
        BSTR * pRevisionPattern );
    HRESULT GetItemTypesInfoEx (
        _bstr_t bstrFilename,
        VARIANT * pvarItemTypeList );
    HRESULT MapMFKAttributtesToFileProperties (
        _bstr_t bstrFilename,
        SAFEARRAY * * psaMFKAttributes,
        VARIANT * pvarPropertyInfo );
    HRESULT GetListOfFilesFromTeamcenterServerUsingKeyProperties (
        VARIANT * pvarMFKAttrInfo,
        _bstr_t bstrDirctFileItemRevId,
        _bstr_t bstrItemType,
        VARIANT * vFileNames,
        long * nFiles );
    HRESULT GetBomStructureUsingKeyProperties (
        VARIANT * pvarMFKAttrInfo,
        _bstr_t bstrItemRevId,
        _bstr_t bstrItemType,
        _bstr_t bstrRevisionRule,
        VARIANT_BOOL bDeepList,
        long * NoOfComponents,
        VARIANT * ListOfItemRevIds,
        VARIANT * ListOfFileSpecs );
    HRESULT CheckBomStructureUsingKeyProperties (
        VARIANT * pvarMFKAttrInfo,
        _bstr_t bstrItemRevId,
        _bstr_t bstrItemType,
        _bstr_t bstrRevisionRule,
        VARIANT_BOOL * bIsDuplicateBOMLineExists,
        VARIANT * ListOfDupliacteObjIDs );
    HRESULT SaveAsToTeamCenterUsingKeyProperties (
        VARIANT * pvarMFKAttrInfo,
        _bstr_t bstrItemRev,
        _bstr_t bstrItemType,
        _bstr_t bstrDataSetFileName,
        _bstr_t bstrRevisionRule,
        _bstr_t bstrFolderName,
        VARIANT * pvarListOldAndNewItemIDRevsFileNames );
    HRESULT ReviseToTeamCenterUsingKeyProperties (
        VARIANT * pvarMFKAttrInfo,
        _bstr_t bstrItemRev,
        _bstr_t bstrItemType,
        _bstr_t bstrDataSetFileName,
        _bstr_t bstrRevisionRule,
        _bstr_t bstrFolderName,
        VARIANT * pvarListOldAndNewItemIDRevsFileNames );
    HRESULT GetListOfIndirectFilesForGivenFileUsingKeyProperties (
        VARIANT * pvarMFKAttrInfo,
        _bstr_t bstrItemRev,
        _bstr_t bstrItemType,
        _bstr_t bstrDataSetFileName,
        _bstr_t bstrRevisionRule,
        VARIANT * pvarListOfIndirectFiles );
    HRESULT GetMappedPropertiesForGivenFileUsingKeyProperties (
        VARIANT * pvarMFKAttrInfo,
        _bstr_t bstrItemRev,
        _bstr_t bstrItemType,
        _bstr_t bstrDataSetFileName,
        VARIANT * pvarListOfProperties );
    HRESULT ValidateTcObjectModelUsingKeyProperties (
        _bstr_t bstrFilename,
        VARIANT * pvarMFKAttrInfo,
        _bstr_t bstrItemType,
        _bstr_t bstrOldRev,
        VARIANT_BOOL * bIsTcModelCorrect,
        BSTR * bsrtCompResult,
        VARIANT * vRevisionRule,
        VARIANT * vValidateBOMOnly,
        long * nNoOfServerComponents );
    HRESULT OnGetWhereUsedForAutomationUsingKeyProperties (
        VARIANT * pvarMFKAttrInfo,
        _bstr_t bstrItemRev,
        _bstr_t bstrItemType,
        _bstr_t bstrDataSetFileName,
        VARIANT * pvarListOfWhereUsedDocuments );
    HRESULT DownloadDocumentsFromServerWithOptionsUsingKeyProperties (
        VARIANT * pvarMFKAttrInfo,
        _bstr_t bstrItemRev,
        _bstr_t bstrDataSetFileName,
        _bstr_t bstrRevisionRule,
        _bstr_t bstrItemType,
        VARIANT_BOOL vbReadOnly,
        VARIANT_BOOL vbAllLevel,
        unsigned long dwDownloadOption,
        SAFEARRAY * * pvarListOfFiles );
    HRESULT ValidateKeyProperties (
        VARIANT * pvarMFKAttrInfo,
        _bstr_t bstrRevID,
        _bstr_t bstrItemType,
        VARIANT * pvarListOfPropsVsStatus );
    HRESULT GetStorageNameForProperties (
        _bstr_t bstrFilename,
        VARIANT * pvarListOfPropInfo );
    HRESULT GetErrorMessages (
        VARIANT * pvarListOfErrorMsgs,
        VARIANT * pvarListOfWarningMsgs,
        VARIANT * pvarListOfInformationalMsgs );
    HRESULT GetAllRevisions (
        VARIANT * pvarMFKAttributes,
        _bstr_t bstrItemType,
        VARIANT * pvarRevisionList );
    HRESULT CreateZipOfCache (
        _bstr_t bstrSourceCachePath,
        _bstr_t bstrDestinationZipPath );
    HRESULT GetListOfWorkflows (
        VARIANT * pvarMFKAttributes,
        _bstr_t bstrItemType,
        _bstr_t bstrItemRev,
        VARIANT_BOOL bGetFiltered,
        VARIANT * pVarWorkflows );
    HRESULT ExecuteWorkflow (
        VARIANT * pvarMFKAttributes,
        _bstr_t bstrItemType,
        _bstr_t bstrItemRev,
        _bstr_t bstrprocessName,
        _bstr_t bstrProcessDesr,
        _bstr_t bstrTemplate,
        VARIANT * pVarOut );
    HRESULT GetActivePDMMode (
        unsigned long * activePDM );
    HRESULT GetSolidEdgePreferencePath (
        BSTR * lpSEPreferencePath );
    HRESULT SetSEECOptions (
        enum SEECOptions enumSEECDialog,
        unsigned long * dwValue );
    HRESULT GetBOMProperties (
        VARIANT * pvarMFKAttributes,
        _bstr_t bstrItemRevId,
        _bstr_t bstrItemType,
        _bstr_t bstrRevisionRule,
        long * NoOfComponents,
        VARIANT * FileOccProp );
    HRESULT PublishFamilyOfAssemblyMembers (
        VARIANT * pvarMFKAttrInfo,
        _bstr_t bstrItemRev,
        _bstr_t bstrDataSetFileName,
        _bstr_t bstrRevisionRule,
        _bstr_t bstrItemType,
        SAFEARRAY * * psaMemberInfo,
        VARIANT * pvarListOfWhereUsedDocuments );
    HRESULT GetFamilyOfAssemblyMembers (
        VARIANT * pvarMFKAttrInfo,
        _bstr_t bstrItemRev,
        _bstr_t bstrItemType,
        VARIANT * psaPublishedMemberInfo,
        VARIANT * psaUnpublishedMemberInfo );
    HRESULT GetWhereUsedInfoForPublishedFamilyOfAssembly (
        VARIANT * pvarMFKAttrInfo,
        _bstr_t bstrItemRev,
        _bstr_t bstrDataSetFileName,
        _bstr_t bstrRevisionRule,
        _bstr_t bstrItemType,
        VARIANT * pvarListOfWhereUsedDocuments );
    HRESULT GetWhereUsedInfo (
        VARIANT * pvarMFKAttrInfo,
        _bstr_t bstrItemRev,
        _bstr_t bstrItemType,
        _bstr_t bstrDataSetFileName,
        VARIANT * pvarListFilesWithMFKAttributes );
    HRESULT PublishMembersOfActiveFamilyOfAssemblyDocument (
        SAFEARRAY * * psaMemberInfo,
        VARIANT * pvarListOfWhereUsedDocuments );
    HRESULT GetWhereUsedInfoForPublishedActiveFamilyOfAssemblyDocument (
        VARIANT * pvarListOfWhereUsedDocuments );
    HRESULT GetFamilyOfAssemblyMembersOfActiveDocument (
        VARIANT * psaPublishedMemberInfo,
        VARIANT * psaUnpublishedMemberInfo );
    HRESULT GetTeamcenterDefaultItemTypePreference (
        _bstr_t bstrFilename,
        BSTR * bstrDefaultItemType );
    HRESULT CreateBOMAndRelations (
        VARIANT * pvarContainerInfo,
        SAFEARRAY * * psaComponentsInfo,
        VARIANT_BOOL bUploadFile,
        VARIANT_BOOL bCreatePreciseBOM,
        _bstr_t bstrRevRule,
        VARIANT_BOOL * bHasOverrideBody );
    HRESULT UploadModelViewsOfActiveAssemblyDocument ( );
    HRESULT ExtractTranslatedFiles (
        VARIANT * pvarMFKAttrInfo,
        _bstr_t bstrItemRev,
        _bstr_t bstrRevisionRule,
        _bstr_t bstrItemType,
        _bstr_t bstrEtractLocation,
        _bstr_t bstrDataSetFileName,
        unsigned long dwExpandSelectionOptions,
        VARIANT * pvarSEFiletypeFilters,
        VARIANT * pvarRelationFilters,
        VARIANT * pvarReferanceFilters,
        VARIANT * pvarExportFileextensions,
        VARIANT * pvarListOfFiles );
    HRESULT ExtractTranslatedFilesOfActiveDocument (
        _bstr_t bstrEtractLocation,
        unsigned long dwExpandSelectionOptions,
        VARIANT * pvarSEFiletypeFilters,
        VARIANT * pvarRelationFilters,
        VARIANT * pvarReferanceFilters,
        VARIANT * pvarExportFileextensions,
        VARIANT * pvarListOfFiles );
    HRESULT CloneDraftDocument (
        VARIANT_BOOL vbOpenCloneDocument );
    HRESULT GetMFKAttributesAndItemTypeForGivenFile (
        _bstr_t bstrFilename,
        BSTR * bstrItemType,
        VARIANT * pvarMFKAttributeValues );
    HRESULT SetPDMPropsAndUploadTranslatedFile (
        _bstr_t bstrOldFileName,
        VARIANT * pvarListOfPropsForFileSaveAs,
        BSTR * bstrNewFileName );
    HRESULT GetListOfFilesUnderItemRevision (
        VARIANT * pvarMFKAttrInfo,
        _bstr_t bstrItemRev,
        _bstr_t bstrItemType,
        VARIANT * pvarSEFileListUnderItemRev,
        VARIANT * pvarAllFileListUnderItemRev );
    HRESULT GetTCSaveAsTranslationMBDPrefValues (
        BSTR * bRelation,
        BSTR * bDatasetType,
        BSTR * bNamedReference,
        BSTR * bStringToAppend,
        VARIANT_BOOL * bIncludeRevName );
    HRESULT GetRequiredPDMProperties (
        _bstr_t bstrFilename,
        VARIANT * pvarProperties,
        VARIANT * pvarPropertiesWithValues );
    HRESULT GetActiveDocumentFilename (
        BSTR * bstrFilename,
        BSTR * bstrDisplayname,
        BSTR * bstrReservedname );
    HRESULT GetTeamcenterInformation (
        _bstr_t bstrFilename,
        VARIANT * psaTCInfo );
    HRESULT OnUndoCheckOutDocumentsEx (
        SAFEARRAY * * psaCacheFiles,
        VARIANT_BOOL bIgnoreFileModifiedStatus );
    HRESULT GetTCSaveAsTranslationPrefValues (
        _bstr_t bstrExportType,
        BSTR * bRelation,
        BSTR * bDatasetType,
        BSTR * bNamedReference,
        BSTR * bStringToAppend,
        VARIANT_BOOL * bIncludeRevName );
    HRESULT DownloadDocumentsFromServerWithOptionsUsingKeyPropertiesEx (
        VARIANT * pvarMFKAttrInfo,
        _bstr_t bstrItemRev,
        _bstr_t bstrDataSetFileName,
        _bstr_t bstrRevisionRule,
        _bstr_t bstrVariantRule,
        _bstr_t bstrItemType,
        VARIANT_BOOL vbReadOnly,
        VARIANT_BOOL vbAllLevel,
        unsigned long dwDownloadOption,
        SAFEARRAY * * pvarListOfFiles );
    HRESULT ValidateLogin_TCCS (
        _bstr_t bstrUserName,
        _bstr_t bstrPassword,
        _bstr_t bstrGroup,
        _bstr_t bstrUserRole,
        _bstr_t bstrDBUrl,
        _bstr_t bstrDBDesc );
    HRESULT GetTCSaveAsTranslationPrefValuesEx (
        _bstr_t bstrExportType,
        BSTR * bRelation,
        BSTR * bDatasetType,
        BSTR * bNamedReference,
        BSTR * bStringToAppend,
        BSTR * bAutomaticVsManualTranslation,
        VARIANT_BOOL * bIncludeRevName );
    HRESULT CheckInStdPartsToTeamcenter (
        SAFEARRAY * * ppsaFileList,
        VARIANT_BOOL bOnlyUpload );
};

enum DocumentDownloadLevel
{
    SEECDownloadAllLevel = 0,
    SEECDownloadFirstLevel = 1,
    SEECDownloadTopLevel = 2
};

enum SyncOption
{
    SEECSyncAll = 0,
    SEECSyncOne = 1
};

enum TCESETypes
{
    TCE_SEPart = 0,
    TCE_SEAssembly = 1,
    TCE_SEWeldment = 2,
    TCE_SESheetmetal = 3,
    TCE_SEDraft = 4
};

enum SEECOptions
{
    SEEC_eUnknownOption = 0,
    SEEC_SearchLimit = 1
};

struct __declspec(uuid("a082ac06-99a9-44aa-861a-b811509cd098"))
_ISolidEdgeTCEAuto : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT GetPDMCachePath (
        BSTR * bStrCachePath );
    HRESULT CheckInDocumentsToTeamCenterServer (
        SAFEARRAY * * ppsaFileList,
        VARIANT_BOOL bOnlyUpload );
    HRESULT CheckOutDocumentsFromTeamCenterServer (
        _bstr_t bstrDirctFileItemId,
        _bstr_t bstrDirctFileItemRevId,
        VARIANT_BOOL bOnlyDownload,
        _bstr_t bstrFilename,
        enum DocumentDownloadLevel enumDownloadLevel );
    HRESULT GetDocumentUID (
        _bstr_t bstrFilename,
        BSTR * bstrItemId,
        BSTR * bstrItemRev );
    HRESULT DoesTeamCenterFileExists (
        _bstr_t bstrItemId,
        _bstr_t bstrItemRev,
        VARIANT_BOOL * bFileExists );
    HRESULT GetTeamCenterMode (
        VARIANT_BOOL * bIsTeamCenterMode );
    HRESULT SetTeamCenterMode (
        VARIANT_BOOL bMode );
    HRESULT ValidateLogin (
        _bstr_t bstrUserName,
        _bstr_t bstrPassword,
        _bstr_t bstrGroup,
        _bstr_t bstrUserRole,
        _bstr_t bstrDBUrl );
    HRESULT AssignItemID (
        _bstr_t bstrItemType,
        BSTR * bstrItemId,
        BSTR * bstrItemRev );
    HRESULT PutItemTypeAsCustomProp (
        _bstr_t bstrFilename,
        _bstr_t bstrItemType );
    HRESULT GetDatasetNameFromCookie (
        _bstr_t bstrFilename,
        BSTR * bstrDatasetName );
    HRESULT DeleteFilesFromCache (
        SAFEARRAY * * psaCacheFiles );
    HRESULT ImportDocumentsToServer (
        long lnumberOfDocumentsFoldersToImport,
        SAFEARRAY * * psalistOfFilesFoldersToImport,
        _bstr_t bstrUserName,
        _bstr_t bstrPassword,
        _bstr_t bstrGroup,
        _bstr_t bstrUserRole,
        _bstr_t bstrDBUrl,
        VARIANT_BOOL bImportAsPrecise,
        VARIANT_BOOL bPerformOnlyDryRun,
        VARIANT_BOOL bDisplayAlert,
        VARIANT_BOOL bIsFromATP,
        VARIANT_BOOL bIsOverwrite,
        VARIANT_BOOL brestart,
        VARIANT_BOOL bLinkTraversal,
        VARIANT_BOOL bIncludeSubFolders,
        BSTR * bstrFolderUID );
    HRESULT OnUndoCheckOutDocuments (
        SAFEARRAY * * psaCacheFiles );
    HRESULT OnSynchronizeFile (
        SAFEARRAY * * psaSynchFiles,
        enum SyncOption enumSyncOption );
    HRESULT GetOutOfDateDocuments (
        VARIANT * pvarListOfOutOfDateDocuments );
    HRESULT GetUserLogMessages (
        VARIANT * pvarUserLogMessages );
    HRESULT SaveAsToTeamCenter (
        _bstr_t bstrItemId,
        _bstr_t bstrItemRev,
        _bstr_t bstrDataSetFileName,
        _bstr_t bstrRevisionRule,
        _bstr_t bstrFolderName,
        VARIANT * pvarListOldAndNewItemIDRevsFileNames );
    HRESULT ReviseToTeamCenter (
        _bstr_t bstrItemId,
        _bstr_t bstrItemRev,
        _bstr_t bstrDataSetFileName,
        _bstr_t bstrRevisionRule,
        _bstr_t bstrFolderName,
        VARIANT * pvarListOldAndNewItemIDRevsFileNames );
    HRESULT OnGetWhereUsedForAutomation (
        _bstr_t bstrItemId,
        _bstr_t bstrItemRev,
        _bstr_t bstrDataSetFileName,
        VARIANT * pvarListOfWhereUsedDocuments );
    HRESULT CreateNewProject (
        _bstr_t bstrProjectName );
    HRESULT DeleteProject (
        _bstr_t bstrProjectName );
    HRESULT DeleteAllProjects ( );
    HRESULT DownladDocumentsFromServerWithOptions (
        _bstr_t bstrItemId,
        _bstr_t bstrItemRev,
        _bstr_t bstrDataSetFileName,
        _bstr_t bstrRevisionRule,
        _bstr_t bstrVariantRule,
        VARIANT_BOOL vbReadOnly,
        VARIANT_BOOL vbAllLevel,
        unsigned long dwDownloadOption,
        SAFEARRAY * * pvarListOfFiles );
    HRESULT GetListOfIndirectFilesForGivenFile (
        _bstr_t bstrItemId,
        _bstr_t bstrItemRev,
        _bstr_t bstrDataSetFileName,
        _bstr_t bstrRevisionRule,
        _bstr_t bstrVariantRule,
        VARIANT * pvarListOfIndirectFiles );
    HRESULT GetMappedPropertiesForGivenFile (
        _bstr_t bstrItemId,
        _bstr_t bstrItemRev,
        _bstr_t bstrDataSetFileName,
        VARIANT * pvarListOfProperties );
    HRESULT GetListOfFilesFromTeamcenterServer (
        _bstr_t bstrDirctFileItemId,
        _bstr_t bstrDirctFileItemRevId,
        VARIANT * vFileNames,
        long * nFiles );
    HRESULT GetTALLogFileName (
        BSTR * bstrLogFileName );
    HRESULT ValidateTcObjectModel (
        _bstr_t bstrFilename,
        _bstr_t bstrOldItemID,
        _bstr_t bstrOldRev,
        VARIANT_BOOL * bIsTcModelCorrect,
        BSTR * bsrtCompResult,
        VARIANT * vRevisionRule,
        VARIANT * vValidateBOMOnly,
        long * nNoOfServerComponents );
    HRESULT GetBomStructure (
        _bstr_t bstrItemId,
        _bstr_t bstrItemRevId,
        _bstr_t bstrRevisionRule,
        VARIANT_BOOL bDeepList,
        long * NoOfComponents,
        VARIANT * ListOfItemRevIds,
        VARIANT * ListOfFileSpecs );
    HRESULT GetItemRevBasedOnSEType (
        enum TCESETypes nSEType,
        _bstr_t bstrUserName,
        VARIANT * ListOfItemRevIds );
    HRESULT GetItemTypesInfo (
        BSTR * pbstrXML,
        BSTR * pbstrDefaultItemType );
    HRESULT GetSmartCodes (
        VARIANT * pvarSmartCodesInfo );
    HRESULT UnGetSmartCodes (
        SAFEARRAY * * ppsaUnGetInfo );
    HRESULT CheckInDocumentsToTeamCenterServerEx (
        VARIANT * pvarFilesToBeCheckedInInfo,
        VARIANT * pvarArguments );
    HRESULT IsItemTypeSmartCodesConfigured (
        _bstr_t bstrItemType,
        VARIANT_BOOL * pvbIsSmartCodesConfigured );
    HRESULT GetSEECOrTCPreferenceValues (
        VARIANT * pvarPreferenceInfo );
    HRESULT UpdateStatusInformation (
        SAFEARRAY * * psaCacheFiles );
    HRESULT GetProjectsForLoggedInUSer (
        VARIANT * pvarListOfUserProjects,
        VARIANT * pvarListOfUserProjectUIDs );
    HRESULT GetProjectsForGivenItemIDs (
        VARIANT * pvarListOfItemIDsAndProjects );
    HRESULT AddOrRemoveItemsToOrFromProjects (
        VARIANT * pvarItemInfoToAddOrRemoveToProjects );
    HRESULT CheckBomStructure (
        _bstr_t bstrItemId,
        _bstr_t bstrItemRevId,
        _bstr_t bstrRevisionRule,
        VARIANT_BOOL * bIsDuplicateBOMLineExists,
        VARIANT * ListOfDupliacteObjIDs );
    HRESULT AutoAssign (
        VARIANT_BOOL vbAutoAssign );
    HRESULT GetMFKAttributesForGivenItemType (
        _bstr_t bstrItemType,
        VARIANT * pvMFKAttributes );
    HRESULT SetPDMProperties (
        _bstr_t bstrOldFileName,
        VARIANT * pvarListOfPropsForFileSaveAs,
        BSTR * bstrNewFileName );
    HRESULT GetCurrentUserName (
        BSTR * bStrCurrentUser );
    HRESULT GetDocumentUIDEx (
        _bstr_t bstrFilename,
        BSTR * bstrItemId,
        BSTR * bstrItemRev,
        BSTR * bstrItemUID,
        BSTR * bstrRevUID );
    HRESULT DoesTeamCenterFileExistsUsingKeyProperties (
        _bstr_t bstrItemType,
        VARIANT * pvarMFKAttrInfo,
        _bstr_t bstrItemRev,
        VARIANT_BOOL * bFileExists );
    HRESULT CheckOutDocumentsFromTeamCenterServerUsingKeyProperties (
        VARIANT * pvarMFKAttrInfo,
        _bstr_t bstrItemType,
        _bstr_t bstrDirctFileItemRevId,
        VARIANT_BOOL bOnlyDownload,
        _bstr_t bstrFilename,
        enum DocumentDownloadLevel enumDownloadLevel );
    HRESULT GetTeamcenterVersion (
        BSTR * bstrMajorVersion,
        BSTR * bstrCompleteVersion );
    HRESULT GetItemIDAndRevisionPatterns (
        _bstr_t bstrItemType,
        VARIANT * pvarItemIDPattern,
        VARIANT * pvarRevisionPattern );
    HRESULT AssignItemIDAndRevUsingPatterns (
        _bstr_t bstrItemType,
        _bstr_t bstrItemIDPattern,
        _bstr_t bstrRevisionPattern,
        BSTR * pItemIDPattern,
        BSTR * pRevisionPattern );
    HRESULT GetItemTypesInfoEx (
        _bstr_t bstrFilename,
        VARIANT * pvarItemTypeList );
    HRESULT MapMFKAttributtesToFileProperties (
        _bstr_t bstrFilename,
        SAFEARRAY * * psaMFKAttributes,
        VARIANT * pvarPropertyInfo );
    HRESULT GetListOfFilesFromTeamcenterServerUsingKeyProperties (
        VARIANT * pvarMFKAttrInfo,
        _bstr_t bstrDirctFileItemRevId,
        _bstr_t bstrItemType,
        VARIANT * vFileNames,
        long * nFiles );
    HRESULT GetBomStructureUsingKeyProperties (
        VARIANT * pvarMFKAttrInfo,
        _bstr_t bstrItemRevId,
        _bstr_t bstrItemType,
        _bstr_t bstrRevisionRule,
        VARIANT_BOOL bDeepList,
        long * NoOfComponents,
        VARIANT * ListOfItemRevIds,
        VARIANT * ListOfFileSpecs );
    HRESULT CheckBomStructureUsingKeyProperties (
        VARIANT * pvarMFKAttrInfo,
        _bstr_t bstrItemRevId,
        _bstr_t bstrItemType,
        _bstr_t bstrRevisionRule,
        VARIANT_BOOL * bIsDuplicateBOMLineExists,
        VARIANT * ListOfDupliacteObjIDs );
    HRESULT SaveAsToTeamCenterUsingKeyProperties (
        VARIANT * pvarMFKAttrInfo,
        _bstr_t bstrItemRev,
        _bstr_t bstrItemType,
        _bstr_t bstrDataSetFileName,
        _bstr_t bstrRevisionRule,
        _bstr_t bstrFolderName,
        VARIANT * pvarListOldAndNewItemIDRevsFileNames );
    HRESULT ReviseToTeamCenterUsingKeyProperties (
        VARIANT * pvarMFKAttrInfo,
        _bstr_t bstrItemRev,
        _bstr_t bstrItemType,
        _bstr_t bstrDataSetFileName,
        _bstr_t bstrRevisionRule,
        _bstr_t bstrFolderName,
        VARIANT * pvarListOldAndNewItemIDRevsFileNames );
    HRESULT GetListOfIndirectFilesForGivenFileUsingKeyProperties (
        VARIANT * pvarMFKAttrInfo,
        _bstr_t bstrItemRev,
        _bstr_t bstrItemType,
        _bstr_t bstrDataSetFileName,
        _bstr_t bstrRevisionRule,
        VARIANT * pvarListOfIndirectFiles );
    HRESULT GetMappedPropertiesForGivenFileUsingKeyProperties (
        VARIANT * pvarMFKAttrInfo,
        _bstr_t bstrItemRev,
        _bstr_t bstrItemType,
        _bstr_t bstrDataSetFileName,
        VARIANT * pvarListOfProperties );
    HRESULT ValidateTcObjectModelUsingKeyProperties (
        _bstr_t bstrFilename,
        VARIANT * pvarMFKAttrInfo,
        _bstr_t bstrItemType,
        _bstr_t bstrOldRev,
        VARIANT_BOOL * bIsTcModelCorrect,
        BSTR * bsrtCompResult,
        VARIANT * vRevisionRule,
        VARIANT * vValidateBOMOnly,
        long * nNoOfServerComponents );
    HRESULT OnGetWhereUsedForAutomationUsingKeyProperties (
        VARIANT * pvarMFKAttrInfo,
        _bstr_t bstrItemRev,
        _bstr_t bstrItemType,
        _bstr_t bstrDataSetFileName,
        VARIANT * pvarListOfWhereUsedDocuments );
    HRESULT DownloadDocumentsFromServerWithOptionsUsingKeyProperties (
        VARIANT * pvarMFKAttrInfo,
        _bstr_t bstrItemRev,
        _bstr_t bstrDataSetFileName,
        _bstr_t bstrRevisionRule,
        _bstr_t bstrItemType,
        VARIANT_BOOL vbReadOnly,
        VARIANT_BOOL vbAllLevel,
        unsigned long dwDownloadOption,
        SAFEARRAY * * pvarListOfFiles );
    HRESULT ValidateKeyProperties (
        VARIANT * pvarMFKAttrInfo,
        _bstr_t bstrRevID,
        _bstr_t bstrItemType,
        VARIANT * pvarListOfPropsVsStatus );
    HRESULT GetStorageNameForProperties (
        _bstr_t bstrFilename,
        VARIANT * pvarListOfPropInfo );
    HRESULT GetErrorMessages (
        VARIANT * pvarListOfErrorMsgs,
        VARIANT * pvarListOfWarningMsgs,
        VARIANT * pvarListOfInformationalMsgs );
    HRESULT GetAllRevisions (
        VARIANT * pvarMFKAttributes,
        _bstr_t bstrItemType,
        VARIANT * pvarRevisionList );
    HRESULT CreateZipOfCache (
        _bstr_t bstrSourceCachePath,
        _bstr_t bstrDestinationZipPath );
    HRESULT GetListOfWorkflows (
        VARIANT * pvarMFKAttributes,
        _bstr_t bstrItemType,
        _bstr_t bstrItemRev,
        VARIANT_BOOL bGetFiltered,
        VARIANT * pVarWorkflows );
    HRESULT ExecuteWorkflow (
        VARIANT * pvarMFKAttributes,
        _bstr_t bstrItemType,
        _bstr_t bstrItemRev,
        _bstr_t bstrprocessName,
        _bstr_t bstrProcessDesr,
        _bstr_t bstrTemplate,
        VARIANT * pVarOut );
    HRESULT GetActivePDMMode (
        unsigned long * activePDM );
    HRESULT GetSolidEdgePreferencePath (
        BSTR * lpSEPreferencePath );
    HRESULT SetSEECOptions (
        enum SEECOptions enumSEECDialog,
        unsigned long * dwValue );
    HRESULT GetBOMProperties (
        VARIANT * pvarMFKAttributes,
        _bstr_t bstrItemRevId,
        _bstr_t bstrItemType,
        _bstr_t bstrRevisionRule,
        long * NoOfComponents,
        VARIANT * FileOccProp );
    HRESULT PublishFamilyOfAssemblyMembers (
        VARIANT * pvarMFKAttrInfo,
        _bstr_t bstrItemRev,
        _bstr_t bstrDataSetFileName,
        _bstr_t bstrRevisionRule,
        _bstr_t bstrItemType,
        SAFEARRAY * * psaMemberInfo,
        VARIANT * pvarListOfWhereUsedDocuments );
    HRESULT GetFamilyOfAssemblyMembers (
        VARIANT * pvarMFKAttrInfo,
        _bstr_t bstrItemRev,
        _bstr_t bstrItemType,
        VARIANT * psaPublishedMemberInfo,
        VARIANT * psaUnpublishedMemberInfo );
    HRESULT GetWhereUsedInfoForPublishedFamilyOfAssembly (
        VARIANT * pvarMFKAttrInfo,
        _bstr_t bstrItemRev,
        _bstr_t bstrDataSetFileName,
        _bstr_t bstrRevisionRule,
        _bstr_t bstrItemType,
        VARIANT * pvarListOfWhereUsedDocuments );
    HRESULT GetWhereUsedInfo (
        VARIANT * pvarMFKAttrInfo,
        _bstr_t bstrItemRev,
        _bstr_t bstrItemType,
        _bstr_t bstrDataSetFileName,
        VARIANT * pvarListFilesWithMFKAttributes );
    HRESULT PublishMembersOfActiveFamilyOfAssemblyDocument (
        SAFEARRAY * * psaMemberInfo,
        VARIANT * pvarListOfWhereUsedDocuments );
    HRESULT GetWhereUsedInfoForPublishedActiveFamilyOfAssemblyDocument (
        VARIANT * pvarListOfWhereUsedDocuments );
    HRESULT GetFamilyOfAssemblyMembersOfActiveDocument (
        VARIANT * psaPublishedMemberInfo,
        VARIANT * psaUnpublishedMemberInfo );
    HRESULT GetTeamcenterDefaultItemTypePreference (
        _bstr_t bstrFilename,
        BSTR * bstrDefaultItemType );
    HRESULT CreateBOMAndRelations (
        VARIANT * pvarContainerInfo,
        SAFEARRAY * * psaComponentsInfo,
        VARIANT_BOOL bUploadFile,
        VARIANT_BOOL bCreatePreciseBOM,
        _bstr_t bstrRevRule,
        VARIANT_BOOL * bHasOverrideBody );
    HRESULT UploadModelViewsOfActiveAssemblyDocument ( );
    HRESULT ExtractTranslatedFiles (
        VARIANT * pvarMFKAttrInfo,
        _bstr_t bstrItemRev,
        _bstr_t bstrRevisionRule,
        _bstr_t bstrItemType,
        _bstr_t bstrEtractLocation,
        _bstr_t bstrDataSetFileName,
        unsigned long dwExpandSelectionOptions,
        VARIANT * pvarSEFiletypeFilters,
        VARIANT * pvarRelationFilters,
        VARIANT * pvarReferanceFilters,
        VARIANT * pvarExportFileextensions,
        VARIANT * pvarListOfFiles );
    HRESULT ExtractTranslatedFilesOfActiveDocument (
        _bstr_t bstrEtractLocation,
        unsigned long dwExpandSelectionOptions,
        VARIANT * pvarSEFiletypeFilters,
        VARIANT * pvarRelationFilters,
        VARIANT * pvarReferanceFilters,
        VARIANT * pvarExportFileextensions,
        VARIANT * pvarListOfFiles );
    HRESULT CloneDraftDocument (
        VARIANT_BOOL vbOpenCloneDocument );
    HRESULT GetMFKAttributesAndItemTypeForGivenFile (
        _bstr_t bstrFilename,
        BSTR * bstrItemType,
        VARIANT * pvarMFKAttributeValues );
    HRESULT SetPDMPropsAndUploadTranslatedFile (
        _bstr_t bstrOldFileName,
        VARIANT * pvarListOfPropsForFileSaveAs,
        BSTR * bstrNewFileName );
    HRESULT GetListOfFilesUnderItemRevision (
        VARIANT * pvarMFKAttrInfo,
        _bstr_t bstrItemRev,
        _bstr_t bstrItemType,
        VARIANT * pvarSEFileListUnderItemRev,
        VARIANT * pvarAllFileListUnderItemRev );
    HRESULT GetTCSaveAsTranslationMBDPrefValues (
        BSTR * bRelation,
        BSTR * bDatasetType,
        BSTR * bNamedReference,
        BSTR * bStringToAppend,
        VARIANT_BOOL * bIncludeRevName );
    HRESULT GetRequiredPDMProperties (
        _bstr_t bstrFilename,
        VARIANT * pvarProperties,
        VARIANT * pvarPropertiesWithValues );
    HRESULT GetActiveDocumentFilename (
        BSTR * bstrFilename,
        BSTR * bstrDisplayname,
        BSTR * bstrReservedname );
    HRESULT GetTeamcenterInformation (
        _bstr_t bstrFilename,
        VARIANT * psaTCInfo );
    HRESULT OnUndoCheckOutDocumentsEx (
        SAFEARRAY * * psaCacheFiles,
        VARIANT_BOOL bIgnoreFileModifiedStatus );
    HRESULT GetTCSaveAsTranslationPrefValues (
        _bstr_t bstrExportType,
        BSTR * bRelation,
        BSTR * bDatasetType,
        BSTR * bNamedReference,
        BSTR * bStringToAppend,
        VARIANT_BOOL * bIncludeRevName );
    HRESULT DownloadDocumentsFromServerWithOptionsUsingKeyPropertiesEx (
        VARIANT * pvarMFKAttrInfo,
        _bstr_t bstrItemRev,
        _bstr_t bstrDataSetFileName,
        _bstr_t bstrRevisionRule,
        _bstr_t bstrVariantRule,
        _bstr_t bstrItemType,
        VARIANT_BOOL vbReadOnly,
        VARIANT_BOOL vbAllLevel,
        unsigned long dwDownloadOption,
        SAFEARRAY * * pvarListOfFiles );
    HRESULT ValidateLogin_TCCS (
        _bstr_t bstrUserName,
        _bstr_t bstrPassword,
        _bstr_t bstrGroup,
        _bstr_t bstrUserRole,
        _bstr_t bstrDBUrl,
        _bstr_t bstrDBDesc );
    HRESULT GetTCSaveAsTranslationPrefValuesEx (
        _bstr_t bstrExportType,
        BSTR * bRelation,
        BSTR * bDatasetType,
        BSTR * bNamedReference,
        BSTR * bStringToAppend,
        BSTR * bAutomaticVsManualTranslation,
        VARIANT_BOOL * bIncludeRevName );
    HRESULT CheckInStdPartsToTeamcenter (
        SAFEARRAY * * ppsaFileList,
        VARIANT_BOOL bOnlyUpload );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetPDMCachePath (
        /*[out]*/ BSTR * bStrCachePath ) = 0;
      virtual HRESULT __stdcall raw_CheckInDocumentsToTeamCenterServer (
        /*[in]*/ SAFEARRAY * * ppsaFileList,
        /*[in]*/ VARIANT_BOOL bOnlyUpload ) = 0;
      virtual HRESULT __stdcall raw_CheckOutDocumentsFromTeamCenterServer (
        /*[in]*/ BSTR bstrDirctFileItemId,
        /*[in]*/ BSTR bstrDirctFileItemRevId,
        /*[in]*/ VARIANT_BOOL bOnlyDownload,
        /*[in]*/ BSTR bstrFilename,
        /*[in]*/ enum DocumentDownloadLevel enumDownloadLevel ) = 0;
      virtual int __stdcall IsTeamCenterFileCheckedOut (
        /*[in]*/ BSTR bstrFilename ) = 0;
      virtual HRESULT __stdcall raw_GetDocumentUID (
        /*[in]*/ BSTR bstrFilename,
        /*[out]*/ BSTR * bstrItemId,
        /*[out]*/ BSTR * bstrItemRev ) = 0;
      virtual HRESULT __stdcall raw_DoesTeamCenterFileExists (
        /*[in]*/ BSTR bstrItemId,
        /*[in]*/ BSTR bstrItemRev,
        /*[out]*/ VARIANT_BOOL * bFileExists ) = 0;
      virtual HRESULT __stdcall raw_GetTeamCenterMode (
        /*[out]*/ VARIANT_BOOL * bIsTeamCenterMode ) = 0;
      virtual HRESULT __stdcall raw_SetTeamCenterMode (
        /*[in]*/ VARIANT_BOOL bMode ) = 0;
      virtual HRESULT __stdcall raw_ValidateLogin (
        /*[in]*/ BSTR bstrUserName,
        /*[in]*/ BSTR bstrPassword,
        /*[in]*/ BSTR bstrGroup,
        /*[in]*/ BSTR bstrUserRole,
        /*[in]*/ BSTR bstrDBUrl ) = 0;
      virtual HRESULT __stdcall raw_AssignItemID (
        /*[in]*/ BSTR bstrItemType,
        /*[out]*/ BSTR * bstrItemId,
        /*[out]*/ BSTR * bstrItemRev ) = 0;
      virtual HRESULT __stdcall raw_PutItemTypeAsCustomProp (
        /*[in]*/ BSTR bstrFilename,
        /*[in]*/ BSTR bstrItemType ) = 0;
      virtual HRESULT __stdcall raw_GetDatasetNameFromCookie (
        /*[in]*/ BSTR bstrFilename,
        /*[out]*/ BSTR * bstrDatasetName ) = 0;
      virtual HRESULT __stdcall raw_DeleteFilesFromCache (
        /*[in]*/ SAFEARRAY * * psaCacheFiles ) = 0;
      virtual HRESULT __stdcall raw_ImportDocumentsToServer (
        /*[in]*/ long lnumberOfDocumentsFoldersToImport,
        /*[in]*/ SAFEARRAY * * psalistOfFilesFoldersToImport,
        /*[in]*/ BSTR bstrUserName,
        /*[in]*/ BSTR bstrPassword,
        /*[in]*/ BSTR bstrGroup,
        /*[in]*/ BSTR bstrUserRole,
        /*[in]*/ BSTR bstrDBUrl,
        /*[in]*/ VARIANT_BOOL bImportAsPrecise,
        /*[in]*/ VARIANT_BOOL bPerformOnlyDryRun,
        /*[in]*/ VARIANT_BOOL bDisplayAlert,
        /*[in]*/ VARIANT_BOOL bIsFromATP,
        /*[in]*/ VARIANT_BOOL bIsOverwrite,
        /*[in]*/ VARIANT_BOOL brestart,
        /*[in]*/ VARIANT_BOOL bLinkTraversal,
        /*[in]*/ VARIANT_BOOL bIncludeSubFolders,
        /*[in]*/ BSTR * bstrFolderUID ) = 0;
      virtual HRESULT __stdcall raw_OnUndoCheckOutDocuments (
        /*[in]*/ SAFEARRAY * * psaCacheFiles ) = 0;
      virtual HRESULT __stdcall raw_OnSynchronizeFile (
        /*[in]*/ SAFEARRAY * * psaSynchFiles,
        /*[in]*/ enum SyncOption enumSyncOption ) = 0;
      virtual HRESULT __stdcall raw_GetOutOfDateDocuments (
        /*[out]*/ VARIANT * pvarListOfOutOfDateDocuments ) = 0;
      virtual HRESULT __stdcall raw_GetUserLogMessages (
        /*[out]*/ VARIANT * pvarUserLogMessages ) = 0;
      virtual HRESULT __stdcall raw_SaveAsToTeamCenter (
        /*[in]*/ BSTR bstrItemId,
        /*[in]*/ BSTR bstrItemRev,
        /*[in]*/ BSTR bstrDataSetFileName,
        /*[in]*/ BSTR bstrRevisionRule,
        /*[in]*/ BSTR bstrFolderName,
        /*[out]*/ VARIANT * pvarListOldAndNewItemIDRevsFileNames ) = 0;
      virtual HRESULT __stdcall raw_ReviseToTeamCenter (
        /*[in]*/ BSTR bstrItemId,
        /*[in]*/ BSTR bstrItemRev,
        /*[in]*/ BSTR bstrDataSetFileName,
        /*[in]*/ BSTR bstrRevisionRule,
        /*[in]*/ BSTR bstrFolderName,
        /*[out]*/ VARIANT * pvarListOldAndNewItemIDRevsFileNames ) = 0;
      virtual HRESULT __stdcall raw_OnGetWhereUsedForAutomation (
        /*[in]*/ BSTR bstrItemId,
        /*[in]*/ BSTR bstrItemRev,
        /*[in]*/ BSTR bstrDataSetFileName,
        /*[out]*/ VARIANT * pvarListOfWhereUsedDocuments ) = 0;
      virtual HRESULT __stdcall raw_CreateNewProject (
        /*[in]*/ BSTR bstrProjectName ) = 0;
      virtual HRESULT __stdcall raw_DeleteProject (
        /*[in]*/ BSTR bstrProjectName ) = 0;
      virtual HRESULT __stdcall raw_DeleteAllProjects ( ) = 0;
      virtual HRESULT __stdcall raw_DownladDocumentsFromServerWithOptions (
        /*[in]*/ BSTR bstrItemId,
        /*[in]*/ BSTR bstrItemRev,
        /*[in]*/ BSTR bstrDataSetFileName,
        /*[in]*/ BSTR bstrRevisionRule,
        /*[in]*/ BSTR bstrVariantRule,
        /*[in]*/ VARIANT_BOOL vbReadOnly,
        /*[in]*/ VARIANT_BOOL vbAllLevel,
        /*[in]*/ unsigned long dwDownloadOption,
        /*[in]*/ SAFEARRAY * * pvarListOfFiles ) = 0;
      virtual HRESULT __stdcall raw_GetListOfIndirectFilesForGivenFile (
        /*[in]*/ BSTR bstrItemId,
        /*[in]*/ BSTR bstrItemRev,
        /*[in]*/ BSTR bstrDataSetFileName,
        /*[in]*/ BSTR bstrRevisionRule,
        /*[in]*/ BSTR bstrVariantRule,
        /*[out]*/ VARIANT * pvarListOfIndirectFiles ) = 0;
      virtual HRESULT __stdcall raw_GetMappedPropertiesForGivenFile (
        /*[in]*/ BSTR bstrItemId,
        /*[in]*/ BSTR bstrItemRev,
        /*[in]*/ BSTR bstrDataSetFileName,
        /*[out]*/ VARIANT * pvarListOfProperties ) = 0;
      virtual HRESULT __stdcall raw_GetListOfFilesFromTeamcenterServer (
        /*[in]*/ BSTR bstrDirctFileItemId,
        /*[in]*/ BSTR bstrDirctFileItemRevId,
        /*[out]*/ VARIANT * vFileNames,
        /*[out]*/ long * nFiles ) = 0;
      virtual HRESULT __stdcall raw_GetTALLogFileName (
        /*[out]*/ BSTR * bstrLogFileName ) = 0;
      virtual HRESULT __stdcall raw_ValidateTcObjectModel (
        /*[in]*/ BSTR bstrFilename,
        /*[in]*/ BSTR bstrOldItemID,
        /*[in]*/ BSTR bstrOldRev,
        /*[out]*/ VARIANT_BOOL * bIsTcModelCorrect,
        /*[out]*/ BSTR * bsrtCompResult,
        /*[in]*/ VARIANT * vRevisionRule,
        /*[in]*/ VARIANT * vValidateBOMOnly,
        /*[out]*/ long * nNoOfServerComponents ) = 0;
      virtual HRESULT __stdcall raw_GetBomStructure (
        /*[in]*/ BSTR bstrItemId,
        /*[in]*/ BSTR bstrItemRevId,
        /*[in]*/ BSTR bstrRevisionRule,
        /*[in]*/ VARIANT_BOOL bDeepList,
        /*[out]*/ long * NoOfComponents,
        /*[out]*/ VARIANT * ListOfItemRevIds,
        /*[out]*/ VARIANT * ListOfFileSpecs ) = 0;
      virtual HRESULT __stdcall raw_GetItemRevBasedOnSEType (
        /*[in]*/ enum TCESETypes nSEType,
        /*[in]*/ BSTR bstrUserName,
        /*[out]*/ VARIANT * ListOfItemRevIds ) = 0;
      virtual HRESULT __stdcall raw_GetItemTypesInfo (
        /*[out]*/ BSTR * pbstrXML,
        /*[out]*/ BSTR * pbstrDefaultItemType ) = 0;
      virtual HRESULT __stdcall raw_GetSmartCodes (
        /*[in,out]*/ VARIANT * pvarSmartCodesInfo ) = 0;
      virtual HRESULT __stdcall raw_UnGetSmartCodes (
        /*[in]*/ SAFEARRAY * * ppsaUnGetInfo ) = 0;
      virtual HRESULT __stdcall raw_CheckInDocumentsToTeamCenterServerEx (
        /*[in]*/ VARIANT * pvarFilesToBeCheckedInInfo,
        /*[in]*/ VARIANT * pvarArguments ) = 0;
      virtual HRESULT __stdcall raw_IsItemTypeSmartCodesConfigured (
        /*[in]*/ BSTR bstrItemType,
        VARIANT_BOOL * pvbIsSmartCodesConfigured ) = 0;
      virtual HRESULT __stdcall raw_GetSEECOrTCPreferenceValues (
        /*[in,out]*/ VARIANT * pvarPreferenceInfo ) = 0;
      virtual HRESULT __stdcall raw_UpdateStatusInformation (
        /*[in]*/ SAFEARRAY * * psaCacheFiles ) = 0;
      virtual HRESULT __stdcall raw_GetProjectsForLoggedInUSer (
        /*[out]*/ VARIANT * pvarListOfUserProjects,
        /*[out]*/ VARIANT * pvarListOfUserProjectUIDs ) = 0;
      virtual HRESULT __stdcall raw_GetProjectsForGivenItemIDs (
        /*[in,out]*/ VARIANT * pvarListOfItemIDsAndProjects ) = 0;
      virtual HRESULT __stdcall raw_AddOrRemoveItemsToOrFromProjects (
        /*[in]*/ VARIANT * pvarItemInfoToAddOrRemoveToProjects ) = 0;
      virtual HRESULT __stdcall raw_CheckBomStructure (
        /*[in]*/ BSTR bstrItemId,
        /*[in]*/ BSTR bstrItemRevId,
        /*[in]*/ BSTR bstrRevisionRule,
        /*[out]*/ VARIANT_BOOL * bIsDuplicateBOMLineExists,
        /*[out]*/ VARIANT * ListOfDupliacteObjIDs ) = 0;
      virtual HRESULT __stdcall raw_AutoAssign (
        /*[in]*/ VARIANT_BOOL vbAutoAssign ) = 0;
      virtual HRESULT __stdcall raw_GetMFKAttributesForGivenItemType (
        /*[in]*/ BSTR bstrItemType,
        /*[out]*/ VARIANT * pvMFKAttributes ) = 0;
      virtual HRESULT __stdcall raw_SetPDMProperties (
        /*[in]*/ BSTR bstrOldFileName,
        /*[in]*/ VARIANT * pvarListOfPropsForFileSaveAs,
        /*[out]*/ BSTR * bstrNewFileName ) = 0;
      virtual HRESULT __stdcall raw_GetCurrentUserName (
        /*[out]*/ BSTR * bStrCurrentUser ) = 0;
      virtual HRESULT __stdcall raw_GetDocumentUIDEx (
        /*[in]*/ BSTR bstrFilename,
        /*[out]*/ BSTR * bstrItemId,
        /*[out]*/ BSTR * bstrItemRev,
        /*[out]*/ BSTR * bstrItemUID,
        /*[out]*/ BSTR * bstrRevUID ) = 0;
      virtual HRESULT __stdcall raw_DoesTeamCenterFileExistsUsingKeyProperties (
        /*[in]*/ BSTR bstrItemType,
        /*[in]*/ VARIANT * pvarMFKAttrInfo,
        /*[in]*/ BSTR bstrItemRev,
        /*[out]*/ VARIANT_BOOL * bFileExists ) = 0;
      virtual HRESULT __stdcall raw_CheckOutDocumentsFromTeamCenterServerUsingKeyProperties (
        /*[in]*/ VARIANT * pvarMFKAttrInfo,
        /*[in]*/ BSTR bstrItemType,
        /*[in]*/ BSTR bstrDirctFileItemRevId,
        /*[in]*/ VARIANT_BOOL bOnlyDownload,
        /*[in]*/ BSTR bstrFilename,
        /*[in]*/ enum DocumentDownloadLevel enumDownloadLevel ) = 0;
      virtual HRESULT __stdcall raw_GetTeamcenterVersion (
        /*[out]*/ BSTR * bstrMajorVersion,
        /*[out]*/ BSTR * bstrCompleteVersion ) = 0;
      virtual HRESULT __stdcall raw_GetItemIDAndRevisionPatterns (
        /*[in]*/ BSTR bstrItemType,
        /*[out]*/ VARIANT * pvarItemIDPattern,
        /*[out]*/ VARIANT * pvarRevisionPattern ) = 0;
      virtual HRESULT __stdcall raw_AssignItemIDAndRevUsingPatterns (
        /*[in]*/ BSTR bstrItemType,
        /*[in]*/ BSTR bstrItemIDPattern,
        /*[in]*/ BSTR bstrRevisionPattern,
        /*[out]*/ BSTR * pItemIDPattern,
        /*[out]*/ BSTR * pRevisionPattern ) = 0;
      virtual HRESULT __stdcall raw_GetItemTypesInfoEx (
        /*[in]*/ BSTR bstrFilename,
        /*[out]*/ VARIANT * pvarItemTypeList ) = 0;
      virtual HRESULT __stdcall raw_MapMFKAttributtesToFileProperties (
        /*[in]*/ BSTR bstrFilename,
        /*[in]*/ SAFEARRAY * * psaMFKAttributes,
        /*[out]*/ VARIANT * pvarPropertyInfo ) = 0;
      virtual HRESULT __stdcall raw_GetListOfFilesFromTeamcenterServerUsingKeyProperties (
        /*[in]*/ VARIANT * pvarMFKAttrInfo,
        /*[in]*/ BSTR bstrDirctFileItemRevId,
        /*[in]*/ BSTR bstrItemType,
        /*[out]*/ VARIANT * vFileNames,
        /*[out]*/ long * nFiles ) = 0;
      virtual HRESULT __stdcall raw_GetBomStructureUsingKeyProperties (
        /*[in]*/ VARIANT * pvarMFKAttrInfo,
        /*[in]*/ BSTR bstrItemRevId,
        /*[in]*/ BSTR bstrItemType,
        /*[in]*/ BSTR bstrRevisionRule,
        /*[in]*/ VARIANT_BOOL bDeepList,
        /*[out]*/ long * NoOfComponents,
        /*[out]*/ VARIANT * ListOfItemRevIds,
        /*[out]*/ VARIANT * ListOfFileSpecs ) = 0;
      virtual HRESULT __stdcall raw_CheckBomStructureUsingKeyProperties (
        /*[in]*/ VARIANT * pvarMFKAttrInfo,
        /*[in]*/ BSTR bstrItemRevId,
        /*[in]*/ BSTR bstrItemType,
        /*[in]*/ BSTR bstrRevisionRule,
        /*[out]*/ VARIANT_BOOL * bIsDuplicateBOMLineExists,
        /*[out]*/ VARIANT * ListOfDupliacteObjIDs ) = 0;
      virtual HRESULT __stdcall raw_SaveAsToTeamCenterUsingKeyProperties (
        /*[in]*/ VARIANT * pvarMFKAttrInfo,
        /*[in]*/ BSTR bstrItemRev,
        /*[in]*/ BSTR bstrItemType,
        /*[in]*/ BSTR bstrDataSetFileName,
        /*[in]*/ BSTR bstrRevisionRule,
        /*[in]*/ BSTR bstrFolderName,
        /*[out]*/ VARIANT * pvarListOldAndNewItemIDRevsFileNames ) = 0;
      virtual HRESULT __stdcall raw_ReviseToTeamCenterUsingKeyProperties (
        /*[in]*/ VARIANT * pvarMFKAttrInfo,
        /*[in]*/ BSTR bstrItemRev,
        /*[in]*/ BSTR bstrItemType,
        /*[in]*/ BSTR bstrDataSetFileName,
        /*[in]*/ BSTR bstrRevisionRule,
        /*[in]*/ BSTR bstrFolderName,
        /*[out]*/ VARIANT * pvarListOldAndNewItemIDRevsFileNames ) = 0;
      virtual HRESULT __stdcall raw_GetListOfIndirectFilesForGivenFileUsingKeyProperties (
        /*[in]*/ VARIANT * pvarMFKAttrInfo,
        /*[in]*/ BSTR bstrItemRev,
        /*[in]*/ BSTR bstrItemType,
        /*[in]*/ BSTR bstrDataSetFileName,
        /*[in]*/ BSTR bstrRevisionRule,
        /*[out]*/ VARIANT * pvarListOfIndirectFiles ) = 0;
      virtual HRESULT __stdcall raw_GetMappedPropertiesForGivenFileUsingKeyProperties (
        /*[in]*/ VARIANT * pvarMFKAttrInfo,
        /*[in]*/ BSTR bstrItemRev,
        /*[in]*/ BSTR bstrItemType,
        /*[in]*/ BSTR bstrDataSetFileName,
        /*[out]*/ VARIANT * pvarListOfProperties ) = 0;
      virtual HRESULT __stdcall raw_ValidateTcObjectModelUsingKeyProperties (
        /*[in]*/ BSTR bstrFilename,
        /*[in]*/ VARIANT * pvarMFKAttrInfo,
        /*[in]*/ BSTR bstrItemType,
        /*[in]*/ BSTR bstrOldRev,
        /*[out]*/ VARIANT_BOOL * bIsTcModelCorrect,
        /*[out]*/ BSTR * bsrtCompResult,
        /*[in]*/ VARIANT * vRevisionRule,
        /*[in]*/ VARIANT * vValidateBOMOnly,
        /*[out]*/ long * nNoOfServerComponents ) = 0;
      virtual HRESULT __stdcall raw_OnGetWhereUsedForAutomationUsingKeyProperties (
        /*[in]*/ VARIANT * pvarMFKAttrInfo,
        /*[in]*/ BSTR bstrItemRev,
        /*[in]*/ BSTR bstrItemType,
        /*[in]*/ BSTR bstrDataSetFileName,
        /*[out]*/ VARIANT * pvarListOfWhereUsedDocuments ) = 0;
      virtual HRESULT __stdcall raw_DownloadDocumentsFromServerWithOptionsUsingKeyProperties (
        /*[in]*/ VARIANT * pvarMFKAttrInfo,
        /*[in]*/ BSTR bstrItemRev,
        /*[in]*/ BSTR bstrDataSetFileName,
        /*[in]*/ BSTR bstrRevisionRule,
        /*[in]*/ BSTR bstrItemType,
        /*[in]*/ VARIANT_BOOL vbReadOnly,
        /*[in]*/ VARIANT_BOOL vbAllLevel,
        /*[in]*/ unsigned long dwDownloadOption,
        /*[in]*/ SAFEARRAY * * pvarListOfFiles ) = 0;
      virtual HRESULT __stdcall raw_ValidateKeyProperties (
        /*[in]*/ VARIANT * pvarMFKAttrInfo,
        /*[in]*/ BSTR bstrRevID,
        /*[in]*/ BSTR bstrItemType,
        /*[out]*/ VARIANT * pvarListOfPropsVsStatus ) = 0;
      virtual HRESULT __stdcall raw_GetStorageNameForProperties (
        /*[in]*/ BSTR bstrFilename,
        /*[out]*/ VARIANT * pvarListOfPropInfo ) = 0;
      virtual HRESULT __stdcall raw_GetErrorMessages (
        /*[out]*/ VARIANT * pvarListOfErrorMsgs,
        /*[out]*/ VARIANT * pvarListOfWarningMsgs,
        /*[out]*/ VARIANT * pvarListOfInformationalMsgs ) = 0;
      virtual HRESULT __stdcall raw_GetAllRevisions (
        /*[in]*/ VARIANT * pvarMFKAttributes,
        /*[in]*/ BSTR bstrItemType,
        /*[out]*/ VARIANT * pvarRevisionList ) = 0;
      virtual HRESULT __stdcall raw_CreateZipOfCache (
        /*[in]*/ BSTR bstrSourceCachePath,
        /*[in]*/ BSTR bstrDestinationZipPath ) = 0;
      virtual HRESULT __stdcall raw_GetListOfWorkflows (
        /*[in]*/ VARIANT * pvarMFKAttributes,
        /*[in]*/ BSTR bstrItemType,
        /*[in]*/ BSTR bstrItemRev,
        /*[in]*/ VARIANT_BOOL bGetFiltered,
        /*[out]*/ VARIANT * pVarWorkflows ) = 0;
      virtual HRESULT __stdcall raw_ExecuteWorkflow (
        /*[in]*/ VARIANT * pvarMFKAttributes,
        /*[in]*/ BSTR bstrItemType,
        /*[in]*/ BSTR bstrItemRev,
        /*[in]*/ BSTR bstrprocessName,
        /*[in]*/ BSTR bstrProcessDesr,
        /*[in]*/ BSTR bstrTemplate,
        /*[out]*/ VARIANT * pVarOut ) = 0;
      virtual HRESULT __stdcall raw_GetActivePDMMode (
        /*[out]*/ unsigned long * activePDM ) = 0;
      virtual HRESULT __stdcall raw_GetSolidEdgePreferencePath (
        /*[out]*/ BSTR * lpSEPreferencePath ) = 0;
      virtual HRESULT __stdcall raw_SetSEECOptions (
        /*[in]*/ enum SEECOptions enumSEECDialog,
        /*[in]*/ unsigned long * dwValue ) = 0;
      virtual HRESULT __stdcall raw_GetBOMProperties (
        /*[in]*/ VARIANT * pvarMFKAttributes,
        /*[in]*/ BSTR bstrItemRevId,
        /*[in]*/ BSTR bstrItemType,
        /*[in]*/ BSTR bstrRevisionRule,
        /*[out]*/ long * NoOfComponents,
        /*[out]*/ VARIANT * FileOccProp ) = 0;
      virtual HRESULT __stdcall raw_PublishFamilyOfAssemblyMembers (
        /*[in]*/ VARIANT * pvarMFKAttrInfo,
        /*[in]*/ BSTR bstrItemRev,
        /*[in]*/ BSTR bstrDataSetFileName,
        /*[in]*/ BSTR bstrRevisionRule,
        /*[in]*/ BSTR bstrItemType,
        /*[in]*/ SAFEARRAY * * psaMemberInfo,
        /*[out]*/ VARIANT * pvarListOfWhereUsedDocuments ) = 0;
      virtual HRESULT __stdcall raw_GetFamilyOfAssemblyMembers (
        /*[in]*/ VARIANT * pvarMFKAttrInfo,
        /*[in]*/ BSTR bstrItemRev,
        /*[in]*/ BSTR bstrItemType,
        /*[out]*/ VARIANT * psaPublishedMemberInfo,
        /*[out]*/ VARIANT * psaUnpublishedMemberInfo ) = 0;
      virtual HRESULT __stdcall raw_GetWhereUsedInfoForPublishedFamilyOfAssembly (
        /*[in]*/ VARIANT * pvarMFKAttrInfo,
        /*[in]*/ BSTR bstrItemRev,
        /*[in]*/ BSTR bstrDataSetFileName,
        /*[in]*/ BSTR bstrRevisionRule,
        /*[in]*/ BSTR bstrItemType,
        /*[out]*/ VARIANT * pvarListOfWhereUsedDocuments ) = 0;
      virtual HRESULT __stdcall raw_GetWhereUsedInfo (
        /*[in]*/ VARIANT * pvarMFKAttrInfo,
        /*[in]*/ BSTR bstrItemRev,
        /*[in]*/ BSTR bstrItemType,
        /*[in]*/ BSTR bstrDataSetFileName,
        /*[out]*/ VARIANT * pvarListFilesWithMFKAttributes ) = 0;
      virtual HRESULT __stdcall raw_PublishMembersOfActiveFamilyOfAssemblyDocument (
        /*[in]*/ SAFEARRAY * * psaMemberInfo,
        /*[out]*/ VARIANT * pvarListOfWhereUsedDocuments ) = 0;
      virtual HRESULT __stdcall raw_GetWhereUsedInfoForPublishedActiveFamilyOfAssemblyDocument (
        /*[out]*/ VARIANT * pvarListOfWhereUsedDocuments ) = 0;
      virtual HRESULT __stdcall raw_GetFamilyOfAssemblyMembersOfActiveDocument (
        /*[out]*/ VARIANT * psaPublishedMemberInfo,
        /*[out]*/ VARIANT * psaUnpublishedMemberInfo ) = 0;
      virtual HRESULT __stdcall raw_GetTeamcenterDefaultItemTypePreference (
        /*[in]*/ BSTR bstrFilename,
        /*[out]*/ BSTR * bstrDefaultItemType ) = 0;
      virtual HRESULT __stdcall raw_CreateBOMAndRelations (
        /*[in]*/ VARIANT * pvarContainerInfo,
        /*[in]*/ SAFEARRAY * * psaComponentsInfo,
        /*[in]*/ VARIANT_BOOL bUploadFile,
        /*[in]*/ VARIANT_BOOL bCreatePreciseBOM,
        /*[in]*/ BSTR bstrRevRule,
        /*[out]*/ VARIANT_BOOL * bHasOverrideBody ) = 0;
      virtual HRESULT __stdcall raw_UploadModelViewsOfActiveAssemblyDocument ( ) = 0;
      virtual HRESULT __stdcall raw_ExtractTranslatedFiles (
        /*[in]*/ VARIANT * pvarMFKAttrInfo,
        /*[in]*/ BSTR bstrItemRev,
        /*[in]*/ BSTR bstrRevisionRule,
        /*[in]*/ BSTR bstrItemType,
        /*[in]*/ BSTR bstrEtractLocation,
        /*[in]*/ BSTR bstrDataSetFileName,
        /*[in]*/ unsigned long dwExpandSelectionOptions,
        /*[in]*/ VARIANT * pvarSEFiletypeFilters,
        /*[in]*/ VARIANT * pvarRelationFilters,
        /*[in]*/ VARIANT * pvarReferanceFilters,
        /*[in]*/ VARIANT * pvarExportFileextensions,
        /*[out]*/ VARIANT * pvarListOfFiles ) = 0;
      virtual HRESULT __stdcall raw_ExtractTranslatedFilesOfActiveDocument (
        /*[in]*/ BSTR bstrEtractLocation,
        /*[in]*/ unsigned long dwExpandSelectionOptions,
        /*[in]*/ VARIANT * pvarSEFiletypeFilters,
        /*[in]*/ VARIANT * pvarRelationFilters,
        /*[in]*/ VARIANT * pvarReferanceFilters,
        /*[in]*/ VARIANT * pvarExportFileextensions,
        /*[out]*/ VARIANT * pvarListOfFiles ) = 0;
      virtual HRESULT __stdcall raw_CloneDraftDocument (
        /*[in]*/ VARIANT_BOOL vbOpenCloneDocument ) = 0;
      virtual HRESULT __stdcall raw_GetMFKAttributesAndItemTypeForGivenFile (
        /*[in]*/ BSTR bstrFilename,
        /*[out]*/ BSTR * bstrItemType,
        /*[out]*/ VARIANT * pvarMFKAttributeValues ) = 0;
      virtual HRESULT __stdcall raw_SetPDMPropsAndUploadTranslatedFile (
        /*[in]*/ BSTR bstrOldFileName,
        /*[in]*/ VARIANT * pvarListOfPropsForFileSaveAs,
        /*[in,out]*/ BSTR * bstrNewFileName ) = 0;
      virtual HRESULT __stdcall raw_GetListOfFilesUnderItemRevision (
        /*[in]*/ VARIANT * pvarMFKAttrInfo,
        /*[in]*/ BSTR bstrItemRev,
        /*[in]*/ BSTR bstrItemType,
        /*[out]*/ VARIANT * pvarSEFileListUnderItemRev,
        /*[out]*/ VARIANT * pvarAllFileListUnderItemRev ) = 0;
      virtual HRESULT __stdcall raw_GetTCSaveAsTranslationMBDPrefValues (
        /*[out]*/ BSTR * bRelation,
        /*[out]*/ BSTR * bDatasetType,
        /*[out]*/ BSTR * bNamedReference,
        /*[out]*/ BSTR * bStringToAppend,
        /*[out]*/ VARIANT_BOOL * bIncludeRevName ) = 0;
      virtual HRESULT __stdcall raw_GetRequiredPDMProperties (
        /*[in]*/ BSTR bstrFilename,
        /*[in]*/ VARIANT * pvarProperties,
        /*[out]*/ VARIANT * pvarPropertiesWithValues ) = 0;
      virtual HRESULT __stdcall raw_GetActiveDocumentFilename (
        /*[out]*/ BSTR * bstrFilename,
        /*[out]*/ BSTR * bstrDisplayname,
        /*[out]*/ BSTR * bstrReservedname ) = 0;
      virtual HRESULT __stdcall raw_GetTeamcenterInformation (
        /*[in]*/ BSTR bstrFilename,
        /*[out]*/ VARIANT * psaTCInfo ) = 0;
      virtual HRESULT __stdcall raw_OnUndoCheckOutDocumentsEx (
        /*[in]*/ SAFEARRAY * * psaCacheFiles,
        /*[in]*/ VARIANT_BOOL bIgnoreFileModifiedStatus ) = 0;
      virtual HRESULT __stdcall raw_GetTCSaveAsTranslationPrefValues (
        /*[in]*/ BSTR bstrExportType,
        /*[out]*/ BSTR * bRelation,
        /*[out]*/ BSTR * bDatasetType,
        /*[out]*/ BSTR * bNamedReference,
        /*[out]*/ BSTR * bStringToAppend,
        /*[out]*/ VARIANT_BOOL * bIncludeRevName ) = 0;
      virtual HRESULT __stdcall raw_DownloadDocumentsFromServerWithOptionsUsingKeyPropertiesEx (
        /*[in]*/ VARIANT * pvarMFKAttrInfo,
        /*[in]*/ BSTR bstrItemRev,
        /*[in]*/ BSTR bstrDataSetFileName,
        /*[in]*/ BSTR bstrRevisionRule,
        /*[in]*/ BSTR bstrVariantRule,
        /*[in]*/ BSTR bstrItemType,
        /*[in]*/ VARIANT_BOOL vbReadOnly,
        /*[in]*/ VARIANT_BOOL vbAllLevel,
        /*[in]*/ unsigned long dwDownloadOption,
        /*[in]*/ SAFEARRAY * * pvarListOfFiles ) = 0;
      virtual HRESULT __stdcall raw_ValidateLogin_TCCS (
        /*[in]*/ BSTR bstrUserName,
        /*[in]*/ BSTR bstrPassword,
        /*[in]*/ BSTR bstrGroup,
        /*[in]*/ BSTR bstrUserRole,
        /*[in]*/ BSTR bstrDBUrl,
        /*[in]*/ BSTR bstrDBDesc ) = 0;
      virtual HRESULT __stdcall raw_GetTCSaveAsTranslationPrefValuesEx (
        /*[in]*/ BSTR bstrExportType,
        /*[out]*/ BSTR * bRelation,
        /*[out]*/ BSTR * bDatasetType,
        /*[out]*/ BSTR * bNamedReference,
        /*[out]*/ BSTR * bStringToAppend,
        /*[out]*/ BSTR * bAutomaticVsManualTranslation,
        /*[out]*/ VARIANT_BOOL * bIncludeRevName ) = 0;
      virtual HRESULT __stdcall raw_CheckInStdPartsToTeamcenter (
        /*[in]*/ SAFEARRAY * * ppsaFileList,
        /*[in]*/ VARIANT_BOOL bOnlyUpload ) = 0;
};

struct __declspec(uuid("51d3fe4d-98aa-4cab-9070-1dde81e801f9"))
SolidEdgeInsightXT : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT GetPDMCachePath (
        BSTR * bStrCachePath );
    HRESULT CheckInDocumentsToInsightXTServer (
        SAFEARRAY * * ppsaFileList,
        VARIANT_BOOL bOnlyUpload,
        _bstr_t bstrUrl );
    HRESULT CheckOutDocumentsFromInsightXTServer (
        _bstr_t bstrDirctFileItemId,
        _bstr_t bstrDirctFileItemRevId,
        VARIANT_BOOL bOnlyDownload,
        _bstr_t bstrFilename,
        enum DocumentDownloadLevel enumDownloadLevel );
    int IsInsightXTFileCheckedOut (
        _bstr_t bstrFilename );
    HRESULT GetDocumentUID (
        _bstr_t bstrFilename,
        BSTR * bstrItemId,
        BSTR * bstrItemRev );
    HRESULT DoesInsightXTFileExists (
        _bstr_t bstrItemId,
        _bstr_t bstrItemRev,
        VARIANT_BOOL * bFileExists );
    HRESULT GetInsightXTMode (
        VARIANT_BOOL * bIsInsightXTMode );
    HRESULT SetInsightXTMode (
        VARIANT_BOOL bMode );
    HRESULT ValidateLogin (
        _bstr_t bstrUserName,
        _bstr_t bstrPassword,
        _bstr_t bstrGroup,
        _bstr_t bstrUserRole,
        _bstr_t bstrDBUrl );
    HRESULT AssignItemID (
        _bstr_t bstrItemType,
        BSTR * bstrItemId,
        BSTR * bstrItemRev );
    HRESULT SESP_GetItemAndRevisionNo (
        _bstr_t bstrItemContentType,
        _bstr_t bstrItemRevContentType,
        BSTR * bstrPartno,
        BSTR * bstrPartRevno );
    HRESULT PutItemTypeAsCustomProp (
        _bstr_t bstrFilename,
        _bstr_t bstrItemType );
    HRESULT GetDatasetNameFromCookie (
        _bstr_t bstrFilename,
        BSTR * bstrDatasetName );
    HRESULT DeleteFilesFromCache (
        SAFEARRAY * * psaCacheFiles );
    HRESULT ImportDocumentsToServer (
        long lnumberOfDocumentsFoldersToImport,
        SAFEARRAY * * psalistOfFilesFoldersToImport,
        _bstr_t bstrUserName,
        _bstr_t bstrPassword,
        _bstr_t bstrGroup,
        _bstr_t bstrUserRole,
        _bstr_t bstrDBUrl,
        VARIANT_BOOL bImportAsPrecise,
        VARIANT_BOOL bPerformOnlyDryRun,
        VARIANT_BOOL bDisplayAlert,
        VARIANT_BOOL bIsFromATP,
        VARIANT_BOOL bIsOverwrite,
        VARIANT_BOOL brestart,
        VARIANT_BOOL bLinkTraversal,
        VARIANT_BOOL bIncludeSubFolders,
        BSTR * bstrFolderUID );
    HRESULT OnUndoCheckOutDocuments (
        SAFEARRAY * * psaCacheFiles );
    HRESULT OnSynchronizeFile (
        SAFEARRAY * * psaSynchFiles,
        enum SyncOption enumSyncOption );
    HRESULT GetOutOfDateDocuments (
        VARIANT * pvarListOfOutOfDateDocuments );
    HRESULT GetUserLogMessages (
        VARIANT * pvarUserLogMessages );
    HRESULT SaveAsToInsightXT (
        _bstr_t bstrItemId,
        _bstr_t bstrItemRev,
        _bstr_t bstrDataSetFileName,
        _bstr_t bstrRevisionRule,
        _bstr_t bstrFolderName,
        VARIANT * pvarListOldAndNewItemIDRevsFileNames );
    HRESULT ReviseToInsightXT (
        _bstr_t bstrItemId,
        _bstr_t bstrItemRev,
        _bstr_t bstrDataSetFileName,
        _bstr_t bstrRevisionRule,
        _bstr_t bstrFolderName,
        VARIANT * pvarListOldAndNewItemIDRevsFileNames );
    HRESULT OnGetWhereUsedForAutomation (
        _bstr_t bstrItemId,
        _bstr_t bstrItemRev,
        _bstr_t bstrDataSetFileName,
        VARIANT * pvarListOfWhereUsedDocuments );
    HRESULT CreateNewProject (
        _bstr_t bstrProjectName );
    HRESULT DeleteProject (
        _bstr_t bstrProjectName );
    HRESULT DeleteAllProjects ( );
    HRESULT DownladDocumentsFromServerWithOptions (
        _bstr_t bstrItemId,
        _bstr_t bstrItemRev,
        _bstr_t bstrDataSetFileName,
        _bstr_t bstrRevisionRule,
        _bstr_t bstrVariantRule,
        VARIANT_BOOL vbReadOnly,
        VARIANT_BOOL vbAllLevel,
        unsigned long dwDownloadOption,
        SAFEARRAY * * pvarListOfFiles );
    HRESULT GetListOfIndirectFilesForGivenFile (
        _bstr_t bstrItemId,
        _bstr_t bstrItemRev,
        _bstr_t bstrDataSetFileName,
        _bstr_t bstrRevisionRule,
        _bstr_t bstrVariantRule,
        VARIANT * pvarListOfIndirectFiles );
    HRESULT GetMappedPropertiesForGivenFile (
        _bstr_t bstrItemId,
        _bstr_t bstrItemRev,
        _bstr_t bstrDataSetFileName,
        VARIANT * pvarListOfProperties );
    HRESULT GetListOfFilesFromInsightXTServer (
        _bstr_t bstrDirctFileItemId,
        _bstr_t bstrDirctFileItemRevId,
        VARIANT * vFileNames,
        long * nFiles );
    HRESULT GetTALLogFileName (
        BSTR * bstrLogFileName );
    HRESULT ValidateTcObjectModel (
        _bstr_t bstrFilename,
        _bstr_t bstrOldItemID,
        _bstr_t bstrOldRev,
        VARIANT_BOOL * bIsTcModelCorrect,
        BSTR * bsrtCompResult,
        VARIANT * vRevisionRule,
        VARIANT * vValidateBOMOnly,
        long * nNoOfServerComponents );
    HRESULT GetBomStructure (
        _bstr_t bstrItemId,
        _bstr_t bstrItemRevId,
        _bstr_t bstrRevisionRule,
        VARIANT_BOOL bDeepList,
        long * NoOfComponents,
        VARIANT * ListOfItemRevIds,
        VARIANT * ListOfFileSpecs );
    HRESULT GetItemRevBasedOnSEType (
        enum TCESETypes nSEType,
        _bstr_t bstrUserName,
        VARIANT * ListOfItemRevIds );
    HRESULT GetItemTypesInfo (
        BSTR * pbstrXML,
        BSTR * pbstrDefaultItemType );
    HRESULT GetSmartCodes (
        VARIANT * pvarSmartCodesInfo );
    HRESULT UnGetSmartCodes (
        SAFEARRAY * * ppsaUnGetInfo );
    HRESULT CheckInDocumentsToInsightXTServerEx (
        VARIANT * pvarFilesToBeCheckedInInfo,
        VARIANT * pvarArguments );
    HRESULT IsItemTypeSmartCodesConfigured (
        _bstr_t bstrItemType,
        VARIANT_BOOL * pvbIsSmartCodesConfigured );
    HRESULT GetInsightXTOrTCPreferenceValues (
        VARIANT * pvarPreferenceInfo );
    HRESULT UpdateStatusInformation (
        SAFEARRAY * * psaCacheFiles );
    HRESULT GetProjectsForLoggedInUSer (
        VARIANT * pvarListOfUserProjects,
        VARIANT * pvarListOfUserProjectUIDs );
    HRESULT GetProjectsForGivenItemIDs (
        VARIANT * pvarListOfItemIDsAndProjects );
    HRESULT AddOrRemoveItemsToOrFromProjects (
        VARIANT * pvarItemInfoToAddOrRemoveToProjects );
    HRESULT CheckBomStructure (
        _bstr_t bstrItemId,
        _bstr_t bstrItemRevId,
        _bstr_t bstrRevisionRule,
        VARIANT_BOOL * bIsDuplicateBOMLineExists,
        VARIANT * ListOfDupliacteObjIDs );
    HRESULT GetItemContentTypesSupportingRevisioning (
        VARIANT * pvarListOfContentTypes );
    HRESULT ProcessUpdateDrawing (
        VARIANT_BOOL * bTerminateProcess );
    HRESULT SESPUpdateWFCallouts (
        VARIANT * plistItemAndRevId,
        VARIANT * pListOldAndNewPropName,
        VARIANT * ListOfFailedDrafts,
        VARIANT_BOOL * bTerminateProcess );
    HRESULT SESPGetActiveUrl (
        VARIANT * activeUrl );
    HRESULT IsInsightXTLicenseAvailable (
        VARIANT_BOOL * bIsInsightXTLicenseAvailable );
    HRESULT PutContentTypeIntoStorage (
        _bstr_t bstrFilename,
        _bstr_t bstrItemType,
        _bstr_t bItemRevType,
        _bstr_t bContentType );
};

struct __declspec(uuid("1e06567b-81ed-4133-85b1-e9bc336db6e2"))
_ISolidEdgeInsightXTAuto : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT GetPDMCachePath (
        BSTR * bStrCachePath );
    HRESULT CheckInDocumentsToInsightXTServer (
        SAFEARRAY * * ppsaFileList,
        VARIANT_BOOL bOnlyUpload,
        _bstr_t bstrUrl );
    HRESULT CheckOutDocumentsFromInsightXTServer (
        _bstr_t bstrDirctFileItemId,
        _bstr_t bstrDirctFileItemRevId,
        VARIANT_BOOL bOnlyDownload,
        _bstr_t bstrFilename,
        enum DocumentDownloadLevel enumDownloadLevel );
    HRESULT GetDocumentUID (
        _bstr_t bstrFilename,
        BSTR * bstrItemId,
        BSTR * bstrItemRev );
    HRESULT DoesInsightXTFileExists (
        _bstr_t bstrItemId,
        _bstr_t bstrItemRev,
        VARIANT_BOOL * bFileExists );
    HRESULT GetInsightXTMode (
        VARIANT_BOOL * bIsInsightXTMode );
    HRESULT SetInsightXTMode (
        VARIANT_BOOL bMode );
    HRESULT ValidateLogin (
        _bstr_t bstrUserName,
        _bstr_t bstrPassword,
        _bstr_t bstrGroup,
        _bstr_t bstrUserRole,
        _bstr_t bstrDBUrl );
    HRESULT AssignItemID (
        _bstr_t bstrItemType,
        BSTR * bstrItemId,
        BSTR * bstrItemRev );
    HRESULT SESP_GetItemAndRevisionNo (
        _bstr_t bstrItemContentType,
        _bstr_t bstrItemRevContentType,
        BSTR * bstrPartno,
        BSTR * bstrPartRevno );
    HRESULT PutItemTypeAsCustomProp (
        _bstr_t bstrFilename,
        _bstr_t bstrItemType );
    HRESULT GetDatasetNameFromCookie (
        _bstr_t bstrFilename,
        BSTR * bstrDatasetName );
    HRESULT DeleteFilesFromCache (
        SAFEARRAY * * psaCacheFiles );
    HRESULT ImportDocumentsToServer (
        long lnumberOfDocumentsFoldersToImport,
        SAFEARRAY * * psalistOfFilesFoldersToImport,
        _bstr_t bstrUserName,
        _bstr_t bstrPassword,
        _bstr_t bstrGroup,
        _bstr_t bstrUserRole,
        _bstr_t bstrDBUrl,
        VARIANT_BOOL bImportAsPrecise,
        VARIANT_BOOL bPerformOnlyDryRun,
        VARIANT_BOOL bDisplayAlert,
        VARIANT_BOOL bIsFromATP,
        VARIANT_BOOL bIsOverwrite,
        VARIANT_BOOL brestart,
        VARIANT_BOOL bLinkTraversal,
        VARIANT_BOOL bIncludeSubFolders,
        BSTR * bstrFolderUID );
    HRESULT OnUndoCheckOutDocuments (
        SAFEARRAY * * psaCacheFiles );
    HRESULT OnSynchronizeFile (
        SAFEARRAY * * psaSynchFiles,
        enum SyncOption enumSyncOption );
    HRESULT GetOutOfDateDocuments (
        VARIANT * pvarListOfOutOfDateDocuments );
    HRESULT GetUserLogMessages (
        VARIANT * pvarUserLogMessages );
    HRESULT SaveAsToInsightXT (
        _bstr_t bstrItemId,
        _bstr_t bstrItemRev,
        _bstr_t bstrDataSetFileName,
        _bstr_t bstrRevisionRule,
        _bstr_t bstrFolderName,
        VARIANT * pvarListOldAndNewItemIDRevsFileNames );
    HRESULT ReviseToInsightXT (
        _bstr_t bstrItemId,
        _bstr_t bstrItemRev,
        _bstr_t bstrDataSetFileName,
        _bstr_t bstrRevisionRule,
        _bstr_t bstrFolderName,
        VARIANT * pvarListOldAndNewItemIDRevsFileNames );
    HRESULT OnGetWhereUsedForAutomation (
        _bstr_t bstrItemId,
        _bstr_t bstrItemRev,
        _bstr_t bstrDataSetFileName,
        VARIANT * pvarListOfWhereUsedDocuments );
    HRESULT CreateNewProject (
        _bstr_t bstrProjectName );
    HRESULT DeleteProject (
        _bstr_t bstrProjectName );
    HRESULT DeleteAllProjects ( );
    HRESULT DownladDocumentsFromServerWithOptions (
        _bstr_t bstrItemId,
        _bstr_t bstrItemRev,
        _bstr_t bstrDataSetFileName,
        _bstr_t bstrRevisionRule,
        _bstr_t bstrVariantRule,
        VARIANT_BOOL vbReadOnly,
        VARIANT_BOOL vbAllLevel,
        unsigned long dwDownloadOption,
        SAFEARRAY * * pvarListOfFiles );
    HRESULT GetListOfIndirectFilesForGivenFile (
        _bstr_t bstrItemId,
        _bstr_t bstrItemRev,
        _bstr_t bstrDataSetFileName,
        _bstr_t bstrRevisionRule,
        _bstr_t bstrVariantRule,
        VARIANT * pvarListOfIndirectFiles );
    HRESULT GetMappedPropertiesForGivenFile (
        _bstr_t bstrItemId,
        _bstr_t bstrItemRev,
        _bstr_t bstrDataSetFileName,
        VARIANT * pvarListOfProperties );
    HRESULT GetListOfFilesFromInsightXTServer (
        _bstr_t bstrDirctFileItemId,
        _bstr_t bstrDirctFileItemRevId,
        VARIANT * vFileNames,
        long * nFiles );
    HRESULT GetTALLogFileName (
        BSTR * bstrLogFileName );
    HRESULT ValidateTcObjectModel (
        _bstr_t bstrFilename,
        _bstr_t bstrOldItemID,
        _bstr_t bstrOldRev,
        VARIANT_BOOL * bIsTcModelCorrect,
        BSTR * bsrtCompResult,
        VARIANT * vRevisionRule,
        VARIANT * vValidateBOMOnly,
        long * nNoOfServerComponents );
    HRESULT GetBomStructure (
        _bstr_t bstrItemId,
        _bstr_t bstrItemRevId,
        _bstr_t bstrRevisionRule,
        VARIANT_BOOL bDeepList,
        long * NoOfComponents,
        VARIANT * ListOfItemRevIds,
        VARIANT * ListOfFileSpecs );
    HRESULT GetItemRevBasedOnSEType (
        enum TCESETypes nSEType,
        _bstr_t bstrUserName,
        VARIANT * ListOfItemRevIds );
    HRESULT GetItemTypesInfo (
        BSTR * pbstrXML,
        BSTR * pbstrDefaultItemType );
    HRESULT GetSmartCodes (
        VARIANT * pvarSmartCodesInfo );
    HRESULT UnGetSmartCodes (
        SAFEARRAY * * ppsaUnGetInfo );
    HRESULT CheckInDocumentsToInsightXTServerEx (
        VARIANT * pvarFilesToBeCheckedInInfo,
        VARIANT * pvarArguments );
    HRESULT IsItemTypeSmartCodesConfigured (
        _bstr_t bstrItemType,
        VARIANT_BOOL * pvbIsSmartCodesConfigured );
    HRESULT GetInsightXTOrTCPreferenceValues (
        VARIANT * pvarPreferenceInfo );
    HRESULT UpdateStatusInformation (
        SAFEARRAY * * psaCacheFiles );
    HRESULT GetProjectsForLoggedInUSer (
        VARIANT * pvarListOfUserProjects,
        VARIANT * pvarListOfUserProjectUIDs );
    HRESULT GetProjectsForGivenItemIDs (
        VARIANT * pvarListOfItemIDsAndProjects );
    HRESULT AddOrRemoveItemsToOrFromProjects (
        VARIANT * pvarItemInfoToAddOrRemoveToProjects );
    HRESULT CheckBomStructure (
        _bstr_t bstrItemId,
        _bstr_t bstrItemRevId,
        _bstr_t bstrRevisionRule,
        VARIANT_BOOL * bIsDuplicateBOMLineExists,
        VARIANT * ListOfDupliacteObjIDs );
    HRESULT GetItemContentTypesSupportingRevisioning (
        VARIANT * pvarListOfContentTypes );
    HRESULT ProcessUpdateDrawing (
        VARIANT_BOOL * bTerminateProcess );
    HRESULT SESPUpdateWFCallouts (
        VARIANT * plistItemAndRevId,
        VARIANT * pListOldAndNewPropName,
        VARIANT * ListOfFailedDrafts,
        VARIANT_BOOL * bTerminateProcess );
    HRESULT SESPGetActiveUrl (
        VARIANT * activeUrl );
    HRESULT IsInsightXTLicenseAvailable (
        VARIANT_BOOL * bIsInsightXTLicenseAvailable );
    HRESULT PutContentTypeIntoStorage (
        _bstr_t bstrFilename,
        _bstr_t bstrItemType,
        _bstr_t bItemRevType,
        _bstr_t bContentType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetPDMCachePath (
        /*[out]*/ BSTR * bStrCachePath ) = 0;
      virtual HRESULT __stdcall raw_CheckInDocumentsToInsightXTServer (
        /*[in]*/ SAFEARRAY * * ppsaFileList,
        /*[in]*/ VARIANT_BOOL bOnlyUpload,
        /*[in]*/ BSTR bstrUrl ) = 0;
      virtual HRESULT __stdcall raw_CheckOutDocumentsFromInsightXTServer (
        /*[in]*/ BSTR bstrDirctFileItemId,
        /*[in]*/ BSTR bstrDirctFileItemRevId,
        /*[in]*/ VARIANT_BOOL bOnlyDownload,
        /*[in]*/ BSTR bstrFilename,
        /*[in]*/ enum DocumentDownloadLevel enumDownloadLevel ) = 0;
      virtual int __stdcall IsInsightXTFileCheckedOut (
        /*[in]*/ BSTR bstrFilename ) = 0;
      virtual HRESULT __stdcall raw_GetDocumentUID (
        /*[in]*/ BSTR bstrFilename,
        /*[out]*/ BSTR * bstrItemId,
        /*[out]*/ BSTR * bstrItemRev ) = 0;
      virtual HRESULT __stdcall raw_DoesInsightXTFileExists (
        /*[in]*/ BSTR bstrItemId,
        /*[in]*/ BSTR bstrItemRev,
        /*[out]*/ VARIANT_BOOL * bFileExists ) = 0;
      virtual HRESULT __stdcall raw_GetInsightXTMode (
        /*[out]*/ VARIANT_BOOL * bIsInsightXTMode ) = 0;
      virtual HRESULT __stdcall raw_SetInsightXTMode (
        /*[in]*/ VARIANT_BOOL bMode ) = 0;
      virtual HRESULT __stdcall raw_ValidateLogin (
        /*[in]*/ BSTR bstrUserName,
        /*[in]*/ BSTR bstrPassword,
        /*[in]*/ BSTR bstrGroup,
        /*[in]*/ BSTR bstrUserRole,
        /*[in]*/ BSTR bstrDBUrl ) = 0;
      virtual HRESULT __stdcall raw_AssignItemID (
        /*[in]*/ BSTR bstrItemType,
        /*[out]*/ BSTR * bstrItemId,
        /*[out]*/ BSTR * bstrItemRev ) = 0;
      virtual HRESULT __stdcall raw_SESP_GetItemAndRevisionNo (
        /*[in]*/ BSTR bstrItemContentType,
        /*[in]*/ BSTR bstrItemRevContentType,
        /*[out]*/ BSTR * bstrPartno,
        /*[out]*/ BSTR * bstrPartRevno ) = 0;
      virtual HRESULT __stdcall raw_PutItemTypeAsCustomProp (
        /*[in]*/ BSTR bstrFilename,
        /*[in]*/ BSTR bstrItemType ) = 0;
      virtual HRESULT __stdcall raw_GetDatasetNameFromCookie (
        /*[in]*/ BSTR bstrFilename,
        /*[out]*/ BSTR * bstrDatasetName ) = 0;
      virtual HRESULT __stdcall raw_DeleteFilesFromCache (
        /*[in]*/ SAFEARRAY * * psaCacheFiles ) = 0;
      virtual HRESULT __stdcall raw_ImportDocumentsToServer (
        /*[in]*/ long lnumberOfDocumentsFoldersToImport,
        /*[in]*/ SAFEARRAY * * psalistOfFilesFoldersToImport,
        /*[in]*/ BSTR bstrUserName,
        /*[in]*/ BSTR bstrPassword,
        /*[in]*/ BSTR bstrGroup,
        /*[in]*/ BSTR bstrUserRole,
        /*[in]*/ BSTR bstrDBUrl,
        /*[in]*/ VARIANT_BOOL bImportAsPrecise,
        /*[in]*/ VARIANT_BOOL bPerformOnlyDryRun,
        /*[in]*/ VARIANT_BOOL bDisplayAlert,
        /*[in]*/ VARIANT_BOOL bIsFromATP,
        /*[in]*/ VARIANT_BOOL bIsOverwrite,
        /*[in]*/ VARIANT_BOOL brestart,
        /*[in]*/ VARIANT_BOOL bLinkTraversal,
        /*[in]*/ VARIANT_BOOL bIncludeSubFolders,
        /*[in]*/ BSTR * bstrFolderUID ) = 0;
      virtual HRESULT __stdcall raw_OnUndoCheckOutDocuments (
        /*[in]*/ SAFEARRAY * * psaCacheFiles ) = 0;
      virtual HRESULT __stdcall raw_OnSynchronizeFile (
        /*[in]*/ SAFEARRAY * * psaSynchFiles,
        /*[in]*/ enum SyncOption enumSyncOption ) = 0;
      virtual HRESULT __stdcall raw_GetOutOfDateDocuments (
        /*[out]*/ VARIANT * pvarListOfOutOfDateDocuments ) = 0;
      virtual HRESULT __stdcall raw_GetUserLogMessages (
        /*[out]*/ VARIANT * pvarUserLogMessages ) = 0;
      virtual HRESULT __stdcall raw_SaveAsToInsightXT (
        /*[in]*/ BSTR bstrItemId,
        /*[in]*/ BSTR bstrItemRev,
        /*[in]*/ BSTR bstrDataSetFileName,
        /*[in]*/ BSTR bstrRevisionRule,
        /*[in]*/ BSTR bstrFolderName,
        /*[out]*/ VARIANT * pvarListOldAndNewItemIDRevsFileNames ) = 0;
      virtual HRESULT __stdcall raw_ReviseToInsightXT (
        /*[in]*/ BSTR bstrItemId,
        /*[in]*/ BSTR bstrItemRev,
        /*[in]*/ BSTR bstrDataSetFileName,
        /*[in]*/ BSTR bstrRevisionRule,
        /*[in]*/ BSTR bstrFolderName,
        /*[out]*/ VARIANT * pvarListOldAndNewItemIDRevsFileNames ) = 0;
      virtual HRESULT __stdcall raw_OnGetWhereUsedForAutomation (
        /*[in]*/ BSTR bstrItemId,
        /*[in]*/ BSTR bstrItemRev,
        /*[in]*/ BSTR bstrDataSetFileName,
        /*[out]*/ VARIANT * pvarListOfWhereUsedDocuments ) = 0;
      virtual HRESULT __stdcall raw_CreateNewProject (
        /*[in]*/ BSTR bstrProjectName ) = 0;
      virtual HRESULT __stdcall raw_DeleteProject (
        /*[in]*/ BSTR bstrProjectName ) = 0;
      virtual HRESULT __stdcall raw_DeleteAllProjects ( ) = 0;
      virtual HRESULT __stdcall raw_DownladDocumentsFromServerWithOptions (
        /*[in]*/ BSTR bstrItemId,
        /*[in]*/ BSTR bstrItemRev,
        /*[in]*/ BSTR bstrDataSetFileName,
        /*[in]*/ BSTR bstrRevisionRule,
        /*[in]*/ BSTR bstrVariantRule,
        /*[in]*/ VARIANT_BOOL vbReadOnly,
        /*[in]*/ VARIANT_BOOL vbAllLevel,
        /*[in]*/ unsigned long dwDownloadOption,
        /*[in]*/ SAFEARRAY * * pvarListOfFiles ) = 0;
      virtual HRESULT __stdcall raw_GetListOfIndirectFilesForGivenFile (
        /*[in]*/ BSTR bstrItemId,
        /*[in]*/ BSTR bstrItemRev,
        /*[in]*/ BSTR bstrDataSetFileName,
        /*[in]*/ BSTR bstrRevisionRule,
        /*[in]*/ BSTR bstrVariantRule,
        /*[out]*/ VARIANT * pvarListOfIndirectFiles ) = 0;
      virtual HRESULT __stdcall raw_GetMappedPropertiesForGivenFile (
        /*[in]*/ BSTR bstrItemId,
        /*[in]*/ BSTR bstrItemRev,
        /*[in]*/ BSTR bstrDataSetFileName,
        /*[out]*/ VARIANT * pvarListOfProperties ) = 0;
      virtual HRESULT __stdcall raw_GetListOfFilesFromInsightXTServer (
        /*[in]*/ BSTR bstrDirctFileItemId,
        /*[in]*/ BSTR bstrDirctFileItemRevId,
        /*[out]*/ VARIANT * vFileNames,
        /*[out]*/ long * nFiles ) = 0;
      virtual HRESULT __stdcall raw_GetTALLogFileName (
        /*[out]*/ BSTR * bstrLogFileName ) = 0;
      virtual HRESULT __stdcall raw_ValidateTcObjectModel (
        /*[in]*/ BSTR bstrFilename,
        /*[in]*/ BSTR bstrOldItemID,
        /*[in]*/ BSTR bstrOldRev,
        /*[out]*/ VARIANT_BOOL * bIsTcModelCorrect,
        /*[out]*/ BSTR * bsrtCompResult,
        /*[in]*/ VARIANT * vRevisionRule,
        /*[in]*/ VARIANT * vValidateBOMOnly,
        /*[out]*/ long * nNoOfServerComponents ) = 0;
      virtual HRESULT __stdcall raw_GetBomStructure (
        /*[in]*/ BSTR bstrItemId,
        /*[in]*/ BSTR bstrItemRevId,
        /*[in]*/ BSTR bstrRevisionRule,
        /*[in]*/ VARIANT_BOOL bDeepList,
        /*[out]*/ long * NoOfComponents,
        /*[out]*/ VARIANT * ListOfItemRevIds,
        /*[out]*/ VARIANT * ListOfFileSpecs ) = 0;
      virtual HRESULT __stdcall raw_GetItemRevBasedOnSEType (
        /*[in]*/ enum TCESETypes nSEType,
        /*[in]*/ BSTR bstrUserName,
        /*[out]*/ VARIANT * ListOfItemRevIds ) = 0;
      virtual HRESULT __stdcall raw_GetItemTypesInfo (
        /*[out]*/ BSTR * pbstrXML,
        /*[out]*/ BSTR * pbstrDefaultItemType ) = 0;
      virtual HRESULT __stdcall raw_GetSmartCodes (
        /*[in,out]*/ VARIANT * pvarSmartCodesInfo ) = 0;
      virtual HRESULT __stdcall raw_UnGetSmartCodes (
        /*[in]*/ SAFEARRAY * * ppsaUnGetInfo ) = 0;
      virtual HRESULT __stdcall raw_CheckInDocumentsToInsightXTServerEx (
        /*[in]*/ VARIANT * pvarFilesToBeCheckedInInfo,
        /*[in]*/ VARIANT * pvarArguments ) = 0;
      virtual HRESULT __stdcall raw_IsItemTypeSmartCodesConfigured (
        /*[in]*/ BSTR bstrItemType,
        VARIANT_BOOL * pvbIsSmartCodesConfigured ) = 0;
      virtual HRESULT __stdcall raw_GetInsightXTOrTCPreferenceValues (
        /*[in,out]*/ VARIANT * pvarPreferenceInfo ) = 0;
      virtual HRESULT __stdcall raw_UpdateStatusInformation (
        /*[in]*/ SAFEARRAY * * psaCacheFiles ) = 0;
      virtual HRESULT __stdcall raw_GetProjectsForLoggedInUSer (
        /*[out]*/ VARIANT * pvarListOfUserProjects,
        /*[out]*/ VARIANT * pvarListOfUserProjectUIDs ) = 0;
      virtual HRESULT __stdcall raw_GetProjectsForGivenItemIDs (
        /*[in,out]*/ VARIANT * pvarListOfItemIDsAndProjects ) = 0;
      virtual HRESULT __stdcall raw_AddOrRemoveItemsToOrFromProjects (
        /*[in]*/ VARIANT * pvarItemInfoToAddOrRemoveToProjects ) = 0;
      virtual HRESULT __stdcall raw_CheckBomStructure (
        /*[in]*/ BSTR bstrItemId,
        /*[in]*/ BSTR bstrItemRevId,
        /*[in]*/ BSTR bstrRevisionRule,
        /*[out]*/ VARIANT_BOOL * bIsDuplicateBOMLineExists,
        /*[out]*/ VARIANT * ListOfDupliacteObjIDs ) = 0;
      virtual HRESULT __stdcall raw_GetItemContentTypesSupportingRevisioning (
        /*[out]*/ VARIANT * pvarListOfContentTypes ) = 0;
      virtual HRESULT __stdcall raw_ProcessUpdateDrawing (
        /*[out]*/ VARIANT_BOOL * bTerminateProcess ) = 0;
      virtual HRESULT __stdcall raw_SESPUpdateWFCallouts (
        /*[in]*/ VARIANT * plistItemAndRevId,
        /*[in]*/ VARIANT * pListOldAndNewPropName,
        /*[out]*/ VARIANT * ListOfFailedDrafts,
        /*[out]*/ VARIANT_BOOL * bTerminateProcess ) = 0;
      virtual HRESULT __stdcall raw_SESPGetActiveUrl (
        /*[out]*/ VARIANT * activeUrl ) = 0;
      virtual HRESULT __stdcall raw_IsInsightXTLicenseAvailable (
        /*[out]*/ VARIANT_BOOL * bIsInsightXTLicenseAvailable ) = 0;
      virtual HRESULT __stdcall raw_PutContentTypeIntoStorage (
        /*[in]*/ BSTR bstrFilename,
        /*[in]*/ BSTR bstrItemType,
        /*[in]*/ BSTR bItemRevType,
        /*[in]*/ BSTR bContentType ) = 0;
};

struct __declspec(uuid("9cb472ed-39b7-44d5-b8aa-ac9a4eaa30a0"))
SEECEvents;
    // [ default ] interface IUnknown
    // [ default, source ] interface ISEECEvents

enum eCPDMode
{
    CPD_NEW_FILE = 1,
    CPD_UPLOAD_FILE = 2,
    CPD_SAVEAS_FILE = 3,
    CPD_REVISE_FILE = 4
};

struct __declspec(uuid("a4db51be-1187-4c34-a93b-d9c376f6a5be"))
ISEECEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SEEC_IsPreCPDEventSupported (
        VARIANT_BOOL * pvbPreCPDEventSupported );
    HRESULT SEEC_BeforeCPDDisplay (
        IDispatch * pCPDInitializer,
        enum eCPDMode eCPDMode );
    HRESULT PDM_OnFileOpenUI (
        BSTR * bstrFilename );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SEEC_IsPreCPDEventSupported (
        /*[out]*/ VARIANT_BOOL * pvbPreCPDEventSupported ) = 0;
      virtual HRESULT __stdcall raw_SEEC_BeforeCPDDisplay (
        /*[in]*/ IDispatch * pCPDInitializer,
        /*[in]*/ enum eCPDMode eCPDMode ) = 0;
      virtual HRESULT __stdcall raw_PDM_OnFileOpenUI (
        /*[out]*/ BSTR * bstrFilename ) = 0;
};

struct __declspec(uuid("1cec80a4-3fdd-493e-9f33-56a96077099a"))
SESPEvents;
    // [ default ] interface IUnknown
    // [ default, source ] interface ISESPEvents

struct __declspec(uuid("f1c5113c-880b-4456-b5da-b40eadfad39b"))
ISESPEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SESP_IsPreCPDEventSupported (
        VARIANT_BOOL * pvbPreCPDEventSupported );
    HRESULT SESP_BeforeCPDDisplay (
        IDispatch * pCPDInitializer,
        enum eCPDMode eCPDMode );
    HRESULT SESPPDM_OnFileOpenUI (
        BSTR * bstrFilename );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SESP_IsPreCPDEventSupported (
        /*[out]*/ VARIANT_BOOL * pvbPreCPDEventSupported ) = 0;
      virtual HRESULT __stdcall raw_SESP_BeforeCPDDisplay (
        /*[in]*/ IDispatch * pCPDInitializer,
        /*[in]*/ enum eCPDMode eCPDMode ) = 0;
      virtual HRESULT __stdcall raw_SESPPDM_OnFileOpenUI (
        /*[out]*/ BSTR * bstrFilename ) = 0;
};

struct __declspec(uuid("31b7689b-b25c-4ae8-8a4e-96f1130fa4a6"))
BiDMEvents;
    // [ default ] interface IUnknown
    // [ default, source ] interface IBiDMEvents

struct __declspec(uuid("e9829432-a716-47e7-ae6c-fdebd20592b3"))
IBiDMEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT BiDM_IsPreCPDEventSupported (
        VARIANT_BOOL * pvbPreCPDEventSupported );
    HRESULT BiDM_BeforeCPDDisplay (
        IDispatch * pCPDInitializer,
        enum eCPDMode eCPDMode );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_BiDM_IsPreCPDEventSupported (
        /*[out]*/ VARIANT_BOOL * pvbPreCPDEventSupported ) = 0;
      virtual HRESULT __stdcall raw_BiDM_BeforeCPDDisplay (
        /*[in]*/ IDispatch * pCPDInitializer,
        /*[in]*/ enum eCPDMode eCPDMode ) = 0;
};

struct __declspec(uuid("6442b504-1c6a-4c7c-9c49-31a20985a33c"))
Customization : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetParent))
    ApplicationPtr Parent;
    __declspec(property(get=GetRibbonBarThemes))
    RibbonBarThemesPtr RibbonBarThemes;
    __declspec(property(get=GetRadialMenu))
    RadialMenuPtr RadialMenu;
    __declspec(property(get=GetSwitchWindowCust))
    SwitchWindowCustPtr SwitchWindowCust;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    ApplicationPtr GetApplication ( );
    ApplicationPtr GetParent ( );
    RibbonBarThemesPtr GetRibbonBarThemes ( );
    RadialMenuPtr GetRadialMenu ( );
    SwitchWindowCustPtr GetSwitchWindowCust ( );
    HRESULT BeginCustomization ( );
    HRESULT EndCustomization ( );
};

struct __declspec(uuid("6c140ba1-e93a-4d4a-8b07-cee1578a2f0b"))
RibbonBarThemes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetParent))
    CustomizationPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    ApplicationPtr GetApplication ( );
    CustomizationPtr GetParent ( );
    long GetCount ( );
    RibbonBarThemePtr Item (
        const _variant_t & Index );
    RibbonBarThemePtr Create (
        const _variant_t & BasedOffTheme );
    HRESULT Commit ( );
    HRESULT Remove (
        const _variant_t & Theme );
    HRESULT ActivateTheme (
        const _variant_t & Theme );
};

struct __declspec(uuid("15945626-fc1d-4a12-913e-78c4b297e19c"))
RibbonBarTheme : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRibbonBars))
    RibbonBarsPtr RibbonBars;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetGlobalControlSize,put=PutGlobalControlSize))
    enum RibbonBarControlSize GlobalControlSize;
    __declspec(property(get=GetGlobalControlText,put=PutGlobalControlText))
    enum RibbonBarControlText GlobalControlText;
    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetParent))
    RibbonBarThemesPtr Parent;
    __declspec(property(get=GetActive))
    VARIANT_BOOL Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    ApplicationPtr GetApplication ( );
    RibbonBarThemesPtr GetParent ( );
    RibbonBarsPtr GetRibbonBars ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    enum RibbonBarControlSize GetGlobalControlSize ( );
    void PutGlobalControlSize (
        enum RibbonBarControlSize _arg1 );
    enum RibbonBarControlText GetGlobalControlText ( );
    void PutGlobalControlText (
        enum RibbonBarControlText _arg1 );
    VARIANT_BOOL GetActive ( );
};

struct __declspec(uuid("cfad8581-a0d0-4763-9741-894bc9890c98"))
_IRibbonBarThemesAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetParent))
    CustomizationPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    ApplicationPtr GetApplication ( );
    CustomizationPtr GetParent ( );
    long GetCount ( );
    RibbonBarThemePtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    RibbonBarThemePtr Create (
        const _variant_t & BasedOffTheme );
    HRESULT Commit ( );
    HRESULT Remove (
        const _variant_t & Theme );
    HRESULT ActivateTheme (
        const _variant_t & Theme );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct Customization * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct RibbonBarTheme * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Unknown ) = 0;
      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ VARIANT BasedOffTheme,
        /*[out,retval]*/ struct RibbonBarTheme * * Theme ) = 0;
      virtual HRESULT __stdcall raw_Commit ( ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ VARIANT Theme ) = 0;
      virtual HRESULT __stdcall raw_ActivateTheme (
        /*[in]*/ VARIANT Theme ) = 0;
};

struct __declspec(uuid("9df76f46-7386-4ac1-9ecc-2b1bdbf5f74f"))
RibbonBars : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetParent))
    RibbonBarThemePtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    ApplicationPtr GetApplication ( );
    RibbonBarThemePtr GetParent ( );
    long GetCount ( );
    RibbonBarPtr Item (
        const _variant_t & Index );
};

struct __declspec(uuid("5b536e10-d0de-4c67-8ee4-aac91a2f2754"))
RibbonBar : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRibbonBarTabs))
    RibbonBarTabsPtr RibbonBarTabs;
    __declspec(property(get=GetEnvironment))
    _bstr_t Environment;
    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetParent))
    RibbonBarsPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    ApplicationPtr GetApplication ( );
    RibbonBarsPtr GetParent ( );
    RibbonBarTabsPtr GetRibbonBarTabs ( );
    _bstr_t GetEnvironment ( );
};

struct __declspec(uuid("9f6c2a11-8d82-4c43-b2c6-d58b8ed02377"))
_IRibbonBarsAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetParent))
    RibbonBarThemePtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    ApplicationPtr GetApplication ( );
    RibbonBarThemePtr GetParent ( );
    long GetCount ( );
    RibbonBarPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct RibbonBarTheme * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct RibbonBar * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Unknown ) = 0;
};

struct __declspec(uuid("65a7b8a2-0a86-4ea7-92fb-2a78e944ff96"))
RibbonBarTabs : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetParent))
    RibbonBarPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    ApplicationPtr GetApplication ( );
    RibbonBarPtr GetParent ( );
    long GetCount ( );
    RibbonBarTabPtr Item (
        const _variant_t & Index );
    RibbonBarTabPtr Insert (
        const _variant_t & Item,
        const _variant_t & AtItem,
        enum RibbonBarInsertMode mode );
    HRESULT Remove (
        const _variant_t & Item );
};

struct __declspec(uuid("5bac8949-d756-43e5-9a2d-2733132b0ad8"))
_IRibbonBarAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetRibbonBarTabs))
    RibbonBarTabsPtr RibbonBarTabs;
    __declspec(property(get=GetEnvironment))
    _bstr_t Environment;
    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetParent))
    RibbonBarsPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    ApplicationPtr GetApplication ( );
    RibbonBarsPtr GetParent ( );
    RibbonBarTabsPtr GetRibbonBarTabs ( );
    _bstr_t GetEnvironment ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct RibbonBars * * Parent ) = 0;
      virtual HRESULT __stdcall get_RibbonBarTabs (
        /*[out,retval]*/ struct RibbonBarTabs * * Tabs ) = 0;
      virtual HRESULT __stdcall get_Environment (
        /*[out,retval]*/ BSTR * Name ) = 0;
};

struct __declspec(uuid("88df0957-6b0f-4755-8af4-573d4c249145"))
RibbonBarTab : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRibbonBarGroups))
    RibbonBarGroupsPtr RibbonBarGroups;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetId))
    long Id;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetParent))
    RibbonBarTabsPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    ApplicationPtr GetApplication ( );
    RibbonBarTabsPtr GetParent ( );
    RibbonBarGroupsPtr GetRibbonBarGroups ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    long GetId ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    HRESULT Activate ( );
};

struct __declspec(uuid("4393d083-890c-4646-92b7-7310966ccf06"))
RibbonBarGroups : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetParent))
    RibbonBarTabPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    ApplicationPtr GetApplication ( );
    RibbonBarTabPtr GetParent ( );
    long GetCount ( );
    RibbonBarGroupPtr Item (
        const _variant_t & Index );
    RibbonBarGroupPtr Insert (
        const _variant_t & Item,
        const _variant_t & AtItem,
        enum RibbonBarInsertMode mode );
    HRESULT Remove (
        const _variant_t & Item );
};

struct __declspec(uuid("c23c3363-0f8f-4742-9c0f-c79eb68c5e4b"))
_IRibbonBarTabAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetRibbonBarGroups))
    RibbonBarGroupsPtr RibbonBarGroups;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetId))
    long Id;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetParent))
    RibbonBarTabsPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    ApplicationPtr GetApplication ( );
    RibbonBarTabsPtr GetParent ( );
    RibbonBarGroupsPtr GetRibbonBarGroups ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    long GetId ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Visible );
    HRESULT Activate ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct RibbonBarTabs * * Parent ) = 0;
      virtual HRESULT __stdcall get_RibbonBarGroups (
        /*[out,retval]*/ struct RibbonBarGroups * * Groups ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * Id ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
      virtual HRESULT __stdcall raw_Activate ( ) = 0;
};

struct __declspec(uuid("df446eb9-aafa-48a7-ae3f-d46994b80c2e"))
RibbonBarGroup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRibbonBarControls))
    RibbonBarControlsPtr RibbonBarControls;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetId))
    long Id;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetParent))
    RibbonBarGroupsPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    ApplicationPtr GetApplication ( );
    RibbonBarGroupsPtr GetParent ( );
    RibbonBarControlsPtr GetRibbonBarControls ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    long GetId ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("b047921f-a87f-4c17-8152-156802737b4b"))
RibbonBarControls : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetParentRibbonBarGroup))
    RibbonBarGroupPtr ParentRibbonBarGroup;
    __declspec(property(get=GetParentRibbonBarControl))
    RibbonBarControlPtr ParentRibbonBarControl;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    ApplicationPtr GetApplication ( );
    RibbonBarGroupPtr GetParentRibbonBarGroup ( );
    RibbonBarControlPtr GetParentRibbonBarControl ( );
    long GetCount ( );
    RibbonBarControlPtr Item (
        const _variant_t & Index );
    RibbonBarControlPtr Insert (
        const _variant_t & Item,
        const _variant_t & AtItem,
        enum RibbonBarInsertMode mode );
    HRESULT Remove (
        const _variant_t & Item );
};

struct __declspec(uuid("97d7dc66-2ead-4b8d-92f5-70e13ede5247"))
_IRibbonBarGroupAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetRibbonBarControls))
    RibbonBarControlsPtr RibbonBarControls;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetId))
    long Id;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetParent))
    RibbonBarGroupsPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    ApplicationPtr GetApplication ( );
    RibbonBarGroupsPtr GetParent ( );
    RibbonBarControlsPtr GetRibbonBarControls ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    long GetId ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Visible );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct RibbonBarGroups * * Parent ) = 0;
      virtual HRESULT __stdcall get_RibbonBarControls (
        /*[out,retval]*/ struct RibbonBarControls * * Controls ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * Id ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
};

struct __declspec(uuid("b2b9bd62-2a57-4173-87e8-761541368633"))
RibbonBarControl : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRibbonBarControls))
    RibbonBarControlsPtr RibbonBarControls;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetId))
    long Id;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetIconId))
    long IconId;
    __declspec(property(get=GetSize,put=PutSize))
    enum RibbonBarControlSize Size;
    __declspec(property(get=GetText,put=PutText))
    enum RibbonBarControlText Text;
    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetParent))
    RibbonBarControlsPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    ApplicationPtr GetApplication ( );
    RibbonBarControlsPtr GetParent ( );
    RibbonBarControlsPtr GetRibbonBarControls ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    enum RibbonBarControlSize GetSize ( );
    void PutSize (
        enum RibbonBarControlSize _arg1 );
    enum RibbonBarControlText GetText ( );
    void PutText (
        enum RibbonBarControlText _arg1 );
    long GetId ( );
    long GetIconId ( );
};

enum RibbonBarControlSize
{
    seRibbonBarControlSizeDefault = 0,
    seRibbonBarControlSizeSmall = 1,
    seRibbonBarControlSizeLarge = 2
};

enum RibbonBarControlText
{
    seRibbonBarControlTextDefault = 0,
    seRibbonBarControlTextOn = 1,
    seRibbonBarControlTextOff = 2
};

struct __declspec(uuid("07f664c0-9fcb-4be8-a101-59a031489d1f"))
_IRibbonBarThemeAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetRibbonBars))
    RibbonBarsPtr RibbonBars;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetGlobalControlSize,put=PutGlobalControlSize))
    enum RibbonBarControlSize GlobalControlSize;
    __declspec(property(get=GetGlobalControlText,put=PutGlobalControlText))
    enum RibbonBarControlText GlobalControlText;
    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetParent))
    RibbonBarThemesPtr Parent;
    __declspec(property(get=GetActive))
    VARIANT_BOOL Active;

    //
    // Wrapper methods for error-handling
    //

    ApplicationPtr GetApplication ( );
    RibbonBarThemesPtr GetParent ( );
    RibbonBarsPtr GetRibbonBars ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    enum RibbonBarControlSize GetGlobalControlSize ( );
    void PutGlobalControlSize (
        enum RibbonBarControlSize SizeType );
    enum RibbonBarControlText GetGlobalControlText ( );
    void PutGlobalControlText (
        enum RibbonBarControlText TextType );
    VARIANT_BOOL GetActive ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct RibbonBarThemes * * Parent ) = 0;
      virtual HRESULT __stdcall get_RibbonBars (
        /*[out,retval]*/ struct RibbonBars * * RibbonBars ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_GlobalControlSize (
        /*[out,retval]*/ enum RibbonBarControlSize * SizeType ) = 0;
      virtual HRESULT __stdcall put_GlobalControlSize (
        /*[in]*/ enum RibbonBarControlSize SizeType ) = 0;
      virtual HRESULT __stdcall get_GlobalControlText (
        /*[out,retval]*/ enum RibbonBarControlText * TextType ) = 0;
      virtual HRESULT __stdcall put_GlobalControlText (
        /*[in]*/ enum RibbonBarControlText TextType ) = 0;
      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ VARIANT_BOOL * retVal ) = 0;
};

struct __declspec(uuid("b123ea0d-457b-40ee-98f3-6ff84f3345fe"))
_IRibbonBarControlAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetRibbonBarControls))
    RibbonBarControlsPtr RibbonBarControls;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetId))
    long Id;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetIconId))
    long IconId;
    __declspec(property(get=GetSize,put=PutSize))
    enum RibbonBarControlSize Size;
    __declspec(property(get=GetText,put=PutText))
    enum RibbonBarControlText Text;
    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetParent))
    RibbonBarControlsPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    ApplicationPtr GetApplication ( );
    RibbonBarControlsPtr GetParent ( );
    RibbonBarControlsPtr GetRibbonBarControls ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Visible );
    enum RibbonBarControlSize GetSize ( );
    void PutSize (
        enum RibbonBarControlSize SizeType );
    enum RibbonBarControlText GetText ( );
    void PutText (
        enum RibbonBarControlText TextType );
    long GetId ( );
    long GetIconId ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct RibbonBarControls * * Parent ) = 0;
      virtual HRESULT __stdcall get_RibbonBarControls (
        /*[out,retval]*/ struct RibbonBarControls * * Controls ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
      virtual HRESULT __stdcall get_Size (
        /*[out,retval]*/ enum RibbonBarControlSize * SizeType ) = 0;
      virtual HRESULT __stdcall put_Size (
        /*[in]*/ enum RibbonBarControlSize SizeType ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ enum RibbonBarControlText * TextType ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ enum RibbonBarControlText TextType ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * Id ) = 0;
      virtual HRESULT __stdcall get_IconId (
        /*[out,retval]*/ long * IconId ) = 0;
};

enum RibbonBarInsertMode
{
    seRibbonBarInsertCopy = 0,
    seRibbonBarInsertMove = 1,
    seRibbonBarInsertCreate = 2,
    seRibbonBarInsertCreateButton = 3,
    seRibbonBarInsertCreatePopup = 4,
    seRibbonBarInsertCreateSplitButtonPopup = 5
};

struct __declspec(uuid("a109d38f-1f5d-4af5-a6c3-b9171b3f7857"))
_IRibbonBarTabsAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetParent))
    RibbonBarPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    ApplicationPtr GetApplication ( );
    RibbonBarPtr GetParent ( );
    long GetCount ( );
    RibbonBarTabPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    RibbonBarTabPtr Insert (
        const _variant_t & Item,
        const _variant_t & AtItem,
        enum RibbonBarInsertMode mode );
    HRESULT Remove (
        const _variant_t & Item );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct RibbonBar * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct RibbonBarTab * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Unknown ) = 0;
      virtual HRESULT __stdcall raw_Insert (
        /*[in]*/ VARIANT Item,
        /*[in]*/ VARIANT AtItem,
        /*[in]*/ enum RibbonBarInsertMode mode,
        /*[out,retval]*/ struct RibbonBarTab * * InsertedItem ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ VARIANT Item ) = 0;
};

struct __declspec(uuid("11ba1264-0a35-4bbc-b8ad-efce5c7bda1c"))
_IRibbonBarGroupsAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetParent))
    RibbonBarTabPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    ApplicationPtr GetApplication ( );
    RibbonBarTabPtr GetParent ( );
    long GetCount ( );
    RibbonBarGroupPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    RibbonBarGroupPtr Insert (
        const _variant_t & Item,
        const _variant_t & AtItem,
        enum RibbonBarInsertMode mode );
    HRESULT Remove (
        const _variant_t & Item );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct RibbonBarTab * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct RibbonBarGroup * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Unknown ) = 0;
      virtual HRESULT __stdcall raw_Insert (
        /*[in]*/ VARIANT Item,
        /*[in]*/ VARIANT AtItem,
        /*[in]*/ enum RibbonBarInsertMode mode,
        /*[out,retval]*/ struct RibbonBarGroup * * InsertedItem ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ VARIANT Item ) = 0;
};

struct __declspec(uuid("18f0ea35-44a8-4040-a4e7-0ceb92955922"))
_IRibbonBarControlsAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetParentRibbonBarGroup))
    RibbonBarGroupPtr ParentRibbonBarGroup;
    __declspec(property(get=GetParentRibbonBarControl))
    RibbonBarControlPtr ParentRibbonBarControl;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    ApplicationPtr GetApplication ( );
    RibbonBarGroupPtr GetParentRibbonBarGroup ( );
    RibbonBarControlPtr GetParentRibbonBarControl ( );
    long GetCount ( );
    RibbonBarControlPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    RibbonBarControlPtr Insert (
        const _variant_t & Item,
        const _variant_t & AtItem,
        enum RibbonBarInsertMode mode );
    HRESULT Remove (
        const _variant_t & Item );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct Application * * Application ) = 0;
      virtual HRESULT __stdcall get_ParentRibbonBarGroup (
        /*[out,retval]*/ struct RibbonBarGroup * * Parent ) = 0;
      virtual HRESULT __stdcall get_ParentRibbonBarControl (
        /*[out,retval]*/ struct RibbonBarControl * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct RibbonBarControl * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Unknown ) = 0;
      virtual HRESULT __stdcall raw_Insert (
        /*[in]*/ VARIANT Item,
        /*[in]*/ VARIANT AtItem,
        /*[in]*/ enum RibbonBarInsertMode mode,
        /*[out,retval]*/ struct RibbonBarControl * * InsertedItem ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ VARIANT Item ) = 0;
};

struct __declspec(uuid("48bf6a82-1e35-4679-9315-c3345bfd819a"))
RadialMenu : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetParent))
    CustomizationPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    ApplicationPtr GetApplication ( );
    CustomizationPtr GetParent ( );
    long GetCount ( );
    RibbonBarThemePtr Item (
        const _variant_t & Index );
    RibbonBarThemePtr Create (
        const _variant_t & BasedOffTheme );
    HRESULT Commit ( );
    HRESULT Remove (
        const _variant_t & Theme );
    HRESULT LoadPallets (
        BSTR * strConfigFilename );
    HRESULT SavePallets (
        BSTR * strConfigFilename );
    HRESULT DumpPallets (
        BSTR * strLogfileName );
    HRESULT DumpPallet (
        BSTR * strEnvironmentName,
        BSTR * strLogfileName );
    HRESULT SetCommand (
        BSTR * strEnvironmentName,
        int ring,
        int wedge,
        int cmdID,
        int imageID );
    HRESULT RemoveCommand (
        BSTR * strEnvironmentName,
        int ring,
        int wedge );
    HRESULT SwapCommands (
        BSTR * strEnvironmentName,
        int ring1,
        int wedge1,
        int ring2,
        int wedge2 );
};

struct __declspec(uuid("ece0da2a-84e1-4b8a-b6ea-57c4a4f619dc"))
_IRadialMenuAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetParent))
    CustomizationPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    ApplicationPtr GetApplication ( );
    CustomizationPtr GetParent ( );
    long GetCount ( );
    RibbonBarThemePtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    RibbonBarThemePtr Create (
        const _variant_t & BasedOffTheme );
    HRESULT Commit ( );
    HRESULT Remove (
        const _variant_t & Theme );
    HRESULT LoadPallets (
        BSTR * strConfigFilename );
    HRESULT SavePallets (
        BSTR * strConfigFilename );
    HRESULT DumpPallets (
        BSTR * strLogfileName );
    HRESULT DumpPallet (
        BSTR * strEnvironmentName,
        BSTR * strLogfileName );
    HRESULT SetCommand (
        BSTR * strEnvironmentName,
        int ring,
        int wedge,
        int cmdID,
        int imageID );
    HRESULT RemoveCommand (
        BSTR * strEnvironmentName,
        int ring,
        int wedge );
    HRESULT SwapCommands (
        BSTR * strEnvironmentName,
        int ring1,
        int wedge1,
        int ring2,
        int wedge2 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct Customization * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct RibbonBarTheme * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Unknown ) = 0;
      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ VARIANT BasedOffTheme,
        /*[out,retval]*/ struct RibbonBarTheme * * Theme ) = 0;
      virtual HRESULT __stdcall raw_Commit ( ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ VARIANT Theme ) = 0;
      virtual HRESULT __stdcall raw_LoadPallets (
        BSTR * strConfigFilename ) = 0;
      virtual HRESULT __stdcall raw_SavePallets (
        BSTR * strConfigFilename ) = 0;
      virtual HRESULT __stdcall raw_DumpPallets (
        BSTR * strLogfileName ) = 0;
      virtual HRESULT __stdcall raw_DumpPallet (
        BSTR * strEnvironmentName,
        BSTR * strLogfileName ) = 0;
      virtual HRESULT __stdcall raw_SetCommand (
        BSTR * strEnvironmentName,
        int ring,
        int wedge,
        int cmdID,
        int imageID ) = 0;
      virtual HRESULT __stdcall raw_RemoveCommand (
        BSTR * strEnvironmentName,
        int ring,
        int wedge ) = 0;
      virtual HRESULT __stdcall raw_SwapCommands (
        BSTR * strEnvironmentName,
        int ring1,
        int wedge1,
        int ring2,
        int wedge2 ) = 0;
};

struct __declspec(uuid("195c0bf2-fb0e-41d3-aa5a-8e084be95851"))
SwitchWindowCust : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetParent))
    CustomizationPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    ApplicationPtr GetApplication ( );
    CustomizationPtr GetParent ( );
    long GetCount ( );
    RibbonBarThemePtr Item (
        const _variant_t & Index );
    RibbonBarThemePtr Create (
        const _variant_t & BasedOffTheme );
    HRESULT Commit ( );
    HRESULT Remove (
        const _variant_t & Theme );
    HRESULT EnumGraphicViews (
        int * pNumGraphicViews );
    HRESULT NextGraphicView (
        BSTR * strTitle,
        BSTR * strFullName,
        int * fileType,
        unsigned long * hWnd,
        unsigned long * bActive,
        unsigned long * bDirty );
    HRESULT ActivateGraphicView (
        unsigned long hWnd );
};

struct __declspec(uuid("c8093a5a-db50-4e32-bd93-a3176780fcfc"))
_ICustomizationAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetParent))
    ApplicationPtr Parent;
    __declspec(property(get=GetRibbonBarThemes))
    RibbonBarThemesPtr RibbonBarThemes;
    __declspec(property(get=GetRadialMenu))
    RadialMenuPtr RadialMenu;
    __declspec(property(get=GetSwitchWindowCust))
    SwitchWindowCustPtr SwitchWindowCust;

    //
    // Wrapper methods for error-handling
    //

    ApplicationPtr GetApplication ( );
    ApplicationPtr GetParent ( );
    RibbonBarThemesPtr GetRibbonBarThemes ( );
    RadialMenuPtr GetRadialMenu ( );
    SwitchWindowCustPtr GetSwitchWindowCust ( );
    HRESULT BeginCustomization ( );
    HRESULT EndCustomization ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct Application * * Parent ) = 0;
      virtual HRESULT __stdcall get_RibbonBarThemes (
        /*[out,retval]*/ struct RibbonBarThemes * * RibbonBarThemes ) = 0;
      virtual HRESULT __stdcall get_RadialMenu (
        /*[out,retval]*/ struct RadialMenu * * RadialMenu ) = 0;
      virtual HRESULT __stdcall get_SwitchWindowCust (
        /*[out,retval]*/ struct SwitchWindowCust * * SwitchWindowCust ) = 0;
      virtual HRESULT __stdcall raw_BeginCustomization ( ) = 0;
      virtual HRESULT __stdcall raw_EndCustomization ( ) = 0;
};

struct __declspec(uuid("5e1d27de-3414-4073-b8f7-28fbaf6d2546"))
_ISwitchWindowCustAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetParent))
    CustomizationPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    ApplicationPtr GetApplication ( );
    CustomizationPtr GetParent ( );
    long GetCount ( );
    RibbonBarThemePtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    RibbonBarThemePtr Create (
        const _variant_t & BasedOffTheme );
    HRESULT Commit ( );
    HRESULT Remove (
        const _variant_t & Theme );
    HRESULT EnumGraphicViews (
        int * pNumGraphicViews );
    HRESULT NextGraphicView (
        BSTR * strTitle,
        BSTR * strFullName,
        int * fileType,
        unsigned long * hWnd,
        unsigned long * bActive,
        unsigned long * bDirty );
    HRESULT ActivateGraphicView (
        unsigned long hWnd );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct Customization * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct RibbonBarTheme * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Unknown ) = 0;
      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ VARIANT BasedOffTheme,
        /*[out,retval]*/ struct RibbonBarTheme * * Theme ) = 0;
      virtual HRESULT __stdcall raw_Commit ( ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ VARIANT Theme ) = 0;
      virtual HRESULT __stdcall raw_EnumGraphicViews (
        int * pNumGraphicViews ) = 0;
      virtual HRESULT __stdcall raw_NextGraphicView (
        BSTR * strTitle,
        BSTR * strFullName,
        int * fileType,
        unsigned long * hWnd,
        unsigned long * bActive,
        unsigned long * bDirty ) = 0;
      virtual HRESULT __stdcall raw_ActivateGraphicView (
        unsigned long hWnd ) = 0;
};

enum ArrangeWindowsStyles
{
    igWindowsTiled = 1,
    igWindowsHorizontal = 2,
    igWindowsVertical = 4,
    igWindowsCascade = 8
};

enum GenerateMasterImportListError
{
    NoDocsFound = 1
};

enum ConfigResetType
{
    seResetAll = -1801520595,
    seResetGroup = -1957181463
};

enum ConfigForForeignFileType
{
    seAutoCADConfigFile = 1067709598
};

enum FileTranslationMode
{
    seImport = 1493142125,
    seExport = -1720541218
};

enum WorkflowType
{
    OneStepRelease = 0,
    QuickRelease = 1
};

enum WorkflowAction
{
    Initiate = 0,
    Delegate = 1,
    Accept = 2,
    Reject = 3
};

#pragma pack(push, 8)

struct __declspec(uuid("0f4b295e-1514-4690-ad8f-655c536aedd5"))
SolidEdgeWorkflowInfo
{
    BSTR bstrWorkflowTitle;
    BSTR bstrWorkflowDescription;
    enum WorkflowType eWorkflowType;
    enum WorkflowAction eAction;
    BSTR bstrWorkflowReviewer;
    VARIANT_BOOL bIncludeDrawings;
    VARIANT_BOOL bUpdateDrawings;
    VARIANT_BOOL bGenerateBOMReport;
    VARIANT_BOOL bEmailNotification;
    BSTR bstrSMTPServer;
    VARIANT vtRecipientEmailIds;
    BSTR bstrLogFile;
};

#pragma pack(pop)

#pragma pack(push, 8)

struct __declspec(uuid("5ce95c29-76bc-445c-b258-a0fc24c37972"))
SolidEdgeWorkflowQueryInfo
{
    BSTR bstrWorkflowTitle;
    BSTR bstrWorkflowDescription;
    BSTR bstrWorkflowReviewer;
    VARIANT_BOOL bIncludeDrawings;
    VARIANT_BOOL bUpdateDrawings;
    VARIANT_BOOL bGenerateBOMReport;
    VARIANT_BOOL bEmailNotification;
    BSTR bstrSMTPServer;
    enum DocumentStatus DocStatus;
    VARIANT vtRecipientEmailIds;
};

#pragma pack(pop)

enum GenerateSourceImportListError
{
    GenerateSourceImportListError_NoDocsFound = 1
};

struct __declspec(uuid("2eb9310a-e2d7-4e98-a786-db6ff3b44d10"))
DynamicVisualization : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT EnableDelayedIndexing (
        VARIANT_BOOL bEnableDelayedIndexing );
};

struct __declspec(uuid("dc99a528-3559-4999-923d-12f5acd6e64c"))
_IDynamicVisualizationAuto : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT EnableDelayedIndexing (
        VARIANT_BOOL bEnableDelayedIndexing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_EnableDelayedIndexing (
        /*[in]*/ VARIANT_BOOL bEnableDelayedIndexing ) = 0;
};

struct __declspec(uuid("dd0c475c-d9b3-4150-935e-6e556444882c"))
OpenNonSolidEdgeFileUIEvents;
    // [ default ] interface IUnknown
    // [ default, source ] interface ISEOpenNonSolidEdgeFileUIEvents

enum OpenNonSolidEdgeFileContext
{
    OpenImage = 1,
    OpenPointCloud = 2,
    OpenDecal = 3,
    OpenViewBackground = 4,
    OpenViewReflection = 5,
    OpenFaceStyleTexture = 6,
    OpenFaceStyleBumpMap = 7,
    OpenFaceStyleReflection = 8,
    OpenStyleOrganizerStyle = 9
};

struct __declspec(uuid("4aa48ed8-e0eb-4649-9a21-30fbae5117b8"))
ISEOpenNonSolidEdgeFileUIEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT OnOpenNonSolidEdgeFileUI (
        enum OpenNonSolidEdgeFileContext FileContext,
        _bstr_t FileFilter,
        BSTR * Filename );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_OnOpenNonSolidEdgeFileUI (
        /*[in]*/ enum OpenNonSolidEdgeFileContext FileContext,
        /*[in]*/ BSTR FileFilter,
        /*[out]*/ BSTR * Filename ) = 0;
};

enum SELicenseCheck
{
    SELicenserConsume = 1,
    SELicenserReturn = 2,
    SELicenserIsPresent = 3
};

struct __declspec(uuid("8a7efa36-f000-11d1-bdfc-080036b4d502"))
_IApplicationAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetActiveDocument))
    IDispatchPtr ActiveDocument;
    __declspec(property(get=GetActiveEnvironment))
    _bstr_t ActiveEnvironment;
    __declspec(property(get=GetActivePrinter))
    _bstr_t ActivePrinter;
    __declspec(property(get=GetActiveSelectSet))
    SelectSetPtr ActiveSelectSet;
    __declspec(property(get=GetActiveStatusBarPart,put=PutActiveStatusBarPart))
    int ActiveStatusBarPart;
    __declspec(property(get=GetActiveWindow))
    IDispatchPtr ActiveWindow;
    __declspec(property(get=GetAddIns))
    AddInsPtr AddIns;
    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetCommandPredictionLearningMode,put=PutCommandPredictionLearningMode))
    VARIANT_BOOL CommandPredictionLearningMode;
    __declspec(property(get=GetSoldToID))
    _bstr_t SoldToID;
    __declspec(property(get=GetLicenseType))
    _bstr_t LicenseType;
    __declspec(property(get=GetActiveFramehWnd))
    long ActiveFramehWnd;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetDynamicVisualization))
    DynamicVisualizationPtr DynamicVisualization;
    __declspec(property(get=GetDefaultFilePath,put=PutDefaultFilePath))
    _bstr_t DefaultFilePath;
    __declspec(property(get=GetDisplayAlerts,put=PutDisplayAlerts))
    VARIANT_BOOL DisplayAlerts;
    __declspec(property(get=GetDisplayFullScreen,put=PutDisplayFullScreen))
    VARIANT_BOOL DisplayFullScreen;
    __declspec(property(get=GetDisplayRecentFiles,put=PutDisplayRecentFiles))
    VARIANT_BOOL DisplayRecentFiles;
    __declspec(property(get=GetDocuments))
    DocumentsPtr Documents;
    __declspec(property(get=GetLicenseHandle))
    __int64 LicenseHandle;
    __declspec(property(get=GetEnvironments))
    EnvironmentsPtr Environments;
    __declspec(property(get=GetOpenNonSolidEdgeFileUIEvents))
    IUnknownPtr OpenNonSolidEdgeFileUIEvents;
    __declspec(property(get=GetHeight,put=PutHeight))
    int Height;
    __declspec(property(get=GethWnd))
    long hWnd;
    __declspec(property(get=GetInteractive,put=PutInteractive))
    VARIANT_BOOL Interactive;
    __declspec(property(get=GetLeft,put=PutLeft))
    int Left;
    __declspec(property(get=GetMailSession))
    long MailSession;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetParent))
    ApplicationPtr Parent;
    __declspec(property(get=GetScreenUpdating,put=PutScreenUpdating))
    VARIANT_BOOL ScreenUpdating;
    __declspec(property(get=GetStatusBar,put=PutStatusBar))
    _bstr_t StatusBar;
    __declspec(property(get=GetStatusBarDelayUpdate,put=PutStatusBarDelayUpdate))
    VARIANT_BOOL StatusBarDelayUpdate;
    __declspec(property(get=GetStatusBarPartCount,put=PutStatusBarPartCount))
    int StatusBarPartCount;
    __declspec(property(get=GetStatusBarPartWidth,put=PutStatusBarPartWidth))
    int StatusBarPartWidth;
    __declspec(property(get=GetStatusBarVisible,put=PutStatusBarVisible))
    VARIANT_BOOL StatusBarVisible;
    __declspec(property(get=GetTop,put=PutTop))
    int Top;
    __declspec(property(get=GetUsableHeight))
    int UsableHeight;
    __declspec(property(get=GetUsableWidth))
    int UsableWidth;
    __declspec(property(get=GetUserName,put=PutUserName))
    _bstr_t UserName;
    __declspec(property(get=GetValue))
    _bstr_t Value;
    __declspec(property(get=GetVersion))
    _bstr_t Version;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetWidth,put=PutWidth))
    int Width;
    __declspec(property(get=GetWindows))
    WindowsPtr Windows;
    __declspec(property(get=GetWindowState,put=PutWindowState))
    int WindowState;
    __declspec(property(get=GetStatusBarHeight))
    int StatusBarHeight;
    __declspec(property(get=GetDisplayRecentFilesCount,put=PutDisplayRecentFilesCount))
    long DisplayRecentFilesCount;
    __declspec(property(get=GetDelayCompute,put=PutDelayCompute))
    VARIANT_BOOL DelayCompute;
    __declspec(property(get=GetApplicationWindowEvents))
    IUnknownPtr ApplicationWindowEvents;
    __declspec(property(get=GetApplicationEvents))
    IUnknownPtr ApplicationEvents;
    __declspec(property(get=GetActiveDocumentType))
    enum DocumentTypeConstants ActiveDocumentType;
    __declspec(property(get=GetFileUIEvents))
    IUnknownPtr FileUIEvents;
    __declspec(property(get=GetEnableStereo,put=PutEnableStereo))
    VARIANT_BOOL EnableStereo;
    __declspec(property(get=GetEdgeBarVisible,put=PutEdgeBarVisible))
    VARIANT_BOOL EdgeBarVisible;
    __declspec(property(get=GetFeatureLibraryEvents))
    IUnknownPtr FeatureLibraryEvents;
    __declspec(property(get=GetActiveObject))
    IDispatchPtr ActiveObject[];
    __declspec(property(get=GetInsight))
    InsightPtr Insight;
    __declspec(property(get=GetApplicationV8AfterDocumentOpenEvent))
    IUnknownPtr ApplicationV8AfterDocumentOpenEvent;
    __declspec(property(get=GetNewFileUIEvents))
    IUnknownPtr NewFileUIEvents;
    __declspec(property(get=GetShortcutMenuEvents))
    IUnknownPtr ShortcutMenuEvents;
    __declspec(property(get=GetApprenticeMode,put=PutApprenticeMode))
    VARIANT_BOOL ApprenticeMode;
    __declspec(property(get=GetShowStartupScreen,put=PutShowStartupScreen))
    VARIANT_BOOL ShowStartupScreen;
    __declspec(property(get=GetSolidEdgeTCE))
    SolidEdgeTCEPtr SolidEdgeTCE;
    __declspec(property(get=GetIsIdling))
    VARIANT_BOOL IsIdling[];
    __declspec(property(get=GetResolveLink,put=PutResolveLink))
    VARIANT_BOOL ResolveLink;
    __declspec(property(get=GetProcessID))
    int ProcessID;
    __declspec(property(get=GetSEECEvents))
    IUnknownPtr SEECEvents;
    __declspec(property(get=GetCustomization))
    CustomizationPtr Customization;
    __declspec(property(get=GetSolidEdgeInsightXT))
    SolidEdgeInsightXTPtr SolidEdgeInsightXT;
    __declspec(property(get=GetSESPEvents))
    IUnknownPtr SESPEvents;
    __declspec(property(get=GetBeforeFileSaveAsEvents))
    IUnknownPtr BeforeFileSaveAsEvents;
    __declspec(property(get=GetRegistryPath))
    _bstr_t RegistryPath;
    __declspec(property(get=GetAppDataFolder))
    _bstr_t AppDataFolder;
    __declspec(property(get=GetFeatureSelectedFromPFEvents))
    IUnknownPtr FeatureSelectedFromPFEvents;
    __declspec(property(get=GetBiDMEvents))
    IUnknownPtr BiDMEvents;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Activate ( );
    IDispatchPtr GetActiveDocument ( );
    _bstr_t GetActiveEnvironment ( );
    _bstr_t GetActivePrinter ( );
    SelectSetPtr GetActiveSelectSet ( );
    int GetActiveStatusBarPart ( );
    void PutActiveStatusBarPart (
        int ActiveStatusBarPart );
    IDispatchPtr GetActiveWindow ( );
    ApplicationPtr GetApplication ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t Caption );
    _bstr_t GetDefaultFilePath ( );
    void PutDefaultFilePath (
        _bstr_t Path );
    void PutDelayCompute (
        VARIANT_BOOL DelayCompute );
    VARIANT_BOOL GetDelayCompute ( );
    VARIANT_BOOL GetDisplayAlerts ( );
    void PutDisplayAlerts (
        VARIANT_BOOL DisplayAlerts );
    VARIANT_BOOL GetDisplayFullScreen ( );
    void PutDisplayFullScreen (
        VARIANT_BOOL DisplayFullScreen );
    VARIANT_BOOL GetDisplayRecentFiles ( );
    void PutDisplayRecentFiles (
        VARIANT_BOOL DisplayRecentFiles );
    long GetDisplayRecentFilesCount ( );
    void PutDisplayRecentFilesCount (
        long DisplayRecentFilesCount );
    DocumentsPtr GetDocuments ( );
    EnvironmentsPtr GetEnvironments ( );
    _variant_t SEGetOpenFileName (
        enum LinksUpdateOption * LinksUpdate,
        BSTR * AltLinkPath,
        enum DocumentAccess * DocAccess,
        enum NotifyOption * OptNotify,
        IDispatch * * DocRelationAutoServer,
        const _variant_t & FileFilter = vtMissing,
        const _variant_t & FilterIndex = vtMissing,
        const _variant_t & Title = vtMissing,
        const _variant_t & IgnoreWarnings = vtMissing );
    _variant_t GetSaveAsFileName (
        int * LinkSaveOption,
        long * SelectedFilter,
        const _variant_t & InitialFilename = vtMissing,
        const _variant_t & FileFilter = vtMissing,
        const _variant_t & FilterIndex = vtMissing,
        const _variant_t & Title = vtMissing,
        const _variant_t & IsTemplate = vtMissing );
    _variant_t FindFile ( );
    _variant_t GetDirectoryName ( );
    int GetHeight ( );
    void PutHeight (
        int Height );
    long GethWnd ( );
    VARIANT_BOOL GetInteractive ( );
    void PutInteractive (
        VARIANT_BOOL Interactive );
    int GetLeft ( );
    void PutLeft (
        int Left );
    HRESULT MailLogoff ( );
    HRESULT MailLogon (
        const _variant_t & Name = vtMissing,
        const _variant_t & Password = vtMissing,
        const _variant_t & DownloadNewMail = vtMissing );
    long GetMailSession ( );
    _bstr_t GetName ( );
    ApplicationPtr GetParent ( );
    HRESULT Quit ( );
    VARIANT_BOOL GetScreenUpdating ( );
    void PutScreenUpdating (
        VARIANT_BOOL ScreenUpdating );
    _bstr_t GetStatusBar ( );
    void PutStatusBar (
        _bstr_t StatusBar );
    VARIANT_BOOL GetStatusBarDelayUpdate ( );
    void PutStatusBarDelayUpdate (
        VARIANT_BOOL StatusBarDelayUpdate );
    int GetStatusBarHeight ( );
    int GetStatusBarPartCount ( );
    void PutStatusBarPartCount (
        int StatusBarPartCount );
    int GetStatusBarPartWidth ( );
    void PutStatusBarPartWidth (
        int StatusBarPartWidth );
    VARIANT_BOOL GetStatusBarVisible ( );
    void PutStatusBarVisible (
        VARIANT_BOOL StatusBarVisible );
    int GetTop ( );
    void PutTop (
        int Top );
    int GetUsableHeight ( );
    int GetUsableWidth ( );
    _bstr_t GetUserName ( );
    void PutUserName (
        _bstr_t UserName );
    _bstr_t GetValue ( );
    _bstr_t GetVersion ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Visible );
    int GetWidth ( );
    void PutWidth (
        int Width );
    WindowsPtr GetWindows ( );
    int GetWindowState ( );
    void PutWindowState (
        int WindowState );
    IUnknownPtr GetApplicationEvents ( );
    IUnknownPtr GetApplicationWindowEvents ( );
    enum DocumentTypeConstants GetActiveDocumentType ( );
    IUnknownPtr GetFileUIEvents ( );
    IUnknownPtr GetBeforeFileSaveAsEvents ( );
    HRESULT StartCommand (
        enum SolidEdgeCommandConstants CommandID );
    VARIANT_BOOL CommandEnabled (
        int CommandID,
        _bstr_t strEnvironment,
        VARIANT_BOOL * bLicensed,
        VARIANT_BOOL * bUnknownCmd );
    DISECommandPtr CreateCommand (
        long CmdFlags );
    HRESULT ReplaceReference (
        const _variant_t & FromReference = vtMissing,
        const _variant_t & ToReference = vtMissing,
        const _variant_t & Scope = vtMissing,
        const _variant_t & Recursive = vtMissing );
    HRESULT RunMacro (
        _bstr_t Filename );
    AddInsPtr GetAddIns ( );
    VARIANT_BOOL GetEnableStereo ( );
    void PutEnableStereo (
        VARIANT_BOOL EnableStereo );
    VARIANT_BOOL GetEdgeBarVisible ( );
    void PutEdgeBarVisible (
        VARIANT_BOOL EdgeBarVisible );
    IUnknownPtr GetFeatureLibraryEvents ( );
    HRESULT GetGlobalParameter (
        enum ApplicationGlobalConstants Parameter,
        VARIANT * Value );
    HRESULT SetGlobalParameter (
        enum ApplicationGlobalConstants Parameter,
        const _variant_t & Value );
    IDispatchPtr GetActiveObject (
        enum SeObjectType Type );
    InsightPtr GetInsight ( );
    IUnknownPtr GetApplicationV8AfterDocumentOpenEvent ( );
    HRESULT SetOLERequestPendingTimeout (
        const _variant_t & SetOLERequestPendingTimeout = vtMissing );
    HRESULT SetOLEServerBusyTimeout (
        const _variant_t & SetOLEServerBusyTimeout = vtMissing );
    IUnknownPtr GetFeatureSelectedFromPFEvents ( );
    HRESULT CreateSEDocumentFromTDMAuto (
        _bstr_t bstrHostName,
        _bstr_t bstrServerName,
        _bstr_t bstrFolderLocation,
        _bstr_t bstrProject,
        _bstr_t bstrLibrary,
        _bstr_t bstrItemGUID,
        _bstr_t bstrVersionGUID,
        _bstr_t bstrVersionNumber,
        enum DocumentTypeConstants SEDocType,
        _bstr_t bstrAssemblyTemplate,
        _bstr_t bstrPartTemplate );
    HRESULT CreateSEDraftDocFromDXFAuto (
        _bstr_t bstrDxfFileName,
        _bstr_t bstrDraftFileLocation,
        _bstr_t bstrDraftTemplateFile,
        _bstr_t bstrclsidDoc );
    HRESULT CreateSEDocumentFromForeignFile (
        _bstr_t bstrForeignFilePath,
        _bstr_t bstrSEFileLocation,
        _bstr_t bstrTemplatePath,
        _bstr_t bstrClsid,
        enum BulkMigrationTypeConstants MigrationType );
    _bstr_t GetTemplateFileName (
        enum DocumentTypeConstants * DocType,
        const _variant_t & FileFilter = vtMissing );
    _bstr_t GetDefaultTemplatePath (
        enum DocumentTypeConstants DocType );
    HRESULT SetDefaultTemplatePath (
        enum DocumentTypeConstants DocType,
        _bstr_t TemplatePath );
    HRESULT DoIdle ( );
    MatTablePtr GetMaterialTable ( );
    IUnknownPtr GetNewFileUIEvents ( );
    HRESULT SEAdminUpdate ( );
    IUnknownPtr GetShortcutMenuEvents ( );
    VARIANT_BOOL GetApprenticeMode ( );
    void PutApprenticeMode (
        VARIANT_BOOL ApprenticeModeOn );
    VARIANT_BOOL GetShowStartupScreen ( );
    void PutShowStartupScreen (
        VARIANT_BOOL ShowStartupScreen );
    SolidEdgeTCEPtr GetSolidEdgeTCE ( );
    SolidEdgeInsightXTPtr GetSolidEdgeInsightXT ( );
    VARIANT_BOOL GetIsIdling (
        long MilliSec );
    VARIANT_BOOL GetResolveLink ( );
    void PutResolveLink (
        VARIANT_BOOL ResolveLink );
    HRESULT DisableEventsForGivenAddIn (
        _bstr_t bstrClsid );
    HRESULT SetAddInInterfaces (
        _bstr_t bstrClsid,
        SAFEARRAY * * pSaUnknownPtrs );
    HRESULT EnableEventsForGivenAddIn (
        _bstr_t bstrClsid );
    HRESULT ShowCommand (
        int nCmdID,
        VARIANT_BOOL Highlight );
    int GetProcessID ( );
    IUnknownPtr GetSEECEvents ( );
    IUnknownPtr GetSESPEvents ( );
    IUnknownPtr GetBiDMEvents ( );
    HRESULT WriteDocumentFormulaIntoXML (
        _bstr_t outputXMLPath,
        _bstr_t knownResXMLPath,
        VARIANT_BOOL bDeepTree );
    HRESULT SetBuiltInATPRunningFlagAndATPID (
        VARIANT_BOOL bRunningFlag,
        _bstr_t strATPID );
    HRESULT SetValuesForBIDMCPD (
        VARIANT * pvarListOfValues );
    HRESULT SetMessageForBIDMCPD (
        VARIANT * pvarListOfMessages );
    HRESULT SetBIDMATPInfo (
        _bstr_t bstrATPClassName,
        _bstr_t bstrATPName,
        long ATPId );
    int GetCountOfOpenModelsInFemap ( );
    CustomizationPtr GetCustomization ( );
    IDispatchPtr GetDraftPrintUtility ( );
    HRESULT ArrangeWindows (
        enum ArrangeWindowsStyles Style );
    _variant_t GetOpenFileNameWithOptions (
        unsigned long dwFlagForOpen,
        enum LinksUpdateOption * LinksUpdate,
        BSTR * AltLinkPath,
        enum DocumentAccess * DocAccess,
        enum NotifyOption * OptNotify,
        IDispatch * * DocRelationAutoServer,
        const _variant_t & FileFilter = vtMissing,
        const _variant_t & FilterIndex = vtMissing,
        const _variant_t & Title = vtMissing,
        const _variant_t & IgnoreWarnings = vtMissing );
    HRESULT SEGetFileVersionInfo (
        _bstr_t Filename,
        enum DocumentTypeConstants * DocType,
        BSTR * CreatedVersion,
        BSTR * LastSavedVersion,
        unsigned long * GeometricVersion );
    HRESULT GenerateMasterImportListForDataPrep (
        SAFEARRAY * * psalistOfFilesFolders,
        VARIANT_BOOL IncludeSubFolders,
        unsigned long FileTypes,
        _bstr_t TimeStamp,
        _bstr_t WorkingFolderLocation,
        BSTR * OrderedCSVFilePath,
        BSTR * UnOrderedCSVFilePath,
        BSTR * BrokenLinkXMLFilePath,
        int * iNumberOfBrokenLinks,
        BSTR * LinkReportFilePath,
        BSTR * ErrorMsg,
        enum GenerateMasterImportListError * ErrCode );
    _variant_t FindWhereUsedDocuments (
        const _variant_t & DocumentPathName,
        SAFEARRAY * * psalistOfDirectories,
        VARIANT_BOOL IncludeSubFolders,
        SAFEARRAY * * psaFilterList );
    _variant_t QuerySystemInformation (
        _bstr_t Search );
    HRESULT DisableBuilInDataMgmt (
        VARIANT_BOOL bDisableBuiltInDM );
    _bstr_t GetRegistryPath ( );
    _bstr_t GetAppDataFolder ( );
    HRESULT GetRevisionLinkInfo (
        _bstr_t bstrFilePath,
        VARIANT * pVarRevisionRoot,
        VARIANT * pVarRevisedFrom );
    HRESULT GetRevisionsHistory (
        _bstr_t PathName,
        SAFEARRAY * * psaScope,
        VARIANT * psaRevHistoryFileNameList,
        VARIANT * psaRevHistoryRevisionFromList );
    HRESULT OpenDraft ( );
    HRESULT GetLatestRevision (
        _bstr_t PathName,
        SAFEARRAY * * psaScope,
        BSTR * bLatestRevPath,
        BSTR * bLatestReleasedRevPath );
    HRESULT GetTopLevelAssemblyFileNames (
        SAFEARRAY * * FileNames,
        SAFEARRAY * * TopLevelAssemblyFileNames );
    HRESULT FindSEDocumentsContainingText (
        _bstr_t text_to_search,
        SAFEARRAY * * psaScope,
        _bstr_t file_types,
        VARIANT_BOOL bIncludeSubFolders,
        SAFEARRAY * * FilesFoundInSearch );
    HRESULT ResetConfigFile (
        enum ConfigResetType eResetType,
        enum ConfigForForeignFileType eConfigFileType,
        enum FileTranslationMode eTranslationMode,
        _bstr_t GroupName,
        VARIANT * pFile = &vtMissing,
        VARIANT * pTemplateName = &vtMissing );
    long GetNextDocumentNumbers (
        int countOfFiles,
        VARIANT * pVarPrefix,
        VARIANT * pVarDocNumbs );
    HRESULT Get_Set_UseBiDM_SEOption (
        VARIANT_BOOL bGet,
        VARIANT_BOOL * iValue );
    HRESULT Get_Set_FileNamingRule (
        VARIANT_BOOL bGet,
        VARIANT_BOOL * bValue );
    _bstr_t GetDocNameFormulaForFile (
        _bstr_t bFilename );
    HRESULT BiDM_RegisterCustomProps (
        VARIANT_BOOL bProcessCustomPropsFromPropSeed,
        VARIANT_BOOL bProcessCustomPropsFromTemplates );
    HRESULT PerformSolidEdgeWorkflow (
        _bstr_t bstrFilePath,
        struct SolidEdgeWorkflowInfo * pSEWorkflowInfo );
    HRESULT GetSolidEdgeWorkflowInformation (
        _bstr_t bstrFilePath,
        struct SolidEdgeWorkflowQueryInfo * pSEWorkflowQueryInfo );
    HRESULT SuspendMRU ( );
    HRESULT ResumeMRU ( );
    HRESULT ClearMRU ( );
    HRESULT AbortCommand (
        VARIANT_BOOL AbortAllCommands );
    VARIANT_BOOL Publish3DPDF (
        _bstr_t bstrInputFileOrFolderPath,
        _bstr_t bstr3DPDFTemplateFile,
        VARIANT_BOOL bIncludeSubFolders,
        _bstr_t bstrOutputFolderPath,
        _bstr_t bstr3DPDFFileName,
        VARIANT_BOOL bOpenPDFAfterPublish,
        VARIANT_BOOL bPublishHTML,
        VARIANT_BOOL bAddNextPrevButtons,
        VARIANT_BOOL bAddFileCustomPropsToPDF,
        VARIANT_BOOL bSelectAllPMIModelViewsForPDF,
        _bstr_t bstrDefaultModelView,
        VARIANT_BOOL bGenAndAttachSTEPAP242,
        VARIANT_BOOL bGenAndAttachJT,
        const _variant_t & ListOfAttachments = vtMissing );
    VARIANT_BOOL ConvertByFilePath (
        _bstr_t InputFileOrFolderPath,
        _bstr_t OutputFileOrFolderPath );
    VARIANT_BOOL GetCommandPredictionLearningMode ( );
    void PutCommandPredictionLearningMode (
        VARIANT_BOOL pbEnabled );
    _bstr_t GetSoldToID ( );
    HRESULT GetListOfTopLevelAssembliesFromFolder (
        _bstr_t FolderPath,
        SAFEARRAY * * TopAssembliesList );
    _bstr_t GetLicenseType ( );
    HRESULT GenerateSourceImportListForDataPrep (
        SAFEARRAY * * psalistOfFilesFolders,
        VARIANT_BOOL IncludeSubFolders,
        unsigned long FileTypes,
        _bstr_t TimeStamp,
        _bstr_t WorkingFolderLocation,
        BSTR * OrderedCSVFilePath,
        BSTR * UnOrderedCSVFilePath,
        BSTR * BrokenLinkXMLFilePath,
        int * iNumberOfBrokenLinks,
        BSTR * LinkReportFilePath,
        BSTR * ErrorMsg,
        enum GenerateSourceImportListError * ErrCode );
    long GetActiveFramehWnd ( );
    DynamicVisualizationPtr GetDynamicVisualization ( );
    __int64 GetLicenseHandle ( );
    HRESULT OpenNoteLibrary ( );
    HRESULT CloseNoteLibrary ( );
    HRESULT GetSavedNoteList (
        SAFEARRAY * * saSavedNote );
    IUnknownPtr GetSavedNote (
        _bstr_t bstrNoteName );
    HRESULT AddNote (
        _bstr_t bstrNoteName,
        _bstr_t bstrText,
        VARIANT_BOOL bNoteOverWrite );
    VARIANT_BOOL Publish3DPDFEx (
        _bstr_t bstrInputFileOrFolderPath,
        _bstr_t bstr3DPDFTemplateFile,
        VARIANT_BOOL bIncludeSubFolders,
        _bstr_t bstrOutputFolderPath,
        _bstr_t bstr3DPDFFileName,
        VARIANT_BOOL bOpenPDFAfterPublish,
        VARIANT_BOOL bPublishHTML,
        VARIANT_BOOL bAddNextPrevButtons,
        VARIANT_BOOL bAddFileCustomPropsToPDF,
        VARIANT_BOOL bSelectAllPMIModelViewsForPDF,
        _bstr_t bstrDefaultModelView,
        VARIANT_BOOL bGenAndAttachSTEPAP242,
        VARIANT_BOOL bGenAndAttachJT,
        const _variant_t & ListOfAttachments,
        VARIANT_BOOL bSelectAllNamedViewsForPDF,
        const _variant_t & ListOfNamedViews = vtMissing,
        const _variant_t & ListOfPMIModelViews = vtMissing );
    long GetActiveCommand ( );
    IUnknownPtr GetOpenNonSolidEdgeFileUIEvents ( );
    VARIANT_BOOL LicenseCheck (
        enum SELicenseCheck Type,
        _bstr_t Feature );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Activate ( ) = 0;
      virtual HRESULT __stdcall get_ActiveDocument (
        /*[out,retval]*/ IDispatch * * ActiveDocument ) = 0;
      virtual HRESULT __stdcall get_ActiveEnvironment (
        /*[out,retval]*/ BSTR * ActiveEnvironment ) = 0;
      virtual HRESULT __stdcall get_ActivePrinter (
        /*[out,retval]*/ BSTR * ActivePrinter ) = 0;
      virtual HRESULT __stdcall get_ActiveSelectSet (
        /*[out,retval]*/ struct SelectSet * * ActiveSelectSet ) = 0;
      virtual HRESULT __stdcall get_ActiveStatusBarPart (
        /*[out,retval]*/ int * ActiveStatusBarPart ) = 0;
      virtual HRESULT __stdcall put_ActiveStatusBarPart (
        /*[in]*/ int ActiveStatusBarPart ) = 0;
      virtual HRESULT __stdcall get_ActiveWindow (
        /*[out,retval]*/ IDispatch * * ActiveWindow ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * Caption ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR Caption ) = 0;
      virtual HRESULT __stdcall get_DefaultFilePath (
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall put_DefaultFilePath (
        /*[in]*/ BSTR Path ) = 0;
      virtual HRESULT __stdcall put_DelayCompute (
        /*[in]*/ VARIANT_BOOL DelayCompute ) = 0;
      virtual HRESULT __stdcall get_DelayCompute (
        /*[out,retval]*/ VARIANT_BOOL * DelayCompute ) = 0;
      virtual HRESULT __stdcall get_DisplayAlerts (
        /*[out,retval]*/ VARIANT_BOOL * DisplayAlerts ) = 0;
      virtual HRESULT __stdcall put_DisplayAlerts (
        /*[in]*/ VARIANT_BOOL DisplayAlerts ) = 0;
      virtual HRESULT __stdcall get_DisplayFullScreen (
        /*[out,retval]*/ VARIANT_BOOL * DisplayFullScreen ) = 0;
      virtual HRESULT __stdcall put_DisplayFullScreen (
        /*[in]*/ VARIANT_BOOL DisplayFullScreen ) = 0;
      virtual HRESULT __stdcall get_DisplayRecentFiles (
        /*[out,retval]*/ VARIANT_BOOL * DisplayRecentFiles ) = 0;
      virtual HRESULT __stdcall put_DisplayRecentFiles (
        /*[in]*/ VARIANT_BOOL DisplayRecentFiles ) = 0;
      virtual HRESULT __stdcall get_DisplayRecentFilesCount (
        /*[out,retval]*/ long * DisplayRecentFilesCount ) = 0;
      virtual HRESULT __stdcall put_DisplayRecentFilesCount (
        /*[in]*/ long DisplayRecentFilesCount ) = 0;
      virtual HRESULT __stdcall get_Documents (
        /*[out,retval]*/ struct Documents * * Documents ) = 0;
      virtual HRESULT __stdcall get_Environments (
        /*[out,retval]*/ struct Environments * * Environments ) = 0;
      virtual HRESULT __stdcall raw_SEGetOpenFileName (
        /*[out]*/ enum LinksUpdateOption * LinksUpdate,
        /*[out]*/ BSTR * AltLinkPath,
        /*[out]*/ enum DocumentAccess * DocAccess,
        /*[out]*/ enum NotifyOption * OptNotify,
        /*[out]*/ IDispatch * * DocRelationAutoServer,
        /*[in]*/ VARIANT FileFilter,
        /*[in]*/ VARIANT FilterIndex,
        /*[in]*/ VARIANT Title,
        /*[in]*/ VARIANT IgnoreWarnings,
        /*[out,retval]*/ VARIANT * ReturnedName ) = 0;
      virtual long __stdcall SearchDocuments (
        /*[in]*/ VARIANT_BOOL bUseSearchScope,
        /*[in]*/ BSTR bstrFolders,
        /*[in]*/ VARIANT_BOOL bIncludeSubFolders,
        /*[out]*/ VARIANT * ListOfFoundDocuments,
        /*[out]*/ long * iNumDocsFound,
        /*[in]*/ VARIANT varFileFilterOrText,
        /*[in]*/ VARIANT PropertyList,
        /*[in]*/ VARIANT ConditionList,
        /*[in]*/ VARIANT PropertyValueList,
        /*[in]*/ VARIANT varNumProps,
        /*[in]*/ VARIANT varCheckModified,
        /*[in]*/ VARIANT varNumberOfDays,
        /*[out]*/ VARIANT * ListOfTitles,
        /*[out]*/ VARIANT * ListOfSubjects,
        /*[out]*/ VARIANT * ListOfModifiedDates ) = 0;
      virtual HRESULT __stdcall raw_GetSaveAsFileName (
        /*[out]*/ int * LinkSaveOption,
        /*[out]*/ long * SelectedFilter,
        /*[in]*/ VARIANT InitialFilename,
        /*[in]*/ VARIANT FileFilter,
        /*[in]*/ VARIANT FilterIndex,
        /*[in]*/ VARIANT Title,
        /*[in]*/ VARIANT IsTemplate,
        /*[out,retval]*/ VARIANT * ReturnedName ) = 0;
      virtual HRESULT __stdcall raw_FindFile (
        /*[out,retval]*/ VARIANT * ReturnedNameOrBool ) = 0;
      virtual HRESULT __stdcall raw_GetDirectoryName (
        /*[out,retval]*/ VARIANT * ReturnedNameOrBool ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ int * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ int Height ) = 0;
      virtual HRESULT __stdcall get_hWnd (
        /*[out,retval]*/ long * hWnd ) = 0;
      virtual HRESULT __stdcall get_Interactive (
        /*[out,retval]*/ VARIANT_BOOL * Interactive ) = 0;
      virtual HRESULT __stdcall put_Interactive (
        /*[in]*/ VARIANT_BOOL Interactive ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ int * Left ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ int Left ) = 0;
      virtual HRESULT __stdcall raw_MailLogoff ( ) = 0;
      virtual HRESULT __stdcall raw_MailLogon (
        /*[in]*/ VARIANT Name = vtMissing,
        /*[in]*/ VARIANT Password = vtMissing,
        /*[in]*/ VARIANT DownloadNewMail = vtMissing ) = 0;
      virtual HRESULT __stdcall get_MailSession (
        /*[out,retval]*/ long * MailSession ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct Application * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Quit ( ) = 0;
      virtual HRESULT __stdcall get_ScreenUpdating (
        /*[out,retval]*/ VARIANT_BOOL * ScreenUpdating ) = 0;
      virtual HRESULT __stdcall put_ScreenUpdating (
        /*[in]*/ VARIANT_BOOL ScreenUpdating ) = 0;
      virtual HRESULT __stdcall get_StatusBar (
        /*[out,retval]*/ BSTR * StatusBar ) = 0;
      virtual HRESULT __stdcall put_StatusBar (
        /*[in]*/ BSTR StatusBar ) = 0;
      virtual HRESULT __stdcall get_StatusBarDelayUpdate (
        /*[out,retval]*/ VARIANT_BOOL * StatusBarDelayUpdate ) = 0;
      virtual HRESULT __stdcall put_StatusBarDelayUpdate (
        /*[in]*/ VARIANT_BOOL StatusBarDelayUpdate ) = 0;
      virtual HRESULT __stdcall get_StatusBarHeight (
        /*[out,retval]*/ int * StatusBarHeight ) = 0;
      virtual HRESULT __stdcall get_StatusBarPartCount (
        /*[out,retval]*/ int * StatusBarPartCount ) = 0;
      virtual HRESULT __stdcall put_StatusBarPartCount (
        /*[in]*/ int StatusBarPartCount ) = 0;
      virtual HRESULT __stdcall get_StatusBarPartWidth (
        /*[out,retval]*/ int * StatusBarPartWidth ) = 0;
      virtual HRESULT __stdcall put_StatusBarPartWidth (
        /*[in]*/ int StatusBarPartWidth ) = 0;
      virtual HRESULT __stdcall get_StatusBarVisible (
        /*[out,retval]*/ VARIANT_BOOL * StatusBarVisible ) = 0;
      virtual HRESULT __stdcall put_StatusBarVisible (
        /*[in]*/ VARIANT_BOOL StatusBarVisible ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ int * Top ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ int Top ) = 0;
      virtual HRESULT __stdcall get_UsableHeight (
        /*[out,retval]*/ int * UsableHeight ) = 0;
      virtual HRESULT __stdcall get_UsableWidth (
        /*[out,retval]*/ int * UsableWidth ) = 0;
      virtual HRESULT __stdcall get_UserName (
        /*[out,retval]*/ BSTR * UserName ) = 0;
      virtual HRESULT __stdcall put_UserName (
        /*[in]*/ BSTR UserName ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall get_Version (
        /*[out,retval]*/ BSTR * Version ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ int * Width ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ int Width ) = 0;
      virtual HRESULT __stdcall get_Windows (
        /*[out,retval]*/ struct Windows * * Windows ) = 0;
      virtual HRESULT __stdcall get_WindowState (
        /*[out,retval]*/ int * WindowState ) = 0;
      virtual HRESULT __stdcall put_WindowState (
        /*[in]*/ int WindowState ) = 0;
      virtual HRESULT __stdcall get_ApplicationEvents (
        /*[out,retval]*/ struct IUnknown * * Events ) = 0;
      virtual HRESULT __stdcall get_ApplicationWindowEvents (
        /*[out,retval]*/ struct IUnknown * * WindowEvents ) = 0;
      virtual HRESULT __stdcall get_ActiveDocumentType (
        /*[out,retval]*/ enum DocumentTypeConstants * Type ) = 0;
      virtual HRESULT __stdcall get_FileUIEvents (
        /*[out,retval]*/ struct IUnknown * * Events ) = 0;
      virtual HRESULT __stdcall get_BeforeFileSaveAsEvents (
        /*[out,retval]*/ struct IUnknown * * Events ) = 0;
      virtual HRESULT __stdcall raw_StartCommand (
        /*[in]*/ enum SolidEdgeCommandConstants CommandID ) = 0;
      virtual HRESULT __stdcall raw_CommandEnabled (
        /*[in]*/ int CommandID,
        /*[in]*/ BSTR strEnvironment,
        /*[out]*/ VARIANT_BOOL * bLicensed,
        /*[out]*/ VARIANT_BOOL * bUnknownCmd,
        /*[out,retval]*/ VARIANT_BOOL * bEnabled ) = 0;
      virtual HRESULT __stdcall raw_CreateCommand (
        /*[in]*/ long CmdFlags,
        /*[out,retval]*/ struct DISECommand * * Cmd ) = 0;
      virtual HRESULT __stdcall raw_ReplaceReference (
        /*[in]*/ VARIANT FromReference = vtMissing,
        /*[in]*/ VARIANT ToReference = vtMissing,
        /*[in]*/ VARIANT Scope = vtMissing,
        /*[in]*/ VARIANT Recursive = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_RunMacro (
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall get_AddIns (
        /*[out,retval]*/ struct AddIns * * AddIns ) = 0;
      virtual HRESULT __stdcall get_EnableStereo (
        /*[out,retval]*/ VARIANT_BOOL * EnableStereo ) = 0;
      virtual HRESULT __stdcall put_EnableStereo (
        /*[in]*/ VARIANT_BOOL EnableStereo ) = 0;
      virtual HRESULT __stdcall get_EdgeBarVisible (
        /*[out,retval]*/ VARIANT_BOOL * EdgeBarVisible ) = 0;
      virtual HRESULT __stdcall put_EdgeBarVisible (
        /*[in]*/ VARIANT_BOOL EdgeBarVisible ) = 0;
      virtual HRESULT __stdcall get_FeatureLibraryEvents (
        /*[out,retval]*/ struct IUnknown * * Events ) = 0;
      virtual HRESULT __stdcall raw_GetGlobalParameter (
        /*[in]*/ enum ApplicationGlobalConstants Parameter,
        /*[in,out]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall raw_SetGlobalParameter (
        /*[in]*/ enum ApplicationGlobalConstants Parameter,
        /*[in]*/ VARIANT Value ) = 0;
      virtual HRESULT __stdcall get_ActiveObject (
        /*[in]*/ enum SeObjectType Type,
        /*[out,retval]*/ IDispatch * * ActiveObject ) = 0;
      virtual HRESULT __stdcall get_Insight (
        /*[out,retval]*/ struct Insight * * InsightObject ) = 0;
      virtual HRESULT __stdcall get_ApplicationV8AfterDocumentOpenEvent (
        /*[out,retval]*/ struct IUnknown * * EventObject ) = 0;
      virtual HRESULT __stdcall raw_SetOLERequestPendingTimeout (
        /*[in]*/ VARIANT SetOLERequestPendingTimeout = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_SetOLEServerBusyTimeout (
        /*[in]*/ VARIANT SetOLEServerBusyTimeout = vtMissing ) = 0;
      virtual HRESULT __stdcall get_FeatureSelectedFromPFEvents (
        /*[out,retval]*/ struct IUnknown * * Events ) = 0;
      virtual HRESULT __stdcall raw_CreateSEDocumentFromTDMAuto (
        /*[in]*/ BSTR bstrHostName,
        /*[in]*/ BSTR bstrServerName,
        /*[in]*/ BSTR bstrFolderLocation,
        /*[in]*/ BSTR bstrProject,
        /*[in]*/ BSTR bstrLibrary,
        /*[in]*/ BSTR bstrItemGUID,
        /*[in]*/ BSTR bstrVersionGUID,
        /*[in]*/ BSTR bstrVersionNumber,
        /*[in]*/ enum DocumentTypeConstants SEDocType,
        /*[in]*/ BSTR bstrAssemblyTemplate,
        /*[in]*/ BSTR bstrPartTemplate ) = 0;
      virtual HRESULT __stdcall raw_CreateSEDraftDocFromDXFAuto (
        /*[in]*/ BSTR bstrDxfFileName,
        /*[in]*/ BSTR bstrDraftFileLocation,
        /*[in]*/ BSTR bstrDraftTemplateFile,
        /*[in]*/ BSTR bstrclsidDoc ) = 0;
      virtual HRESULT __stdcall raw_CreateSEDocumentFromForeignFile (
        /*[in]*/ BSTR bstrForeignFilePath,
        /*[in]*/ BSTR bstrSEFileLocation,
        /*[in]*/ BSTR bstrTemplatePath,
        /*[in]*/ BSTR bstrClsid,
        /*[in]*/ enum BulkMigrationTypeConstants MigrationType ) = 0;
      virtual HRESULT __stdcall raw_GetTemplateFileName (
        /*[out]*/ enum DocumentTypeConstants * DocType,
        /*[in]*/ VARIANT FileFilter,
        /*[out,retval]*/ BSTR * ReturnedName ) = 0;
      virtual HRESULT __stdcall raw_GetDefaultTemplatePath (
        /*[in]*/ enum DocumentTypeConstants DocType,
        /*[out,retval]*/ BSTR * TemplatePath ) = 0;
      virtual HRESULT __stdcall raw_SetDefaultTemplatePath (
        /*[in]*/ enum DocumentTypeConstants DocType,
        /*[in]*/ BSTR TemplatePath ) = 0;
      virtual HRESULT __stdcall raw_DoIdle ( ) = 0;
      virtual HRESULT __stdcall raw_GetMaterialTable (
        /*[out,retval]*/ struct MatTable * * MatTable ) = 0;
      virtual HRESULT __stdcall get_NewFileUIEvents (
        /*[out,retval]*/ struct IUnknown * * Events ) = 0;
      virtual HRESULT __stdcall raw_SEAdminUpdate ( ) = 0;
      virtual HRESULT __stdcall get_ShortcutMenuEvents (
        /*[out,retval]*/ struct IUnknown * * Events ) = 0;
      virtual HRESULT __stdcall get_ApprenticeMode (
        /*[out,retval]*/ VARIANT_BOOL * ApprenticeModeOn ) = 0;
      virtual HRESULT __stdcall put_ApprenticeMode (
        /*[in]*/ VARIANT_BOOL ApprenticeModeOn ) = 0;
      virtual HRESULT __stdcall get_ShowStartupScreen (
        /*[out,retval]*/ VARIANT_BOOL * ShowStartupScreen ) = 0;
      virtual HRESULT __stdcall put_ShowStartupScreen (
        /*[in]*/ VARIANT_BOOL ShowStartupScreen ) = 0;
      virtual HRESULT __stdcall get_SolidEdgeTCE (
        /*[out,retval]*/ struct SolidEdgeTCE * * SolidEdgeTCEObject ) = 0;
      virtual HRESULT __stdcall get_SolidEdgeInsightXT (
        /*[out,retval]*/ struct SolidEdgeInsightXT * * SolidEdgeInsightXTObject ) = 0;
      virtual HRESULT __stdcall get_IsIdling (
        /*[in]*/ long MilliSec,
        /*[out,retval]*/ VARIANT_BOOL * IsIdling ) = 0;
      virtual HRESULT __stdcall get_ResolveLink (
        /*[out,retval]*/ VARIANT_BOOL * ResolveLink ) = 0;
      virtual HRESULT __stdcall put_ResolveLink (
        /*[in]*/ VARIANT_BOOL ResolveLink ) = 0;
      virtual HRESULT __stdcall raw_DisableEventsForGivenAddIn (
        /*[in]*/ BSTR bstrClsid ) = 0;
      virtual HRESULT __stdcall raw_SetAddInInterfaces (
        /*[in]*/ BSTR bstrClsid,
        /*[in]*/ SAFEARRAY * * pSaUnknownPtrs ) = 0;
      virtual HRESULT __stdcall raw_EnableEventsForGivenAddIn (
        /*[in]*/ BSTR bstrClsid ) = 0;
      virtual HRESULT __stdcall raw_ShowCommand (
        /*[in]*/ int nCmdID,
        /*[in]*/ VARIANT_BOOL Highlight ) = 0;
      virtual HRESULT __stdcall get_ProcessID (
        /*[out,retval]*/ int * ProcessID ) = 0;
      virtual HRESULT __stdcall get_SEECEvents (
        /*[out,retval]*/ struct IUnknown * * Events ) = 0;
      virtual HRESULT __stdcall get_SESPEvents (
        /*[out,retval]*/ struct IUnknown * * Events ) = 0;
      virtual HRESULT __stdcall get_BiDMEvents (
        /*[out,retval]*/ struct IUnknown * * Events ) = 0;
      virtual HRESULT __stdcall raw_WriteDocumentFormulaIntoXML (
        /*[in]*/ BSTR outputXMLPath,
        /*[in]*/ BSTR knownResXMLPath,
        /*[in]*/ VARIANT_BOOL bDeepTree ) = 0;
      virtual HRESULT __stdcall raw_SetBuiltInATPRunningFlagAndATPID (
        /*[in]*/ VARIANT_BOOL bRunningFlag,
        /*[in]*/ BSTR strATPID ) = 0;
      virtual HRESULT __stdcall raw_SetValuesForBIDMCPD (
        /*[in]*/ VARIANT * pvarListOfValues ) = 0;
      virtual HRESULT __stdcall raw_SetMessageForBIDMCPD (
        /*[in]*/ VARIANT * pvarListOfMessages ) = 0;
      virtual HRESULT __stdcall raw_SetBIDMATPInfo (
        /*[in]*/ BSTR bstrATPClassName,
        /*[in]*/ BSTR bstrATPName,
        /*[in]*/ long ATPId ) = 0;
      virtual HRESULT __stdcall raw_GetCountOfOpenModelsInFemap (
        /*[out,retval]*/ int * nOpenModelsInFemap ) = 0;
      virtual HRESULT __stdcall get_Customization (
        /*[out,retval]*/ struct Customization * * Customization ) = 0;
      virtual HRESULT __stdcall raw_GetDraftPrintUtility (
        /*[out,retval]*/ IDispatch * * DraftPrintUtility ) = 0;
      virtual HRESULT __stdcall raw_ArrangeWindows (
        /*[in]*/ enum ArrangeWindowsStyles Style ) = 0;
      virtual HRESULT __stdcall raw_GetOpenFileNameWithOptions (
        /*[in]*/ unsigned long dwFlagForOpen,
        /*[out]*/ enum LinksUpdateOption * LinksUpdate,
        /*[out]*/ BSTR * AltLinkPath,
        /*[out]*/ enum DocumentAccess * DocAccess,
        /*[out]*/ enum NotifyOption * OptNotify,
        /*[out]*/ IDispatch * * DocRelationAutoServer,
        /*[in]*/ VARIANT FileFilter,
        /*[in]*/ VARIANT FilterIndex,
        /*[in]*/ VARIANT Title,
        /*[in]*/ VARIANT IgnoreWarnings,
        /*[out,retval]*/ VARIANT * ReturnedName ) = 0;
      virtual HRESULT __stdcall raw_SEGetFileVersionInfo (
        /*[in]*/ BSTR Filename,
        /*[out]*/ enum DocumentTypeConstants * DocType,
        /*[out]*/ BSTR * CreatedVersion,
        /*[out]*/ BSTR * LastSavedVersion,
        /*[out]*/ unsigned long * GeometricVersion ) = 0;
      virtual HRESULT __stdcall raw_GenerateMasterImportListForDataPrep (
        /*[in]*/ SAFEARRAY * * psalistOfFilesFolders,
        /*[in]*/ VARIANT_BOOL IncludeSubFolders,
        /*[in]*/ unsigned long FileTypes,
        /*[in]*/ BSTR TimeStamp,
        /*[in]*/ BSTR WorkingFolderLocation,
        /*[out]*/ BSTR * OrderedCSVFilePath,
        /*[out]*/ BSTR * UnOrderedCSVFilePath,
        /*[out]*/ BSTR * BrokenLinkXMLFilePath,
        /*[out]*/ int * iNumberOfBrokenLinks,
        /*[out]*/ BSTR * LinkReportFilePath,
        /*[out]*/ BSTR * ErrorMsg,
        /*[out]*/ enum GenerateMasterImportListError * ErrCode ) = 0;
      virtual HRESULT __stdcall raw_FindWhereUsedDocuments (
        /*[in]*/ VARIANT DocumentPathName,
        /*[in]*/ SAFEARRAY * * psalistOfDirectories,
        /*[in]*/ VARIANT_BOOL IncludeSubFolders,
        /*[in]*/ SAFEARRAY * * psaFilterList,
        /*[out,retval]*/ VARIANT * pVarResultSetWU ) = 0;
      virtual HRESULT __stdcall raw_QuerySystemInformation (
        /*[in]*/ BSTR Search,
        /*[out,retval]*/ VARIANT * Results ) = 0;
      virtual HRESULT __stdcall raw_DisableBuilInDataMgmt (
        /*[in]*/ VARIANT_BOOL bDisableBuiltInDM ) = 0;
      virtual HRESULT __stdcall get_RegistryPath (
        /*[out,retval]*/ BSTR * RegistryPath ) = 0;
      virtual HRESULT __stdcall get_AppDataFolder (
        /*[out,retval]*/ BSTR * AppDataFolder ) = 0;
      virtual HRESULT __stdcall raw_GetRevisionLinkInfo (
        /*[in]*/ BSTR bstrFilePath,
        /*[out]*/ VARIANT * pVarRevisionRoot,
        /*[out]*/ VARIANT * pVarRevisedFrom ) = 0;
      virtual HRESULT __stdcall raw_GetRevisionsHistory (
        /*[in]*/ BSTR PathName,
        /*[in]*/ SAFEARRAY * * psaScope,
        /*[out]*/ VARIANT * psaRevHistoryFileNameList,
        /*[out]*/ VARIANT * psaRevHistoryRevisionFromList ) = 0;
      virtual HRESULT __stdcall raw_OpenDraft ( ) = 0;
      virtual HRESULT __stdcall raw_GetLatestRevision (
        /*[in]*/ BSTR PathName,
        /*[in]*/ SAFEARRAY * * psaScope,
        /*[out]*/ BSTR * bLatestRevPath,
        /*[out]*/ BSTR * bLatestReleasedRevPath ) = 0;
      virtual HRESULT __stdcall raw_GetTopLevelAssemblyFileNames (
        /*[in]*/ SAFEARRAY * * FileNames,
        /*[out]*/ SAFEARRAY * * TopLevelAssemblyFileNames ) = 0;
      virtual HRESULT __stdcall raw_FindSEDocumentsContainingText (
        /*[in]*/ BSTR text_to_search,
        /*[in]*/ SAFEARRAY * * psaScope,
        /*[in]*/ BSTR file_types,
        /*[in]*/ VARIANT_BOOL bIncludeSubFolders,
        /*[out]*/ SAFEARRAY * * FilesFoundInSearch ) = 0;
      virtual HRESULT __stdcall raw_ResetConfigFile (
        /*[in]*/ enum ConfigResetType eResetType,
        /*[in]*/ enum ConfigForForeignFileType eConfigFileType,
        /*[in]*/ enum FileTranslationMode eTranslationMode,
        /*[in]*/ BSTR GroupName,
        /*[in]*/ VARIANT * pFile = &vtMissing,
        /*[in]*/ VARIANT * pTemplateName = &vtMissing ) = 0;
      virtual HRESULT __stdcall raw_GetNextDocumentNumbers (
        /*[in]*/ int countOfFiles,
        /*[out]*/ VARIANT * pVarPrefix,
        /*[out]*/ VARIANT * pVarDocNumbs,
        /*[out,retval]*/ long * iRetValue ) = 0;
      virtual HRESULT __stdcall raw_Get_Set_UseBiDM_SEOption (
        /*[in]*/ VARIANT_BOOL bGet,
        /*[out]*/ VARIANT_BOOL * iValue ) = 0;
      virtual HRESULT __stdcall raw_Get_Set_FileNamingRule (
        /*[in]*/ VARIANT_BOOL bGet,
        /*[out]*/ VARIANT_BOOL * bValue ) = 0;
      virtual HRESULT __stdcall raw_GetDocNameFormulaForFile (
        /*[in]*/ BSTR bFilename,
        /*[out,retval]*/ BSTR * bstrDocFormula ) = 0;
      virtual HRESULT __stdcall raw_BiDM_RegisterCustomProps (
        /*[in]*/ VARIANT_BOOL bProcessCustomPropsFromPropSeed,
        /*[in]*/ VARIANT_BOOL bProcessCustomPropsFromTemplates ) = 0;
      virtual HRESULT __stdcall raw_PerformSolidEdgeWorkflow (
        /*[in]*/ BSTR bstrFilePath,
        /*[in,out]*/ struct SolidEdgeWorkflowInfo * pSEWorkflowInfo ) = 0;
      virtual HRESULT __stdcall raw_GetSolidEdgeWorkflowInformation (
        /*[in]*/ BSTR bstrFilePath,
        /*[out]*/ struct SolidEdgeWorkflowQueryInfo * pSEWorkflowQueryInfo ) = 0;
      virtual HRESULT __stdcall raw_SuspendMRU ( ) = 0;
      virtual HRESULT __stdcall raw_ResumeMRU ( ) = 0;
      virtual HRESULT __stdcall raw_ClearMRU ( ) = 0;
      virtual HRESULT __stdcall raw_AbortCommand (
        /*[in]*/ VARIANT_BOOL AbortAllCommands ) = 0;
      virtual HRESULT __stdcall raw_Publish3DPDF (
        /*[in]*/ BSTR bstrInputFileOrFolderPath,
        /*[in]*/ BSTR bstr3DPDFTemplateFile,
        /*[in]*/ VARIANT_BOOL bIncludeSubFolders,
        /*[in]*/ BSTR bstrOutputFolderPath,
        /*[in]*/ BSTR bstr3DPDFFileName,
        /*[in]*/ VARIANT_BOOL bOpenPDFAfterPublish,
        /*[in]*/ VARIANT_BOOL bPublishHTML,
        /*[in]*/ VARIANT_BOOL bAddNextPrevButtons,
        /*[in]*/ VARIANT_BOOL bAddFileCustomPropsToPDF,
        /*[in]*/ VARIANT_BOOL bSelectAllPMIModelViewsForPDF,
        /*[in]*/ BSTR bstrDefaultModelView,
        /*[in]*/ VARIANT_BOOL bGenAndAttachSTEPAP242,
        /*[in]*/ VARIANT_BOOL bGenAndAttachJT,
        /*[in]*/ VARIANT ListOfAttachments,
        /*[out,retval]*/ VARIANT_BOOL * bSuccess ) = 0;
      virtual HRESULT __stdcall raw_ConvertByFilePath (
        /*[in]*/ BSTR InputFileOrFolderPath,
        /*[in]*/ BSTR OutputFileOrFolderPath,
        /*[out,retval]*/ VARIANT_BOOL * bSuccess ) = 0;
      virtual HRESULT __stdcall get_CommandPredictionLearningMode (
        /*[out,retval]*/ VARIANT_BOOL * pbEnabled ) = 0;
      virtual HRESULT __stdcall put_CommandPredictionLearningMode (
        /*[in]*/ VARIANT_BOOL pbEnabled ) = 0;
      virtual HRESULT __stdcall get_SoldToID (
        /*[out,retval]*/ BSTR * SoldToID ) = 0;
      virtual HRESULT __stdcall raw_GetListOfTopLevelAssembliesFromFolder (
        /*[in]*/ BSTR FolderPath,
        /*[out]*/ SAFEARRAY * * TopAssembliesList ) = 0;
      virtual HRESULT __stdcall get_LicenseType (
        /*[out,retval]*/ BSTR * pbstrLicenseType ) = 0;
      virtual HRESULT __stdcall raw_GenerateSourceImportListForDataPrep (
        /*[in]*/ SAFEARRAY * * psalistOfFilesFolders,
        /*[in]*/ VARIANT_BOOL IncludeSubFolders,
        /*[in]*/ unsigned long FileTypes,
        /*[in]*/ BSTR TimeStamp,
        /*[in]*/ BSTR WorkingFolderLocation,
        /*[out]*/ BSTR * OrderedCSVFilePath,
        /*[out]*/ BSTR * UnOrderedCSVFilePath,
        /*[out]*/ BSTR * BrokenLinkXMLFilePath,
        /*[out]*/ int * iNumberOfBrokenLinks,
        /*[out]*/ BSTR * LinkReportFilePath,
        /*[out]*/ BSTR * ErrorMsg,
        /*[out]*/ enum GenerateSourceImportListError * ErrCode ) = 0;
      virtual HRESULT __stdcall get_ActiveFramehWnd (
        /*[out,retval]*/ long * hWnd ) = 0;
      virtual HRESULT __stdcall get_DynamicVisualization (
        /*[out,retval]*/ struct DynamicVisualization * * DynamicVisualizationObject ) = 0;
      virtual HRESULT __stdcall get_LicenseHandle (
        /*[out,retval]*/ __int64 * LicenseHandle ) = 0;
      virtual HRESULT __stdcall raw_OpenNoteLibrary ( ) = 0;
      virtual HRESULT __stdcall raw_CloseNoteLibrary ( ) = 0;
      virtual HRESULT __stdcall raw_GetSavedNoteList (
        /*[out]*/ SAFEARRAY * * saSavedNote ) = 0;
      virtual HRESULT __stdcall raw_GetSavedNote (
        /*[in]*/ BSTR bstrNoteName,
        /*[out,retval]*/ IUnknown * * textBox ) = 0;
      virtual HRESULT __stdcall raw_AddNote (
        /*[in]*/ BSTR bstrNoteName,
        /*[in]*/ BSTR bstrText,
        /*[in]*/ VARIANT_BOOL bNoteOverWrite ) = 0;
      virtual HRESULT __stdcall raw_Publish3DPDFEx (
        /*[in]*/ BSTR bstrInputFileOrFolderPath,
        /*[in]*/ BSTR bstr3DPDFTemplateFile,
        /*[in]*/ VARIANT_BOOL bIncludeSubFolders,
        /*[in]*/ BSTR bstrOutputFolderPath,
        /*[in]*/ BSTR bstr3DPDFFileName,
        /*[in]*/ VARIANT_BOOL bOpenPDFAfterPublish,
        /*[in]*/ VARIANT_BOOL bPublishHTML,
        /*[in]*/ VARIANT_BOOL bAddNextPrevButtons,
        /*[in]*/ VARIANT_BOOL bAddFileCustomPropsToPDF,
        /*[in]*/ VARIANT_BOOL bSelectAllPMIModelViewsForPDF,
        /*[in]*/ BSTR bstrDefaultModelView,
        /*[in]*/ VARIANT_BOOL bGenAndAttachSTEPAP242,
        /*[in]*/ VARIANT_BOOL bGenAndAttachJT,
        /*[in]*/ VARIANT ListOfAttachments,
        /*[in]*/ VARIANT_BOOL bSelectAllNamedViewsForPDF,
        /*[in]*/ VARIANT ListOfNamedViews,
        /*[in]*/ VARIANT ListOfPMIModelViews,
        /*[out,retval]*/ VARIANT_BOOL * bSuccess ) = 0;
      virtual HRESULT __stdcall raw_GetActiveCommand (
        /*[out,retval]*/ long * nCmdID ) = 0;
      virtual HRESULT __stdcall get_OpenNonSolidEdgeFileUIEvents (
        /*[out,retval]*/ struct IUnknown * * Events ) = 0;
      virtual HRESULT __stdcall raw_LicenseCheck (
        /*[in]*/ enum SELicenseCheck Type,
        /*[in]*/ BSTR Feature,
        /*[out,retval]*/ VARIANT_BOOL * Result ) = 0;
};

struct __declspec(uuid("45bae7f1-b014-11d0-98e4-08003616ce02"))
View : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetWindow))
    WindowPtr Window;
    __declspec(property(get=GetDrawDC))
    long DrawDC;
    __declspec(property(get=GetMovieCodec,put=PutMovieCodec))
    _bstr_t MovieCodec;
    __declspec(property(get=GetMovieFrameRate,put=PutMovieFrameRate))
    unsigned long MovieFrameRate;
    __declspec(property(get=GetMovieBitRate,put=PutMovieBitRate))
    unsigned long MovieBitRate;
    __declspec(property(get=GetMovieQuality,put=PutMovieQuality))
    unsigned long MovieQuality;
    __declspec(property(get=GetViewEvents))
    IUnknownPtr ViewEvents;
    __declspec(property(get=GetDisplayEvents))
    IUnknownPtr DisplayEvents;
    __declspec(property(get=GetDisplayEnabled,put=PutDisplayEnabled))
    VARIANT_BOOL DisplayEnabled;
    __declspec(property(get=GetStereoEnabled,put=PutStereoEnabled))
    VARIANT_BOOL StereoEnabled;
    __declspec(property(get=GetStereoAngle,put=PutStereoAngle))
    double StereoAngle;
    __declspec(property(get=GetStereoDeviation,put=PutStereoDeviation))
    double StereoDeviation;
    __declspec(property(get=GetMovieTitle,put=PutMovieTitle))
    _bstr_t MovieTitle;
    __declspec(property(get=GetMovieSubTitle,put=PutMovieSubTitle))
    _bstr_t MovieSubTitle;
    __declspec(property(get=GetMovieCopyright,put=PutMovieCopyright))
    _bstr_t MovieCopyright;
    __declspec(property(get=GetMovieAuthor,put=PutMovieAuthor))
    _bstr_t MovieAuthor;
    __declspec(property(get=GetMovieAuthorURL,put=PutMovieAuthorURL))
    _bstr_t MovieAuthorURL;
    __declspec(property(get=GetMovieDescription,put=PutMovieDescription))
    _bstr_t MovieDescription;
    __declspec(property(get=GetGLDisplayEvents))
    IUnknownPtr GLDisplayEvents;
    __declspec(property(get=GetAnimationEvents))
    IUnknownPtr AnimationEvents;
    __declspec(property(get=GetSharpnessLevel,put=PutSharpnessLevel))
    int SharpnessLevel;
    __declspec(property(get=GetSharpnessLevelCount))
    int SharpnessLevelCount;
    __declspec(property(get=GetCullingEnabled,put=PutCullingEnabled))
    VARIANT_BOOL CullingEnabled;
    __declspec(property(get=GetStyleFallbackEnabled,put=PutStyleFallbackEnabled))
    VARIANT_BOOL StyleFallbackEnabled;
    __declspec(property(get=GetSharpenLevel,put=PutSharpenLevel))
    enum seSharpenLevelConstants SharpenLevel;
    __declspec(property(get=GetSectionPlanesOptions,put=PutSectionPlanesOptions))
    _variant_t SectionPlanesOptions;
    __declspec(property(get=GetGDIBufferModified,put=PutGDIBufferModified))
    VARIANT_BOOL GDIBufferModified;
    __declspec(property(get=GetViewStyle,put=PutViewStyle))
    IDispatchPtr ViewStyle;
    __declspec(property(get=GetStyle,put=PutStyle))
    _bstr_t Style;
    __declspec(property(get=GetRenderModeType,put=PutRenderModeType))
    enum SeRenderModeType RenderModeType;
    __declspec(property(get=GetSilhouettesEnabled,put=PutSilhouettesEnabled))
    VARIANT_BOOL SilhouettesEnabled;
    __declspec(property(get=GetSectionPlanesEnabled,put=PutSectionPlanesEnabled))
    VARIANT_BOOL SectionPlanesEnabled;
    __declspec(property(get=GetRenderEvents))
    IUnknownPtr RenderEvents;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT Fit ( );
    WindowPtr GetWindow ( );
    HRESULT ModelToDC (
        SAFEARRAY * * Matrix );
    HRESULT ModelToView (
        SAFEARRAY * * Matrix );
    HRESULT ViewToGLProjection (
        SAFEARRAY * * Matrix );
    HRESULT Update ( );
    HRESULT ShowDrawDC ( );
    HRESULT SwapBuffers ( );
    long GetDrawDC ( );
    HRESULT GetCamera (
        double * EyeX,
        double * EyeY,
        double * EyeZ,
        double * TargetX,
        double * TargetY,
        double * TargetZ,
        double * UpX,
        double * UpY,
        double * UpZ,
        VARIANT_BOOL * Perspective,
        double * ScaleOrAngle );
    HRESULT BeginCameraDynamics ( );
    HRESULT SetCamera (
        double EyeX,
        double EyeY,
        double EyeZ,
        double TargetX,
        double TargetY,
        double TargetZ,
        double UpX,
        double UpY,
        double UpZ,
        VARIANT_BOOL Perspective,
        double ScaleOrAngle );
    HRESULT EndCameraDynamics ( );
    HRESULT RotateCamera (
        double Angle,
        double CenterX,
        double CenterY,
        double CenterZ,
        double AxisX,
        double AxisY,
        double AxisZ );
    HRESULT PanCamera (
        int dX,
        int dY );
    HRESULT ZoomCamera (
        double __MIDL___IViewAuto0000 );
    HRESULT OrientCamera (
        int cmdtype,
        int X1,
        int Y1,
        int X2,
        int Y2,
        int X3,
        int Y3 );
    IUnknownPtr GetViewEvents ( );
    IUnknownPtr GetDisplayEvents ( );
    IUnknownPtr GetGLDisplayEvents ( );
    IUnknownPtr GetRenderEvents ( );
    IUnknownPtr GetAnimationEvents ( );
    VARIANT_BOOL GetDisplayEnabled ( );
    void PutDisplayEnabled (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetCullingEnabled ( );
    void PutCullingEnabled (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetStyleFallbackEnabled ( );
    void PutStyleFallbackEnabled (
        VARIANT_BOOL _arg1 );
    int GetSharpnessLevelCount ( );
    int GetSharpnessLevel ( );
    void PutSharpnessLevel (
        int _arg1 );
    VARIANT_BOOL GetStereoEnabled ( );
    void PutStereoEnabled (
        VARIANT_BOOL _arg1 );
    double GetStereoAngle ( );
    void PutStereoAngle (
        double _arg1 );
    double GetStereoDeviation ( );
    void PutStereoDeviation (
        double _arg1 );
    HRESULT TransformModelToDC (
        double ModelX,
        double ModelY,
        double ModelZ,
        long * DeviceX,
        long * DeviceY );
    HRESULT TransformDCToModel (
        long DeviceX,
        long DeviceY,
        double * ModelX,
        double * ModelY,
        double * ModelZ );
    HRESULT TransformModelToView (
        double ModelX,
        double ModelY,
        double ModelZ,
        double * ViewX,
        double * ViewY,
        double * ViewZ );
    HRESULT TransformViewToModel (
        double ViewX,
        double ViewY,
        double ViewZ,
        double * ModelX,
        double * ModelY,
        double * ModelZ );
    HRESULT TransformGLProjectionToView (
        double GLX,
        double GLY,
        double GLlZ,
        double * ViewX,
        double * ViewY,
        double * ViewZ );
    HRESULT TransformViewToGLProjection (
        double ViewX,
        double ViewY,
        double ViewZ,
        double * GLX,
        double * GLY,
        double * GLZ );
    HRESULT GetCounter (
        int Type,
        VARIANT_BOOL bReset,
        double * dCounter );
    VARIANT_BOOL GetGDIBufferModified ( );
    void PutGDIBufferModified (
        VARIANT_BOOL _arg1 );
    HRESULT SaveAsImage (
        _bstr_t Filename,
        const _variant_t & Width,
        const _variant_t & Height,
        const _variant_t & AltViewStyle,
        const _variant_t & Resolution,
        const _variant_t & ColorDepth,
        enum SeImageQualityType ImageQuality,
        VARIANT_BOOL Invert );
    IDispatchPtr GetViewStyle ( );
    void PutViewStyle (
        IDispatch * _arg1 );
    _bstr_t GetStyle ( );
    void PutStyle (
        _bstr_t _arg1 );
    HRESULT SetRenderMode (
        const _variant_t & mode );
    enum SeRenderModeType GetRenderModeType ( );
    void PutRenderModeType (
        enum SeRenderModeType _arg1 );
    VARIANT_BOOL GetSilhouettesEnabled ( );
    void PutSilhouettesEnabled (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetSectionPlanesEnabled ( );
    void PutSectionPlanesEnabled (
        VARIANT_BOOL _arg1 );
    HRESULT SetDisplayDepths (
        double dFront,
        double dBack,
        VARIANT * FrontFaceStyle = &vtMissing,
        VARIANT * BackFaceStyle = &vtMissing,
        VARIANT * Monument = &vtMissing );
    HRESULT GetDisplayDepths (
        double * pdFront,
        double * pdBack,
        VARIANT * FrontFaceStyle = &vtMissing,
        VARIANT * BackFaceStyle = &vtMissing,
        VARIANT * Monument = &vtMissing );
    HRESULT SetSectionPlanes (
        long nPlanes,
        VARIANT * Positions = &vtMissing,
        VARIANT * Normals = &vtMissing,
        VARIANT * FaceStyles = &vtMissing );
    HRESULT GetSectionPlanes (
        long * pnPlanes,
        VARIANT * Positions = &vtMissing,
        VARIANT * Normals = &vtMissing,
        VARIANT * FaceStyles = &vtMissing );
    HRESULT SetAttribute (
        long Attribute,
        const _variant_t & AttributeData );
    HRESULT GetAttribute (
        long Attribute,
        VARIANT * AttributeData );
    HRESULT ClearRotationFocus ( );
    HRESULT GetRotationFocus (
        double * pdPointX,
        double * pdPointY,
        double * pdPointZ,
        double * pdDirectionX,
        double * pdDirectionZ,
        double * pdDirectionY,
        double * pdFront,
        double * pdBack,
        double * pdRadius,
        long * puOptions );
    HRESULT SetRotationPoint (
        double dPointX,
        double dPointY,
        double dPointZ );
    HRESULT SetRotationAxis (
        double dPointX,
        double dPointY,
        double dPointZ,
        double dDirectionX,
        double dDirectionY,
        double dDirectionZ );
    HRESULT SetRotationFocus (
        double dPointX,
        double dPointY,
        double dPointZ,
        double dDirectionX,
        double dDirectionZ,
        double dDirectionY,
        double dFront,
        double dBack,
        double dRadius,
        long uOptions );
    HRESULT Locate (
        long lPointX,
        long lPointY,
        long lRadius,
        double * pdHitPointX,
        double * pdHitPointY,
        double * pdHitPointZ );
    HRESULT GetModelRange (
        double * pdLowX,
        double * pdLowY,
        double * pdLowZ,
        double * pdHighX,
        double * pdHighY,
        double * pdHighZ );
    HRESULT OrientCameraEx (
        long lFlags,
        long lButtons,
        double dX,
        double dY,
        double dZ,
        double dYaw,
        double dPitch,
        double dRoll );
    HRESULT GetCameraEx (
        long * lFlags,
        double * dEyeX,
        double * dEyeY,
        double * dEyeZ,
        double * dTargetX,
        double * dTargetY,
        double * dTargetZ,
        double * dUpX,
        double * dUpY,
        double * dUpZ,
        double * dNearClip,
        double * dFarClip,
        double * dFrameWidth,
        double * dFrameHeight,
        double * dFrameEyeX,
        double * dFrameEyeY,
        double * dFrameScale );
    HRESULT SetCameraEx (
        long lFlags,
        double dEyeX,
        double dEyeY,
        double dEyeZ,
        double dTargetX,
        double dTargetY,
        double dTargetZ,
        double dUpX,
        double dUpY,
        double dUpZ,
        double dNearClip,
        double dFarClip,
        double dFrameWidth,
        double dFrameHeight,
        double dFrameEyeX,
        double dFrameEyeY,
        double dFrameScale );
    HRESULT SaveCurrentView (
        const _variant_t & Name );
    HRESULT ApplyNamedView (
        const _variant_t & Name );
    HRESULT AreaZoomCamera (
        int X1,
        int Y1,
        int X2,
        int Y2 );
    HRESULT CreateUserRange (
        long * pidUserRange );
    HRESULT DeleteUserRange (
        long idUserRange );
    HRESULT GetUserRange (
        long idUserRange,
        double * pdLowX,
        double * pdLowY,
        double * pdLowZ,
        double * pdHighX,
        double * pdHighY,
        double * pdHighZ );
    HRESULT SetUserRange (
        long idUserRange,
        double dLowX,
        double dLowY,
        double dLowZ,
        double dHighX,
        double dHighY,
        double dHighZ );
    unsigned long GetMovieFrameRate ( );
    void PutMovieFrameRate (
        unsigned long _arg1 );
    unsigned long GetMovieBitRate ( );
    void PutMovieBitRate (
        unsigned long _arg1 );
    _bstr_t GetMovieCodec ( );
    void PutMovieCodec (
        _bstr_t _arg1 );
    unsigned long GetMovieQuality ( );
    void PutMovieQuality (
        unsigned long _arg1 );
    _bstr_t GetMovieTitle ( );
    void PutMovieTitle (
        _bstr_t _arg1 );
    _bstr_t GetMovieSubTitle ( );
    void PutMovieSubTitle (
        _bstr_t _arg1 );
    _bstr_t GetMovieCopyright ( );
    void PutMovieCopyright (
        _bstr_t _arg1 );
    _bstr_t GetMovieAuthor ( );
    void PutMovieAuthor (
        _bstr_t _arg1 );
    _bstr_t GetMovieAuthorURL ( );
    void PutMovieAuthorURL (
        _bstr_t _arg1 );
    _bstr_t GetMovieDescription ( );
    void PutMovieDescription (
        _bstr_t _arg1 );
    HRESULT GetAvailableMovieCodecs (
        SAFEARRAY * * AvailableCodecs );
    HRESULT SetMovieResolution (
        enum seMovieStandardResolutionConstants StandardMovieResolution );
    HRESULT SetCustomMovieResolution (
        int nWidth,
        int nHeight );
    HRESULT CreateMovieRecorder (
        enum seMovieFormatConstants Format );
    HRESULT DestroyMovieRecorder ( );
    HRESULT BeginMovieRecording (
        _bstr_t Filename );
    HRESULT AddFrameToMovie (
        VARIANT_BOOL KeyFrame,
        int * pNewFrameCount );
    HRESULT EndMovieRecording ( );
    HRESULT RangeZoomCamera (
        double dLowX,
        double dLowY,
        double dLowZ,
        double dHighX,
        double dHighY,
        double dHighZ );
    HRESULT UserRangeZoomCamera (
        long idUserRange );
    HRESULT RefreshView (
        long nOptions );
    enum seSharpenLevelConstants GetSharpenLevel ( );
    void PutSharpenLevel (
        enum seSharpenLevelConstants _arg1 );
    _variant_t GetSectionPlanesOptions ( );
    void PutSectionPlanesOptions (
        const _variant_t & _arg1 );
    HRESULT SetSectionPlanesParams (
        const _variant_t & Options,
        const _variant_t & PlaneCount,
        VARIANT * Positions = &vtMissing,
        VARIANT * Normals = &vtMissing,
        VARIANT * Colors = &vtMissing );
    HRESULT GetSectionPlanesParams (
        VARIANT * Options,
        VARIANT * PlaneCount = &vtMissing,
        VARIANT * Positions = &vtMissing,
        VARIANT * Normals = &vtMissing,
        VARIANT * Colors = &vtMissing );
};

struct __declspec(uuid("c1e8fe26-fbe0-11d1-be0a-080036b4d502"))
_IWindowAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetIcon))
    long Icon;
    __declspec(property(get=GetFloating))
    VARIANT_BOOL Floating;
    __declspec(property(get=GetUsableHeight))
    int UsableHeight;
    __declspec(property(get=GetUsableWidth))
    int UsableWidth;
    __declspec(property(get=GetView))
    ViewPtr View;
    __declspec(property(get=GetDrawHwnd))
    long DrawHwnd;
    __declspec(property(get=GetWidthEx,put=PutWidthEx))
    int WidthEx;
    __declspec(property(get=GetHeightEx,put=PutHeightEx))
    int HeightEx;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetHeight,put=PutHeight))
    int Height;
    __declspec(property(get=GethWnd))
    long hWnd;
    __declspec(property(get=GetIndex))
    int Index;
    __declspec(property(get=GetLeft,put=PutLeft))
    int Left;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSelectSet))
    SelectSetPtr SelectSet;
    __declspec(property(get=GetTop,put=PutTop))
    int Top;
    __declspec(property(get=GetType))
    _bstr_t Type;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetWidth,put=PutWidth))
    int Width;
    __declspec(property(get=GetWindowNumber))
    int WindowNumber;
    __declspec(property(get=GetWindowState,put=PutWindowState))
    int WindowState;
    __declspec(property(get=GetEnvironment,put=PutEnvironment))
    _bstr_t Environment;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Activate ( );
    HRESULT ActivateNext ( );
    HRESULT ActivatePrevious ( );
    ApplicationPtr GetApplication ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t Caption );
    HRESULT Close (
        const _variant_t & SaveChanges = vtMissing,
        const _variant_t & Filename = vtMissing,
        const _variant_t & RouteWorkbook = vtMissing );
    _bstr_t GetEnvironment ( );
    void PutEnvironment (
        _bstr_t Environment );
    int GetHeight ( );
    void PutHeight (
        int Height );
    long GethWnd ( );
    int GetIndex ( );
    int GetLeft ( );
    void PutLeft (
        int Left );
    IDispatchPtr GetParent ( );
    HRESULT PrintOut ( );
    SelectSetPtr GetSelectSet ( );
    int GetTop ( );
    void PutTop (
        int Top );
    _bstr_t GetType ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Visible );
    int GetWidth ( );
    void PutWidth (
        int Width );
    int GetWindowNumber ( );
    int GetWindowState ( );
    void PutWindowState (
        int WindowState );
    long GetIcon ( );
    HRESULT Paste ( );
    int GetUsableHeight ( );
    int GetUsableWidth ( );
    ViewPtr GetView ( );
    long GetDrawHwnd ( );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    VARIANT_BOOL GetFloating ( );
    HRESULT FloatWindow ( );
    HRESULT DockWindow ( );
    int GetWidthEx ( );
    void PutWidthEx (
        int Width );
    int GetHeightEx ( );
    void PutHeightEx (
        int Height );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Activate ( ) = 0;
      virtual HRESULT __stdcall raw_ActivateNext ( ) = 0;
      virtual HRESULT __stdcall raw_ActivatePrevious ( ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * Caption ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR Caption ) = 0;
      virtual HRESULT __stdcall raw_Close (
        /*[in]*/ VARIANT SaveChanges = vtMissing,
        /*[in]*/ VARIANT Filename = vtMissing,
        /*[in]*/ VARIANT RouteWorkbook = vtMissing ) = 0;
      virtual HRESULT __stdcall get_Environment (
        /*[out,retval]*/ BSTR * Environment ) = 0;
      virtual HRESULT __stdcall put_Environment (
        /*[in]*/ BSTR Environment ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ int * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ int Height ) = 0;
      virtual HRESULT __stdcall get_hWnd (
        /*[out,retval]*/ long * hWnd ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ int * Index ) = 0;
      virtual HRESULT __stdcall get_Left (
        /*[out,retval]*/ int * Left ) = 0;
      virtual HRESULT __stdcall put_Left (
        /*[in]*/ int Left ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_PrintOut ( ) = 0;
      virtual HRESULT __stdcall get_SelectSet (
        /*[out,retval]*/ struct SelectSet * * SelectSet ) = 0;
      virtual HRESULT __stdcall get_Top (
        /*[out,retval]*/ int * Top ) = 0;
      virtual HRESULT __stdcall put_Top (
        /*[in]*/ int Top ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ BSTR * Type ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ int * Width ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ int Width ) = 0;
      virtual HRESULT __stdcall get_WindowNumber (
        /*[out,retval]*/ int * WindowNumber ) = 0;
      virtual HRESULT __stdcall get_WindowState (
        /*[out,retval]*/ int * WindowState ) = 0;
      virtual HRESULT __stdcall put_WindowState (
        /*[in]*/ int WindowState ) = 0;
      virtual HRESULT __stdcall get_Icon (
        /*[out,retval]*/ long * Icon ) = 0;
      virtual HRESULT __stdcall raw_Paste ( ) = 0;
      virtual HRESULT __stdcall get_UsableHeight (
        /*[out,retval]*/ int * UsableHeight ) = 0;
      virtual HRESULT __stdcall get_UsableWidth (
        /*[out,retval]*/ int * UsableWidth ) = 0;
      virtual HRESULT __stdcall get_View (
        /*[out,retval]*/ struct View * * View ) = 0;
      virtual HRESULT __stdcall get_DrawHwnd (
        /*[out,retval]*/ long * DrawHwnd ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
      virtual HRESULT __stdcall get_Floating (
        /*[out,retval]*/ VARIANT_BOOL * Floating ) = 0;
      virtual HRESULT __stdcall raw_FloatWindow ( ) = 0;
      virtual HRESULT __stdcall raw_DockWindow ( ) = 0;
      virtual HRESULT __stdcall get_WidthEx (
        /*[out,retval]*/ int * Width ) = 0;
      virtual HRESULT __stdcall put_WidthEx (
        /*[in]*/ int Width ) = 0;
      virtual HRESULT __stdcall get_HeightEx (
        /*[out,retval]*/ int * Height ) = 0;
      virtual HRESULT __stdcall put_HeightEx (
        /*[in]*/ int Height ) = 0;
};

struct __declspec(uuid("e68f7241-c6a7-11ce-a434-0800367e0502"))
Window : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIcon))
    long Icon;
    __declspec(property(get=GetFloating))
    VARIANT_BOOL Floating;
    __declspec(property(get=GetUsableHeight))
    int UsableHeight;
    __declspec(property(get=GetUsableWidth))
    int UsableWidth;
    __declspec(property(get=GetView))
    ViewPtr View;
    __declspec(property(get=GetDrawHwnd))
    long DrawHwnd;
    __declspec(property(get=GetWidthEx,put=PutWidthEx))
    int WidthEx;
    __declspec(property(get=GetHeightEx,put=PutHeightEx))
    int HeightEx;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetHeight,put=PutHeight))
    int Height;
    __declspec(property(get=GethWnd))
    long hWnd;
    __declspec(property(get=GetIndex))
    int Index;
    __declspec(property(get=GetLeft,put=PutLeft))
    int Left;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetSelectSet))
    SelectSetPtr SelectSet;
    __declspec(property(get=GetTop,put=PutTop))
    int Top;
    __declspec(property(get=GetType))
    _bstr_t Type;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetWidth,put=PutWidth))
    int Width;
    __declspec(property(get=GetWindowNumber))
    int WindowNumber;
    __declspec(property(get=GetWindowState,put=PutWindowState))
    int WindowState;
    __declspec(property(get=GetEnvironment,put=PutEnvironment))
    _bstr_t Environment;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT Activate ( );
    HRESULT ActivateNext ( );
    HRESULT ActivatePrevious ( );
    ApplicationPtr GetApplication ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    HRESULT Close (
        const _variant_t & SaveChanges = vtMissing,
        const _variant_t & Filename = vtMissing,
        const _variant_t & RouteWorkbook = vtMissing );
    _bstr_t GetEnvironment ( );
    void PutEnvironment (
        _bstr_t _arg1 );
    int GetHeight ( );
    void PutHeight (
        int _arg1 );
    long GethWnd ( );
    int GetIndex ( );
    int GetLeft ( );
    void PutLeft (
        int _arg1 );
    IDispatchPtr GetParent ( );
    HRESULT PrintOut ( );
    SelectSetPtr GetSelectSet ( );
    int GetTop ( );
    void PutTop (
        int _arg1 );
    _bstr_t GetType ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    int GetWidth ( );
    void PutWidth (
        int _arg1 );
    int GetWindowNumber ( );
    int GetWindowState ( );
    void PutWindowState (
        int _arg1 );
    long GetIcon ( );
    HRESULT Paste ( );
    int GetUsableHeight ( );
    int GetUsableWidth ( );
    ViewPtr GetView ( );
    long GetDrawHwnd ( );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    VARIANT_BOOL GetFloating ( );
    HRESULT FloatWindow ( );
    HRESULT DockWindow ( );
    int GetWidthEx ( );
    void PutWidthEx (
        int _arg1 );
    int GetHeightEx ( );
    void PutHeightEx (
        int _arg1 );
};

struct __declspec(uuid("5bdaad30-966b-11d1-aecb-08003616ce02"))
ViewEvents;
    // [ default ] interface IUnknown
    // [ default, source ] dispinterface DISEViewEvents
    // [ source ] interface ISEViewEvents

struct __declspec(uuid("5bdaad32-966b-11d1-aecb-08003616ce02"))
DISEViewEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT Changed ( );
    HRESULT Destroyed ( );
    HRESULT StyleChanged ( );
};

struct __declspec(uuid("5bdaad31-966b-11d1-aecb-08003616ce02"))
ISEViewEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Changed ( );
    HRESULT Destroyed ( );
    HRESULT StyleChanged ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Changed ( ) = 0;
      virtual HRESULT __stdcall raw_Destroyed ( ) = 0;
      virtual HRESULT __stdcall raw_StyleChanged ( ) = 0;
};

struct __declspec(uuid("791849e0-a4aa-11d1-aecc-08003616ce02"))
DisplayEvents;
    // [ default ] interface IUnknown
    // [ default, source ] dispinterface DISEhDCDisplayEvents
    // [ source ] interface ISEhDCDisplayEvents

struct __declspec(uuid("791849e2-a4aa-11d1-aecc-08003616ce02"))
DISEhDCDisplayEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT BeginDisplay ( );
    HRESULT EndDisplay ( );
    HRESULT BeginhDCMainDisplay (
        long hDC,
        SAFEARRAY * * ModelToDC,
        SAFEARRAY * * Rect );
    HRESULT EndhDCMainDisplay (
        long hDC,
        SAFEARRAY * * ModelToDC,
        SAFEARRAY * * Rect );
};

struct __declspec(uuid("791849e1-a4aa-11d1-aecc-08003616ce02"))
ISEhDCDisplayEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT BeginDisplay ( );
    HRESULT EndDisplay ( );
    HRESULT BeginhDCMainDisplay (
        long hDC,
        double * ModelToDC,
        long * Rect );
    HRESULT EndhDCMainDisplay (
        long hDC,
        double * ModelToDC,
        long * Rect );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_BeginDisplay ( ) = 0;
      virtual HRESULT __stdcall raw_EndDisplay ( ) = 0;
      virtual HRESULT __stdcall raw_BeginhDCMainDisplay (
        /*[in]*/ long hDC,
        /*[in]*/ double * ModelToDC,
        /*[in]*/ long * Rect ) = 0;
      virtual HRESULT __stdcall raw_EndhDCMainDisplay (
        /*[in]*/ long hDC,
        /*[in]*/ double * ModelToDC,
        /*[in]*/ long * Rect ) = 0;
};

struct __declspec(uuid("2a11b897-ccc5-11d2-9231-00c04f79be98"))
GLDisplayEvents;
    // [ default ] interface IUnknown
    // [ default, source ] interface ISEIGLDisplayEvents

struct __declspec(uuid("177afed7-cbf3-11d2-9230-00c04f79be98"))
ISEIGLDisplayEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT BeginDisplay ( );
    HRESULT EndDisplay ( );
    HRESULT BeginIGLMainDisplay (
        IUnknown * pUnknownIGL );
    HRESULT EndIGLMainDisplay (
        IUnknown * pUnknownIGL );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_BeginDisplay ( ) = 0;
      virtual HRESULT __stdcall raw_EndDisplay ( ) = 0;
      virtual HRESULT __stdcall raw_BeginIGLMainDisplay (
        /*[in]*/ IUnknown * pUnknownIGL ) = 0;
      virtual HRESULT __stdcall raw_EndIGLMainDisplay (
        /*[in]*/ IUnknown * pUnknownIGL ) = 0;
};

struct __declspec(uuid("2a11b898-ccc5-11d2-9231-00c04f79be98"))
RenderEvents;
    // [ default ] interface IUnknown
    // [ default, source ] interface ISERenderEvents

struct __declspec(uuid("1776f00d-cbf3-11d2-9230-00c04f79be98"))
ISERenderEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT PreRender (
        IUnknown * pDevice,
        IUnknown * pScene );
    HRESULT Render (
        IUnknown * pDevice,
        IUnknown * pScene,
        IUnknown * pProgress );
    HRESULT PostRender (
        IUnknown * pDevice,
        IUnknown * pScene );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_PreRender (
        /*[in]*/ IUnknown * pDevice,
        /*[in]*/ IUnknown * pScene ) = 0;
      virtual HRESULT __stdcall raw_Render (
        /*[in]*/ IUnknown * pDevice,
        /*[in]*/ IUnknown * pScene,
        /*[in]*/ IUnknown * pProgress ) = 0;
      virtual HRESULT __stdcall raw_PostRender (
        /*[in]*/ IUnknown * pDevice,
        /*[in]*/ IUnknown * pScene ) = 0;
};

struct __declspec(uuid("f21ae4bc-6efd-4fc3-9b6e-fb090e4cd5d0"))
AnimationEvents;
    // [ default ] interface IUnknown
    // [ default, source ] dispinterface DISEAnimationEvents
    // [ source ] interface ISEAnimationEvents

struct __declspec(uuid("8e4ca55f-2065-4590-b55b-eb804743568f"))
DISEAnimationEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT AnimationEvent (
        enum AnimationEventConstants AnimationEventType,
        int nFrame );
};

enum AnimationEventConstants
{
    BeforeTimelineFrameUpdate = 1,
    AfterTimelineFrameUpdate = 2,
    BeforeDragComponentFrameUpdate = 3,
    AfterDragComponentFrameUpdate = 4
};

struct __declspec(uuid("97b0a502-9486-478b-ba8a-39ead409ef18"))
ISEAnimationEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT AnimationEvent (
        enum AnimationEventConstants AnimationEventType,
        int nFrame );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AnimationEvent (
        /*[in]*/ enum AnimationEventConstants AnimationEventType,
        /*[in]*/ int nFrame ) = 0;
};

enum SeRenderModeType
{
    seRenderModeUndefined = 0,
    seRenderModeWireframe = 1,
    seRenderModeWiremesh = 2,
    seRenderModeOutline = 3,
    seRenderModeBoundary = 4,
    seRenderModeVHL = 6,
    seRenderModeSmooth = 8,
    seRenderModeSmoothMesh = 9,
    seRenderModeSmoothVHL = 10,
    seRenderModeSmoothBoundary = 11,
    seRenderModePhong = 81,
    seRenderModeRayTraced = 83
};

enum seMovieStandardResolutionConstants
{
    seMovieStandardResolutionNTSC = 0,
    seMovieStandardResolutionPAL = 1,
    seMovieStandardResolutionHD = 2,
    seMovieStandardResolutionFullHD = 3,
    seMovieStandardResolutionCurrentView = 4
};

enum seMovieFormatConstants
{
    seMovieFormatAVI = 0,
    seMovieFormatWMV = 1
};

enum seSharpenLevelConstants
{
    seSharpenDefault = 0,
    seSharpenCoarse = 1,
    seSharpenNormal = 2,
    seSharpenFine = 3,
    seSharpenExtraFine = 4,
    seSharpenSuperFine = 5,
    seSharpenIncrement = 6,
    seSharpenDecrement = 7,
    seResharpen = 8
};

struct __declspec(uuid("fc3fbfd4-fbfe-11d1-be0a-080036b4d502"))
_IViewAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetWindow))
    WindowPtr Window;
    __declspec(property(get=GetDrawDC))
    long DrawDC;
    __declspec(property(get=GetMovieCodec,put=PutMovieCodec))
    _bstr_t MovieCodec;
    __declspec(property(get=GetMovieFrameRate,put=PutMovieFrameRate))
    unsigned long MovieFrameRate;
    __declspec(property(get=GetMovieBitRate,put=PutMovieBitRate))
    unsigned long MovieBitRate;
    __declspec(property(get=GetMovieQuality,put=PutMovieQuality))
    unsigned long MovieQuality;
    __declspec(property(get=GetViewEvents))
    IUnknownPtr ViewEvents;
    __declspec(property(get=GetDisplayEvents))
    IUnknownPtr DisplayEvents;
    __declspec(property(get=GetDisplayEnabled,put=PutDisplayEnabled))
    VARIANT_BOOL DisplayEnabled;
    __declspec(property(get=GetStereoEnabled,put=PutStereoEnabled))
    VARIANT_BOOL StereoEnabled;
    __declspec(property(get=GetStereoAngle,put=PutStereoAngle))
    double StereoAngle;
    __declspec(property(get=GetStereoDeviation,put=PutStereoDeviation))
    double StereoDeviation;
    __declspec(property(get=GetMovieTitle,put=PutMovieTitle))
    _bstr_t MovieTitle;
    __declspec(property(get=GetMovieSubTitle,put=PutMovieSubTitle))
    _bstr_t MovieSubTitle;
    __declspec(property(get=GetMovieCopyright,put=PutMovieCopyright))
    _bstr_t MovieCopyright;
    __declspec(property(get=GetMovieAuthor,put=PutMovieAuthor))
    _bstr_t MovieAuthor;
    __declspec(property(get=GetMovieAuthorURL,put=PutMovieAuthorURL))
    _bstr_t MovieAuthorURL;
    __declspec(property(get=GetMovieDescription,put=PutMovieDescription))
    _bstr_t MovieDescription;
    __declspec(property(get=GetGLDisplayEvents))
    IUnknownPtr GLDisplayEvents;
    __declspec(property(get=GetAnimationEvents))
    IUnknownPtr AnimationEvents;
    __declspec(property(get=GetSharpnessLevel,put=PutSharpnessLevel))
    int SharpnessLevel;
    __declspec(property(get=GetSharpnessLevelCount))
    int SharpnessLevelCount;
    __declspec(property(get=GetCullingEnabled,put=PutCullingEnabled))
    VARIANT_BOOL CullingEnabled;
    __declspec(property(get=GetStyleFallbackEnabled,put=PutStyleFallbackEnabled))
    VARIANT_BOOL StyleFallbackEnabled;
    __declspec(property(get=GetSharpenLevel,put=PutSharpenLevel))
    enum seSharpenLevelConstants SharpenLevel;
    __declspec(property(get=GetSectionPlanesOptions,put=PutSectionPlanesOptions))
    _variant_t SectionPlanesOptions;
    __declspec(property(get=GetGDIBufferModified,put=PutGDIBufferModified))
    VARIANT_BOOL GDIBufferModified;
    __declspec(property(get=GetViewStyle,put=PutViewStyle))
    IDispatchPtr ViewStyle;
    __declspec(property(get=GetStyle,put=PutStyle))
    _bstr_t Style;
    __declspec(property(get=GetRenderModeType,put=PutRenderModeType))
    enum SeRenderModeType RenderModeType;
    __declspec(property(get=GetSilhouettesEnabled,put=PutSilhouettesEnabled))
    VARIANT_BOOL SilhouettesEnabled;
    __declspec(property(get=GetSectionPlanesEnabled,put=PutSectionPlanesEnabled))
    VARIANT_BOOL SectionPlanesEnabled;
    __declspec(property(get=GetRenderEvents))
    IUnknownPtr RenderEvents;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Fit ( );
    WindowPtr GetWindow ( );
    HRESULT ModelToDC (
        SAFEARRAY * * Matrix );
    HRESULT ModelToView (
        SAFEARRAY * * Matrix );
    HRESULT ViewToGLProjection (
        SAFEARRAY * * Matrix );
    HRESULT Update ( );
    HRESULT ShowDrawDC ( );
    HRESULT SwapBuffers ( );
    long GetDrawDC ( );
    HRESULT GetCamera (
        double * EyeX,
        double * EyeY,
        double * EyeZ,
        double * TargetX,
        double * TargetY,
        double * TargetZ,
        double * UpX,
        double * UpY,
        double * UpZ,
        VARIANT_BOOL * Perspective,
        double * ScaleOrAngle );
    HRESULT BeginCameraDynamics ( );
    HRESULT SetCamera (
        double EyeX,
        double EyeY,
        double EyeZ,
        double TargetX,
        double TargetY,
        double TargetZ,
        double UpX,
        double UpY,
        double UpZ,
        VARIANT_BOOL Perspective,
        double ScaleOrAngle );
    HRESULT EndCameraDynamics ( );
    HRESULT RotateCamera (
        double Angle,
        double CenterX,
        double CenterY,
        double CenterZ,
        double AxisX,
        double AxisY,
        double AxisZ );
    HRESULT PanCamera (
        int dX,
        int dY );
    HRESULT ZoomCamera (
        double __MIDL___IViewAuto0000 );
    HRESULT OrientCamera (
        int cmdtype,
        int X1,
        int Y1,
        int X2,
        int Y2,
        int X3,
        int Y3 );
    IUnknownPtr GetViewEvents ( );
    IUnknownPtr GetDisplayEvents ( );
    IUnknownPtr GetGLDisplayEvents ( );
    IUnknownPtr GetRenderEvents ( );
    IUnknownPtr GetAnimationEvents ( );
    VARIANT_BOOL GetDisplayEnabled ( );
    void PutDisplayEnabled (
        VARIANT_BOOL Enabled );
    VARIANT_BOOL GetCullingEnabled ( );
    void PutCullingEnabled (
        VARIANT_BOOL Enabled );
    VARIANT_BOOL GetStyleFallbackEnabled ( );
    void PutStyleFallbackEnabled (
        VARIANT_BOOL Enabled );
    int GetSharpnessLevelCount ( );
    int GetSharpnessLevel ( );
    void PutSharpnessLevel (
        int Level );
    VARIANT_BOOL GetStereoEnabled ( );
    void PutStereoEnabled (
        VARIANT_BOOL Stereo );
    double GetStereoAngle ( );
    void PutStereoAngle (
        double Angle );
    double GetStereoDeviation ( );
    void PutStereoDeviation (
        double Deviation );
    HRESULT TransformModelToDC (
        double ModelX,
        double ModelY,
        double ModelZ,
        long * DeviceX,
        long * DeviceY );
    HRESULT TransformDCToModel (
        long DeviceX,
        long DeviceY,
        double * ModelX,
        double * ModelY,
        double * ModelZ );
    HRESULT TransformModelToView (
        double ModelX,
        double ModelY,
        double ModelZ,
        double * ViewX,
        double * ViewY,
        double * ViewZ );
    HRESULT TransformViewToModel (
        double ViewX,
        double ViewY,
        double ViewZ,
        double * ModelX,
        double * ModelY,
        double * ModelZ );
    HRESULT TransformGLProjectionToView (
        double GLX,
        double GLY,
        double GLlZ,
        double * ViewX,
        double * ViewY,
        double * ViewZ );
    HRESULT TransformViewToGLProjection (
        double ViewX,
        double ViewY,
        double ViewZ,
        double * GLX,
        double * GLY,
        double * GLZ );
    HRESULT GetCounter (
        int Type,
        VARIANT_BOOL bReset,
        double * dCounter );
    VARIANT_BOOL GetGDIBufferModified ( );
    void PutGDIBufferModified (
        VARIANT_BOOL GDIBufferModified );
    HRESULT SaveAsImage (
        _bstr_t Filename,
        const _variant_t & Width,
        const _variant_t & Height,
        const _variant_t & AltViewStyle,
        const _variant_t & Resolution,
        const _variant_t & ColorDepth,
        enum SeImageQualityType ImageQuality,
        VARIANT_BOOL Invert );
    IDispatchPtr GetViewStyle ( );
    void PutViewStyle (
        IDispatch * ViewStyle );
    _bstr_t GetStyle ( );
    void PutStyle (
        _bstr_t Style );
    HRESULT SetRenderMode (
        const _variant_t & mode );
    enum SeRenderModeType GetRenderModeType ( );
    void PutRenderModeType (
        enum SeRenderModeType pbEnabled );
    VARIANT_BOOL GetSilhouettesEnabled ( );
    void PutSilhouettesEnabled (
        VARIANT_BOOL pbEnabled );
    VARIANT_BOOL GetSectionPlanesEnabled ( );
    void PutSectionPlanesEnabled (
        VARIANT_BOOL pbEnabled );
    HRESULT SetDisplayDepths (
        double dFront,
        double dBack,
        VARIANT * FrontFaceStyle = &vtMissing,
        VARIANT * BackFaceStyle = &vtMissing,
        VARIANT * Monument = &vtMissing );
    HRESULT GetDisplayDepths (
        double * pdFront,
        double * pdBack,
        VARIANT * FrontFaceStyle,
        VARIANT * BackFaceStyle,
        VARIANT * Monument );
    HRESULT SetSectionPlanes (
        long nPlanes,
        VARIANT * Positions = &vtMissing,
        VARIANT * Normals = &vtMissing,
        VARIANT * FaceStyles = &vtMissing );
    HRESULT GetSectionPlanes (
        long * pnPlanes,
        VARIANT * Positions,
        VARIANT * Normals,
        VARIANT * FaceStyles );
    HRESULT SetAttribute (
        long Attribute,
        const _variant_t & AttributeData );
    HRESULT GetAttribute (
        long Attribute,
        VARIANT * AttributeData );
    HRESULT ClearRotationFocus ( );
    HRESULT GetRotationFocus (
        double * pdPointX,
        double * pdPointY,
        double * pdPointZ,
        double * pdDirectionX,
        double * pdDirectionZ,
        double * pdDirectionY,
        double * pdFront,
        double * pdBack,
        double * pdRadius,
        long * puOptions );
    HRESULT SetRotationPoint (
        double dPointX,
        double dPointY,
        double dPointZ );
    HRESULT SetRotationAxis (
        double dPointX,
        double dPointY,
        double dPointZ,
        double dDirectionX,
        double dDirectionY,
        double dDirectionZ );
    HRESULT SetRotationFocus (
        double dPointX,
        double dPointY,
        double dPointZ,
        double dDirectionX,
        double dDirectionZ,
        double dDirectionY,
        double dFront,
        double dBack,
        double dRadius,
        long uOptions );
    HRESULT Locate (
        long lPointX,
        long lPointY,
        long lRadius,
        double * pdHitPointX,
        double * pdHitPointY,
        double * pdHitPointZ );
    HRESULT GetModelRange (
        double * pdLowX,
        double * pdLowY,
        double * pdLowZ,
        double * pdHighX,
        double * pdHighY,
        double * pdHighZ );
    HRESULT OrientCameraEx (
        long lFlags,
        long lButtons,
        double dX,
        double dY,
        double dZ,
        double dYaw,
        double dPitch,
        double dRoll );
    HRESULT GetCameraEx (
        long * lFlags,
        double * dEyeX,
        double * dEyeY,
        double * dEyeZ,
        double * dTargetX,
        double * dTargetY,
        double * dTargetZ,
        double * dUpX,
        double * dUpY,
        double * dUpZ,
        double * dNearClip,
        double * dFarClip,
        double * dFrameWidth,
        double * dFrameHeight,
        double * dFrameEyeX,
        double * dFrameEyeY,
        double * dFrameScale );
    HRESULT SetCameraEx (
        long lFlags,
        double dEyeX,
        double dEyeY,
        double dEyeZ,
        double dTargetX,
        double dTargetY,
        double dTargetZ,
        double dUpX,
        double dUpY,
        double dUpZ,
        double dNearClip,
        double dFarClip,
        double dFrameWidth,
        double dFrameHeight,
        double dFrameEyeX,
        double dFrameEyeY,
        double dFrameScale );
    HRESULT SaveCurrentView (
        const _variant_t & Name );
    HRESULT ApplyNamedView (
        const _variant_t & Name );
    HRESULT AreaZoomCamera (
        int X1,
        int Y1,
        int X2,
        int Y2 );
    HRESULT CreateUserRange (
        long * pidUserRange );
    HRESULT DeleteUserRange (
        long idUserRange );
    HRESULT GetUserRange (
        long idUserRange,
        double * pdLowX,
        double * pdLowY,
        double * pdLowZ,
        double * pdHighX,
        double * pdHighY,
        double * pdHighZ );
    HRESULT SetUserRange (
        long idUserRange,
        double dLowX,
        double dLowY,
        double dLowZ,
        double dHighX,
        double dHighY,
        double dHighZ );
    unsigned long GetMovieFrameRate ( );
    void PutMovieFrameRate (
        unsigned long pdwMovieFrameRate );
    unsigned long GetMovieBitRate ( );
    void PutMovieBitRate (
        unsigned long pdwMovieBitRate );
    _bstr_t GetMovieCodec ( );
    void PutMovieCodec (
        _bstr_t pCodec );
    unsigned long GetMovieQuality ( );
    void PutMovieQuality (
        unsigned long pdwMovieQuality );
    _bstr_t GetMovieTitle ( );
    void PutMovieTitle (
        _bstr_t pTitle );
    _bstr_t GetMovieSubTitle ( );
    void PutMovieSubTitle (
        _bstr_t pSubTitle );
    _bstr_t GetMovieCopyright ( );
    void PutMovieCopyright (
        _bstr_t pCopyright );
    _bstr_t GetMovieAuthor ( );
    void PutMovieAuthor (
        _bstr_t pAuthor );
    _bstr_t GetMovieAuthorURL ( );
    void PutMovieAuthorURL (
        _bstr_t pAuthorURL );
    _bstr_t GetMovieDescription ( );
    void PutMovieDescription (
        _bstr_t pDescription );
    HRESULT GetAvailableMovieCodecs (
        SAFEARRAY * * AvailableCodecs );
    HRESULT SetMovieResolution (
        enum seMovieStandardResolutionConstants StandardMovieResolution );
    HRESULT SetCustomMovieResolution (
        int nWidth,
        int nHeight );
    HRESULT CreateMovieRecorder (
        enum seMovieFormatConstants Format );
    HRESULT DestroyMovieRecorder ( );
    HRESULT BeginMovieRecording (
        _bstr_t Filename );
    HRESULT AddFrameToMovie (
        VARIANT_BOOL KeyFrame,
        int * pNewFrameCount );
    HRESULT EndMovieRecording ( );
    HRESULT RangeZoomCamera (
        double dLowX,
        double dLowY,
        double dLowZ,
        double dHighX,
        double dHighY,
        double dHighZ );
    HRESULT UserRangeZoomCamera (
        long idUserRange );
    HRESULT RefreshView (
        long nOptions );
    enum seSharpenLevelConstants GetSharpenLevel ( );
    void PutSharpenLevel (
        enum seSharpenLevelConstants peLevel );
    _variant_t GetSectionPlanesOptions ( );
    void PutSectionPlanesOptions (
        const _variant_t & Options );
    HRESULT SetSectionPlanesParams (
        const _variant_t & Options,
        const _variant_t & PlaneCount,
        VARIANT * Positions = &vtMissing,
        VARIANT * Normals = &vtMissing,
        VARIANT * Colors = &vtMissing );
    HRESULT GetSectionPlanesParams (
        VARIANT * Options,
        VARIANT * PlaneCount,
        VARIANT * Positions,
        VARIANT * Normals,
        VARIANT * Colors );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Fit ( ) = 0;
      virtual HRESULT __stdcall get_Window (
        /*[out,retval]*/ struct Window * * Window ) = 0;
      virtual HRESULT __stdcall raw_ModelToDC (
        /*[in,out]*/ SAFEARRAY * * Matrix ) = 0;
      virtual HRESULT __stdcall raw_ModelToView (
        /*[in,out]*/ SAFEARRAY * * Matrix ) = 0;
      virtual HRESULT __stdcall raw_ViewToGLProjection (
        /*[in,out]*/ SAFEARRAY * * Matrix ) = 0;
      virtual HRESULT __stdcall raw_Update ( ) = 0;
      virtual HRESULT __stdcall raw_ShowDrawDC ( ) = 0;
      virtual HRESULT __stdcall raw_SwapBuffers ( ) = 0;
      virtual HRESULT __stdcall get_DrawDC (
        /*[out,retval]*/ long * DrawDC ) = 0;
      virtual HRESULT __stdcall raw_GetCamera (
        /*[out]*/ double * EyeX,
        /*[out]*/ double * EyeY,
        /*[out]*/ double * EyeZ,
        /*[out]*/ double * TargetX,
        /*[out]*/ double * TargetY,
        /*[out]*/ double * TargetZ,
        /*[out]*/ double * UpX,
        /*[out]*/ double * UpY,
        /*[out]*/ double * UpZ,
        /*[out]*/ VARIANT_BOOL * Perspective,
        /*[out]*/ double * ScaleOrAngle ) = 0;
      virtual HRESULT __stdcall raw_BeginCameraDynamics ( ) = 0;
      virtual HRESULT __stdcall raw_SetCamera (
        /*[in]*/ double EyeX,
        /*[in]*/ double EyeY,
        /*[in]*/ double EyeZ,
        /*[in]*/ double TargetX,
        /*[in]*/ double TargetY,
        /*[in]*/ double TargetZ,
        /*[in]*/ double UpX,
        /*[in]*/ double UpY,
        /*[in]*/ double UpZ,
        /*[in]*/ VARIANT_BOOL Perspective,
        /*[in]*/ double ScaleOrAngle ) = 0;
      virtual HRESULT __stdcall raw_EndCameraDynamics ( ) = 0;
      virtual HRESULT __stdcall raw_RotateCamera (
        /*[in]*/ double Angle,
        /*[in]*/ double CenterX,
        /*[in]*/ double CenterY,
        /*[in]*/ double CenterZ,
        /*[in]*/ double AxisX,
        /*[in]*/ double AxisY,
        /*[in]*/ double AxisZ ) = 0;
      virtual HRESULT __stdcall raw_PanCamera (
        /*[in]*/ int dX,
        /*[in]*/ int dY ) = 0;
      virtual HRESULT __stdcall raw_ZoomCamera (
        /*[in]*/ double __MIDL___IViewAuto0000 ) = 0;
      virtual HRESULT __stdcall raw_OrientCamera (
        /*[in]*/ int cmdtype,
        /*[in]*/ int X1,
        /*[in]*/ int Y1,
        /*[in]*/ int X2,
        /*[in]*/ int Y2,
        /*[in]*/ int X3,
        /*[in]*/ int Y3 ) = 0;
      virtual HRESULT __stdcall get_ViewEvents (
        /*[out,retval]*/ struct IUnknown * * ViewEvents ) = 0;
      virtual HRESULT __stdcall get_DisplayEvents (
        /*[out,retval]*/ struct IUnknown * * DisplayEvents ) = 0;
      virtual HRESULT __stdcall get_GLDisplayEvents (
        /*[out,retval]*/ struct IUnknown * * GLDisplayEvents ) = 0;
      virtual HRESULT __stdcall get_RenderEvents (
        /*[out,retval]*/ struct IUnknown * * RenderEvents ) = 0;
      virtual HRESULT __stdcall get_AnimationEvents (
        /*[out,retval]*/ struct IUnknown * * AnimationEvents ) = 0;
      virtual HRESULT __stdcall get_DisplayEnabled (
        /*[out,retval]*/ VARIANT_BOOL * Enabled ) = 0;
      virtual HRESULT __stdcall put_DisplayEnabled (
        /*[in]*/ VARIANT_BOOL Enabled ) = 0;
      virtual HRESULT __stdcall get_CullingEnabled (
        /*[out,retval]*/ VARIANT_BOOL * Enabled ) = 0;
      virtual HRESULT __stdcall put_CullingEnabled (
        /*[in]*/ VARIANT_BOOL Enabled ) = 0;
      virtual HRESULT __stdcall get_StyleFallbackEnabled (
        /*[out,retval]*/ VARIANT_BOOL * Enabled ) = 0;
      virtual HRESULT __stdcall put_StyleFallbackEnabled (
        /*[in]*/ VARIANT_BOOL Enabled ) = 0;
      virtual HRESULT __stdcall get_SharpnessLevelCount (
        /*[out,retval]*/ int * MaxLevel ) = 0;
      virtual HRESULT __stdcall get_SharpnessLevel (
        /*[out,retval]*/ int * Level ) = 0;
      virtual HRESULT __stdcall put_SharpnessLevel (
        /*[in]*/ int Level ) = 0;
      virtual HRESULT __stdcall get_StereoEnabled (
        /*[out,retval]*/ VARIANT_BOOL * Stereo ) = 0;
      virtual HRESULT __stdcall put_StereoEnabled (
        /*[in]*/ VARIANT_BOOL Stereo ) = 0;
      virtual HRESULT __stdcall get_StereoAngle (
        /*[out,retval]*/ double * Angle ) = 0;
      virtual HRESULT __stdcall put_StereoAngle (
        /*[in]*/ double Angle ) = 0;
      virtual HRESULT __stdcall get_StereoDeviation (
        /*[out,retval]*/ double * Deviation ) = 0;
      virtual HRESULT __stdcall put_StereoDeviation (
        /*[in]*/ double Deviation ) = 0;
      virtual HRESULT __stdcall raw_TransformModelToDC (
        /*[in]*/ double ModelX,
        /*[in]*/ double ModelY,
        /*[in]*/ double ModelZ,
        /*[out]*/ long * DeviceX,
        /*[out]*/ long * DeviceY ) = 0;
      virtual HRESULT __stdcall raw_TransformDCToModel (
        /*[in]*/ long DeviceX,
        /*[in]*/ long DeviceY,
        /*[out]*/ double * ModelX,
        /*[out]*/ double * ModelY,
        /*[out]*/ double * ModelZ ) = 0;
      virtual HRESULT __stdcall raw_TransformModelToView (
        /*[in]*/ double ModelX,
        /*[in]*/ double ModelY,
        /*[in]*/ double ModelZ,
        /*[out]*/ double * ViewX,
        /*[out]*/ double * ViewY,
        /*[out]*/ double * ViewZ ) = 0;
      virtual HRESULT __stdcall raw_TransformViewToModel (
        /*[in]*/ double ViewX,
        /*[in]*/ double ViewY,
        /*[in]*/ double ViewZ,
        /*[out]*/ double * ModelX,
        /*[out]*/ double * ModelY,
        /*[out]*/ double * ModelZ ) = 0;
      virtual HRESULT __stdcall raw_TransformGLProjectionToView (
        /*[in]*/ double GLX,
        /*[in]*/ double GLY,
        /*[in]*/ double GLlZ,
        /*[out]*/ double * ViewX,
        /*[out]*/ double * ViewY,
        /*[out]*/ double * ViewZ ) = 0;
      virtual HRESULT __stdcall raw_TransformViewToGLProjection (
        /*[in]*/ double ViewX,
        /*[in]*/ double ViewY,
        /*[in]*/ double ViewZ,
        /*[out]*/ double * GLX,
        /*[out]*/ double * GLY,
        /*[out]*/ double * GLZ ) = 0;
      virtual HRESULT __stdcall raw_GetCounter (
        /*[in]*/ int Type,
        /*[in]*/ VARIANT_BOOL bReset,
        /*[out]*/ double * dCounter ) = 0;
      virtual HRESULT __stdcall get_GDIBufferModified (
        /*[out,retval]*/ VARIANT_BOOL * GDIBufferModified ) = 0;
      virtual HRESULT __stdcall put_GDIBufferModified (
        /*[in]*/ VARIANT_BOOL GDIBufferModified ) = 0;
      virtual HRESULT __stdcall raw_SaveAsImage (
        /*[in]*/ BSTR Filename,
        /*[in]*/ VARIANT Width,
        /*[in]*/ VARIANT Height,
        /*[in]*/ VARIANT AltViewStyle,
        /*[in]*/ VARIANT Resolution,
        /*[in]*/ VARIANT ColorDepth,
        /*[in]*/ enum SeImageQualityType ImageQuality,
        /*[in]*/ VARIANT_BOOL Invert ) = 0;
      virtual HRESULT __stdcall get_ViewStyle (
        /*[out,retval]*/ IDispatch * * ViewStyle ) = 0;
      virtual HRESULT __stdcall put_ViewStyle (
        /*[in]*/ IDispatch * ViewStyle ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ BSTR * Style ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ BSTR Style ) = 0;
      virtual HRESULT __stdcall raw_SetRenderMode (
        /*[in]*/ VARIANT mode ) = 0;
      virtual HRESULT __stdcall get_RenderModeType (
        /*[out,retval]*/ enum SeRenderModeType * pbEnabled ) = 0;
      virtual HRESULT __stdcall put_RenderModeType (
        /*[in]*/ enum SeRenderModeType pbEnabled ) = 0;
      virtual HRESULT __stdcall get_SilhouettesEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pbEnabled ) = 0;
      virtual HRESULT __stdcall put_SilhouettesEnabled (
        /*[in]*/ VARIANT_BOOL pbEnabled ) = 0;
      virtual HRESULT __stdcall get_SectionPlanesEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pbEnabled ) = 0;
      virtual HRESULT __stdcall put_SectionPlanesEnabled (
        /*[in]*/ VARIANT_BOOL pbEnabled ) = 0;
      virtual HRESULT __stdcall raw_SetDisplayDepths (
        /*[in]*/ double dFront,
        /*[in]*/ double dBack,
        /*[in]*/ VARIANT * FrontFaceStyle = &vtMissing,
        /*[in]*/ VARIANT * BackFaceStyle = &vtMissing,
        /*[in]*/ VARIANT * Monument = &vtMissing ) = 0;
      virtual HRESULT __stdcall raw_GetDisplayDepths (
        /*[out]*/ double * pdFront,
        /*[out]*/ double * pdBack,
        /*[out]*/ VARIANT * FrontFaceStyle,
        /*[out]*/ VARIANT * BackFaceStyle,
        /*[out]*/ VARIANT * Monument ) = 0;
      virtual HRESULT __stdcall raw_SetSectionPlanes (
        /*[in]*/ long nPlanes,
        /*[in]*/ VARIANT * Positions = &vtMissing,
        /*[in]*/ VARIANT * Normals = &vtMissing,
        /*[in]*/ VARIANT * FaceStyles = &vtMissing ) = 0;
      virtual HRESULT __stdcall raw_GetSectionPlanes (
        /*[out]*/ long * pnPlanes,
        /*[out]*/ VARIANT * Positions,
        /*[out]*/ VARIANT * Normals,
        /*[out]*/ VARIANT * FaceStyles ) = 0;
      virtual HRESULT __stdcall raw_SetAttribute (
        /*[in]*/ long Attribute,
        /*[in]*/ VARIANT AttributeData ) = 0;
      virtual HRESULT __stdcall raw_GetAttribute (
        /*[in]*/ long Attribute,
        /*[out]*/ VARIANT * AttributeData ) = 0;
      virtual HRESULT __stdcall raw_ClearRotationFocus ( ) = 0;
      virtual HRESULT __stdcall raw_GetRotationFocus (
        /*[out]*/ double * pdPointX,
        /*[out]*/ double * pdPointY,
        /*[out]*/ double * pdPointZ,
        /*[out]*/ double * pdDirectionX,
        /*[out]*/ double * pdDirectionZ,
        /*[out]*/ double * pdDirectionY,
        /*[out]*/ double * pdFront,
        /*[out]*/ double * pdBack,
        /*[out]*/ double * pdRadius,
        /*[out]*/ long * puOptions ) = 0;
      virtual HRESULT __stdcall raw_SetRotationPoint (
        /*[in]*/ double dPointX,
        /*[in]*/ double dPointY,
        /*[in]*/ double dPointZ ) = 0;
      virtual HRESULT __stdcall raw_SetRotationAxis (
        /*[in]*/ double dPointX,
        /*[in]*/ double dPointY,
        /*[in]*/ double dPointZ,
        /*[in]*/ double dDirectionX,
        /*[in]*/ double dDirectionY,
        /*[in]*/ double dDirectionZ ) = 0;
      virtual HRESULT __stdcall raw_SetRotationFocus (
        /*[in]*/ double dPointX,
        /*[in]*/ double dPointY,
        /*[in]*/ double dPointZ,
        /*[in]*/ double dDirectionX,
        /*[in]*/ double dDirectionZ,
        /*[in]*/ double dDirectionY,
        /*[in]*/ double dFront,
        /*[in]*/ double dBack,
        /*[in]*/ double dRadius,
        /*[in]*/ long uOptions ) = 0;
      virtual HRESULT __stdcall raw_Locate (
        /*[in]*/ long lPointX,
        /*[in]*/ long lPointY,
        /*[in]*/ long lRadius,
        /*[out]*/ double * pdHitPointX,
        /*[out]*/ double * pdHitPointY,
        /*[out]*/ double * pdHitPointZ ) = 0;
      virtual HRESULT __stdcall raw_GetModelRange (
        /*[out]*/ double * pdLowX,
        /*[out]*/ double * pdLowY,
        /*[out]*/ double * pdLowZ,
        /*[out]*/ double * pdHighX,
        /*[out]*/ double * pdHighY,
        /*[out]*/ double * pdHighZ ) = 0;
      virtual HRESULT __stdcall raw_OrientCameraEx (
        /*[in]*/ long lFlags,
        /*[in]*/ long lButtons,
        /*[in]*/ double dX,
        /*[in]*/ double dY,
        /*[in]*/ double dZ,
        /*[in]*/ double dYaw,
        /*[in]*/ double dPitch,
        /*[in]*/ double dRoll ) = 0;
      virtual HRESULT __stdcall raw_GetCameraEx (
        /*[out]*/ long * lFlags,
        /*[out]*/ double * dEyeX,
        /*[out]*/ double * dEyeY,
        /*[out]*/ double * dEyeZ,
        /*[out]*/ double * dTargetX,
        /*[out]*/ double * dTargetY,
        /*[out]*/ double * dTargetZ,
        /*[out]*/ double * dUpX,
        /*[out]*/ double * dUpY,
        /*[out]*/ double * dUpZ,
        /*[out]*/ double * dNearClip,
        /*[out]*/ double * dFarClip,
        /*[out]*/ double * dFrameWidth,
        /*[out]*/ double * dFrameHeight,
        /*[out]*/ double * dFrameEyeX,
        /*[out]*/ double * dFrameEyeY,
        /*[out]*/ double * dFrameScale ) = 0;
      virtual HRESULT __stdcall raw_SetCameraEx (
        /*[in]*/ long lFlags,
        /*[in]*/ double dEyeX,
        /*[in]*/ double dEyeY,
        /*[in]*/ double dEyeZ,
        /*[in]*/ double dTargetX,
        /*[in]*/ double dTargetY,
        /*[in]*/ double dTargetZ,
        /*[in]*/ double dUpX,
        /*[in]*/ double dUpY,
        /*[in]*/ double dUpZ,
        /*[in]*/ double dNearClip,
        /*[in]*/ double dFarClip,
        /*[in]*/ double dFrameWidth,
        /*[in]*/ double dFrameHeight,
        /*[in]*/ double dFrameEyeX,
        /*[in]*/ double dFrameEyeY,
        /*[in]*/ double dFrameScale ) = 0;
      virtual HRESULT __stdcall raw_SaveCurrentView (
        /*[in]*/ VARIANT Name ) = 0;
      virtual HRESULT __stdcall raw_ApplyNamedView (
        /*[in]*/ VARIANT Name ) = 0;
      virtual HRESULT __stdcall raw_AreaZoomCamera (
        /*[in]*/ int X1,
        /*[in]*/ int Y1,
        /*[in]*/ int X2,
        /*[in]*/ int Y2 ) = 0;
      virtual HRESULT __stdcall raw_CreateUserRange (
        /*[out]*/ long * pidUserRange ) = 0;
      virtual HRESULT __stdcall raw_DeleteUserRange (
        /*[in]*/ long idUserRange ) = 0;
      virtual HRESULT __stdcall raw_GetUserRange (
        /*[in]*/ long idUserRange,
        /*[out]*/ double * pdLowX,
        /*[out]*/ double * pdLowY,
        /*[out]*/ double * pdLowZ,
        /*[out]*/ double * pdHighX,
        /*[out]*/ double * pdHighY,
        /*[out]*/ double * pdHighZ ) = 0;
      virtual HRESULT __stdcall raw_SetUserRange (
        /*[in]*/ long idUserRange,
        /*[in]*/ double dLowX,
        /*[in]*/ double dLowY,
        /*[in]*/ double dLowZ,
        /*[in]*/ double dHighX,
        /*[in]*/ double dHighY,
        /*[in]*/ double dHighZ ) = 0;
      virtual HRESULT __stdcall get_MovieFrameRate (
        /*[out,retval]*/ unsigned long * pdwMovieFrameRate ) = 0;
      virtual HRESULT __stdcall put_MovieFrameRate (
        /*[in]*/ unsigned long pdwMovieFrameRate ) = 0;
      virtual HRESULT __stdcall get_MovieBitRate (
        /*[out,retval]*/ unsigned long * pdwMovieBitRate ) = 0;
      virtual HRESULT __stdcall put_MovieBitRate (
        /*[in]*/ unsigned long pdwMovieBitRate ) = 0;
      virtual HRESULT __stdcall get_MovieCodec (
        /*[out,retval]*/ BSTR * pCodec ) = 0;
      virtual HRESULT __stdcall put_MovieCodec (
        /*[in]*/ BSTR pCodec ) = 0;
      virtual HRESULT __stdcall get_MovieQuality (
        /*[out,retval]*/ unsigned long * pdwMovieQuality ) = 0;
      virtual HRESULT __stdcall put_MovieQuality (
        /*[in]*/ unsigned long pdwMovieQuality ) = 0;
      virtual HRESULT __stdcall get_MovieTitle (
        /*[out,retval]*/ BSTR * pTitle ) = 0;
      virtual HRESULT __stdcall put_MovieTitle (
        /*[in]*/ BSTR pTitle ) = 0;
      virtual HRESULT __stdcall get_MovieSubTitle (
        /*[out,retval]*/ BSTR * pSubTitle ) = 0;
      virtual HRESULT __stdcall put_MovieSubTitle (
        /*[in]*/ BSTR pSubTitle ) = 0;
      virtual HRESULT __stdcall get_MovieCopyright (
        /*[out,retval]*/ BSTR * pCopyright ) = 0;
      virtual HRESULT __stdcall put_MovieCopyright (
        /*[in]*/ BSTR pCopyright ) = 0;
      virtual HRESULT __stdcall get_MovieAuthor (
        /*[out,retval]*/ BSTR * pAuthor ) = 0;
      virtual HRESULT __stdcall put_MovieAuthor (
        /*[in]*/ BSTR pAuthor ) = 0;
      virtual HRESULT __stdcall get_MovieAuthorURL (
        /*[out,retval]*/ BSTR * pAuthorURL ) = 0;
      virtual HRESULT __stdcall put_MovieAuthorURL (
        /*[in]*/ BSTR pAuthorURL ) = 0;
      virtual HRESULT __stdcall get_MovieDescription (
        /*[out,retval]*/ BSTR * pDescription ) = 0;
      virtual HRESULT __stdcall put_MovieDescription (
        /*[in]*/ BSTR pDescription ) = 0;
      virtual HRESULT __stdcall raw_GetAvailableMovieCodecs (
        /*[out]*/ SAFEARRAY * * AvailableCodecs ) = 0;
      virtual HRESULT __stdcall raw_SetMovieResolution (
        /*[in]*/ enum seMovieStandardResolutionConstants StandardMovieResolution ) = 0;
      virtual HRESULT __stdcall raw_SetCustomMovieResolution (
        /*[in]*/ int nWidth,
        /*[in]*/ int nHeight ) = 0;
      virtual HRESULT __stdcall raw_CreateMovieRecorder (
        /*[in]*/ enum seMovieFormatConstants Format ) = 0;
      virtual HRESULT __stdcall raw_DestroyMovieRecorder ( ) = 0;
      virtual HRESULT __stdcall raw_BeginMovieRecording (
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall raw_AddFrameToMovie (
        /*[in]*/ VARIANT_BOOL KeyFrame,
        /*[out]*/ int * pNewFrameCount ) = 0;
      virtual HRESULT __stdcall raw_EndMovieRecording ( ) = 0;
      virtual HRESULT __stdcall raw_RangeZoomCamera (
        /*[in]*/ double dLowX,
        /*[in]*/ double dLowY,
        /*[in]*/ double dLowZ,
        /*[in]*/ double dHighX,
        /*[in]*/ double dHighY,
        /*[in]*/ double dHighZ ) = 0;
      virtual HRESULT __stdcall raw_UserRangeZoomCamera (
        /*[in]*/ long idUserRange ) = 0;
      virtual HRESULT __stdcall raw_RefreshView (
        /*[in]*/ long nOptions ) = 0;
      virtual HRESULT __stdcall get_SharpenLevel (
        /*[out,retval]*/ enum seSharpenLevelConstants * peLevel ) = 0;
      virtual HRESULT __stdcall put_SharpenLevel (
        /*[in]*/ enum seSharpenLevelConstants peLevel ) = 0;
      virtual HRESULT __stdcall get_SectionPlanesOptions (
        /*[out,retval]*/ VARIANT * Options ) = 0;
      virtual HRESULT __stdcall put_SectionPlanesOptions (
        /*[in]*/ VARIANT Options ) = 0;
      virtual HRESULT __stdcall raw_SetSectionPlanesParams (
        /*[in]*/ VARIANT Options,
        /*[in]*/ VARIANT PlaneCount,
        /*[in]*/ VARIANT * Positions = &vtMissing,
        /*[in]*/ VARIANT * Normals = &vtMissing,
        /*[in]*/ VARIANT * Colors = &vtMissing ) = 0;
      virtual HRESULT __stdcall raw_GetSectionPlanesParams (
        /*[out]*/ VARIANT * Options,
        /*[out]*/ VARIANT * PlaneCount,
        /*[out]*/ VARIANT * Positions,
        /*[out]*/ VARIANT * Normals,
        /*[out]*/ VARIANT * Colors ) = 0;
};

struct __declspec(uuid("f53e5bec-5e2a-4570-bc6e-aed209928ff7"))
NamedView : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDescription,put=PutDescription))
    _bstr_t Description;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetDescription ( );
    void PutDescription (
        _bstr_t _arg1 );
    HRESULT GetCamera (
        double * EyeX,
        double * EyeY,
        double * EyeZ,
        double * TargetX,
        double * TargetY,
        double * TargetZ,
        double * UpX,
        double * UpY,
        double * UpZ,
        VARIANT_BOOL * Perspective,
        double * ScaleOrAngle );
    HRESULT SetCamera (
        double EyeX,
        double EyeY,
        double EyeZ,
        double TargetX,
        double TargetY,
        double TargetZ,
        double UpX,
        double UpY,
        double UpZ,
        VARIANT_BOOL Perspective,
        double ScaleOrAngle );
    HRESULT GetCameraEx (
        long * plFlags,
        double * pdEyeX,
        double * pdEyeY,
        double * pdEyeZ,
        double * pdTargetX,
        double * pdTargetY,
        double * pdTargetZ,
        double * pdUpX,
        double * pdUpY,
        double * pdUpZ,
        double * pdNearClip,
        double * pdFarClip,
        double * pdFrameWidth,
        double * pdFrameHeight,
        double * pdFrameEyeX,
        double * pdFrameEyeY,
        double * pdFrameScale );
    HRESULT SetCameraEx (
        long lFlags,
        double dEyeX,
        double dEyeY,
        double dEyeZ,
        double dTargetX,
        double dTargetY,
        double dTargetZ,
        double dUpX,
        double dUpY,
        double dUpZ,
        double dNearClip,
        double dFarClip,
        double dFrameWidth,
        double dFrameHeight,
        double dFrameEyeX,
        double dFrameEyeY,
        double dFrameScale );
};

struct __declspec(uuid("31261339-0e47-4ab0-a8c5-dae5c42828d9"))
_INamedViewsAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetNames))
    SAFEARRAY * Names;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    SAFEARRAY * GetNames ( );
    NamedViewPtr Create (
        _bstr_t Name );
    NamedViewPtr GetByName (
        _bstr_t Name );
    HRESULT Remove (
        _bstr_t Name );
    HRESULT Rename (
        _bstr_t currName,
        _bstr_t NewName );
    IUnknownPtr Get_NewEnum ( );
    NamedViewPtr Item (
        const _variant_t & Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Names (
        /*[out,retval]*/ SAFEARRAY * * Names ) = 0;
      virtual HRESULT __stdcall raw_Create (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct NamedView * * Item ) = 0;
      virtual HRESULT __stdcall raw_GetByName (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct NamedView * * Item ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall raw_Rename (
        /*[in]*/ BSTR currName,
        /*[in]*/ BSTR NewName ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Unknown ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct NamedView * * Item ) = 0;
};

struct __declspec(uuid("ed4410da-106b-4b10-bed2-8783a57ec8f7"))
_INamedViewAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDescription,put=PutDescription))
    _bstr_t Description;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    _bstr_t GetDescription ( );
    void PutDescription (
        _bstr_t Description );
    HRESULT GetCamera (
        double * EyeX,
        double * EyeY,
        double * EyeZ,
        double * TargetX,
        double * TargetY,
        double * TargetZ,
        double * UpX,
        double * UpY,
        double * UpZ,
        VARIANT_BOOL * Perspective,
        double * ScaleOrAngle );
    HRESULT SetCamera (
        double EyeX,
        double EyeY,
        double EyeZ,
        double TargetX,
        double TargetY,
        double TargetZ,
        double UpX,
        double UpY,
        double UpZ,
        VARIANT_BOOL Perspective,
        double ScaleOrAngle );
    HRESULT GetCameraEx (
        long * plFlags,
        double * pdEyeX,
        double * pdEyeY,
        double * pdEyeZ,
        double * pdTargetX,
        double * pdTargetY,
        double * pdTargetZ,
        double * pdUpX,
        double * pdUpY,
        double * pdUpZ,
        double * pdNearClip,
        double * pdFarClip,
        double * pdFrameWidth,
        double * pdFrameHeight,
        double * pdFrameEyeX,
        double * pdFrameEyeY,
        double * pdFrameScale );
    HRESULT SetCameraEx (
        long lFlags,
        double dEyeX,
        double dEyeY,
        double dEyeZ,
        double dTargetX,
        double dTargetY,
        double dTargetZ,
        double dUpX,
        double dUpY,
        double dUpZ,
        double dNearClip,
        double dFarClip,
        double dFrameWidth,
        double dFrameHeight,
        double dFrameEyeX,
        double dFrameEyeY,
        double dFrameScale );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * Description ) = 0;
      virtual HRESULT __stdcall put_Description (
        /*[in]*/ BSTR Description ) = 0;
      virtual HRESULT __stdcall raw_GetCamera (
        /*[out]*/ double * EyeX,
        /*[out]*/ double * EyeY,
        /*[out]*/ double * EyeZ,
        /*[out]*/ double * TargetX,
        /*[out]*/ double * TargetY,
        /*[out]*/ double * TargetZ,
        /*[out]*/ double * UpX,
        /*[out]*/ double * UpY,
        /*[out]*/ double * UpZ,
        /*[out]*/ VARIANT_BOOL * Perspective,
        /*[out]*/ double * ScaleOrAngle ) = 0;
      virtual HRESULT __stdcall raw_SetCamera (
        /*[in]*/ double EyeX,
        /*[in]*/ double EyeY,
        /*[in]*/ double EyeZ,
        /*[in]*/ double TargetX,
        /*[in]*/ double TargetY,
        /*[in]*/ double TargetZ,
        /*[in]*/ double UpX,
        /*[in]*/ double UpY,
        /*[in]*/ double UpZ,
        /*[in]*/ VARIANT_BOOL Perspective,
        /*[in]*/ double ScaleOrAngle ) = 0;
      virtual HRESULT __stdcall raw_GetCameraEx (
        /*[out]*/ long * plFlags,
        /*[out]*/ double * pdEyeX,
        /*[out]*/ double * pdEyeY,
        /*[out]*/ double * pdEyeZ,
        /*[out]*/ double * pdTargetX,
        /*[out]*/ double * pdTargetY,
        /*[out]*/ double * pdTargetZ,
        /*[out]*/ double * pdUpX,
        /*[out]*/ double * pdUpY,
        /*[out]*/ double * pdUpZ,
        /*[out]*/ double * pdNearClip,
        /*[out]*/ double * pdFarClip,
        /*[out]*/ double * pdFrameWidth,
        /*[out]*/ double * pdFrameHeight,
        /*[out]*/ double * pdFrameEyeX,
        /*[out]*/ double * pdFrameEyeY,
        /*[out]*/ double * pdFrameScale ) = 0;
      virtual HRESULT __stdcall raw_SetCameraEx (
        /*[in]*/ long lFlags,
        /*[in]*/ double dEyeX,
        /*[in]*/ double dEyeY,
        /*[in]*/ double dEyeZ,
        /*[in]*/ double dTargetX,
        /*[in]*/ double dTargetY,
        /*[in]*/ double dTargetZ,
        /*[in]*/ double dUpX,
        /*[in]*/ double dUpY,
        /*[in]*/ double dUpZ,
        /*[in]*/ double dNearClip,
        /*[in]*/ double dFarClip,
        /*[in]*/ double dFrameWidth,
        /*[in]*/ double dFrameHeight,
        /*[in]*/ double dFrameEyeX,
        /*[in]*/ double dFrameEyeY,
        /*[in]*/ double dFrameScale ) = 0;
};

struct __declspec(uuid("6fe25d8d-331e-4449-ac45-58d52b08aeef"))
UnitOfMeasure : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum UnitTypeConstants Type;
    __declspec(property(get=GetUnits,put=PutUnits))
    int Units;
    __declspec(property(get=GetPrecision,put=PutPrecision))
    int Precision;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum UnitTypeConstants GetType ( );
    int GetUnits ( );
    void PutUnits (
        int _arg1 );
    int GetPrecision ( );
    void PutPrecision (
        int _arg1 );
};

struct __declspec(uuid("c1e8fe1e-fbe0-11d1-be0a-080036b4d502"))
_IUnitsOfMeasureAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _variant_t ParseUnit (
        int Index,
        _bstr_t UnitString );
    _variant_t FormatUnit (
        int Index,
        double Dbus,
        const _variant_t & PrecisionConstant = vtMissing );
    ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    UnitOfMeasurePtr Item (
        const _variant_t & Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ParseUnit (
        /*[in]*/ int Index,
        /*[in]*/ BSTR UnitString,
        /*[out,retval]*/ VARIANT * Dbus ) = 0;
      virtual HRESULT __stdcall raw_FormatUnit (
        /*[in]*/ int Index,
        /*[in]*/ double Dbus,
        /*[in]*/ VARIANT PrecisionConstant,
        /*[out,retval]*/ VARIANT * UnitString ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Enum ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct UnitOfMeasure * * Item ) = 0;
};

struct __declspec(uuid("fd9bd5a2-7df6-46c6-9d5d-d13e6d7dbdb4"))
_IUnitOfMeasureAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum UnitTypeConstants Type;
    __declspec(property(get=GetUnits,put=PutUnits))
    int Units;
    __declspec(property(get=GetPrecision,put=PutPrecision))
    int Precision;

    //
    // Wrapper methods for error-handling
    //

    enum UnitTypeConstants GetType ( );
    int GetUnits ( );
    void PutUnits (
        int Units );
    int GetPrecision ( );
    void PutPrecision (
        int Precision );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum UnitTypeConstants * Type ) = 0;
      virtual HRESULT __stdcall get_Units (
        /*[out,retval]*/ int * Units ) = 0;
      virtual HRESULT __stdcall put_Units (
        /*[in]*/ int Units ) = 0;
      virtual HRESULT __stdcall get_Precision (
        /*[out,retval]*/ int * Precision ) = 0;
      virtual HRESULT __stdcall put_Precision (
        /*[in]*/ int Precision ) = 0;
};

struct __declspec(uuid("d8586fc2-2c77-4ed1-b1f5-7a48ce52d4cd"))
_ICPDInitializerBiDMAuto : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT GetDocuments (
        SAFEARRAY * * psaDocs );
    HRESULT GetPropertiesInfo (
        _bstr_t bstrDocName,
        VARIANT * pvPropInfo );
    HRESULT SetPropertiesInfo (
        _bstr_t bstrDocName,
        const _variant_t & vPropInfo );
    HRESULT SetControlsBehavior (
        VARIANT_BOOL vbDisableAssignAllButtonAndMenu,
        VARIANT_BOOL vbDisableDocumentNumberCell,
        VARIANT_BOOL vbDisableRevisionIDCell );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetDocuments (
        /*[out]*/ SAFEARRAY * * psaDocs ) = 0;
      virtual HRESULT __stdcall raw_GetPropertiesInfo (
        /*[in]*/ BSTR bstrDocName,
        /*[out]*/ VARIANT * pvPropInfo ) = 0;
      virtual HRESULT __stdcall raw_SetPropertiesInfo (
        /*[in]*/ BSTR bstrDocName,
        /*[in]*/ VARIANT vPropInfo ) = 0;
      virtual HRESULT __stdcall raw_SetControlsBehavior (
        /*[in]*/ VARIANT_BOOL vbDisableAssignAllButtonAndMenu,
        /*[in]*/ VARIANT_BOOL vbDisableDocumentNumberCell,
        /*[in]*/ VARIANT_BOOL vbDisableRevisionIDCell ) = 0;
};

struct __declspec(uuid("1d3da504-9bff-11d1-ba96-080036230602"))
CommandBarPopup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetBeginGroup,put=PutBeginGroup))
    VARIANT_BOOL BeginGroup;
    __declspec(property(get=GetBuiltIn))
    VARIANT_BOOL BuiltIn;
    __declspec(property(get=GetBuiltInFace,put=PutBuiltInFace))
    VARIANT_BOOL BuiltInFace;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetDescriptionText,put=PutDescriptionText))
    _bstr_t DescriptionText;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetFaceId,put=PutFaceId))
    long FaceId;
    __declspec(property(get=GetHeight))
    long Height;
    __declspec(property(get=GetHelpContextId,put=PutHelpContextId))
    long HelpContextId;
    __declspec(property(get=GetHelpFile,put=PutHelpFile))
    _bstr_t HelpFile;
    __declspec(property(get=GetId))
    long Id;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetLeft))
    long Left;
    __declspec(property(get=GetOnAction,put=PutOnAction))
    _bstr_t OnAction;
    __declspec(property(get=GetParameterText,put=PutParameterText))
    _bstr_t ParameterText;
    __declspec(property(get=GetParent))
    CommandBarPtr Parent;
    __declspec(property(get=GetShortcutText,put=PutShortcutText))
    _bstr_t ShortcutText;
    __declspec(property(get=GetTag,put=PutTag))
    _bstr_t Tag;
    __declspec(property(get=GetTooltipText,put=PutTooltipText))
    _bstr_t TooltipText;
    __declspec(property(get=GetTop))
    long Top;
    __declspec(property(get=GetType))
    enum SeControlType Type;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetWidth))
    long Width;
    __declspec(property(get=GetCommandBar))
    CommandBarPtr CommandBar;
    __declspec(property(get=GetControls))
    CommandBarControlsPtr Controls;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetApplication ( );
    VARIANT_BOOL GetBeginGroup ( );
    void PutBeginGroup (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetBuiltIn ( );
    VARIANT_BOOL GetBuiltInFace ( );
    void PutBuiltInFace (
        VARIANT_BOOL _arg1 );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t _arg1 );
    _bstr_t GetDescriptionText ( );
    void PutDescriptionText (
        _bstr_t _arg1 );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL _arg1 );
    long GetFaceId ( );
    void PutFaceId (
        long _arg1 );
    long GetHeight ( );
    long GetHelpContextId ( );
    void PutHelpContextId (
        long _arg1 );
    _bstr_t GetHelpFile ( );
    void PutHelpFile (
        _bstr_t _arg1 );
    long GetId ( );
    long GetIndex ( );
    long GetLeft ( );
    _bstr_t GetOnAction ( );
    void PutOnAction (
        _bstr_t _arg1 );
    _bstr_t GetParameterText ( );
    void PutParameterText (
        _bstr_t _arg1 );
    CommandBarPtr GetParent ( );
    _bstr_t GetShortcutText ( );
    void PutShortcutText (
        _bstr_t _arg1 );
    _bstr_t GetTag ( );
    void PutTag (
        _bstr_t _arg1 );
    _bstr_t GetTooltipText ( );
    void PutTooltipText (
        _bstr_t _arg1 );
    long GetTop ( );
    enum SeControlType GetType ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    long GetWidth ( );
    HRESULT Delete (
        const _variant_t & Temporary = vtMissing );
    HRESULT Execute ( );
    HRESULT Help ( );
    HRESULT LoadFace (
        _bstr_t Face );
    CommandBarPtr GetCommandBar ( );
    CommandBarControlsPtr GetControls ( );
};

struct __declspec(uuid("5a1831ef-9da4-11d1-ba98-080036230602"))
ISECommandBarPopup : ISECommandBarControl
{
    //
    // Property data
    //

    __declspec(property(get=GetCommandBar))
    CommandBarPtr CommandBar;
    __declspec(property(get=GetControls))
    CommandBarControlsPtr Controls;

    //
    // Wrapper methods for error-handling
    //

    CommandBarPtr GetCommandBar ( );
    CommandBarControlsPtr GetControls ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_CommandBar (
        /*[out,retval]*/ struct CommandBar * * CommandBar ) = 0;
      virtual HRESULT __stdcall get_Controls (
        /*[out,retval]*/ struct CommandBarControls * * Controls ) = 0;
};

struct __declspec(uuid("52233663-75c7-41ec-893c-9e600130d9bc"))
DISEBendTableEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT BendTableStart ( );
    HRESULT BendTableEnd ( );
    HRESULT BendSelect (
        long BendIndex,
        long ColumnId );
    HRESULT BendUserDataChanged (
        long BendIndex,
        long ColumnId );
};

struct __declspec(uuid("0ea0d1f1-a199-11d1-aecc-08003616ce02"))
ISEDocumentEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT BeforeClose ( );
    HRESULT BeforeSave ( );
    HRESULT AfterSave ( );
    HRESULT SelectSetChanged (
        IDispatch * SelectSet );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_BeforeClose ( ) = 0;
      virtual HRESULT __stdcall raw_BeforeSave ( ) = 0;
      virtual HRESULT __stdcall raw_AfterSave ( ) = 0;
      virtual HRESULT __stdcall raw_SelectSetChanged (
        IDispatch * SelectSet ) = 0;
};

struct __declspec(uuid("a33cbf78-14e8-45b2-87f0-157eac2b28dc"))
ISEDocumentEventsEx : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT CanSave (
        VARIANT_BOOL * bCanSave );
    HRESULT CanClose (
        VARIANT_BOOL * bCanClose );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_CanSave (
        /*[out]*/ VARIANT_BOOL * bCanSave ) = 0;
      virtual HRESULT __stdcall raw_CanClose (
        /*[out]*/ VARIANT_BOOL * bCanClose ) = 0;
};

struct __declspec(uuid("a38bc1f3-4aee-4733-9046-c7e6fd9f67f0"))
ISEBendTableEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT BendTableStart ( );
    HRESULT BendTableEnd ( );
    HRESULT BendSelect (
        long BendIndex,
        long ColumnId );
    HRESULT BendUserDataChanged (
        long BendIndex,
        long ColumnId );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_BendTableStart ( ) = 0;
      virtual HRESULT __stdcall raw_BendTableEnd ( ) = 0;
      virtual HRESULT __stdcall raw_BendSelect (
        /*[in]*/ long BendIndex,
        /*[in]*/ long ColumnId ) = 0;
      virtual HRESULT __stdcall raw_BendUserDataChanged (
        /*[in]*/ long BendIndex,
        /*[in]*/ long ColumnId ) = 0;
};

enum SeFeatureAddFlag
{
    seNew = 1,
    seUnSuppress = 2,
    seUnSuppressUpTo = 3,
    seNewPatternItem = 4,
    seUnSuppressPatternItem = 5
};

enum SeFeatureDeleteFlag
{
    sePermanent = 1,
    seSuppress = 2,
    seSuppressDownTo = 3,
    sePermanentPatternItem = 4,
    seSuppressPatternItem = 5
};

enum SeFeatureModifyFlag
{
    seSchemaChanged = 1,
    seDirectInputsChanged = 2,
    seReordered = 3
};

struct __declspec(uuid("6a89dfd1-9e7d-11d1-aecc-08003616ce02"))
ISEModelRecomputeEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT BeforeRecompute ( );
    HRESULT AfterFeatureIsAdded (
        enum SeFeatureAddFlag AddFlag,
        IDispatch * Feature );
    HRESULT BeforeFeatureIsDeleted (
        enum SeFeatureDeleteFlag DeleteFlag,
        IDispatch * Feature );
    HRESULT AfterFeatureIsModified (
        enum SeFeatureModifyFlag ModifyFlag,
        IDispatch * Feature );
    HRESULT AfterRecompute ( );
    HRESULT BeforeModelIsDeleted (
        IDispatch * Model );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_BeforeRecompute ( ) = 0;
      virtual HRESULT __stdcall raw_AfterFeatureIsAdded (
        /*[in]*/ enum SeFeatureAddFlag AddFlag,
        /*[in]*/ IDispatch * Feature ) = 0;
      virtual HRESULT __stdcall raw_BeforeFeatureIsDeleted (
        /*[in]*/ enum SeFeatureDeleteFlag DeleteFlag,
        /*[in]*/ IDispatch * Feature ) = 0;
      virtual HRESULT __stdcall raw_AfterFeatureIsModified (
        /*[in]*/ enum SeFeatureModifyFlag ModifyFlag,
        /*[in]*/ IDispatch * Feature ) = 0;
      virtual HRESULT __stdcall raw_AfterRecompute ( ) = 0;
      virtual HRESULT __stdcall raw_BeforeModelIsDeleted (
        /*[in]*/ IDispatch * Model ) = 0;
};

struct __declspec(uuid("89b0cf26-3216-4381-b62f-4a08f70f153c"))
ISEDynamicEditEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT BeginDynamicEdit ( );
    HRESULT EndDynamicEdit ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_BeginDynamicEdit ( ) = 0;
      virtual HRESULT __stdcall raw_EndDynamicEdit ( ) = 0;
};

struct __declspec(uuid("d5dfdee6-4b6d-4527-961d-95c3b227d7a7"))
ISEApplicationEventsEx : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT OnCommandUpdateUI (
        long CommandID,
        long * CommandFlags,
        BSTR * MenuItemTextD );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_OnCommandUpdateUI (
        /*[in]*/ long CommandID,
        /*[in,out]*/ long * CommandFlags,
        /*[out]*/ BSTR * MenuItemTextD ) = 0;
};

enum ApplicationBeforeDocumentOpenEvent
{
    OpenFromUnknown = 1,
    OpenFromMRU = 2,
    OpenDropTagetApplication = 3,
    OpenDropTargetDocumentView = 4,
    OpenFromAutomation = 5,
    OpenFromClipboardForCopyPasted = 6
};

struct __declspec(uuid("194c4d42-c34b-4ed9-af15-fda41b5fca65"))
ISEApplicationEventsEx2 : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT OnBeforeDocumentOpen (
        enum ApplicationBeforeDocumentOpenEvent Context,
        _bstr_t Filename,
        VARIANT_BOOL * CancelOpen );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_OnBeforeDocumentOpen (
        /*[in]*/ enum ApplicationBeforeDocumentOpenEvent Context,
        /*[in]*/ BSTR Filename,
        /*[out]*/ VARIANT_BOOL * CancelOpen ) = 0;
};

enum ApplicationReadyEvent
{
    ApplicationIsUIReady = 1,
    ActiveDocumentIsUIReady = 2
};

struct __declspec(uuid("29e6a1dc-02c7-41fa-9de0-9f07a6e61cfd"))
ISEApplicationReadyEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT OnApplicationReady (
        enum ApplicationReadyEvent Context );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_OnApplicationReady (
        /*[in]*/ enum ApplicationReadyEvent Context ) = 0;
};

enum ApplicationActiveFrameSwitchingEvent
{
    ApplicationSwitchingToMainFrame = 1,
    ApplicationSwitchingToFloatingFrame = 2
};

struct __declspec(uuid("c50f7d77-0b9d-4e8e-bf2c-d26e5bc2d0df"))
ISEApplicationActiveFrameSwitchingEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT OnApplicationActiveFrameSwitching (
        enum ApplicationActiveFrameSwitchingEvent Context,
        long hWndPreviouslyActiveFrame,
        long hWndNewlyActiveFrame );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_OnApplicationActiveFrameSwitching (
        /*[in]*/ enum ApplicationActiveFrameSwitchingEvent Context,
        /*[in]*/ long hWndPreviouslyActiveFrame,
        /*[in]*/ long hWndNewlyActiveFrame ) = 0;
};

enum ApplicationLicenseEvent
{
    ApplicationLicenseCheckin = 1,
    ApplicationLicenseCheckout = 2
};

struct __declspec(uuid("dec45181-8b9b-4d15-8828-eb26dfdd1901"))
ISEApplicationLicenseEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT OnApplicationLicense (
        enum ApplicationLicenseEvent Context,
        _bstr_t FeatureName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_OnApplicationLicense (
        /*[in]*/ enum ApplicationLicenseEvent Context,
        /*[in]*/ BSTR FeatureName ) = 0;
};

enum ApplicationDocumentLoadingEvent
{
    ApplicationWaitingForNextLevel = 1
};

struct __declspec(uuid("bacd7768-ee51-445a-8213-e754eab677bc"))
ISEApplicationDocumentLoadingEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT OnApplicationDocumentLoading (
        _bstr_t TopLevelFilename,
        enum ApplicationDocumentLoadingEvent Context,
        unsigned long Level,
        VARIANT_BOOL * Cancel );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_OnApplicationDocumentLoading (
        /*[in]*/ BSTR TopLevelFilename,
        /*[in]*/ enum ApplicationDocumentLoadingEvent Context,
        /*[in]*/ unsigned long Level,
        /*[out]*/ VARIANT_BOOL * Cancel ) = 0;
};

struct __declspec(uuid("39decc17-34d7-43e0-99b4-e62fa3c34b55"))
ISEAddInEventsEx : ISEAddInEvents
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT OnCommandOnLineHelp (
        long HelpCommandID,
        long CommandID,
        BSTR * HelpURL );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_OnCommandOnLineHelp (
        /*[in]*/ long HelpCommandID,
        /*[in]*/ long CommandID,
        /*[out]*/ BSTR * HelpURL ) = 0;
};

struct __declspec(uuid("eadfa570-c1f0-45e8-a5fe-d7ff9274fc46"))
ISEAddInEventsEx2 : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT OnCommand (
        long CommandID,
        enum ShortCutMenuContextConstants Context,
        enum DocumentTypeConstants ActiveDocumentType,
        IDispatch * pActiveDocument,
        IDispatch * pActiveWindow,
        IDispatch * pActiveSelectSet );
    HRESULT OnCommandHelp (
        long hFrameWnd,
        long HelpCommandID,
        long CommandID );
    HRESULT OnCommandUpdateUI (
        long CommandID,
        enum ShortCutMenuContextConstants Context,
        enum DocumentTypeConstants ActiveDocumentType,
        IDispatch * pActiveDocument,
        IDispatch * pActiveWindow,
        IDispatch * pActiveSelectSet,
        long * CommandFlags,
        BSTR * MenuItemText,
        long * BitmapID );
    HRESULT OnCommandOnLineHelp (
        long HelpCommandID,
        long CommandID,
        BSTR * HelpURL );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_OnCommand (
        /*[in]*/ long CommandID,
        /*[in]*/ enum ShortCutMenuContextConstants Context,
        /*[in]*/ enum DocumentTypeConstants ActiveDocumentType,
        /*[in]*/ IDispatch * pActiveDocument,
        /*[in]*/ IDispatch * pActiveWindow,
        /*[in]*/ IDispatch * pActiveSelectSet ) = 0;
      virtual HRESULT __stdcall raw_OnCommandHelp (
        /*[in]*/ long hFrameWnd,
        /*[in]*/ long HelpCommandID,
        /*[in]*/ long CommandID ) = 0;
      virtual HRESULT __stdcall raw_OnCommandUpdateUI (
        /*[in]*/ long CommandID,
        /*[in]*/ enum ShortCutMenuContextConstants Context,
        /*[in]*/ enum DocumentTypeConstants ActiveDocumentType,
        /*[in]*/ IDispatch * pActiveDocument,
        /*[in]*/ IDispatch * pActiveWindow,
        /*[in]*/ IDispatch * pActiveSelectSet,
        /*[in,out]*/ long * CommandFlags,
        /*[out]*/ BSTR * MenuItemText,
        /*[in,out]*/ long * BitmapID ) = 0;
      virtual HRESULT __stdcall raw_OnCommandOnLineHelp (
        /*[in]*/ long HelpCommandID,
        /*[in]*/ long CommandID,
        /*[out]*/ BSTR * HelpURL ) = 0;
};

struct __declspec(uuid("6574db79-dc47-4a1b-8f54-32b332037d7f"))
ISEAddInEdgeBarEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT AddPage (
        IDispatch * theDocument );
    HRESULT RemovePage (
        IDispatch * theDocument );
    HRESULT IsPageDisplayable (
        IDispatch * theDocument,
        _bstr_t EnvironmentCatID,
        VARIANT_BOOL * vbIsPageDisplayable );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddPage (
        /*[in]*/ IDispatch * theDocument ) = 0;
      virtual HRESULT __stdcall raw_RemovePage (
        /*[in]*/ IDispatch * theDocument ) = 0;
      virtual HRESULT __stdcall raw_IsPageDisplayable (
        /*[in]*/ IDispatch * theDocument,
        /*[in]*/ BSTR EnvironmentCatID,
        /*[out]*/ VARIANT_BOOL * vbIsPageDisplayable ) = 0;
};

struct __declspec(uuid("1d108618-612d-4afb-ac17-2d776f5e68e8"))
ISEAddInEdgeBarEventsEx : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT AddPage (
        IDispatch * theDocument );
    HRESULT RemovePage (
        IDispatch * theDocument );
    HRESULT IsPageDisplayable (
        IDispatch * theDocument,
        _bstr_t EnvironmentCatID,
        VARIANT_BOOL * vbIsPageDisplayable );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddPage (
        /*[in]*/ IDispatch * theDocument ) = 0;
      virtual HRESULT __stdcall raw_RemovePage (
        /*[in]*/ IDispatch * theDocument ) = 0;
      virtual HRESULT __stdcall raw_IsPageDisplayable (
        /*[in]*/ IDispatch * theDocument,
        /*[in]*/ BSTR EnvironmentCatID,
        /*[out]*/ VARIANT_BOOL * vbIsPageDisplayable ) = 0;
};

struct __declspec(uuid("06a9d08e-057e-470a-a194-75aacd9660cf"))
ISEAssemblyChangeEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT BeforeChange (
        IDispatch * theDocument,
        IDispatch * Object,
        enum ObjectType Type,
        seAssemblyChangeEventsConstants ChangeType );
    HRESULT AfterChange (
        IDispatch * theDocument,
        IDispatch * Object,
        enum ObjectType Type,
        seAssemblyChangeEventsConstants ChangeType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_BeforeChange (
        /*[in]*/ IDispatch * theDocument,
        /*[in]*/ IDispatch * Object,
        enum ObjectType Type,
        seAssemblyChangeEventsConstants ChangeType ) = 0;
      virtual HRESULT __stdcall raw_AfterChange (
        /*[in]*/ IDispatch * theDocument,
        /*[in]*/ IDispatch * Object,
        enum ObjectType Type,
        seAssemblyChangeEventsConstants ChangeType ) = 0;
};

enum AssemblyChangeEventsConstants
{
    seAssemblyOccurrenceRename = 1,
    seAssemblyFeatureRename = 2,
    seAssemblyComponentShow = 3,
    seAssemblyComponentHide = 4,
    seAssemblyOccurrenceAdd = 5,
    seAssemblyOccurrenceRemove = 6,
    seAssemblyOccurrenceTransform = 7,
    seAssemblySketchModify = 8,
    seAssemblyFeatureModify = 9,
    seAssemblyOccurrenceGeomModify = 10,
    seAssemblyComponentSuppress = 11,
    seAssemblyComponentUnSuppress = 12
};

struct __declspec(uuid("86e2c718-779e-4d11-a896-11554151c26d"))
DISEAssemblyChangeEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT BeforeChange (
        IDispatch * theDocument,
        IDispatch * Object,
        enum ObjectType Type,
        seAssemblyChangeEventsConstants ChangeType );
    HRESULT AfterChange (
        IDispatch * theDocument,
        IDispatch * Object,
        enum ObjectType Type,
        seAssemblyChangeEventsConstants ChangeType );
};

struct __declspec(uuid("0d615fce-d0b2-4fe4-8e31-6719619b3ff3"))
ISEAssemblyConfigurationChangeEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT OnBeforeAssemblyConfigurationChange (
        IDispatch * theDocument,
        VARIANT * varConfigNames,
        int nConfigNameCount );
    HRESULT OnAfterAssemblyConfigurationChange (
        IDispatch * theDocument,
        VARIANT * varConfigNames,
        int nConfigNameCount );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_OnBeforeAssemblyConfigurationChange (
        /*[in]*/ IDispatch * theDocument,
        /*[in]*/ VARIANT * varConfigNames,
        /*[in]*/ int nConfigNameCount ) = 0;
      virtual HRESULT __stdcall raw_OnAfterAssemblyConfigurationChange (
        /*[in]*/ IDispatch * theDocument,
        /*[in]*/ VARIANT * varConfigNames,
        /*[in]*/ int nConfigNameCount ) = 0;
};

struct __declspec(uuid("f44953eb-532f-4d54-82bc-f2debcc817ad"))
DISEAssemblyConfigurationChangeEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT OnBeforeAssemblyConfigurationChange (
        IDispatch * theDocument,
        VARIANT * varConfigNames,
        int nConfigNameCount );
    HRESULT OnAfterAssemblyConfigurationChange (
        IDispatch * theDocument,
        VARIANT * varConfigNames,
        int nConfigNameCount );
};

struct __declspec(uuid("f865f7bd-8d49-11d3-a3e6-0004ac969a5d"))
ISEAssemblyRecomputeEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT BeforeRecompute (
        IDispatch * theDocument );
    HRESULT AfterRecompute (
        IDispatch * theDocument );
    HRESULT AfterAdd (
        IDispatch * theDocument,
        IDispatch * Object,
        enum ObjectType Type );
    HRESULT BeforeDelete (
        IDispatch * theDocument,
        IDispatch * Object,
        enum ObjectType Type );
    HRESULT AfterModify (
        IDispatch * theDocument,
        IDispatch * Object,
        enum ObjectType Type,
        seAssemblyEventConstants ModifyType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_BeforeRecompute (
        /*[in]*/ IDispatch * theDocument ) = 0;
      virtual HRESULT __stdcall raw_AfterRecompute (
        /*[in]*/ IDispatch * theDocument ) = 0;
      virtual HRESULT __stdcall raw_AfterAdd (
        /*[in]*/ IDispatch * theDocument,
        /*[in]*/ IDispatch * Object,
        enum ObjectType Type ) = 0;
      virtual HRESULT __stdcall raw_BeforeDelete (
        /*[in]*/ IDispatch * theDocument,
        /*[in]*/ IDispatch * Object,
        enum ObjectType Type ) = 0;
      virtual HRESULT __stdcall raw_AfterModify (
        /*[in]*/ IDispatch * theDocument,
        /*[in]*/ IDispatch * Object,
        enum ObjectType Type,
        seAssemblyEventConstants ModifyType ) = 0;
};

enum AssemblyEventConstants
{
    seAssemblyOccurrenceReplace = 1
};

struct __declspec(uuid("c92c4390-944e-438b-9d02-772802edde42"))
DISEAssemblyRecomputeEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT BeforeRecompute (
        IDispatch * theDocument );
    HRESULT AfterRecompute (
        IDispatch * theDocument );
    HRESULT AfterAdd (
        IDispatch * theDocument,
        IDispatch * Object,
        enum ObjectType Type );
    HRESULT BeforeDelete (
        IDispatch * theDocument,
        IDispatch * Object,
        enum ObjectType Type );
    HRESULT AfterModify (
        IDispatch * theDocument,
        IDispatch * Object,
        enum ObjectType Type,
        seAssemblyEventConstants ModifyType );
};

struct __declspec(uuid("a1901cbe-e2b2-4862-a4ce-d430344b1173"))
ISEAssemblyFamilyEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT BeforeMemberActivate (
        IDispatch * theDocument,
        _bstr_t memberName );
    HRESULT AfterMemberActivate (
        IDispatch * theDocument,
        _bstr_t memberName );
    HRESULT BeforeMemberCreate (
        IDispatch * theDocument,
        _bstr_t memberName );
    HRESULT AfterMemberCreate (
        IDispatch * theDocument,
        _bstr_t memberName );
    HRESULT BeforeMemberDelete (
        IDispatch * theDocument,
        _bstr_t memberName );
    HRESULT AfterMemberDelete (
        IDispatch * theDocument,
        _bstr_t memberName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_BeforeMemberActivate (
        /*[in]*/ IDispatch * theDocument,
        /*[in]*/ BSTR memberName ) = 0;
      virtual HRESULT __stdcall raw_AfterMemberActivate (
        /*[in]*/ IDispatch * theDocument,
        /*[in]*/ BSTR memberName ) = 0;
      virtual HRESULT __stdcall raw_BeforeMemberCreate (
        /*[in]*/ IDispatch * theDocument,
        /*[in]*/ BSTR memberName ) = 0;
      virtual HRESULT __stdcall raw_AfterMemberCreate (
        /*[in]*/ IDispatch * theDocument,
        /*[in]*/ BSTR memberName ) = 0;
      virtual HRESULT __stdcall raw_BeforeMemberDelete (
        /*[in]*/ IDispatch * theDocument,
        /*[in]*/ BSTR memberName ) = 0;
      virtual HRESULT __stdcall raw_AfterMemberDelete (
        /*[in]*/ IDispatch * theDocument,
        /*[in]*/ BSTR memberName ) = 0;
};

struct __declspec(uuid("aba30234-04a4-47d7-86e4-e7fa1f162909"))
ISEAssemblyFamilyEvents2 : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT BeforeMemberActivate (
        IDispatch * theDocument,
        _bstr_t memberName );
    HRESULT AfterMemberActivate (
        IDispatch * theDocument,
        _bstr_t memberName );
    HRESULT BeforeMemberCreate (
        IDispatch * theDocument,
        _bstr_t memberName );
    HRESULT AfterMemberCreate (
        IDispatch * theDocument,
        _bstr_t memberName );
    HRESULT BeforeMemberDelete (
        IDispatch * theDocument,
        _bstr_t memberName );
    HRESULT AfterMemberDelete (
        IDispatch * theDocument,
        _bstr_t memberName );
    HRESULT BeforeMemberRename (
        IDispatch * theDocument,
        _bstr_t OldMemberName );
    HRESULT AfterMemberRename (
        IDispatch * theDocument,
        _bstr_t NewMemberName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_BeforeMemberActivate (
        /*[in]*/ IDispatch * theDocument,
        /*[in]*/ BSTR memberName ) = 0;
      virtual HRESULT __stdcall raw_AfterMemberActivate (
        /*[in]*/ IDispatch * theDocument,
        /*[in]*/ BSTR memberName ) = 0;
      virtual HRESULT __stdcall raw_BeforeMemberCreate (
        /*[in]*/ IDispatch * theDocument,
        /*[in]*/ BSTR memberName ) = 0;
      virtual HRESULT __stdcall raw_AfterMemberCreate (
        /*[in]*/ IDispatch * theDocument,
        /*[in]*/ BSTR memberName ) = 0;
      virtual HRESULT __stdcall raw_BeforeMemberDelete (
        /*[in]*/ IDispatch * theDocument,
        /*[in]*/ BSTR memberName ) = 0;
      virtual HRESULT __stdcall raw_AfterMemberDelete (
        /*[in]*/ IDispatch * theDocument,
        /*[in]*/ BSTR memberName ) = 0;
      virtual HRESULT __stdcall raw_BeforeMemberRename (
        /*[in]*/ IDispatch * theDocument,
        /*[in]*/ BSTR OldMemberName ) = 0;
      virtual HRESULT __stdcall raw_AfterMemberRename (
        /*[in]*/ IDispatch * theDocument,
        /*[in]*/ BSTR NewMemberName ) = 0;
};

struct __declspec(uuid("a054f88b-9c75-11d3-a3f0-0004ac969a5d"))
ISEFamilyOfPartsEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT AfterMemberDocumentCreated (
        IDispatch * theMember );
    HRESULT AfterMemberDocumentRenamed (
        IDispatch * theMember,
        _bstr_t OldName );
    HRESULT BeforeMemberDocumentDeleted (
        IDispatch * theMember );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AfterMemberDocumentCreated (
        /*[in]*/ IDispatch * theMember ) = 0;
      virtual HRESULT __stdcall raw_AfterMemberDocumentRenamed (
        /*[in]*/ IDispatch * theMember,
        /*[in]*/ BSTR OldName ) = 0;
      virtual HRESULT __stdcall raw_BeforeMemberDocumentDeleted (
        /*[in]*/ IDispatch * theMember ) = 0;
};

struct __declspec(uuid("dd8a8f60-b2af-4bfd-a106-99d3717a7650"))
ISEFamilyOfPartsExEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT AfterMemberDocumentCreated (
        IDispatch * theMember,
        VARIANT_BOOL DocumentExists );
    HRESULT AfterMemberDocumentRenamed (
        IDispatch * theMember,
        _bstr_t OldName );
    HRESULT BeforeMemberDocumentDeleted (
        IDispatch * theMember );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AfterMemberDocumentCreated (
        /*[in]*/ IDispatch * theMember,
        /*[in]*/ VARIANT_BOOL DocumentExists ) = 0;
      virtual HRESULT __stdcall raw_AfterMemberDocumentRenamed (
        /*[in]*/ IDispatch * theMember,
        /*[in]*/ BSTR OldName ) = 0;
      virtual HRESULT __stdcall raw_BeforeMemberDocumentDeleted (
        /*[in]*/ IDispatch * theMember ) = 0;
};

struct __declspec(uuid("03a58a85-9cfb-11d3-a3f0-0004ac969a5d"))
ISEDividePartEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT AfterDividePartDocumentCreated (
        IDispatch * theMember );
    HRESULT AfterDividePartDocumentRenamed (
        IDispatch * theMember,
        _bstr_t OldName );
    HRESULT BeforeDividePartDocumentDeleted (
        IDispatch * theMember );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AfterDividePartDocumentCreated (
        /*[in]*/ IDispatch * theMember ) = 0;
      virtual HRESULT __stdcall raw_AfterDividePartDocumentRenamed (
        /*[in]*/ IDispatch * theMember,
        /*[in]*/ BSTR OldName ) = 0;
      virtual HRESULT __stdcall raw_BeforeDividePartDocumentDeleted (
        /*[in]*/ IDispatch * theMember ) = 0;
};

struct __declspec(uuid("2d93aeee-3b14-11d4-a4d3-0004ac9695cb"))
ISEDrawingViewEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT AfterUpdate (
        IDispatch * DrawingView );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AfterUpdate (
        /*[in]*/ IDispatch * DrawingView ) = 0;
};

struct __declspec(uuid("21ee3696-5bcc-4815-8a40-209ef7d3eee4"))
ISEPartsListEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT AfterUpdate (
        IDispatch * PartsList );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AfterUpdate (
        /*[in]*/ IDispatch * PartsList ) = 0;
};

struct __declspec(uuid("f1f670b8-2891-4a30-8b9f-f91de7efd502"))
ISEDraftBendTableEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT AfterUpdate (
        IDispatch * DraftBendTable );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AfterUpdate (
        /*[in]*/ IDispatch * DraftBendTable ) = 0;
};

struct __declspec(uuid("95bd6ef5-4dbb-4d8a-8da9-526f56a6002f"))
ISEConnectorTableEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT AfterUpdate (
        IDispatch * ConnectorTable );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AfterUpdate (
        /*[in]*/ IDispatch * ConnectorTable ) = 0;
};

struct __declspec(uuid("55dde1f4-8afb-472e-af0d-5f04ffb25748"))
ISEBlockTableEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT AfterUpdate (
        IDispatch * BlockTable );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AfterUpdate (
        /*[in]*/ IDispatch * BlockTable ) = 0;
};

struct __declspec(uuid("0ea0d1f2-a199-11d1-aecc-08003616ce02"))
DISEDocumentEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT BeforeClose ( );
    HRESULT BeforeSave ( );
    HRESULT AfterSave ( );
    HRESULT SelectSetChanged (
        IDispatch * SelectSet );
};

struct __declspec(uuid("01d3f2a6-1e13-4761-8d3a-0fb28c957193"))
ISECommandInfoEx : ISECommandInfo
{
    //
    // Property data
    //

    __declspec(property(get=GetimageID))
    long imageID;

    //
    // Wrapper methods for error-handling
    //

    long GetimageID ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_imageID (
        /*[out,retval]*/ long * Id ) = 0;
};

struct __declspec(uuid("c16f467f-7c54-4e70-8fcd-03929dfef310"))
ISEAssemblyPhysicalPropertiesChangeEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT OnAfterAssemblyPhysicalPropertiesChange (
        IDispatch * theDocument );
    HRESULT OnBeforeAssemblyPhysicalPropertiesChange (
        IDispatch * theDocument );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_OnAfterAssemblyPhysicalPropertiesChange (
        /*[in]*/ IDispatch * theDocument ) = 0;
      virtual HRESULT __stdcall raw_OnBeforeAssemblyPhysicalPropertiesChange (
        /*[in]*/ IDispatch * theDocument ) = 0;
};

struct __declspec(uuid("c9ce85d8-9fb8-498e-9a7d-b322a10f8bb5"))
DISEAssemblyPhysicalPropertiesChangeEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT OnAfterAssemblyPhysicalPropertiesChange (
        IDispatch * theDocument );
    HRESULT OnBeforeAssemblyPhysicalPropertiesChange (
        IDispatch * theDocument );
};

struct __declspec(uuid("2e957eea-0812-40db-8909-9a5805c8f69e"))
ISEPhysicalPropertiesChangeEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT OnAfterPartPhysicalPropertiesChange (
        IDispatch * theMember );
    HRESULT OnBeforePartPhysicalPropertiesChange (
        IDispatch * theMember );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_OnAfterPartPhysicalPropertiesChange (
        /*[in]*/ IDispatch * theMember ) = 0;
      virtual HRESULT __stdcall raw_OnBeforePartPhysicalPropertiesChange (
        /*[in]*/ IDispatch * theMember ) = 0;
};

struct __declspec(uuid("27ffd566-b818-43c1-90fb-ad85188c1b62"))
ISELocateFilterEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Filter (
        IDispatch * pGraphicDispatch,
        VARIANT_BOOL * vbValid );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Filter (
        /*[in]*/ IDispatch * pGraphicDispatch,
        /*[out]*/ VARIANT_BOOL * vbValid ) = 0;
};

struct __declspec(uuid("62e0a0ab-1460-4f48-8014-1d7c13a1cf73"))
ISECommandEx : ISECommand
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT BeginUndoTransaction (
        _bstr_t TransactionName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_BeginUndoTransaction (
        /*[in]*/ BSTR TransactionName ) = 0;
};

struct __declspec(uuid("7c4aeeeb-93b0-48f4-b81d-07713327a293"))
ISECommandEx2 : ISECommandEx
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT BeginTransparentUndoTransaction (
        _bstr_t TransactionName );
    HRESULT EndUndoTransaction ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_BeginTransparentUndoTransaction (
        /*[in]*/ BSTR TransactionName ) = 0;
      virtual HRESULT __stdcall raw_EndUndoTransaction ( ) = 0;
};

struct __declspec(uuid("2f2f586e-00f1-4992-bbcb-c9987d30797a"))
DISEAddInEventsEx : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT OnCommand (
        long nCmdID );
    HRESULT OnCommandHelp (
        long hFrameWnd,
        long uHelpCommand,
        long nCmdID );
    HRESULT OnCommandUpdateUI (
        long nCmdID,
        long * lCmdFlags,
        BSTR * MenuItemText,
        long * nIDBitmap );
    HRESULT OnCommandOnLineHelp (
        long uHelpCommand,
        long nCmdID,
        BSTR * HelpURL );
};

struct __declspec(uuid("76e0e7d9-e28b-43e6-91e6-2854c5fde18b"))
DISEAddInEventsEx2 : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT OnCommand (
        long nCmdID,
        long Context,
        long ActiveDocumentType,
        IDispatch * pActiveDocument,
        IDispatch * pActiveWindow,
        IDispatch * pActiveSelectSet );
    HRESULT OnCommandHelp (
        long hFrameWnd,
        long uHelpCommand,
        long nCmdID );
    HRESULT OnCommandUpdateUI (
        long nCmdID,
        long Context,
        long ActiveDocumentType,
        IDispatch * pActiveDocument,
        IDispatch * pActiveWindow,
        IDispatch * pActiveSelectSet,
        long * lCmdFlags,
        BSTR * MenuItemText,
        long * nIDBitmap );
    HRESULT OnCommandOnLineHelp (
        long uHelpCommand,
        long nCmdID,
        BSTR * HelpURL );
};

struct __declspec(uuid("57c5d6db-10b7-4904-bdce-3162eafe393b"))
AddInEdgeBarEvents;
    // [ default ] interface IUnknown
    // [ default, source ] interface ISEAddInEdgeBarEvents

struct __declspec(uuid("dc601e2f-5bb3-4bf2-a9c7-03e60975e897"))
ISEAddInEx : ISEAddIn
{
    //
    // Property data
    //

    __declspec(property(get=GetAddInEdgeBarEvents))
    IUnknownPtr AddInEdgeBarEvents;

    //
    // Wrapper methods for error-handling
    //

    HRESULT SetAddInInfoEx (
        _bstr_t ResourceFilename,
        _bstr_t EnvironmentCatID,
        _bstr_t CategoryName,
        long IDColorBitmapMedium,
        long IDColorBitmapLarge,
        long IDMonochromeBitmapMedium,
        long IDMonochromeBitmapLarge,
        long NumberOfCommands,
        SAFEARRAY * * CommandNames,
        SAFEARRAY * * CommandIDs );
    IUnknownPtr GetAddInEdgeBarEvents ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetAddInInfoEx (
        /*[in]*/ BSTR ResourceFilename,
        /*[in]*/ BSTR EnvironmentCatID,
        /*[in]*/ BSTR CategoryName,
        /*[in]*/ long IDColorBitmapMedium,
        /*[in]*/ long IDColorBitmapLarge,
        /*[in]*/ long IDMonochromeBitmapMedium,
        /*[in]*/ long IDMonochromeBitmapLarge,
        /*[in]*/ long NumberOfCommands,
        /*[in]*/ SAFEARRAY * * CommandNames,
        /*[in,out]*/ SAFEARRAY * * CommandIDs ) = 0;
      virtual HRESULT __stdcall get_AddInEdgeBarEvents (
        /*[out,retval]*/ struct IUnknown * * AddInEdgeBarEvents ) = 0;
};

struct __declspec(uuid("8517e9e0-387b-45d1-8dcd-ac9388224e35"))
ISEAddInEx2 : ISEAddInEx
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SetAddInInfoEx2 (
        _bstr_t ResourceFilename,
        _bstr_t EnvironmentCatID,
        _bstr_t CategoryName,
        long IDColorBitmapMedium,
        long IDColorBitmapLarge,
        long IDMonochromeBitmapMedium,
        long IDMonochromeBitmapLarge,
        long NumberOfCommands,
        SAFEARRAY * * CommandNames,
        SAFEARRAY * * CommandIDs,
        SAFEARRAY * * CommandButtonStyles );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetAddInInfoEx2 (
        /*[in]*/ BSTR ResourceFilename,
        /*[in]*/ BSTR EnvironmentCatID,
        /*[in]*/ BSTR CategoryName,
        /*[in]*/ long IDColorBitmapMedium,
        /*[in]*/ long IDColorBitmapLarge,
        /*[in]*/ long IDMonochromeBitmapMedium,
        /*[in]*/ long IDMonochromeBitmapLarge,
        /*[in]*/ long NumberOfCommands,
        /*[in]*/ SAFEARRAY * * CommandNames,
        /*[in,out]*/ SAFEARRAY * * CommandIDs,
        /*[in]*/ SAFEARRAY * * CommandButtonStyles ) = 0;
};

struct __declspec(uuid("f14957a8-23ce-48e6-ad17-2052d07fdd74"))
ISEAddInSaveAsTranslatorEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT OnOptions (
        IDispatch * theDocument,
        _bstr_t FileExtension );
    HRESULT OnOptionsUpdateUI (
        IDispatch * theDocument,
        _bstr_t FileExtension,
        long * Flags );
    HRESULT OnSaveAs (
        IDispatch * theDocument,
        _bstr_t SaveAsFileName,
        long * hResult );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_OnOptions (
        /*[in]*/ IDispatch * theDocument,
        /*[in]*/ BSTR FileExtension ) = 0;
      virtual HRESULT __stdcall raw_OnOptionsUpdateUI (
        /*[in]*/ IDispatch * theDocument,
        /*[in]*/ BSTR FileExtension,
        /*[in,out]*/ long * Flags ) = 0;
      virtual HRESULT __stdcall raw_OnSaveAs (
        /*[in]*/ IDispatch * theDocument,
        /*[in]*/ BSTR SaveAsFileName,
        /*[out]*/ long * hResult ) = 0;
};

struct __declspec(uuid("611edd20-8236-4733-9d70-4e15d5da7488"))
AddInSaveAsTranslatorEvents;
    // [ default ] interface IUnknown
    // [ default, source ] interface ISEAddInSaveAsTranslatorEvents

struct __declspec(uuid("687193bc-5302-443a-b267-96f54d355db6"))
ISEAddInSaveAsTranslator : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetAddInSaveAsTranslatorEvents))
    IUnknownPtr AddInSaveAsTranslatorEvents;

    //
    // Wrapper methods for error-handling
    //

    HRESULT SetSaveAsTranlatorInfo (
        enum DocumentTypeConstants DocumentType,
        _bstr_t Filter );
    IUnknownPtr GetAddInSaveAsTranslatorEvents ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetSaveAsTranlatorInfo (
        /*[in]*/ enum DocumentTypeConstants DocumentType,
        /*[in]*/ BSTR Filter ) = 0;
      virtual HRESULT __stdcall get_AddInSaveAsTranslatorEvents (
        /*[out,retval]*/ struct IUnknown * * AddInSaveAsTranslatorEvents ) = 0;
};

enum SeConnectMode
{
    seConnectAtStartup = 1,
    seConnectByUser = 2,
    seConnectExternally = 3
};

enum SeDisconnectMode
{
    seDisconnectAtShutdown = 1,
    seDisconnectByUser = 2,
    seDisconnectExternally = 3
};

struct __declspec(uuid("d3f30ae5-2582-11d2-baf9-080036230602"))
ISolidEdgeAddIn : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT OnConnection (
        IDispatch * Application,
        enum SeConnectMode ConnectMode,
        struct AddIn * AddInInstance );
    HRESULT OnConnectToEnvironment (
        _bstr_t EnvCatID,
        IDispatch * pEnvironmentDispatch,
        VARIANT_BOOL bFirstTime );
    HRESULT OnDisconnection (
        enum SeDisconnectMode DisconnectMode );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_OnConnection (
        /*[in]*/ IDispatch * Application,
        /*[in]*/ enum SeConnectMode ConnectMode,
        /*[in]*/ struct AddIn * AddInInstance ) = 0;
      virtual HRESULT __stdcall raw_OnConnectToEnvironment (
        /*[in]*/ BSTR EnvCatID,
        /*[in]*/ IDispatch * pEnvironmentDispatch,
        /*[in]*/ VARIANT_BOOL bFirstTime ) = 0;
      virtual HRESULT __stdcall raw_OnDisconnection (
        /*[in]*/ enum SeDisconnectMode DisconnectMode ) = 0;
};

struct __declspec(uuid("7824063b-7678-11d3-a3e3-0004ac969a5d"))
ISolidEdgeBar : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    long AddPage (
        IDispatch * theDocument,
        long InstanceHandle,
        long nBitmapID,
        _bstr_t Tooltip,
        long nOptions );
    HRESULT RemovePage (
        IDispatch * theDocument,
        long hWnd,
        long nOptions );
    HRESULT SetActivePage (
        IDispatch * theDocument,
        long hWnd,
        long nOptions );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddPage (
        /*[in]*/ IDispatch * theDocument,
        long InstanceHandle,
        /*[in]*/ long nBitmapID,
        BSTR Tooltip,
        /*[in]*/ long nOptions,
        /*[out,retval]*/ long * hWnd ) = 0;
      virtual HRESULT __stdcall raw_RemovePage (
        /*[in]*/ IDispatch * theDocument,
        /*[in]*/ long hWnd,
        /*[in]*/ long nOptions ) = 0;
      virtual HRESULT __stdcall raw_SetActivePage (
        /*[in]*/ IDispatch * theDocument,
        /*[in]*/ long hWnd,
        /*[in]*/ long nOptions ) = 0;
};

struct __declspec(uuid("21ebd9be-7f3c-455d-b1c2-ac4102f389d5"))
ISolidEdgeBarEx : ISolidEdgeBar
{
    //
    // Wrapper methods for error-handling
    //

    long AddPageEx (
        IDispatch * theDocument,
        _bstr_t ResourceFilename,
        long nBitmapID,
        _bstr_t Tooltip,
        long nOptions );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddPageEx (
        /*[in]*/ IDispatch * theDocument,
        BSTR ResourceFilename,
        /*[in]*/ long nBitmapID,
        BSTR Tooltip,
        /*[in]*/ long nOptions,
        /*[out,retval]*/ long * hWnd ) = 0;
};

struct __declspec(uuid("b7156f1b-03d6-45c1-a923-c461472d843a"))
ISolidEdgeBarEx2 : ISolidEdgeBarEx
{
    //
    // Wrapper methods for error-handling
    //

    long AddPageEx2 (
        IDispatch * theDocument,
        _bstr_t ResourceFilename,
        long Index,
        long nBitmapID,
        _bstr_t Tooltip,
        _bstr_t Title,
        _bstr_t Caption,
        long nOptions,
        const _variant_t & Direction = vtMissing,
        const _variant_t & InitialWidth = vtMissing,
        const _variant_t & InitialHeight = vtMissing );
    HRESULT RemovePageEx2 (
        IDispatch * theDocument,
        long Index,
        long hWnd,
        long nOptions );
    HRESULT SetActivePageEx2 (
        IDispatch * theDocument,
        long Index,
        long hWnd,
        long nOptions );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddPageEx2 (
        /*[in]*/ IDispatch * theDocument,
        BSTR ResourceFilename,
        /*[in]*/ long Index,
        /*[in]*/ long nBitmapID,
        /*[in]*/ BSTR Tooltip,
        /*[in]*/ BSTR Title,
        /*[in]*/ BSTR Caption,
        /*[in]*/ long nOptions,
        /*[in]*/ VARIANT Direction,
        /*[in]*/ VARIANT InitialWidth,
        /*[in]*/ VARIANT InitialHeight,
        /*[out,retval]*/ long * hWnd ) = 0;
      virtual HRESULT __stdcall raw_RemovePageEx2 (
        /*[in]*/ IDispatch * theDocument,
        /*[in]*/ long Index,
        /*[in]*/ long hWnd,
        /*[in]*/ long nOptions ) = 0;
      virtual HRESULT __stdcall raw_SetActivePageEx2 (
        /*[in]*/ IDispatch * theDocument,
        /*[in]*/ long Index,
        /*[in]*/ long hWnd,
        /*[in]*/ long nOptions ) = 0;
};

struct __declspec(uuid("b48cba07-c2c5-11d3-a3f6-0004ac969a5d"))
ISolidEdgeRibbonBar : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    long AddRibbon (
        int DialogId,
        long InstanceHandle );
    HRESULT ShowRibbon ( );
    HRESULT HideRibbon ( );
    HRESULT RemoveRibbon ( );
    HRESULT AddEditField (
        int Id );
    HRESULT SetCurrentFocus ( );
    HRESULT GetCurrentFocus (
        int * Id );
    HRESULT NextFocus ( );
    HRESULT SetAccelerators (
        SAFEARRAY * * Accelerators );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddRibbon (
        /*[in]*/ int DialogId,
        long InstanceHandle,
        /*[out,retval]*/ long * hWndRibbon ) = 0;
      virtual HRESULT __stdcall raw_ShowRibbon ( ) = 0;
      virtual HRESULT __stdcall raw_HideRibbon ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveRibbon ( ) = 0;
      virtual HRESULT __stdcall raw_AddEditField (
        /*[in]*/ int Id ) = 0;
      virtual HRESULT __stdcall raw_SetCurrentFocus ( ) = 0;
      virtual HRESULT __stdcall raw_GetCurrentFocus (
        /*[out]*/ int * Id ) = 0;
      virtual HRESULT __stdcall raw_NextFocus ( ) = 0;
      virtual HRESULT __stdcall raw_SetAccelerators (
        /*[in]*/ SAFEARRAY * * Accelerators ) = 0;
};

struct __declspec(uuid("87bf7ba6-d2c0-4e8c-a187-566a3f8f02d3"))
ISolidEdgeRibbonBarEx : ISolidEdgeRibbonBar
{
    //
    // Wrapper methods for error-handling
    //

    long AddRibbonEx (
        int DialogId,
        _bstr_t ResourceFilename );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddRibbonEx (
        /*[in]*/ int DialogId,
        BSTR ResourceFilename,
        /*[out,retval]*/ long * hWndRibbon ) = 0;
};

enum CommandBarHeaderDialogControlIDs
{
    CommandBarHeaderDoitButton = 1073,
    CommandBarHeaderOptionsButton = 1074
};

struct __declspec(uuid("7fb49cdf-9905-49a5-91bb-955c3d5b4b82"))
ISolidEdgeCommandBar : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    long AddGroup (
        int nTitleID,
        int nDialogId,
        int nBitmapID,
        _bstr_t ResourceFilename,
        VARIANT_BOOL bExpandable,
        VARIANT_BOOL bExpanded,
        VARIANT_BOOL bEnabled,
        VARIANT_BOOL bRedraw );
    HRESULT AddCommandBarHeader (
        VARIANT_BOOL bDoIt,
        VARIANT_BOOL bOptions,
        _bstr_t DoitText,
        _bstr_t OptionsText );
    HRESULT SetCommandBarHeaderText (
        _bstr_t DoitText,
        _bstr_t OptionsText );
    HRESULT RemoveGroup (
        int nTitleID,
        const _variant_t & hWndGroupDialog = vtMissing );
    HRESULT ShowGroup (
        int nTitleID,
        const _variant_t & hWndGroupDialog = vtMissing );
    HRESULT HideGroup (
        int nTitleID,
        const _variant_t & hWndGroupDialog = vtMissing );
    HRESULT EnableGroup (
        int nTitleID,
        VARIANT_BOOL bEnabled,
        VARIANT_BOOL bDisableAllOthers );
    VARIANT_BOOL IsGroupEnabled (
        int nTitleID );
    HRESULT ExpandGroup (
        int nTitleID,
        VARIANT_BOOL bExpanded,
        VARIANT_BOOL bCollapseAllOthers );
    VARIANT_BOOL IsGroupExpanded (
        int nTitleID );
    HRESULT EnsureVisible (
        int nTitleID,
        const _variant_t & hWndGroupDialog = vtMissing );
    HRESULT ShowGroups ( );
    HRESULT HideGroups ( );
    HRESULT RemoveGroups ( );
    HRESULT AddBitmapToButton (
        long hWndGroupDialog,
        int nButtonID,
        int nBitmapID,
        const _variant_t & ResourceFilename = vtMissing );
    HRESULT AddEditField (
        long hWndGroupDialog,
        int Id );
    HRESULT SetCurrentFocus (
        long hWndGroupDialog );
    HRESULT GetCurrentFocus (
        long hWndGroupDialog,
        int * Id );
    HRESULT NextFocus (
        long hWndGroupDialog );
    HRESULT SetAccelerators (
        long hWndGroupDialog,
        SAFEARRAY * * Accelerators );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddGroup (
        /*[in]*/ int nTitleID,
        /*[in]*/ int nDialogId,
        /*[in]*/ int nBitmapID,
        /*[in]*/ BSTR ResourceFilename,
        /*[in]*/ VARIANT_BOOL bExpandable,
        /*[in]*/ VARIANT_BOOL bExpanded,
        /*[in]*/ VARIANT_BOOL bEnabled,
        /*[in]*/ VARIANT_BOOL bRedraw,
        /*[out,retval]*/ long * hWndGroupDialog ) = 0;
      virtual HRESULT __stdcall raw_AddCommandBarHeader (
        /*[in]*/ VARIANT_BOOL bDoIt,
        /*[in]*/ VARIANT_BOOL bOptions,
        /*[in]*/ BSTR DoitText,
        /*[in]*/ BSTR OptionsText ) = 0;
      virtual HRESULT __stdcall raw_SetCommandBarHeaderText (
        /*[in]*/ BSTR DoitText,
        /*[in]*/ BSTR OptionsText ) = 0;
      virtual HRESULT __stdcall raw_RemoveGroup (
        /*[in]*/ int nTitleID,
        /*[in]*/ VARIANT hWndGroupDialog = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_ShowGroup (
        /*[in]*/ int nTitleID,
        /*[in]*/ VARIANT hWndGroupDialog = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_HideGroup (
        /*[in]*/ int nTitleID,
        /*[in]*/ VARIANT hWndGroupDialog = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_EnableGroup (
        /*[in]*/ int nTitleID,
        /*[in]*/ VARIANT_BOOL bEnabled,
        /*[in]*/ VARIANT_BOOL bDisableAllOthers ) = 0;
      virtual HRESULT __stdcall raw_IsGroupEnabled (
        /*[in]*/ int nTitleID,
        /*[out,retval]*/ VARIANT_BOOL * bEnabled ) = 0;
      virtual HRESULT __stdcall raw_ExpandGroup (
        /*[in]*/ int nTitleID,
        /*[in]*/ VARIANT_BOOL bExpanded,
        /*[in]*/ VARIANT_BOOL bCollapseAllOthers ) = 0;
      virtual HRESULT __stdcall raw_IsGroupExpanded (
        /*[in]*/ int nTitleID,
        /*[out,retval]*/ VARIANT_BOOL * bExpanded ) = 0;
      virtual HRESULT __stdcall raw_EnsureVisible (
        /*[in]*/ int nTitleID,
        /*[in]*/ VARIANT hWndGroupDialog = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_ShowGroups ( ) = 0;
      virtual HRESULT __stdcall raw_HideGroups ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveGroups ( ) = 0;
      virtual HRESULT __stdcall raw_AddBitmapToButton (
        /*[in]*/ long hWndGroupDialog,
        /*[in]*/ int nButtonID,
        /*[in]*/ int nBitmapID,
        /*[in]*/ VARIANT ResourceFilename = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_AddEditField (
        /*[in]*/ long hWndGroupDialog,
        /*[in]*/ int Id ) = 0;
      virtual HRESULT __stdcall raw_SetCurrentFocus (
        /*[in]*/ long hWndGroupDialog ) = 0;
      virtual HRESULT __stdcall raw_GetCurrentFocus (
        /*[in]*/ long hWndGroupDialog,
        /*[out]*/ int * Id ) = 0;
      virtual HRESULT __stdcall raw_NextFocus (
        /*[in]*/ long hWndGroupDialog ) = 0;
      virtual HRESULT __stdcall raw_SetAccelerators (
        /*[in]*/ long hWndGroupDialog,
        /*[in]*/ SAFEARRAY * * Accelerators ) = 0;
};

struct __declspec(uuid("570b1d76-bca1-4f8b-81a6-802598254e46"))
DISEAssemblyFamilyEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT BeforeMemberActivate (
        IDispatch * theDocument,
        _bstr_t memberName );
    HRESULT AfterMemberActivate (
        IDispatch * theDocument,
        _bstr_t memberName );
    HRESULT BeforeMemberCreate (
        IDispatch * theDocument,
        _bstr_t memberName );
    HRESULT AfterMemberCreate (
        IDispatch * theDocument,
        _bstr_t memberName );
    HRESULT BeforeMemberDelete (
        IDispatch * theDocument,
        _bstr_t memberName );
    HRESULT AfterMemberDelete (
        IDispatch * theDocument,
        _bstr_t memberName );
};

struct __declspec(uuid("96ef941e-a14e-40cb-8947-b56a79e6da47"))
DISEAssemblyFamilyEvents2 : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT BeforeMemberActivate (
        IDispatch * theDocument,
        _bstr_t memberName );
    HRESULT AfterMemberActivate (
        IDispatch * theDocument,
        _bstr_t memberName );
    HRESULT BeforeMemberCreate (
        IDispatch * theDocument,
        _bstr_t memberName );
    HRESULT AfterMemberCreate (
        IDispatch * theDocument,
        _bstr_t memberName );
    HRESULT BeforeMemberDelete (
        IDispatch * theDocument,
        _bstr_t memberName );
    HRESULT AfterMemberDelete (
        IDispatch * theDocument,
        _bstr_t memberName );
    HRESULT BeforeMemberRename (
        IDispatch * theDocument,
        _bstr_t OldMemberName );
    HRESULT AfterMemberRename (
        IDispatch * theDocument,
        _bstr_t NewMemberName );
};

struct __declspec(uuid("172df9bc-f422-477e-a04d-016152e41652"))
ISEECEventsEx : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT PDM_OnAfterDocumentUpload (
        VARIANT * varUploadFileList );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_PDM_OnAfterDocumentUpload (
        /*[in]*/ VARIANT * varUploadFileList ) = 0;
};

enum SeModifySketchFlag
{
    seInsertEntity = 1,
    seRemoveEntity = 2,
    seModifyEntity = 3
};

struct __declspec(uuid("af423276-017d-4df6-ac19-516f6dba0642"))
ISESketchRecomputeEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT BeforeRecompute (
        IDispatch * Sketch );
    HRESULT AfterRecompute (
        IDispatch * Sketch );
    HRESULT AfterSketchIsModified (
        enum SeModifySketchFlag ModifySkFlag,
        IDispatch * Entity,
        IDispatch * Sketch );
    HRESULT BeforeSketchIsDeleted ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_BeforeRecompute (
        /*[in]*/ IDispatch * Sketch ) = 0;
      virtual HRESULT __stdcall raw_AfterRecompute (
        /*[in]*/ IDispatch * Sketch ) = 0;
      virtual HRESULT __stdcall raw_AfterSketchIsModified (
        /*[in]*/ enum SeModifySketchFlag ModifySkFlag,
        /*[in]*/ IDispatch * Entity,
        /*[in]*/ IDispatch * Sketch ) = 0;
      virtual HRESULT __stdcall raw_BeforeSketchIsDeleted ( ) = 0;
};

struct __declspec(uuid("270f89d0-0824-4aad-932f-52eaa954f81e"))
DISESketchRecomputeEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT BeforeRecompute (
        IDispatch * Sketch );
    HRESULT AfterRecompute (
        IDispatch * Sketch );
    HRESULT AfterSketchIsModified (
        enum SeModifySketchFlag ModifySkFlag,
        IDispatch * Entity,
        IDispatch * Sketch );
    HRESULT BeforeSketchIsDeleted ( );
};

struct __declspec(uuid("0ea0d1f0-a199-11d1-aecc-08003616ce02"))
DocumentEvents;
    // [ default ] interface IUnknown
    // [ default, source ] dispinterface DISEDocumentEvents
    // [ source ] interface ISEDocumentEvents

struct __declspec(uuid("6a89dfd0-9e7d-11d1-aecc-08003616ce02"))
ModelRecomputeEvents;
    // [ default ] interface IUnknown
    // [ default, source ] interface ISEModelRecomputeEvents

struct __declspec(uuid("30837272-1899-4f51-8969-0aa3bd1dc3e4"))
BendTableEvents;
    // [ default ] interface IUnknown
    // [ default, source ] dispinterface DISEBendTableEvents
    // [ source ] interface ISEBendTableEvents

struct __declspec(uuid("03cfed71-8e07-11d3-a3e6-0004ac969a5d"))
AssemblyRecomputeEvents;
    // [ default ] interface IUnknown
    // [ default, source ] interface ISEAssemblyRecomputeEvents
    // [ source ] dispinterface DISEAssemblyRecomputeEvents

struct __declspec(uuid("5d00d4e3-af48-4a81-848e-ba85a1e7da54"))
AssemblyChangeEvents;
    // [ default ] interface IUnknown
    // [ default, source ] interface ISEAssemblyChangeEvents
    // [ source ] dispinterface DISEAssemblyChangeEvents

struct __declspec(uuid("653fe660-47db-4c5a-9fca-e9c971218c65"))
AssemblyConfigurationChangeEvents;
    // [ default ] interface IUnknown
    // [ default, source ] interface ISEAssemblyConfigurationChangeEvents
    // [ source ] dispinterface DISEAssemblyConfigurationChangeEvents

struct __declspec(uuid("a054f88c-9c75-11d3-a3f0-0004ac969a5d"))
FamilyOfPartsEvents;
    // [ default ] interface IUnknown
    // [ default, source ] interface ISEFamilyOfPartsEvents

struct __declspec(uuid("80e1310f-c681-4fec-8f5c-9449d8b33aff"))
FamilyOfPartsExEvents;
    // [ default ] interface IUnknown
    // [ default, source ] interface ISEFamilyOfPartsExEvents

struct __declspec(uuid("03a58a84-9cfb-11d3-a3f0-0004ac969a5d"))
DividePartEvents;
    // [ default ] interface IUnknown
    // [ default, source ] interface ISEDividePartEvents

struct __declspec(uuid("2d93aeed-3b14-11d4-a4d3-0004ac9695cb"))
DrawingViewEvents;
    // [ default ] interface IUnknown
    // [ default, source ] interface ISEDrawingViewEvents

struct __declspec(uuid("21ee3695-5bcc-4815-8a40-209ef7d3eee4"))
PartsListEvents;
    // [ default ] interface IUnknown
    // [ default, source ] interface ISEPartsListEvents

struct __declspec(uuid("e8371752-4a37-4bba-8ee8-9f68337fe5ac"))
DraftBendTableEvents;
    // [ default ] interface IUnknown
    // [ default, source ] interface ISEDraftBendTableEvents

struct __declspec(uuid("ef8b9f76-70ed-4a9a-88da-3b76869d8e78"))
AssemblyFamilyEvents;
    // [ default ] interface IUnknown
    // [ default, source ] dispinterface DISEAssemblyFamilyEvents
    // [ source ] interface ISEAssemblyFamilyEvents

struct __declspec(uuid("96c93307-1aaa-4e6f-937c-ac6c726b56e5"))
AssemblyFamilyEvents2;
    // [ default ] interface IUnknown
    // [ default, source ] dispinterface DISEAssemblyFamilyEvents2
    // [ source ] interface ISEAssemblyFamilyEvents2

struct __declspec(uuid("eeef65b9-ecc4-4157-bfd1-c4d2075fa285"))
ConnectorTableEvents;
    // [ default ] interface IUnknown
    // [ default, source ] interface ISEConnectorTableEvents

struct __declspec(uuid("395a16d6-0075-4d64-aec1-f9e08cb09cf0"))
BlockTableEvents;
    // [ default ] interface IUnknown
    // [ default, source ] interface ISEBlockTableEvents

struct __declspec(uuid("f4b15dbb-c4b2-4f8f-8b1c-c3ef3429eb53"))
AssemblyPhysicalPropertiesChangeEvents;
    // [ default ] interface IUnknown
    // [ default, source ] interface ISEAssemblyPhysicalPropertiesChangeEvents
    // [ source ] dispinterface DISEAssemblyPhysicalPropertiesChangeEvents

struct __declspec(uuid("2d10ae62-4de5-4eec-9124-0ed3067b7574"))
PhysicalPropertiesChangeEvents;
    // [ default ] interface IUnknown
    // [ default, source ] interface ISEPhysicalPropertiesChangeEvents

struct __declspec(uuid("15264f78-b291-4587-95db-b35979cadd23"))
SketchRecomputeEvents;
    // [ default ] interface IUnknown
    // [ default, source ] dispinterface DISESketchRecomputeEvents
    // [ source ] interface ISESketchRecomputeEvents

enum seVariableTypeConstants
{
    seVariableType_Dimension = 1661573600,
    seVariableType_UserDefined = 1560616706,
    seVariableType_Simulation = 215773802,
    seVariableType_Text = -170730141
};

enum seUnitsTypeConstants
{
    seUnitsType_DataBase = -730794371,
    seUnitsType_Document = 1886781498
};

enum VariableLimitValueConstant
{
    igVariableLimitNone = 0,
    igDiscreteList = 1,
    igMinMaxLimit = 2
};

struct __declspec(uuid("67b667c1-5be3-11cf-bd3b-0800368a1102"))
_IVariableAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetUnitsType,put=PutUnitsType))
    int UnitsType;
    __declspec(property(get=GetValue,put=PutValue))
    double Value;
    __declspec(property(get=GetProperties,put=PutProperties))
    int Properties;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetVariableType))
    enum seVariableTypeConstants VariableType;
    __declspec(property(get=GetType))
    enum ObjectType Type;
    __declspec(property(get=GetVariableTableName,put=PutVariableTableName))
    _bstr_t VariableTableName;
    __declspec(property(get=GetExpose,put=PutExpose))
    long Expose;
    __declspec(property(get=GetExposeName,put=PutExposeName))
    _bstr_t ExposeName;
    __declspec(property(get=GetDisplayName))
    _bstr_t DisplayName;
    __declspec(property(get=GetSystemName))
    _bstr_t SystemName;
    __declspec(property(get=GetIsSuppressVariable))
    VARIANT_BOOL IsSuppressVariable;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    void PutName (
        _bstr_t pName );
    _bstr_t GetName ( );
    int GetUnitsType ( );
    void PutUnitsType (
        int pUnitType );
    void PutValue (
        double pDoubleValue );
    double GetValue ( );
    void PutProperties (
        int pProperties );
    int GetProperties ( );
    void PutFormula (
        _bstr_t pFormula );
    _bstr_t GetFormula ( );
    HRESULT SetRange (
        _bstr_t LowValue,
        int Condition,
        _bstr_t HighValue );
    HRESULT GetRange (
        BSTR * LowValue,
        int * Condition,
        BSTR * HighValue );
    HRESULT SetRangeEx (
        _bstr_t LowValue,
        _bstr_t LowLimitVarName,
        _bstr_t HighValue,
        _bstr_t HighLimitVarName,
        int Condition,
        long bSkipSettingInitialValue );
    HRESULT SetValue (
        _bstr_t Value );
    HRESULT GetValue (
        BSTR * Value );
    HRESULT Delete ( );
    enum ObjectType GetType ( );
    void PutVariableTableName (
        _bstr_t pName );
    _bstr_t GetVariableTableName ( );
    void PutExpose (
        long pbExpose );
    long GetExpose ( );
    void PutExposeName (
        _bstr_t pbsName );
    _bstr_t GetExposeName ( );
    _bstr_t GetDisplayName ( );
    _bstr_t GetSystemName ( );
    VARIANT_BOOL GetIsSuppressVariable ( );
    double GetValueOutOfRange ( );
    HRESULT GetDiscreteValues (
        SAFEARRAY * * DiscreteValues );
    HRESULT SetDiscreteValues (
        SAFEARRAY * * DiscreteValues );
    HRESULT AddDiscreteValue (
        double DiscreteValue );
    HRESULT RemoveDiscreteValue (
        double DiscreteValue );
    HRESULT ClearLimitsOrDiscreteValues ( );
    HRESULT AddDiscreteVariables (
        SAFEARRAY * * DiscreteVariables );
    HRESULT GetDiscreteVariables (
        VARIANT * DiscreteVariables,
        int * numDiscreteVariables );
    HRESULT RemoveDiscreteVariables (
        SAFEARRAY * * DiscreteVariables );
    _bstr_t GetComment ( );
    HRESULT SetComment (
        _bstr_t Comment );
    HRESULT HasExternalLink (
        VARIANT_BOOL * bLinked );
    HRESULT IsExternalLinkFrozen (
        VARIANT_BOOL * bFrozen );
    HRESULT GetExternalLinkInfo (
        BSTR * SourceVariableName,
        BSTR * SourceDocumenetName );
    HRESULT FreezeExternalLink ( );
    HRESULT ThawExternalLink ( );
    HRESULT BreakExternalLink ( );
    VARIANT_BOOL GetIsReadOnly ( );
    enum seVariableTypeConstants GetVariableType ( );
    HRESULT GetValueRangeHighValue (
        double * pdHighValue );
    HRESULT SetValueRangeHighValue (
        double dHighValue );
    HRESULT GetValueRangeLowValue (
        double * pdHighValue );
    HRESULT SetValueRangeLowValue (
        double dHighValue );
    HRESULT SetValueRangeValues (
        double LowValue,
        int Condition,
        double HighValue );
    HRESULT GetValueRangeValues (
        double * LowValue,
        int * Condition,
        double * HighValue );
    HRESULT GetValueDiscreteValues (
        SAFEARRAY * * DiscreteValues );
    HRESULT SetValueDiscreteValues (
        SAFEARRAY * * DiscreteValues );
    HRESULT GetValueEx (
        double * pdValue,
        enum seUnitsTypeConstants seUnitsType );
    HRESULT SetValueEx (
        double dValue,
        enum seUnitsTypeConstants seUnitsType );
    HRESULT GetRangeEx (
        BSTR * LowValue,
        BSTR * LowLimitVarName,
        BSTR * HighValue,
        BSTR * HighLimitVarName,
        int * Condition );
    HRESULT HasVariableLimit (
        VARIANT_BOOL * bVariableLimit,
        enum VariableLimitValueConstant * LimitValue );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR pName ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_UnitsType (
        /*[out,retval]*/ int * pUnitType ) = 0;
      virtual HRESULT __stdcall put_UnitsType (
        /*[in]*/ int pUnitType ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ double pDoubleValue ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * pDoubleValue ) = 0;
      virtual HRESULT __stdcall put_Properties (
        /*[in]*/ int pProperties ) = 0;
      virtual HRESULT __stdcall get_Properties (
        /*[out,retval]*/ int * pProperties ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR pFormula ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * pFormula ) = 0;
      virtual HRESULT __stdcall raw_SetRange (
        /*[in]*/ BSTR LowValue,
        /*[in]*/ int Condition,
        /*[in]*/ BSTR HighValue ) = 0;
      virtual HRESULT __stdcall raw_GetRange (
        /*[out]*/ BSTR * LowValue,
        /*[out]*/ int * Condition,
        /*[out]*/ BSTR * HighValue ) = 0;
      virtual HRESULT __stdcall raw_SetRangeEx (
        /*[in]*/ BSTR LowValue,
        /*[in]*/ BSTR LowLimitVarName,
        /*[in]*/ BSTR HighValue,
        /*[in]*/ BSTR HighLimitVarName,
        /*[in]*/ int Condition,
        /*[in]*/ long bSkipSettingInitialValue ) = 0;
      virtual HRESULT __stdcall raw_SetValue (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall raw_GetValue (
        /*[out]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ObjectType * Type ) = 0;
      virtual HRESULT __stdcall put_VariableTableName (
        /*[in]*/ BSTR pName ) = 0;
      virtual HRESULT __stdcall get_VariableTableName (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall put_Expose (
        /*[in]*/ long pbExpose ) = 0;
      virtual HRESULT __stdcall get_Expose (
        /*[out,retval]*/ long * pbExpose ) = 0;
      virtual HRESULT __stdcall put_ExposeName (
        /*[in]*/ BSTR pbsName ) = 0;
      virtual HRESULT __stdcall get_ExposeName (
        /*[out,retval]*/ BSTR * pbsName ) = 0;
      virtual HRESULT __stdcall get_DisplayName (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_SystemName (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_IsSuppressVariable (
        /*[out,retval]*/ VARIANT_BOOL * IsSuppressVariable ) = 0;
      virtual HRESULT __stdcall raw_GetValueOutOfRange (
        /*[out,retval]*/ double * ValueOutOfRange ) = 0;
      virtual HRESULT __stdcall raw_GetDiscreteValues (
        /*[out]*/ SAFEARRAY * * DiscreteValues ) = 0;
      virtual HRESULT __stdcall raw_SetDiscreteValues (
        /*[in]*/ SAFEARRAY * * DiscreteValues ) = 0;
      virtual HRESULT __stdcall raw_AddDiscreteValue (
        /*[in]*/ double DiscreteValue ) = 0;
      virtual HRESULT __stdcall raw_RemoveDiscreteValue (
        /*[in]*/ double DiscreteValue ) = 0;
      virtual HRESULT __stdcall raw_ClearLimitsOrDiscreteValues ( ) = 0;
      virtual HRESULT __stdcall raw_AddDiscreteVariables (
        /*[in]*/ SAFEARRAY * * DiscreteVariables ) = 0;
      virtual HRESULT __stdcall raw_GetDiscreteVariables (
        /*[out]*/ VARIANT * DiscreteVariables,
        /*[out]*/ int * numDiscreteVariables ) = 0;
      virtual HRESULT __stdcall raw_RemoveDiscreteVariables (
        /*[in]*/ SAFEARRAY * * DiscreteVariables ) = 0;
      virtual HRESULT __stdcall raw_GetComment (
        /*[out,retval]*/ BSTR * Comment ) = 0;
      virtual HRESULT __stdcall raw_SetComment (
        /*[in]*/ BSTR Comment ) = 0;
      virtual HRESULT __stdcall raw_HasExternalLink (
        /*[out]*/ VARIANT_BOOL * bLinked ) = 0;
      virtual HRESULT __stdcall raw_IsExternalLinkFrozen (
        /*[out]*/ VARIANT_BOOL * bFrozen ) = 0;
      virtual HRESULT __stdcall raw_GetExternalLinkInfo (
        /*[out]*/ BSTR * SourceVariableName,
        /*[out]*/ BSTR * SourceDocumenetName ) = 0;
      virtual HRESULT __stdcall raw_FreezeExternalLink ( ) = 0;
      virtual HRESULT __stdcall raw_ThawExternalLink ( ) = 0;
      virtual HRESULT __stdcall raw_BreakExternalLink ( ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pbIsReadOnly ) = 0;
      virtual HRESULT __stdcall get_VariableType (
        /*[out,retval]*/ enum seVariableTypeConstants * pbVariableType ) = 0;
      virtual HRESULT __stdcall raw_GetValueRangeHighValue (
        /*[out]*/ double * pdHighValue ) = 0;
      virtual HRESULT __stdcall raw_SetValueRangeHighValue (
        /*[in]*/ double dHighValue ) = 0;
      virtual HRESULT __stdcall raw_GetValueRangeLowValue (
        /*[out]*/ double * pdHighValue ) = 0;
      virtual HRESULT __stdcall raw_SetValueRangeLowValue (
        /*[in]*/ double dHighValue ) = 0;
      virtual HRESULT __stdcall raw_SetValueRangeValues (
        /*[in]*/ double LowValue,
        /*[in]*/ int Condition,
        /*[in]*/ double HighValue ) = 0;
      virtual HRESULT __stdcall raw_GetValueRangeValues (
        /*[out]*/ double * LowValue,
        /*[out]*/ int * Condition,
        /*[out]*/ double * HighValue ) = 0;
      virtual HRESULT __stdcall raw_GetValueDiscreteValues (
        /*[out]*/ SAFEARRAY * * DiscreteValues ) = 0;
      virtual HRESULT __stdcall raw_SetValueDiscreteValues (
        /*[in]*/ SAFEARRAY * * DiscreteValues ) = 0;
      virtual HRESULT __stdcall raw_GetValueEx (
        /*[out]*/ double * pdValue,
        /*[in]*/ enum seUnitsTypeConstants seUnitsType ) = 0;
      virtual HRESULT __stdcall raw_SetValueEx (
        /*[in]*/ double dValue,
        /*[in]*/ enum seUnitsTypeConstants seUnitsType ) = 0;
      virtual HRESULT __stdcall raw_GetRangeEx (
        /*[out]*/ BSTR * LowValue,
        /*[out]*/ BSTR * LowLimitVarName,
        /*[out]*/ BSTR * HighValue,
        /*[out]*/ BSTR * HighLimitVarName,
        /*[out]*/ int * Condition ) = 0;
      virtual HRESULT __stdcall raw_HasVariableLimit (
        /*[out]*/ VARIANT_BOOL * bVariableLimit,
        /*[out]*/ enum VariableLimitValueConstant * LimitValue ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
};

struct __declspec(uuid("1033e6a1-2f02-11cf-bd0c-0800368a1102"))
_IVariableListAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    int GetCount ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HRESULT Remove (
        const _variant_t & Index );
    HRESULT Add (
        const _variant_t & variable );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * pCount ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * pItem ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pEnum ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ VARIANT Index ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT variable ) = 0;
};

struct __declspec(uuid("7647edc5-19d6-11cf-bcfb-0800368a1102"))
_IVariablesAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    int GetCount ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    IDispatchPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr Add (
        _bstr_t pName,
        _bstr_t pFormula,
        const _variant_t & UnitsType = vtMissing );
    IDispatchPtr AddFromClipboard (
        _bstr_t pName,
        const _variant_t & UnitsType = vtMissing );
    HRESULT Edit (
        _bstr_t pName,
        _bstr_t pFormula );
    HRESULT EditFromClipboard (
        _bstr_t pName );
    HRESULT PutName (
        IDispatch * pVariable,
        _bstr_t pName );
    _bstr_t GetName (
        IDispatch * pVariable );
    IDispatchPtr Translate (
        _bstr_t pName );
    IDispatchPtr Query (
        _bstr_t pFindCriterium,
        const _variant_t & NamedBy = vtMissing,
        const _variant_t & VarType = vtMissing,
        const _variant_t & CaseInsensitive = vtMissing );
    _bstr_t GetFormula (
        _bstr_t wcpName );
    _bstr_t GetDisplayName (
        IDispatch * pVariable );
    _bstr_t GetSystemName (
        IDispatch * pVariable );
    HRESULT CopyToClipboard (
        _bstr_t bsName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * pCount ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * pItem ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pEnum ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * pApp ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * pParent ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR pName,
        /*[in]*/ BSTR pFormula,
        /*[in]*/ VARIANT UnitsType,
        /*[out,retval]*/ IDispatch * * ppVariable ) = 0;
      virtual HRESULT __stdcall raw_AddFromClipboard (
        /*[in]*/ BSTR pName,
        /*[in]*/ VARIANT UnitsType,
        /*[out,retval]*/ IDispatch * * ppVariable ) = 0;
      virtual HRESULT __stdcall raw_Edit (
        /*[in]*/ BSTR pName,
        /*[in]*/ BSTR pFormula ) = 0;
      virtual HRESULT __stdcall raw_EditFromClipboard (
        /*[in]*/ BSTR pName ) = 0;
      virtual HRESULT __stdcall raw_PutName (
        /*[in]*/ IDispatch * pVariable,
        /*[in]*/ BSTR pName ) = 0;
      virtual HRESULT __stdcall raw_GetName (
        /*[in]*/ IDispatch * pVariable,
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall raw_Translate (
        /*[in]*/ BSTR pName,
        /*[out,retval]*/ IDispatch * * ppVariable ) = 0;
      virtual HRESULT __stdcall raw_Query (
        /*[in]*/ BSTR pFindCriterium,
        /*[in]*/ VARIANT NamedBy,
        /*[in]*/ VARIANT VarType,
        /*[in]*/ VARIANT CaseInsensitive,
        /*[out,retval]*/ IDispatch * * pEnum ) = 0;
      virtual HRESULT __stdcall raw_GetFormula (
        /*[in]*/ BSTR wcpName,
        /*[out,retval]*/ BSTR * wcpFormula ) = 0;
      virtual HRESULT __stdcall raw_GetDisplayName (
        /*[in]*/ IDispatch * pVariable,
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall raw_GetSystemName (
        /*[in]*/ IDispatch * pVariable,
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall raw_CopyToClipboard (
        /*[in]*/ BSTR bsName ) = 0;
};

struct __declspec(uuid("3db3add1-e66c-4e1b-8147-3d3f331b8628"))
_IInterpartLinkAuto : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT IsFrozen (
        VARIANT_BOOL * bFrozen );
    HRESULT GetInfo (
        BSTR * SourceFeatureName,
        BSTR * SourceDocumenetName );
    HRESULT Freeze ( );
    HRESULT Thaw ( );
    HRESULT BreakLink ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_IsFrozen (
        /*[out]*/ VARIANT_BOOL * bFrozen ) = 0;
      virtual HRESULT __stdcall raw_GetInfo (
        /*[out]*/ BSTR * SourceFeatureName,
        /*[out]*/ BSTR * SourceDocumenetName ) = 0;
      virtual HRESULT __stdcall raw_Freeze ( ) = 0;
      virtual HRESULT __stdcall raw_Thaw ( ) = 0;
      virtual HRESULT __stdcall raw_BreakLink ( ) = 0;
};

struct __declspec(uuid("bdc621a8-eee7-4ec5-ba07-8ac60582c5f1"))
_IInterpartLinksAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    int GetCount ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IDispatchPtr GetApplication ( );
    IDispatchPtr GetParent ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * pCount ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * pItem ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * pApp ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * pParent ) = 0;
};

enum SensorTypeConstants
{
    seSensorTypeInvalid = 0,
    seSensorTypeVariable = 1,
    seSensorTypeMinimumDistance = 6,
    seSensorTypeUser = 7
};

enum SensorStatusConstants
{
    seSensorStatusUpToDate = 0,
    seSensorStatusOutOfDate = 1,
    seSensorStatusInError = 2
};

enum SensorOperatorConstants
{
    seSensorOperatorInvalid = 0,
    seSensorOperatorGreaterThan = 1,
    seSensorOperatorLessThan = 2,
    seSensorOperatorEqualTo = 3,
    seSensorOperatorNotEqualTo = 4,
    seSensorOperatorBetween = 5,
    seSensorOperatorNotBetween = 6
};

enum SensorDisplayTypeConstants
{
    seSensorDisplayTypeInvalid = 0,
    seSensorDisplayTypeHorizontalRange = 1,
    seSensorDisplayTypeTrueFalse = 2
};

enum SensorUpdateMechanismConstants
{
    seSensorUpdateMechanismInvalid = 0,
    seSensorUpdateMechanismAutomatic = 1,
    seSensorUpdateMechanismManual = 2
};

struct __declspec(uuid("1d001cbc-b19c-11d3-b960-0004ac969177"))
_ISensorAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetDisplayType,put=PutDisplayType))
    enum SensorDisplayTypeConstants DisplayType;
    __declspec(property(get=GetUpdateMechanism,put=PutUpdateMechanism))
    enum SensorUpdateMechanismConstants UpdateMechanism;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetSensorType))
    enum SensorTypeConstants SensorType;
    __declspec(property(get=GetStatus))
    enum SensorStatusConstants Status;
    __declspec(property(get=GetIsInRange))
    VARIANT_BOOL IsInRange;
    __declspec(property(get=GetCurrentValue))
    double CurrentValue;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDescription,put=PutDescription))
    _bstr_t Description;
    __declspec(property(get=GetLowerRange,put=PutLowerRange))
    double LowerRange;
    __declspec(property(get=GetUpperRange,put=PutUpperRange))
    double UpperRange;
    __declspec(property(get=GetOperator,put=PutOperator))
    enum SensorOperatorConstants Operator;
    __declspec(property(get=GetMinimumThreshold,put=PutMinimumThreshold))
    double MinimumThreshold;
    __declspec(property(get=GetMaximumThreshold,put=PutMaximumThreshold))
    double MaximumThreshold;

    //
    // Wrapper methods for error-handling
    //

    enum SensorTypeConstants GetSensorType ( );
    enum SensorStatusConstants GetStatus ( );
    VARIANT_BOOL GetIsInRange ( );
    double GetCurrentValue ( );
    void PutName (
        _bstr_t Name );
    _bstr_t GetName ( );
    void PutDescription (
        _bstr_t Description );
    _bstr_t GetDescription ( );
    void PutLowerRange (
        double LowerRange );
    double GetLowerRange ( );
    void PutUpperRange (
        double UpperRange );
    double GetUpperRange ( );
    void PutOperator (
        enum SensorOperatorConstants Operator );
    enum SensorOperatorConstants GetOperator ( );
    void PutMinimumThreshold (
        double MinimumThreshold );
    double GetMinimumThreshold ( );
    void PutMaximumThreshold (
        double MaximumThreshold );
    double GetMaximumThreshold ( );
    void PutDisplayType (
        enum SensorDisplayTypeConstants DisplayType );
    enum SensorDisplayTypeConstants GetDisplayType ( );
    void PutUpdateMechanism (
        enum SensorUpdateMechanismConstants UpdateMechanism );
    enum SensorUpdateMechanismConstants GetUpdateMechanism ( );
    HRESULT Update ( );
    HRESULT Delete ( );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SensorType (
        /*[out,retval]*/ enum SensorTypeConstants * SensorType ) = 0;
      virtual HRESULT __stdcall get_Status (
        /*[out,retval]*/ enum SensorStatusConstants * Status ) = 0;
      virtual HRESULT __stdcall get_IsInRange (
        /*[out,retval]*/ VARIANT_BOOL * IsInRange ) = 0;
      virtual HRESULT __stdcall get_CurrentValue (
        /*[out,retval]*/ double * CurrentValue ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Description (
        /*[in]*/ BSTR Description ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * Description ) = 0;
      virtual HRESULT __stdcall put_LowerRange (
        /*[in]*/ double LowerRange ) = 0;
      virtual HRESULT __stdcall get_LowerRange (
        /*[out,retval]*/ double * LowerRange ) = 0;
      virtual HRESULT __stdcall put_UpperRange (
        /*[in]*/ double UpperRange ) = 0;
      virtual HRESULT __stdcall get_UpperRange (
        /*[out,retval]*/ double * UpperRange ) = 0;
      virtual HRESULT __stdcall put_Operator (
        /*[in]*/ enum SensorOperatorConstants Operator ) = 0;
      virtual HRESULT __stdcall get_Operator (
        /*[out,retval]*/ enum SensorOperatorConstants * Operator ) = 0;
      virtual HRESULT __stdcall put_MinimumThreshold (
        /*[in]*/ double MinimumThreshold ) = 0;
      virtual HRESULT __stdcall get_MinimumThreshold (
        /*[out,retval]*/ double * MinimumThreshold ) = 0;
      virtual HRESULT __stdcall put_MaximumThreshold (
        /*[in]*/ double MaximumThreshold ) = 0;
      virtual HRESULT __stdcall get_MaximumThreshold (
        /*[out,retval]*/ double * MaximumThreshold ) = 0;
      virtual HRESULT __stdcall put_DisplayType (
        /*[in]*/ enum SensorDisplayTypeConstants DisplayType ) = 0;
      virtual HRESULT __stdcall get_DisplayType (
        /*[out,retval]*/ enum SensorDisplayTypeConstants * DisplayType ) = 0;
      virtual HRESULT __stdcall put_UpdateMechanism (
        /*[in]*/ enum SensorUpdateMechanismConstants UpdateMechanism ) = 0;
      virtual HRESULT __stdcall get_UpdateMechanism (
        /*[out,retval]*/ enum SensorUpdateMechanismConstants * UpdateMechanism ) = 0;
      virtual HRESULT __stdcall raw_Update ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
};

enum SurfaceAreaSensorAreaTypeConstants
{
    seSurfaceAreaSensorAreaTypeNeg = 0,
    seSurfaceAreaSensorAreaTypePos = 1
};

enum SurfaceAreaSensorSelectionTypeConstants
{
    seSurfaceAreaSensorSelectFace = 0,
    seSurfaceAreaSensorSelectFaceChain = 1
};

struct __declspec(uuid("e3f0b476-b19c-11d3-b960-0004ac969177"))
_ISensorsAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    int GetCount ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    IDispatchPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr AddVariableSensor (
        IDispatch * variable,
        _bstr_t Name,
        _bstr_t Description,
        double LowerRange,
        double UpperRange,
        double MinimumThreshold,
        double MaximumThreshold,
        enum SensorOperatorConstants Operator,
        enum SensorDisplayTypeConstants DisplayType,
        enum SensorUpdateMechanismConstants UpdateMechanism );
    IDispatchPtr AddMinimumDistanceSensor (
        IDispatch * Element1,
        IDispatch * Element2,
        _bstr_t Name,
        _bstr_t Description,
        double LowerRange,
        double UpperRange,
        double MinimumThreshold,
        double MaximumThreshold,
        enum SensorOperatorConstants Operator,
        enum SensorDisplayTypeConstants DisplayType,
        enum SensorUpdateMechanismConstants UpdateMechanism );
    IDispatchPtr AddSurfaceAreaSensor (
        enum SurfaceAreaSensorAreaTypeConstants iSensorType,
        enum SurfaceAreaSensorSelectionTypeConstants iSelectionType,
        _bstr_t Name,
        _bstr_t Description,
        double LowerRange,
        double UpperRange,
        double MinimumThreshold,
        double MaximumThreshold,
        enum SensorOperatorConstants Operator,
        enum SensorDisplayTypeConstants DisplayType,
        enum SensorUpdateMechanismConstants UpdateMechanism,
        VARIANT * Element );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * Count ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Enum ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_AddVariableSensor (
        /*[in]*/ IDispatch * variable,
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[in]*/ double LowerRange,
        /*[in]*/ double UpperRange,
        /*[in]*/ double MinimumThreshold,
        /*[in]*/ double MaximumThreshold,
        /*[in]*/ enum SensorOperatorConstants Operator,
        /*[in]*/ enum SensorDisplayTypeConstants DisplayType,
        /*[in]*/ enum SensorUpdateMechanismConstants UpdateMechanism,
        /*[out,retval]*/ IDispatch * * Sensor ) = 0;
      virtual HRESULT __stdcall raw_AddMinimumDistanceSensor (
        /*[in]*/ IDispatch * Element1,
        /*[in]*/ IDispatch * Element2,
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[in]*/ double LowerRange,
        /*[in]*/ double UpperRange,
        /*[in]*/ double MinimumThreshold,
        /*[in]*/ double MaximumThreshold,
        /*[in]*/ enum SensorOperatorConstants Operator,
        /*[in]*/ enum SensorDisplayTypeConstants DisplayType,
        /*[in]*/ enum SensorUpdateMechanismConstants UpdateMechanism,
        /*[out,retval]*/ IDispatch * * Sensor ) = 0;
      virtual HRESULT __stdcall raw_AddSurfaceAreaSensor (
        /*[in]*/ enum SurfaceAreaSensorAreaTypeConstants iSensorType,
        /*[in]*/ enum SurfaceAreaSensorSelectionTypeConstants iSelectionType,
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[in]*/ double LowerRange,
        /*[in]*/ double UpperRange,
        /*[in]*/ double MinimumThreshold,
        /*[in]*/ double MaximumThreshold,
        /*[in]*/ enum SensorOperatorConstants Operator,
        /*[in]*/ enum SensorDisplayTypeConstants DisplayType,
        /*[in]*/ enum SensorUpdateMechanismConstants UpdateMechanism,
        /*[in]*/ VARIANT * Element,
        /*[out,retval]*/ IDispatch * * Sensor ) = 0;
};

enum SheetMetalSensorFeatureTypeConstants
{
    seSheetMetalSensorFeatureTypeExteriorEdges = 0,
    seSheetMetalSensorFeatureTypeInteriorEdges = 1,
    seSheetMetalSensorFeatureTypeCutouts = 2,
    seSheetMetalSensorFeatureTypeHoles = 3,
    seSheetMetalSensorFeatureTypeDimples = 4,
    seSheetMetalSensorFeatureTypeLouvers = 5,
    seSheetMetalSensorFeatureTypeDrawnCutouts = 6,
    seSheetMetalSensorFeatureTypeBeads = 7,
    seSheetMetalSensorFeatureTypeStampDies_TG = 100
};

struct __declspec(uuid("acdac91f-c5f0-11d3-a98b-00c04f79b2b4"))
_ISheetMetalSensorsAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    int GetCount ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    IDispatchPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr AddVariableSensor (
        IDispatch * variable,
        _bstr_t Name,
        _bstr_t Description,
        double LowerRange,
        double UpperRange,
        double MinimumThreshold,
        double MaximumThreshold,
        enum SensorOperatorConstants Operator,
        enum SensorDisplayTypeConstants DisplayType,
        enum SensorUpdateMechanismConstants UpdateMechanism );
    IDispatchPtr AddMinimumDistanceSensor (
        IDispatch * Element1,
        IDispatch * Element2,
        _bstr_t Name,
        _bstr_t Description,
        double LowerRange,
        double UpperRange,
        double MinimumThreshold,
        double MaximumThreshold,
        enum SensorOperatorConstants Operator,
        enum SensorDisplayTypeConstants DisplayType,
        enum SensorUpdateMechanismConstants UpdateMechanism );
    IDispatchPtr AddSheetMetalCheckerSensor (
        enum SheetMetalSensorFeatureTypeConstants LeftFeatureType,
        enum SheetMetalSensorFeatureTypeConstants RightFeatureType,
        _bstr_t Name,
        _bstr_t Description,
        double Threshold,
        enum SensorUpdateMechanismConstants UpdateMechanism,
        VARIANT * Element = &vtMissing );
    IDispatchPtr AddSurfaceAreaSensor (
        enum SurfaceAreaSensorAreaTypeConstants iSensorType,
        enum SurfaceAreaSensorSelectionTypeConstants iSelectionType,
        _bstr_t Name,
        _bstr_t Description,
        double LowerRange,
        double UpperRange,
        double MinimumThreshold,
        double MaximumThreshold,
        enum SensorOperatorConstants Operator,
        enum SensorDisplayTypeConstants DisplayType,
        enum SensorUpdateMechanismConstants UpdateMechanism,
        VARIANT * Element );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * Count ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Enum ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_AddVariableSensor (
        /*[in]*/ IDispatch * variable,
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[in]*/ double LowerRange,
        /*[in]*/ double UpperRange,
        /*[in]*/ double MinimumThreshold,
        /*[in]*/ double MaximumThreshold,
        /*[in]*/ enum SensorOperatorConstants Operator,
        /*[in]*/ enum SensorDisplayTypeConstants DisplayType,
        /*[in]*/ enum SensorUpdateMechanismConstants UpdateMechanism,
        /*[out,retval]*/ IDispatch * * Sensor ) = 0;
      virtual HRESULT __stdcall raw_AddMinimumDistanceSensor (
        /*[in]*/ IDispatch * Element1,
        /*[in]*/ IDispatch * Element2,
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[in]*/ double LowerRange,
        /*[in]*/ double UpperRange,
        /*[in]*/ double MinimumThreshold,
        /*[in]*/ double MaximumThreshold,
        /*[in]*/ enum SensorOperatorConstants Operator,
        /*[in]*/ enum SensorDisplayTypeConstants DisplayType,
        /*[in]*/ enum SensorUpdateMechanismConstants UpdateMechanism,
        /*[out,retval]*/ IDispatch * * Sensor ) = 0;
      virtual HRESULT __stdcall raw_AddSheetMetalCheckerSensor (
        /*[in]*/ enum SheetMetalSensorFeatureTypeConstants LeftFeatureType,
        /*[in]*/ enum SheetMetalSensorFeatureTypeConstants RightFeatureType,
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[in]*/ double Threshold,
        /*[in]*/ enum SensorUpdateMechanismConstants UpdateMechanism,
        /*[in]*/ VARIANT * Element,
        /*[out,retval]*/ IDispatch * * Sensor ) = 0;
      virtual HRESULT __stdcall raw_AddSurfaceAreaSensor (
        /*[in]*/ enum SurfaceAreaSensorAreaTypeConstants iSensorType,
        /*[in]*/ enum SurfaceAreaSensorSelectionTypeConstants iSelectionType,
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Description,
        /*[in]*/ double LowerRange,
        /*[in]*/ double UpperRange,
        /*[in]*/ double MinimumThreshold,
        /*[in]*/ double MaximumThreshold,
        /*[in]*/ enum SensorOperatorConstants Operator,
        /*[in]*/ enum SensorDisplayTypeConstants DisplayType,
        /*[in]*/ enum SensorUpdateMechanismConstants UpdateMechanism,
        /*[in]*/ VARIANT * Element,
        /*[out,retval]*/ IDispatch * * Sensor ) = 0;
};

enum PMISectionDisplayModeConstants
{
    sePMISectionDisplayShowOnlyCutFaces = 0,
    sePMISectionDisplayShowCutFacesAndCutBodies = 1,
    sePMISectionDisplayShowCutFacesWithOriginalBodies = 2,
    sePMISectionDisplayShowOnlyOriginalBodies = 3
};

enum SectionViewPlaneExtentTypeConstant
{
    SectionViewPlaneExtentTypeConstant_Bounded = 1,
    SectionViewPlaneExtentTypeConstant_UnBounded = 2
};

struct __declspec(uuid("c0286643-07de-4008-acd4-5816205d773e"))
_ISectionViewAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetShowCuttingPlane,put=PutShowCuttingPlane))
    long ShowCuttingPlane;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetPlaneExtentType,put=PutPlaneExtentType))
    enum SectionViewPlaneExtentTypeConstant PlaneExtentType;
    __declspec(property(get=GetIsCutByPlane))
    long IsCutByPlane;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetStyle,put=PutStyle))
    _bstr_t Style;
    __declspec(property(get=GetCuttingPlaneColor,put=PutCuttingPlaneColor))
    long CuttingPlaneColor;
    __declspec(property(get=GetCuttingPlaneEdgeColor,put=PutCuttingPlaneEdgeColor))
    long CuttingPlaneEdgeColor;
    __declspec(property(get=GetOpacity,put=PutOpacity))
    double Opacity;
    __declspec(property(get=GetThroughAllExtent,put=PutThroughAllExtent))
    double ThroughAllExtent;
    __declspec(property(get=GetCutHardware,put=PutCutHardware))
    long CutHardware;
    __declspec(property(get=GetSectionDisplayMode,put=PutSectionDisplayMode))
    enum PMISectionDisplayModeConstants SectionDisplayMode;

    //
    // Wrapper methods for error-handling
    //

    void PutCaption (
        _bstr_t Caption );
    _bstr_t GetCaption ( );
    HRESULT Show (
        VARIANT_BOOL bShowSectionView );
    HRESULT Delete ( );
    void PutName (
        _bstr_t Name );
    _bstr_t GetName ( );
    void PutStyle (
        _bstr_t Style );
    _bstr_t GetStyle ( );
    void PutCuttingPlaneColor (
        long PlaneColor );
    long GetCuttingPlaneColor ( );
    void PutCuttingPlaneEdgeColor (
        long EdgeColor );
    long GetCuttingPlaneEdgeColor ( );
    void PutOpacity (
        double pdOpacity );
    double GetOpacity ( );
    void PutThroughAllExtent (
        double pdExtent );
    double GetThroughAllExtent ( );
    void PutCutHardware (
        long pbCutHardware );
    long GetCutHardware ( );
    void PutSectionDisplayMode (
        enum PMISectionDisplayModeConstants val );
    enum PMISectionDisplayModeConstants GetSectionDisplayMode ( );
    void PutShowCuttingPlane (
        long pbShowCuttingPlane );
    long GetShowCuttingPlane ( );
    HRESULT AddToModelView (
        IUnknown * ModelView );
    HRESULT RemoveFromModelView (
        IUnknown * ModelView );
    HRESULT EditByPlane (
        long nNumPlanes,
        SAFEARRAY * * pPlanes,
        SAFEARRAY * * PlaneCutDirections,
        enum SectionViewPlaneExtentTypeConstant eExtentType,
        long bCutHardwareParts );
    void PutPlaneExtentType (
        enum SectionViewPlaneExtentTypeConstant peExtentType );
    enum SectionViewPlaneExtentTypeConstant GetPlaneExtentType ( );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    HRESULT EditByPlaneEx (
        long nNumPlanes,
        SAFEARRAY * * pPlanes,
        SAFEARRAY * * PlaneCutDirections,
        SAFEARRAY * * SectionViewPlaneTypes,
        enum SectionViewPlaneExtentTypeConstant eExtentType,
        VARIANT_BOOL bCutHardwareParts );
    long GetIsCutByPlane ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR Caption ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * Caption ) = 0;
      virtual HRESULT __stdcall raw_Show (
        /*[in]*/ VARIANT_BOOL bShowSectionView ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ BSTR Style ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ BSTR * Style ) = 0;
      virtual HRESULT __stdcall put_CuttingPlaneColor (
        /*[in]*/ long PlaneColor ) = 0;
      virtual HRESULT __stdcall get_CuttingPlaneColor (
        /*[out,retval]*/ long * PlaneColor ) = 0;
      virtual HRESULT __stdcall put_CuttingPlaneEdgeColor (
        /*[in]*/ long EdgeColor ) = 0;
      virtual HRESULT __stdcall get_CuttingPlaneEdgeColor (
        /*[out,retval]*/ long * EdgeColor ) = 0;
      virtual HRESULT __stdcall put_Opacity (
        /*[in]*/ double pdOpacity ) = 0;
      virtual HRESULT __stdcall get_Opacity (
        /*[out,retval]*/ double * pdOpacity ) = 0;
      virtual HRESULT __stdcall put_ThroughAllExtent (
        /*[in]*/ double pdExtent ) = 0;
      virtual HRESULT __stdcall get_ThroughAllExtent (
        /*[out,retval]*/ double * pdExtent ) = 0;
      virtual HRESULT __stdcall put_CutHardware (
        /*[in]*/ long pbCutHardware ) = 0;
      virtual HRESULT __stdcall get_CutHardware (
        /*[out,retval]*/ long * pbCutHardware ) = 0;
      virtual HRESULT __stdcall put_SectionDisplayMode (
        /*[in]*/ enum PMISectionDisplayModeConstants val ) = 0;
      virtual HRESULT __stdcall get_SectionDisplayMode (
        /*[out,retval]*/ enum PMISectionDisplayModeConstants * val ) = 0;
      virtual HRESULT __stdcall put_ShowCuttingPlane (
        /*[in]*/ long pbShowCuttingPlane ) = 0;
      virtual HRESULT __stdcall get_ShowCuttingPlane (
        /*[out,retval]*/ long * pbShowCuttingPlane ) = 0;
      virtual HRESULT __stdcall raw_AddToModelView (
        /*[in]*/ IUnknown * ModelView ) = 0;
      virtual HRESULT __stdcall raw_RemoveFromModelView (
        /*[in]*/ IUnknown * ModelView ) = 0;
      virtual HRESULT __stdcall raw_EditByPlane (
        /*[in]*/ long nNumPlanes,
        /*[in]*/ SAFEARRAY * * pPlanes,
        /*[in]*/ SAFEARRAY * * PlaneCutDirections,
        /*[in]*/ enum SectionViewPlaneExtentTypeConstant eExtentType,
        /*[in]*/ long bCutHardwareParts ) = 0;
      virtual HRESULT __stdcall put_PlaneExtentType (
        /*[in]*/ enum SectionViewPlaneExtentTypeConstant peExtentType ) = 0;
      virtual HRESULT __stdcall get_PlaneExtentType (
        /*[out,retval]*/ enum SectionViewPlaneExtentTypeConstant * peExtentType ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
      virtual HRESULT __stdcall raw_EditByPlaneEx (
        /*[in]*/ long nNumPlanes,
        /*[in]*/ SAFEARRAY * * pPlanes,
        /*[in]*/ SAFEARRAY * * PlaneCutDirections,
        /*[in]*/ SAFEARRAY * * SectionViewPlaneTypes,
        /*[in]*/ enum SectionViewPlaneExtentTypeConstant eExtentType,
        /*[in]*/ VARIANT_BOOL bCutHardwareParts ) = 0;
      virtual HRESULT __stdcall get_IsCutByPlane (
        /*[out,retval]*/ long * pbIsCutByPlane ) = 0;
};

enum SectionViewPlaneType
{
    igDynamic = 1,
    igAssociative = 2
};

enum SectionViewExtentSide
{
    igLeftExtent = 1,
    igRightExtent = 2,
    igFiniteSymmetricExtent = 3,
    igInfiniteLeftExtent = 4,
    igInfiniteRightExtent = 5,
    igThroughAllExtent = 6
};

enum SectionViewProfileSide
{
    igLeftProfileSide = 1,
    igRightProfileSide = 2,
    igInsideProfileSide = 3,
    igOutsideProfileSide = 4
};

struct __declspec(uuid("c7a5e645-2d08-45bd-9626-e660d8d8cb7b"))
_ISectionViewsAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    int GetCount ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    IDispatchPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr Add (
        long nNumProfiles,
        SAFEARRAY * * pProfiles,
        _bstr_t szCaption,
        double dExtent,
        enum SectionViewExtentSide eExtentSide,
        enum SectionViewProfileSide eProfileSide,
        long bCutHardwareParts );
    IDispatchPtr AddByPlane (
        long nNumPlanes,
        SAFEARRAY * * pPlanes,
        SAFEARRAY * * PlaneCutDirections,
        enum SectionViewPlaneExtentTypeConstant eExtentType,
        _bstr_t szCaption,
        long bCutHardwareParts );
    IDispatchPtr AddByPlaneEx (
        long nNumPlanes,
        SAFEARRAY * * pPlanes,
        SAFEARRAY * * PlaneCutDirections,
        SAFEARRAY * * SectionViewPlaneTypes,
        enum SectionViewPlaneExtentTypeConstant eExtentType,
        _bstr_t szCaption,
        VARIANT_BOOL bCutHardwareParts );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ int * Count ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Enum ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ long nNumProfiles,
        /*[in]*/ SAFEARRAY * * pProfiles,
        /*[in]*/ BSTR szCaption,
        /*[in]*/ double dExtent,
        /*[in]*/ enum SectionViewExtentSide eExtentSide,
        /*[in]*/ enum SectionViewProfileSide eProfileSide,
        /*[in]*/ long bCutHardwareParts,
        /*[out,retval]*/ IDispatch * * SectionView ) = 0;
      virtual HRESULT __stdcall raw_AddByPlane (
        /*[in]*/ long nNumPlanes,
        /*[in]*/ SAFEARRAY * * pPlanes,
        /*[in]*/ SAFEARRAY * * PlaneCutDirections,
        /*[in]*/ enum SectionViewPlaneExtentTypeConstant eExtentType,
        /*[in]*/ BSTR szCaption,
        /*[in]*/ long bCutHardwareParts,
        /*[out,retval]*/ IDispatch * * SectionView ) = 0;
      virtual HRESULT __stdcall raw_AddByPlaneEx (
        /*[in]*/ long nNumPlanes,
        /*[in]*/ SAFEARRAY * * pPlanes,
        /*[in]*/ SAFEARRAY * * PlaneCutDirections,
        /*[in]*/ SAFEARRAY * * SectionViewPlaneTypes,
        /*[in]*/ enum SectionViewPlaneExtentTypeConstant eExtentType,
        /*[in]*/ BSTR szCaption,
        /*[in]*/ VARIANT_BOOL bCutHardwareParts,
        /*[out,retval]*/ IDispatch * * SectionView ) = 0;
};

struct __declspec(uuid("296b0541-e53b-11ce-9dfa-08003601e012"))
_ILayerAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetIsEmpty))
    VARIANT_BOOL IsEmpty;
    __declspec(property(get=GetKey))
    _bstr_t Key;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDescription,put=PutDescription))
    _bstr_t Description;
    __declspec(property(get=GetShow,put=PutShow))
    VARIANT_BOOL Show;
    __declspec(property(get=GetLocatable,put=PutLocatable))
    VARIANT_BOOL Locatable;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    HRESULT Delete ( );
    VARIANT_BOOL GetIsEmpty ( );
    _bstr_t GetKey ( );
    void PutName (
        _bstr_t Name );
    _bstr_t GetName ( );
    void PutDescription (
        _bstr_t Description );
    _bstr_t GetDescription ( );
    HRESULT Activate ( );
    VARIANT_BOOL GetShow ( );
    void PutShow (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetLocatable ( );
    void PutLocatable (
        VARIANT_BOOL Value );
    HRESULT ShowInContext (
        IDispatch * Context );
    HRESULT HideInContext (
        IDispatch * Context );
    HRESULT MakeLocatableInContext (
        IDispatch * Context );
    HRESULT MakeNonLocatableInContext (
        IDispatch * Context );
    HRESULT ActivateInContext (
        IDispatch * Context );
    VARIANT_BOOL IsShownInContext (
        IDispatch * Context );
    VARIANT_BOOL IsLocatableInContext (
        IDispatch * Context );
    HRESULT ShowOnly ( );
    HRESULT ShowOnlyInContext (
        IDispatch * Context );
    HRESULT DeleteLayerAndObjects ( );
    HRESULT ShowEverywhere ( );
    HRESULT HideEverywhere ( );
    HRESULT MoveAllObjectsToLayer (
        IDispatch * NewLayerDispatch );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct Application * * pApplication ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_IsEmpty (
        /*[out,retval]*/ VARIANT_BOOL * Empty ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[out,retval]*/ BSTR * Key ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Description (
        /*[in]*/ BSTR Description ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * Description ) = 0;
      virtual HRESULT __stdcall raw_Activate ( ) = 0;
      virtual HRESULT __stdcall get_Show (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Show (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Locatable (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Locatable (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall raw_ShowInContext (
        /*[in]*/ IDispatch * Context ) = 0;
      virtual HRESULT __stdcall raw_HideInContext (
        /*[in]*/ IDispatch * Context ) = 0;
      virtual HRESULT __stdcall raw_MakeLocatableInContext (
        /*[in]*/ IDispatch * Context ) = 0;
      virtual HRESULT __stdcall raw_MakeNonLocatableInContext (
        /*[in]*/ IDispatch * Context ) = 0;
      virtual HRESULT __stdcall raw_ActivateInContext (
        /*[in]*/ IDispatch * Context ) = 0;
      virtual HRESULT __stdcall raw_IsShownInContext (
        /*[in]*/ IDispatch * Context,
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_IsLocatableInContext (
        /*[in]*/ IDispatch * Context,
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_ShowOnly ( ) = 0;
      virtual HRESULT __stdcall raw_ShowOnlyInContext (
        /*[in]*/ IDispatch * Context ) = 0;
      virtual HRESULT __stdcall raw_DeleteLayerAndObjects ( ) = 0;
      virtual HRESULT __stdcall raw_ShowEverywhere ( ) = 0;
      virtual HRESULT __stdcall raw_HideEverywhere ( ) = 0;
      virtual HRESULT __stdcall raw_MoveAllObjectsToLayer (
        /*[in]*/ IDispatch * NewLayerDispatch ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
};

struct __declspec(uuid("296b0542-e53b-11ce-9dfa-08003601e012"))
Layer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetIsEmpty))
    VARIANT_BOOL IsEmpty;
    __declspec(property(get=GetKey))
    _bstr_t Key;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDescription,put=PutDescription))
    _bstr_t Description;
    __declspec(property(get=GetShow,put=PutShow))
    VARIANT_BOOL Show;
    __declspec(property(get=GetLocatable,put=PutLocatable))
    VARIANT_BOOL Locatable;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    HRESULT Delete ( );
    VARIANT_BOOL GetIsEmpty ( );
    _bstr_t GetKey ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetName ( );
    void PutDescription (
        _bstr_t _arg1 );
    _bstr_t GetDescription ( );
    HRESULT Activate ( );
    VARIANT_BOOL GetShow ( );
    void PutShow (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetLocatable ( );
    void PutLocatable (
        VARIANT_BOOL _arg1 );
    HRESULT ShowInContext (
        IDispatch * Context );
    HRESULT HideInContext (
        IDispatch * Context );
    HRESULT MakeLocatableInContext (
        IDispatch * Context );
    HRESULT MakeNonLocatableInContext (
        IDispatch * Context );
    HRESULT ActivateInContext (
        IDispatch * Context );
    VARIANT_BOOL IsShownInContext (
        IDispatch * Context );
    VARIANT_BOOL IsLocatableInContext (
        IDispatch * Context );
    HRESULT ShowOnly ( );
    HRESULT ShowOnlyInContext (
        IDispatch * Context );
    HRESULT DeleteLayerAndObjects ( );
    HRESULT ShowEverywhere ( );
    HRESULT HideEverywhere ( );
    HRESULT MoveAllObjectsToLayer (
        IDispatch * NewLayerDispatch );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
};

struct __declspec(uuid("af7f70b0-dbef-11ce-9df3-08003601e012"))
_ILayersAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetActiveLayer))
    LayerPtr ActiveLayer;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    LayerPtr Item (
        const _variant_t & Index );
    ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    LayerPtr Add (
        _bstr_t Name );
    LayerPtr GetActiveLayer ( );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Layer * * Layer ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct Application * * pApplication ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct Layer * * Layer ) = 0;
      virtual HRESULT __stdcall get_ActiveLayer (
        /*[out,retval]*/ struct Layer * * Layer ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Unknown ) = 0;
};

enum StyleUnitsConstant
{
    PAPER_STYLEUNITS = 11,
    DESIGN_STYLEUNITS = 12,
    VIEW_STYLEUNITS = 13
};

struct __declspec(uuid("8d7a7d60-b7d0-11ce-bb76-08003601e855"))
_ILinearStyleAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetUnits,put=PutUnits))
    enum StyleUnitsConstant Units;
    __declspec(property(get=GetColor,put=PutColor))
    long Color;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetDashGapCount))
    long DashGapCount;
    __declspec(property(get=GetParent,put=PutParent))
    _bstr_t Parent;
    __declspec(property(get=GetDashType,put=PutDashType))
    _bstr_t DashType;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    void PutName (
        _bstr_t Name );
    _bstr_t GetName ( );
    void PutParent (
        _bstr_t Name );
    _bstr_t GetParent ( );
    _bstr_t GetDescription ( );
    void PutUnits (
        enum StyleUnitsConstant Units );
    enum StyleUnitsConstant GetUnits ( );
    void PutColor (
        long Color );
    long GetColor ( );
    void PutWidth (
        double Width );
    double GetWidth ( );
    HRESULT SetDashGap (
        long nCount,
        SAFEARRAY * * dDashGap,
        VARIANT_BOOL fAutoPhase );
    long GetDashGapCount ( );
    HRESULT GetDashGap (
        long * pnCount,
        SAFEARRAY * * dDashGap,
        VARIANT_BOOL * pfAutoPhase );
    void PutDashType (
        _bstr_t Name );
    _bstr_t GetDashType ( );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Parent (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * Description ) = 0;
      virtual HRESULT __stdcall put_Units (
        /*[in]*/ enum StyleUnitsConstant Units ) = 0;
      virtual HRESULT __stdcall get_Units (
        /*[out,retval]*/ enum StyleUnitsConstant * Units ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ long Color ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ long * Color ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double Width ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * Width ) = 0;
      virtual HRESULT __stdcall raw_SetDashGap (
        /*[in]*/ long nCount,
        /*[in]*/ SAFEARRAY * * dDashGap,
        /*[in]*/ VARIANT_BOOL fAutoPhase ) = 0;
      virtual HRESULT __stdcall get_DashGapCount (
        /*[out,retval]*/ long * pnCount ) = 0;
      virtual HRESULT __stdcall raw_GetDashGap (
        /*[out]*/ long * pnCount,
        /*[out]*/ SAFEARRAY * * dDashGap,
        /*[out]*/ VARIANT_BOOL * pfAutoPhase ) = 0;
      virtual HRESULT __stdcall put_DashType (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_DashType (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
};

struct __declspec(uuid("6457bb8e-1ae1-11cf-8ed0-080036062402"))
_IFillStyleAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPatternName,put=PutPatternName))
    _bstr_t PatternName;
    __declspec(property(get=GetPatternType))
    long PatternType;
    __declspec(property(get=GetColor,put=PutColor))
    long Color;
    __declspec(property(get=GetFillBackground,put=PutFillBackground))
    long FillBackground;
    __declspec(property(get=GetFillColor,put=PutFillColor))
    long FillColor;
    __declspec(property(get=GetRotation,put=PutRotation))
    double Rotation;
    __declspec(property(get=GetSpacing,put=PutSpacing))
    double Spacing;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetUnits,put=PutUnits))
    long Units;
    __declspec(property(get=GetParent,put=PutParent))
    _bstr_t Parent;
    __declspec(property(get=GetActive,put=PutActive))
    _bstr_t Active;

    //
    // Wrapper methods for error-handling
    //

    void PutName (
        _bstr_t Name );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    void PutPatternName (
        _bstr_t Name );
    _bstr_t GetPatternName ( );
    long GetPatternType ( );
    void PutColor (
        long Color );
    long GetColor ( );
    void PutFillBackground (
        long flag );
    long GetFillBackground ( );
    void PutFillColor (
        long Color );
    long GetFillColor ( );
    void PutRotation (
        double Angle );
    double GetRotation ( );
    void PutSpacing (
        double Spacing );
    double GetSpacing ( );
    void PutScale (
        double __MIDL___IFillStyleAuto0001 );
    double GetScale ( );
    void PutUnits (
        long Units );
    long GetUnits ( );
    void PutParent (
        _bstr_t Name );
    _bstr_t GetParent ( );
    void PutActive (
        _bstr_t Name );
    _bstr_t GetActive ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * Description ) = 0;
      virtual HRESULT __stdcall put_PatternName (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_PatternName (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_PatternType (
        /*[out,retval]*/ long * patternCode ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ long Color ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ long * Color ) = 0;
      virtual HRESULT __stdcall put_FillBackground (
        /*[in]*/ long flag ) = 0;
      virtual HRESULT __stdcall get_FillBackground (
        /*[out,retval]*/ long * flag ) = 0;
      virtual HRESULT __stdcall put_FillColor (
        /*[in]*/ long Color ) = 0;
      virtual HRESULT __stdcall get_FillColor (
        /*[out,retval]*/ long * Color ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ double Angle ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ double * Angle ) = 0;
      virtual HRESULT __stdcall put_Spacing (
        /*[in]*/ double Spacing ) = 0;
      virtual HRESULT __stdcall get_Spacing (
        /*[out,retval]*/ double * Spacing ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double __MIDL___IFillStyleAuto0001 ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * __MIDL___IFillStyleAuto0001 ) = 0;
      virtual HRESULT __stdcall put_Units (
        /*[in]*/ long Units ) = 0;
      virtual HRESULT __stdcall get_Units (
        /*[out,retval]*/ long * Units ) = 0;
      virtual HRESULT __stdcall put_Parent (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Active (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ BSTR * Name ) = 0;
};

enum HatchElementType
{
    igHatchElementTypeUnknown = 0,
    igHatchElementTypeLinear = 1,
    igHatchElementTypeRadial = 2
};

enum RadialHatchElementCenterLocation
{
    igRadialHatchElementCenterUnknown = 0,
    igRadialHatchElementCenterTopLeft = 1,
    igRadialHatchElementCenterTopMid = 2,
    igRadialHatchElementCenterTopRight = 3,
    igRadialHatchElementCenterMidLeft = 4,
    igRadialHatchElementCenterMidMid = 5,
    igRadialHatchElementCenterMidRight = 6,
    igRadialHatchElementCenterBottomLeft = 7,
    igRadialHatchElementCenterBottomMid = 8,
    igRadialHatchElementCenterBottomRight = 9
};

struct __declspec(uuid("6457bb92-1ae1-11cf-8ed0-080036062402"))
_IHatchPatternStyleAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetMasterRotation,put=PutMasterRotation))
    double MasterRotation;
    __declspec(property(get=GetMasterScale,put=PutMasterScale))
    double MasterScale;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetParent,put=PutParent))
    _bstr_t Parent;
    __declspec(property(get=GetUnits,put=PutUnits))
    long Units;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetSourceRotation,put=PutSourceRotation))
    double SourceRotation;
    __declspec(property(get=GetSourceScale,put=PutSourceScale))
    double SourceScale;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetDashGapCount))
    long DashGapCount[];

    //
    // Wrapper methods for error-handling
    //

    void PutName (
        _bstr_t lpName );
    _bstr_t GetName ( );
    void PutParent (
        _bstr_t lpName );
    _bstr_t GetParent ( );
    void PutUnits (
        long lpUnits );
    long GetUnits ( );
    long GetCount ( );
    long AddHatch (
        double dRotation,
        double dXOrigin,
        double dYOrigin,
        double dSpacing,
        double dShift,
        long nColor,
        double dWidth,
        _bstr_t DashTypeName );
    HRESULT GetHatch (
        long nDisplayIndex,
        double * lpdRotation,
        double * lpdXOrigin,
        double * lpdYOrigin,
        double * lpdSpacing,
        double * lpdShift,
        long * lpnColor,
        double * lpdWidth,
        BSTR * DashTypeName );
    HRESULT SetHatch (
        long nDisplayIndex,
        double dRotation,
        double dXOrigin,
        double dYOrigin,
        double dSpacing,
        double dShift,
        long nColor,
        double dWidth,
        _bstr_t DashTypeName );
    HRESULT RemoveHatch (
        long nDisplayIndex );
    HRESULT SetRotation (
        long nDisplayIndex,
        double dRotation );
    double GetRotation (
        long nDisplayIndex );
    HRESULT SetOrigin (
        long nDisplayIndex,
        double dX,
        double dY );
    HRESULT GetOrigin (
        long nDisplayIndex,
        double * lpdX,
        double * lpdY );
    HRESULT SetSpacing (
        long nDisplayIndex,
        double dSpacing );
    double GetSpacing (
        long nDisplayIndex );
    HRESULT SetShift (
        long nDisplayIndex,
        double dShift );
    double GetShift (
        long nDisplayIndex );
    HRESULT SetColor (
        long nDisplayIndex,
        long nColor );
    long GetColor (
        long nDisplayIndex );
    HRESULT SetWidth (
        long nDisplayIndex,
        double dWidth );
    double GetWidth (
        long nDisplayIndex );
    HRESULT SetDashType (
        long nDisplayIndex,
        _bstr_t DashTypeName );
    _bstr_t GetDashType (
        long nDisplayIndex );
    HRESULT SetDisplayIndex (
        long nCurrentIndex,
        long nNewIndex );
    HRESULT SetDashGap (
        long nDisplayIndex,
        long nCount,
        SAFEARRAY * * dDashGap );
    long GetDashGapCount (
        long nDisplayIndex );
    HRESULT GetDashGap (
        long nDisplayIndex,
        long * pnCount,
        SAFEARRAY * * dDashGap );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    void PutMasterRotation (
        double pdRotation );
    double GetMasterRotation ( );
    void PutMasterScale (
        double pdScale );
    double GetMasterScale ( );
    HRESULT SetMasterColor (
        long nColor );
    HRESULT SetMasterWidth (
        double dWidth );
    long AddHatchWithOption (
        double dRotation,
        double dXOrigin,
        double dYOrigin,
        double dSpacing,
        double dShift,
        long nColor,
        double dWidth,
        _bstr_t DashTypeName,
        enum HatchElementType elementType,
        enum RadialHatchElementCenterLocation ellipseCenterLocation,
        double dEllipseAxisRatio );
    HRESULT GetHatchWithOption (
        long nDisplayIndex,
        double * lpdRotation,
        double * lpdXOrigin,
        double * lpdYOrigin,
        double * lpdSpacing,
        double * lpdShift,
        long * lpnColor,
        double * lpdWidth,
        BSTR * DashTypeName,
        enum HatchElementType * elementType,
        enum RadialHatchElementCenterLocation * ellipseCenterLocation,
        double * dEllipseAxisRatio );
    HRESULT SetHatchWithOption (
        long nDisplayIndex,
        double dRotation,
        double dXOrigin,
        double dYOrigin,
        double dSpacing,
        double dShift,
        long nColor,
        double dWidth,
        _bstr_t DashTypeName,
        enum HatchElementType elementType,
        enum RadialHatchElementCenterLocation ellipseCenterLocation,
        double dEllipseAxisRatio );
    HRESULT SetElementType (
        long nDisplayIndex,
        enum HatchElementType elementType );
    enum HatchElementType GetElementType (
        long nDisplayIndex );
    HRESULT SetRadialElementCenterLocation (
        long nDisplayIndex,
        enum RadialHatchElementCenterLocation ellipseCenterLocation );
    enum RadialHatchElementCenterLocation GetRadialElementCenterLocation (
        long nDisplayIndex );
    HRESULT SetRadialElementAxisRatio (
        long nDisplayIndex,
        double dEllipseAxisRatio );
    double GetRadialElementAxisRatio (
        long nDisplayIndex );
    HRESULT SetSourceColor (
        long nColor );
    HRESULT SetSourceWidth (
        double dWidth );
    void PutSourceRotation (
        double pdRotation );
    double GetSourceRotation ( );
    void PutSourceScale (
        double pdScale );
    double GetSourceScale ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR lpName ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * lpName ) = 0;
      virtual HRESULT __stdcall put_Parent (
        /*[in]*/ BSTR lpName ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ BSTR * lpName ) = 0;
      virtual HRESULT __stdcall put_Units (
        /*[in]*/ long lpUnits ) = 0;
      virtual HRESULT __stdcall get_Units (
        /*[out,retval]*/ long * lpUnits ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * lpnCount ) = 0;
      virtual HRESULT __stdcall raw_AddHatch (
        /*[in]*/ double dRotation,
        /*[in]*/ double dXOrigin,
        /*[in]*/ double dYOrigin,
        /*[in]*/ double dSpacing,
        /*[in]*/ double dShift,
        /*[in]*/ long nColor,
        /*[in]*/ double dWidth,
        /*[in]*/ BSTR DashTypeName,
        /*[out,retval]*/ long * lpnDisplayIndex ) = 0;
      virtual HRESULT __stdcall raw_GetHatch (
        /*[in]*/ long nDisplayIndex,
        /*[out]*/ double * lpdRotation,
        /*[out]*/ double * lpdXOrigin,
        /*[out]*/ double * lpdYOrigin,
        /*[out]*/ double * lpdSpacing,
        /*[out]*/ double * lpdShift,
        /*[out]*/ long * lpnColor,
        /*[out]*/ double * lpdWidth,
        /*[out]*/ BSTR * DashTypeName ) = 0;
      virtual HRESULT __stdcall raw_SetHatch (
        /*[in]*/ long nDisplayIndex,
        /*[in]*/ double dRotation,
        /*[in]*/ double dXOrigin,
        /*[in]*/ double dYOrigin,
        /*[in]*/ double dSpacing,
        /*[in]*/ double dShift,
        /*[in]*/ long nColor,
        /*[in]*/ double dWidth,
        /*[in]*/ BSTR DashTypeName ) = 0;
      virtual HRESULT __stdcall raw_RemoveHatch (
        /*[in]*/ long nDisplayIndex ) = 0;
      virtual HRESULT __stdcall raw_SetRotation (
        /*[in]*/ long nDisplayIndex,
        /*[in]*/ double dRotation ) = 0;
      virtual HRESULT __stdcall raw_GetRotation (
        /*[in]*/ long nDisplayIndex,
        /*[out,retval]*/ double * lpdRotation ) = 0;
      virtual HRESULT __stdcall raw_SetOrigin (
        /*[in]*/ long nDisplayIndex,
        /*[in]*/ double dX,
        /*[in]*/ double dY ) = 0;
      virtual HRESULT __stdcall raw_GetOrigin (
        /*[in]*/ long nDisplayIndex,
        /*[out]*/ double * lpdX,
        /*[out]*/ double * lpdY ) = 0;
      virtual HRESULT __stdcall raw_SetSpacing (
        /*[in]*/ long nDisplayIndex,
        /*[in]*/ double dSpacing ) = 0;
      virtual HRESULT __stdcall raw_GetSpacing (
        /*[in]*/ long nDisplayIndex,
        /*[out,retval]*/ double * lpdSpacing ) = 0;
      virtual HRESULT __stdcall raw_SetShift (
        /*[in]*/ long nDisplayIndex,
        /*[in]*/ double dShift ) = 0;
      virtual HRESULT __stdcall raw_GetShift (
        /*[in]*/ long nDisplayIndex,
        /*[out,retval]*/ double * lpdShift ) = 0;
      virtual HRESULT __stdcall raw_SetColor (
        /*[in]*/ long nDisplayIndex,
        /*[in]*/ long nColor ) = 0;
      virtual HRESULT __stdcall raw_GetColor (
        /*[in]*/ long nDisplayIndex,
        /*[out,retval]*/ long * lpnColor ) = 0;
      virtual HRESULT __stdcall raw_SetWidth (
        /*[in]*/ long nDisplayIndex,
        /*[in]*/ double dWidth ) = 0;
      virtual HRESULT __stdcall raw_GetWidth (
        /*[in]*/ long nDisplayIndex,
        /*[out,retval]*/ double * lpdWidth ) = 0;
      virtual HRESULT __stdcall raw_SetDashType (
        /*[in]*/ long nDisplayIndex,
        /*[in]*/ BSTR DashTypeName ) = 0;
      virtual HRESULT __stdcall raw_GetDashType (
        /*[in]*/ long nDisplayIndex,
        /*[out,retval]*/ BSTR * lpDashTypeName ) = 0;
      virtual HRESULT __stdcall raw_SetDisplayIndex (
        /*[in]*/ long nCurrentIndex,
        /*[in]*/ long nNewIndex ) = 0;
      virtual HRESULT __stdcall raw_SetDashGap (
        /*[in]*/ long nDisplayIndex,
        /*[in]*/ long nCount,
        /*[in]*/ SAFEARRAY * * dDashGap ) = 0;
      virtual HRESULT __stdcall get_DashGapCount (
        /*[in]*/ long nDisplayIndex,
        /*[out,retval]*/ long * pnCount ) = 0;
      virtual HRESULT __stdcall raw_GetDashGap (
        /*[in]*/ long nDisplayIndex,
        /*[out]*/ long * pnCount,
        /*[out]*/ SAFEARRAY * * dDashGap ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
      virtual HRESULT __stdcall put_MasterRotation (
        /*[in]*/ double pdRotation ) = 0;
      virtual HRESULT __stdcall get_MasterRotation (
        /*[out,retval]*/ double * pdRotation ) = 0;
      virtual HRESULT __stdcall put_MasterScale (
        /*[in]*/ double pdScale ) = 0;
      virtual HRESULT __stdcall get_MasterScale (
        /*[out,retval]*/ double * pdScale ) = 0;
      virtual HRESULT __stdcall raw_SetMasterColor (
        /*[in]*/ long nColor ) = 0;
      virtual HRESULT __stdcall raw_SetMasterWidth (
        /*[in]*/ double dWidth ) = 0;
      virtual HRESULT __stdcall raw_AddHatchWithOption (
        /*[in]*/ double dRotation,
        /*[in]*/ double dXOrigin,
        /*[in]*/ double dYOrigin,
        /*[in]*/ double dSpacing,
        /*[in]*/ double dShift,
        /*[in]*/ long nColor,
        /*[in]*/ double dWidth,
        /*[in]*/ BSTR DashTypeName,
        /*[in]*/ enum HatchElementType elementType,
        /*[in]*/ enum RadialHatchElementCenterLocation ellipseCenterLocation,
        /*[in]*/ double dEllipseAxisRatio,
        /*[out,retval]*/ long * lpnDisplayIndex ) = 0;
      virtual HRESULT __stdcall raw_GetHatchWithOption (
        /*[in]*/ long nDisplayIndex,
        /*[out]*/ double * lpdRotation,
        /*[out]*/ double * lpdXOrigin,
        /*[out]*/ double * lpdYOrigin,
        /*[out]*/ double * lpdSpacing,
        /*[out]*/ double * lpdShift,
        /*[out]*/ long * lpnColor,
        /*[out]*/ double * lpdWidth,
        /*[out]*/ BSTR * DashTypeName,
        /*[out]*/ enum HatchElementType * elementType,
        /*[out]*/ enum RadialHatchElementCenterLocation * ellipseCenterLocation,
        /*[out]*/ double * dEllipseAxisRatio ) = 0;
      virtual HRESULT __stdcall raw_SetHatchWithOption (
        /*[in]*/ long nDisplayIndex,
        /*[in]*/ double dRotation,
        /*[in]*/ double dXOrigin,
        /*[in]*/ double dYOrigin,
        /*[in]*/ double dSpacing,
        /*[in]*/ double dShift,
        /*[in]*/ long nColor,
        /*[in]*/ double dWidth,
        /*[in]*/ BSTR DashTypeName,
        /*[in]*/ enum HatchElementType elementType,
        /*[in]*/ enum RadialHatchElementCenterLocation ellipseCenterLocation,
        /*[in]*/ double dEllipseAxisRatio ) = 0;
      virtual HRESULT __stdcall raw_SetElementType (
        /*[in]*/ long nDisplayIndex,
        /*[in]*/ enum HatchElementType elementType ) = 0;
      virtual HRESULT __stdcall raw_GetElementType (
        /*[in]*/ long nDisplayIndex,
        /*[out,retval]*/ enum HatchElementType * pElementType ) = 0;
      virtual HRESULT __stdcall raw_SetRadialElementCenterLocation (
        /*[in]*/ long nDisplayIndex,
        /*[in]*/ enum RadialHatchElementCenterLocation ellipseCenterLocation ) = 0;
      virtual HRESULT __stdcall raw_GetRadialElementCenterLocation (
        /*[in]*/ long nDisplayIndex,
        /*[out,retval]*/ enum RadialHatchElementCenterLocation * pEllipseCenterLocation ) = 0;
      virtual HRESULT __stdcall raw_SetRadialElementAxisRatio (
        /*[in]*/ long nDisplayIndex,
        /*[in]*/ double dEllipseAxisRatio ) = 0;
      virtual HRESULT __stdcall raw_GetRadialElementAxisRatio (
        /*[in]*/ long nDisplayIndex,
        /*[out,retval]*/ double * pdEllipseAxisRatio ) = 0;
      virtual HRESULT __stdcall raw_SetSourceColor (
        /*[in]*/ long nColor ) = 0;
      virtual HRESULT __stdcall raw_SetSourceWidth (
        /*[in]*/ double dWidth ) = 0;
      virtual HRESULT __stdcall put_SourceRotation (
        /*[in]*/ double pdRotation ) = 0;
      virtual HRESULT __stdcall get_SourceRotation (
        /*[out,retval]*/ double * pdRotation ) = 0;
      virtual HRESULT __stdcall put_SourceScale (
        /*[in]*/ double pdScale ) = 0;
      virtual HRESULT __stdcall get_SourceScale (
        /*[out,retval]*/ double * pdScale ) = 0;
};

struct __declspec(uuid("0c60fba0-ffe3-11cd-a82a-08003601e855"))
LinearStyle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetUnits,put=PutUnits))
    enum StyleUnitsConstant Units;
    __declspec(property(get=GetColor,put=PutColor))
    long Color;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetDashGapCount))
    long DashGapCount;
    __declspec(property(get=GetParent,put=PutParent))
    _bstr_t Parent;
    __declspec(property(get=GetDashType,put=PutDashType))
    _bstr_t DashType;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetName ( );
    void PutParent (
        _bstr_t _arg1 );
    _bstr_t GetParent ( );
    _bstr_t GetDescription ( );
    void PutUnits (
        enum StyleUnitsConstant _arg1 );
    enum StyleUnitsConstant GetUnits ( );
    void PutColor (
        long _arg1 );
    long GetColor ( );
    void PutWidth (
        double _arg1 );
    double GetWidth ( );
    HRESULT SetDashGap (
        long nCount,
        SAFEARRAY * * dDashGap,
        VARIANT_BOOL fAutoPhase );
    long GetDashGapCount ( );
    HRESULT GetDashGap (
        long * pnCount,
        SAFEARRAY * * dDashGap,
        VARIANT_BOOL * pfAutoPhase );
    void PutDashType (
        _bstr_t _arg1 );
    _bstr_t GetDashType ( );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
};

struct __declspec(uuid("25736050-f726-11cd-a82a-08003601e855"))
_ILinearStylesAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetActive,put=PutActive))
    _bstr_t Active;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr GetApplication ( );
    LinearStylePtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    LinearStylePtr Add (
        _bstr_t Name,
        _bstr_t Parent );
    HRESULT Remove (
        _bstr_t Name );
    _bstr_t GetActive ( );
    void PutActive (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * pParent ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * pApp ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct LinearStyle * * pItem ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pEnum ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Parent,
        /*[out,retval]*/ struct LinearStyle * * GeoStyle ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Active (
        /*[in]*/ BSTR Name ) = 0;
};

struct __declspec(uuid("6457bb8f-1ae1-11cf-8ed0-080036062402"))
FillStyle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetPatternName,put=PutPatternName))
    _bstr_t PatternName;
    __declspec(property(get=GetPatternType))
    long PatternType;
    __declspec(property(get=GetColor,put=PutColor))
    long Color;
    __declspec(property(get=GetFillBackground,put=PutFillBackground))
    long FillBackground;
    __declspec(property(get=GetFillColor,put=PutFillColor))
    long FillColor;
    __declspec(property(get=GetRotation,put=PutRotation))
    double Rotation;
    __declspec(property(get=GetSpacing,put=PutSpacing))
    double Spacing;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetUnits,put=PutUnits))
    long Units;
    __declspec(property(get=GetParent,put=PutParent))
    _bstr_t Parent;
    __declspec(property(get=GetActive,put=PutActive))
    _bstr_t Active;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    void PutPatternName (
        _bstr_t _arg1 );
    _bstr_t GetPatternName ( );
    long GetPatternType ( );
    void PutColor (
        long _arg1 );
    long GetColor ( );
    void PutFillBackground (
        long _arg1 );
    long GetFillBackground ( );
    void PutFillColor (
        long _arg1 );
    long GetFillColor ( );
    void PutRotation (
        double _arg1 );
    double GetRotation ( );
    void PutSpacing (
        double _arg1 );
    double GetSpacing ( );
    void PutScale (
        double _arg1 );
    double GetScale ( );
    void PutUnits (
        long _arg1 );
    long GetUnits ( );
    void PutParent (
        _bstr_t _arg1 );
    _bstr_t GetParent ( );
    void PutActive (
        _bstr_t _arg1 );
    _bstr_t GetActive ( );
};

struct __declspec(uuid("6457bb90-1ae1-11cf-8ed0-080036062402"))
_IFillStylesAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetActive,put=PutActive))
    _bstr_t Active;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr GetApplication ( );
    FillStylePtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    FillStylePtr Add (
        _bstr_t Name,
        _bstr_t Parent );
    HRESULT Remove (
        _bstr_t Name );
    void PutActive (
        _bstr_t Name );
    _bstr_t GetActive ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * pParent ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * pApp ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct FillStyle * * pItem ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pEnum ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Parent,
        /*[out,retval]*/ struct FillStyle * * hFillStyle ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall put_Active (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ BSTR * Name ) = 0;
};

struct __declspec(uuid("6457bb93-1ae1-11cf-8ed0-080036062402"))
HatchPatternStyle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMasterRotation,put=PutMasterRotation))
    double MasterRotation;
    __declspec(property(get=GetMasterScale,put=PutMasterScale))
    double MasterScale;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetParent,put=PutParent))
    _bstr_t Parent;
    __declspec(property(get=GetUnits,put=PutUnits))
    long Units;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetSourceRotation,put=PutSourceRotation))
    double SourceRotation;
    __declspec(property(get=GetSourceScale,put=PutSourceScale))
    double SourceScale;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetDashGapCount))
    long DashGapCount[];

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetName ( );
    void PutParent (
        _bstr_t _arg1 );
    _bstr_t GetParent ( );
    void PutUnits (
        long _arg1 );
    long GetUnits ( );
    long GetCount ( );
    long AddHatch (
        double dRotation,
        double dXOrigin,
        double dYOrigin,
        double dSpacing,
        double dShift,
        long nColor,
        double dWidth,
        _bstr_t DashTypeName );
    HRESULT GetHatch (
        long nDisplayIndex,
        double * lpdRotation,
        double * lpdXOrigin,
        double * lpdYOrigin,
        double * lpdSpacing,
        double * lpdShift,
        long * lpnColor,
        double * lpdWidth,
        BSTR * DashTypeName );
    HRESULT SetHatch (
        long nDisplayIndex,
        double dRotation,
        double dXOrigin,
        double dYOrigin,
        double dSpacing,
        double dShift,
        long nColor,
        double dWidth,
        _bstr_t DashTypeName );
    HRESULT RemoveHatch (
        long nDisplayIndex );
    HRESULT SetRotation (
        long nDisplayIndex,
        double dRotation );
    double GetRotation (
        long nDisplayIndex );
    HRESULT SetOrigin (
        long nDisplayIndex,
        double dX,
        double dY );
    HRESULT GetOrigin (
        long nDisplayIndex,
        double * lpdX,
        double * lpdY );
    HRESULT SetSpacing (
        long nDisplayIndex,
        double dSpacing );
    double GetSpacing (
        long nDisplayIndex );
    HRESULT SetShift (
        long nDisplayIndex,
        double dShift );
    double GetShift (
        long nDisplayIndex );
    HRESULT SetColor (
        long nDisplayIndex,
        long nColor );
    long GetColor (
        long nDisplayIndex );
    HRESULT SetWidth (
        long nDisplayIndex,
        double dWidth );
    double GetWidth (
        long nDisplayIndex );
    HRESULT SetDashType (
        long nDisplayIndex,
        _bstr_t DashTypeName );
    _bstr_t GetDashType (
        long nDisplayIndex );
    HRESULT SetDisplayIndex (
        long nCurrentIndex,
        long nNewIndex );
    HRESULT SetDashGap (
        long nDisplayIndex,
        long nCount,
        SAFEARRAY * * dDashGap );
    long GetDashGapCount (
        long nDisplayIndex );
    HRESULT GetDashGap (
        long nDisplayIndex,
        long * pnCount,
        SAFEARRAY * * dDashGap );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    void PutMasterRotation (
        double _arg1 );
    double GetMasterRotation ( );
    void PutMasterScale (
        double _arg1 );
    double GetMasterScale ( );
    HRESULT SetMasterColor (
        long nColor );
    HRESULT SetMasterWidth (
        double dWidth );
    long AddHatchWithOption (
        double dRotation,
        double dXOrigin,
        double dYOrigin,
        double dSpacing,
        double dShift,
        long nColor,
        double dWidth,
        _bstr_t DashTypeName,
        enum HatchElementType elementType,
        enum RadialHatchElementCenterLocation ellipseCenterLocation,
        double dEllipseAxisRatio );
    HRESULT GetHatchWithOption (
        long nDisplayIndex,
        double * lpdRotation,
        double * lpdXOrigin,
        double * lpdYOrigin,
        double * lpdSpacing,
        double * lpdShift,
        long * lpnColor,
        double * lpdWidth,
        BSTR * DashTypeName,
        enum HatchElementType * elementType,
        enum RadialHatchElementCenterLocation * ellipseCenterLocation,
        double * dEllipseAxisRatio );
    HRESULT SetHatchWithOption (
        long nDisplayIndex,
        double dRotation,
        double dXOrigin,
        double dYOrigin,
        double dSpacing,
        double dShift,
        long nColor,
        double dWidth,
        _bstr_t DashTypeName,
        enum HatchElementType elementType,
        enum RadialHatchElementCenterLocation ellipseCenterLocation,
        double dEllipseAxisRatio );
    HRESULT SetElementType (
        long nDisplayIndex,
        enum HatchElementType elementType );
    enum HatchElementType GetElementType (
        long nDisplayIndex );
    HRESULT SetRadialElementCenterLocation (
        long nDisplayIndex,
        enum RadialHatchElementCenterLocation ellipseCenterLocation );
    enum RadialHatchElementCenterLocation GetRadialElementCenterLocation (
        long nDisplayIndex );
    HRESULT SetRadialElementAxisRatio (
        long nDisplayIndex,
        double dEllipseAxisRatio );
    double GetRadialElementAxisRatio (
        long nDisplayIndex );
    HRESULT SetSourceColor (
        long nColor );
    HRESULT SetSourceWidth (
        double dWidth );
    void PutSourceRotation (
        double _arg1 );
    double GetSourceRotation ( );
    void PutSourceScale (
        double _arg1 );
    double GetSourceScale ( );
};

struct __declspec(uuid("6457bb95-1ae1-11cf-8ed0-080036062402"))
_IHatchPatternStylesAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr GetApplication ( );
    HatchPatternStylePtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    HatchPatternStylePtr Add (
        _bstr_t Name,
        _bstr_t Parent );
    HRESULT Remove (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * pParent ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * pApp ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct HatchPatternStyle * * pItem ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pEnum ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Parent,
        /*[out,retval]*/ struct HatchPatternStyle * * hHatchPatternStyle ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR Name ) = 0;
};

struct __declspec(uuid("fd6f2d48-6ee2-44a2-8ce3-a84ebab764e6"))
_IDashStyleAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetUnits,put=PutUnits))
    long Units;
    __declspec(property(get=GetDashGapCount))
    long DashGapCount;
    __declspec(property(get=GetCenter,put=PutCenter))
    VARIANT_BOOL Center;
    __declspec(property(get=GetPercentStartEndDash,put=PutPercentStartEndDash))
    double PercentStartEndDash;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    void PutName (
        _bstr_t lpName );
    _bstr_t GetName ( );
    void PutUnits (
        long lpUnits );
    long GetUnits ( );
    long GetDashGapCount ( );
    HRESULT SetDashGap (
        long nCount,
        SAFEARRAY * * dDashGap );
    HRESULT GetDashGap (
        long * pnCount,
        SAFEARRAY * * dDashGap );
    void PutCenter (
        VARIANT_BOOL pvbCenter );
    VARIANT_BOOL GetCenter ( );
    void PutPercentStartEndDash (
        double pdPercentStartEndDash );
    double GetPercentStartEndDash ( );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR lpName ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * lpName ) = 0;
      virtual HRESULT __stdcall put_Units (
        /*[in]*/ long lpUnits ) = 0;
      virtual HRESULT __stdcall get_Units (
        /*[out,retval]*/ long * lpUnits ) = 0;
      virtual HRESULT __stdcall get_DashGapCount (
        /*[out,retval]*/ long * lpnCount ) = 0;
      virtual HRESULT __stdcall raw_SetDashGap (
        /*[in]*/ long nCount,
        /*[in]*/ SAFEARRAY * * dDashGap ) = 0;
      virtual HRESULT __stdcall raw_GetDashGap (
        /*[out]*/ long * pnCount,
        /*[out]*/ SAFEARRAY * * dDashGap ) = 0;
      virtual HRESULT __stdcall put_Center (
        /*[in]*/ VARIANT_BOOL pvbCenter ) = 0;
      virtual HRESULT __stdcall get_Center (
        /*[out,retval]*/ VARIANT_BOOL * pvbCenter ) = 0;
      virtual HRESULT __stdcall put_PercentStartEndDash (
        /*[in]*/ double pdPercentStartEndDash ) = 0;
      virtual HRESULT __stdcall get_PercentStartEndDash (
        /*[out,retval]*/ double * pdPercentStartEndDash ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
};

struct __declspec(uuid("7bb29e6a-123b-4f55-bed8-3b553b82869c"))
DashStyle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetUnits,put=PutUnits))
    long Units;
    __declspec(property(get=GetDashGapCount))
    long DashGapCount;
    __declspec(property(get=GetCenter,put=PutCenter))
    VARIANT_BOOL Center;
    __declspec(property(get=GetPercentStartEndDash,put=PutPercentStartEndDash))
    double PercentStartEndDash;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetName ( );
    void PutUnits (
        long _arg1 );
    long GetUnits ( );
    long GetDashGapCount ( );
    HRESULT SetDashGap (
        long nCount,
        SAFEARRAY * * dDashGap );
    HRESULT GetDashGap (
        long * pnCount,
        SAFEARRAY * * dDashGap );
    void PutCenter (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetCenter ( );
    void PutPercentStartEndDash (
        double _arg1 );
    double GetPercentStartEndDash ( );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
};

struct __declspec(uuid("426fd0e4-1d1c-41ff-af99-50eff336b97b"))
_IDashStylesAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr GetApplication ( );
    DashStylePtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    DashStylePtr Add (
        _bstr_t Name );
    HRESULT Remove (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * pParent ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * pApp ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct DashStyle * * pItem ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pEnum ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct DashStyle * * hDashStyle ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR Name ) = 0;
};

enum SeSkyboxType
{
    seSkyboxTypeSkybox = 0,
    seSkyboxTypeSingleImage = 1,
    seSkyboxTypeSpheremap = 2,
    seSkyboxTypePanoramic = 3,
    seSkyboxTypeUndefined = -1
};

enum SeRenderSpaceType
{
    seRenderSpaceDevice = 0,
    seRenderSpacePaper = 1,
    seRenderSpaceWorld = 2
};

enum SeRenderShapeType
{
    seRenderShapeSquare = 1,
    seRenderShapeRound = 2
};

enum SeRenderFillMode
{
    seRenderFillSolid = 1,
    seRenderFillBorder = 2,
    seRenderFillSolidBorder = 3
};

enum SeRenderShadeMode
{
    seRenderShadeModeFlat = 1,
    seRenderShadeModeSmooth = 2
};

enum SeRenderMaterialGetMode
{
    seGetModeExisting = 0,
    seGetModeCreateOnDemand = 1
};

enum SeRenderMaterialSetMode
{
    seSetModeDetach = 0,
    seSetModeAttach = 1,
    seSetModeUpdate = 2,
    seSetModeAttachAndUpdate = 3
};

struct __declspec(uuid("56466ea0-5e0b-11ce-8137-08003601e504"))
_IFaceStyleAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetStyleName,put=PutStyleName))
    _bstr_t StyleName;
    __declspec(property(get=GetParent,put=PutParent))
    _bstr_t Parent;
    __declspec(property(get=GetType,put=PutType))
    long Type;
    __declspec(property(get=GetFlags,put=PutFlags))
    long Flags;
    __declspec(property(get=GetWireframeColorRed,put=PutWireframeColorRed))
    float WireframeColorRed;
    __declspec(property(get=GetWireframeColorGreen,put=PutWireframeColorGreen))
    float WireframeColorGreen;
    __declspec(property(get=GetWireframeColorBlue,put=PutWireframeColorBlue))
    float WireframeColorBlue;
    __declspec(property(get=GetStipplePattern,put=PutStipplePattern))
    long StipplePattern;
    __declspec(property(get=GetStippleScale,put=PutStippleScale))
    short StippleScale;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    float LineWidth;
    __declspec(property(get=GetWidthSpace,put=PutWidthSpace))
    short WidthSpace;
    __declspec(property(get=GetDiffuseRed,put=PutDiffuseRed))
    float DiffuseRed;
    __declspec(property(get=GetDiffuseGreen,put=PutDiffuseGreen))
    float DiffuseGreen;
    __declspec(property(get=GetDiffuseBlue,put=PutDiffuseBlue))
    float DiffuseBlue;
    __declspec(property(get=GetSpecularRed,put=PutSpecularRed))
    float SpecularRed;
    __declspec(property(get=GetSpecularGreen,put=PutSpecularGreen))
    float SpecularGreen;
    __declspec(property(get=GetSpecularBlue,put=PutSpecularBlue))
    float SpecularBlue;
    __declspec(property(get=GetAmbientRed,put=PutAmbientRed))
    float AmbientRed;
    __declspec(property(get=GetAmbientGreen,put=PutAmbientGreen))
    float AmbientGreen;
    __declspec(property(get=GetAmbientBlue,put=PutAmbientBlue))
    float AmbientBlue;
    __declspec(property(get=GetEmissionRed,put=PutEmissionRed))
    float EmissionRed;
    __declspec(property(get=GetEmissionGreen,put=PutEmissionGreen))
    float EmissionGreen;
    __declspec(property(get=GetEmissionBlue,put=PutEmissionBlue))
    float EmissionBlue;
    __declspec(property(get=GetShininess,put=PutShininess))
    float Shininess;
    __declspec(property(get=GetOpacity,put=PutOpacity))
    float Opacity;
    __declspec(property(get=GetReflectivity,put=PutReflectivity))
    float Reflectivity;
    __declspec(property(get=GetRefraction,put=PutRefraction))
    float Refraction;
    __declspec(property(get=GetCastsShadows,put=PutCastsShadows))
    long CastsShadows;
    __declspec(property(get=GetAcceptsShadows,put=PutAcceptsShadows))
    long AcceptsShadows;
    __declspec(property(get=GetTextureFileName,put=PutTextureFileName))
    _bstr_t TextureFileName;
    __declspec(property(get=GetTextureTransparent,put=PutTextureTransparent))
    long TextureTransparent;
    __declspec(property(get=GetTextureTransparentColorRed,put=PutTextureTransparentColorRed))
    float TextureTransparentColorRed;
    __declspec(property(get=GetTextureTransparentColorGreen,put=PutTextureTransparentColorGreen))
    float TextureTransparentColorGreen;
    __declspec(property(get=GetTextureTransparentColorBlue,put=PutTextureTransparentColorBlue))
    float TextureTransparentColorBlue;
    __declspec(property(get=GetTextureUnits,put=PutTextureUnits))
    int TextureUnits;
    __declspec(property(get=GetTextureScaleX,put=PutTextureScaleX))
    float TextureScaleX;
    __declspec(property(get=GetTextureScaleY,put=PutTextureScaleY))
    float TextureScaleY;
    __declspec(property(get=GetTextureOffsetX,put=PutTextureOffsetX))
    float TextureOffsetX;
    __declspec(property(get=GetTextureOffsetY,put=PutTextureOffsetY))
    float TextureOffsetY;
    __declspec(property(get=GetTextureMirrorX,put=PutTextureMirrorX))
    long TextureMirrorX;
    __declspec(property(get=GetTextureMirrorY,put=PutTextureMirrorY))
    long TextureMirrorY;
    __declspec(property(get=GetTextureRotation,put=PutTextureRotation))
    float TextureRotation;
    __declspec(property(get=GetTextureWeight,put=PutTextureWeight))
    float TextureWeight;
    __declspec(property(get=GetBumpmapFileName,put=PutBumpmapFileName))
    _bstr_t BumpmapFileName;
    __declspec(property(get=GetBumpmapUnits,put=PutBumpmapUnits))
    int BumpmapUnits;
    __declspec(property(get=GetBumpmapScaleX,put=PutBumpmapScaleX))
    float BumpmapScaleX;
    __declspec(property(get=GetBumpmapScaleY,put=PutBumpmapScaleY))
    float BumpmapScaleY;
    __declspec(property(get=GetBumpmapOffsetX,put=PutBumpmapOffsetX))
    float BumpmapOffsetX;
    __declspec(property(get=GetBumpmapOffsetY,put=PutBumpmapOffsetY))
    float BumpmapOffsetY;
    __declspec(property(get=GetBumpmapMirrorX,put=PutBumpmapMirrorX))
    long BumpmapMirrorX;
    __declspec(property(get=GetBumpmapMirrorY,put=PutBumpmapMirrorY))
    long BumpmapMirrorY;
    __declspec(property(get=GetBumpmapRotation,put=PutBumpmapRotation))
    float BumpmapRotation;
    __declspec(property(get=GetBumpmapHeight,put=PutBumpmapHeight))
    float BumpmapHeight;
    __declspec(property(get=GetBumpmapInvert,put=PutBumpmapInvert))
    long BumpmapInvert;
    __declspec(property(get=GetSkyboxType,put=PutSkyboxType))
    enum SeSkyboxType SkyboxType;
    __declspec(property(get=GetSkyboxAzimuth,put=PutSkyboxAzimuth))
    float SkyboxAzimuth;
    __declspec(property(get=GetSkyboxAltitude,put=PutSkyboxAltitude))
    float SkyboxAltitude;
    __declspec(property(get=GetSkyboxRoll,put=PutSkyboxRoll))
    float SkyboxRoll;
    __declspec(property(get=GetSkyboxConeAngle,put=PutSkyboxConeAngle))
    float SkyboxConeAngle;
    __declspec(property(get=GetStyleID))
    long StyleID;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetAutomaticShaderType))
    long AutomaticShaderType;
    __declspec(property(get=GetShaderType,put=PutShaderType))
    long ShaderType;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetRenderModeType,put=PutRenderModeType))
    enum SeRenderModeType RenderModeType;
    __declspec(property(get=GetPointSize,put=PutPointSize))
    float PointSize;
    __declspec(property(get=GetPointSizeSpace,put=PutPointSizeSpace))
    enum SeRenderSpaceType PointSizeSpace;
    __declspec(property(get=GetTextureFileNameEx))
    _bstr_t TextureFileNameEx;
    __declspec(property(get=GetMaterial,put=PutMaterial))
    _bstr_t Material;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetStyleName ( );
    void PutStyleName (
        _bstr_t psStyleName );
    _bstr_t GetParent ( );
    void PutParent (
        _bstr_t psParentName );
    long GetType ( );
    void PutType (
        long plType );
    long GetFlags ( );
    void PutFlags (
        long plFlags );
    float GetWireframeColorRed ( );
    void PutWireframeColorRed (
        float pfWireframeColorRed );
    float GetWireframeColorGreen ( );
    void PutWireframeColorGreen (
        float pfWireframeColorGreen );
    float GetWireframeColorBlue ( );
    void PutWireframeColorBlue (
        float pfWireframeColorBlue );
    long GetStipplePattern ( );
    void PutStipplePattern (
        long plStipplePattern );
    short GetStippleScale ( );
    void PutStippleScale (
        short psStippleScale );
    float GetLineWidth ( );
    void PutLineWidth (
        float pfLineWidth );
    short GetWidthSpace ( );
    void PutWidthSpace (
        short psWidthSpace );
    float GetDiffuseRed ( );
    void PutDiffuseRed (
        float pfDiffuseRed );
    float GetDiffuseGreen ( );
    void PutDiffuseGreen (
        float pfDiffuseGreen );
    float GetDiffuseBlue ( );
    void PutDiffuseBlue (
        float pfDiffuseBlue );
    float GetSpecularRed ( );
    void PutSpecularRed (
        float pfSpecularRed );
    float GetSpecularGreen ( );
    void PutSpecularGreen (
        float pfSpecularGreen );
    float GetSpecularBlue ( );
    void PutSpecularBlue (
        float pfSpecularBlue );
    float GetAmbientRed ( );
    void PutAmbientRed (
        float pfAmbientRed );
    float GetAmbientGreen ( );
    void PutAmbientGreen (
        float pfAmbientGreen );
    float GetAmbientBlue ( );
    void PutAmbientBlue (
        float pfAmbientBlue );
    float GetEmissionRed ( );
    void PutEmissionRed (
        float pfEmissionRed );
    float GetEmissionGreen ( );
    void PutEmissionGreen (
        float pfEmissionGreen );
    float GetEmissionBlue ( );
    void PutEmissionBlue (
        float pfEmissionBlue );
    float GetShininess ( );
    void PutShininess (
        float pfShininess );
    float GetOpacity ( );
    void PutOpacity (
        float pfOpacity );
    float GetReflectivity ( );
    void PutReflectivity (
        float pfReflectivity );
    float GetRefraction ( );
    void PutRefraction (
        float pfRefraction );
    long GetCastsShadows ( );
    void PutCastsShadows (
        long pbCastsShadows );
    long GetAcceptsShadows ( );
    void PutAcceptsShadows (
        long pbAcceptsShadows );
    _bstr_t GetTextureFileName ( );
    void PutTextureFileName (
        _bstr_t psTextureFileName );
    long GetTextureTransparent ( );
    void PutTextureTransparent (
        long pbTextureTransparent );
    float GetTextureTransparentColorRed ( );
    void PutTextureTransparentColorRed (
        float pfRed );
    float GetTextureTransparentColorGreen ( );
    void PutTextureTransparentColorGreen (
        float pfGreen );
    float GetTextureTransparentColorBlue ( );
    void PutTextureTransparentColorBlue (
        float pfBlue );
    int GetTextureUnits ( );
    void PutTextureUnits (
        int pnUnits );
    float GetTextureScaleX ( );
    void PutTextureScaleX (
        float pfScaleX );
    float GetTextureScaleY ( );
    void PutTextureScaleY (
        float pfScaleY );
    float GetTextureOffsetX ( );
    void PutTextureOffsetX (
        float pfOffsetX );
    float GetTextureOffsetY ( );
    void PutTextureOffsetY (
        float pfOffsetY );
    long GetTextureMirrorX ( );
    void PutTextureMirrorX (
        long pbMirrorX );
    long GetTextureMirrorY ( );
    void PutTextureMirrorY (
        long pbMirrorY );
    float GetTextureRotation ( );
    void PutTextureRotation (
        float pfRotation );
    float GetTextureWeight ( );
    void PutTextureWeight (
        float pfWeight );
    _bstr_t GetBumpmapFileName ( );
    void PutBumpmapFileName (
        _bstr_t psBumpmapFileName );
    int GetBumpmapUnits ( );
    void PutBumpmapUnits (
        int pnUnits );
    float GetBumpmapScaleX ( );
    void PutBumpmapScaleX (
        float pfScaleX );
    float GetBumpmapScaleY ( );
    void PutBumpmapScaleY (
        float pfScaleY );
    float GetBumpmapOffsetX ( );
    void PutBumpmapOffsetX (
        float pfOffsetX );
    float GetBumpmapOffsetY ( );
    void PutBumpmapOffsetY (
        float pfOffsetY );
    long GetBumpmapMirrorX ( );
    void PutBumpmapMirrorX (
        long pbMirrorX );
    long GetBumpmapMirrorY ( );
    void PutBumpmapMirrorY (
        long pbMirrorY );
    float GetBumpmapRotation ( );
    void PutBumpmapRotation (
        float pfRotation );
    float GetBumpmapHeight ( );
    void PutBumpmapHeight (
        float pfHeight );
    long GetBumpmapInvert ( );
    void PutBumpmapInvert (
        long pbInvert );
    enum SeSkyboxType GetSkyboxType ( );
    void PutSkyboxType (
        enum SeSkyboxType peType );
    float GetSkyboxAzimuth ( );
    void PutSkyboxAzimuth (
        float pfAzimuth );
    float GetSkyboxAltitude ( );
    void PutSkyboxAltitude (
        float pfAltitude );
    float GetSkyboxRoll ( );
    void PutSkyboxRoll (
        float pfRoll );
    float GetSkyboxConeAngle ( );
    void PutSkyboxConeAngle (
        float pfConeAngle );
    long GetStyleID ( );
    HRESULT BeginPropertyBuffer ( );
    HRESULT FlushPropertyBuffer ( );
    HRESULT HasWireframeProperties (
        int * pbResult );
    HRESULT HasSurfaceProperties (
        int * pbResult );
    HRESULT ClearWireframeProperties ( );
    HRESULT ClearSurfaceProperties ( );
    HRESULT GetWireframeColor (
        float * pfRed,
        float * pfGreen,
        float * pfBlue );
    HRESULT SetWireframeColor (
        float fRed,
        float fGreen,
        float fBlue );
    HRESULT GetDiffuse (
        float * pfRed,
        float * pfGreen,
        float * pfBlue );
    HRESULT SetDiffuse (
        float fRed,
        float fGreen,
        float fBlue );
    HRESULT GetSpecular (
        float * pfRed,
        float * pfGreen,
        float * pfBlue );
    HRESULT SetSpecular (
        float fRed,
        float fGreen,
        float fBlue );
    HRESULT GetAmbient (
        float * pfRed,
        float * pfGreen,
        float * pfBlue );
    HRESULT SetAmbient (
        float fRed,
        float fGreen,
        float fBlue );
    HRESULT GetEmission (
        float * pfRed,
        float * pfGreen,
        float * pfBlue );
    HRESULT SetEmission (
        float fRed,
        float fGreen,
        float fBlue );
    HRESULT Delete ( );
    HRESULT Detach ( );
    HRESULT GetTextureTransparentColor (
        float * pfRed,
        float * pfGreen,
        float * pfBlue );
    HRESULT SetTextureTransparentColor (
        float fRed,
        float fGreen,
        float fBlue );
    HRESULT GetTextureScale (
        float * pfXScale,
        float * pfYScale );
    HRESULT SetTextureScale (
        float fXScale,
        float fYScale );
    HRESULT GetTextureOffset (
        float * pfXOffset,
        float * pfYOffset );
    HRESULT SetTextureOffset (
        float fXOffset,
        float fYOffset );
    HRESULT GetBumpmapScale (
        float * pfXScale,
        float * pfYScale );
    HRESULT SetBumpmapScale (
        float fXScale,
        float fYScale );
    HRESULT GetBumpmapOffset (
        float * pfXOffset,
        float * pfYOffset );
    HRESULT SetBumpmapOffset (
        float fXOffset,
        float fYOffset );
    HRESULT SetSkyboxSkyFile (
        _bstr_t sFilename );
    HRESULT SetSkyboxSideFilename (
        int nSide,
        _bstr_t sFilename );
    _bstr_t GetSkyboxSideFilename (
        int nSide );
    HRESULT SkyboxClear (
        int nSide );
    HRESULT SkyboxClearAll ( );
    HRESULT GetSkyboxOrientation (
        float * pfxDirection,
        float * pfyDirection,
        float * pfzDirection,
        float * pfxUp,
        float * pfyUp,
        float * pfzUp,
        float * pfFieldOfView );
    HRESULT SetSkyboxOrientation (
        float fxDirection,
        float fyDirection,
        float fzDirection,
        float fxUp,
        float fyUp,
        float fzUp,
        float fFieldOfView );
    long GetVersion (
        int eVersion );
    HRESULT SetVersion (
        int eVersion,
        long nVersion );
    HRESULT GetShaderData (
        int * pnId,
        long * peType,
        long * pnHints );
    HRESULT SetShaderData (
        long eType,
        long nHints );
    long GetAutomaticShaderType ( );
    long GetShaderType ( );
    void PutShaderType (
        long peType );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    HRESULT ResetSkyboxOrientation ( );
    HRESULT DeleteSkybox ( );
    enum SeRenderModeType GetRenderModeType ( );
    void PutRenderModeType (
        enum SeRenderModeType peType );
    HRESULT HasPointProperties (
        int * pbResult );
    HRESULT ClearPointProperties ( );
    float GetPointSize ( );
    void PutPointSize (
        float pfSize );
    enum SeRenderSpaceType GetPointSizeSpace ( );
    void PutPointSizeSpace (
        enum SeRenderSpaceType peSpace );
    HRESULT GetPointOptions (
        enum SeRenderShapeType * peShape,
        enum SeRenderFillMode * peFillMode,
        enum SeRenderShadeMode * peShadeMode );
    HRESULT SetPointOptions (
        enum SeRenderShapeType eShape,
        enum SeRenderFillMode eFillMode,
        enum SeRenderShadeMode eShadeMode );
    HRESULT GetPointColor (
        float * pfRed,
        float * pfGreen,
        float * pfBlue );
    HRESULT SetPointColor (
        float fRed,
        float fGreen,
        float fBlue );
    _bstr_t GetTextureFileNameEx ( );
    HRESULT GetMaterial (
        BSTR * psMaterial,
        enum SeRenderMaterialGetMode eMode );
    HRESULT SetMaterial (
        _bstr_t sMaterial,
        enum SeRenderMaterialSetMode eMode );
    _bstr_t GetMaterial ( );
    void PutMaterial (
        _bstr_t psMaterial );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StyleName (
        /*[out,retval]*/ BSTR * psStyleName ) = 0;
      virtual HRESULT __stdcall put_StyleName (
        /*[in]*/ BSTR psStyleName ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ BSTR * psParentName ) = 0;
      virtual HRESULT __stdcall put_Parent (
        /*[in]*/ BSTR psParentName ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * plType ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ long plType ) = 0;
      virtual HRESULT __stdcall get_Flags (
        /*[out,retval]*/ long * plFlags ) = 0;
      virtual HRESULT __stdcall put_Flags (
        /*[in]*/ long plFlags ) = 0;
      virtual HRESULT __stdcall get_WireframeColorRed (
        /*[out,retval]*/ float * pfWireframeColorRed ) = 0;
      virtual HRESULT __stdcall put_WireframeColorRed (
        /*[in]*/ float pfWireframeColorRed ) = 0;
      virtual HRESULT __stdcall get_WireframeColorGreen (
        /*[out,retval]*/ float * pfWireframeColorGreen ) = 0;
      virtual HRESULT __stdcall put_WireframeColorGreen (
        /*[in]*/ float pfWireframeColorGreen ) = 0;
      virtual HRESULT __stdcall get_WireframeColorBlue (
        /*[out,retval]*/ float * pfWireframeColorBlue ) = 0;
      virtual HRESULT __stdcall put_WireframeColorBlue (
        /*[in]*/ float pfWireframeColorBlue ) = 0;
      virtual HRESULT __stdcall get_StipplePattern (
        /*[out,retval]*/ long * plStipplePattern ) = 0;
      virtual HRESULT __stdcall put_StipplePattern (
        /*[in]*/ long plStipplePattern ) = 0;
      virtual HRESULT __stdcall get_StippleScale (
        /*[out,retval]*/ short * psStippleScale ) = 0;
      virtual HRESULT __stdcall put_StippleScale (
        /*[in]*/ short psStippleScale ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ float * pfLineWidth ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ float pfLineWidth ) = 0;
      virtual HRESULT __stdcall get_WidthSpace (
        /*[out,retval]*/ short * psWidthSpace ) = 0;
      virtual HRESULT __stdcall put_WidthSpace (
        /*[in]*/ short psWidthSpace ) = 0;
      virtual HRESULT __stdcall get_DiffuseRed (
        /*[out,retval]*/ float * pfDiffuseRed ) = 0;
      virtual HRESULT __stdcall put_DiffuseRed (
        /*[in]*/ float pfDiffuseRed ) = 0;
      virtual HRESULT __stdcall get_DiffuseGreen (
        /*[out,retval]*/ float * pfDiffuseGreen ) = 0;
      virtual HRESULT __stdcall put_DiffuseGreen (
        /*[in]*/ float pfDiffuseGreen ) = 0;
      virtual HRESULT __stdcall get_DiffuseBlue (
        /*[out,retval]*/ float * pfDiffuseBlue ) = 0;
      virtual HRESULT __stdcall put_DiffuseBlue (
        /*[in]*/ float pfDiffuseBlue ) = 0;
      virtual HRESULT __stdcall get_SpecularRed (
        /*[out,retval]*/ float * pfSpecularRed ) = 0;
      virtual HRESULT __stdcall put_SpecularRed (
        /*[in]*/ float pfSpecularRed ) = 0;
      virtual HRESULT __stdcall get_SpecularGreen (
        /*[out,retval]*/ float * pfSpecularGreen ) = 0;
      virtual HRESULT __stdcall put_SpecularGreen (
        /*[in]*/ float pfSpecularGreen ) = 0;
      virtual HRESULT __stdcall get_SpecularBlue (
        /*[out,retval]*/ float * pfSpecularBlue ) = 0;
      virtual HRESULT __stdcall put_SpecularBlue (
        /*[in]*/ float pfSpecularBlue ) = 0;
      virtual HRESULT __stdcall get_AmbientRed (
        /*[out,retval]*/ float * pfAmbientRed ) = 0;
      virtual HRESULT __stdcall put_AmbientRed (
        /*[in]*/ float pfAmbientRed ) = 0;
      virtual HRESULT __stdcall get_AmbientGreen (
        /*[out,retval]*/ float * pfAmbientGreen ) = 0;
      virtual HRESULT __stdcall put_AmbientGreen (
        /*[in]*/ float pfAmbientGreen ) = 0;
      virtual HRESULT __stdcall get_AmbientBlue (
        /*[out,retval]*/ float * pfAmbientBlue ) = 0;
      virtual HRESULT __stdcall put_AmbientBlue (
        /*[in]*/ float pfAmbientBlue ) = 0;
      virtual HRESULT __stdcall get_EmissionRed (
        /*[out,retval]*/ float * pfEmissionRed ) = 0;
      virtual HRESULT __stdcall put_EmissionRed (
        /*[in]*/ float pfEmissionRed ) = 0;
      virtual HRESULT __stdcall get_EmissionGreen (
        /*[out,retval]*/ float * pfEmissionGreen ) = 0;
      virtual HRESULT __stdcall put_EmissionGreen (
        /*[in]*/ float pfEmissionGreen ) = 0;
      virtual HRESULT __stdcall get_EmissionBlue (
        /*[out,retval]*/ float * pfEmissionBlue ) = 0;
      virtual HRESULT __stdcall put_EmissionBlue (
        /*[in]*/ float pfEmissionBlue ) = 0;
      virtual HRESULT __stdcall get_Shininess (
        /*[out,retval]*/ float * pfShininess ) = 0;
      virtual HRESULT __stdcall put_Shininess (
        /*[in]*/ float pfShininess ) = 0;
      virtual HRESULT __stdcall get_Opacity (
        /*[out,retval]*/ float * pfOpacity ) = 0;
      virtual HRESULT __stdcall put_Opacity (
        /*[in]*/ float pfOpacity ) = 0;
      virtual HRESULT __stdcall get_Reflectivity (
        /*[out,retval]*/ float * pfReflectivity ) = 0;
      virtual HRESULT __stdcall put_Reflectivity (
        /*[in]*/ float pfReflectivity ) = 0;
      virtual HRESULT __stdcall get_Refraction (
        /*[out,retval]*/ float * pfRefraction ) = 0;
      virtual HRESULT __stdcall put_Refraction (
        /*[in]*/ float pfRefraction ) = 0;
      virtual HRESULT __stdcall get_CastsShadows (
        /*[out,retval]*/ long * pbCastsShadows ) = 0;
      virtual HRESULT __stdcall put_CastsShadows (
        /*[in]*/ long pbCastsShadows ) = 0;
      virtual HRESULT __stdcall get_AcceptsShadows (
        /*[out,retval]*/ long * pbAcceptsShadows ) = 0;
      virtual HRESULT __stdcall put_AcceptsShadows (
        /*[in]*/ long pbAcceptsShadows ) = 0;
      virtual HRESULT __stdcall get_TextureFileName (
        /*[out,retval]*/ BSTR * psTextureFileName ) = 0;
      virtual HRESULT __stdcall put_TextureFileName (
        /*[in]*/ BSTR psTextureFileName ) = 0;
      virtual HRESULT __stdcall get_TextureTransparent (
        /*[out,retval]*/ long * pbTextureTransparent ) = 0;
      virtual HRESULT __stdcall put_TextureTransparent (
        /*[in]*/ long pbTextureTransparent ) = 0;
      virtual HRESULT __stdcall get_TextureTransparentColorRed (
        /*[out,retval]*/ float * pfRed ) = 0;
      virtual HRESULT __stdcall put_TextureTransparentColorRed (
        /*[in]*/ float pfRed ) = 0;
      virtual HRESULT __stdcall get_TextureTransparentColorGreen (
        /*[out,retval]*/ float * pfGreen ) = 0;
      virtual HRESULT __stdcall put_TextureTransparentColorGreen (
        /*[in]*/ float pfGreen ) = 0;
      virtual HRESULT __stdcall get_TextureTransparentColorBlue (
        /*[out,retval]*/ float * pfBlue ) = 0;
      virtual HRESULT __stdcall put_TextureTransparentColorBlue (
        /*[in]*/ float pfBlue ) = 0;
      virtual HRESULT __stdcall get_TextureUnits (
        /*[out,retval]*/ int * pnUnits ) = 0;
      virtual HRESULT __stdcall put_TextureUnits (
        /*[in]*/ int pnUnits ) = 0;
      virtual HRESULT __stdcall get_TextureScaleX (
        /*[out,retval]*/ float * pfScaleX ) = 0;
      virtual HRESULT __stdcall put_TextureScaleX (
        /*[in]*/ float pfScaleX ) = 0;
      virtual HRESULT __stdcall get_TextureScaleY (
        /*[out,retval]*/ float * pfScaleY ) = 0;
      virtual HRESULT __stdcall put_TextureScaleY (
        /*[in]*/ float pfScaleY ) = 0;
      virtual HRESULT __stdcall get_TextureOffsetX (
        /*[out,retval]*/ float * pfOffsetX ) = 0;
      virtual HRESULT __stdcall put_TextureOffsetX (
        /*[in]*/ float pfOffsetX ) = 0;
      virtual HRESULT __stdcall get_TextureOffsetY (
        /*[out,retval]*/ float * pfOffsetY ) = 0;
      virtual HRESULT __stdcall put_TextureOffsetY (
        /*[in]*/ float pfOffsetY ) = 0;
      virtual HRESULT __stdcall get_TextureMirrorX (
        /*[out,retval]*/ long * pbMirrorX ) = 0;
      virtual HRESULT __stdcall put_TextureMirrorX (
        /*[in]*/ long pbMirrorX ) = 0;
      virtual HRESULT __stdcall get_TextureMirrorY (
        /*[out,retval]*/ long * pbMirrorY ) = 0;
      virtual HRESULT __stdcall put_TextureMirrorY (
        /*[in]*/ long pbMirrorY ) = 0;
      virtual HRESULT __stdcall get_TextureRotation (
        /*[out,retval]*/ float * pfRotation ) = 0;
      virtual HRESULT __stdcall put_TextureRotation (
        /*[in]*/ float pfRotation ) = 0;
      virtual HRESULT __stdcall get_TextureWeight (
        /*[out,retval]*/ float * pfWeight ) = 0;
      virtual HRESULT __stdcall put_TextureWeight (
        /*[in]*/ float pfWeight ) = 0;
      virtual HRESULT __stdcall get_BumpmapFileName (
        /*[out,retval]*/ BSTR * psBumpmapFileName ) = 0;
      virtual HRESULT __stdcall put_BumpmapFileName (
        /*[in]*/ BSTR psBumpmapFileName ) = 0;
      virtual HRESULT __stdcall get_BumpmapUnits (
        /*[out,retval]*/ int * pnUnits ) = 0;
      virtual HRESULT __stdcall put_BumpmapUnits (
        /*[in]*/ int pnUnits ) = 0;
      virtual HRESULT __stdcall get_BumpmapScaleX (
        /*[out,retval]*/ float * pfScaleX ) = 0;
      virtual HRESULT __stdcall put_BumpmapScaleX (
        /*[in]*/ float pfScaleX ) = 0;
      virtual HRESULT __stdcall get_BumpmapScaleY (
        /*[out,retval]*/ float * pfScaleY ) = 0;
      virtual HRESULT __stdcall put_BumpmapScaleY (
        /*[in]*/ float pfScaleY ) = 0;
      virtual HRESULT __stdcall get_BumpmapOffsetX (
        /*[out,retval]*/ float * pfOffsetX ) = 0;
      virtual HRESULT __stdcall put_BumpmapOffsetX (
        /*[in]*/ float pfOffsetX ) = 0;
      virtual HRESULT __stdcall get_BumpmapOffsetY (
        /*[out,retval]*/ float * pfOffsetY ) = 0;
      virtual HRESULT __stdcall put_BumpmapOffsetY (
        /*[in]*/ float pfOffsetY ) = 0;
      virtual HRESULT __stdcall get_BumpmapMirrorX (
        /*[out,retval]*/ long * pbMirrorX ) = 0;
      virtual HRESULT __stdcall put_BumpmapMirrorX (
        /*[in]*/ long pbMirrorX ) = 0;
      virtual HRESULT __stdcall get_BumpmapMirrorY (
        /*[out,retval]*/ long * pbMirrorY ) = 0;
      virtual HRESULT __stdcall put_BumpmapMirrorY (
        /*[in]*/ long pbMirrorY ) = 0;
      virtual HRESULT __stdcall get_BumpmapRotation (
        /*[out,retval]*/ float * pfRotation ) = 0;
      virtual HRESULT __stdcall put_BumpmapRotation (
        /*[in]*/ float pfRotation ) = 0;
      virtual HRESULT __stdcall get_BumpmapHeight (
        /*[out,retval]*/ float * pfHeight ) = 0;
      virtual HRESULT __stdcall put_BumpmapHeight (
        /*[in]*/ float pfHeight ) = 0;
      virtual HRESULT __stdcall get_BumpmapInvert (
        /*[out,retval]*/ long * pbInvert ) = 0;
      virtual HRESULT __stdcall put_BumpmapInvert (
        /*[in]*/ long pbInvert ) = 0;
      virtual HRESULT __stdcall get_SkyboxType (
        /*[out,retval]*/ enum SeSkyboxType * peType ) = 0;
      virtual HRESULT __stdcall put_SkyboxType (
        /*[in]*/ enum SeSkyboxType peType ) = 0;
      virtual HRESULT __stdcall get_SkyboxAzimuth (
        /*[out,retval]*/ float * pfAzimuth ) = 0;
      virtual HRESULT __stdcall put_SkyboxAzimuth (
        /*[in]*/ float pfAzimuth ) = 0;
      virtual HRESULT __stdcall get_SkyboxAltitude (
        /*[out,retval]*/ float * pfAltitude ) = 0;
      virtual HRESULT __stdcall put_SkyboxAltitude (
        /*[in]*/ float pfAltitude ) = 0;
      virtual HRESULT __stdcall get_SkyboxRoll (
        /*[out,retval]*/ float * pfRoll ) = 0;
      virtual HRESULT __stdcall put_SkyboxRoll (
        /*[in]*/ float pfRoll ) = 0;
      virtual HRESULT __stdcall get_SkyboxConeAngle (
        /*[out,retval]*/ float * pfConeAngle ) = 0;
      virtual HRESULT __stdcall put_SkyboxConeAngle (
        /*[in]*/ float pfConeAngle ) = 0;
      virtual HRESULT __stdcall get_StyleID (
        /*[out,retval]*/ long * plStyleID ) = 0;
      virtual HRESULT __stdcall raw_BeginPropertyBuffer ( ) = 0;
      virtual HRESULT __stdcall raw_FlushPropertyBuffer ( ) = 0;
      virtual HRESULT __stdcall raw_HasWireframeProperties (
        /*[out]*/ int * pbResult ) = 0;
      virtual HRESULT __stdcall raw_HasSurfaceProperties (
        /*[out]*/ int * pbResult ) = 0;
      virtual HRESULT __stdcall raw_ClearWireframeProperties ( ) = 0;
      virtual HRESULT __stdcall raw_ClearSurfaceProperties ( ) = 0;
      virtual HRESULT __stdcall raw_GetWireframeColor (
        /*[out]*/ float * pfRed,
        /*[out]*/ float * pfGreen,
        /*[out]*/ float * pfBlue ) = 0;
      virtual HRESULT __stdcall raw_SetWireframeColor (
        /*[in]*/ float fRed,
        /*[in]*/ float fGreen,
        /*[in]*/ float fBlue ) = 0;
      virtual HRESULT __stdcall raw_GetDiffuse (
        /*[out]*/ float * pfRed,
        /*[out]*/ float * pfGreen,
        /*[out]*/ float * pfBlue ) = 0;
      virtual HRESULT __stdcall raw_SetDiffuse (
        /*[in]*/ float fRed,
        /*[in]*/ float fGreen,
        /*[in]*/ float fBlue ) = 0;
      virtual HRESULT __stdcall raw_GetSpecular (
        /*[out]*/ float * pfRed,
        /*[out]*/ float * pfGreen,
        /*[out]*/ float * pfBlue ) = 0;
      virtual HRESULT __stdcall raw_SetSpecular (
        /*[in]*/ float fRed,
        /*[in]*/ float fGreen,
        /*[in]*/ float fBlue ) = 0;
      virtual HRESULT __stdcall raw_GetAmbient (
        /*[out]*/ float * pfRed,
        /*[out]*/ float * pfGreen,
        /*[out]*/ float * pfBlue ) = 0;
      virtual HRESULT __stdcall raw_SetAmbient (
        /*[in]*/ float fRed,
        /*[in]*/ float fGreen,
        /*[in]*/ float fBlue ) = 0;
      virtual HRESULT __stdcall raw_GetEmission (
        /*[out]*/ float * pfRed,
        /*[out]*/ float * pfGreen,
        /*[out]*/ float * pfBlue ) = 0;
      virtual HRESULT __stdcall raw_SetEmission (
        /*[in]*/ float fRed,
        /*[in]*/ float fGreen,
        /*[in]*/ float fBlue ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Detach ( ) = 0;
      virtual HRESULT __stdcall raw_GetTextureTransparentColor (
        /*[out]*/ float * pfRed,
        /*[out]*/ float * pfGreen,
        /*[out]*/ float * pfBlue ) = 0;
      virtual HRESULT __stdcall raw_SetTextureTransparentColor (
        /*[in]*/ float fRed,
        /*[in]*/ float fGreen,
        /*[in]*/ float fBlue ) = 0;
      virtual HRESULT __stdcall raw_GetTextureScale (
        /*[out]*/ float * pfXScale,
        /*[out]*/ float * pfYScale ) = 0;
      virtual HRESULT __stdcall raw_SetTextureScale (
        /*[in]*/ float fXScale,
        /*[in]*/ float fYScale ) = 0;
      virtual HRESULT __stdcall raw_GetTextureOffset (
        /*[out]*/ float * pfXOffset,
        /*[out]*/ float * pfYOffset ) = 0;
      virtual HRESULT __stdcall raw_SetTextureOffset (
        /*[in]*/ float fXOffset,
        /*[in]*/ float fYOffset ) = 0;
      virtual HRESULT __stdcall raw_GetBumpmapScale (
        /*[out]*/ float * pfXScale,
        /*[out]*/ float * pfYScale ) = 0;
      virtual HRESULT __stdcall raw_SetBumpmapScale (
        /*[in]*/ float fXScale,
        /*[in]*/ float fYScale ) = 0;
      virtual HRESULT __stdcall raw_GetBumpmapOffset (
        /*[out]*/ float * pfXOffset,
        /*[out]*/ float * pfYOffset ) = 0;
      virtual HRESULT __stdcall raw_SetBumpmapOffset (
        /*[in]*/ float fXOffset,
        /*[in]*/ float fYOffset ) = 0;
      virtual HRESULT __stdcall raw_SetSkyboxSkyFile (
        /*[in]*/ BSTR sFilename ) = 0;
      virtual HRESULT __stdcall raw_SetSkyboxSideFilename (
        /*[in]*/ int nSide,
        /*[in]*/ BSTR sFilename ) = 0;
      virtual HRESULT __stdcall raw_GetSkyboxSideFilename (
        /*[in]*/ int nSide,
        /*[out,retval]*/ BSTR * psFilename ) = 0;
      virtual HRESULT __stdcall raw_SkyboxClear (
        /*[in]*/ int nSide ) = 0;
      virtual HRESULT __stdcall raw_SkyboxClearAll ( ) = 0;
      virtual HRESULT __stdcall raw_GetSkyboxOrientation (
        /*[out]*/ float * pfxDirection,
        /*[out]*/ float * pfyDirection,
        /*[out]*/ float * pfzDirection,
        /*[out]*/ float * pfxUp,
        /*[out]*/ float * pfyUp,
        /*[out]*/ float * pfzUp,
        /*[out]*/ float * pfFieldOfView ) = 0;
      virtual HRESULT __stdcall raw_SetSkyboxOrientation (
        /*[in]*/ float fxDirection,
        /*[in]*/ float fyDirection,
        /*[in]*/ float fzDirection,
        /*[in]*/ float fxUp,
        /*[in]*/ float fyUp,
        /*[in]*/ float fzUp,
        /*[in]*/ float fFieldOfView ) = 0;
      virtual HRESULT __stdcall raw_GetVersion (
        /*[in]*/ int eVersion,
        /*[out,retval]*/ long * pnVersion ) = 0;
      virtual HRESULT __stdcall raw_SetVersion (
        /*[in]*/ int eVersion,
        /*[in]*/ long nVersion ) = 0;
      virtual HRESULT __stdcall raw_GetShaderData (
        /*[out]*/ int * pnId,
        /*[out]*/ long * peType,
        /*[out]*/ long * pnHints ) = 0;
      virtual HRESULT __stdcall raw_SetShaderData (
        /*[in]*/ long eType,
        /*[in]*/ long nHints ) = 0;
      virtual HRESULT __stdcall get_AutomaticShaderType (
        /*[out,retval]*/ long * peType ) = 0;
      virtual HRESULT __stdcall get_ShaderType (
        /*[out,retval]*/ long * peType ) = 0;
      virtual HRESULT __stdcall put_ShaderType (
        /*[in]*/ long peType ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
      virtual HRESULT __stdcall raw_ResetSkyboxOrientation ( ) = 0;
      virtual HRESULT __stdcall raw_DeleteSkybox ( ) = 0;
      virtual HRESULT __stdcall get_RenderModeType (
        /*[out,retval]*/ enum SeRenderModeType * peType ) = 0;
      virtual HRESULT __stdcall put_RenderModeType (
        /*[in]*/ enum SeRenderModeType peType ) = 0;
      virtual HRESULT __stdcall raw_HasPointProperties (
        /*[out]*/ int * pbResult ) = 0;
      virtual HRESULT __stdcall raw_ClearPointProperties ( ) = 0;
      virtual HRESULT __stdcall get_PointSize (
        /*[out,retval]*/ float * pfSize ) = 0;
      virtual HRESULT __stdcall put_PointSize (
        /*[in]*/ float pfSize ) = 0;
      virtual HRESULT __stdcall get_PointSizeSpace (
        /*[out,retval]*/ enum SeRenderSpaceType * peSpace ) = 0;
      virtual HRESULT __stdcall put_PointSizeSpace (
        /*[in]*/ enum SeRenderSpaceType peSpace ) = 0;
      virtual HRESULT __stdcall raw_GetPointOptions (
        /*[out]*/ enum SeRenderShapeType * peShape,
        /*[out]*/ enum SeRenderFillMode * peFillMode,
        /*[out]*/ enum SeRenderShadeMode * peShadeMode ) = 0;
      virtual HRESULT __stdcall raw_SetPointOptions (
        /*[in]*/ enum SeRenderShapeType eShape,
        /*[in]*/ enum SeRenderFillMode eFillMode,
        /*[in]*/ enum SeRenderShadeMode eShadeMode ) = 0;
      virtual HRESULT __stdcall raw_GetPointColor (
        /*[out]*/ float * pfRed,
        /*[out]*/ float * pfGreen,
        /*[out]*/ float * pfBlue ) = 0;
      virtual HRESULT __stdcall raw_SetPointColor (
        /*[in]*/ float fRed,
        /*[in]*/ float fGreen,
        /*[in]*/ float fBlue ) = 0;
      virtual HRESULT __stdcall get_TextureFileNameEx (
        /*[out,retval]*/ BSTR * psTextureFileName ) = 0;
      virtual HRESULT __stdcall raw_GetMaterial (
        /*[out]*/ BSTR * psMaterial,
        /*[in]*/ enum SeRenderMaterialGetMode eMode ) = 0;
      virtual HRESULT __stdcall raw_SetMaterial (
        /*[in]*/ BSTR sMaterial,
        /*[in]*/ enum SeRenderMaterialSetMode eMode ) = 0;
      virtual HRESULT __stdcall get_Material (
        /*[out,retval]*/ BSTR * psMaterial ) = 0;
      virtual HRESULT __stdcall put_Material (
        /*[in]*/ BSTR psMaterial ) = 0;
};

struct __declspec(uuid("7f5ef5c0-a66f-11ce-815f-08003601e504"))
FaceStyle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStyleName,put=PutStyleName))
    _bstr_t StyleName;
    __declspec(property(get=GetParent,put=PutParent))
    _bstr_t Parent;
    __declspec(property(get=GetType,put=PutType))
    long Type;
    __declspec(property(get=GetFlags,put=PutFlags))
    long Flags;
    __declspec(property(get=GetWireframeColorRed,put=PutWireframeColorRed))
    float WireframeColorRed;
    __declspec(property(get=GetWireframeColorGreen,put=PutWireframeColorGreen))
    float WireframeColorGreen;
    __declspec(property(get=GetWireframeColorBlue,put=PutWireframeColorBlue))
    float WireframeColorBlue;
    __declspec(property(get=GetStipplePattern,put=PutStipplePattern))
    long StipplePattern;
    __declspec(property(get=GetStippleScale,put=PutStippleScale))
    short StippleScale;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    float LineWidth;
    __declspec(property(get=GetWidthSpace,put=PutWidthSpace))
    short WidthSpace;
    __declspec(property(get=GetDiffuseRed,put=PutDiffuseRed))
    float DiffuseRed;
    __declspec(property(get=GetDiffuseGreen,put=PutDiffuseGreen))
    float DiffuseGreen;
    __declspec(property(get=GetDiffuseBlue,put=PutDiffuseBlue))
    float DiffuseBlue;
    __declspec(property(get=GetSpecularRed,put=PutSpecularRed))
    float SpecularRed;
    __declspec(property(get=GetSpecularGreen,put=PutSpecularGreen))
    float SpecularGreen;
    __declspec(property(get=GetSpecularBlue,put=PutSpecularBlue))
    float SpecularBlue;
    __declspec(property(get=GetAmbientRed,put=PutAmbientRed))
    float AmbientRed;
    __declspec(property(get=GetAmbientGreen,put=PutAmbientGreen))
    float AmbientGreen;
    __declspec(property(get=GetAmbientBlue,put=PutAmbientBlue))
    float AmbientBlue;
    __declspec(property(get=GetEmissionRed,put=PutEmissionRed))
    float EmissionRed;
    __declspec(property(get=GetEmissionGreen,put=PutEmissionGreen))
    float EmissionGreen;
    __declspec(property(get=GetEmissionBlue,put=PutEmissionBlue))
    float EmissionBlue;
    __declspec(property(get=GetShininess,put=PutShininess))
    float Shininess;
    __declspec(property(get=GetOpacity,put=PutOpacity))
    float Opacity;
    __declspec(property(get=GetReflectivity,put=PutReflectivity))
    float Reflectivity;
    __declspec(property(get=GetRefraction,put=PutRefraction))
    float Refraction;
    __declspec(property(get=GetCastsShadows,put=PutCastsShadows))
    long CastsShadows;
    __declspec(property(get=GetAcceptsShadows,put=PutAcceptsShadows))
    long AcceptsShadows;
    __declspec(property(get=GetTextureFileName,put=PutTextureFileName))
    _bstr_t TextureFileName;
    __declspec(property(get=GetTextureTransparent,put=PutTextureTransparent))
    long TextureTransparent;
    __declspec(property(get=GetTextureTransparentColorRed,put=PutTextureTransparentColorRed))
    float TextureTransparentColorRed;
    __declspec(property(get=GetTextureTransparentColorGreen,put=PutTextureTransparentColorGreen))
    float TextureTransparentColorGreen;
    __declspec(property(get=GetTextureTransparentColorBlue,put=PutTextureTransparentColorBlue))
    float TextureTransparentColorBlue;
    __declspec(property(get=GetTextureUnits,put=PutTextureUnits))
    int TextureUnits;
    __declspec(property(get=GetTextureScaleX,put=PutTextureScaleX))
    float TextureScaleX;
    __declspec(property(get=GetTextureScaleY,put=PutTextureScaleY))
    float TextureScaleY;
    __declspec(property(get=GetTextureOffsetX,put=PutTextureOffsetX))
    float TextureOffsetX;
    __declspec(property(get=GetTextureOffsetY,put=PutTextureOffsetY))
    float TextureOffsetY;
    __declspec(property(get=GetTextureMirrorX,put=PutTextureMirrorX))
    long TextureMirrorX;
    __declspec(property(get=GetTextureMirrorY,put=PutTextureMirrorY))
    long TextureMirrorY;
    __declspec(property(get=GetTextureRotation,put=PutTextureRotation))
    float TextureRotation;
    __declspec(property(get=GetTextureWeight,put=PutTextureWeight))
    float TextureWeight;
    __declspec(property(get=GetBumpmapFileName,put=PutBumpmapFileName))
    _bstr_t BumpmapFileName;
    __declspec(property(get=GetBumpmapUnits,put=PutBumpmapUnits))
    int BumpmapUnits;
    __declspec(property(get=GetBumpmapScaleX,put=PutBumpmapScaleX))
    float BumpmapScaleX;
    __declspec(property(get=GetBumpmapScaleY,put=PutBumpmapScaleY))
    float BumpmapScaleY;
    __declspec(property(get=GetBumpmapOffsetX,put=PutBumpmapOffsetX))
    float BumpmapOffsetX;
    __declspec(property(get=GetBumpmapOffsetY,put=PutBumpmapOffsetY))
    float BumpmapOffsetY;
    __declspec(property(get=GetBumpmapMirrorX,put=PutBumpmapMirrorX))
    long BumpmapMirrorX;
    __declspec(property(get=GetBumpmapMirrorY,put=PutBumpmapMirrorY))
    long BumpmapMirrorY;
    __declspec(property(get=GetBumpmapRotation,put=PutBumpmapRotation))
    float BumpmapRotation;
    __declspec(property(get=GetBumpmapHeight,put=PutBumpmapHeight))
    float BumpmapHeight;
    __declspec(property(get=GetBumpmapInvert,put=PutBumpmapInvert))
    long BumpmapInvert;
    __declspec(property(get=GetSkyboxType,put=PutSkyboxType))
    enum SeSkyboxType SkyboxType;
    __declspec(property(get=GetSkyboxAzimuth,put=PutSkyboxAzimuth))
    float SkyboxAzimuth;
    __declspec(property(get=GetSkyboxAltitude,put=PutSkyboxAltitude))
    float SkyboxAltitude;
    __declspec(property(get=GetSkyboxRoll,put=PutSkyboxRoll))
    float SkyboxRoll;
    __declspec(property(get=GetSkyboxConeAngle,put=PutSkyboxConeAngle))
    float SkyboxConeAngle;
    __declspec(property(get=GetStyleID))
    long StyleID;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetAutomaticShaderType))
    long AutomaticShaderType;
    __declspec(property(get=GetShaderType,put=PutShaderType))
    long ShaderType;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetRenderModeType,put=PutRenderModeType))
    enum SeRenderModeType RenderModeType;
    __declspec(property(get=GetPointSize,put=PutPointSize))
    float PointSize;
    __declspec(property(get=GetPointSizeSpace,put=PutPointSizeSpace))
    enum SeRenderSpaceType PointSizeSpace;
    __declspec(property(get=GetTextureFileNameEx))
    _bstr_t TextureFileNameEx;
    __declspec(property(get=GetMaterial,put=PutMaterial))
    _bstr_t Material;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _bstr_t GetStyleName ( );
    void PutStyleName (
        _bstr_t _arg1 );
    _bstr_t GetParent ( );
    void PutParent (
        _bstr_t _arg1 );
    long GetType ( );
    void PutType (
        long _arg1 );
    long GetFlags ( );
    void PutFlags (
        long _arg1 );
    float GetWireframeColorRed ( );
    void PutWireframeColorRed (
        float _arg1 );
    float GetWireframeColorGreen ( );
    void PutWireframeColorGreen (
        float _arg1 );
    float GetWireframeColorBlue ( );
    void PutWireframeColorBlue (
        float _arg1 );
    long GetStipplePattern ( );
    void PutStipplePattern (
        long _arg1 );
    short GetStippleScale ( );
    void PutStippleScale (
        short _arg1 );
    float GetLineWidth ( );
    void PutLineWidth (
        float _arg1 );
    short GetWidthSpace ( );
    void PutWidthSpace (
        short _arg1 );
    float GetDiffuseRed ( );
    void PutDiffuseRed (
        float _arg1 );
    float GetDiffuseGreen ( );
    void PutDiffuseGreen (
        float _arg1 );
    float GetDiffuseBlue ( );
    void PutDiffuseBlue (
        float _arg1 );
    float GetSpecularRed ( );
    void PutSpecularRed (
        float _arg1 );
    float GetSpecularGreen ( );
    void PutSpecularGreen (
        float _arg1 );
    float GetSpecularBlue ( );
    void PutSpecularBlue (
        float _arg1 );
    float GetAmbientRed ( );
    void PutAmbientRed (
        float _arg1 );
    float GetAmbientGreen ( );
    void PutAmbientGreen (
        float _arg1 );
    float GetAmbientBlue ( );
    void PutAmbientBlue (
        float _arg1 );
    float GetEmissionRed ( );
    void PutEmissionRed (
        float _arg1 );
    float GetEmissionGreen ( );
    void PutEmissionGreen (
        float _arg1 );
    float GetEmissionBlue ( );
    void PutEmissionBlue (
        float _arg1 );
    float GetShininess ( );
    void PutShininess (
        float _arg1 );
    float GetOpacity ( );
    void PutOpacity (
        float _arg1 );
    float GetReflectivity ( );
    void PutReflectivity (
        float _arg1 );
    float GetRefraction ( );
    void PutRefraction (
        float _arg1 );
    long GetCastsShadows ( );
    void PutCastsShadows (
        long _arg1 );
    long GetAcceptsShadows ( );
    void PutAcceptsShadows (
        long _arg1 );
    _bstr_t GetTextureFileName ( );
    void PutTextureFileName (
        _bstr_t _arg1 );
    long GetTextureTransparent ( );
    void PutTextureTransparent (
        long _arg1 );
    float GetTextureTransparentColorRed ( );
    void PutTextureTransparentColorRed (
        float _arg1 );
    float GetTextureTransparentColorGreen ( );
    void PutTextureTransparentColorGreen (
        float _arg1 );
    float GetTextureTransparentColorBlue ( );
    void PutTextureTransparentColorBlue (
        float _arg1 );
    int GetTextureUnits ( );
    void PutTextureUnits (
        int _arg1 );
    float GetTextureScaleX ( );
    void PutTextureScaleX (
        float _arg1 );
    float GetTextureScaleY ( );
    void PutTextureScaleY (
        float _arg1 );
    float GetTextureOffsetX ( );
    void PutTextureOffsetX (
        float _arg1 );
    float GetTextureOffsetY ( );
    void PutTextureOffsetY (
        float _arg1 );
    long GetTextureMirrorX ( );
    void PutTextureMirrorX (
        long _arg1 );
    long GetTextureMirrorY ( );
    void PutTextureMirrorY (
        long _arg1 );
    float GetTextureRotation ( );
    void PutTextureRotation (
        float _arg1 );
    float GetTextureWeight ( );
    void PutTextureWeight (
        float _arg1 );
    _bstr_t GetBumpmapFileName ( );
    void PutBumpmapFileName (
        _bstr_t _arg1 );
    int GetBumpmapUnits ( );
    void PutBumpmapUnits (
        int _arg1 );
    float GetBumpmapScaleX ( );
    void PutBumpmapScaleX (
        float _arg1 );
    float GetBumpmapScaleY ( );
    void PutBumpmapScaleY (
        float _arg1 );
    float GetBumpmapOffsetX ( );
    void PutBumpmapOffsetX (
        float _arg1 );
    float GetBumpmapOffsetY ( );
    void PutBumpmapOffsetY (
        float _arg1 );
    long GetBumpmapMirrorX ( );
    void PutBumpmapMirrorX (
        long _arg1 );
    long GetBumpmapMirrorY ( );
    void PutBumpmapMirrorY (
        long _arg1 );
    float GetBumpmapRotation ( );
    void PutBumpmapRotation (
        float _arg1 );
    float GetBumpmapHeight ( );
    void PutBumpmapHeight (
        float _arg1 );
    long GetBumpmapInvert ( );
    void PutBumpmapInvert (
        long _arg1 );
    enum SeSkyboxType GetSkyboxType ( );
    void PutSkyboxType (
        enum SeSkyboxType _arg1 );
    float GetSkyboxAzimuth ( );
    void PutSkyboxAzimuth (
        float _arg1 );
    float GetSkyboxAltitude ( );
    void PutSkyboxAltitude (
        float _arg1 );
    float GetSkyboxRoll ( );
    void PutSkyboxRoll (
        float _arg1 );
    float GetSkyboxConeAngle ( );
    void PutSkyboxConeAngle (
        float _arg1 );
    long GetStyleID ( );
    HRESULT BeginPropertyBuffer ( );
    HRESULT FlushPropertyBuffer ( );
    HRESULT HasWireframeProperties (
        int * pbResult );
    HRESULT HasSurfaceProperties (
        int * pbResult );
    HRESULT ClearWireframeProperties ( );
    HRESULT ClearSurfaceProperties ( );
    HRESULT GetWireframeColor (
        float * pfRed,
        float * pfGreen,
        float * pfBlue );
    HRESULT SetWireframeColor (
        float fRed,
        float fGreen,
        float fBlue );
    HRESULT GetDiffuse (
        float * pfRed,
        float * pfGreen,
        float * pfBlue );
    HRESULT SetDiffuse (
        float fRed,
        float fGreen,
        float fBlue );
    HRESULT GetSpecular (
        float * pfRed,
        float * pfGreen,
        float * pfBlue );
    HRESULT SetSpecular (
        float fRed,
        float fGreen,
        float fBlue );
    HRESULT GetAmbient (
        float * pfRed,
        float * pfGreen,
        float * pfBlue );
    HRESULT SetAmbient (
        float fRed,
        float fGreen,
        float fBlue );
    HRESULT GetEmission (
        float * pfRed,
        float * pfGreen,
        float * pfBlue );
    HRESULT SetEmission (
        float fRed,
        float fGreen,
        float fBlue );
    HRESULT Delete ( );
    HRESULT Detach ( );
    HRESULT GetTextureTransparentColor (
        float * pfRed,
        float * pfGreen,
        float * pfBlue );
    HRESULT SetTextureTransparentColor (
        float fRed,
        float fGreen,
        float fBlue );
    HRESULT GetTextureScale (
        float * pfXScale,
        float * pfYScale );
    HRESULT SetTextureScale (
        float fXScale,
        float fYScale );
    HRESULT GetTextureOffset (
        float * pfXOffset,
        float * pfYOffset );
    HRESULT SetTextureOffset (
        float fXOffset,
        float fYOffset );
    HRESULT GetBumpmapScale (
        float * pfXScale,
        float * pfYScale );
    HRESULT SetBumpmapScale (
        float fXScale,
        float fYScale );
    HRESULT GetBumpmapOffset (
        float * pfXOffset,
        float * pfYOffset );
    HRESULT SetBumpmapOffset (
        float fXOffset,
        float fYOffset );
    HRESULT SetSkyboxSkyFile (
        _bstr_t sFilename );
    HRESULT SetSkyboxSideFilename (
        int nSide,
        _bstr_t sFilename );
    _bstr_t GetSkyboxSideFilename (
        int nSide );
    HRESULT SkyboxClear (
        int nSide );
    HRESULT SkyboxClearAll ( );
    HRESULT GetSkyboxOrientation (
        float * pfxDirection,
        float * pfyDirection,
        float * pfzDirection,
        float * pfxUp,
        float * pfyUp,
        float * pfzUp,
        float * pfFieldOfView );
    HRESULT SetSkyboxOrientation (
        float fxDirection,
        float fyDirection,
        float fzDirection,
        float fxUp,
        float fyUp,
        float fzUp,
        float fFieldOfView );
    long GetVersion (
        int eVersion );
    HRESULT SetVersion (
        int eVersion,
        long nVersion );
    HRESULT GetShaderData (
        int * pnId,
        long * peType,
        long * pnHints );
    HRESULT SetShaderData (
        long eType,
        long nHints );
    long GetAutomaticShaderType ( );
    long GetShaderType ( );
    void PutShaderType (
        long _arg1 );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    HRESULT ResetSkyboxOrientation ( );
    HRESULT DeleteSkybox ( );
    enum SeRenderModeType GetRenderModeType ( );
    void PutRenderModeType (
        enum SeRenderModeType _arg1 );
    HRESULT HasPointProperties (
        int * pbResult );
    HRESULT ClearPointProperties ( );
    float GetPointSize ( );
    void PutPointSize (
        float _arg1 );
    enum SeRenderSpaceType GetPointSizeSpace ( );
    void PutPointSizeSpace (
        enum SeRenderSpaceType _arg1 );
    HRESULT GetPointOptions (
        enum SeRenderShapeType * peShape,
        enum SeRenderFillMode * peFillMode,
        enum SeRenderShadeMode * peShadeMode );
    HRESULT SetPointOptions (
        enum SeRenderShapeType eShape,
        enum SeRenderFillMode eFillMode,
        enum SeRenderShadeMode eShadeMode );
    HRESULT GetPointColor (
        float * pfRed,
        float * pfGreen,
        float * pfBlue );
    HRESULT SetPointColor (
        float fRed,
        float fGreen,
        float fBlue );
    _bstr_t GetTextureFileNameEx ( );
    HRESULT GetMaterial (
        BSTR * psMaterial,
        enum SeRenderMaterialGetMode eMode );
    HRESULT SetMaterial (
        _bstr_t sMaterial,
        enum SeRenderMaterialSetMode eMode );
    _bstr_t GetMaterial ( );
    void PutMaterial (
        _bstr_t _arg1 );
};

struct __declspec(uuid("b57f8e00-a66f-11ce-815f-08003601e504"))
_IFaceStylesAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    IDispatchPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    FaceStylePtr Add (
        _bstr_t Name,
        _bstr_t Parent );
    HRESULT Remove (
        _bstr_t Name );
    IDispatchPtr GetStyleByID (
        long StyleID );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * pItem ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pEnum ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * pApp ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * pParent ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Parent,
        /*[out,retval]*/ struct FaceStyle * * Style3d ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall raw_GetStyleByID (
        /*[in]*/ long StyleID,
        /*[out,retval]*/ IDispatch * * pItem ) = 0;
};

enum TextStyleNumberJustificationConstants
{
    igLeftJustificationStyle = 0,
    igCenterJustificationStyle = 1,
    igRightJustificationStyle = 2
};

struct __declspec(uuid("6a92ff52-ec4f-11ce-a7c0-080036d40102"))
_ITextStyleAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description[][];
    __declspec(property(get=GetUnits,put=PutUnits))
    long Units;
    __declspec(property(get=GetParent,put=PutParent))
    _bstr_t Parent;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    long Alignment;
    __declspec(property(get=GetBeforeSpacing,put=PutBeforeSpacing))
    double BeforeSpacing;
    __declspec(property(get=GetAfterSpacing,put=PutAfterSpacing))
    double AfterSpacing;
    __declspec(property(get=GetLineSpacing,put=PutLineSpacing))
    double LineSpacing;
    __declspec(property(get=GetTabs,put=PutTabs))
    double Tabs;
    __declspec(property(get=GetCharStyleName,put=PutCharStyleName))
    _bstr_t CharStyleName;
    __declspec(property(get=GetNumberJustification,put=PutNumberJustification))
    enum TextStyleNumberJustificationConstants NumberJustification;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    void PutName (
        _bstr_t Name );
    _bstr_t GetName ( );
    _bstr_t GetDescription (
        long paperUnits,
        long Precision );
    long GetUnits ( );
    void PutUnits (
        long Units );
    void PutParent (
        _bstr_t Name );
    _bstr_t GetParent ( );
    long GetAlignment ( );
    void PutAlignment (
        long Alignment );
    double GetBeforeSpacing ( );
    void PutBeforeSpacing (
        double Spacing );
    double GetAfterSpacing ( );
    void PutAfterSpacing (
        double Spacing );
    double GetLineSpacing ( );
    void PutLineSpacing (
        double lSpacing );
    double GetTabs ( );
    void PutTabs (
        double tabDistance );
    void PutCharStyleName (
        _bstr_t Name );
    _bstr_t GetCharStyleName ( );
    HRESULT SetLineLeading (
        double leading,
        long leadingType );
    HRESULT GetLineLeading (
        double * leading,
        long * leadingType );
    enum TextStyleNumberJustificationConstants GetNumberJustification ( );
    void PutNumberJustification (
        enum TextStyleNumberJustificationConstants NumberJustification );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[in]*/ long paperUnits,
        /*[in]*/ long Precision,
        /*[out,retval]*/ BSTR * Description ) = 0;
      virtual HRESULT __stdcall get_Units (
        /*[out,retval]*/ long * Units ) = 0;
      virtual HRESULT __stdcall put_Units (
        /*[in]*/ long Units ) = 0;
      virtual HRESULT __stdcall put_Parent (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ long * Alignment ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ long Alignment ) = 0;
      virtual HRESULT __stdcall get_BeforeSpacing (
        /*[out,retval]*/ double * Spacing ) = 0;
      virtual HRESULT __stdcall put_BeforeSpacing (
        /*[in]*/ double Spacing ) = 0;
      virtual HRESULT __stdcall get_AfterSpacing (
        /*[out,retval]*/ double * Spacing ) = 0;
      virtual HRESULT __stdcall put_AfterSpacing (
        /*[in]*/ double Spacing ) = 0;
      virtual HRESULT __stdcall get_LineSpacing (
        /*[out,retval]*/ double * lSpacing ) = 0;
      virtual HRESULT __stdcall put_LineSpacing (
        /*[in]*/ double lSpacing ) = 0;
      virtual HRESULT __stdcall get_Tabs (
        /*[out,retval]*/ double * tabDistance ) = 0;
      virtual HRESULT __stdcall put_Tabs (
        /*[in]*/ double tabDistance ) = 0;
      virtual HRESULT __stdcall put_CharStyleName (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_CharStyleName (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall raw_SetLineLeading (
        /*[in]*/ double leading,
        /*[in]*/ long leadingType ) = 0;
      virtual HRESULT __stdcall raw_GetLineLeading (
        /*[out]*/ double * leading,
        /*[out]*/ long * leadingType ) = 0;
      virtual HRESULT __stdcall get_NumberJustification (
        /*[out,retval]*/ enum TextStyleNumberJustificationConstants * NumberJustification ) = 0;
      virtual HRESULT __stdcall put_NumberJustification (
        /*[in]*/ enum TextStyleNumberJustificationConstants NumberJustification ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
};

struct __declspec(uuid("c47b7d13-ec6b-11ce-a7c0-080036d40102"))
TextStyle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description[][];
    __declspec(property(get=GetUnits,put=PutUnits))
    long Units;
    __declspec(property(get=GetParent,put=PutParent))
    _bstr_t Parent;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    long Alignment;
    __declspec(property(get=GetBeforeSpacing,put=PutBeforeSpacing))
    double BeforeSpacing;
    __declspec(property(get=GetAfterSpacing,put=PutAfterSpacing))
    double AfterSpacing;
    __declspec(property(get=GetLineSpacing,put=PutLineSpacing))
    double LineSpacing;
    __declspec(property(get=GetTabs,put=PutTabs))
    double Tabs;
    __declspec(property(get=GetCharStyleName,put=PutCharStyleName))
    _bstr_t CharStyleName;
    __declspec(property(get=GetNumberJustification,put=PutNumberJustification))
    enum TextStyleNumberJustificationConstants NumberJustification;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetName ( );
    _bstr_t GetDescription (
        long paperUnits,
        long Precision );
    long GetUnits ( );
    void PutUnits (
        long _arg1 );
    void PutParent (
        _bstr_t _arg1 );
    _bstr_t GetParent ( );
    long GetAlignment ( );
    void PutAlignment (
        long _arg1 );
    double GetBeforeSpacing ( );
    void PutBeforeSpacing (
        double _arg1 );
    double GetAfterSpacing ( );
    void PutAfterSpacing (
        double _arg1 );
    double GetLineSpacing ( );
    void PutLineSpacing (
        double _arg1 );
    double GetTabs ( );
    void PutTabs (
        double _arg1 );
    void PutCharStyleName (
        _bstr_t _arg1 );
    _bstr_t GetCharStyleName ( );
    HRESULT SetLineLeading (
        double leading,
        long leadingType );
    HRESULT GetLineLeading (
        double * leading,
        long * leadingType );
    enum TextStyleNumberJustificationConstants GetNumberJustification ( );
    void PutNumberJustification (
        enum TextStyleNumberJustificationConstants _arg1 );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
};

struct __declspec(uuid("c47b7d14-ec6b-11ce-a7c0-080036d40102"))
_ITextStylesAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetActive,put=PutActive))
    _bstr_t Active;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr GetApplication ( );
    TextStylePtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    TextStylePtr Add (
        _bstr_t Name,
        _bstr_t Parent );
    HRESULT Remove (
        _bstr_t Name );
    _bstr_t GetActive ( );
    void PutActive (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * pParent ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * pApp ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct TextStyle * * pItem ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pEnum ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Parent,
        /*[out,retval]*/ struct TextStyle * * GeoStyle ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Active (
        /*[in]*/ BSTR Name ) = 0;
};

struct __declspec(uuid("5684e0e5-24de-11cf-a80a-080036d40102"))
_ITextCharStyleAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description[][];
    __declspec(property(get=GetUnits,put=PutUnits))
    long Units;
    __declspec(property(get=GetColor,put=PutColor))
    long Color;
    __declspec(property(get=GetParent,put=PutParent))
    _bstr_t Parent;
    __declspec(property(get=GetFontName,put=PutFontName))
    _bstr_t FontName;
    __declspec(property(get=GetStyle,put=PutStyle))
    long Style;
    __declspec(property(get=GetUnderlineStyle,put=PutUnderlineStyle))
    long UnderlineStyle;
    __declspec(property(get=GetLangID,put=PutLangID))
    long LangID;
    __declspec(property(get=GetTextSize,put=PutTextSize))
    double TextSize;
    __declspec(property(get=GetAspectRatio,put=PutAspectRatio))
    double AspectRatio;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    void PutName (
        _bstr_t Name );
    _bstr_t GetName ( );
    _bstr_t GetDescription (
        long paperUnits,
        long Precision );
    void PutUnits (
        long Units );
    long GetUnits ( );
    long GetColor ( );
    void PutColor (
        long Color );
    _bstr_t GetParent ( );
    void PutParent (
        _bstr_t Name );
    void PutFontName (
        _bstr_t Name );
    _bstr_t GetFontName ( );
    void PutStyle (
        long Style );
    long GetStyle ( );
    long GetUnderlineStyle ( );
    void PutUnderlineStyle (
        long Style );
    long GetLangID ( );
    void PutLangID (
        long LangID );
    double GetTextSize ( );
    void PutTextSize (
        double TextSize );
    HRESULT SetTextSize (
        double TextSize,
        long SizeType );
    HRESULT GetTextSize (
        double * TextSize,
        long * SizeType );
    double GetAspectRatio ( );
    void PutAspectRatio (
        double TextSize );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[in]*/ long paperUnits,
        /*[in]*/ long Precision,
        /*[out,retval]*/ BSTR * Description ) = 0;
      virtual HRESULT __stdcall put_Units (
        /*[in]*/ long Units ) = 0;
      virtual HRESULT __stdcall get_Units (
        /*[out,retval]*/ long * Units ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ long * Color ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ long Color ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Parent (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall put_FontName (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_FontName (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ long Style ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ long * Style ) = 0;
      virtual HRESULT __stdcall get_UnderlineStyle (
        /*[out,retval]*/ long * Style ) = 0;
      virtual HRESULT __stdcall put_UnderlineStyle (
        /*[in]*/ long Style ) = 0;
      virtual HRESULT __stdcall get_LangID (
        /*[out,retval]*/ long * LangID ) = 0;
      virtual HRESULT __stdcall put_LangID (
        /*[in]*/ long LangID ) = 0;
      virtual HRESULT __stdcall get_TextSize (
        /*[out,retval]*/ double * TextSize ) = 0;
      virtual HRESULT __stdcall put_TextSize (
        /*[in]*/ double TextSize ) = 0;
      virtual HRESULT __stdcall raw_SetTextSize (
        /*[in]*/ double TextSize,
        /*[in]*/ long SizeType ) = 0;
      virtual HRESULT __stdcall raw_GetTextSize (
        /*[out]*/ double * TextSize,
        /*[out]*/ long * SizeType ) = 0;
      virtual HRESULT __stdcall get_AspectRatio (
        /*[out,retval]*/ double * TextSize ) = 0;
      virtual HRESULT __stdcall put_AspectRatio (
        /*[in]*/ double TextSize ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
};

struct __declspec(uuid("5684e0e3-24de-11cf-a80a-080036d40102"))
TextCharStyle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description[][];
    __declspec(property(get=GetUnits,put=PutUnits))
    long Units;
    __declspec(property(get=GetColor,put=PutColor))
    long Color;
    __declspec(property(get=GetParent,put=PutParent))
    _bstr_t Parent;
    __declspec(property(get=GetFontName,put=PutFontName))
    _bstr_t FontName;
    __declspec(property(get=GetStyle,put=PutStyle))
    long Style;
    __declspec(property(get=GetUnderlineStyle,put=PutUnderlineStyle))
    long UnderlineStyle;
    __declspec(property(get=GetLangID,put=PutLangID))
    long LangID;
    __declspec(property(get=GetTextSize,put=PutTextSize))
    double TextSize;
    __declspec(property(get=GetAspectRatio,put=PutAspectRatio))
    double AspectRatio;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetName ( );
    _bstr_t GetDescription (
        long paperUnits,
        long Precision );
    void PutUnits (
        long _arg1 );
    long GetUnits ( );
    long GetColor ( );
    void PutColor (
        long _arg1 );
    _bstr_t GetParent ( );
    void PutParent (
        _bstr_t _arg1 );
    void PutFontName (
        _bstr_t _arg1 );
    _bstr_t GetFontName ( );
    void PutStyle (
        long _arg1 );
    long GetStyle ( );
    long GetUnderlineStyle ( );
    void PutUnderlineStyle (
        long _arg1 );
    long GetLangID ( );
    void PutLangID (
        long _arg1 );
    double GetTextSize ( );
    void PutTextSize (
        double _arg1 );
    HRESULT SetTextSize (
        double TextSize,
        long SizeType );
    HRESULT GetTextSize (
        double * TextSize,
        long * SizeType );
    double GetAspectRatio ( );
    void PutAspectRatio (
        double _arg1 );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
};

struct __declspec(uuid("5684e0e4-24de-11cf-a80a-080036d40102"))
_ITextCharStylesAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr GetApplication ( );
    TextCharStylePtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    TextCharStylePtr Add (
        _bstr_t Name,
        _bstr_t Parent );
    HRESULT Remove (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * pParent ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * pApp ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct TextCharStyle * * pItem ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pEnum ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Parent,
        /*[out,retval]*/ struct TextCharStyle * * GeoStyle ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR Name ) = 0;
};

enum DisplayTypeConstant
{
    igNotSpecifiedDisplay = -1,
    igContentsDisplay = 0,
    igIconDisplay = 1
};

enum OLEInsertionTypeConstant
{
    igUseSymbolPreferences = -1,
    igOLELinked = 0,
    igOLEEmbedded = 1,
    igOLENone = 3,
    igOLESharedEmbedded = 4
};

enum OLEUpdateOptionConstant
{
    igOLEAutomatic = 0,
    igOLEFrozen = 1,
    igOLEManual = 2
};

enum KeyPointType
{
    igKeyPointStart = 1,
    igKeyPointEnd = 2,
    igKeyPointCenter = 4,
    igKeyPointMajorAxis = 8,
    igKeyPointMinorAxis = 16,
    igKeyPointMiddle = 32,
    igKeyPointPointOnly = 64,
    igKeyPointHorizontalSilhouette = 128,
    igKeyPointVerticalSilhouette = 256,
    igKeyPointInteriorNode = 512,
    igKeyPointInteriorPole = 1024,
    igKeyPointNonDefining = 16384,
    igKeyPointCallback = 32768
};

struct __declspec(uuid("77bab3c2-c118-11ce-a0c6-080036c91102"))
_ISymbol2dAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetStyle))
    IDispatchPtr Style;
    __declspec(property(get=GetUseSymbolLayer,put=PutUseSymbolLayer))
    VARIANT_BOOL UseSymbolLayer;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetSourceDoc))
    _bstr_t SourceDoc;
    __declspec(property(get=GetClass))
    _bstr_t Class;
    __declspec(property(get=GetObject))
    IDispatchPtr Object;
    __declspec(property(get=GetOLEType))
    enum OLEInsertionTypeConstant OLEType;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetUpdateOptions,put=PutUpdateOptions))
    enum OLEUpdateOptionConstant UpdateOptions;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetObjectVerbsCount))
    long ObjectVerbsCount;
    __declspec(property(get=GetName))
    _bstr_t Name[][];
    __declspec(property(get=GetMemberReference))
    IDispatchPtr MemberReference[];
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetScaleFactorLock,put=PutScaleFactorLock))
    VARIANT_BOOL ScaleFactorLock;
    __declspec(property(get=GetQuantity,put=PutQuantity))
    long Quantity;
    __declspec(property(get=GetUser))
    IDispatchPtr User;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetSourceDocument))
    IDispatchPtr SourceDocument;
    __declspec(property(get=GetScaleFactor,put=PutScaleFactor))
    double ScaleFactor;
    __declspec(property(get=GetDisplayType,put=PutDisplayType))
    enum DisplayTypeConstant DisplayType;
    __declspec(property(get=GetNestedDisplay,put=PutNestedDisplay))
    VARIANT_BOOL NestedDisplay;
    __declspec(property(get=GetContentsLocatable,put=PutContentsLocatable))
    VARIANT_BOOL ContentsLocatable;
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetStyle ( );
    VARIANT_BOOL GetUseSymbolLayer ( );
    void PutUseSymbolLayer (
        VARIANT_BOOL flag );
    _bstr_t GetLayer ( );
    void PutLayer (
        _bstr_t pLayer );
    double GetAngle ( );
    void PutAngle (
        double Angle );
    VARIANT_BOOL GetScaleFactorLock ( );
    void PutScaleFactorLock (
        VARIANT_BOOL lock );
    long GetQuantity ( );
    void PutQuantity (
        long Quantity );
    IDispatchPtr GetUser ( );
    double GetScaleFactor ( );
    void PutScaleFactor (
        double __MIDL___ISymbol2dAuto0000 );
    HRESULT GetOrigin (
        double * Ox,
        double * Oy );
    HRESULT SetOrigin (
        double Ox,
        double Oy );
    HRESULT GetRotations (
        double * Xx,
        double * Xy,
        double * Yx,
        double * Yy );
    HRESULT SetRotations (
        double Xx,
        double Xy,
        double Yx,
        double Yy );
    enum DisplayTypeConstant GetDisplayType ( );
    void PutDisplayType (
        enum DisplayTypeConstant Type );
    VARIANT_BOOL GetNestedDisplay ( );
    void PutNestedDisplay (
        VARIANT_BOOL flag );
    VARIANT_BOOL GetContentsLocatable ( );
    void PutContentsLocatable (
        VARIANT_BOOL flag );
    _bstr_t GetSourceDoc ( );
    _bstr_t GetClass ( );
    IDispatchPtr GetObject ( );
    enum OLEInsertionTypeConstant GetOLEType ( );
    enum OLEUpdateOptionConstant GetUpdateOptions ( );
    void PutUpdateOptions (
        enum OLEUpdateOptionConstant option );
    HRESULT Update ( );
    HRESULT DoVerb (
        const _variant_t & verb = vtMissing );
    long GetObjectVerbsCount ( );
    _bstr_t ObjectVerbs (
        const _variant_t & Index = vtMissing );
    _bstr_t GetAlternatePath ( );
    void PutAlternatePath (
        BSTR * currentPath );
    ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse,
        long Lcid = 0 );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double X1,
        double Y1,
        double X2,
        double Y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum KeyPointType * KeyPointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    HRESULT ConvertToGroup ( );
    IDispatchPtr GetMemberReference (
        IDispatch * Member );
    IDispatchPtr GetSourceDocument ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ IDispatch * * pStyle ) = 0;
      virtual HRESULT __stdcall get_UseSymbolLayer (
        /*[out,retval]*/ VARIANT_BOOL * flag ) = 0;
      virtual HRESULT __stdcall put_UseSymbolLayer (
        /*[in]*/ VARIANT_BOOL flag ) = 0;
      virtual HRESULT __stdcall get_Layer (
        /*[out,retval]*/ BSTR * pLayer ) = 0;
      virtual HRESULT __stdcall put_Layer (
        /*[in]*/ BSTR pLayer ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * Angle ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double Angle ) = 0;
      virtual HRESULT __stdcall get_ScaleFactorLock (
        /*[out,retval]*/ VARIANT_BOOL * lock ) = 0;
      virtual HRESULT __stdcall put_ScaleFactorLock (
        /*[in]*/ VARIANT_BOOL lock ) = 0;
      virtual HRESULT __stdcall get_Quantity (
        /*[out,retval]*/ long * Quantity ) = 0;
      virtual HRESULT __stdcall put_Quantity (
        /*[in]*/ long Quantity ) = 0;
      virtual HRESULT __stdcall get_User (
        /*[out,retval]*/ IDispatch * * pUser ) = 0;
      virtual HRESULT __stdcall get_ScaleFactor (
        /*[out,retval]*/ double * __MIDL___ISymbol2dAuto0000 ) = 0;
      virtual HRESULT __stdcall put_ScaleFactor (
        /*[in]*/ double __MIDL___ISymbol2dAuto0000 ) = 0;
      virtual HRESULT __stdcall raw_GetOrigin (
        /*[out]*/ double * Ox,
        /*[out]*/ double * Oy ) = 0;
      virtual HRESULT __stdcall raw_SetOrigin (
        /*[in]*/ double Ox,
        /*[in]*/ double Oy ) = 0;
      virtual HRESULT __stdcall raw_GetRotations (
        /*[out]*/ double * Xx,
        /*[out]*/ double * Xy,
        /*[out]*/ double * Yx,
        /*[out]*/ double * Yy ) = 0;
      virtual HRESULT __stdcall raw_SetRotations (
        /*[in]*/ double Xx,
        /*[in]*/ double Xy,
        /*[in]*/ double Yx,
        /*[in]*/ double Yy ) = 0;
      virtual HRESULT __stdcall get_DisplayType (
        /*[out,retval]*/ enum DisplayTypeConstant * Type ) = 0;
      virtual HRESULT __stdcall put_DisplayType (
        /*[in]*/ enum DisplayTypeConstant Type ) = 0;
      virtual HRESULT __stdcall get_NestedDisplay (
        /*[out,retval]*/ VARIANT_BOOL * flag ) = 0;
      virtual HRESULT __stdcall put_NestedDisplay (
        /*[in]*/ VARIANT_BOOL flag ) = 0;
      virtual HRESULT __stdcall get_ContentsLocatable (
        /*[out,retval]*/ VARIANT_BOOL * flag ) = 0;
      virtual HRESULT __stdcall put_ContentsLocatable (
        /*[in]*/ VARIANT_BOOL flag ) = 0;
      virtual HRESULT __stdcall get_SourceDoc (
        /*[out,retval]*/ BSTR * SourceDoc ) = 0;
      virtual HRESULT __stdcall get_Class (
        /*[out,retval]*/ BSTR * sourceClass ) = 0;
      virtual HRESULT __stdcall get_Object (
        /*[out,retval]*/ IDispatch * * OLEObject ) = 0;
      virtual HRESULT __stdcall get_OLEType (
        /*[out,retval]*/ enum OLEInsertionTypeConstant * Type ) = 0;
      virtual HRESULT __stdcall get_UpdateOptions (
        /*[out,retval]*/ enum OLEUpdateOptionConstant * option ) = 0;
      virtual HRESULT __stdcall put_UpdateOptions (
        /*[in]*/ enum OLEUpdateOptionConstant option ) = 0;
      virtual HRESULT __stdcall raw_Update ( ) = 0;
      virtual HRESULT __stdcall raw_DoVerb (
        /*[in]*/ VARIANT verb = vtMissing ) = 0;
      virtual HRESULT __stdcall get_ObjectVerbsCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_ObjectVerbs (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ BSTR * verb ) = 0;
      virtual HRESULT __stdcall get_AlternatePath (
        /*[out,retval]*/ BSTR * currentPath ) = 0;
      virtual HRESULT __stdcall put_AlternatePath (
        /*[in]*/ BSTR * currentPath ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[in]*/ VARIANT Recurse,
        /*[in,lcid]*/ long Lcid,
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * Type ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * ZOrder ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[in]*/ VARIANT Recurse,
        /*[out,retval]*/ BSTR * Key ) = 0;
      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ IDispatch * * Document ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ double XFrom,
        /*[in]*/ double YFrom,
        /*[in]*/ double XTo,
        /*[in]*/ double YTo ) = 0;
      virtual HRESULT __stdcall raw_Scale (
        /*[in]*/ double Factor ) = 0;
      virtual HRESULT __stdcall raw_Rotate (
        /*[in]*/ double Angle,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[out]*/ double * XMinimum,
        /*[out]*/ double * YMinimum,
        /*[out]*/ double * XMaximum,
        /*[out]*/ double * YMaximum ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ VARIANT XDistance,
        /*[in]*/ VARIANT YDistance,
        /*[out,retval]*/ IDispatch * * NewObject ) = 0;
      virtual HRESULT __stdcall raw_Mirror (
        /*[in]*/ double X1,
        /*[in]*/ double Y1,
        /*[in]*/ double X2,
        /*[in]*/ double Y2,
        /*[in]*/ VARIANT BooleanCopyFlag,
        /*[out,retval]*/ IDispatch * * Object ) = 0;
      virtual HRESULT __stdcall raw_BringToFront ( ) = 0;
      virtual HRESULT __stdcall raw_BringForward ( ) = 0;
      virtual HRESULT __stdcall raw_SendToBack ( ) = 0;
      virtual HRESULT __stdcall raw_SendBackward ( ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall get_KeyPointCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_GetKeyPoint (
        /*[in]*/ long Index,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ enum KeyPointType * KeyPointType,
        /*[out]*/ long * HandleType ) = 0;
      virtual HRESULT __stdcall raw_SetKeyPoint (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
      virtual HRESULT __stdcall raw_ConvertToGroup ( ) = 0;
      virtual HRESULT __stdcall get_MemberReference (
        /*[in]*/ IDispatch * Member,
        /*[out,retval]*/ IDispatch * * Reference ) = 0;
      virtual HRESULT __stdcall get_SourceDocument (
        /*[out,retval]*/ IDispatch * * SourceDocument ) = 0;
};

struct __declspec(uuid("77bab3c5-c118-11ce-a0c6-080036c91102"))
Symbol2d : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStyle))
    IDispatchPtr Style;
    __declspec(property(get=GetUseSymbolLayer,put=PutUseSymbolLayer))
    VARIANT_BOOL UseSymbolLayer;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetSourceDoc))
    _bstr_t SourceDoc;
    __declspec(property(get=GetClass))
    _bstr_t Class;
    __declspec(property(get=GetObject))
    IDispatchPtr Object;
    __declspec(property(get=GetOLEType))
    enum OLEInsertionTypeConstant OLEType;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetUpdateOptions,put=PutUpdateOptions))
    enum OLEUpdateOptionConstant UpdateOptions;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetObjectVerbsCount))
    long ObjectVerbsCount;
    __declspec(property(get=GetName))
    _bstr_t Name[];
    __declspec(property(get=GetMemberReference))
    IDispatchPtr MemberReference[];
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetScaleFactorLock,put=PutScaleFactorLock))
    VARIANT_BOOL ScaleFactorLock;
    __declspec(property(get=GetQuantity,put=PutQuantity))
    long Quantity;
    __declspec(property(get=GetUser))
    IDispatchPtr User;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetSourceDocument))
    IDispatchPtr SourceDocument;
    __declspec(property(get=GetScaleFactor,put=PutScaleFactor))
    double ScaleFactor;
    __declspec(property(get=GetDisplayType,put=PutDisplayType))
    enum DisplayTypeConstant DisplayType;
    __declspec(property(get=GetNestedDisplay,put=PutNestedDisplay))
    VARIANT_BOOL NestedDisplay;
    __declspec(property(get=GetContentsLocatable,put=PutContentsLocatable))
    VARIANT_BOOL ContentsLocatable;
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetStyle ( );
    VARIANT_BOOL GetUseSymbolLayer ( );
    void PutUseSymbolLayer (
        VARIANT_BOOL _arg1 );
    _bstr_t GetLayer ( );
    void PutLayer (
        _bstr_t _arg1 );
    double GetAngle ( );
    void PutAngle (
        double _arg1 );
    VARIANT_BOOL GetScaleFactorLock ( );
    void PutScaleFactorLock (
        VARIANT_BOOL _arg1 );
    long GetQuantity ( );
    void PutQuantity (
        long _arg1 );
    IDispatchPtr GetUser ( );
    double GetScaleFactor ( );
    void PutScaleFactor (
        double _arg1 );
    HRESULT GetOrigin (
        double * Ox,
        double * Oy );
    HRESULT SetOrigin (
        double Ox,
        double Oy );
    HRESULT GetRotations (
        double * Xx,
        double * Xy,
        double * Yx,
        double * Yy );
    HRESULT SetRotations (
        double Xx,
        double Xy,
        double Yx,
        double Yy );
    enum DisplayTypeConstant GetDisplayType ( );
    void PutDisplayType (
        enum DisplayTypeConstant _arg1 );
    VARIANT_BOOL GetNestedDisplay ( );
    void PutNestedDisplay (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetContentsLocatable ( );
    void PutContentsLocatable (
        VARIANT_BOOL _arg1 );
    _bstr_t GetSourceDoc ( );
    _bstr_t GetClass ( );
    IDispatchPtr GetObject ( );
    enum OLEInsertionTypeConstant GetOLEType ( );
    enum OLEUpdateOptionConstant GetUpdateOptions ( );
    void PutUpdateOptions (
        enum OLEUpdateOptionConstant _arg1 );
    HRESULT Update ( );
    HRESULT DoVerb (
        const _variant_t & verb = vtMissing );
    long GetObjectVerbsCount ( );
    _bstr_t ObjectVerbs (
        const _variant_t & Index = vtMissing );
    _bstr_t GetAlternatePath ( );
    void PutAlternatePath (
        BSTR * _arg1 );
    ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double X1,
        double Y1,
        double X2,
        double Y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum KeyPointType * KeyPointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    HRESULT ConvertToGroup ( );
    IDispatchPtr GetMemberReference (
        IDispatch * Member );
    IDispatchPtr GetSourceDocument ( );
};

struct __declspec(uuid("77bab3cb-c118-11ce-a0c6-080036c91102"))
_ISymbolsAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    Symbol2dPtr Add (
        long insertionType,
        _bstr_t filePath,
        double x,
        double y,
        const _variant_t & z = vtMissing );
    HRESULT InsertSymbolAsGeometry (
        _bstr_t filePath,
        double dOriginX,
        double dOriginY );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * pApp ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * pParent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * pSymbol ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pEnum ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ long insertionType,
        /*[in]*/ BSTR filePath,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ VARIANT z,
        /*[out,retval]*/ struct Symbol2d * * pSymbol ) = 0;
      virtual HRESULT __stdcall raw_InsertSymbolAsGeometry (
        /*[in]*/ BSTR filePath,
        /*[in]*/ double dOriginX,
        /*[in]*/ double dOriginY ) = 0;
};

struct __declspec(uuid("dd7ea711-2852-11d2-a451-080036ecf202"))
_ISymbolPropertiesAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetSymbol))
    IDispatchPtr Symbol;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr GetSymbol ( );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * pApp ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * pParent ) = 0;
      virtual HRESULT __stdcall get_Symbol (
        /*[out,retval]*/ IDispatch * * pSymbolprops ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
};

enum SeAnalysisStateType
{
    seAnalysisStateNone = 0,
    seAnalysisStateGlobal = 1,
    seAnalysisStateLocal = 2
};

enum SeAnalysisModeType
{
    seAnalysisModeDefault = 0,
    seAnalysisModeZebraStripeLinear = 1,
    seAnalysisModeZebraStripeSpherical = 2,
    seAnalysisModeZebraStripeReflection = 3,
    seAnalysisModeCurvatureColor = 4,
    seAnalysisModeDraftAngle = 5
};

enum SeBackgroundType
{
    seBackgroundTypeSolid = 0,
    seBackgroundTypeGradient = 1,
    seBackgroundTypeImage = 2,
    seBackgroundTypeImageReference = 3,
    seBackgroundTypeStaticEnvironment = 4,
    seBackgroundTypeImmersiveEnvironment = 5
};

enum SeGradientType
{
    seGradientTypeHorizontal = 1,
    seGradientTypeVertical = 2,
    seGradientTypeDiagonalUp = 3,
    seGradientTypeDiagonalDown = 4,
    seGradientTypeSquareSpot = 5,
    seGradientTypeCircularSpot = 6,
    seGradientTypeCustom = 7
};

enum SeAntiAliasLevel
{
    seAntiAliasLevelNone = 0,
    seAntiAliasLevelLow = 2,
    seAntiAliasLevelMedium = 4,
    seAntiAliasLevelHigh = 8
};

enum SeHiddenLineMode
{
    seHiddenLineModeOff = 0,
    seHiddenLineModeDim = 1,
    seHiddenLineModeDashed = 2
};

struct __declspec(uuid("ceed3411-d723-11ce-8173-08003601e504"))
_IViewStyleAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetStyleName,put=PutStyleName))
    _bstr_t StyleName;
    __declspec(property(get=GetParent,put=PutParent))
    _bstr_t Parent;
    __declspec(property(get=GetRenderMode,put=PutRenderMode))
    long RenderMode;
    __declspec(property(get=GetAllowOverrides,put=PutAllowOverrides))
    int AllowOverrides;
    __declspec(property(get=GetAntialiasWireframe,put=PutAntialiasWireframe))
    int AntialiasWireframe;
    __declspec(property(get=GetAntialiasSurface,put=PutAntialiasSurface))
    int AntialiasSurface;
    __declspec(property(get=GetDepthFading,put=PutDepthFading))
    int DepthFading;
    __declspec(property(get=GetPerspective,put=PutPerspective))
    int Perspective;
    __declspec(property(get=GetFocalLength,put=PutFocalLength))
    long FocalLength;
    __declspec(property(get=GetNumLights))
    long NumLights;
    __declspec(property(get=GetAmbientColor,put=PutAmbientColor))
    long AmbientColor;
    __declspec(property(get=GetAmbientIntensity,put=PutAmbientIntensity))
    float AmbientIntensity;
    __declspec(property(get=GetAmbientRed,put=PutAmbientRed))
    float AmbientRed;
    __declspec(property(get=GetAmbientGreen,put=PutAmbientGreen))
    float AmbientGreen;
    __declspec(property(get=GetAmbientBlue,put=PutAmbientBlue))
    float AmbientBlue;
    __declspec(property(get=GetHiddenLineMode,put=PutHiddenLineMode))
    long HiddenLineMode;
    __declspec(property(get=GetDimPercentage,put=PutDimPercentage))
    float DimPercentage;
    __declspec(property(get=GetIsBackgroundImageDisplayed))
    int IsBackgroundImageDisplayed;
    __declspec(property(get=GetRenderModeType,put=PutRenderModeType))
    enum SeRenderModeType RenderModeType;
    __declspec(property(get=GetSilhouettesEnabled,put=PutSilhouettesEnabled))
    VARIANT_BOOL SilhouettesEnabled;
    __declspec(property(get=GetStyleID))
    long StyleID;
    __declspec(property(get=GetBackgroundType,put=PutBackgroundType))
    enum SeBackgroundType BackgroundType;
    __declspec(property(get=GetBackgroundImageFile,put=PutBackgroundImageFile))
    _bstr_t BackgroundImageFile;
    __declspec(property(get=GetSkyboxType,put=PutSkyboxType))
    enum SeSkyboxType SkyboxType;
    __declspec(property(get=GetBackgroundMirrorX,put=PutBackgroundMirrorX))
    long BackgroundMirrorX;
    __declspec(property(get=GetBackgroundMirrorY,put=PutBackgroundMirrorY))
    long BackgroundMirrorY;
    __declspec(property(get=GetTextures,put=PutTextures))
    long Textures;
    __declspec(property(get=GetBumpmaps,put=PutBumpmaps))
    long Bumpmaps;
    __declspec(property(get=GetReflections,put=PutReflections))
    long Reflections;
    __declspec(property(get=GetFloorReflection,put=PutFloorReflection))
    long FloorReflection;
    __declspec(property(get=GetCastShadows,put=PutCastShadows))
    long CastShadows;
    __declspec(property(get=GetDropShadow,put=PutDropShadow))
    long DropShadow;
    __declspec(property(get=GetAntialiasLevel,put=PutAntialiasLevel))
    enum SeAntiAliasLevel AntialiasLevel;
    __declspec(property(get=GetSilhouettes,put=PutSilhouettes))
    long Silhouettes;
    __declspec(property(get=GetHiddenLines,put=PutHiddenLines))
    enum SeHiddenLineMode HiddenLines;
    __declspec(property(get=GetHighQuality,put=PutHighQuality))
    long HighQuality;
    __declspec(property(get=GetAmbientShadows,put=PutAmbientShadows))
    long AmbientShadows;
    __declspec(property(get=GetFloorShadow,put=PutFloorShadow))
    long FloorShadow;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetStyleName ( );
    void PutStyleName (
        _bstr_t psStyleName );
    _bstr_t GetParent ( );
    void PutParent (
        _bstr_t psParentName );
    long GetRenderMode ( );
    void PutRenderMode (
        long pnRenderMode );
    int GetAllowOverrides ( );
    void PutAllowOverrides (
        int pbAllowOverrides );
    int GetAntialiasWireframe ( );
    void PutAntialiasWireframe (
        int pnAntialiasWireframe );
    int GetAntialiasSurface ( );
    void PutAntialiasSurface (
        int pnAntialiasSurface );
    int GetDepthFading ( );
    void PutDepthFading (
        int pbDepthFading );
    int GetPerspective ( );
    void PutPerspective (
        int pbPerspective );
    long GetFocalLength ( );
    void PutFocalLength (
        long pnFocalLength );
    long GetNumLights ( );
    long GetAmbientColor ( );
    void PutAmbientColor (
        long plAmbientColor );
    float GetAmbientIntensity ( );
    void PutAmbientIntensity (
        float pfAmbientIntensity );
    float GetAmbientRed ( );
    void PutAmbientRed (
        float pfAmbientRed );
    float GetAmbientGreen ( );
    void PutAmbientGreen (
        float pfAmbientGreen );
    float GetAmbientBlue ( );
    void PutAmbientBlue (
        float pfAmbientBlue );
    long GetHiddenLineMode ( );
    void PutHiddenLineMode (
        long pnHiddenLineMode );
    float GetDimPercentage ( );
    void PutDimPercentage (
        float pfDimPercentage );
    int GetIsBackgroundImageDisplayed ( );
    HRESULT BeginPropertyBuffer ( );
    HRESULT FlushPropertyBuffer ( );
    HRESULT AddLight (
        float fRed,
        float fGreen,
        float fBlue,
        float fTheta,
        float fPhi,
        long * pnLight );
    HRESULT DeleteLight (
        long nLight );
    HRESULT GetLight (
        long nLight,
        float * pfRed,
        float * pfGreen,
        float * pfBlue,
        float * pfTheta,
        float * pfPhi );
    HRESULT SetLight (
        long nLight,
        float fRed,
        float fGreen,
        float fBlue,
        float fTheta,
        float fPhi );
    HRESULT GetLightColor (
        long nLight,
        long * plLightColor );
    HRESULT SetLightColor (
        long nLight,
        long lLightColor );
    HRESULT GetLightIntensity (
        long nLight,
        float * pfIntensity );
    HRESULT SetLightIntensity (
        long nLight,
        float fIntensity );
    HRESULT GetLightTheta (
        long nLight,
        float * pfTheta );
    HRESULT SetLightTheta (
        long nLight,
        float fTheta );
    HRESULT GetLightPhi (
        long nLight,
        float * pfPhi );
    HRESULT SetLightPhi (
        long nLight,
        float fPhi );
    HRESULT Delete ( );
    enum SeRenderModeType GetRenderModeType ( );
    void PutRenderModeType (
        enum SeRenderModeType pnRenderMode );
    VARIANT_BOOL GetSilhouettesEnabled ( );
    void PutSilhouettesEnabled (
        VARIANT_BOOL pbEnabled );
    long GetStyleID ( );
    HRESULT GetAnalysisParameters (
        enum SeAnalysisStateType * peState,
        enum SeAnalysisModeType * peMode,
        VARIANT * pQualityScale,
        VARIANT * pArg1,
        VARIANT * pArg2,
        VARIANT * pArg3,
        VARIANT * pArg4 );
    HRESULT SetAnalysisParameters (
        enum SeAnalysisStateType eState,
        enum SeAnalysisModeType eMode,
        const _variant_t & QualityScale = vtMissing,
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing );
    enum SeBackgroundType GetBackgroundType ( );
    void PutBackgroundType (
        enum SeBackgroundType pnBackgroundType );
    _bstr_t GetBackgroundImageFile ( );
    void PutBackgroundImageFile (
        _bstr_t psBackgroundImageFile );
    enum SeSkyboxType GetSkyboxType ( );
    void PutSkyboxType (
        enum SeSkyboxType peType );
    HRESULT SetSkyboxSkyFile (
        _bstr_t sFilename );
    HRESULT SetSkyboxSideFilename (
        int nSide,
        _bstr_t sFilename );
    _bstr_t GetSkyboxSideFilename (
        int nSide );
    HRESULT SkyboxClear (
        int nSide );
    HRESULT SkyboxClearAll ( );
    HRESULT GetSkyboxOrientation (
        float * pfxDirection,
        float * pfyDirection,
        float * pfzDirection,
        float * pfxUp,
        float * pfyUp,
        float * pfzUp,
        float * pfFieldOfView );
    HRESULT SetSkyboxOrientation (
        float fxDirection,
        float fyDirection,
        float fzDirection,
        float fxUp,
        float fyUp,
        float fzUp,
        float fFieldOfView );
    long GetBackgroundMirrorX ( );
    void PutBackgroundMirrorX (
        long pbMirrorX );
    long GetBackgroundMirrorY ( );
    void PutBackgroundMirrorY (
        long pbMirrorY );
    long GetTextures ( );
    void PutTextures (
        long pbTextures );
    long GetReflections ( );
    void PutReflections (
        long pbReflections );
    long GetBumpmaps ( );
    void PutBumpmaps (
        long pbBumpmaps );
    long GetFloorReflection ( );
    void PutFloorReflection (
        long pbFloorReflection );
    long GetCastShadows ( );
    void PutCastShadows (
        long pbCastShadows );
    long GetDropShadow ( );
    void PutDropShadow (
        long pbDropShadow );
    HRESULT SetGradientBackground (
        enum SeGradientType eType,
        long crColor1,
        long crColor2,
        const _variant_t & SpotCenterX = vtMissing,
        const _variant_t & SpotCenterY = vtMissing );
    HRESULT GetGradientBackground (
        enum SeGradientType * peType,
        long * pcrColor1,
        long * pcrColor2,
        VARIANT * pSpotCenterX,
        VARIANT * pSpotCenterY );
    HRESULT SetGradientColor (
        int nColor,
        long crColor );
    long GetGradientColor (
        int nColor );
    enum SeAntiAliasLevel GetAntialiasLevel ( );
    void PutAntialiasLevel (
        enum SeAntiAliasLevel pnAntialiasLevel );
    long GetSilhouettes ( );
    void PutSilhouettes (
        long pbEnabled );
    enum SeHiddenLineMode GetHiddenLines ( );
    void PutHiddenLines (
        enum SeHiddenLineMode peMode );
    long GetHighQuality ( );
    void PutHighQuality (
        long pbHighQuality );
    HRESULT ResetSkyboxOrientation ( );
    HRESULT DeleteSkybox ( );
    long GetAmbientShadows ( );
    void PutAmbientShadows (
        long pbAmbientShadows );
    long GetFloorShadow ( );
    void PutFloorShadow (
        long pbFloorShadow );
    HRESULT GetLightFlags (
        long nLight,
        long * pnFlags );
    HRESULT SetLightFlags (
        long nLight,
        long nFlags );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_StyleName (
        /*[out,retval]*/ BSTR * psStyleName ) = 0;
      virtual HRESULT __stdcall put_StyleName (
        /*[in]*/ BSTR psStyleName ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ BSTR * psParentName ) = 0;
      virtual HRESULT __stdcall put_Parent (
        /*[in]*/ BSTR psParentName ) = 0;
      virtual HRESULT __stdcall get_RenderMode (
        /*[out,retval]*/ long * pnRenderMode ) = 0;
      virtual HRESULT __stdcall put_RenderMode (
        /*[in]*/ long pnRenderMode ) = 0;
      virtual HRESULT __stdcall get_AllowOverrides (
        /*[out,retval]*/ int * pbAllowOverrides ) = 0;
      virtual HRESULT __stdcall put_AllowOverrides (
        /*[in]*/ int pbAllowOverrides ) = 0;
      virtual HRESULT __stdcall get_AntialiasWireframe (
        /*[out,retval]*/ int * pnAntialiasWireframe ) = 0;
      virtual HRESULT __stdcall put_AntialiasWireframe (
        /*[in]*/ int pnAntialiasWireframe ) = 0;
      virtual HRESULT __stdcall get_AntialiasSurface (
        /*[out,retval]*/ int * pnAntialiasSurface ) = 0;
      virtual HRESULT __stdcall put_AntialiasSurface (
        /*[in]*/ int pnAntialiasSurface ) = 0;
      virtual HRESULT __stdcall get_DepthFading (
        /*[out,retval]*/ int * pbDepthFading ) = 0;
      virtual HRESULT __stdcall put_DepthFading (
        /*[in]*/ int pbDepthFading ) = 0;
      virtual HRESULT __stdcall get_Perspective (
        /*[out,retval]*/ int * pbPerspective ) = 0;
      virtual HRESULT __stdcall put_Perspective (
        /*[in]*/ int pbPerspective ) = 0;
      virtual HRESULT __stdcall get_FocalLength (
        /*[out,retval]*/ long * pnFocalLength ) = 0;
      virtual HRESULT __stdcall put_FocalLength (
        /*[in]*/ long pnFocalLength ) = 0;
      virtual HRESULT __stdcall get_NumLights (
        /*[out,retval]*/ long * pnNumLights ) = 0;
      virtual HRESULT __stdcall get_AmbientColor (
        /*[out,retval]*/ long * plAmbientColor ) = 0;
      virtual HRESULT __stdcall put_AmbientColor (
        /*[in]*/ long plAmbientColor ) = 0;
      virtual HRESULT __stdcall get_AmbientIntensity (
        /*[out,retval]*/ float * pfAmbientIntensity ) = 0;
      virtual HRESULT __stdcall put_AmbientIntensity (
        /*[in]*/ float pfAmbientIntensity ) = 0;
      virtual HRESULT __stdcall get_AmbientRed (
        /*[out,retval]*/ float * pfAmbientRed ) = 0;
      virtual HRESULT __stdcall put_AmbientRed (
        /*[in]*/ float pfAmbientRed ) = 0;
      virtual HRESULT __stdcall get_AmbientGreen (
        /*[out,retval]*/ float * pfAmbientGreen ) = 0;
      virtual HRESULT __stdcall put_AmbientGreen (
        /*[in]*/ float pfAmbientGreen ) = 0;
      virtual HRESULT __stdcall get_AmbientBlue (
        /*[out,retval]*/ float * pfAmbientBlue ) = 0;
      virtual HRESULT __stdcall put_AmbientBlue (
        /*[in]*/ float pfAmbientBlue ) = 0;
      virtual HRESULT __stdcall get_HiddenLineMode (
        /*[out,retval]*/ long * pnHiddenLineMode ) = 0;
      virtual HRESULT __stdcall put_HiddenLineMode (
        /*[in]*/ long pnHiddenLineMode ) = 0;
      virtual HRESULT __stdcall get_DimPercentage (
        /*[out,retval]*/ float * pfDimPercentage ) = 0;
      virtual HRESULT __stdcall put_DimPercentage (
        /*[in]*/ float pfDimPercentage ) = 0;
      virtual HRESULT __stdcall get_IsBackgroundImageDisplayed (
        /*[out,retval]*/ int * pbIsBgImageDisplayed ) = 0;
      virtual HRESULT __stdcall raw_BeginPropertyBuffer ( ) = 0;
      virtual HRESULT __stdcall raw_FlushPropertyBuffer ( ) = 0;
      virtual HRESULT __stdcall raw_AddLight (
        /*[in]*/ float fRed,
        /*[in]*/ float fGreen,
        /*[in]*/ float fBlue,
        /*[in]*/ float fTheta,
        /*[in]*/ float fPhi,
        /*[out]*/ long * pnLight ) = 0;
      virtual HRESULT __stdcall raw_DeleteLight (
        /*[in]*/ long nLight ) = 0;
      virtual HRESULT __stdcall raw_GetLight (
        /*[in]*/ long nLight,
        /*[out]*/ float * pfRed,
        /*[out]*/ float * pfGreen,
        /*[out]*/ float * pfBlue,
        /*[out]*/ float * pfTheta,
        /*[out]*/ float * pfPhi ) = 0;
      virtual HRESULT __stdcall raw_SetLight (
        /*[in]*/ long nLight,
        /*[in]*/ float fRed,
        /*[in]*/ float fGreen,
        /*[in]*/ float fBlue,
        /*[in]*/ float fTheta,
        /*[in]*/ float fPhi ) = 0;
      virtual HRESULT __stdcall raw_GetLightColor (
        /*[in]*/ long nLight,
        /*[out]*/ long * plLightColor ) = 0;
      virtual HRESULT __stdcall raw_SetLightColor (
        /*[in]*/ long nLight,
        /*[in]*/ long lLightColor ) = 0;
      virtual HRESULT __stdcall raw_GetLightIntensity (
        /*[in]*/ long nLight,
        /*[out]*/ float * pfIntensity ) = 0;
      virtual HRESULT __stdcall raw_SetLightIntensity (
        /*[in]*/ long nLight,
        /*[in]*/ float fIntensity ) = 0;
      virtual HRESULT __stdcall raw_GetLightTheta (
        /*[in]*/ long nLight,
        /*[out]*/ float * pfTheta ) = 0;
      virtual HRESULT __stdcall raw_SetLightTheta (
        /*[in]*/ long nLight,
        /*[in]*/ float fTheta ) = 0;
      virtual HRESULT __stdcall raw_GetLightPhi (
        /*[in]*/ long nLight,
        /*[out]*/ float * pfPhi ) = 0;
      virtual HRESULT __stdcall raw_SetLightPhi (
        /*[in]*/ long nLight,
        /*[in]*/ float fPhi ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_RenderModeType (
        /*[out,retval]*/ enum SeRenderModeType * pnRenderMode ) = 0;
      virtual HRESULT __stdcall put_RenderModeType (
        /*[in]*/ enum SeRenderModeType pnRenderMode ) = 0;
      virtual HRESULT __stdcall get_SilhouettesEnabled (
        /*[out,retval]*/ VARIANT_BOOL * pbEnabled ) = 0;
      virtual HRESULT __stdcall put_SilhouettesEnabled (
        /*[in]*/ VARIANT_BOOL pbEnabled ) = 0;
      virtual HRESULT __stdcall get_StyleID (
        /*[out,retval]*/ long * plStyleID ) = 0;
      virtual HRESULT __stdcall raw_GetAnalysisParameters (
        /*[out]*/ enum SeAnalysisStateType * peState,
        /*[out]*/ enum SeAnalysisModeType * peMode,
        /*[out]*/ VARIANT * pQualityScale,
        /*[out]*/ VARIANT * pArg1,
        /*[out]*/ VARIANT * pArg2,
        /*[out]*/ VARIANT * pArg3,
        /*[out]*/ VARIANT * pArg4 ) = 0;
      virtual HRESULT __stdcall raw_SetAnalysisParameters (
        /*[in]*/ enum SeAnalysisStateType eState,
        /*[in]*/ enum SeAnalysisModeType eMode,
        /*[in]*/ VARIANT QualityScale = vtMissing,
        /*[in]*/ VARIANT Arg1 = vtMissing,
        /*[in]*/ VARIANT Arg2 = vtMissing,
        /*[in]*/ VARIANT Arg3 = vtMissing,
        /*[in]*/ VARIANT Arg4 = vtMissing ) = 0;
      virtual HRESULT __stdcall get_BackgroundType (
        /*[out,retval]*/ enum SeBackgroundType * pnBackgroundType ) = 0;
      virtual HRESULT __stdcall put_BackgroundType (
        /*[in]*/ enum SeBackgroundType pnBackgroundType ) = 0;
      virtual HRESULT __stdcall get_BackgroundImageFile (
        /*[out,retval]*/ BSTR * psBackgroundImageFile ) = 0;
      virtual HRESULT __stdcall put_BackgroundImageFile (
        /*[in]*/ BSTR psBackgroundImageFile ) = 0;
      virtual HRESULT __stdcall get_SkyboxType (
        /*[out,retval]*/ enum SeSkyboxType * peType ) = 0;
      virtual HRESULT __stdcall put_SkyboxType (
        /*[in]*/ enum SeSkyboxType peType ) = 0;
      virtual HRESULT __stdcall raw_SetSkyboxSkyFile (
        /*[in]*/ BSTR sFilename ) = 0;
      virtual HRESULT __stdcall raw_SetSkyboxSideFilename (
        /*[in]*/ int nSide,
        /*[in]*/ BSTR sFilename ) = 0;
      virtual HRESULT __stdcall raw_GetSkyboxSideFilename (
        /*[in]*/ int nSide,
        /*[out,retval]*/ BSTR * psFilename ) = 0;
      virtual HRESULT __stdcall raw_SkyboxClear (
        /*[in]*/ int nSide ) = 0;
      virtual HRESULT __stdcall raw_SkyboxClearAll ( ) = 0;
      virtual HRESULT __stdcall raw_GetSkyboxOrientation (
        /*[out]*/ float * pfxDirection,
        /*[out]*/ float * pfyDirection,
        /*[out]*/ float * pfzDirection,
        /*[out]*/ float * pfxUp,
        /*[out]*/ float * pfyUp,
        /*[out]*/ float * pfzUp,
        /*[out]*/ float * pfFieldOfView ) = 0;
      virtual HRESULT __stdcall raw_SetSkyboxOrientation (
        /*[in]*/ float fxDirection,
        /*[in]*/ float fyDirection,
        /*[in]*/ float fzDirection,
        /*[in]*/ float fxUp,
        /*[in]*/ float fyUp,
        /*[in]*/ float fzUp,
        /*[in]*/ float fFieldOfView ) = 0;
      virtual HRESULT __stdcall get_BackgroundMirrorX (
        /*[out,retval]*/ long * pbMirrorX ) = 0;
      virtual HRESULT __stdcall put_BackgroundMirrorX (
        /*[in]*/ long pbMirrorX ) = 0;
      virtual HRESULT __stdcall get_BackgroundMirrorY (
        /*[out,retval]*/ long * pbMirrorY ) = 0;
      virtual HRESULT __stdcall put_BackgroundMirrorY (
        /*[in]*/ long pbMirrorY ) = 0;
      virtual HRESULT __stdcall get_Textures (
        /*[out,retval]*/ long * pbTextures ) = 0;
      virtual HRESULT __stdcall put_Textures (
        /*[in]*/ long pbTextures ) = 0;
      virtual HRESULT __stdcall get_Reflections (
        /*[out,retval]*/ long * pbReflections ) = 0;
      virtual HRESULT __stdcall put_Reflections (
        /*[in]*/ long pbReflections ) = 0;
      virtual HRESULT __stdcall get_Bumpmaps (
        /*[out,retval]*/ long * pbBumpmaps ) = 0;
      virtual HRESULT __stdcall put_Bumpmaps (
        /*[in]*/ long pbBumpmaps ) = 0;
      virtual HRESULT __stdcall get_FloorReflection (
        /*[out,retval]*/ long * pbFloorReflection ) = 0;
      virtual HRESULT __stdcall put_FloorReflection (
        /*[in]*/ long pbFloorReflection ) = 0;
      virtual HRESULT __stdcall get_CastShadows (
        /*[out,retval]*/ long * pbCastShadows ) = 0;
      virtual HRESULT __stdcall put_CastShadows (
        /*[in]*/ long pbCastShadows ) = 0;
      virtual HRESULT __stdcall get_DropShadow (
        /*[out,retval]*/ long * pbDropShadow ) = 0;
      virtual HRESULT __stdcall put_DropShadow (
        /*[in]*/ long pbDropShadow ) = 0;
      virtual HRESULT __stdcall raw_SetGradientBackground (
        /*[in]*/ enum SeGradientType eType,
        /*[in]*/ long crColor1,
        /*[in]*/ long crColor2,
        /*[in]*/ VARIANT SpotCenterX = vtMissing,
        /*[in]*/ VARIANT SpotCenterY = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_GetGradientBackground (
        /*[out]*/ enum SeGradientType * peType,
        /*[out]*/ long * pcrColor1,
        /*[out]*/ long * pcrColor2,
        /*[out]*/ VARIANT * pSpotCenterX,
        /*[out]*/ VARIANT * pSpotCenterY ) = 0;
      virtual HRESULT __stdcall raw_SetGradientColor (
        /*[in]*/ int nColor,
        /*[in]*/ long crColor ) = 0;
      virtual HRESULT __stdcall raw_GetGradientColor (
        /*[in]*/ int nColor,
        /*[out,retval]*/ long * pcrColor ) = 0;
      virtual HRESULT __stdcall get_AntialiasLevel (
        /*[out,retval]*/ enum SeAntiAliasLevel * pnAntialiasLevel ) = 0;
      virtual HRESULT __stdcall put_AntialiasLevel (
        /*[in]*/ enum SeAntiAliasLevel pnAntialiasLevel ) = 0;
      virtual HRESULT __stdcall get_Silhouettes (
        /*[out,retval]*/ long * pbEnabled ) = 0;
      virtual HRESULT __stdcall put_Silhouettes (
        /*[in]*/ long pbEnabled ) = 0;
      virtual HRESULT __stdcall get_HiddenLines (
        /*[out,retval]*/ enum SeHiddenLineMode * peMode ) = 0;
      virtual HRESULT __stdcall put_HiddenLines (
        /*[in]*/ enum SeHiddenLineMode peMode ) = 0;
      virtual HRESULT __stdcall get_HighQuality (
        /*[out,retval]*/ long * pbHighQuality ) = 0;
      virtual HRESULT __stdcall put_HighQuality (
        /*[in]*/ long pbHighQuality ) = 0;
      virtual HRESULT __stdcall raw_ResetSkyboxOrientation ( ) = 0;
      virtual HRESULT __stdcall raw_DeleteSkybox ( ) = 0;
      virtual HRESULT __stdcall get_AmbientShadows (
        /*[out,retval]*/ long * pbAmbientShadows ) = 0;
      virtual HRESULT __stdcall put_AmbientShadows (
        /*[in]*/ long pbAmbientShadows ) = 0;
      virtual HRESULT __stdcall get_FloorShadow (
        /*[out,retval]*/ long * pbFloorShadow ) = 0;
      virtual HRESULT __stdcall put_FloorShadow (
        /*[in]*/ long pbFloorShadow ) = 0;
      virtual HRESULT __stdcall raw_GetLightFlags (
        /*[in]*/ long nLight,
        /*[out]*/ long * pnFlags ) = 0;
      virtual HRESULT __stdcall raw_SetLightFlags (
        /*[in]*/ long nLight,
        /*[in]*/ long nFlags ) = 0;
};

struct __declspec(uuid("ceed3412-d723-11ce-8173-08003601e504"))
ViewStyle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStyleName,put=PutStyleName))
    _bstr_t StyleName;
    __declspec(property(get=GetParent,put=PutParent))
    _bstr_t Parent;
    __declspec(property(get=GetRenderMode,put=PutRenderMode))
    long RenderMode;
    __declspec(property(get=GetAllowOverrides,put=PutAllowOverrides))
    int AllowOverrides;
    __declspec(property(get=GetAntialiasWireframe,put=PutAntialiasWireframe))
    int AntialiasWireframe;
    __declspec(property(get=GetAntialiasSurface,put=PutAntialiasSurface))
    int AntialiasSurface;
    __declspec(property(get=GetDepthFading,put=PutDepthFading))
    int DepthFading;
    __declspec(property(get=GetPerspective,put=PutPerspective))
    int Perspective;
    __declspec(property(get=GetFocalLength,put=PutFocalLength))
    long FocalLength;
    __declspec(property(get=GetNumLights))
    long NumLights;
    __declspec(property(get=GetAmbientColor,put=PutAmbientColor))
    long AmbientColor;
    __declspec(property(get=GetAmbientIntensity,put=PutAmbientIntensity))
    float AmbientIntensity;
    __declspec(property(get=GetAmbientRed,put=PutAmbientRed))
    float AmbientRed;
    __declspec(property(get=GetAmbientGreen,put=PutAmbientGreen))
    float AmbientGreen;
    __declspec(property(get=GetAmbientBlue,put=PutAmbientBlue))
    float AmbientBlue;
    __declspec(property(get=GetHiddenLineMode,put=PutHiddenLineMode))
    long HiddenLineMode;
    __declspec(property(get=GetDimPercentage,put=PutDimPercentage))
    float DimPercentage;
    __declspec(property(get=GetIsBackgroundImageDisplayed))
    int IsBackgroundImageDisplayed;
    __declspec(property(get=GetRenderModeType,put=PutRenderModeType))
    enum SeRenderModeType RenderModeType;
    __declspec(property(get=GetSilhouettesEnabled,put=PutSilhouettesEnabled))
    VARIANT_BOOL SilhouettesEnabled;
    __declspec(property(get=GetStyleID))
    long StyleID;
    __declspec(property(get=GetBackgroundType,put=PutBackgroundType))
    enum SeBackgroundType BackgroundType;
    __declspec(property(get=GetBackgroundImageFile,put=PutBackgroundImageFile))
    _bstr_t BackgroundImageFile;
    __declspec(property(get=GetSkyboxType,put=PutSkyboxType))
    enum SeSkyboxType SkyboxType;
    __declspec(property(get=GetBackgroundMirrorX,put=PutBackgroundMirrorX))
    long BackgroundMirrorX;
    __declspec(property(get=GetBackgroundMirrorY,put=PutBackgroundMirrorY))
    long BackgroundMirrorY;
    __declspec(property(get=GetTextures,put=PutTextures))
    long Textures;
    __declspec(property(get=GetBumpmaps,put=PutBumpmaps))
    long Bumpmaps;
    __declspec(property(get=GetReflections,put=PutReflections))
    long Reflections;
    __declspec(property(get=GetFloorReflection,put=PutFloorReflection))
    long FloorReflection;
    __declspec(property(get=GetCastShadows,put=PutCastShadows))
    long CastShadows;
    __declspec(property(get=GetDropShadow,put=PutDropShadow))
    long DropShadow;
    __declspec(property(get=GetAntialiasLevel,put=PutAntialiasLevel))
    enum SeAntiAliasLevel AntialiasLevel;
    __declspec(property(get=GetSilhouettes,put=PutSilhouettes))
    long Silhouettes;
    __declspec(property(get=GetHiddenLines,put=PutHiddenLines))
    enum SeHiddenLineMode HiddenLines;
    __declspec(property(get=GetHighQuality,put=PutHighQuality))
    long HighQuality;
    __declspec(property(get=GetAmbientShadows,put=PutAmbientShadows))
    long AmbientShadows;
    __declspec(property(get=GetFloorShadow,put=PutFloorShadow))
    long FloorShadow;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _bstr_t GetStyleName ( );
    void PutStyleName (
        _bstr_t _arg1 );
    _bstr_t GetParent ( );
    void PutParent (
        _bstr_t _arg1 );
    long GetRenderMode ( );
    void PutRenderMode (
        long _arg1 );
    int GetAllowOverrides ( );
    void PutAllowOverrides (
        int _arg1 );
    int GetAntialiasWireframe ( );
    void PutAntialiasWireframe (
        int _arg1 );
    int GetAntialiasSurface ( );
    void PutAntialiasSurface (
        int _arg1 );
    int GetDepthFading ( );
    void PutDepthFading (
        int _arg1 );
    int GetPerspective ( );
    void PutPerspective (
        int _arg1 );
    long GetFocalLength ( );
    void PutFocalLength (
        long _arg1 );
    long GetNumLights ( );
    long GetAmbientColor ( );
    void PutAmbientColor (
        long _arg1 );
    float GetAmbientIntensity ( );
    void PutAmbientIntensity (
        float _arg1 );
    float GetAmbientRed ( );
    void PutAmbientRed (
        float _arg1 );
    float GetAmbientGreen ( );
    void PutAmbientGreen (
        float _arg1 );
    float GetAmbientBlue ( );
    void PutAmbientBlue (
        float _arg1 );
    long GetHiddenLineMode ( );
    void PutHiddenLineMode (
        long _arg1 );
    float GetDimPercentage ( );
    void PutDimPercentage (
        float _arg1 );
    int GetIsBackgroundImageDisplayed ( );
    HRESULT BeginPropertyBuffer ( );
    HRESULT FlushPropertyBuffer ( );
    HRESULT AddLight (
        float fRed,
        float fGreen,
        float fBlue,
        float fTheta,
        float fPhi,
        long * pnLight );
    HRESULT DeleteLight (
        long nLight );
    HRESULT GetLight (
        long nLight,
        float * pfRed,
        float * pfGreen,
        float * pfBlue,
        float * pfTheta,
        float * pfPhi );
    HRESULT SetLight (
        long nLight,
        float fRed,
        float fGreen,
        float fBlue,
        float fTheta,
        float fPhi );
    HRESULT GetLightColor (
        long nLight,
        long * plLightColor );
    HRESULT SetLightColor (
        long nLight,
        long lLightColor );
    HRESULT GetLightIntensity (
        long nLight,
        float * pfIntensity );
    HRESULT SetLightIntensity (
        long nLight,
        float fIntensity );
    HRESULT GetLightTheta (
        long nLight,
        float * pfTheta );
    HRESULT SetLightTheta (
        long nLight,
        float fTheta );
    HRESULT GetLightPhi (
        long nLight,
        float * pfPhi );
    HRESULT SetLightPhi (
        long nLight,
        float fPhi );
    HRESULT Delete ( );
    enum SeRenderModeType GetRenderModeType ( );
    void PutRenderModeType (
        enum SeRenderModeType _arg1 );
    VARIANT_BOOL GetSilhouettesEnabled ( );
    void PutSilhouettesEnabled (
        VARIANT_BOOL _arg1 );
    long GetStyleID ( );
    HRESULT GetAnalysisParameters (
        enum SeAnalysisStateType * peState,
        enum SeAnalysisModeType * peMode,
        VARIANT * pQualityScale = &vtMissing,
        VARIANT * pArg1 = &vtMissing,
        VARIANT * pArg2 = &vtMissing,
        VARIANT * pArg3 = &vtMissing,
        VARIANT * pArg4 = &vtMissing );
    HRESULT SetAnalysisParameters (
        enum SeAnalysisStateType eState,
        enum SeAnalysisModeType eMode,
        const _variant_t & QualityScale = vtMissing,
        const _variant_t & Arg1 = vtMissing,
        const _variant_t & Arg2 = vtMissing,
        const _variant_t & Arg3 = vtMissing,
        const _variant_t & Arg4 = vtMissing );
    enum SeBackgroundType GetBackgroundType ( );
    void PutBackgroundType (
        enum SeBackgroundType _arg1 );
    _bstr_t GetBackgroundImageFile ( );
    void PutBackgroundImageFile (
        _bstr_t _arg1 );
    enum SeSkyboxType GetSkyboxType ( );
    void PutSkyboxType (
        enum SeSkyboxType _arg1 );
    HRESULT SetSkyboxSkyFile (
        _bstr_t sFilename );
    HRESULT SetSkyboxSideFilename (
        int nSide,
        _bstr_t sFilename );
    _bstr_t GetSkyboxSideFilename (
        int nSide );
    HRESULT SkyboxClear (
        int nSide );
    HRESULT SkyboxClearAll ( );
    HRESULT GetSkyboxOrientation (
        float * pfxDirection,
        float * pfyDirection,
        float * pfzDirection,
        float * pfxUp,
        float * pfyUp,
        float * pfzUp,
        float * pfFieldOfView );
    HRESULT SetSkyboxOrientation (
        float fxDirection,
        float fyDirection,
        float fzDirection,
        float fxUp,
        float fyUp,
        float fzUp,
        float fFieldOfView );
    long GetBackgroundMirrorX ( );
    void PutBackgroundMirrorX (
        long _arg1 );
    long GetBackgroundMirrorY ( );
    void PutBackgroundMirrorY (
        long _arg1 );
    long GetTextures ( );
    void PutTextures (
        long _arg1 );
    long GetReflections ( );
    void PutReflections (
        long _arg1 );
    long GetBumpmaps ( );
    void PutBumpmaps (
        long _arg1 );
    long GetFloorReflection ( );
    void PutFloorReflection (
        long _arg1 );
    long GetCastShadows ( );
    void PutCastShadows (
        long _arg1 );
    long GetDropShadow ( );
    void PutDropShadow (
        long _arg1 );
    HRESULT SetGradientBackground (
        enum SeGradientType eType,
        long crColor1,
        long crColor2,
        const _variant_t & SpotCenterX = vtMissing,
        const _variant_t & SpotCenterY = vtMissing );
    HRESULT GetGradientBackground (
        enum SeGradientType * peType,
        long * pcrColor1,
        long * pcrColor2,
        VARIANT * pSpotCenterX = &vtMissing,
        VARIANT * pSpotCenterY = &vtMissing );
    HRESULT SetGradientColor (
        int nColor,
        long crColor );
    long GetGradientColor (
        int nColor );
    enum SeAntiAliasLevel GetAntialiasLevel ( );
    void PutAntialiasLevel (
        enum SeAntiAliasLevel _arg1 );
    long GetSilhouettes ( );
    void PutSilhouettes (
        long _arg1 );
    enum SeHiddenLineMode GetHiddenLines ( );
    void PutHiddenLines (
        enum SeHiddenLineMode _arg1 );
    long GetHighQuality ( );
    void PutHighQuality (
        long _arg1 );
    HRESULT ResetSkyboxOrientation ( );
    HRESULT DeleteSkybox ( );
    long GetAmbientShadows ( );
    void PutAmbientShadows (
        long _arg1 );
    long GetFloorShadow ( );
    void PutFloorShadow (
        long _arg1 );
    HRESULT GetLightFlags (
        long nLight,
        long * pnFlags );
    HRESULT SetLightFlags (
        long nLight,
        long nFlags );
};

struct __declspec(uuid("ceed3414-d723-11ce-8173-08003601e504"))
_IViewStylesAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    ViewStylePtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    IDispatchPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    ViewStylePtr Add (
        _bstr_t Name,
        _bstr_t Parent );
    HRESULT Remove (
        _bstr_t Name );
    IDispatchPtr GetStyleByID (
        long StyleID );
    ViewStylePtr AddFromFile (
        _bstr_t Filename,
        _bstr_t StyleName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ViewStyle * * pItem ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pEnum ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * pApp ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * pParent ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Parent,
        /*[out,retval]*/ struct ViewStyle * * ViewStyle ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall raw_GetStyleByID (
        /*[in]*/ long StyleID,
        /*[out,retval]*/ IDispatch * * pItem ) = 0;
      virtual HRESULT __stdcall raw_AddFromFile (
        /*[in]*/ BSTR Filename,
        /*[in]*/ BSTR StyleName,
        /*[out,retval]*/ struct ViewStyle * * ViewStyle ) = 0;
};

struct __declspec(uuid("8ff2dd01-19b3-11d1-aeaf-08003616ce02"))
_IReferenceAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetObject))
    IDispatchPtr Object;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    enum ObjectType Type;
    __declspec(property(get=GetImmediateParent))
    IDispatchPtr ImmediateParent;
    __declspec(property(get=GetStyle,put=PutStyle))
    _bstr_t Style;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    IDispatchPtr GetObject ( );
    IDispatchPtr GetParent ( );
    enum ObjectType GetType ( );
    HRESULT GetMatrix (
        SAFEARRAY * * Matrix );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    IDispatchPtr GetImmediateParent ( );
    _bstr_t GetStyle ( );
    void PutStyle (
        _bstr_t Style );
    HRESULT GetOccurrencesInPath (
        IDispatch * * TopOccurrence,
        long * NumSubOccurrencesInPath,
        long * NumBoundSubOccurrencesInPath,
        SAFEARRAY * * BoundSubOccurrencesInPath );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * Application ) = 0;
      virtual HRESULT __stdcall get_Object (
        /*[out,retval]*/ IDispatch * * Object ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ObjectType * Type ) = 0;
      virtual HRESULT __stdcall raw_GetMatrix (
        /*[in,out]*/ SAFEARRAY * * Matrix ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
      virtual HRESULT __stdcall get_ImmediateParent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ BSTR * Style ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ BSTR Style ) = 0;
      virtual HRESULT __stdcall raw_GetOccurrencesInPath (
        /*[out]*/ IDispatch * * TopOccurrence,
        /*[out]*/ long * NumSubOccurrencesInPath,
        /*[out]*/ long * NumBoundSubOccurrencesInPath,
        /*[in,out]*/ SAFEARRAY * * BoundSubOccurrencesInPath ) = 0;
};

enum RouteType
{
    igOneAfterAnother = 0,
    igAllAtOnce = 1
};

enum RouteStatus
{
    igInvalidSlip = 0,
    igRouteComplete = 1,
    igNotYetRouted = 2,
    igRouteInProgress = 3
};

struct __declspec(uuid("c50df910-29a8-11ce-bf0e-08003601c1be"))
_IRoutingSlipAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetSubject,put=PutSubject))
    _bstr_t Subject;
    __declspec(property(get=GetReturnWhenDone,put=PutReturnWhenDone))
    VARIANT_BOOL ReturnWhenDone;
    __declspec(property(get=GetMessage,put=PutMessage))
    _bstr_t Message;
    __declspec(property(put=PutRecipients))
    _variant_t Recipients;
    __declspec(property(get=GetDelivery,put=PutDelivery))
    enum RouteType Delivery;
    __declspec(property(get=GetStatus))
    enum RouteStatus Status;
    __declspec(property(get=GetHasRouted))
    VARIANT_BOOL HasRouted;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetTrackStatus,put=PutTrackStatus))
    VARIANT_BOOL TrackStatus;
    __declspec(property(get=GetAskForApproval,put=PutAskForApproval))
    VARIANT_BOOL AskForApproval;
    __declspec(property(get=GetApprove,put=PutApprove))
    VARIANT_BOOL Approve;
    __declspec(property(get=GetApproved))
    VARIANT_BOOL Approved;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    void PutSubject (
        _bstr_t bsSubject );
    _bstr_t GetSubject ( );
    void PutReturnWhenDone (
        VARIANT_BOOL pReturn );
    VARIANT_BOOL GetReturnWhenDone ( );
    void PutMessage (
        _bstr_t pbsMessage );
    _bstr_t GetMessage ( );
    void PutRecipients (
        const _variant_t & _arg1 );
    void PutDelivery (
        enum RouteType RoutMethod );
    enum RouteType GetDelivery ( );
    enum RouteStatus GetStatus ( );
    VARIANT_BOOL GetHasRouted ( );
    IDispatchPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    void PutTrackStatus (
        VARIANT_BOOL TrackStatus );
    VARIANT_BOOL GetTrackStatus ( );
    void PutAskForApproval (
        VARIANT_BOOL pAskApproval );
    VARIANT_BOOL GetAskForApproval ( );
    void PutApprove (
        VARIANT_BOOL pApprove );
    VARIANT_BOOL GetApprove ( );
    VARIANT_BOOL GetApproved ( );
    VARIANT_BOOL GetRouteInfo ( );
    HRESULT AddRecipient (
        _bstr_t bsRecip );
    HRESULT Route (
        const _variant_t & ConfirmRoute = vtMissing );
    HRESULT Reset ( );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Subject (
        /*[in]*/ BSTR bsSubject ) = 0;
      virtual HRESULT __stdcall get_Subject (
        /*[out,retval]*/ BSTR * bsSubject ) = 0;
      virtual HRESULT __stdcall put_ReturnWhenDone (
        /*[in]*/ VARIANT_BOOL pReturn ) = 0;
      virtual HRESULT __stdcall get_ReturnWhenDone (
        /*[out,retval]*/ VARIANT_BOOL * pReturn ) = 0;
      virtual HRESULT __stdcall put_Message (
        /*[in]*/ BSTR pbsMessage ) = 0;
      virtual HRESULT __stdcall get_Message (
        /*[out,retval]*/ BSTR * pbsMessage ) = 0;
      virtual HRESULT __stdcall put_Recipients (
        /*[in]*/ VARIANT _arg1 ) = 0;
      virtual HRESULT __stdcall put_Delivery (
        /*[in]*/ enum RouteType RoutMethod ) = 0;
      virtual HRESULT __stdcall get_Delivery (
        /*[out,retval]*/ enum RouteType * RoutMethod ) = 0;
      virtual HRESULT __stdcall get_Status (
        /*[out,retval]*/ enum RouteStatus * RouteStatus ) = 0;
      virtual HRESULT __stdcall get_HasRouted (
        /*[out,retval]*/ VARIANT_BOOL * HasRouted ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * lpApplication ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * lpParent ) = 0;
      virtual HRESULT __stdcall put_TrackStatus (
        /*[in]*/ VARIANT_BOOL TrackStatus ) = 0;
      virtual HRESULT __stdcall get_TrackStatus (
        /*[out,retval]*/ VARIANT_BOOL * TrackStatus ) = 0;
      virtual HRESULT __stdcall put_AskForApproval (
        /*[in]*/ VARIANT_BOOL pAskApproval ) = 0;
      virtual HRESULT __stdcall get_AskForApproval (
        /*[out,retval]*/ VARIANT_BOOL * pAskApproval ) = 0;
      virtual HRESULT __stdcall put_Approve (
        /*[in]*/ VARIANT_BOOL pApprove ) = 0;
      virtual HRESULT __stdcall get_Approve (
        /*[out,retval]*/ VARIANT_BOOL * pApprove ) = 0;
      virtual HRESULT __stdcall get_Approved (
        /*[out,retval]*/ VARIANT_BOOL * pVoted ) = 0;
      virtual HRESULT __stdcall raw_GetRouteInfo (
        /*[out,retval]*/ VARIANT_BOOL * pbRoute ) = 0;
      virtual HRESULT __stdcall raw_AddRecipient (
        /*[in]*/ BSTR bsRecip ) = 0;
      virtual HRESULT __stdcall raw_Route (
        /*[in]*/ VARIANT ConfirmRoute = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Reset ( ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
};

struct __declspec(uuid("aed8fe61-3129-11d1-bc83-0800360e1e02"))
Properties : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetName))
    _bstr_t Name;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetCount ( );
    IDispatchPtr GetParent ( );
    ApplicationPtr GetApplication ( );
    _bstr_t GetName ( );
    PropertyPtr Item (
        const _variant_t & vIndex );
    HRESULT Save ( );
    PropertyPtr Add (
        const _variant_t & Name,
        const _variant_t & Value );
    PropertyPtr PropertyByID (
        const _variant_t & vIndex );
};

struct __declspec(uuid("d6fc1080-54db-11ce-87e4-08003601aa14"))
_IPropertySetsAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IDispatchPtr GetParent ( );
    ApplicationPtr GetApplication ( );
    IUnknownPtr Get_NewEnum ( );
    PropertiesPtr Item (
        const _variant_t & vIndex );
    HRESULT Save ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct Application * * Application ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Unknown ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT vIndex,
        /*[out,retval]*/ struct Properties * * Item ) = 0;
      virtual HRESULT __stdcall raw_Save ( ) = 0;
};

struct __declspec(uuid("aed8fe63-3129-11d1-bc83-0800360e1e02"))
Property : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetType))
    _variant_t Type;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _bstr_t GetName ( );
    _variant_t GetValue ( );
    void PutValue (
        VARIANT * _arg1 );
    _variant_t GetType ( );
    HRESULT Delete ( );
    _variant_t Id ( );
};

struct __declspec(uuid("e8bd0e70-5a5f-11ce-87e4-08003601aa14"))
_IPropertiesAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IDispatchPtr GetParent ( );
    ApplicationPtr GetApplication ( );
    IUnknownPtr Get_NewEnum ( );
    _bstr_t GetName ( );
    PropertyPtr Item (
        const _variant_t & vIndex );
    HRESULT Save ( );
    PropertyPtr Add (
        const _variant_t & Name,
        const _variant_t & Value );
    PropertyPtr PropertyByID (
        const _variant_t & vIndex );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct Application * * Application ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Unknown ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT vIndex,
        /*[out,retval]*/ struct Property * * Item ) = 0;
      virtual HRESULT __stdcall raw_Save ( ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Name,
        /*[in]*/ VARIANT Value,
        /*[out,retval]*/ struct Property * * Property ) = 0;
      virtual HRESULT __stdcall raw_PropertyByID (
        /*[in]*/ VARIANT vIndex,
        /*[out,retval]*/ struct Property * * Property ) = 0;
};

struct __declspec(uuid("85c981a0-5e4c-11ce-87e4-08003601aa14"))
_IPropertyAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetType))
    _variant_t Type;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    _variant_t GetValue ( );
    void PutValue (
        VARIANT * Value );
    _variant_t GetType ( );
    HRESULT Delete ( );
    _variant_t Id ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * bstName ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ VARIANT * Type ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Id (
        /*[out,retval]*/ VARIANT * pvPID ) = 0;
};

struct __declspec(uuid("a0cfaaba-2f1a-436c-bd53-f8a54d8cfafd"))
_IPropertyExAuto : _IPropertyAuto
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT GetProps (
        BSTR * bstName,
        VARIANT * Value,
        VARIANT * Type );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetProps (
        /*[out]*/ BSTR * bstName,
        /*[out]*/ VARIANT * Value,
        /*[out]*/ VARIANT * Type ) = 0;
};

struct __declspec(uuid("a745cf30-6949-11ce-87e4-08003601bd52"))
_ISummaryInfoAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetAccessDate))
    _variant_t AccessDate;
    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetAuthor,put=PutAuthor))
    _bstr_t Author;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetComments,put=PutComments))
    _bstr_t Comments;
    __declspec(property(get=GetCompany,put=PutCompany))
    _bstr_t Company;
    __declspec(property(get=GetCreateApp,put=PutCreateApp))
    _bstr_t CreateApp;
    __declspec(property(get=GetCreateDate))
    _variant_t CreateDate;
    __declspec(property(get=GetCreationLocale))
    long CreationLocale;
    __declspec(property(get=GetDocumentNumber,put=PutDocumentNumber))
    _bstr_t DocumentNumber;
    __declspec(property(get=GetKeywords,put=PutKeywords))
    _bstr_t Keywords;
    __declspec(property(get=GetLastSavedBy,put=PutLastSavedBy))
    _bstr_t LastSavedBy;
    __declspec(property(get=GetManager,put=PutManager))
    _bstr_t Manager;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetProjectName,put=PutProjectName))
    _bstr_t ProjectName;
    __declspec(property(get=GetRevisionNumber,put=PutRevisionNumber))
    _bstr_t RevisionNumber;
    __declspec(property(get=GetSaveApp,put=PutSaveApp))
    _bstr_t SaveApp;
    __declspec(property(get=GetSaveDate))
    _variant_t SaveDate;
    __declspec(property(get=GetSubject,put=PutSubject))
    _bstr_t Subject;
    __declspec(property(get=GetTemplate,put=PutTemplate))
    _bstr_t Template;
    __declspec(property(get=GetTitle,put=PutTitle))
    _bstr_t Title;
    __declspec(property(get=GetTotalEdits,put=PutTotalEdits))
    _bstr_t TotalEdits;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetAccessDate ( );
    ApplicationPtr GetApplication ( );
    _bstr_t GetAuthor ( );
    void PutAuthor (
        _bstr_t vValue );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t vValue );
    _bstr_t GetComments ( );
    void PutComments (
        _bstr_t vValue );
    _bstr_t GetCompany ( );
    void PutCompany (
        _bstr_t vValue );
    _bstr_t GetCreateApp ( );
    void PutCreateApp (
        _bstr_t vValue );
    _variant_t GetCreateDate ( );
    long GetCreationLocale ( );
    _bstr_t GetDocumentNumber ( );
    void PutDocumentNumber (
        _bstr_t vValue );
    _bstr_t GetKeywords ( );
    void PutKeywords (
        _bstr_t vValue );
    _bstr_t GetLastSavedBy ( );
    void PutLastSavedBy (
        _bstr_t vValue );
    _bstr_t GetManager ( );
    void PutManager (
        _bstr_t vValue );
    IDispatchPtr GetParent ( );
    _bstr_t GetProjectName ( );
    void PutProjectName (
        _bstr_t vValue );
    _bstr_t GetRevisionNumber ( );
    void PutRevisionNumber (
        _bstr_t vValue );
    _bstr_t GetSaveApp ( );
    void PutSaveApp (
        _bstr_t vValue );
    _variant_t GetSaveDate ( );
    _bstr_t GetSubject ( );
    void PutSubject (
        _bstr_t vValue );
    _bstr_t GetTemplate ( );
    void PutTemplate (
        _bstr_t vValue );
    _bstr_t GetTitle ( );
    void PutTitle (
        _bstr_t vValue );
    _bstr_t GetTotalEdits ( );
    void PutTotalEdits (
        _bstr_t vValue );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AccessDate (
        /*[out,retval]*/ VARIANT * vValue ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct Application * * lpApp ) = 0;
      virtual HRESULT __stdcall get_Author (
        /*[out,retval]*/ BSTR * vValue ) = 0;
      virtual HRESULT __stdcall put_Author (
        /*[in]*/ BSTR vValue ) = 0;
      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * vValue ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR vValue ) = 0;
      virtual HRESULT __stdcall get_Comments (
        /*[out,retval]*/ BSTR * vValue ) = 0;
      virtual HRESULT __stdcall put_Comments (
        /*[in]*/ BSTR vValue ) = 0;
      virtual HRESULT __stdcall get_Company (
        /*[out,retval]*/ BSTR * vValue ) = 0;
      virtual HRESULT __stdcall put_Company (
        /*[in]*/ BSTR vValue ) = 0;
      virtual HRESULT __stdcall get_CreateApp (
        /*[out,retval]*/ BSTR * vValue ) = 0;
      virtual HRESULT __stdcall put_CreateApp (
        /*[in]*/ BSTR vValue ) = 0;
      virtual HRESULT __stdcall get_CreateDate (
        /*[out,retval]*/ VARIANT * vValue ) = 0;
      virtual HRESULT __stdcall get_CreationLocale (
        /*[out,retval]*/ long * vValue ) = 0;
      virtual HRESULT __stdcall get_DocumentNumber (
        /*[out,retval]*/ BSTR * vValue ) = 0;
      virtual HRESULT __stdcall put_DocumentNumber (
        /*[in]*/ BSTR vValue ) = 0;
      virtual HRESULT __stdcall get_Keywords (
        /*[out,retval]*/ BSTR * vValue ) = 0;
      virtual HRESULT __stdcall put_Keywords (
        /*[in]*/ BSTR vValue ) = 0;
      virtual HRESULT __stdcall get_LastSavedBy (
        /*[out,retval]*/ BSTR * vValue ) = 0;
      virtual HRESULT __stdcall put_LastSavedBy (
        /*[in]*/ BSTR vValue ) = 0;
      virtual HRESULT __stdcall get_Manager (
        /*[out,retval]*/ BSTR * vValue ) = 0;
      virtual HRESULT __stdcall put_Manager (
        /*[in]*/ BSTR vValue ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * lpParent ) = 0;
      virtual HRESULT __stdcall get_ProjectName (
        /*[out,retval]*/ BSTR * vValue ) = 0;
      virtual HRESULT __stdcall put_ProjectName (
        /*[in]*/ BSTR vValue ) = 0;
      virtual HRESULT __stdcall get_RevisionNumber (
        /*[out,retval]*/ BSTR * vValue ) = 0;
      virtual HRESULT __stdcall put_RevisionNumber (
        /*[in]*/ BSTR vValue ) = 0;
      virtual HRESULT __stdcall get_SaveApp (
        /*[out,retval]*/ BSTR * vValue ) = 0;
      virtual HRESULT __stdcall put_SaveApp (
        /*[in]*/ BSTR vValue ) = 0;
      virtual HRESULT __stdcall get_SaveDate (
        /*[out,retval]*/ VARIANT * vValue ) = 0;
      virtual HRESULT __stdcall get_Subject (
        /*[out,retval]*/ BSTR * vValue ) = 0;
      virtual HRESULT __stdcall put_Subject (
        /*[in]*/ BSTR vValue ) = 0;
      virtual HRESULT __stdcall get_Template (
        /*[out,retval]*/ BSTR * vValue ) = 0;
      virtual HRESULT __stdcall put_Template (
        /*[in]*/ BSTR vValue ) = 0;
      virtual HRESULT __stdcall get_Title (
        /*[out,retval]*/ BSTR * vValue ) = 0;
      virtual HRESULT __stdcall put_Title (
        /*[in]*/ BSTR vValue ) = 0;
      virtual HRESULT __stdcall get_TotalEdits (
        /*[out,retval]*/ BSTR * vValue ) = 0;
      virtual HRESULT __stdcall put_TotalEdits (
        /*[in]*/ BSTR vValue ) = 0;
};

struct __declspec(uuid("89694167-9634-11d3-a3fe-0004ac969602"))
AttributeSet : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetSetName))
    _bstr_t SetName;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetCount ( );
    AttributePtr Item (
        const _variant_t & Index );
    AttributePtr Add (
        _bstr_t Name,
        enum AttributeTypeConstants Type );
    HRESULT Remove (
        _bstr_t Name );
    _bstr_t GetSetName ( );
};

struct __declspec(uuid("7575d492-9633-11d3-a3fe-0004ac969602"))
_IAttributeSetsAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    AttributeSetPtr Item (
        const _variant_t & Index );
    AttributeSetPtr Add (
        _bstr_t Name );
    HRESULT Remove (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Enum ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct AttributeSet * * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct AttributeSet * * AttributeSet ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR Name ) = 0;
};

struct __declspec(uuid("89694168-9634-11d3-a3fe-0004ac969602"))
Attribute : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetType))
    enum AttributeTypeConstants Type;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _bstr_t GetName ( );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & _arg1 );
    enum AttributeTypeConstants GetType ( );
};

enum AttributeTypeConstants
{
    seByte = 16,
    seInteger = 2,
    seLong = 3,
    seSingle = 4,
    seDouble = 5,
    seCurrency = 6,
    seDate = 7,
    seStringANSI = 8,
    seStringUnicode = 64,
    seBoolean = 11,
    seByteArray = 8209
};

struct __declspec(uuid("7575d499-9633-11d3-a3fe-0004ac969602"))
_IAttributeSetAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetSetName))
    _bstr_t SetName;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    AttributePtr Item (
        const _variant_t & Index );
    AttributePtr Add (
        _bstr_t Name,
        enum AttributeTypeConstants Type );
    HRESULT Remove (
        _bstr_t Name );
    _bstr_t GetSetName ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Enum ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Attribute * * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ enum AttributeTypeConstants Type,
        /*[out,retval]*/ struct Attribute * * Attribute ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_SetName (
        /*[out,retval]*/ BSTR * Name ) = 0;
};

struct __declspec(uuid("7575d49f-9633-11d3-a3fe-0004ac969602"))
_IAttributeAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetType))
    enum AttributeTypeConstants Type;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & Value );
    enum AttributeTypeConstants GetType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT * Value ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ VARIANT Value ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum AttributeTypeConstants * Type ) = 0;
};

struct __declspec(uuid("120662e2-4190-11d2-9948-080036947803"))
QueryObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr Item (
        long Index );
    IDispatchPtr GetParent ( );
};

struct __declspec(uuid("a49cfe92-40b3-11d2-9948-080036947803"))
_IAttributeQueryAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    QueryObjectsPtr QueryByName (
        const _variant_t & AttributeSetName = vtMissing,
        const _variant_t & AttributeName = vtMissing );
    ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_QueryByName (
        /*[in]*/ VARIANT AttributeSetName,
        /*[in]*/ VARIANT AttributeName,
        /*[out,retval]*/ struct QueryObjects * * QueryObjects ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
};

struct __declspec(uuid("a49cfe93-40b3-11d2-9948-080036947803"))
_IQueryObjectsAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr Item (
        long Index );
    IDispatchPtr GetParent ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ long Index,
        /*[out,retval]*/ IDispatch * * Item ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
};

struct __declspec(uuid("c2c04aba-c764-11d2-bec4-080036b4d502"))
HighlightSet : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetColor,put=PutColor))
    long Color;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT AddItem (
        IDispatch * Item );
    HRESULT AddSelected ( );
    HRESULT RemoveItem (
        const _variant_t & Index );
    HRESULT RemoveAll ( );
    HRESULT Draw ( );
    HRESULT Delete ( );
    long GetCount ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    long GetColor ( );
    void PutColor (
        long _arg1 );
    HRESULT SetTransform (
        SAFEARRAY * * Matrix );
    HRESULT ClearTransform ( );
};

struct __declspec(uuid("c2c04ac6-c764-11d2-bec4-080036b4d502"))
_IHighlightSetsAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    HighlightSetPtr Item (
        const _variant_t & Index );
    HighlightSetPtr Add ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Enum ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct HighlightSet * * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[out,retval]*/ struct HighlightSet * * HighlightSet ) = 0;
};

struct __declspec(uuid("c2c04ad4-c764-11d2-bec4-080036b4d502"))
_IHighlightSetAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetColor,put=PutColor))
    long Color;

    //
    // Wrapper methods for error-handling
    //

    HRESULT AddItem (
        IDispatch * Item );
    HRESULT AddSelected ( );
    HRESULT RemoveItem (
        const _variant_t & Index );
    HRESULT RemoveAll ( );
    HRESULT Draw ( );
    HRESULT Delete ( );
    long GetCount ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    long GetColor ( );
    void PutColor (
        long Color );
    HRESULT SetTransform (
        SAFEARRAY * * Matrix );
    HRESULT ClearTransform ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AddItem (
        /*[in]*/ IDispatch * Item ) = 0;
      virtual HRESULT __stdcall raw_AddSelected ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveItem (
        /*[in]*/ VARIANT Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall raw_Draw ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * Item ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ long * Color ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ long Color ) = 0;
      virtual HRESULT __stdcall raw_SetTransform (
        /*[in]*/ SAFEARRAY * * Matrix ) = 0;
      virtual HRESULT __stdcall raw_ClearTransform ( ) = 0;
};

struct __declspec(uuid("e3946111-6037-11d3-aed8-00500471c49e"))
_ISEGenericCollectionAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IDispatchPtr Item (
        const _variant_t & Index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Enum ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * Item ) = 0;
};

struct __declspec(uuid("5316a1d8-6a47-4bd2-955f-a28869a77277"))
NamedViews : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetNames))
    SAFEARRAY * Names;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetCount ( );
    SAFEARRAY * GetNames ( );
    NamedViewPtr Create (
        _bstr_t Name );
    NamedViewPtr GetByName (
        _bstr_t Name );
    HRESULT Remove (
        _bstr_t Name );
    HRESULT Rename (
        _bstr_t currName,
        _bstr_t NewName );
    NamedViewPtr Item (
        const _variant_t & Index );
};

struct __declspec(uuid("431df110-2d0d-11cf-9442-08003601e047"))
UnitsOfMeasure : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _variant_t ParseUnit (
        int Index,
        _bstr_t UnitString );
    _variant_t FormatUnit (
        int Index,
        double Dbus,
        const _variant_t & PrecisionConstant = vtMissing );
    ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    UnitOfMeasurePtr Item (
        const _variant_t & Index );
};

struct __declspec(uuid("7647edc3-19d6-11cf-bcfb-0800368a1102"))
variable : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetUnitsType,put=PutUnitsType))
    int UnitsType;
    __declspec(property(get=GetValue,put=PutValue))
    double Value;
    __declspec(property(get=GetProperties,put=PutProperties))
    int Properties;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetVariableType))
    enum seVariableTypeConstants VariableType;
    __declspec(property(get=GetType))
    enum ObjectType Type;
    __declspec(property(get=GetVariableTableName,put=PutVariableTableName))
    _bstr_t VariableTableName;
    __declspec(property(get=GetExpose,put=PutExpose))
    long Expose;
    __declspec(property(get=GetExposeName,put=PutExposeName))
    _bstr_t ExposeName;
    __declspec(property(get=GetDisplayName))
    _bstr_t DisplayName;
    __declspec(property(get=GetSystemName))
    _bstr_t SystemName;
    __declspec(property(get=GetIsSuppressVariable))
    VARIANT_BOOL IsSuppressVariable;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetName ( );
    int GetUnitsType ( );
    void PutUnitsType (
        int _arg1 );
    void PutValue (
        double _arg1 );
    double GetValue ( );
    void PutProperties (
        int _arg1 );
    int GetProperties ( );
    void PutFormula (
        _bstr_t _arg1 );
    _bstr_t GetFormula ( );
    HRESULT SetRange (
        _bstr_t LowValue,
        int Condition,
        _bstr_t HighValue );
    HRESULT GetRange (
        BSTR * LowValue,
        int * Condition,
        BSTR * HighValue );
    HRESULT SetRangeEx (
        _bstr_t LowValue,
        _bstr_t LowLimitVarName,
        _bstr_t HighValue,
        _bstr_t HighLimitVarName,
        int Condition,
        long bSkipSettingInitialValue );
    HRESULT SetValue (
        _bstr_t Value );
    HRESULT GetValue (
        BSTR * Value );
    HRESULT Delete ( );
    enum ObjectType GetType ( );
    void PutVariableTableName (
        _bstr_t _arg1 );
    _bstr_t GetVariableTableName ( );
    void PutExpose (
        long _arg1 );
    long GetExpose ( );
    void PutExposeName (
        _bstr_t _arg1 );
    _bstr_t GetExposeName ( );
    _bstr_t GetDisplayName ( );
    _bstr_t GetSystemName ( );
    VARIANT_BOOL GetIsSuppressVariable ( );
    double GetValueOutOfRange ( );
    HRESULT GetDiscreteValues (
        SAFEARRAY * * DiscreteValues );
    HRESULT SetDiscreteValues (
        SAFEARRAY * * DiscreteValues );
    HRESULT AddDiscreteValue (
        double DiscreteValue );
    HRESULT RemoveDiscreteValue (
        double DiscreteValue );
    HRESULT ClearLimitsOrDiscreteValues ( );
    HRESULT AddDiscreteVariables (
        SAFEARRAY * * DiscreteVariables );
    HRESULT GetDiscreteVariables (
        VARIANT * DiscreteVariables,
        int * numDiscreteVariables );
    HRESULT RemoveDiscreteVariables (
        SAFEARRAY * * DiscreteVariables );
    _bstr_t GetComment ( );
    HRESULT SetComment (
        _bstr_t Comment );
    HRESULT HasExternalLink (
        VARIANT_BOOL * bLinked );
    HRESULT IsExternalLinkFrozen (
        VARIANT_BOOL * bFrozen );
    HRESULT GetExternalLinkInfo (
        BSTR * SourceVariableName,
        BSTR * SourceDocumenetName );
    HRESULT FreezeExternalLink ( );
    HRESULT ThawExternalLink ( );
    HRESULT BreakExternalLink ( );
    VARIANT_BOOL GetIsReadOnly ( );
    enum seVariableTypeConstants GetVariableType ( );
    HRESULT GetValueRangeHighValue (
        double * pdHighValue );
    HRESULT SetValueRangeHighValue (
        double dHighValue );
    HRESULT GetValueRangeLowValue (
        double * pdHighValue );
    HRESULT SetValueRangeLowValue (
        double dHighValue );
    HRESULT SetValueRangeValues (
        double LowValue,
        int Condition,
        double HighValue );
    HRESULT GetValueRangeValues (
        double * LowValue,
        int * Condition,
        double * HighValue );
    HRESULT GetValueDiscreteValues (
        SAFEARRAY * * DiscreteValues );
    HRESULT SetValueDiscreteValues (
        SAFEARRAY * * DiscreteValues );
    HRESULT GetValueEx (
        double * pdValue,
        enum seUnitsTypeConstants seUnitsType );
    HRESULT SetValueEx (
        double dValue,
        enum seUnitsTypeConstants seUnitsType );
    HRESULT GetRangeEx (
        BSTR * LowValue,
        BSTR * LowLimitVarName,
        BSTR * HighValue,
        BSTR * HighLimitVarName,
        int * Condition );
    HRESULT HasVariableLimit (
        VARIANT_BOOL * bVariableLimit,
        enum VariableLimitValueConstant * LimitValue );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
};

struct __declspec(uuid("1033e6a2-2f02-11cf-bd0c-0800368a1102"))
VariableList : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    int Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    int GetCount ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    HRESULT Remove (
        const _variant_t & Index );
    HRESULT Add (
        const _variant_t & variable );
};

struct __declspec(uuid("7647edc6-19d6-11cf-bcfb-0800368a1102"))
Variables : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCount))
    int Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    int GetCount ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IDispatchPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr Add (
        _bstr_t pName,
        _bstr_t pFormula,
        const _variant_t & UnitsType = vtMissing );
    IDispatchPtr AddFromClipboard (
        _bstr_t pName,
        const _variant_t & UnitsType = vtMissing );
    HRESULT Edit (
        _bstr_t pName,
        _bstr_t pFormula );
    HRESULT EditFromClipboard (
        _bstr_t pName );
    HRESULT PutName (
        IDispatch * pVariable,
        _bstr_t pName );
    _bstr_t GetName (
        IDispatch * pVariable );
    IDispatchPtr Translate (
        _bstr_t pName );
    IDispatchPtr Query (
        _bstr_t pFindCriterium,
        const _variant_t & NamedBy = vtMissing,
        const _variant_t & VarType = vtMissing,
        const _variant_t & CaseInsensitive = vtMissing );
    _bstr_t GetFormula (
        _bstr_t wcpName );
    _bstr_t GetDisplayName (
        IDispatch * pVariable );
    _bstr_t GetSystemName (
        IDispatch * pVariable );
    HRESULT CopyToClipboard (
        _bstr_t bsName );
};

struct __declspec(uuid("a192d85b-81fc-490b-9ace-8f7cd5bd960d"))
InterpartLink : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT IsFrozen (
        VARIANT_BOOL * bFrozen );
    HRESULT GetInfo (
        BSTR * SourceFeatureName,
        BSTR * SourceDocumenetName );
    HRESULT Freeze ( );
    HRESULT Thaw ( );
    HRESULT BreakLink ( );
};

struct __declspec(uuid("35157ffc-3dec-4ba7-9d6f-c511416a1d5f"))
InterpartLinks : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    int Count;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    int GetCount ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IDispatchPtr GetApplication ( );
    IDispatchPtr GetParent ( );
};

struct __declspec(uuid("efc0d740-acbf-11d3-b960-0004ac969177"))
Sensor : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDisplayType,put=PutDisplayType))
    enum SensorDisplayTypeConstants DisplayType;
    __declspec(property(get=GetUpdateMechanism,put=PutUpdateMechanism))
    enum SensorUpdateMechanismConstants UpdateMechanism;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetSensorType))
    enum SensorTypeConstants SensorType;
    __declspec(property(get=GetStatus))
    enum SensorStatusConstants Status;
    __declspec(property(get=GetIsInRange))
    VARIANT_BOOL IsInRange;
    __declspec(property(get=GetCurrentValue))
    double CurrentValue;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDescription,put=PutDescription))
    _bstr_t Description;
    __declspec(property(get=GetLowerRange,put=PutLowerRange))
    double LowerRange;
    __declspec(property(get=GetUpperRange,put=PutUpperRange))
    double UpperRange;
    __declspec(property(get=GetOperator,put=PutOperator))
    enum SensorOperatorConstants Operator;
    __declspec(property(get=GetMinimumThreshold,put=PutMinimumThreshold))
    double MinimumThreshold;
    __declspec(property(get=GetMaximumThreshold,put=PutMaximumThreshold))
    double MaximumThreshold;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum SensorTypeConstants GetSensorType ( );
    enum SensorStatusConstants GetStatus ( );
    VARIANT_BOOL GetIsInRange ( );
    double GetCurrentValue ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetName ( );
    void PutDescription (
        _bstr_t _arg1 );
    _bstr_t GetDescription ( );
    void PutLowerRange (
        double _arg1 );
    double GetLowerRange ( );
    void PutUpperRange (
        double _arg1 );
    double GetUpperRange ( );
    void PutOperator (
        enum SensorOperatorConstants _arg1 );
    enum SensorOperatorConstants GetOperator ( );
    void PutMinimumThreshold (
        double _arg1 );
    double GetMinimumThreshold ( );
    void PutMaximumThreshold (
        double _arg1 );
    double GetMaximumThreshold ( );
    void PutDisplayType (
        enum SensorDisplayTypeConstants _arg1 );
    enum SensorDisplayTypeConstants GetDisplayType ( );
    void PutUpdateMechanism (
        enum SensorUpdateMechanismConstants _arg1 );
    enum SensorUpdateMechanismConstants GetUpdateMechanism ( );
    HRESULT Update ( );
    HRESULT Delete ( );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
};

struct __declspec(uuid("c1f9ae38-acc2-11d3-b960-0004ac969177"))
Sensors : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    int GetCount ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IDispatchPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr AddVariableSensor (
        IDispatch * variable,
        _bstr_t Name,
        _bstr_t Description,
        double LowerRange,
        double UpperRange,
        double MinimumThreshold,
        double MaximumThreshold,
        enum SensorOperatorConstants Operator,
        enum SensorDisplayTypeConstants DisplayType,
        enum SensorUpdateMechanismConstants UpdateMechanism );
    IDispatchPtr AddMinimumDistanceSensor (
        IDispatch * Element1,
        IDispatch * Element2,
        _bstr_t Name,
        _bstr_t Description,
        double LowerRange,
        double UpperRange,
        double MinimumThreshold,
        double MaximumThreshold,
        enum SensorOperatorConstants Operator,
        enum SensorDisplayTypeConstants DisplayType,
        enum SensorUpdateMechanismConstants UpdateMechanism );
    IDispatchPtr AddSurfaceAreaSensor (
        enum SurfaceAreaSensorAreaTypeConstants iSensorType,
        enum SurfaceAreaSensorSelectionTypeConstants iSelectionType,
        _bstr_t Name,
        _bstr_t Description,
        double LowerRange,
        double UpperRange,
        double MinimumThreshold,
        double MaximumThreshold,
        enum SensorOperatorConstants Operator,
        enum SensorDisplayTypeConstants DisplayType,
        enum SensorUpdateMechanismConstants UpdateMechanism,
        VARIANT * Element );
};

struct __declspec(uuid("acdac91e-c5f0-11d3-a98b-00c04f79b2b4"))
SheetMetalSensors : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    int GetCount ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IDispatchPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr AddVariableSensor (
        IDispatch * variable,
        _bstr_t Name,
        _bstr_t Description,
        double LowerRange,
        double UpperRange,
        double MinimumThreshold,
        double MaximumThreshold,
        enum SensorOperatorConstants Operator,
        enum SensorDisplayTypeConstants DisplayType,
        enum SensorUpdateMechanismConstants UpdateMechanism );
    IDispatchPtr AddMinimumDistanceSensor (
        IDispatch * Element1,
        IDispatch * Element2,
        _bstr_t Name,
        _bstr_t Description,
        double LowerRange,
        double UpperRange,
        double MinimumThreshold,
        double MaximumThreshold,
        enum SensorOperatorConstants Operator,
        enum SensorDisplayTypeConstants DisplayType,
        enum SensorUpdateMechanismConstants UpdateMechanism );
    IDispatchPtr AddSheetMetalCheckerSensor (
        enum SheetMetalSensorFeatureTypeConstants LeftFeatureType,
        enum SheetMetalSensorFeatureTypeConstants RightFeatureType,
        _bstr_t Name,
        _bstr_t Description,
        double Threshold,
        enum SensorUpdateMechanismConstants UpdateMechanism,
        VARIANT * Element = &vtMissing );
    IDispatchPtr AddSurfaceAreaSensor (
        enum SurfaceAreaSensorAreaTypeConstants iSensorType,
        enum SurfaceAreaSensorSelectionTypeConstants iSelectionType,
        _bstr_t Name,
        _bstr_t Description,
        double LowerRange,
        double UpperRange,
        double MinimumThreshold,
        double MaximumThreshold,
        enum SensorOperatorConstants Operator,
        enum SensorDisplayTypeConstants DisplayType,
        enum SensorUpdateMechanismConstants UpdateMechanism,
        VARIANT * Element );
};

struct __declspec(uuid("fd092650-dbef-11ce-9df3-08003601e012"))
Layers : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetActiveLayer))
    LayerPtr ActiveLayer;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    LayerPtr Item (
        const _variant_t & Index );
    ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    LayerPtr Add (
        _bstr_t Name );
    LayerPtr GetActiveLayer ( );
};

struct __declspec(uuid("db38638d-c898-42bc-8b0d-338e01b26fb3"))
DashStyles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetCount ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr GetApplication ( );
    DashStylePtr Item (
        const _variant_t & Index );
    DashStylePtr Add (
        _bstr_t Name );
    HRESULT Remove (
        _bstr_t Name );
};

struct __declspec(uuid("e4d115c0-4999-11ce-a82a-08003601e855"))
LinearStyles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetActive,put=PutActive))
    _bstr_t Active;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetCount ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr GetApplication ( );
    LinearStylePtr Item (
        const _variant_t & Index );
    LinearStylePtr Add (
        _bstr_t Name,
        _bstr_t Parent );
    HRESULT Remove (
        _bstr_t Name );
    _bstr_t GetActive ( );
    void PutActive (
        _bstr_t _arg1 );
};

struct __declspec(uuid("6457bb91-1ae1-11cf-8ed0-080036062402"))
FillStyles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetActive,put=PutActive))
    _bstr_t Active;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetCount ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr GetApplication ( );
    FillStylePtr Item (
        const _variant_t & Index );
    FillStylePtr Add (
        _bstr_t Name,
        _bstr_t Parent );
    HRESULT Remove (
        _bstr_t Name );
    void PutActive (
        _bstr_t _arg1 );
    _bstr_t GetActive ( );
};

struct __declspec(uuid("6457bb98-1ae1-11cf-8ed0-080036062402"))
HatchPatternStyles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetCount ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr GetApplication ( );
    HatchPatternStylePtr Item (
        const _variant_t & Index );
    HatchPatternStylePtr Add (
        _bstr_t Name,
        _bstr_t Parent );
    HRESULT Remove (
        _bstr_t Name );
};

struct __declspec(uuid("a5e9bf70-a66f-11ce-815f-08003601e504"))
FaceStyles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr Item (
        const _variant_t & Index );
    IDispatchPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    FaceStylePtr Add (
        _bstr_t Name,
        _bstr_t Parent );
    HRESULT Remove (
        _bstr_t Name );
    IDispatchPtr GetStyleByID (
        long StyleID );
};

struct __declspec(uuid("c47b7d12-ec6b-11ce-a7c0-080036d40102"))
TextStyles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetActive,put=PutActive))
    _bstr_t Active;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetCount ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr GetApplication ( );
    TextStylePtr Item (
        const _variant_t & Index );
    TextStylePtr Add (
        _bstr_t Name,
        _bstr_t Parent );
    HRESULT Remove (
        _bstr_t Name );
    _bstr_t GetActive ( );
    void PutActive (
        _bstr_t _arg1 );
};

struct __declspec(uuid("5684e0e1-24de-11cf-a80a-080036d40102"))
TextCharStyles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetCount ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr GetApplication ( );
    TextCharStylePtr Item (
        const _variant_t & Index );
    TextCharStylePtr Add (
        _bstr_t Name,
        _bstr_t Parent );
    HRESULT Remove (
        _bstr_t Name );
};

struct __declspec(uuid("77bab3cf-c118-11ce-a0c6-080036c91102"))
Symbols : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    Symbol2dPtr Add (
        long insertionType,
        _bstr_t filePath,
        double x,
        double y,
        const _variant_t & z = vtMissing );
    HRESULT InsertSymbolAsGeometry (
        _bstr_t filePath,
        double dOriginX,
        double dOriginY );
};

struct __declspec(uuid("ceed3415-d723-11ce-8173-08003601e504"))
ViewStyles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    ViewStylePtr Item (
        const _variant_t & Index );
    IDispatchPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    ViewStylePtr Add (
        _bstr_t Name,
        _bstr_t Parent );
    HRESULT Remove (
        _bstr_t Name );
    IDispatchPtr GetStyleByID (
        long StyleID );
    ViewStylePtr AddFromFile (
        _bstr_t Filename,
        _bstr_t StyleName );
};

struct __declspec(uuid("8ff2dd02-19b3-11d1-aeaf-08003616ce02"))
Reference : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetObject))
    IDispatchPtr Object;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    enum ObjectType Type;
    __declspec(property(get=GetImmediateParent))
    IDispatchPtr ImmediateParent;
    __declspec(property(get=GetStyle,put=PutStyle))
    _bstr_t Style;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetApplication ( );
    IDispatchPtr GetObject ( );
    IDispatchPtr GetParent ( );
    enum ObjectType GetType ( );
    HRESULT GetMatrix (
        SAFEARRAY * * Matrix );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    IDispatchPtr GetImmediateParent ( );
    _bstr_t GetStyle ( );
    void PutStyle (
        _bstr_t _arg1 );
    HRESULT GetOccurrencesInPath (
        IDispatch * * TopOccurrence,
        long * NumSubOccurrencesInPath,
        long * NumBoundSubOccurrencesInPath,
        SAFEARRAY * * BoundSubOccurrencesInPath );
};

struct __declspec(uuid("c50df910-29ab-11ce-bf0e-08003601c1be"))
RoutingSlip : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSubject,put=PutSubject))
    _bstr_t Subject;
    __declspec(property(get=GetReturnWhenDone,put=PutReturnWhenDone))
    VARIANT_BOOL ReturnWhenDone;
    __declspec(property(get=GetMessage,put=PutMessage))
    _bstr_t Message;
    __declspec(property(put=PutRecipients))
    _variant_t Recipients;
    __declspec(property(get=GetDelivery,put=PutDelivery))
    enum RouteType Delivery;
    __declspec(property(get=GetStatus))
    enum RouteStatus Status;
    __declspec(property(get=GetHasRouted))
    VARIANT_BOOL HasRouted;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetTrackStatus,put=PutTrackStatus))
    VARIANT_BOOL TrackStatus;
    __declspec(property(get=GetAskForApproval,put=PutAskForApproval))
    VARIANT_BOOL AskForApproval;
    __declspec(property(get=GetApprove,put=PutApprove))
    VARIANT_BOOL Approve;
    __declspec(property(get=GetApproved))
    VARIANT_BOOL Approved;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    void PutSubject (
        _bstr_t _arg1 );
    _bstr_t GetSubject ( );
    void PutReturnWhenDone (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetReturnWhenDone ( );
    void PutMessage (
        _bstr_t _arg1 );
    _bstr_t GetMessage ( );
    void PutRecipients (
        const _variant_t & _arg1 );
    void PutDelivery (
        enum RouteType _arg1 );
    enum RouteType GetDelivery ( );
    enum RouteStatus GetStatus ( );
    VARIANT_BOOL GetHasRouted ( );
    IDispatchPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    void PutTrackStatus (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetTrackStatus ( );
    void PutAskForApproval (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetAskForApproval ( );
    void PutApprove (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetApprove ( );
    VARIANT_BOOL GetApproved ( );
    VARIANT_BOOL GetRouteInfo ( );
    HRESULT AddRecipient (
        _bstr_t bsRecip );
    HRESULT Route (
        const _variant_t & ConfirmRoute = vtMissing );
    HRESULT Reset ( );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
};

struct __declspec(uuid("64a80742-296b-11cf-a102-080036c91102"))
SymbolProperties : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSymbol))
    IDispatchPtr Symbol;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr GetSymbol ( );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
};

struct __declspec(uuid("aed8fe5f-3129-11d1-bc83-0800360e1e02"))
PropertySets : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    ApplicationPtr Application;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetCount ( );
    IDispatchPtr GetParent ( );
    ApplicationPtr GetApplication ( );
    PropertiesPtr Item (
        const _variant_t & vIndex );
    HRESULT Save ( );
};

struct __declspec(uuid("a5494c57-1529-4333-a992-c7d893e549e8"))
PropertyEx : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetType))
    _variant_t Type;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _bstr_t GetName ( );
    _variant_t GetValue ( );
    void PutValue (
        VARIANT * _arg1 );
    _variant_t GetType ( );
    HRESULT Delete ( );
    _variant_t Id ( );
    HRESULT GetProps (
        BSTR * bstName,
        VARIANT * Value,
        VARIANT * Type );
};

struct __declspec(uuid("95840dc0-6957-11ce-87e4-08003601bd52"))
SummaryInfo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAccessDate))
    _variant_t AccessDate;
    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetAuthor,put=PutAuthor))
    _bstr_t Author;
    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetComments,put=PutComments))
    _bstr_t Comments;
    __declspec(property(get=GetCompany,put=PutCompany))
    _bstr_t Company;
    __declspec(property(get=GetCreateApp,put=PutCreateApp))
    _bstr_t CreateApp;
    __declspec(property(get=GetCreateDate))
    _variant_t CreateDate;
    __declspec(property(get=GetCreationLocale))
    long CreationLocale;
    __declspec(property(get=GetDocumentNumber,put=PutDocumentNumber))
    _bstr_t DocumentNumber;
    __declspec(property(get=GetKeywords,put=PutKeywords))
    _bstr_t Keywords;
    __declspec(property(get=GetLastSavedBy,put=PutLastSavedBy))
    _bstr_t LastSavedBy;
    __declspec(property(get=GetManager,put=PutManager))
    _bstr_t Manager;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetProjectName,put=PutProjectName))
    _bstr_t ProjectName;
    __declspec(property(get=GetRevisionNumber,put=PutRevisionNumber))
    _bstr_t RevisionNumber;
    __declspec(property(get=GetSaveApp,put=PutSaveApp))
    _bstr_t SaveApp;
    __declspec(property(get=GetSaveDate))
    _variant_t SaveDate;
    __declspec(property(get=GetSubject,put=PutSubject))
    _bstr_t Subject;
    __declspec(property(get=GetTemplate,put=PutTemplate))
    _bstr_t Template;
    __declspec(property(get=GetTitle,put=PutTitle))
    _bstr_t Title;
    __declspec(property(get=GetTotalEdits,put=PutTotalEdits))
    _bstr_t TotalEdits;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _variant_t GetAccessDate ( );
    ApplicationPtr GetApplication ( );
    _bstr_t GetAuthor ( );
    void PutAuthor (
        _bstr_t _arg1 );
    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t _arg1 );
    _bstr_t GetComments ( );
    void PutComments (
        _bstr_t _arg1 );
    _bstr_t GetCompany ( );
    void PutCompany (
        _bstr_t _arg1 );
    _bstr_t GetCreateApp ( );
    void PutCreateApp (
        _bstr_t _arg1 );
    _variant_t GetCreateDate ( );
    long GetCreationLocale ( );
    _bstr_t GetDocumentNumber ( );
    void PutDocumentNumber (
        _bstr_t _arg1 );
    _bstr_t GetKeywords ( );
    void PutKeywords (
        _bstr_t _arg1 );
    _bstr_t GetLastSavedBy ( );
    void PutLastSavedBy (
        _bstr_t _arg1 );
    _bstr_t GetManager ( );
    void PutManager (
        _bstr_t _arg1 );
    IDispatchPtr GetParent ( );
    _bstr_t GetProjectName ( );
    void PutProjectName (
        _bstr_t _arg1 );
    _bstr_t GetRevisionNumber ( );
    void PutRevisionNumber (
        _bstr_t _arg1 );
    _bstr_t GetSaveApp ( );
    void PutSaveApp (
        _bstr_t _arg1 );
    _variant_t GetSaveDate ( );
    _bstr_t GetSubject ( );
    void PutSubject (
        _bstr_t _arg1 );
    _bstr_t GetTemplate ( );
    void PutTemplate (
        _bstr_t _arg1 );
    _bstr_t GetTitle ( );
    void PutTitle (
        _bstr_t _arg1 );
    _bstr_t GetTotalEdits ( );
    void PutTotalEdits (
        _bstr_t _arg1 );
};

struct __declspec(uuid("ff48e641-4249-11d2-9949-080036947803"))
AttributeQuery : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    QueryObjectsPtr QueryByName (
        const _variant_t & AttributeSetName = vtMissing,
        const _variant_t & AttributeName = vtMissing );
    ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
};

struct __declspec(uuid("c2c04ab3-c764-11d2-bec4-080036b4d502"))
HighlightSets : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    HighlightSetPtr Item (
        const _variant_t & Index );
    HighlightSetPtr Add ( );
};

struct __declspec(uuid("e3946112-6037-11d3-aed8-00500471c49e"))
SEGenericCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    IDispatchPtr Item (
        const _variant_t & Index );
};

struct __declspec(uuid("89694166-9634-11d3-a3fe-0004ac969602"))
AttributeSets : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetCount ( );
    AttributeSetPtr Item (
        const _variant_t & Index );
    AttributeSetPtr Add (
        _bstr_t Name );
    HRESULT Remove (
        _bstr_t Name );
};

struct __declspec(uuid("206144cb-e939-4cdc-a41d-4954ad3b0e4b"))
SolidEdgeDocument : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAttributeQuery))
    AttributeQueryPtr AttributeQuery;
    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetUnitsOfMeasure))
    UnitsOfMeasurePtr UnitsOfMeasure;
    __declspec(property(get=GetFullName))
    _bstr_t FullName;
    __declspec(property(get=GetActiveSketch))
    IDispatchPtr ActiveSketch;
    __declspec(property(get=GetType))
    enum DocumentTypeConstants Type;
    __declspec(property(get=GetDocumentEvents))
    IUnknownPtr DocumentEvents;
    __declspec(property(get=GetRootStorage))
    IUnknownPtr RootStorage;
    __declspec(property(get=GetAddInsStorage))
    IUnknownPtr AddInsStorage[][];
    __declspec(property(get=GetDirty,put=PutDirty))
    VARIANT_BOOL Dirty;
    __declspec(property(get=GetCreatedVersion))
    _bstr_t CreatedVersion;
    __declspec(property(get=GetLastSavedVersion))
    _bstr_t LastSavedVersion;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetHighlightSets))
    HighlightSetsPtr HighlightSets;
    __declspec(property(get=GetInPlaceActivated))
    VARIANT_BOOL InPlaceActivated;
    __declspec(property(get=GetVariables))
    IDispatchPtr Variables;
    __declspec(property(get=GetParent))
    ApplicationPtr Parent;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetBlocks))
    IDispatchPtr Blocks;
    __declspec(property(get=GetUndoSteps,put=PutUndoSteps))
    long UndoSteps;
    __declspec(property(get=GetReadOnly,put=PutReadOnly))
    VARIANT_BOOL ReadOnly;
    __declspec(property(get=GetIsInsightFile))
    VARIANT_BOOL IsInsightFile;
    __declspec(property(get=GetRoutingSlip))
    IDispatchPtr RoutingSlip;
    __declspec(property(get=GetSelectSet))
    SelectSetPtr SelectSet;
    __declspec(property(get=GetGetPredefineRelationProducer))
    PredefineRelationProducerPtr GetPredefineRelationProducer;
    __declspec(property(get=GetSummaryInfo))
    IDispatchPtr SummaryInfo;
    __declspec(property(get=GetWindows))
    WindowsPtr Windows;
    __declspec(property(get=GetNamedViews))
    NamedViewsPtr NamedViews;
    __declspec(property(get=GetProperties))
    IDispatchPtr Properties;
    __declspec(property(get=GetIsTemplate,put=PutIsTemplate))
    VARIANT_BOOL IsTemplate;
    __declspec(property(get=GetStatus,put=PutStatus))
    enum DocumentStatus Status;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT Activate ( );
    ApplicationPtr GetApplication ( );
    HRESULT Close (
        const _variant_t & SaveChanges = vtMissing,
        const _variant_t & Filename = vtMissing,
        const _variant_t & RouteWorkbook = vtMissing );
    _bstr_t GetFullName ( );
    _bstr_t GetName ( );
    ApplicationPtr GetParent ( );
    _bstr_t GetPath ( );
    HRESULT PrintOut (
        const _variant_t & Printer = vtMissing,
        const _variant_t & NumCopies = vtMissing,
        const _variant_t & Orientation = vtMissing,
        const _variant_t & PaperSize = vtMissing,
        const _variant_t & Scale = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & OutputFileName = vtMissing,
        const _variant_t & PrintRange = vtMissing,
        const _variant_t & Sheets = vtMissing,
        const _variant_t & ColorAsBlack = vtMissing,
        const _variant_t & Collate = vtMissing );
    VARIANT_BOOL GetReadOnly ( );
    IDispatchPtr GetRoutingSlip ( );
    HRESULT Save ( );
    HRESULT SaveAs (
        _bstr_t NewName,
        const _variant_t & IsATemplate = vtMissing,
        const _variant_t & FileFormat = vtMissing,
        const _variant_t & ReadOnlyEnforced = vtMissing,
        const _variant_t & ReadOnlyRecommended = vtMissing,
        const _variant_t & newstatus = vtMissing,
        const _variant_t & CreateBackup = vtMissing,
        const _variant_t & UpdateLinkInContainer = vtMissing,
        const _variant_t & UpdateAllLinksInContainer = vtMissing );
    HRESULT SaveCopyAs (
        _bstr_t Name );
    HRESULT SaveAsJT (
        _bstr_t NewName,
        const _variant_t & Include_PreciseGeom = vtMissing,
        const _variant_t & Prod_Structure_Option = vtMissing,
        const _variant_t & Export_PMI = vtMissing,
        const _variant_t & Export_CoordinateSystem = vtMissing,
        const _variant_t & Export_3DBodies = vtMissing,
        const _variant_t & NumberofLODs = vtMissing,
        const _variant_t & JTFileUnit = vtMissing,
        const _variant_t & Write_Which_Files = vtMissing,
        const _variant_t & Use_Simplified_TopAsm = vtMissing,
        const _variant_t & Use_Simplified_SubAsm = vtMissing,
        const _variant_t & Use_Simplified_Part = vtMissing,
        const _variant_t & EnableDefaultOutputPath = vtMissing,
        const _variant_t & IncludeSEProperties = vtMissing,
        const _variant_t & Export_VisiblePartsOnly = vtMissing,
        const _variant_t & Export_VisibleConstructionsOnly = vtMissing,
        const _variant_t & RemoveUnsafeCharacters = vtMissing,
        const _variant_t & ExportSEPartFileAsSingleJTFile = vtMissing );
    _bstr_t SaveAsBIDM (
        _bstr_t filePath,
        _bstr_t DocumentNumber,
        _bstr_t Revision,
        _bstr_t Title );
    _bstr_t ReviseBIDM (
        _bstr_t filePath,
        _bstr_t Revision,
        _bstr_t Title );
    SelectSetPtr GetSelectSet ( );
    HRESULT SendMail (
        const _variant_t & Recipients = vtMissing,
        const _variant_t & Subject = vtMissing,
        const _variant_t & ReturnReceipt = vtMissing );
    IDispatchPtr GetSummaryInfo ( );
    WindowsPtr GetWindows ( );
    IDispatchPtr GetProperties ( );
    VARIANT_BOOL GetIsTemplate ( );
    void PutIsTemplate (
        VARIANT_BOOL _arg1 );
    enum DocumentStatus GetStatus ( );
    void PutStatus (
        enum DocumentStatus _arg1 );
    HRESULT EditProperties ( );
    UnitsOfMeasurePtr GetUnitsOfMeasure ( );
    IDispatchPtr GetActiveSketch ( );
    enum DocumentTypeConstants GetType ( );
    IUnknownPtr GetDocumentEvents ( );
    IUnknownPtr GetRootStorage ( );
    IUnknownPtr GetAddInsStorage (
        _bstr_t Name,
        long grfMode );
    VARIANT_BOOL GetDirty ( );
    void PutDirty (
        VARIANT_BOOL _arg1 );
    AttributeQueryPtr GetAttributeQuery ( );
    _bstr_t GetCreatedVersion ( );
    _bstr_t GetLastSavedVersion ( );
    HighlightSetsPtr GetHighlightSets ( );
    VARIANT_BOOL GetInPlaceActivated ( );
    HRESULT SeekWriteAccess (
        VARIANT_BOOL * WriteAccess );
    long GetUndoSteps ( );
    void PutUndoSteps (
        long _arg1 );
    HRESULT CreatePreview ( );
    void PutReadOnly (
        VARIANT_BOOL _arg1 );
    HRESULT SeekReadOnlyAccess (
        VARIANT_BOOL * ReadOnlyAccess );
    HRESULT ImportStyles2 (
        enum seStyleTypeConstants StyleType,
        VARIANT_BOOL bReplace,
        IDispatch * pSrcDocument );
    VARIANT_BOOL GetIsInsightFile ( );
    NamedViewsPtr GetNamedViews ( );
    HRESULT GetRegisteredCustomPropertiesBiDM (
        VARIANT * varPropInfo );
    _bstr_t SaveAsWithCustomPropertiesBIDM (
        _bstr_t filePath,
        _bstr_t DocumentNumber,
        _bstr_t Revision,
        _bstr_t Title,
        const _variant_t & varPropInfo );
    _bstr_t ReviseWithCustomPropertiesBIDM (
        _bstr_t filePath,
        _bstr_t Revision,
        _bstr_t Title,
        const _variant_t & varPropInfo );
    HRESULT SaveAsPRC (
        _bstr_t Filename );
    IDispatchPtr GetVariables ( );
    _variant_t NewWindow (
        const _variant_t & NewWindowOptions = vtMissing,
        const _variant_t & Environment = vtMissing );
    IDispatchPtr GetBlocks ( );
    void PutName (
        _bstr_t _arg1 );
    HRESULT SaveAs3DPrint (
        _bstr_t filePath,
        long NumberOfCoordinates,
        SAFEARRAY * * PositionArray,
        long NumberOfNormals,
        SAFEARRAY * * NormalArray,
        long NumberofColors,
        SAFEARRAY * * colorArray,
        long NumberofIndices,
        SAFEARRAY * * Indexarray,
        long NumberOfFaces,
        SAFEARRAY * * FaceArray );
    HRESULT SaveAsPLMXML (
        _bstr_t bstrPLMXMLFilePath,
        _bstr_t bstrPLMXMLINIFilePath );
    PredefineRelationProducerPtr GetGetPredefineRelationProducer ( );
    HRESULT TGCopyFileByPackFunc (
        _bstr_t bsDest );
    HRESULT TGSaveAsLib (
        _bstr_t filePath );
    HRESULT TGSaveVaribalesInJson (
        _bstr_t filePath );
};

enum seStyleTypeConstants
{
    igDimensionStyle = 0,
    igDrawingViewStyle = 1,
    igFillStyle = 2,
    igHatchStyle = 3,
    igLineStyle = 4,
    igTableStyle = 5,
    igTextStyle = 6
};

struct __declspec(uuid("89780597-2eec-47c8-876f-5d87f554f217"))
PredefineRelationProducer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDefaultGroup,put=PutDefaultGroup))
    unsigned int DefaultGroup;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    int GroupCount ( );
    int MagneticGroupCount ( );
    VARIANT_BOOL HasAssemblyCaptureFitRelation ( );
    unsigned int AddPredefineRelationGroup (
        _bstr_t bstrGroupName,
        enum PredefineRelationGroupPolarityConstants ePolarity,
        VARIANT_BOOL bSetDefault );
    void PutDefaultGroup (
        unsigned int _arg1 );
    unsigned int GetDefaultGroup ( );
    HRESULT SetCaptureFitDefault (
        VARIANT_BOOL bCaptureFitDefault );
    HRESULT ClearDefault ( );
    HRESULT SetGroupName (
        unsigned int nGroupId,
        _bstr_t bstrGroupName );
    _bstr_t GetGroupName (
        unsigned int nGroupId );
    HRESULT SetGroupPolarity (
        unsigned int nGroupId,
        enum PredefineRelationGroupPolarityConstants ePolarity );
    enum PredefineRelationGroupPolarityConstants GetGroupPolarity (
        unsigned int nGroupId );
    int GetRelationCount (
        unsigned int nGroupId );
    int GetCaptureFitRelationCount ( );
    HRESULT DeleteGroups (
        int numDeleteGroups,
        unsigned int * pnDeleteGroupIds );
    HRESULT GetRelationData (
        unsigned int nGroupId,
        int nRelationIndex,
        IDispatch * * ppElement,
        enum CapturedRelationshipTypeConstants * pRelationType,
        enum CapturedRelationshipOffsetTypeConstants * pOffsetType,
        double * pdOffsetOne,
        double * pdOffsetTwo );
    HRESULT SetRelationData (
        unsigned int nGroupId,
        int nRelationIndex,
        IDispatch * pElement,
        enum CapturedRelationshipTypeConstants relationType,
        enum CapturedRelationshipOffsetTypeConstants offsetType,
        double dOffsetOne,
        double dOffsetTwo );
    HRESULT DeleteRelation (
        unsigned int nGroupId,
        int nRelationIndex );
    HRESULT AddMateRelation (
        unsigned int nGroupId,
        IDispatch * pElement,
        enum CapturedRelationshipOffsetTypeConstants * pOffsetType,
        double * pdOffsetOne,
        double * pdOffsetTwo );
    HRESULT AddPlanarRelation (
        unsigned int nGroupId,
        IDispatch * pElement,
        enum CapturedRelationshipOffsetTypeConstants * pOffsetType,
        double * pdOffsetOne,
        double * pdOffsetTwo );
    HRESULT AddAxialRelation (
        unsigned int nGroupId,
        IDispatch * pElement );
    HRESULT AddTangentRelation (
        unsigned int nGroupId,
        IDispatch * pElement,
        enum CapturedRelationshipOffsetTypeConstants * pOffsetType,
        double * pdOffsetOne,
        double * pdOffsetTwo );
    HRESULT AddConnectRelation (
        unsigned int nGroupId,
        IDispatch * pElement,
        enum CapturedRelationshipOffsetTypeConstants * pOffsetType,
        double * pdOffsetOne,
        double * pdOffsetTwo );
    HRESULT AddParallelRelation (
        unsigned int nGroupId,
        IDispatch * pElement,
        enum CapturedRelationshipOffsetTypeConstants * pOffsetType,
        double * pdOffsetOne,
        double * pdOffsetTwo );
    IDispatchPtr GetApplication ( );
};

struct __declspec(uuid("d3026abe-764e-4744-b7b4-a82b36513180"))
_ISolidEdgeDocumentAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetAttributeQuery))
    AttributeQueryPtr AttributeQuery;
    __declspec(property(get=GetApplication))
    ApplicationPtr Application;
    __declspec(property(get=GetUnitsOfMeasure))
    UnitsOfMeasurePtr UnitsOfMeasure;
    __declspec(property(get=GetFullName))
    _bstr_t FullName;
    __declspec(property(get=GetActiveSketch))
    IDispatchPtr ActiveSketch;
    __declspec(property(get=GetType))
    enum DocumentTypeConstants Type;
    __declspec(property(get=GetDocumentEvents))
    IUnknownPtr DocumentEvents;
    __declspec(property(get=GetRootStorage))
    IUnknownPtr RootStorage;
    __declspec(property(get=GetAddInsStorage))
    IUnknownPtr AddInsStorage[][];
    __declspec(property(get=GetDirty,put=PutDirty))
    VARIANT_BOOL Dirty;
    __declspec(property(get=GetCreatedVersion))
    _bstr_t CreatedVersion;
    __declspec(property(get=GetLastSavedVersion))
    _bstr_t LastSavedVersion;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetHighlightSets))
    HighlightSetsPtr HighlightSets;
    __declspec(property(get=GetInPlaceActivated))
    VARIANT_BOOL InPlaceActivated;
    __declspec(property(get=GetVariables))
    IDispatchPtr Variables;
    __declspec(property(get=GetParent))
    ApplicationPtr Parent;
    __declspec(property(get=GetPath))
    _bstr_t Path;
    __declspec(property(get=GetBlocks))
    IDispatchPtr Blocks;
    __declspec(property(get=GetUndoSteps,put=PutUndoSteps))
    long UndoSteps;
    __declspec(property(get=GetReadOnly,put=PutReadOnly))
    VARIANT_BOOL ReadOnly;
    __declspec(property(get=GetIsInsightFile))
    VARIANT_BOOL IsInsightFile;
    __declspec(property(get=GetRoutingSlip))
    IDispatchPtr RoutingSlip;
    __declspec(property(get=GetSelectSet))
    SelectSetPtr SelectSet;
    __declspec(property(get=GetGetPredefineRelationProducer))
    PredefineRelationProducerPtr GetPredefineRelationProducer;
    __declspec(property(get=GetSummaryInfo))
    IDispatchPtr SummaryInfo;
    __declspec(property(get=GetWindows))
    WindowsPtr Windows;
    __declspec(property(get=GetNamedViews))
    NamedViewsPtr NamedViews;
    __declspec(property(get=GetProperties))
    IDispatchPtr Properties;
    __declspec(property(get=GetIsTemplate,put=PutIsTemplate))
    VARIANT_BOOL IsTemplate;
    __declspec(property(get=GetStatus,put=PutStatus))
    enum DocumentStatus Status;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Activate ( );
    ApplicationPtr GetApplication ( );
    HRESULT Close (
        const _variant_t & SaveChanges = vtMissing,
        const _variant_t & Filename = vtMissing,
        const _variant_t & RouteWorkbook = vtMissing );
    _bstr_t GetFullName ( );
    _bstr_t GetName ( );
    ApplicationPtr GetParent ( );
    _bstr_t GetPath ( );
    HRESULT PrintOut (
        const _variant_t & Printer = vtMissing,
        const _variant_t & NumCopies = vtMissing,
        const _variant_t & Orientation = vtMissing,
        const _variant_t & PaperSize = vtMissing,
        const _variant_t & Scale = vtMissing,
        const _variant_t & PrintToFile = vtMissing,
        const _variant_t & OutputFileName = vtMissing,
        const _variant_t & PrintRange = vtMissing,
        const _variant_t & Sheets = vtMissing,
        const _variant_t & ColorAsBlack = vtMissing,
        const _variant_t & Collate = vtMissing );
    VARIANT_BOOL GetReadOnly ( );
    IDispatchPtr GetRoutingSlip ( );
    HRESULT Save ( );
    HRESULT SaveAs (
        _bstr_t NewName,
        const _variant_t & IsATemplate = vtMissing,
        const _variant_t & FileFormat = vtMissing,
        const _variant_t & ReadOnlyEnforced = vtMissing,
        const _variant_t & ReadOnlyRecommended = vtMissing,
        const _variant_t & newstatus = vtMissing,
        const _variant_t & CreateBackup = vtMissing,
        const _variant_t & UpdateLinkInContainer = vtMissing,
        const _variant_t & UpdateAllLinksInContainer = vtMissing );
    HRESULT SaveCopyAs (
        _bstr_t Name );
    HRESULT SaveAsJT (
        _bstr_t NewName,
        const _variant_t & Include_PreciseGeom = vtMissing,
        const _variant_t & Prod_Structure_Option = vtMissing,
        const _variant_t & Export_PMI = vtMissing,
        const _variant_t & Export_CoordinateSystem = vtMissing,
        const _variant_t & Export_3DBodies = vtMissing,
        const _variant_t & NumberofLODs = vtMissing,
        const _variant_t & JTFileUnit = vtMissing,
        const _variant_t & Write_Which_Files = vtMissing,
        const _variant_t & Use_Simplified_TopAsm = vtMissing,
        const _variant_t & Use_Simplified_SubAsm = vtMissing,
        const _variant_t & Use_Simplified_Part = vtMissing,
        const _variant_t & EnableDefaultOutputPath = vtMissing,
        const _variant_t & IncludeSEProperties = vtMissing,
        const _variant_t & Export_VisiblePartsOnly = vtMissing,
        const _variant_t & Export_VisibleConstructionsOnly = vtMissing,
        const _variant_t & RemoveUnsafeCharacters = vtMissing,
        const _variant_t & ExportSEPartFileAsSingleJTFile = vtMissing );
    _bstr_t SaveAsBIDM (
        _bstr_t filePath,
        _bstr_t DocumentNumber,
        _bstr_t Revision,
        _bstr_t Title );
    _bstr_t ReviseBIDM (
        _bstr_t filePath,
        _bstr_t Revision,
        _bstr_t Title );
    SelectSetPtr GetSelectSet ( );
    HRESULT SendMail (
        const _variant_t & Recipients = vtMissing,
        const _variant_t & Subject = vtMissing,
        const _variant_t & ReturnReceipt = vtMissing );
    IDispatchPtr GetSummaryInfo ( );
    WindowsPtr GetWindows ( );
    IDispatchPtr GetProperties ( );
    VARIANT_BOOL GetIsTemplate ( );
    void PutIsTemplate (
        VARIANT_BOOL IsTemplate );
    enum DocumentStatus GetStatus ( );
    void PutStatus (
        enum DocumentStatus Status );
    HRESULT EditProperties ( );
    UnitsOfMeasurePtr GetUnitsOfMeasure ( );
    IDispatchPtr GetActiveSketch ( );
    enum DocumentTypeConstants GetType ( );
    IUnknownPtr GetDocumentEvents ( );
    IUnknownPtr GetRootStorage ( );
    IUnknownPtr GetAddInsStorage (
        _bstr_t Name,
        long grfMode );
    VARIANT_BOOL GetDirty ( );
    void PutDirty (
        VARIANT_BOOL Dirty );
    AttributeQueryPtr GetAttributeQuery ( );
    _bstr_t GetCreatedVersion ( );
    _bstr_t GetLastSavedVersion ( );
    HighlightSetsPtr GetHighlightSets ( );
    VARIANT_BOOL GetInPlaceActivated ( );
    HRESULT SeekWriteAccess (
        VARIANT_BOOL * WriteAccess );
    long GetUndoSteps ( );
    void PutUndoSteps (
        long NumberOfUndoSteps );
    HRESULT CreatePreview ( );
    void PutReadOnly (
        VARIANT_BOOL ReadOnly );
    HRESULT SeekReadOnlyAccess (
        VARIANT_BOOL * ReadOnlyAccess );
    HRESULT ImportStyles2 (
        enum seStyleTypeConstants StyleType,
        VARIANT_BOOL bReplace,
        IDispatch * pSrcDocument );
    VARIANT_BOOL GetIsInsightFile ( );
    NamedViewsPtr GetNamedViews ( );
    HRESULT GetRegisteredCustomPropertiesBiDM (
        VARIANT * varPropInfo );
    _bstr_t SaveAsWithCustomPropertiesBIDM (
        _bstr_t filePath,
        _bstr_t DocumentNumber,
        _bstr_t Revision,
        _bstr_t Title,
        const _variant_t & varPropInfo );
    _bstr_t ReviseWithCustomPropertiesBIDM (
        _bstr_t filePath,
        _bstr_t Revision,
        _bstr_t Title,
        const _variant_t & varPropInfo );
    HRESULT SaveAsPRC (
        _bstr_t Filename );
    IDispatchPtr GetVariables ( );
    _variant_t NewWindow (
        const _variant_t & NewWindowOptions = vtMissing,
        const _variant_t & Environment = vtMissing );
    IDispatchPtr GetBlocks ( );
    void PutName (
        _bstr_t Name );
    HRESULT SaveAs3DPrint (
        _bstr_t filePath,
        long NumberOfCoordinates,
        SAFEARRAY * * PositionArray,
        long NumberOfNormals,
        SAFEARRAY * * NormalArray,
        long NumberofColors,
        SAFEARRAY * * colorArray,
        long NumberofIndices,
        SAFEARRAY * * Indexarray,
        long NumberOfFaces,
        SAFEARRAY * * FaceArray );
    HRESULT SaveAsPLMXML (
        _bstr_t bstrPLMXMLFilePath,
        _bstr_t bstrPLMXMLINIFilePath );
    PredefineRelationProducerPtr GetGetPredefineRelationProducer ( );
    HRESULT TGCopyFileByPackFunc (
        _bstr_t bsDest );
    HRESULT TGSaveAsLib (
        _bstr_t filePath );
    HRESULT TGSaveVaribalesInJson (
        _bstr_t filePath );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Activate ( ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct Application * * Application ) = 0;
      virtual HRESULT __stdcall raw_Close (
        /*[in]*/ VARIANT SaveChanges = vtMissing,
        /*[in]*/ VARIANT Filename = vtMissing,
        /*[in]*/ VARIANT RouteWorkbook = vtMissing ) = 0;
      virtual HRESULT __stdcall get_FullName (
        /*[out,retval]*/ BSTR * FullName ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct Application * * Parent ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * Path ) = 0;
      virtual HRESULT __stdcall raw_PrintOut (
        /*[in]*/ VARIANT Printer = vtMissing,
        /*[in]*/ VARIANT NumCopies = vtMissing,
        /*[in]*/ VARIANT Orientation = vtMissing,
        /*[in]*/ VARIANT PaperSize = vtMissing,
        /*[in]*/ VARIANT Scale = vtMissing,
        /*[in]*/ VARIANT PrintToFile = vtMissing,
        /*[in]*/ VARIANT OutputFileName = vtMissing,
        /*[in]*/ VARIANT PrintRange = vtMissing,
        /*[in]*/ VARIANT Sheets = vtMissing,
        /*[in]*/ VARIANT ColorAsBlack = vtMissing,
        /*[in]*/ VARIANT Collate = vtMissing ) = 0;
      virtual HRESULT __stdcall get_ReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * ReadOnly ) = 0;
      virtual HRESULT __stdcall get_RoutingSlip (
        /*[out,retval]*/ IDispatch * * RoutingSlip ) = 0;
      virtual HRESULT __stdcall raw_Save ( ) = 0;
      virtual HRESULT __stdcall raw_SaveAs (
        /*[in]*/ BSTR NewName,
        /*[in]*/ VARIANT IsATemplate = vtMissing,
        /*[in]*/ VARIANT FileFormat = vtMissing,
        /*[in]*/ VARIANT ReadOnlyEnforced = vtMissing,
        /*[in]*/ VARIANT ReadOnlyRecommended = vtMissing,
        /*[in]*/ VARIANT newstatus = vtMissing,
        /*[in]*/ VARIANT CreateBackup = vtMissing,
        /*[in]*/ VARIANT UpdateLinkInContainer = vtMissing,
        /*[in]*/ VARIANT UpdateAllLinksInContainer = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_SaveCopyAs (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall raw_SaveAsJT (
        /*[in]*/ BSTR NewName,
        /*[in]*/ VARIANT Include_PreciseGeom = vtMissing,
        /*[in]*/ VARIANT Prod_Structure_Option = vtMissing,
        /*[in]*/ VARIANT Export_PMI = vtMissing,
        /*[in]*/ VARIANT Export_CoordinateSystem = vtMissing,
        /*[in]*/ VARIANT Export_3DBodies = vtMissing,
        /*[in]*/ VARIANT NumberofLODs = vtMissing,
        /*[in]*/ VARIANT JTFileUnit = vtMissing,
        /*[in]*/ VARIANT Write_Which_Files = vtMissing,
        /*[in]*/ VARIANT Use_Simplified_TopAsm = vtMissing,
        /*[in]*/ VARIANT Use_Simplified_SubAsm = vtMissing,
        /*[in]*/ VARIANT Use_Simplified_Part = vtMissing,
        /*[in]*/ VARIANT EnableDefaultOutputPath = vtMissing,
        /*[in]*/ VARIANT IncludeSEProperties = vtMissing,
        /*[in]*/ VARIANT Export_VisiblePartsOnly = vtMissing,
        /*[in]*/ VARIANT Export_VisibleConstructionsOnly = vtMissing,
        /*[in]*/ VARIANT RemoveUnsafeCharacters = vtMissing,
        /*[in]*/ VARIANT ExportSEPartFileAsSingleJTFile = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_SaveAsBIDM (
        /*[in]*/ BSTR filePath,
        /*[in]*/ BSTR DocumentNumber,
        /*[in]*/ BSTR Revision,
        /*[in]*/ BSTR Title,
        /*[out,retval]*/ BSTR * NewFileName ) = 0;
      virtual HRESULT __stdcall raw_ReviseBIDM (
        /*[in]*/ BSTR filePath,
        /*[in]*/ BSTR Revision,
        /*[in]*/ BSTR Title,
        /*[out,retval]*/ BSTR * NewFileName ) = 0;
      virtual HRESULT __stdcall get_SelectSet (
        /*[out,retval]*/ struct SelectSet * * SelectSet ) = 0;
      virtual HRESULT __stdcall raw_SendMail (
        /*[in]*/ VARIANT Recipients = vtMissing,
        /*[in]*/ VARIANT Subject = vtMissing,
        /*[in]*/ VARIANT ReturnReceipt = vtMissing ) = 0;
      virtual HRESULT __stdcall get_SummaryInfo (
        /*[out,retval]*/ IDispatch * * SummaryInfo ) = 0;
      virtual HRESULT __stdcall get_Windows (
        /*[out,retval]*/ struct Windows * * Windows ) = 0;
      virtual HRESULT __stdcall get_Properties (
        /*[out,retval]*/ IDispatch * * Properties ) = 0;
      virtual HRESULT __stdcall get_IsTemplate (
        /*[out,retval]*/ VARIANT_BOOL * IsTemplate ) = 0;
      virtual HRESULT __stdcall put_IsTemplate (
        /*[in]*/ VARIANT_BOOL IsTemplate ) = 0;
      virtual HRESULT __stdcall get_Status (
        /*[out,retval]*/ enum DocumentStatus * Status ) = 0;
      virtual HRESULT __stdcall put_Status (
        /*[in]*/ enum DocumentStatus Status ) = 0;
      virtual HRESULT __stdcall raw_EditProperties ( ) = 0;
      virtual HRESULT __stdcall get_UnitsOfMeasure (
        /*[out,retval]*/ struct UnitsOfMeasure * * UnitsOfMeasurement ) = 0;
      virtual HRESULT __stdcall get_ActiveSketch (
        /*[out,retval]*/ IDispatch * * ActiveSketch ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum DocumentTypeConstants * Type ) = 0;
      virtual HRESULT __stdcall get_DocumentEvents (
        /*[out,retval]*/ struct IUnknown * * Events ) = 0;
      virtual HRESULT __stdcall get_RootStorage (
        /*[out,retval]*/ IUnknown * * RootStorageUnknown ) = 0;
      virtual HRESULT __stdcall get_AddInsStorage (
        /*[in]*/ BSTR Name,
        /*[in]*/ long grfMode,
        /*[out,retval]*/ IUnknown * * AddInsStorageUnknown ) = 0;
      virtual HRESULT __stdcall get_Dirty (
        /*[out,retval]*/ VARIANT_BOOL * Dirty ) = 0;
      virtual HRESULT __stdcall put_Dirty (
        /*[in]*/ VARIANT_BOOL Dirty ) = 0;
      virtual HRESULT __stdcall get_AttributeQuery (
        /*[out,retval]*/ struct AttributeQuery * * AttributeQuery ) = 0;
      virtual HRESULT __stdcall get_CreatedVersion (
        /*[out,retval]*/ BSTR * Version ) = 0;
      virtual HRESULT __stdcall get_LastSavedVersion (
        /*[out,retval]*/ BSTR * Version ) = 0;
      virtual HRESULT __stdcall get_HighlightSets (
        /*[out,retval]*/ struct HighlightSets * * HighlightSets ) = 0;
      virtual HRESULT __stdcall get_InPlaceActivated (
        /*[out,retval]*/ VARIANT_BOOL * InPlaceActivated ) = 0;
      virtual HRESULT __stdcall raw_SeekWriteAccess (
        /*[out]*/ VARIANT_BOOL * WriteAccess ) = 0;
      virtual HRESULT __stdcall get_UndoSteps (
        /*[out,retval]*/ long * NumberOfUndoSteps ) = 0;
      virtual HRESULT __stdcall put_UndoSteps (
        /*[in]*/ long NumberOfUndoSteps ) = 0;
      virtual HRESULT __stdcall raw_CreatePreview ( ) = 0;
      virtual HRESULT __stdcall put_ReadOnly (
        /*[in]*/ VARIANT_BOOL ReadOnly ) = 0;
      virtual HRESULT __stdcall raw_SeekReadOnlyAccess (
        /*[out]*/ VARIANT_BOOL * ReadOnlyAccess ) = 0;
      virtual HRESULT __stdcall raw_ImportStyles2 (
        /*[in]*/ enum seStyleTypeConstants StyleType,
        /*[in]*/ VARIANT_BOOL bReplace,
        /*[in]*/ IDispatch * pSrcDocument ) = 0;
      virtual HRESULT __stdcall get_IsInsightFile (
        /*[out,retval]*/ VARIANT_BOOL * IsInsight ) = 0;
      virtual HRESULT __stdcall get_NamedViews (
        /*[out,retval]*/ struct NamedViews * * NamedViews ) = 0;
      virtual HRESULT __stdcall raw_GetRegisteredCustomPropertiesBiDM (
        /*[out]*/ VARIANT * varPropInfo ) = 0;
      virtual HRESULT __stdcall raw_SaveAsWithCustomPropertiesBIDM (
        /*[in]*/ BSTR filePath,
        /*[in]*/ BSTR DocumentNumber,
        /*[in]*/ BSTR Revision,
        /*[in]*/ BSTR Title,
        /*[in]*/ VARIANT varPropInfo,
        /*[out,retval]*/ BSTR * NewFileName ) = 0;
      virtual HRESULT __stdcall raw_ReviseWithCustomPropertiesBIDM (
        /*[in]*/ BSTR filePath,
        /*[in]*/ BSTR Revision,
        /*[in]*/ BSTR Title,
        /*[in]*/ VARIANT varPropInfo,
        /*[out,retval]*/ BSTR * NewFileName ) = 0;
      virtual HRESULT __stdcall raw_SaveAsPRC (
        /*[in]*/ BSTR Filename ) = 0;
      virtual HRESULT __stdcall get_Variables (
        /*[out,retval]*/ IDispatch * * pVars ) = 0;
      virtual HRESULT __stdcall raw_NewWindow (
        /*[in]*/ VARIANT NewWindowOptions,
        /*[in]*/ VARIANT Environment,
        /*[out,retval]*/ VARIANT * Window ) = 0;
      virtual HRESULT __stdcall get_Blocks (
        /*[out,retval]*/ IDispatch * * Blocks ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall raw_SaveAs3DPrint (
        /*[in]*/ BSTR filePath,
        /*[in]*/ long NumberOfCoordinates,
        /*[in]*/ SAFEARRAY * * PositionArray,
        /*[in]*/ long NumberOfNormals,
        /*[in]*/ SAFEARRAY * * NormalArray,
        /*[in]*/ long NumberofColors,
        /*[in]*/ SAFEARRAY * * colorArray,
        /*[in]*/ long NumberofIndices,
        /*[in]*/ SAFEARRAY * * Indexarray,
        /*[in]*/ long NumberOfFaces,
        /*[in]*/ SAFEARRAY * * FaceArray ) = 0;
      virtual HRESULT __stdcall raw_SaveAsPLMXML (
        /*[in]*/ BSTR bstrPLMXMLFilePath,
        /*[in]*/ BSTR bstrPLMXMLINIFilePath ) = 0;
      virtual HRESULT __stdcall get_GetPredefineRelationProducer (
        /*[out,retval]*/ struct PredefineRelationProducer * * PredefineRelationProducer ) = 0;
      virtual HRESULT __stdcall raw_TGCopyFileByPackFunc (
        /*[in]*/ BSTR bsDest ) = 0;
      virtual HRESULT __stdcall raw_TGSaveAsLib (
        /*[in]*/ BSTR filePath ) = 0;
      virtual HRESULT __stdcall raw_TGSaveVaribalesInJson (
        /*[in]*/ BSTR filePath ) = 0;
};

enum PredefineRelationGroupPolarityConstants
{
    MagneticGroup = 0,
    SPoleGroup = 1,
    NPoleGroup = 2,
    CaptureFitGroup = 3
};

enum CapturedRelationshipTypeConstants
{
    seMate = 0,
    sePlanarAlign = 1,
    seAxialAlign = 2,
    seTangent = 3,
    seConnect = 4,
    seParallel = 5
};

enum CapturedRelationshipOffsetTypeConstants
{
    seFixed = 0,
    seFloating = 1,
    seOffsetNotSupported = 2
};

struct __declspec(uuid("55625738-65cb-4c3f-85c7-51e1687055bc"))
_IPredefineRelationProducerAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetDefaultGroup,put=PutDefaultGroup))
    unsigned int DefaultGroup;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;

    //
    // Wrapper methods for error-handling
    //

    int GroupCount ( );
    int MagneticGroupCount ( );
    VARIANT_BOOL HasAssemblyCaptureFitRelation ( );
    unsigned int AddPredefineRelationGroup (
        _bstr_t bstrGroupName,
        enum PredefineRelationGroupPolarityConstants ePolarity,
        VARIANT_BOOL bSetDefault );
    void PutDefaultGroup (
        unsigned int nGroupId );
    unsigned int GetDefaultGroup ( );
    HRESULT SetCaptureFitDefault (
        VARIANT_BOOL bCaptureFitDefault );
    HRESULT ClearDefault ( );
    HRESULT SetGroupName (
        unsigned int nGroupId,
        _bstr_t bstrGroupName );
    _bstr_t GetGroupName (
        unsigned int nGroupId );
    HRESULT SetGroupPolarity (
        unsigned int nGroupId,
        enum PredefineRelationGroupPolarityConstants ePolarity );
    enum PredefineRelationGroupPolarityConstants GetGroupPolarity (
        unsigned int nGroupId );
    int GetRelationCount (
        unsigned int nGroupId );
    int GetCaptureFitRelationCount ( );
    HRESULT DeleteGroups (
        int numDeleteGroups,
        unsigned int * pnDeleteGroupIds );
    HRESULT GetRelationData (
        unsigned int nGroupId,
        int nRelationIndex,
        IDispatch * * ppElement,
        enum CapturedRelationshipTypeConstants * pRelationType,
        enum CapturedRelationshipOffsetTypeConstants * pOffsetType,
        double * pdOffsetOne,
        double * pdOffsetTwo );
    HRESULT SetRelationData (
        unsigned int nGroupId,
        int nRelationIndex,
        IDispatch * pElement,
        enum CapturedRelationshipTypeConstants relationType,
        enum CapturedRelationshipOffsetTypeConstants offsetType,
        double dOffsetOne,
        double dOffsetTwo );
    HRESULT DeleteRelation (
        unsigned int nGroupId,
        int nRelationIndex );
    HRESULT AddMateRelation (
        unsigned int nGroupId,
        IDispatch * pElement,
        enum CapturedRelationshipOffsetTypeConstants * pOffsetType,
        double * pdOffsetOne,
        double * pdOffsetTwo );
    HRESULT AddPlanarRelation (
        unsigned int nGroupId,
        IDispatch * pElement,
        enum CapturedRelationshipOffsetTypeConstants * pOffsetType,
        double * pdOffsetOne,
        double * pdOffsetTwo );
    HRESULT AddAxialRelation (
        unsigned int nGroupId,
        IDispatch * pElement );
    HRESULT AddTangentRelation (
        unsigned int nGroupId,
        IDispatch * pElement,
        enum CapturedRelationshipOffsetTypeConstants * pOffsetType,
        double * pdOffsetOne,
        double * pdOffsetTwo );
    HRESULT AddConnectRelation (
        unsigned int nGroupId,
        IDispatch * pElement,
        enum CapturedRelationshipOffsetTypeConstants * pOffsetType,
        double * pdOffsetOne,
        double * pdOffsetTwo );
    HRESULT AddParallelRelation (
        unsigned int nGroupId,
        IDispatch * pElement,
        enum CapturedRelationshipOffsetTypeConstants * pOffsetType,
        double * pdOffsetOne,
        double * pdOffsetTwo );
    IDispatchPtr GetApplication ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GroupCount (
        /*[out,retval]*/ int * nGroupCount ) = 0;
      virtual HRESULT __stdcall raw_MagneticGroupCount (
        /*[out,retval]*/ int * nMagneticGroupCount ) = 0;
      virtual HRESULT __stdcall raw_HasAssemblyCaptureFitRelation (
        /*[out,retval]*/ VARIANT_BOOL * bHasAssemblyCaptureFit ) = 0;
      virtual HRESULT __stdcall raw_AddPredefineRelationGroup (
        BSTR bstrGroupName,
        enum PredefineRelationGroupPolarityConstants ePolarity,
        VARIANT_BOOL bSetDefault,
        /*[out,retval]*/ unsigned int * nGroupId ) = 0;
      virtual HRESULT __stdcall put_DefaultGroup (
        /*[in]*/ unsigned int nGroupId ) = 0;
      virtual HRESULT __stdcall get_DefaultGroup (
        /*[out,retval]*/ unsigned int * nGroupId ) = 0;
      virtual HRESULT __stdcall raw_SetCaptureFitDefault (
        /*[in]*/ VARIANT_BOOL bCaptureFitDefault ) = 0;
      virtual HRESULT __stdcall raw_ClearDefault ( ) = 0;
      virtual HRESULT __stdcall raw_SetGroupName (
        /*[in]*/ unsigned int nGroupId,
        /*[in]*/ BSTR bstrGroupName ) = 0;
      virtual HRESULT __stdcall raw_GetGroupName (
        /*[in]*/ unsigned int nGroupId,
        /*[out,retval]*/ BSTR * pbstrGroupName ) = 0;
      virtual HRESULT __stdcall raw_SetGroupPolarity (
        /*[in]*/ unsigned int nGroupId,
        /*[in]*/ enum PredefineRelationGroupPolarityConstants ePolarity ) = 0;
      virtual HRESULT __stdcall raw_GetGroupPolarity (
        /*[in]*/ unsigned int nGroupId,
        /*[out,retval]*/ enum PredefineRelationGroupPolarityConstants * pePolarity ) = 0;
      virtual HRESULT __stdcall raw_GetRelationCount (
        /*[in]*/ unsigned int nGroupId,
        /*[out,retval]*/ int * pnRelationCount ) = 0;
      virtual HRESULT __stdcall raw_GetCaptureFitRelationCount (
        /*[out,retval]*/ int * pnRelationCount ) = 0;
      virtual HRESULT __stdcall raw_DeleteGroups (
        /*[in]*/ int numDeleteGroups,
        /*[in]*/ unsigned int * pnDeleteGroupIds ) = 0;
      virtual HRESULT __stdcall raw_GetRelationData (
        /*[in]*/ unsigned int nGroupId,
        /*[in]*/ int nRelationIndex,
        /*[out]*/ IDispatch * * ppElement,
        /*[out]*/ enum CapturedRelationshipTypeConstants * pRelationType,
        /*[out]*/ enum CapturedRelationshipOffsetTypeConstants * pOffsetType,
        /*[out]*/ double * pdOffsetOne,
        /*[out]*/ double * pdOffsetTwo ) = 0;
      virtual HRESULT __stdcall raw_SetRelationData (
        /*[in]*/ unsigned int nGroupId,
        /*[in]*/ int nRelationIndex,
        /*[in]*/ IDispatch * pElement,
        /*[in]*/ enum CapturedRelationshipTypeConstants relationType,
        /*[in]*/ enum CapturedRelationshipOffsetTypeConstants offsetType,
        /*[in]*/ double dOffsetOne,
        /*[in]*/ double dOffsetTwo ) = 0;
      virtual HRESULT __stdcall raw_DeleteRelation (
        /*[in]*/ unsigned int nGroupId,
        /*[in]*/ int nRelationIndex ) = 0;
      virtual HRESULT __stdcall raw_AddMateRelation (
        /*[in]*/ unsigned int nGroupId,
        /*[in]*/ IDispatch * pElement,
        /*[in]*/ enum CapturedRelationshipOffsetTypeConstants * pOffsetType,
        /*[in]*/ double * pdOffsetOne,
        /*[in]*/ double * pdOffsetTwo ) = 0;
      virtual HRESULT __stdcall raw_AddPlanarRelation (
        /*[in]*/ unsigned int nGroupId,
        /*[in]*/ IDispatch * pElement,
        /*[in]*/ enum CapturedRelationshipOffsetTypeConstants * pOffsetType,
        /*[in]*/ double * pdOffsetOne,
        /*[in]*/ double * pdOffsetTwo ) = 0;
      virtual HRESULT __stdcall raw_AddAxialRelation (
        /*[in]*/ unsigned int nGroupId,
        /*[in]*/ IDispatch * pElement ) = 0;
      virtual HRESULT __stdcall raw_AddTangentRelation (
        /*[in]*/ unsigned int nGroupId,
        /*[in]*/ IDispatch * pElement,
        /*[in]*/ enum CapturedRelationshipOffsetTypeConstants * pOffsetType,
        /*[in]*/ double * pdOffsetOne,
        /*[in]*/ double * pdOffsetTwo ) = 0;
      virtual HRESULT __stdcall raw_AddConnectRelation (
        /*[in]*/ unsigned int nGroupId,
        /*[in]*/ IDispatch * pElement,
        /*[in]*/ enum CapturedRelationshipOffsetTypeConstants * pOffsetType,
        /*[in]*/ double * pdOffsetOne,
        /*[in]*/ double * pdOffsetTwo ) = 0;
      virtual HRESULT __stdcall raw_AddParallelRelation (
        /*[in]*/ unsigned int nGroupId,
        /*[in]*/ IDispatch * pElement,
        /*[in]*/ enum CapturedRelationshipOffsetTypeConstants * pOffsetType,
        /*[in]*/ double * pdOffsetOne,
        /*[in]*/ double * pdOffsetTwo ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * Application ) = 0;
};

struct __declspec(uuid("f0f14395-2811-4790-af4d-9f8dabffdffc"))
CPDInitializerInsightXT : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT GetDocuments (
        SAFEARRAY * * psaDocs );
    HRESULT GetPropertiesInfo (
        _bstr_t bstrDocName,
        VARIANT * pvPropInfo );
    HRESULT SetPropertiesInfo (
        _bstr_t bstrDocName,
        const _variant_t & vPropInfo );
    HRESULT GetItemTypes (
        _bstr_t bstrDocName,
        SAFEARRAY * * psaItemTypes );
    HRESULT GetMappedPropertiesInfo (
        _bstr_t bstrDocName,
        _bstr_t bstrItemType,
        VARIANT * pvPropInfo );
    HRESULT SetControlsBehavior (
        VARIANT_BOOL vbDisableAssignAllButtonAndMenu,
        VARIANT_BOOL vbDisableRestoreButton,
        VARIANT_BOOL vbDisableItemIDCell,
        VARIANT_BOOL vbDisableItemRevisionCell,
        VARIANT_BOOL vbDisableItemNameCell,
        VARIANT_BOOL vbDisableDatasetNameCell );
};

struct __declspec(uuid("4ab14139-faab-46eb-a93b-da3888de8a4a"))
_ICPDInitializerInsightXTAuto : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT GetDocuments (
        SAFEARRAY * * psaDocs );
    HRESULT GetPropertiesInfo (
        _bstr_t bstrDocName,
        VARIANT * pvPropInfo );
    HRESULT SetPropertiesInfo (
        _bstr_t bstrDocName,
        const _variant_t & vPropInfo );
    HRESULT GetItemTypes (
        _bstr_t bstrDocName,
        SAFEARRAY * * psaItemTypes );
    HRESULT GetMappedPropertiesInfo (
        _bstr_t bstrDocName,
        _bstr_t bstrItemType,
        VARIANT * pvPropInfo );
    HRESULT SetControlsBehavior (
        VARIANT_BOOL vbDisableAssignAllButtonAndMenu,
        VARIANT_BOOL vbDisableRestoreButton,
        VARIANT_BOOL vbDisableItemIDCell,
        VARIANT_BOOL vbDisableItemRevisionCell,
        VARIANT_BOOL vbDisableItemNameCell,
        VARIANT_BOOL vbDisableDatasetNameCell );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetDocuments (
        /*[out]*/ SAFEARRAY * * psaDocs ) = 0;
      virtual HRESULT __stdcall raw_GetPropertiesInfo (
        /*[in]*/ BSTR bstrDocName,
        /*[out]*/ VARIANT * pvPropInfo ) = 0;
      virtual HRESULT __stdcall raw_SetPropertiesInfo (
        /*[in]*/ BSTR bstrDocName,
        /*[in]*/ VARIANT vPropInfo ) = 0;
      virtual HRESULT __stdcall raw_GetItemTypes (
        /*[in]*/ BSTR bstrDocName,
        /*[out]*/ SAFEARRAY * * psaItemTypes ) = 0;
      virtual HRESULT __stdcall raw_GetMappedPropertiesInfo (
        /*[in]*/ BSTR bstrDocName,
        /*[in]*/ BSTR bstrItemType,
        /*[out]*/ VARIANT * pvPropInfo ) = 0;
      virtual HRESULT __stdcall raw_SetControlsBehavior (
        /*[in]*/ VARIANT_BOOL vbDisableAssignAllButtonAndMenu,
        /*[in]*/ VARIANT_BOOL vbDisableRestoreButton,
        /*[in]*/ VARIANT_BOOL vbDisableItemIDCell,
        /*[in]*/ VARIANT_BOOL vbDisableItemRevisionCell,
        /*[in]*/ VARIANT_BOOL vbDisableItemNameCell,
        /*[in]*/ VARIANT_BOOL vbDisableDatasetNameCell ) = 0;
};

struct __declspec(uuid("b7ccf9e0-0a3c-4ed4-859b-60097e8057ed"))
CPDInitializer : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT GetDocuments (
        SAFEARRAY * * psaDocs );
    HRESULT GetPropertiesInfo (
        _bstr_t bstrDocName,
        VARIANT * pvPropInfo );
    HRESULT SetPropertiesInfo (
        _bstr_t bstrDocName,
        const _variant_t & vPropInfo );
    HRESULT GetItemTypes (
        _bstr_t bstrDocName,
        SAFEARRAY * * psaItemTypes );
    HRESULT GetMappedPropertiesInfo (
        _bstr_t bstrDocName,
        _bstr_t bstrItemType,
        VARIANT * pvPropInfo );
    HRESULT SetControlsBehavior (
        VARIANT_BOOL vbDisableAssignAllButtonAndMenu,
        VARIANT_BOOL vbDisableRestoreButton,
        VARIANT_BOOL vbDisableItemIDCell,
        VARIANT_BOOL vbDisableItemRevisionCell,
        VARIANT_BOOL vbDisableItemNameCell,
        VARIANT_BOOL vbDisableDatasetNameCell );
};

struct __declspec(uuid("7e2f3921-cfe3-449e-879f-a20c0c306fdb"))
_ICPDInitializerAuto : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT GetDocuments (
        SAFEARRAY * * psaDocs );
    HRESULT GetPropertiesInfo (
        _bstr_t bstrDocName,
        VARIANT * pvPropInfo );
    HRESULT SetPropertiesInfo (
        _bstr_t bstrDocName,
        const _variant_t & vPropInfo );
    HRESULT GetItemTypes (
        _bstr_t bstrDocName,
        SAFEARRAY * * psaItemTypes );
    HRESULT GetMappedPropertiesInfo (
        _bstr_t bstrDocName,
        _bstr_t bstrItemType,
        VARIANT * pvPropInfo );
    HRESULT SetControlsBehavior (
        VARIANT_BOOL vbDisableAssignAllButtonAndMenu,
        VARIANT_BOOL vbDisableRestoreButton,
        VARIANT_BOOL vbDisableItemIDCell,
        VARIANT_BOOL vbDisableItemRevisionCell,
        VARIANT_BOOL vbDisableItemNameCell,
        VARIANT_BOOL vbDisableDatasetNameCell );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetDocuments (
        /*[out]*/ SAFEARRAY * * psaDocs ) = 0;
      virtual HRESULT __stdcall raw_GetPropertiesInfo (
        /*[in]*/ BSTR bstrDocName,
        /*[out]*/ VARIANT * pvPropInfo ) = 0;
      virtual HRESULT __stdcall raw_SetPropertiesInfo (
        /*[in]*/ BSTR bstrDocName,
        /*[in]*/ VARIANT vPropInfo ) = 0;
      virtual HRESULT __stdcall raw_GetItemTypes (
        /*[in]*/ BSTR bstrDocName,
        /*[out]*/ SAFEARRAY * * psaItemTypes ) = 0;
      virtual HRESULT __stdcall raw_GetMappedPropertiesInfo (
        /*[in]*/ BSTR bstrDocName,
        /*[in]*/ BSTR bstrItemType,
        /*[out]*/ VARIANT * pvPropInfo ) = 0;
      virtual HRESULT __stdcall raw_SetControlsBehavior (
        /*[in]*/ VARIANT_BOOL vbDisableAssignAllButtonAndMenu,
        /*[in]*/ VARIANT_BOOL vbDisableRestoreButton,
        /*[in]*/ VARIANT_BOOL vbDisableItemIDCell,
        /*[in]*/ VARIANT_BOOL vbDisableItemRevisionCell,
        /*[in]*/ VARIANT_BOOL vbDisableItemNameCell,
        /*[in]*/ VARIANT_BOOL vbDisableDatasetNameCell ) = 0;
};

struct __declspec(uuid("bad9aa0f-6c17-4b46-8eba-96f9e7d8aeb2"))
SectionView : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetShowCuttingPlane,put=PutShowCuttingPlane))
    long ShowCuttingPlane;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetPlaneExtentType,put=PutPlaneExtentType))
    enum SectionViewPlaneExtentTypeConstant PlaneExtentType;
    __declspec(property(get=GetIsCutByPlane))
    long IsCutByPlane;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetStyle,put=PutStyle))
    _bstr_t Style;
    __declspec(property(get=GetCuttingPlaneColor,put=PutCuttingPlaneColor))
    long CuttingPlaneColor;
    __declspec(property(get=GetCuttingPlaneEdgeColor,put=PutCuttingPlaneEdgeColor))
    long CuttingPlaneEdgeColor;
    __declspec(property(get=GetOpacity,put=PutOpacity))
    double Opacity;
    __declspec(property(get=GetThroughAllExtent,put=PutThroughAllExtent))
    double ThroughAllExtent;
    __declspec(property(get=GetCutHardware,put=PutCutHardware))
    long CutHardware;
    __declspec(property(get=GetSectionDisplayMode,put=PutSectionDisplayMode))
    enum PMISectionDisplayModeConstants SectionDisplayMode;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    void PutCaption (
        _bstr_t _arg1 );
    _bstr_t GetCaption ( );
    HRESULT Show (
        VARIANT_BOOL bShowSectionView );
    HRESULT Delete ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetName ( );
    void PutStyle (
        _bstr_t _arg1 );
    _bstr_t GetStyle ( );
    void PutCuttingPlaneColor (
        long _arg1 );
    long GetCuttingPlaneColor ( );
    void PutCuttingPlaneEdgeColor (
        long _arg1 );
    long GetCuttingPlaneEdgeColor ( );
    void PutOpacity (
        double _arg1 );
    double GetOpacity ( );
    void PutThroughAllExtent (
        double _arg1 );
    double GetThroughAllExtent ( );
    void PutCutHardware (
        long _arg1 );
    long GetCutHardware ( );
    void PutSectionDisplayMode (
        enum PMISectionDisplayModeConstants _arg1 );
    enum PMISectionDisplayModeConstants GetSectionDisplayMode ( );
    void PutShowCuttingPlane (
        long _arg1 );
    long GetShowCuttingPlane ( );
    HRESULT AddToModelView (
        IUnknown * ModelView );
    HRESULT RemoveFromModelView (
        IUnknown * ModelView );
    HRESULT EditByPlane (
        long nNumPlanes,
        SAFEARRAY * * pPlanes,
        SAFEARRAY * * PlaneCutDirections,
        enum SectionViewPlaneExtentTypeConstant eExtentType,
        long bCutHardwareParts );
    void PutPlaneExtentType (
        enum SectionViewPlaneExtentTypeConstant _arg1 );
    enum SectionViewPlaneExtentTypeConstant GetPlaneExtentType ( );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    HRESULT EditByPlaneEx (
        long nNumPlanes,
        SAFEARRAY * * pPlanes,
        SAFEARRAY * * PlaneCutDirections,
        SAFEARRAY * * SectionViewPlaneTypes,
        enum SectionViewPlaneExtentTypeConstant eExtentType,
        VARIANT_BOOL bCutHardwareParts );
    long GetIsCutByPlane ( );
};

struct __declspec(uuid("138a7bcf-8256-41ad-99b7-466370ffc7ce"))
SectionViews : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    int Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    int GetCount ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IDispatchPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr Add (
        long nNumProfiles,
        SAFEARRAY * * pProfiles,
        _bstr_t szCaption,
        double dExtent,
        enum SectionViewExtentSide eExtentSide,
        enum SectionViewProfileSide eProfileSide,
        long bCutHardwareParts );
    IDispatchPtr AddByPlane (
        long nNumPlanes,
        SAFEARRAY * * pPlanes,
        SAFEARRAY * * PlaneCutDirections,
        enum SectionViewPlaneExtentTypeConstant eExtentType,
        _bstr_t szCaption,
        long bCutHardwareParts );
    IDispatchPtr AddByPlaneEx (
        long nNumPlanes,
        SAFEARRAY * * pPlanes,
        SAFEARRAY * * PlaneCutDirections,
        SAFEARRAY * * SectionViewPlaneTypes,
        enum SectionViewPlaneExtentTypeConstant eExtentType,
        _bstr_t szCaption,
        VARIANT_BOOL bCutHardwareParts );
};

struct __declspec(uuid("98430d5e-ab9b-4b9c-bfcb-540b28ff9a55"))
InterDocumentUpdate : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT GetFilesToUpdate (
        SAFEARRAY * * FilesToUpdate,
        const _variant_t & FutureUse = vtMissing );
    HRESULT LoadFilesToUpdate (
        const _variant_t & FutureUse = vtMissing );
    HRESULT Update (
        enum InterDocumentUpdateMode UpdateMode,
        const _variant_t & FutureUse = vtMissing );
    HRESULT GetFilesToSave (
        SAFEARRAY * * FilesToSave,
        const _variant_t & FutureUse = vtMissing );
    HRESULT SaveChangedFiles (
        SAFEARRAY * * FilesNotSaved,
        const _variant_t & FutureUse = vtMissing );
};

enum InterDocumentUpdateMode
{
    seActiveLevel = 0,
    seAllOpenDocuments = 1
};

struct __declspec(uuid("310765a2-0306-4d3c-8944-86661d3c13eb"))
_IInterDocumentUpdateAuto : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT GetFilesToUpdate (
        SAFEARRAY * * FilesToUpdate,
        const _variant_t & FutureUse = vtMissing );
    HRESULT LoadFilesToUpdate (
        const _variant_t & FutureUse = vtMissing );
    HRESULT Update (
        enum InterDocumentUpdateMode UpdateMode,
        const _variant_t & FutureUse = vtMissing );
    HRESULT GetFilesToSave (
        SAFEARRAY * * FilesToSave,
        const _variant_t & FutureUse = vtMissing );
    HRESULT SaveChangedFiles (
        SAFEARRAY * * FilesNotSaved,
        const _variant_t & FutureUse = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetFilesToUpdate (
        /*[out]*/ SAFEARRAY * * FilesToUpdate,
        /*[in]*/ VARIANT FutureUse = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_LoadFilesToUpdate (
        /*[in]*/ VARIANT FutureUse = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Update (
        /*[in]*/ enum InterDocumentUpdateMode UpdateMode,
        /*[in]*/ VARIANT FutureUse = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_GetFilesToSave (
        /*[out]*/ SAFEARRAY * * FilesToSave,
        /*[in]*/ VARIANT FutureUse = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_SaveChangedFiles (
        /*[out]*/ SAFEARRAY * * FilesNotSaved,
        /*[in]*/ VARIANT FutureUse = vtMissing ) = 0;
};

struct __declspec(uuid("16e4bce4-2d7a-46b7-ac91-941d1125897a"))
SteeringWheel : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT GetOrigin (
        double * OriginX,
        double * OriginY,
        double * OriginZ );
    HRESULT SetOrigin (
        double OriginX,
        double OriginY,
        double OriginZ );
    HRESULT GetOriginAndAxis (
        enum seSteeringWheelConstants AxisType,
        double * OriginX,
        double * OriginY,
        double * OriginZ,
        double * AxisXComponent,
        double * AxisYComponent,
        double * AxisZComponent );
    HRESULT Align (
        enum seSteeringWheelConstants AxisType,
        double AxisXComponent,
        double AxisYComponent,
        double AxisZComponent );
    HRESULT AlignAlongLinerElement (
        enum seSteeringWheelConstants AxisType,
        IDispatch * LinearElementToAlignWith );
};

enum seSteeringWheelConstants
{
    seSteeringWheelConstantsXAxis = 1,
    seSteeringWheelConstantsYAxis = 2,
    seSteeringWheelConstantsZAxis = 3
};

struct __declspec(uuid("5c6f9716-8a18-4de2-8dc9-1dc6e59eb0a2"))
_ISteeringWheelAuto : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT GetOrigin (
        double * OriginX,
        double * OriginY,
        double * OriginZ );
    HRESULT SetOrigin (
        double OriginX,
        double OriginY,
        double OriginZ );
    HRESULT GetOriginAndAxis (
        enum seSteeringWheelConstants AxisType,
        double * OriginX,
        double * OriginY,
        double * OriginZ,
        double * AxisXComponent,
        double * AxisYComponent,
        double * AxisZComponent );
    HRESULT Align (
        enum seSteeringWheelConstants AxisType,
        double AxisXComponent,
        double AxisYComponent,
        double AxisZComponent );
    HRESULT AlignAlongLinerElement (
        enum seSteeringWheelConstants AxisType,
        IDispatch * LinearElementToAlignWith );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetOrigin (
        /*[out]*/ double * OriginX,
        /*[out]*/ double * OriginY,
        /*[out]*/ double * OriginZ ) = 0;
      virtual HRESULT __stdcall raw_SetOrigin (
        /*[in]*/ double OriginX,
        /*[in]*/ double OriginY,
        /*[in]*/ double OriginZ ) = 0;
      virtual HRESULT __stdcall raw_GetOriginAndAxis (
        /*[in]*/ enum seSteeringWheelConstants AxisType,
        /*[out]*/ double * OriginX,
        /*[out]*/ double * OriginY,
        /*[out]*/ double * OriginZ,
        /*[out]*/ double * AxisXComponent,
        /*[out]*/ double * AxisYComponent,
        /*[out]*/ double * AxisZComponent ) = 0;
      virtual HRESULT __stdcall raw_Align (
        /*[in]*/ enum seSteeringWheelConstants AxisType,
        /*[in]*/ double AxisXComponent,
        /*[in]*/ double AxisYComponent,
        /*[in]*/ double AxisZComponent ) = 0;
      virtual HRESULT __stdcall raw_AlignAlongLinerElement (
        /*[in]*/ enum seSteeringWheelConstants AxisType,
        /*[in]*/ IDispatch * LinearElementToAlignWith ) = 0;
};

struct __declspec(uuid("10b0f1ec-377e-4d9f-a133-aa79f510e831"))
CPDInitializerBiDM : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT GetDocuments (
        SAFEARRAY * * psaDocs );
    HRESULT GetPropertiesInfo (
        _bstr_t bstrDocName,
        VARIANT * pvPropInfo );
    HRESULT SetPropertiesInfo (
        _bstr_t bstrDocName,
        const _variant_t & vPropInfo );
    HRESULT SetControlsBehavior (
        VARIANT_BOOL vbDisableAssignAllButtonAndMenu,
        VARIANT_BOOL vbDisableDocumentNumberCell,
        VARIANT_BOOL vbDisableRevisionIDCell );
};

struct __declspec(uuid("116f20be-b357-4fe6-a9b9-60a919e320af"))
_ISEInsight : IUnknown
{};

struct __declspec(uuid("154499a8-48ed-4db9-b7a8-c5ef8a97d528"))
_ISolidEdgeTCE : IUnknown
{};

struct __declspec(uuid("b952fc46-daa7-48df-99d7-60240be446e5"))
_ISolidEdgeInsightXT : IUnknown
{};

struct __declspec(uuid("a1645a15-5ab9-47c6-90a5-f3db4ff3e288"))
_IDynamicVisualization : IUnknown
{};

//
// Function implementation mapping
//

#pragma start_map_region("D:\visualstudio\project\TGCAD\TGCAD\x64\Debug\tgframewrk.tli")
__declspec(implementation_key(1)) ApplicationPtr SelectSet::GetApplication ( );
__declspec(implementation_key(2)) IDispatchPtr SelectSet::GetParent ( );
__declspec(implementation_key(3)) long SelectSet::GetCount ( );
__declspec(implementation_key(4)) HRESULT SelectSet::Add ( IDispatch * Dispatch );
__declspec(implementation_key(5)) HRESULT SelectSet::Remove ( const _variant_t & Index );
__declspec(implementation_key(6)) HRESULT SelectSet::RemoveAll ( );
__declspec(implementation_key(7)) IDispatchPtr SelectSet::Item ( const _variant_t & Index );
__declspec(implementation_key(8)) HRESULT SelectSet::Copy ( );
__declspec(implementation_key(9)) HRESULT SelectSet::Cut ( );
__declspec(implementation_key(10)) HRESULT SelectSet::Delete ( );
__declspec(implementation_key(11)) HRESULT SelectSet::AddAll ( );
__declspec(implementation_key(12)) enum ObjectType SelectSet::GetType ( );
__declspec(implementation_key(13)) HRESULT SelectSet::CopyProfile ( );
__declspec(implementation_key(14)) HRESULT SelectSet::CutProfile ( );
__declspec(implementation_key(15)) HRESULT SelectSet::SuspendDisplay ( );
__declspec(implementation_key(16)) HRESULT SelectSet::ResumeDisplay ( );
__declspec(implementation_key(17)) HRESULT SelectSet::RefreshDisplay ( );
__declspec(implementation_key(18)) HRESULT Application::Activate ( );
__declspec(implementation_key(19)) IDispatchPtr Application::GetActiveDocument ( );
__declspec(implementation_key(20)) _bstr_t Application::GetActiveEnvironment ( );
__declspec(implementation_key(21)) _bstr_t Application::GetActivePrinter ( );
__declspec(implementation_key(22)) SelectSetPtr Application::GetActiveSelectSet ( );
__declspec(implementation_key(23)) int Application::GetActiveStatusBarPart ( );
__declspec(implementation_key(24)) void Application::PutActiveStatusBarPart ( int _arg1 );
__declspec(implementation_key(25)) IDispatchPtr Application::GetActiveWindow ( );
__declspec(implementation_key(26)) ApplicationPtr Application::GetApplication ( );
__declspec(implementation_key(27)) _bstr_t Application::GetCaption ( );
__declspec(implementation_key(28)) void Application::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(29)) _bstr_t Application::GetDefaultFilePath ( );
__declspec(implementation_key(30)) void Application::PutDefaultFilePath ( _bstr_t _arg1 );
__declspec(implementation_key(31)) void Application::PutDelayCompute ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(32)) VARIANT_BOOL Application::GetDelayCompute ( );
__declspec(implementation_key(33)) VARIANT_BOOL Application::GetDisplayAlerts ( );
__declspec(implementation_key(34)) void Application::PutDisplayAlerts ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(35)) VARIANT_BOOL Application::GetDisplayFullScreen ( );
__declspec(implementation_key(36)) void Application::PutDisplayFullScreen ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(37)) VARIANT_BOOL Application::GetDisplayRecentFiles ( );
__declspec(implementation_key(38)) void Application::PutDisplayRecentFiles ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(39)) long Application::GetDisplayRecentFilesCount ( );
__declspec(implementation_key(40)) void Application::PutDisplayRecentFilesCount ( long _arg1 );
__declspec(implementation_key(41)) DocumentsPtr Application::GetDocuments ( );
__declspec(implementation_key(42)) EnvironmentsPtr Application::GetEnvironments ( );
__declspec(implementation_key(43)) _variant_t Application::SEGetOpenFileName ( enum LinksUpdateOption * LinksUpdate, BSTR * AltLinkPath, enum DocumentAccess * DocAccess, enum NotifyOption * OptNotify, IDispatch * * DocRelationAutoServer, const _variant_t & FileFilter, const _variant_t & FilterIndex, const _variant_t & Title, const _variant_t & IgnoreWarnings );
__declspec(implementation_key(44)) long Application::SearchDocuments ( VARIANT_BOOL bUseSearchScope, _bstr_t bstrFolders, VARIANT_BOOL bIncludeSubFolders, VARIANT * ListOfFoundDocuments, long * iNumDocsFound, const _variant_t & varFileFilterOrText, const _variant_t & PropertyList, const _variant_t & ConditionList, const _variant_t & PropertyValueList, const _variant_t & varNumProps, const _variant_t & varCheckModified, const _variant_t & varNumberOfDays, VARIANT * ListOfTitles, VARIANT * ListOfSubjects, VARIANT * ListOfModifiedDates );
__declspec(implementation_key(45)) _variant_t Application::GetSaveAsFileName ( int * LinkSaveOption, long * SelectedFilter, const _variant_t & InitialFilename, const _variant_t & FileFilter, const _variant_t & FilterIndex, const _variant_t & Title, const _variant_t & IsTemplate );
__declspec(implementation_key(46)) _variant_t Application::FindFile ( );
__declspec(implementation_key(47)) _variant_t Application::GetDirectoryName ( );
__declspec(implementation_key(48)) int Application::GetHeight ( );
__declspec(implementation_key(49)) void Application::PutHeight ( int _arg1 );
__declspec(implementation_key(50)) long Application::GethWnd ( );
__declspec(implementation_key(51)) VARIANT_BOOL Application::GetInteractive ( );
__declspec(implementation_key(52)) void Application::PutInteractive ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(53)) int Application::GetLeft ( );
__declspec(implementation_key(54)) void Application::PutLeft ( int _arg1 );
__declspec(implementation_key(55)) HRESULT Application::MailLogoff ( );
__declspec(implementation_key(56)) HRESULT Application::MailLogon ( const _variant_t & Name, const _variant_t & Password, const _variant_t & DownloadNewMail );
__declspec(implementation_key(57)) long Application::GetMailSession ( );
__declspec(implementation_key(58)) _bstr_t Application::GetName ( );
__declspec(implementation_key(59)) ApplicationPtr Application::GetParent ( );
__declspec(implementation_key(60)) HRESULT Application::Quit ( );
__declspec(implementation_key(61)) VARIANT_BOOL Application::GetScreenUpdating ( );
__declspec(implementation_key(62)) void Application::PutScreenUpdating ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(63)) _bstr_t Application::GetStatusBar ( );
__declspec(implementation_key(64)) void Application::PutStatusBar ( _bstr_t _arg1 );
__declspec(implementation_key(65)) VARIANT_BOOL Application::GetStatusBarDelayUpdate ( );
__declspec(implementation_key(66)) void Application::PutStatusBarDelayUpdate ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(67)) int Application::GetStatusBarHeight ( );
__declspec(implementation_key(68)) int Application::GetStatusBarPartCount ( );
__declspec(implementation_key(69)) void Application::PutStatusBarPartCount ( int _arg1 );
__declspec(implementation_key(70)) int Application::GetStatusBarPartWidth ( );
__declspec(implementation_key(71)) void Application::PutStatusBarPartWidth ( int _arg1 );
__declspec(implementation_key(72)) VARIANT_BOOL Application::GetStatusBarVisible ( );
__declspec(implementation_key(73)) void Application::PutStatusBarVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(74)) int Application::GetTop ( );
__declspec(implementation_key(75)) void Application::PutTop ( int _arg1 );
__declspec(implementation_key(76)) int Application::GetUsableHeight ( );
__declspec(implementation_key(77)) int Application::GetUsableWidth ( );
__declspec(implementation_key(78)) _bstr_t Application::GetUserName ( );
__declspec(implementation_key(79)) void Application::PutUserName ( _bstr_t _arg1 );
__declspec(implementation_key(80)) _bstr_t Application::GetValue ( );
__declspec(implementation_key(81)) _bstr_t Application::GetVersion ( );
__declspec(implementation_key(82)) VARIANT_BOOL Application::GetVisible ( );
__declspec(implementation_key(83)) void Application::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(84)) int Application::GetWidth ( );
__declspec(implementation_key(85)) void Application::PutWidth ( int _arg1 );
__declspec(implementation_key(86)) WindowsPtr Application::GetWindows ( );
__declspec(implementation_key(87)) int Application::GetWindowState ( );
__declspec(implementation_key(88)) void Application::PutWindowState ( int _arg1 );
__declspec(implementation_key(89)) IUnknownPtr Application::GetApplicationEvents ( );
__declspec(implementation_key(90)) IUnknownPtr Application::GetApplicationWindowEvents ( );
__declspec(implementation_key(91)) enum DocumentTypeConstants Application::GetActiveDocumentType ( );
__declspec(implementation_key(92)) IUnknownPtr Application::GetFileUIEvents ( );
__declspec(implementation_key(93)) IUnknownPtr Application::GetBeforeFileSaveAsEvents ( );
__declspec(implementation_key(94)) HRESULT Application::StartCommand ( enum SolidEdgeCommandConstants CommandID );
__declspec(implementation_key(95)) VARIANT_BOOL Application::CommandEnabled ( int CommandID, _bstr_t strEnvironment, VARIANT_BOOL * bLicensed, VARIANT_BOOL * bUnknownCmd );
__declspec(implementation_key(96)) DISECommandPtr Application::CreateCommand ( long CmdFlags );
__declspec(implementation_key(97)) HRESULT Application::ReplaceReference ( const _variant_t & FromReference, const _variant_t & ToReference, const _variant_t & Scope, const _variant_t & Recursive );
__declspec(implementation_key(98)) HRESULT Application::RunMacro ( _bstr_t Filename );
__declspec(implementation_key(99)) AddInsPtr Application::GetAddIns ( );
__declspec(implementation_key(100)) VARIANT_BOOL Application::GetEnableStereo ( );
__declspec(implementation_key(101)) void Application::PutEnableStereo ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(102)) VARIANT_BOOL Application::GetEdgeBarVisible ( );
__declspec(implementation_key(103)) void Application::PutEdgeBarVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(104)) IUnknownPtr Application::GetFeatureLibraryEvents ( );
__declspec(implementation_key(105)) HRESULT Application::GetGlobalParameter ( enum ApplicationGlobalConstants Parameter, VARIANT * Value );
__declspec(implementation_key(106)) HRESULT Application::SetGlobalParameter ( enum ApplicationGlobalConstants Parameter, const _variant_t & Value );
__declspec(implementation_key(107)) IDispatchPtr Application::GetActiveObject ( enum SeObjectType Type );
__declspec(implementation_key(108)) InsightPtr Application::GetInsight ( );
__declspec(implementation_key(109)) IUnknownPtr Application::GetApplicationV8AfterDocumentOpenEvent ( );
__declspec(implementation_key(110)) HRESULT Application::SetOLERequestPendingTimeout ( const _variant_t & SetOLERequestPendingTimeout );
__declspec(implementation_key(111)) HRESULT Application::SetOLEServerBusyTimeout ( const _variant_t & SetOLEServerBusyTimeout );
__declspec(implementation_key(112)) IUnknownPtr Application::GetFeatureSelectedFromPFEvents ( );
__declspec(implementation_key(113)) HRESULT Application::CreateSEDocumentFromTDMAuto ( _bstr_t bstrHostName, _bstr_t bstrServerName, _bstr_t bstrFolderLocation, _bstr_t bstrProject, _bstr_t bstrLibrary, _bstr_t bstrItemGUID, _bstr_t bstrVersionGUID, _bstr_t bstrVersionNumber, enum DocumentTypeConstants SEDocType, _bstr_t bstrAssemblyTemplate, _bstr_t bstrPartTemplate );
__declspec(implementation_key(114)) HRESULT Application::CreateSEDraftDocFromDXFAuto ( _bstr_t bstrDxfFileName, _bstr_t bstrDraftFileLocation, _bstr_t bstrDraftTemplateFile, _bstr_t bstrclsidDoc );
__declspec(implementation_key(115)) HRESULT Application::CreateSEDocumentFromForeignFile ( _bstr_t bstrForeignFilePath, _bstr_t bstrSEFileLocation, _bstr_t bstrTemplatePath, _bstr_t bstrClsid, enum BulkMigrationTypeConstants MigrationType );
__declspec(implementation_key(116)) _bstr_t Application::GetTemplateFileName ( enum DocumentTypeConstants * DocType, const _variant_t & FileFilter );
__declspec(implementation_key(117)) _bstr_t Application::GetDefaultTemplatePath ( enum DocumentTypeConstants DocType );
__declspec(implementation_key(118)) HRESULT Application::SetDefaultTemplatePath ( enum DocumentTypeConstants DocType, _bstr_t TemplatePath );
__declspec(implementation_key(119)) HRESULT Application::DoIdle ( );
__declspec(implementation_key(120)) MatTablePtr Application::GetMaterialTable ( );
__declspec(implementation_key(121)) IUnknownPtr Application::GetNewFileUIEvents ( );
__declspec(implementation_key(122)) HRESULT Application::SEAdminUpdate ( );
__declspec(implementation_key(123)) IUnknownPtr Application::GetShortcutMenuEvents ( );
__declspec(implementation_key(124)) VARIANT_BOOL Application::GetApprenticeMode ( );
__declspec(implementation_key(125)) void Application::PutApprenticeMode ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(126)) VARIANT_BOOL Application::GetShowStartupScreen ( );
__declspec(implementation_key(127)) void Application::PutShowStartupScreen ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(128)) SolidEdgeTCEPtr Application::GetSolidEdgeTCE ( );
__declspec(implementation_key(129)) SolidEdgeInsightXTPtr Application::GetSolidEdgeInsightXT ( );
__declspec(implementation_key(130)) VARIANT_BOOL Application::GetIsIdling ( long MilliSec );
__declspec(implementation_key(131)) VARIANT_BOOL Application::GetResolveLink ( );
__declspec(implementation_key(132)) void Application::PutResolveLink ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(133)) HRESULT Application::DisableEventsForGivenAddIn ( _bstr_t bstrClsid );
__declspec(implementation_key(134)) HRESULT Application::SetAddInInterfaces ( _bstr_t bstrClsid, SAFEARRAY * * pSaUnknownPtrs );
__declspec(implementation_key(135)) HRESULT Application::EnableEventsForGivenAddIn ( _bstr_t bstrClsid );
__declspec(implementation_key(136)) HRESULT Application::ShowCommand ( int nCmdID, VARIANT_BOOL Highlight );
__declspec(implementation_key(137)) int Application::GetProcessID ( );
__declspec(implementation_key(138)) IUnknownPtr Application::GetSEECEvents ( );
__declspec(implementation_key(139)) IUnknownPtr Application::GetSESPEvents ( );
__declspec(implementation_key(140)) IUnknownPtr Application::GetBiDMEvents ( );
__declspec(implementation_key(141)) HRESULT Application::WriteDocumentFormulaIntoXML ( _bstr_t outputXMLPath, _bstr_t knownResXMLPath, VARIANT_BOOL bDeepTree );
__declspec(implementation_key(142)) HRESULT Application::SetBuiltInATPRunningFlagAndATPID ( VARIANT_BOOL bRunningFlag, _bstr_t strATPID );
__declspec(implementation_key(143)) HRESULT Application::SetValuesForBIDMCPD ( VARIANT * pvarListOfValues );
__declspec(implementation_key(144)) HRESULT Application::SetMessageForBIDMCPD ( VARIANT * pvarListOfMessages );
__declspec(implementation_key(145)) HRESULT Application::SetBIDMATPInfo ( _bstr_t bstrATPClassName, _bstr_t bstrATPName, long ATPId );
__declspec(implementation_key(146)) int Application::GetCountOfOpenModelsInFemap ( );
__declspec(implementation_key(147)) CustomizationPtr Application::GetCustomization ( );
__declspec(implementation_key(148)) IDispatchPtr Application::GetDraftPrintUtility ( );
__declspec(implementation_key(149)) HRESULT Application::ArrangeWindows ( enum ArrangeWindowsStyles Style );
__declspec(implementation_key(150)) _variant_t Application::GetOpenFileNameWithOptions ( unsigned long dwFlagForOpen, enum LinksUpdateOption * LinksUpdate, BSTR * AltLinkPath, enum DocumentAccess * DocAccess, enum NotifyOption * OptNotify, IDispatch * * DocRelationAutoServer, const _variant_t & FileFilter, const _variant_t & FilterIndex, const _variant_t & Title, const _variant_t & IgnoreWarnings );
__declspec(implementation_key(151)) HRESULT Application::SEGetFileVersionInfo ( _bstr_t Filename, enum DocumentTypeConstants * DocType, BSTR * CreatedVersion, BSTR * LastSavedVersion, unsigned long * GeometricVersion );
__declspec(implementation_key(152)) HRESULT Application::GenerateMasterImportListForDataPrep ( SAFEARRAY * * psalistOfFilesFolders, VARIANT_BOOL IncludeSubFolders, unsigned long FileTypes, _bstr_t TimeStamp, _bstr_t WorkingFolderLocation, BSTR * OrderedCSVFilePath, BSTR * UnOrderedCSVFilePath, BSTR * BrokenLinkXMLFilePath, int * iNumberOfBrokenLinks, BSTR * LinkReportFilePath, BSTR * ErrorMsg, enum GenerateMasterImportListError * ErrCode );
__declspec(implementation_key(153)) _variant_t Application::FindWhereUsedDocuments ( const _variant_t & DocumentPathName, SAFEARRAY * * psalistOfDirectories, VARIANT_BOOL IncludeSubFolders, SAFEARRAY * * psaFilterList );
__declspec(implementation_key(154)) _variant_t Application::QuerySystemInformation ( _bstr_t Search );
__declspec(implementation_key(155)) HRESULT Application::DisableBuilInDataMgmt ( VARIANT_BOOL bDisableBuiltInDM );
__declspec(implementation_key(156)) _bstr_t Application::GetRegistryPath ( );
__declspec(implementation_key(157)) _bstr_t Application::GetAppDataFolder ( );
__declspec(implementation_key(158)) HRESULT Application::GetRevisionLinkInfo ( _bstr_t bstrFilePath, VARIANT * pVarRevisionRoot, VARIANT * pVarRevisedFrom );
__declspec(implementation_key(159)) HRESULT Application::GetRevisionsHistory ( _bstr_t PathName, SAFEARRAY * * psaScope, VARIANT * psaRevHistoryFileNameList, VARIANT * psaRevHistoryRevisionFromList );
__declspec(implementation_key(160)) HRESULT Application::OpenDraft ( );
__declspec(implementation_key(161)) HRESULT Application::GetLatestRevision ( _bstr_t PathName, SAFEARRAY * * psaScope, BSTR * bLatestRevPath, BSTR * bLatestReleasedRevPath );
__declspec(implementation_key(162)) HRESULT Application::GetTopLevelAssemblyFileNames ( SAFEARRAY * * FileNames, SAFEARRAY * * TopLevelAssemblyFileNames );
__declspec(implementation_key(163)) HRESULT Application::FindSEDocumentsContainingText ( _bstr_t text_to_search, SAFEARRAY * * psaScope, _bstr_t file_types, VARIANT_BOOL bIncludeSubFolders, SAFEARRAY * * FilesFoundInSearch );
__declspec(implementation_key(164)) HRESULT Application::ResetConfigFile ( enum ConfigResetType eResetType, enum ConfigForForeignFileType eConfigFileType, enum FileTranslationMode eTranslationMode, _bstr_t GroupName, VARIANT * pFile, VARIANT * pTemplateName );
__declspec(implementation_key(165)) long Application::GetNextDocumentNumbers ( int countOfFiles, VARIANT * pVarPrefix, VARIANT * pVarDocNumbs );
__declspec(implementation_key(166)) HRESULT Application::Get_Set_UseBiDM_SEOption ( VARIANT_BOOL bGet, VARIANT_BOOL * iValue );
__declspec(implementation_key(167)) HRESULT Application::Get_Set_FileNamingRule ( VARIANT_BOOL bGet, VARIANT_BOOL * bValue );
__declspec(implementation_key(168)) _bstr_t Application::GetDocNameFormulaForFile ( _bstr_t bFilename );
__declspec(implementation_key(169)) HRESULT Application::BiDM_RegisterCustomProps ( VARIANT_BOOL bProcessCustomPropsFromPropSeed, VARIANT_BOOL bProcessCustomPropsFromTemplates );
__declspec(implementation_key(170)) HRESULT Application::PerformSolidEdgeWorkflow ( _bstr_t bstrFilePath, struct SolidEdgeWorkflowInfo * pSEWorkflowInfo );
__declspec(implementation_key(171)) HRESULT Application::GetSolidEdgeWorkflowInformation ( _bstr_t bstrFilePath, struct SolidEdgeWorkflowQueryInfo * pSEWorkflowQueryInfo );
__declspec(implementation_key(172)) HRESULT Application::SuspendMRU ( );
__declspec(implementation_key(173)) HRESULT Application::ResumeMRU ( );
__declspec(implementation_key(174)) HRESULT Application::ClearMRU ( );
__declspec(implementation_key(175)) HRESULT Application::AbortCommand ( VARIANT_BOOL AbortAllCommands );
__declspec(implementation_key(176)) VARIANT_BOOL Application::Publish3DPDF ( _bstr_t bstrInputFileOrFolderPath, _bstr_t bstr3DPDFTemplateFile, VARIANT_BOOL bIncludeSubFolders, _bstr_t bstrOutputFolderPath, _bstr_t bstr3DPDFFileName, VARIANT_BOOL bOpenPDFAfterPublish, VARIANT_BOOL bPublishHTML, VARIANT_BOOL bAddNextPrevButtons, VARIANT_BOOL bAddFileCustomPropsToPDF, VARIANT_BOOL bSelectAllPMIModelViewsForPDF, _bstr_t bstrDefaultModelView, VARIANT_BOOL bGenAndAttachSTEPAP242, VARIANT_BOOL bGenAndAttachJT, const _variant_t & ListOfAttachments );
__declspec(implementation_key(177)) VARIANT_BOOL Application::ConvertByFilePath ( _bstr_t InputFileOrFolderPath, _bstr_t OutputFileOrFolderPath );
__declspec(implementation_key(178)) VARIANT_BOOL Application::GetCommandPredictionLearningMode ( );
__declspec(implementation_key(179)) void Application::PutCommandPredictionLearningMode ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(180)) _bstr_t Application::GetSoldToID ( );
__declspec(implementation_key(181)) HRESULT Application::GetListOfTopLevelAssembliesFromFolder ( _bstr_t FolderPath, SAFEARRAY * * TopAssembliesList );
__declspec(implementation_key(182)) _bstr_t Application::GetLicenseType ( );
__declspec(implementation_key(183)) HRESULT Application::GenerateSourceImportListForDataPrep ( SAFEARRAY * * psalistOfFilesFolders, VARIANT_BOOL IncludeSubFolders, unsigned long FileTypes, _bstr_t TimeStamp, _bstr_t WorkingFolderLocation, BSTR * OrderedCSVFilePath, BSTR * UnOrderedCSVFilePath, BSTR * BrokenLinkXMLFilePath, int * iNumberOfBrokenLinks, BSTR * LinkReportFilePath, BSTR * ErrorMsg, enum GenerateSourceImportListError * ErrCode );
__declspec(implementation_key(184)) long Application::GetActiveFramehWnd ( );
__declspec(implementation_key(185)) DynamicVisualizationPtr Application::GetDynamicVisualization ( );
__declspec(implementation_key(186)) __int64 Application::GetLicenseHandle ( );
__declspec(implementation_key(187)) HRESULT Application::OpenNoteLibrary ( );
__declspec(implementation_key(188)) HRESULT Application::CloseNoteLibrary ( );
__declspec(implementation_key(189)) HRESULT Application::GetSavedNoteList ( SAFEARRAY * * saSavedNote );
__declspec(implementation_key(190)) IUnknownPtr Application::GetSavedNote ( _bstr_t bstrNoteName );
__declspec(implementation_key(191)) HRESULT Application::AddNote ( _bstr_t bstrNoteName, _bstr_t bstrText, VARIANT_BOOL bNoteOverWrite );
__declspec(implementation_key(192)) VARIANT_BOOL Application::Publish3DPDFEx ( _bstr_t bstrInputFileOrFolderPath, _bstr_t bstr3DPDFTemplateFile, VARIANT_BOOL bIncludeSubFolders, _bstr_t bstrOutputFolderPath, _bstr_t bstr3DPDFFileName, VARIANT_BOOL bOpenPDFAfterPublish, VARIANT_BOOL bPublishHTML, VARIANT_BOOL bAddNextPrevButtons, VARIANT_BOOL bAddFileCustomPropsToPDF, VARIANT_BOOL bSelectAllPMIModelViewsForPDF, _bstr_t bstrDefaultModelView, VARIANT_BOOL bGenAndAttachSTEPAP242, VARIANT_BOOL bGenAndAttachJT, const _variant_t & ListOfAttachments, VARIANT_BOOL bSelectAllNamedViewsForPDF, const _variant_t & ListOfNamedViews, const _variant_t & ListOfPMIModelViews );
__declspec(implementation_key(193)) long Application::GetActiveCommand ( );
__declspec(implementation_key(194)) IUnknownPtr Application::GetOpenNonSolidEdgeFileUIEvents ( );
__declspec(implementation_key(195)) VARIANT_BOOL Application::LicenseCheck ( enum SELicenseCheck Type, _bstr_t Feature );
__declspec(implementation_key(196)) ApplicationPtr _ISelectSetAuto::GetApplication ( );
__declspec(implementation_key(197)) IDispatchPtr _ISelectSetAuto::GetParent ( );
__declspec(implementation_key(198)) long _ISelectSetAuto::GetCount ( );
__declspec(implementation_key(199)) HRESULT _ISelectSetAuto::Add ( IDispatch * Dispatch );
__declspec(implementation_key(200)) HRESULT _ISelectSetAuto::Remove ( const _variant_t & Index );
__declspec(implementation_key(201)) HRESULT _ISelectSetAuto::RemoveAll ( );
__declspec(implementation_key(202)) IDispatchPtr _ISelectSetAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(203)) IUnknownPtr _ISelectSetAuto::Get_NewEnum ( );
__declspec(implementation_key(204)) HRESULT _ISelectSetAuto::Copy ( );
__declspec(implementation_key(205)) HRESULT _ISelectSetAuto::Cut ( );
__declspec(implementation_key(206)) HRESULT _ISelectSetAuto::Delete ( );
__declspec(implementation_key(207)) HRESULT _ISelectSetAuto::AddAll ( );
__declspec(implementation_key(208)) enum ObjectType _ISelectSetAuto::GetType ( );
__declspec(implementation_key(209)) HRESULT _ISelectSetAuto::CopyProfile ( );
__declspec(implementation_key(210)) HRESULT _ISelectSetAuto::CutProfile ( );
__declspec(implementation_key(211)) HRESULT _ISelectSetAuto::SuspendDisplay ( );
__declspec(implementation_key(212)) HRESULT _ISelectSetAuto::ResumeDisplay ( );
__declspec(implementation_key(213)) HRESULT _ISelectSetAuto::RefreshDisplay ( );
__declspec(implementation_key(214)) ApplicationPtr Documents::GetApplication ( );
__declspec(implementation_key(215)) HRESULT Documents::Close ( );
__declspec(implementation_key(216)) long Documents::GetCount ( );
__declspec(implementation_key(217)) ApplicationPtr Documents::GetParent ( );
__declspec(implementation_key(218)) IDispatchPtr Documents::Add ( const _variant_t & ProgID, const _variant_t & TemplateDoc );
__declspec(implementation_key(219)) IDispatchPtr Documents::Item ( const _variant_t & Index );
__declspec(implementation_key(220)) IDispatchPtr Documents::Open ( _bstr_t Filename, const _variant_t & DocRelationAutoServer, const _variant_t & AltPath, const _variant_t & RecognizeFeaturesIfPartTemplate, const _variant_t & RevisionRuleOption, const _variant_t & StopFileOpenIfRevisionRuleNotApplicable );
__declspec(implementation_key(221)) IDispatchPtr Documents::OpenWithTemplate ( _bstr_t Filename, _bstr_t Template, const _variant_t & RecognizeFeaturesIfPartTemplate );
__declspec(implementation_key(222)) _bstr_t Documents::GetTemplatePath ( );
__declspec(implementation_key(223)) _bstr_t Documents::GetAutoCadConfigFile ( );
__declspec(implementation_key(224)) void Documents::PutAutoCadConfigFile ( _bstr_t _arg1 );
__declspec(implementation_key(225)) HRESULT Documents::SetForeignFileConfigValue ( _bstr_t DocumentProgID, _bstr_t Filename, _bstr_t SectionName, _bstr_t Name, _bstr_t Value );
__declspec(implementation_key(226)) _bstr_t Documents::GetForeignFileConfigValue ( _bstr_t DocumentProgID, _bstr_t Filename, _bstr_t SectionName, _bstr_t Name );
__declspec(implementation_key(227)) HRESULT Documents::CloseDocument ( _bstr_t Filename, const _variant_t & SaveChanges, const _variant_t & SaveAsFileName, const _variant_t & RouteWorkbook, const _variant_t & DoIdle );
__declspec(implementation_key(228)) TemplateManagerPtr Documents::GetTemplateManager ( );
__declspec(implementation_key(229)) IDispatchPtr Documents::OpenWithFileOpenDialog ( const _variant_t & Filename, const _variant_t & DialogTitle, const _variant_t & Flags );
__declspec(implementation_key(230)) ApplicationPtr TemplateManager::GetApplication ( );
__declspec(implementation_key(231)) IDispatchPtr TemplateManager::GetParent ( );
__declspec(implementation_key(232)) HRESULT TemplateManager::GetActiveTemplates ( BSTR * bstrActiveListPath, enum TemplatesListType * eActiveListType, SAFEARRAY * * astrActiveTemplates );
__declspec(implementation_key(233)) ApplicationPtr _IDocumentsAuto::GetApplication ( );
__declspec(implementation_key(234)) HRESULT _IDocumentsAuto::Close ( );
__declspec(implementation_key(235)) long _IDocumentsAuto::GetCount ( );
__declspec(implementation_key(236)) ApplicationPtr _IDocumentsAuto::GetParent ( );
__declspec(implementation_key(237)) IDispatchPtr _IDocumentsAuto::Add ( const _variant_t & ProgID, const _variant_t & TemplateDoc );
__declspec(implementation_key(238)) IDispatchPtr _IDocumentsAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(239)) IDispatchPtr _IDocumentsAuto::Open ( _bstr_t Filename, const _variant_t & DocRelationAutoServer, const _variant_t & AltPath, const _variant_t & RecognizeFeaturesIfPartTemplate, const _variant_t & RevisionRuleOption, const _variant_t & StopFileOpenIfRevisionRuleNotApplicable );
__declspec(implementation_key(240)) IUnknownPtr _IDocumentsAuto::Get_NewEnum ( );
__declspec(implementation_key(241)) IDispatchPtr _IDocumentsAuto::OpenWithTemplate ( _bstr_t Filename, _bstr_t Template, const _variant_t & RecognizeFeaturesIfPartTemplate );
__declspec(implementation_key(242)) _bstr_t _IDocumentsAuto::GetTemplatePath ( );
__declspec(implementation_key(243)) _bstr_t _IDocumentsAuto::GetAutoCadConfigFile ( );
__declspec(implementation_key(244)) void _IDocumentsAuto::PutAutoCadConfigFile ( _bstr_t AutoCadConfigFile );
__declspec(implementation_key(245)) HRESULT _IDocumentsAuto::SetForeignFileConfigValue ( _bstr_t DocumentProgID, _bstr_t Filename, _bstr_t SectionName, _bstr_t Name, _bstr_t Value );
__declspec(implementation_key(246)) _bstr_t _IDocumentsAuto::GetForeignFileConfigValue ( _bstr_t DocumentProgID, _bstr_t Filename, _bstr_t SectionName, _bstr_t Name );
__declspec(implementation_key(247)) HRESULT _IDocumentsAuto::CloseDocument ( _bstr_t Filename, const _variant_t & SaveChanges, const _variant_t & SaveAsFileName, const _variant_t & RouteWorkbook, const _variant_t & DoIdle );
__declspec(implementation_key(248)) TemplateManagerPtr _IDocumentsAuto::GetTemplateManager ( );
__declspec(implementation_key(249)) IDispatchPtr _IDocumentsAuto::OpenWithFileOpenDialog ( const _variant_t & Filename, const _variant_t & DialogTitle, const _variant_t & Flags );
__declspec(implementation_key(250)) ApplicationPtr _ITemplateManagerAuto::GetApplication ( );
__declspec(implementation_key(251)) IDispatchPtr _ITemplateManagerAuto::GetParent ( );
__declspec(implementation_key(252)) HRESULT _ITemplateManagerAuto::GetActiveTemplates ( BSTR * bstrActiveListPath, enum TemplatesListType * eActiveListType, SAFEARRAY * * astrActiveTemplates );
__declspec(implementation_key(253)) ApplicationPtr Environments::GetApplication ( );
__declspec(implementation_key(254)) long Environments::GetCount ( );
__declspec(implementation_key(255)) ApplicationPtr Environments::GetParent ( );
__declspec(implementation_key(256)) EnvironmentPtr Environments::Item ( const _variant_t & Index );
__declspec(implementation_key(257)) ApplicationPtr Environment::GetApplication ( );
__declspec(implementation_key(258)) _bstr_t Environment::GetCaption ( );
__declspec(implementation_key(259)) void Environment::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(260)) int Environment::GetIndex ( );
__declspec(implementation_key(261)) _bstr_t Environment::GetName ( );
__declspec(implementation_key(262)) EnvironmentsPtr Environment::GetParent ( );
__declspec(implementation_key(263)) CommandBarsPtr Environment::GetCommandBars ( );
__declspec(implementation_key(264)) AcceleratorsPtr Environment::GetAccelerators ( );
__declspec(implementation_key(265)) _bstr_t Environment::GetSubTypeName ( );
__declspec(implementation_key(266)) CommandCategoriesPtr Environment::GetCommandCategories ( );
__declspec(implementation_key(267)) _bstr_t Environment::GetCATID ( );
__declspec(implementation_key(268)) _bstr_t Environment::GetCustomizeDisplayName ( );
__declspec(implementation_key(269)) CommandInfoPtr Environment::GetCommandInfo ( long CommandID );
__declspec(implementation_key(270)) ApplicationPtr _IEnvironmentsAuto::GetApplication ( );
__declspec(implementation_key(271)) long _IEnvironmentsAuto::GetCount ( );
__declspec(implementation_key(272)) ApplicationPtr _IEnvironmentsAuto::GetParent ( );
__declspec(implementation_key(273)) EnvironmentPtr _IEnvironmentsAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(274)) IUnknownPtr _IEnvironmentsAuto::Get_NewEnum ( );
__declspec(implementation_key(275)) CommandBarPtr CommandBars::GetActiveMenuBar ( );
__declspec(implementation_key(276)) IDispatchPtr CommandBars::GetApplication ( );
__declspec(implementation_key(277)) long CommandBars::GetCount ( );
__declspec(implementation_key(278)) VARIANT_BOOL CommandBars::GetDisplayTooltips ( );
__declspec(implementation_key(279)) void CommandBars::PutDisplayTooltips ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(280)) VARIANT_BOOL CommandBars::GetLargeButtons ( );
__declspec(implementation_key(281)) void CommandBars::PutLargeButtons ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(282)) IDispatchPtr CommandBars::GetParent ( );
__declspec(implementation_key(283)) CommandBarPtr CommandBars::Add ( const _variant_t & Name, const _variant_t & Position, const _variant_t & MenuBar, const _variant_t & Temporary );
__declspec(implementation_key(284)) CommandBarControlPtr CommandBars::FindControl ( const _variant_t & Type, const _variant_t & Id, const _variant_t & Tag, const _variant_t & Visible );
__declspec(implementation_key(285)) CommandBarPtr CommandBars::Item ( const _variant_t & Index );
__declspec(implementation_key(286)) IDispatchPtr CommandBar::GetApplication ( );
__declspec(implementation_key(287)) VARIANT_BOOL CommandBar::GetBuiltIn ( );
__declspec(implementation_key(288)) CommandBarControlsPtr CommandBar::GetControls ( );
__declspec(implementation_key(289)) VARIANT_BOOL CommandBar::GetEnabled ( );
__declspec(implementation_key(290)) void CommandBar::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(291)) long CommandBar::GetHeight ( );
__declspec(implementation_key(292)) void CommandBar::PutHeight ( long _arg1 );
__declspec(implementation_key(293)) long CommandBar::GetIndex ( );
__declspec(implementation_key(294)) long CommandBar::GetLeft ( );
__declspec(implementation_key(295)) void CommandBar::PutLeft ( long _arg1 );
__declspec(implementation_key(296)) _bstr_t CommandBar::GetName ( );
__declspec(implementation_key(297)) _bstr_t CommandBar::GetNameLocal ( );
__declspec(implementation_key(298)) void CommandBar::PutNameLocal ( _bstr_t _arg1 );
__declspec(implementation_key(299)) EnvironmentPtr CommandBar::GetParent ( );
__declspec(implementation_key(300)) enum SeBarPosition CommandBar::GetPosition ( );
__declspec(implementation_key(301)) void CommandBar::PutPosition ( enum SeBarPosition _arg1 );
__declspec(implementation_key(302)) long CommandBar::GetTop ( );
__declspec(implementation_key(303)) void CommandBar::PutTop ( long _arg1 );
__declspec(implementation_key(304)) enum SeBarType CommandBar::GetType ( );
__declspec(implementation_key(305)) VARIANT_BOOL CommandBar::GetVisible ( );
__declspec(implementation_key(306)) void CommandBar::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(307)) long CommandBar::GetWidth ( );
__declspec(implementation_key(308)) void CommandBar::PutWidth ( long _arg1 );
__declspec(implementation_key(309)) HRESULT CommandBar::Delete ( );
__declspec(implementation_key(310)) CommandBarControlPtr CommandBar::FindControl ( const _variant_t & Type, const _variant_t & Id, const _variant_t & Tag, const _variant_t & Visible, const _variant_t & Recursive );
__declspec(implementation_key(311)) HRESULT CommandBar::Reset ( );
__declspec(implementation_key(312)) HRESULT CommandBar::ShowPopup ( const _variant_t & x, const _variant_t & y );
__declspec(implementation_key(313)) IDispatchPtr CommandBarControls::GetApplication ( );
__declspec(implementation_key(314)) long CommandBarControls::GetCount ( );
__declspec(implementation_key(315)) CommandBarPtr CommandBarControls::GetParent ( );
__declspec(implementation_key(316)) CommandBarControlPtr CommandBarControls::Add ( const _variant_t & Type, const _variant_t & Id, const _variant_t & Before, const _variant_t & Temporary );
__declspec(implementation_key(317)) CommandBarControlPtr CommandBarControls::Item ( const _variant_t & Index );
__declspec(implementation_key(318)) IDispatchPtr CommandBarControl::GetApplication ( );
__declspec(implementation_key(319)) VARIANT_BOOL CommandBarControl::GetBeginGroup ( );
__declspec(implementation_key(320)) void CommandBarControl::PutBeginGroup ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(321)) VARIANT_BOOL CommandBarControl::GetBuiltIn ( );
__declspec(implementation_key(322)) VARIANT_BOOL CommandBarControl::GetBuiltInFace ( );
__declspec(implementation_key(323)) void CommandBarControl::PutBuiltInFace ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(324)) _bstr_t CommandBarControl::GetCaption ( );
__declspec(implementation_key(325)) void CommandBarControl::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(326)) _bstr_t CommandBarControl::GetDescriptionText ( );
__declspec(implementation_key(327)) void CommandBarControl::PutDescriptionText ( _bstr_t _arg1 );
__declspec(implementation_key(328)) VARIANT_BOOL CommandBarControl::GetEnabled ( );
__declspec(implementation_key(329)) void CommandBarControl::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(330)) long CommandBarControl::GetFaceId ( );
__declspec(implementation_key(331)) void CommandBarControl::PutFaceId ( long _arg1 );
__declspec(implementation_key(332)) long CommandBarControl::GetHeight ( );
__declspec(implementation_key(333)) long CommandBarControl::GetHelpContextId ( );
__declspec(implementation_key(334)) void CommandBarControl::PutHelpContextId ( long _arg1 );
__declspec(implementation_key(335)) _bstr_t CommandBarControl::GetHelpFile ( );
__declspec(implementation_key(336)) void CommandBarControl::PutHelpFile ( _bstr_t _arg1 );
__declspec(implementation_key(337)) long CommandBarControl::GetId ( );
__declspec(implementation_key(338)) long CommandBarControl::GetIndex ( );
__declspec(implementation_key(339)) long CommandBarControl::GetLeft ( );
__declspec(implementation_key(340)) _bstr_t CommandBarControl::GetOnAction ( );
__declspec(implementation_key(341)) void CommandBarControl::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(342)) _bstr_t CommandBarControl::GetParameterText ( );
__declspec(implementation_key(343)) void CommandBarControl::PutParameterText ( _bstr_t _arg1 );
__declspec(implementation_key(344)) CommandBarPtr CommandBarControl::GetParent ( );
__declspec(implementation_key(345)) _bstr_t CommandBarControl::GetShortcutText ( );
__declspec(implementation_key(346)) void CommandBarControl::PutShortcutText ( _bstr_t _arg1 );
__declspec(implementation_key(347)) _bstr_t CommandBarControl::GetTag ( );
__declspec(implementation_key(348)) void CommandBarControl::PutTag ( _bstr_t _arg1 );
__declspec(implementation_key(349)) _bstr_t CommandBarControl::GetTooltipText ( );
__declspec(implementation_key(350)) void CommandBarControl::PutTooltipText ( _bstr_t _arg1 );
__declspec(implementation_key(351)) long CommandBarControl::GetTop ( );
__declspec(implementation_key(352)) enum SeControlType CommandBarControl::GetType ( );
__declspec(implementation_key(353)) VARIANT_BOOL CommandBarControl::GetVisible ( );
__declspec(implementation_key(354)) void CommandBarControl::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(355)) long CommandBarControl::GetWidth ( );
__declspec(implementation_key(356)) HRESULT CommandBarControl::Delete ( const _variant_t & Temporary );
__declspec(implementation_key(357)) HRESULT CommandBarControl::Execute ( );
__declspec(implementation_key(358)) HRESULT CommandBarControl::Help ( );
__declspec(implementation_key(359)) HRESULT CommandBarControl::LoadFace ( _bstr_t Face );
__declspec(implementation_key(360)) CommandBarPtr ISECommandBars::GetActiveMenuBar ( );
__declspec(implementation_key(361)) IDispatchPtr ISECommandBars::GetApplication ( );
__declspec(implementation_key(362)) long ISECommandBars::GetCount ( );
__declspec(implementation_key(363)) VARIANT_BOOL ISECommandBars::GetDisplayTooltips ( );
__declspec(implementation_key(364)) void ISECommandBars::PutDisplayTooltips ( VARIANT_BOOL DisplayTooltips );
__declspec(implementation_key(365)) VARIANT_BOOL ISECommandBars::GetLargeButtons ( );
__declspec(implementation_key(366)) void ISECommandBars::PutLargeButtons ( VARIANT_BOOL LargeButtons );
__declspec(implementation_key(367)) IDispatchPtr ISECommandBars::GetParent ( );
__declspec(implementation_key(368)) CommandBarPtr ISECommandBars::Add ( const _variant_t & Name, const _variant_t & Position, const _variant_t & MenuBar, const _variant_t & Temporary );
__declspec(implementation_key(369)) CommandBarControlPtr ISECommandBars::FindControl ( const _variant_t & Type, const _variant_t & Id, const _variant_t & Tag, const _variant_t & Visible );
__declspec(implementation_key(370)) CommandBarPtr ISECommandBars::Item ( const _variant_t & Index );
__declspec(implementation_key(371)) IUnknownPtr ISECommandBars::Get_NewEnum ( );
__declspec(implementation_key(372)) IDispatchPtr ISECommandBarControls::GetApplication ( );
__declspec(implementation_key(373)) long ISECommandBarControls::GetCount ( );
__declspec(implementation_key(374)) CommandBarPtr ISECommandBarControls::GetParent ( );
__declspec(implementation_key(375)) CommandBarControlPtr ISECommandBarControls::Add ( const _variant_t & Type, const _variant_t & Id, const _variant_t & Before, const _variant_t & Temporary );
__declspec(implementation_key(376)) CommandBarControlPtr ISECommandBarControls::Item ( const _variant_t & Index );
__declspec(implementation_key(377)) IUnknownPtr ISECommandBarControls::Get_NewEnum ( );
__declspec(implementation_key(378)) IDispatchPtr ISECommandBarControl::GetApplication ( );
__declspec(implementation_key(379)) VARIANT_BOOL ISECommandBarControl::GetBeginGroup ( );
__declspec(implementation_key(380)) void ISECommandBarControl::PutBeginGroup ( VARIANT_BOOL BeginGroup );
__declspec(implementation_key(381)) VARIANT_BOOL ISECommandBarControl::GetBuiltIn ( );
__declspec(implementation_key(382)) VARIANT_BOOL ISECommandBarControl::GetBuiltInFace ( );
__declspec(implementation_key(383)) void ISECommandBarControl::PutBuiltInFace ( VARIANT_BOOL BuiltInFace );
__declspec(implementation_key(384)) _bstr_t ISECommandBarControl::GetCaption ( );
__declspec(implementation_key(385)) void ISECommandBarControl::PutCaption ( _bstr_t Caption );
__declspec(implementation_key(386)) _bstr_t ISECommandBarControl::GetDescriptionText ( );
__declspec(implementation_key(387)) void ISECommandBarControl::PutDescriptionText ( _bstr_t DescriptionText );
__declspec(implementation_key(388)) VARIANT_BOOL ISECommandBarControl::GetEnabled ( );
__declspec(implementation_key(389)) void ISECommandBarControl::PutEnabled ( VARIANT_BOOL Enabled );
__declspec(implementation_key(390)) long ISECommandBarControl::GetFaceId ( );
__declspec(implementation_key(391)) void ISECommandBarControl::PutFaceId ( long FaceId );
__declspec(implementation_key(392)) long ISECommandBarControl::GetHeight ( );
__declspec(implementation_key(393)) long ISECommandBarControl::GetHelpContextId ( );
__declspec(implementation_key(394)) void ISECommandBarControl::PutHelpContextId ( long HelpContextId );
__declspec(implementation_key(395)) _bstr_t ISECommandBarControl::GetHelpFile ( );
__declspec(implementation_key(396)) void ISECommandBarControl::PutHelpFile ( _bstr_t HelpFile );
__declspec(implementation_key(397)) long ISECommandBarControl::GetId ( );
__declspec(implementation_key(398)) long ISECommandBarControl::GetIndex ( );
__declspec(implementation_key(399)) long ISECommandBarControl::GetLeft ( );
__declspec(implementation_key(400)) _bstr_t ISECommandBarControl::GetOnAction ( );
__declspec(implementation_key(401)) void ISECommandBarControl::PutOnAction ( _bstr_t OnAction );
__declspec(implementation_key(402)) _bstr_t ISECommandBarControl::GetParameterText ( );
__declspec(implementation_key(403)) void ISECommandBarControl::PutParameterText ( _bstr_t ParameterText );
__declspec(implementation_key(404)) CommandBarPtr ISECommandBarControl::GetParent ( );
__declspec(implementation_key(405)) _bstr_t ISECommandBarControl::GetShortcutText ( );
__declspec(implementation_key(406)) void ISECommandBarControl::PutShortcutText ( _bstr_t ShortcutText );
__declspec(implementation_key(407)) _bstr_t ISECommandBarControl::GetTag ( );
__declspec(implementation_key(408)) void ISECommandBarControl::PutTag ( _bstr_t Tag );
__declspec(implementation_key(409)) _bstr_t ISECommandBarControl::GetTooltipText ( );
__declspec(implementation_key(410)) void ISECommandBarControl::PutTooltipText ( _bstr_t TooltipText );
__declspec(implementation_key(411)) long ISECommandBarControl::GetTop ( );
__declspec(implementation_key(412)) enum SeControlType ISECommandBarControl::GetType ( );
__declspec(implementation_key(413)) VARIANT_BOOL ISECommandBarControl::GetVisible ( );
__declspec(implementation_key(414)) void ISECommandBarControl::PutVisible ( VARIANT_BOOL Visible );
__declspec(implementation_key(415)) long ISECommandBarControl::GetWidth ( );
__declspec(implementation_key(416)) HRESULT ISECommandBarControl::Delete ( const _variant_t & Temporary );
__declspec(implementation_key(417)) HRESULT ISECommandBarControl::Execute ( );
__declspec(implementation_key(418)) HRESULT ISECommandBarControl::Help ( );
__declspec(implementation_key(419)) HRESULT ISECommandBarControl::LoadFace ( _bstr_t Face );
__declspec(implementation_key(420)) IDispatchPtr ISECommandBar::GetApplication ( );
__declspec(implementation_key(421)) VARIANT_BOOL ISECommandBar::GetBuiltIn ( );
__declspec(implementation_key(422)) CommandBarControlsPtr ISECommandBar::GetControls ( );
__declspec(implementation_key(423)) VARIANT_BOOL ISECommandBar::GetEnabled ( );
__declspec(implementation_key(424)) void ISECommandBar::PutEnabled ( VARIANT_BOOL Enabled );
__declspec(implementation_key(425)) long ISECommandBar::GetHeight ( );
__declspec(implementation_key(426)) void ISECommandBar::PutHeight ( long Height );
__declspec(implementation_key(427)) long ISECommandBar::GetIndex ( );
__declspec(implementation_key(428)) long ISECommandBar::GetLeft ( );
__declspec(implementation_key(429)) void ISECommandBar::PutLeft ( long Left );
__declspec(implementation_key(430)) _bstr_t ISECommandBar::GetName ( );
__declspec(implementation_key(431)) _bstr_t ISECommandBar::GetNameLocal ( );
__declspec(implementation_key(432)) void ISECommandBar::PutNameLocal ( _bstr_t NameLocal );
__declspec(implementation_key(433)) EnvironmentPtr ISECommandBar::GetParent ( );
__declspec(implementation_key(434)) enum SeBarPosition ISECommandBar::GetPosition ( );
__declspec(implementation_key(435)) void ISECommandBar::PutPosition ( enum SeBarPosition Position );
__declspec(implementation_key(436)) long ISECommandBar::GetTop ( );
__declspec(implementation_key(437)) void ISECommandBar::PutTop ( long Top );
__declspec(implementation_key(438)) enum SeBarType ISECommandBar::GetType ( );
__declspec(implementation_key(439)) VARIANT_BOOL ISECommandBar::GetVisible ( );
__declspec(implementation_key(440)) void ISECommandBar::PutVisible ( VARIANT_BOOL Visible );
__declspec(implementation_key(441)) long ISECommandBar::GetWidth ( );
__declspec(implementation_key(442)) void ISECommandBar::PutWidth ( long Width );
__declspec(implementation_key(443)) HRESULT ISECommandBar::Delete ( );
__declspec(implementation_key(444)) CommandBarControlPtr ISECommandBar::FindControl ( const _variant_t & Type, const _variant_t & Id, const _variant_t & Tag, const _variant_t & Visible, const _variant_t & Recursive );
__declspec(implementation_key(445)) HRESULT ISECommandBar::Reset ( );
__declspec(implementation_key(446)) HRESULT ISECommandBar::ShowPopup ( const _variant_t & x, const _variant_t & y );
__declspec(implementation_key(447)) long Accelerators::GetCount ( );
__declspec(implementation_key(448)) IDispatchPtr Accelerators::GetParent ( );
__declspec(implementation_key(449)) AcceleratorPtr Accelerators::Item ( const _variant_t & Index );
__declspec(implementation_key(450)) long Accelerator::GetCount ( );
__declspec(implementation_key(451)) IDispatchPtr Accelerator::GetParent ( );
__declspec(implementation_key(452)) KeyBindingPtr Accelerator::Item ( const _variant_t & Index );
__declspec(implementation_key(453)) enum AcceleratorTypeConstants Accelerator::GetType ( );
__declspec(implementation_key(454)) HRESULT Accelerator::Reset ( );
__declspec(implementation_key(455)) HRESULT Accelerator::Remove ( long KeyCode );
__declspec(implementation_key(456)) KeyBindingPtr Accelerator::Add ( long CommandID, long KeyCode );
__declspec(implementation_key(457)) KeyBindingPtr Accelerator::KeyBinding ( long KeyCode );
__declspec(implementation_key(458)) long Accelerator::BuildKeyCode ( long KeyModifier, long Key );
__declspec(implementation_key(459)) long ISEAccelerators::GetCount ( );
__declspec(implementation_key(460)) IDispatchPtr ISEAccelerators::GetParent ( );
__declspec(implementation_key(461)) AcceleratorPtr ISEAccelerators::Item ( const _variant_t & Index );
__declspec(implementation_key(462)) IUnknownPtr ISEAccelerators::Get_NewEnum ( );
__declspec(implementation_key(463)) IDispatchPtr KeyBinding::GetParent ( );
__declspec(implementation_key(464)) long KeyBinding::GetCommandID ( );
__declspec(implementation_key(465)) _bstr_t KeyBinding::GetCommandString ( );
__declspec(implementation_key(466)) _bstr_t KeyBinding::GetKeyString ( );
__declspec(implementation_key(467)) long KeyBinding::GetKeyCode ( );
__declspec(implementation_key(468)) IDispatchPtr ISEKeyBinding::GetParent ( );
__declspec(implementation_key(469)) long ISEKeyBinding::GetCommandID ( );
__declspec(implementation_key(470)) _bstr_t ISEKeyBinding::GetCommandString ( );
__declspec(implementation_key(471)) _bstr_t ISEKeyBinding::GetKeyString ( );
__declspec(implementation_key(472)) long ISEKeyBinding::GetKeyCode ( );
__declspec(implementation_key(473)) long ISEAccelerator::GetCount ( );
__declspec(implementation_key(474)) IDispatchPtr ISEAccelerator::GetParent ( );
__declspec(implementation_key(475)) KeyBindingPtr ISEAccelerator::Item ( const _variant_t & Index );
__declspec(implementation_key(476)) IUnknownPtr ISEAccelerator::Get_NewEnum ( );
__declspec(implementation_key(477)) enum AcceleratorTypeConstants ISEAccelerator::GetType ( );
__declspec(implementation_key(478)) HRESULT ISEAccelerator::Reset ( );
__declspec(implementation_key(479)) HRESULT ISEAccelerator::Remove ( long KeyCode );
__declspec(implementation_key(480)) KeyBindingPtr ISEAccelerator::Add ( long CommandID, long KeyCode );
__declspec(implementation_key(481)) KeyBindingPtr ISEAccelerator::KeyBinding ( long KeyCode );
__declspec(implementation_key(482)) long ISEAccelerator::BuildKeyCode ( long KeyModifier, long Key );
__declspec(implementation_key(483)) IDispatchPtr CommandCategories::GetParent ( );
__declspec(implementation_key(484)) long CommandCategories::GetCount ( );
__declspec(implementation_key(485)) CommandCategoryPtr CommandCategories::Item ( const _variant_t & Index );
__declspec(implementation_key(486)) _bstr_t CommandCategory::GetCaption ( );
__declspec(implementation_key(487)) long CommandCategory::GetCount ( );
__declspec(implementation_key(488)) CommandInfoPtr CommandCategory::Item ( const _variant_t & Index );
__declspec(implementation_key(489)) IDispatchPtr ISECommandCategories::GetParent ( );
__declspec(implementation_key(490)) long ISECommandCategories::GetCount ( );
__declspec(implementation_key(491)) CommandCategoryPtr ISECommandCategories::Item ( const _variant_t & Index );
__declspec(implementation_key(492)) IUnknownPtr ISECommandCategories::Get_NewEnum ( );
__declspec(implementation_key(493)) _bstr_t CommandInfo::GetCaption ( );
__declspec(implementation_key(494)) long CommandInfo::GetId ( );
__declspec(implementation_key(495)) _bstr_t CommandInfo::GetTooltip ( );
__declspec(implementation_key(496)) _bstr_t CommandInfo::GetDescription ( );
__declspec(implementation_key(497)) VARIANT_BOOL CommandInfo::GetBuiltIn ( );
__declspec(implementation_key(498)) long CommandInfo::GetIcon ( );
__declspec(implementation_key(499)) HRESULT CommandInfo::SaveImage ( _bstr_t Filename, const _variant_t & Background );
__declspec(implementation_key(500)) ApplicationPtr _IEnvironmentAuto::GetApplication ( );
__declspec(implementation_key(501)) _bstr_t _IEnvironmentAuto::GetCaption ( );
__declspec(implementation_key(502)) void _IEnvironmentAuto::PutCaption ( _bstr_t Caption );
__declspec(implementation_key(503)) int _IEnvironmentAuto::GetIndex ( );
__declspec(implementation_key(504)) _bstr_t _IEnvironmentAuto::GetName ( );
__declspec(implementation_key(505)) EnvironmentsPtr _IEnvironmentAuto::GetParent ( );
__declspec(implementation_key(506)) CommandBarsPtr _IEnvironmentAuto::GetCommandBars ( );
__declspec(implementation_key(507)) AcceleratorsPtr _IEnvironmentAuto::GetAccelerators ( );
__declspec(implementation_key(508)) _bstr_t _IEnvironmentAuto::GetSubTypeName ( );
__declspec(implementation_key(509)) CommandCategoriesPtr _IEnvironmentAuto::GetCommandCategories ( );
__declspec(implementation_key(510)) _bstr_t _IEnvironmentAuto::GetCATID ( );
__declspec(implementation_key(511)) _bstr_t _IEnvironmentAuto::GetCustomizeDisplayName ( );
__declspec(implementation_key(512)) CommandInfoPtr _IEnvironmentAuto::GetCommandInfo ( long CommandID );
__declspec(implementation_key(513)) _bstr_t ISECommandCategory::GetCaption ( );
__declspec(implementation_key(514)) long ISECommandCategory::GetCount ( );
__declspec(implementation_key(515)) CommandInfoPtr ISECommandCategory::Item ( const _variant_t & Index );
__declspec(implementation_key(516)) IUnknownPtr ISECommandCategory::Get_NewEnum ( );
__declspec(implementation_key(517)) _bstr_t ISECommandInfo::GetCaption ( );
__declspec(implementation_key(518)) long ISECommandInfo::GetId ( );
__declspec(implementation_key(519)) _bstr_t ISECommandInfo::GetTooltip ( );
__declspec(implementation_key(520)) _bstr_t ISECommandInfo::GetDescription ( );
__declspec(implementation_key(521)) VARIANT_BOOL ISECommandInfo::GetBuiltIn ( );
__declspec(implementation_key(522)) long ISECommandInfo::GetIcon ( );
__declspec(implementation_key(523)) HRESULT ISECommandInfo::SaveImage ( _bstr_t Filename, const _variant_t & Background );
__declspec(implementation_key(524)) ApplicationPtr Windows::GetApplication ( );
__declspec(implementation_key(525)) long Windows::GetCount ( );
__declspec(implementation_key(526)) IDispatchPtr Windows::GetParent ( );
__declspec(implementation_key(527)) IDispatchPtr Windows::Item ( const _variant_t & Index );
__declspec(implementation_key(528)) ApplicationPtr _IWindowsAuto::GetApplication ( );
__declspec(implementation_key(529)) long _IWindowsAuto::GetCount ( );
__declspec(implementation_key(530)) IDispatchPtr _IWindowsAuto::GetParent ( );
__declspec(implementation_key(531)) IDispatchPtr _IWindowsAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(532)) IUnknownPtr _IWindowsAuto::Get_NewEnum ( );
__declspec(implementation_key(533)) HRESULT DISEApplicationEvents::AfterActiveDocumentChange ( IDispatch * theDocument );
__declspec(implementation_key(534)) HRESULT DISEApplicationEvents::AfterCommandRun ( long theCommandID );
__declspec(implementation_key(535)) HRESULT DISEApplicationEvents::AfterDocumentOpen ( IDispatch * theDocument );
__declspec(implementation_key(536)) HRESULT DISEApplicationEvents::AfterDocumentPrint ( IDispatch * theDocument, long hDC, SAFEARRAY * * ModelToDC, SAFEARRAY * * Rect );
__declspec(implementation_key(537)) HRESULT DISEApplicationEvents::AfterDocumentSave ( IDispatch * theDocument );
__declspec(implementation_key(538)) HRESULT DISEApplicationEvents::AfterEnvironmentActivate ( IDispatch * theEnvironment );
__declspec(implementation_key(539)) HRESULT DISEApplicationEvents::AfterNewDocumentOpen ( IDispatch * theDocument );
__declspec(implementation_key(540)) HRESULT DISEApplicationEvents::AfterNewWindow ( IDispatch * theWindow );
__declspec(implementation_key(541)) HRESULT DISEApplicationEvents::AfterWindowActivate ( IDispatch * theWindow );
__declspec(implementation_key(542)) HRESULT DISEApplicationEvents::BeforeCommandRun ( long theCommandID );
__declspec(implementation_key(543)) HRESULT DISEApplicationEvents::BeforeDocumentClose ( IDispatch * theDocument );
__declspec(implementation_key(544)) HRESULT DISEApplicationEvents::BeforeDocumentPrint ( IDispatch * theDocument, long hDC, SAFEARRAY * * ModelToDC, SAFEARRAY * * Rect );
__declspec(implementation_key(545)) HRESULT DISEApplicationEvents::BeforeEnvironmentDeactivate ( IDispatch * theEnvironment );
__declspec(implementation_key(546)) HRESULT DISEApplicationEvents::BeforeWindowDeactivate ( IDispatch * theWindow );
__declspec(implementation_key(547)) HRESULT DISEApplicationEvents::BeforeQuit ( );
__declspec(implementation_key(548)) HRESULT DISEApplicationEvents::BeforeDocumentSave ( IDispatch * theDocument );
__declspec(implementation_key(549)) HRESULT ISEApplicationEvents::AfterActiveDocumentChange ( IDispatch * theDocument );
__declspec(implementation_key(550)) HRESULT ISEApplicationEvents::AfterCommandRun ( long theCommandID );
__declspec(implementation_key(551)) HRESULT ISEApplicationEvents::AfterDocumentOpen ( IDispatch * theDocument );
__declspec(implementation_key(552)) HRESULT ISEApplicationEvents::AfterDocumentPrint ( IDispatch * theDocument, long hDC, double * ModelToDC, long * Rect );
__declspec(implementation_key(553)) HRESULT ISEApplicationEvents::AfterDocumentSave ( IDispatch * theDocument );
__declspec(implementation_key(554)) HRESULT ISEApplicationEvents::AfterEnvironmentActivate ( IDispatch * theEnvironment );
__declspec(implementation_key(555)) HRESULT ISEApplicationEvents::AfterNewDocumentOpen ( IDispatch * theDocument );
__declspec(implementation_key(556)) HRESULT ISEApplicationEvents::AfterNewWindow ( IDispatch * theWindow );
__declspec(implementation_key(557)) HRESULT ISEApplicationEvents::AfterWindowActivate ( IDispatch * theWindow );
__declspec(implementation_key(558)) HRESULT ISEApplicationEvents::BeforeCommandRun ( long theCommandID );
__declspec(implementation_key(559)) HRESULT ISEApplicationEvents::BeforeDocumentClose ( IDispatch * theDocument );
__declspec(implementation_key(560)) HRESULT ISEApplicationEvents::BeforeDocumentPrint ( IDispatch * theDocument, long hDC, double * ModelToDC, long * Rect );
__declspec(implementation_key(561)) HRESULT ISEApplicationEvents::BeforeEnvironmentDeactivate ( IDispatch * theEnvironment );
__declspec(implementation_key(562)) HRESULT ISEApplicationEvents::BeforeWindowDeactivate ( IDispatch * theWindow );
__declspec(implementation_key(563)) HRESULT ISEApplicationEvents::BeforeQuit ( );
__declspec(implementation_key(564)) HRESULT ISEApplicationEvents::BeforeDocumentSave ( IDispatch * theDocument );
__declspec(implementation_key(565)) HRESULT DISEApplicationWindowEvents::WindowProc ( long hWnd, long nMsg, long wParam, long lParam );
__declspec(implementation_key(566)) HRESULT ISEApplicationWindowEvents::WindowProc ( long hWnd, long nMsg, long wParam, long lParam );
__declspec(implementation_key(567)) HRESULT DISEFileUIEvents::OnFileOpenUI ( BSTR * Filename, BSTR * AppendToTitle );
__declspec(implementation_key(568)) HRESULT DISEFileUIEvents::OnFileSaveAsUI ( BSTR * Filename, BSTR * AppendToTitle );
__declspec(implementation_key(569)) HRESULT DISEFileUIEvents::OnFileNewUI ( BSTR * Filename, BSTR * AppendToTitle );
__declspec(implementation_key(570)) HRESULT DISEFileUIEvents::OnFileSaveAsImageUI ( BSTR * Filename, BSTR * AppendToTitle, long * Width, long * Height, enum SeImageQualityType * ImageQuality );
__declspec(implementation_key(571)) HRESULT DISEFileUIEvents::OnPlacePartUI ( BSTR * Filename, BSTR * AppendToTitle );
__declspec(implementation_key(572)) HRESULT DISEFileUIEvents::OnCreateInPlacePartUI ( BSTR * Filename, BSTR * AppendToTitle, BSTR * Template );
__declspec(implementation_key(573)) HRESULT ISEFileUIEvents::OnFileOpenUI ( BSTR * Filename, BSTR * AppendToTitle );
__declspec(implementation_key(574)) HRESULT ISEFileUIEvents::OnFileSaveAsUI ( BSTR * Filename, BSTR * AppendToTitle );
__declspec(implementation_key(575)) HRESULT ISEFileUIEvents::OnFileNewUI ( BSTR * Filename, BSTR * AppendToTitle );
__declspec(implementation_key(576)) HRESULT ISEFileUIEvents::OnFileSaveAsImageUI ( BSTR * Filename, BSTR * AppendToTitle, long * Width, long * Height, enum SeImageQualityType * ImageQuality );
__declspec(implementation_key(577)) HRESULT ISEFileUIEvents::OnPlacePartUI ( BSTR * Filename, BSTR * AppendToTitle );
__declspec(implementation_key(578)) HRESULT ISEFileUIEvents::OnCreateInPlacePartUI ( BSTR * Filename, BSTR * AppendToTitle, BSTR * Template );
__declspec(implementation_key(579)) HRESULT DISEBeforeFileSaveAsEvents::OnBeforeFileSaveAsUI ( _bstr_t TemplatePath );
__declspec(implementation_key(580)) HRESULT ISEBeforeFileSaveAsEvents::OnBeforeFileSaveAsUI ( _bstr_t TemplatePath );
__declspec(implementation_key(581)) DISEMousePtr DISECommand::GetMouse ( );
__declspec(implementation_key(582)) IUnknownPtr DISECommand::GetWindow ( );
__declspec(implementation_key(583)) VARIANT_BOOL DISECommand::GetDone ( );
__declspec(implementation_key(584)) void DISECommand::PutDone ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(585)) long DISECommand::GetOnEditOwnerChange ( );
__declspec(implementation_key(586)) void DISECommand::PutOnEditOwnerChange ( long _arg1 );
__declspec(implementation_key(587)) long DISECommand::GetOnEnvironmentChange ( );
__declspec(implementation_key(588)) void DISECommand::PutOnEnvironmentChange ( long _arg1 );
__declspec(implementation_key(589)) HRESULT DISECommand::Start ( );
__declspec(implementation_key(590)) void DISEMouse::PutScaleMode ( long _arg1 );
__declspec(implementation_key(591)) long DISEMouse::GetScaleMode ( );
__declspec(implementation_key(592)) VARIANT_BOOL DISEMouse::GetEnabledMove ( );
__declspec(implementation_key(593)) void DISEMouse::PutEnabledMove ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(594)) IDispatchPtr DISEMouse::GetLastEventWindow ( );
__declspec(implementation_key(595)) IDispatchPtr DISEMouse::GetLastUpEventWindow ( );
__declspec(implementation_key(596)) IDispatchPtr DISEMouse::GetLastDownEventWindow ( );
__declspec(implementation_key(597)) IDispatchPtr DISEMouse::GetLastMoveEventWindow ( );
__declspec(implementation_key(598)) short DISEMouse::GetLastEventShift ( );
__declspec(implementation_key(599)) short DISEMouse::GetLastUpEventShift ( );
__declspec(implementation_key(600)) short DISEMouse::GetLastDownEventShift ( );
__declspec(implementation_key(601)) short DISEMouse::GetLastMoveEventShift ( );
__declspec(implementation_key(602)) short DISEMouse::GetLastEventButton ( );
__declspec(implementation_key(603)) short DISEMouse::GetLastUpEventButton ( );
__declspec(implementation_key(604)) short DISEMouse::GetLastDownEventButton ( );
__declspec(implementation_key(605)) short DISEMouse::GetLastMoveEventButton ( );
__declspec(implementation_key(606)) double DISEMouse::GetLastEventX ( );
__declspec(implementation_key(607)) double DISEMouse::GetLastEventY ( );
__declspec(implementation_key(608)) double DISEMouse::GetLastEventZ ( );
__declspec(implementation_key(609)) double DISEMouse::GetLastUpEventX ( );
__declspec(implementation_key(610)) double DISEMouse::GetLastUpEventY ( );
__declspec(implementation_key(611)) double DISEMouse::GetLastUpEventZ ( );
__declspec(implementation_key(612)) double DISEMouse::GetLastDownEventX ( );
__declspec(implementation_key(613)) double DISEMouse::GetLastDownEventY ( );
__declspec(implementation_key(614)) double DISEMouse::GetLastDownEventZ ( );
__declspec(implementation_key(615)) double DISEMouse::GetLastMoveEventX ( );
__declspec(implementation_key(616)) double DISEMouse::GetLastMoveEventY ( );
__declspec(implementation_key(617)) double DISEMouse::GetLastMoveEventZ ( );
__declspec(implementation_key(618)) long DISEMouse::GetWindowTypes ( );
__declspec(implementation_key(619)) void DISEMouse::PutWindowTypes ( long _arg1 );
__declspec(implementation_key(620)) long DISEMouse::GetLastEventType ( );
__declspec(implementation_key(621)) VARIANT_BOOL DISEMouse::GetEnabledDrag ( );
__declspec(implementation_key(622)) void DISEMouse::PutEnabledDrag ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(623)) long DISEMouse::GetLocateMode ( );
__declspec(implementation_key(624)) void DISEMouse::PutLocateMode ( long _arg1 );
__declspec(implementation_key(625)) long DISEMouse::GetDynamicsMode ( );
__declspec(implementation_key(626)) void DISEMouse::PutDynamicsMode ( long _arg1 );
__declspec(implementation_key(627)) long DISEMouse::GetPauseLocate ( );
__declspec(implementation_key(628)) void DISEMouse::PutPauseLocate ( long _arg1 );
__declspec(implementation_key(629)) HRESULT DISEMouse::ClearLocateFilter ( );
__declspec(implementation_key(630)) HRESULT DISEMouse::AddToLocateFilter ( long lFilter );
__declspec(implementation_key(631)) HRESULT DISEMouse::PointOnGraphic ( long * PointOnGraphicFlag, double * PointOnGraphic_X, double * PointOnGraphic_Y, double * PointOnGraphic_Z );
__declspec(implementation_key(632)) VARIANT_BOOL DISEMouse::GetInterDocumentLocate ( );
__declspec(implementation_key(633)) void DISEMouse::PutInterDocumentLocate ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(634)) VARIANT_BOOL DISEMouse::GetLocateFrontToBack ( );
__declspec(implementation_key(635)) void DISEMouse::PutLocateFrontToBack ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(636)) VARIANT_BOOL DISEMouse::GetPathfinderLocate ( );
__declspec(implementation_key(637)) void DISEMouse::PutPathfinderLocate ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(638)) void ISEMouse::PutScaleMode ( long plScaleMode );
__declspec(implementation_key(639)) long ISEMouse::GetScaleMode ( );
__declspec(implementation_key(640)) VARIANT_BOOL ISEMouse::GetEnabledMove ( );
__declspec(implementation_key(641)) void ISEMouse::PutEnabledMove ( VARIANT_BOOL pbMoveEnabled );
__declspec(implementation_key(642)) IDispatchPtr ISEMouse::GetLastEventWindow ( );
__declspec(implementation_key(643)) IDispatchPtr ISEMouse::GetLastUpEventWindow ( );
__declspec(implementation_key(644)) IDispatchPtr ISEMouse::GetLastDownEventWindow ( );
__declspec(implementation_key(645)) IDispatchPtr ISEMouse::GetLastMoveEventWindow ( );
__declspec(implementation_key(646)) short ISEMouse::GetLastEventShift ( );
__declspec(implementation_key(647)) short ISEMouse::GetLastUpEventShift ( );
__declspec(implementation_key(648)) short ISEMouse::GetLastDownEventShift ( );
__declspec(implementation_key(649)) short ISEMouse::GetLastMoveEventShift ( );
__declspec(implementation_key(650)) short ISEMouse::GetLastEventButton ( );
__declspec(implementation_key(651)) short ISEMouse::GetLastUpEventButton ( );
__declspec(implementation_key(652)) short ISEMouse::GetLastDownEventButton ( );
__declspec(implementation_key(653)) short ISEMouse::GetLastMoveEventButton ( );
__declspec(implementation_key(654)) double ISEMouse::GetLastEventX ( );
__declspec(implementation_key(655)) double ISEMouse::GetLastEventY ( );
__declspec(implementation_key(656)) double ISEMouse::GetLastEventZ ( );
__declspec(implementation_key(657)) double ISEMouse::GetLastUpEventX ( );
__declspec(implementation_key(658)) double ISEMouse::GetLastUpEventY ( );
__declspec(implementation_key(659)) double ISEMouse::GetLastUpEventZ ( );
__declspec(implementation_key(660)) double ISEMouse::GetLastDownEventX ( );
__declspec(implementation_key(661)) double ISEMouse::GetLastDownEventY ( );
__declspec(implementation_key(662)) double ISEMouse::GetLastDownEventZ ( );
__declspec(implementation_key(663)) double ISEMouse::GetLastMoveEventX ( );
__declspec(implementation_key(664)) double ISEMouse::GetLastMoveEventY ( );
__declspec(implementation_key(665)) double ISEMouse::GetLastMoveEventZ ( );
__declspec(implementation_key(666)) long ISEMouse::GetWindowTypes ( );
__declspec(implementation_key(667)) void ISEMouse::PutWindowTypes ( long plTypes );
__declspec(implementation_key(668)) long ISEMouse::GetLastEventType ( );
__declspec(implementation_key(669)) VARIANT_BOOL ISEMouse::GetEnabledDrag ( );
__declspec(implementation_key(670)) void ISEMouse::PutEnabledDrag ( VARIANT_BOOL pbEnabledDrag );
__declspec(implementation_key(671)) long ISEMouse::GetLocateMode ( );
__declspec(implementation_key(672)) void ISEMouse::PutLocateMode ( long plLocateMode );
__declspec(implementation_key(673)) long ISEMouse::GetDynamicsMode ( );
__declspec(implementation_key(674)) void ISEMouse::PutDynamicsMode ( long plDynamicsMode );
__declspec(implementation_key(675)) long ISEMouse::GetPauseLocate ( );
__declspec(implementation_key(676)) void ISEMouse::PutPauseLocate ( long plPauseLocate );
__declspec(implementation_key(677)) HRESULT ISEMouse::ClearLocateFilter ( );
__declspec(implementation_key(678)) HRESULT ISEMouse::AddToLocateFilter ( long lFilter );
__declspec(implementation_key(679)) HRESULT ISEMouseEx::PointOnGraphic ( long * PointOnGraphicFlag, double * PointOnGraphic_X, double * PointOnGraphic_Y, double * PointOnGraphic_Z );
__declspec(implementation_key(680)) VARIANT_BOOL ISEMouseEx::GetInterDocumentLocate ( );
__declspec(implementation_key(681)) void ISEMouseEx::PutInterDocumentLocate ( VARIANT_BOOL plInterDocumentLocate );
__declspec(implementation_key(682)) VARIANT_BOOL ISEMouseEx2::GetLocateFrontToBack ( );
__declspec(implementation_key(683)) void ISEMouseEx2::PutLocateFrontToBack ( VARIANT_BOOL LocateFrontToBack );
__declspec(implementation_key(684)) VARIANT_BOOL ISEMouseEx3::GetPathfinderLocate ( );
__declspec(implementation_key(685)) void ISEMouseEx3::PutPathfinderLocate ( VARIANT_BOOL PathfinderLocate );
__declspec(implementation_key(686)) HRESULT DISEMouseEvents::MouseDown ( short sButton, short sShift, double dX, double dY, double dZ, IDispatch * pWindowDispatch, long lKeyPointType, IDispatch * pGraphicDispatch );
__declspec(implementation_key(687)) HRESULT DISEMouseEvents::MouseUp ( short sButton, short sShift, double dX, double dY, double dZ, IDispatch * pWindowDispatch, long lKeyPointType, IDispatch * pGraphicDispatch );
__declspec(implementation_key(688)) HRESULT DISEMouseEvents::MouseMove ( short sButton, short sShift, double dX, double dY, double dZ, IDispatch * pWindowDispatch, long lKeyPointType, IDispatch * pGraphicDispatch );
__declspec(implementation_key(689)) HRESULT DISEMouseEvents::MouseClick ( short sButton, short sShift, double dX, double dY, double dZ, IDispatch * pWindowDispatch, long lKeyPointType, IDispatch * pGraphicDispatch );
__declspec(implementation_key(690)) HRESULT DISEMouseEvents::MouseDblClick ( short sButton, short sShift, double dX, double dY, double dZ, IDispatch * pWindowDispatch, long lKeyPointType, IDispatch * pGraphicDispatch );
__declspec(implementation_key(691)) HRESULT DISEMouseEvents::MouseDrag ( short sButton, short sShift, double dX, double dY, double dZ, IDispatch * pWindowDispatch, short DragState, long lKeyPointType, IDispatch * pGraphicDispatch );
__declspec(implementation_key(692)) HRESULT ISEMouseEvents::MouseDown ( short sButton, short sShift, double dX, double dY, double dZ, IDispatch * pWindowDispatch, long lKeyPointType, IDispatch * pGraphicDispatch );
__declspec(implementation_key(693)) HRESULT ISEMouseEvents::MouseUp ( short sButton, short sShift, double dX, double dY, double dZ, IDispatch * pWindowDispatch, long lKeyPointType, IDispatch * pGraphicDispatch );
__declspec(implementation_key(694)) HRESULT ISEMouseEvents::MouseMove ( short sButton, short sShift, double dX, double dY, double dZ, IDispatch * pWindowDispatch, long lKeyPointType, IDispatch * pGraphicDispatch );
__declspec(implementation_key(695)) HRESULT ISEMouseEvents::MouseClick ( short sButton, short sShift, double dX, double dY, double dZ, IDispatch * pWindowDispatch, long lKeyPointType, IDispatch * pGraphicDispatch );
__declspec(implementation_key(696)) HRESULT ISEMouseEvents::MouseDblClick ( short sButton, short sShift, double dX, double dY, double dZ, IDispatch * pWindowDispatch, long lKeyPointType, IDispatch * pGraphicDispatch );
__declspec(implementation_key(697)) HRESULT ISEMouseEvents::MouseDrag ( short sButton, short sShift, double dX, double dY, double dZ, IDispatch * pWindowDispatch, short DragState, long lKeyPointType, IDispatch * pGraphicDispatch );
__declspec(implementation_key(698)) DISEMousePtr ISECommand::GetMouse ( );
__declspec(implementation_key(699)) IUnknownPtr ISECommand::GetWindow ( );
__declspec(implementation_key(700)) VARIANT_BOOL ISECommand::GetDone ( );
__declspec(implementation_key(701)) void ISECommand::PutDone ( VARIANT_BOOL pbDone );
__declspec(implementation_key(702)) long ISECommand::GetOnEditOwnerChange ( );
__declspec(implementation_key(703)) void ISECommand::PutOnEditOwnerChange ( long plContinueOnChange );
__declspec(implementation_key(704)) long ISECommand::GetOnEnvironmentChange ( );
__declspec(implementation_key(705)) void ISECommand::PutOnEnvironmentChange ( long plContinueOnChange );
__declspec(implementation_key(706)) HRESULT ISECommand::Start ( );
__declspec(implementation_key(707)) HRESULT DISECommandWindowEvents::WindowProc ( IDispatch * pUnkDoc, IDispatch * pUnkView, long nMsg, long wParam, long lParam, long * lResult );
__declspec(implementation_key(708)) LONG_PTR ISECommandWindowEvents::WindowProc ( IDispatch * pTheDoc, IDispatch * pTheView, unsigned int nMsg, UINT_PTR wParam, LONG_PTR lParam );
__declspec(implementation_key(709)) HRESULT DISECommandEvents::Activate ( );
__declspec(implementation_key(710)) HRESULT DISECommandEvents::Deactivate ( );
__declspec(implementation_key(711)) HRESULT DISECommandEvents::Terminate ( );
__declspec(implementation_key(712)) HRESULT DISECommandEvents::Idle ( long lCount, VARIANT_BOOL * pbMore );
__declspec(implementation_key(713)) HRESULT DISECommandEvents::KeyDown ( short * KeyCode, short Shift );
__declspec(implementation_key(714)) HRESULT DISECommandEvents::KeyPress ( short * KeyAscii );
__declspec(implementation_key(715)) HRESULT DISECommandEvents::KeyUp ( short * KeyCode, short Shift );
__declspec(implementation_key(716)) HRESULT ISECommandEvents::Activate ( );
__declspec(implementation_key(717)) HRESULT ISECommandEvents::Deactivate ( );
__declspec(implementation_key(718)) HRESULT ISECommandEvents::Terminate ( );
__declspec(implementation_key(719)) HRESULT ISECommandEvents::Idle ( long lCount, VARIANT_BOOL * pbMore );
__declspec(implementation_key(720)) HRESULT ISECommandEvents::KeyDown ( short * KeyCode, short Shift );
__declspec(implementation_key(721)) HRESULT ISECommandEvents::KeyPress ( short * KeyAscii );
__declspec(implementation_key(722)) HRESULT ISECommandEvents::KeyUp ( short * KeyCode, short Shift );
__declspec(implementation_key(723)) IDispatchPtr AddIns::GetApplication ( );
__declspec(implementation_key(724)) long AddIns::GetCount ( );
__declspec(implementation_key(725)) AddInPtr AddIns::Item ( const _variant_t & Index );
__declspec(implementation_key(726)) HRESULT AddIns::Update ( );
__declspec(implementation_key(727)) IDispatchPtr AddIn::GetApplication ( );
__declspec(implementation_key(728)) IUnknownPtr AddIn::GetAddInEvents ( );
__declspec(implementation_key(729)) VARIANT_BOOL AddIn::GetConnect ( );
__declspec(implementation_key(730)) void AddIn::PutConnect ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(731)) _bstr_t AddIn::GetDescription ( );
__declspec(implementation_key(732)) void AddIn::PutDescription ( _bstr_t _arg1 );
__declspec(implementation_key(733)) _bstr_t AddIn::GetGUID ( );
__declspec(implementation_key(734)) long AddIn::GetGuiVersion ( );
__declspec(implementation_key(735)) void AddIn::PutGuiVersion ( long _arg1 );
__declspec(implementation_key(736)) IDispatchPtr AddIn::GetObject ( );
__declspec(implementation_key(737)) void AddIn::PutObject ( IDispatch * _arg1 );
__declspec(implementation_key(738)) _bstr_t AddIn::GetProgID ( );
__declspec(implementation_key(739)) VARIANT_BOOL AddIn::GetVisible ( );
__declspec(implementation_key(740)) void AddIn::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(741)) HRESULT AddIn::SetAddInInfo ( long InstanceHandle, _bstr_t EnvironmentCatID, _bstr_t CategoryName, long IDColorBitmapMedium, long IDColorBitmapLarge, long IDMonochromeBitmapMedium, long IDMonochromeBitmapLarge, long NumberOfCommands, SAFEARRAY * * CommandNames, SAFEARRAY * * CommandIDs );
__declspec(implementation_key(742)) long AddIn::AddCommand ( _bstr_t EnvironmentCatID, _bstr_t CommandName, long CommandID );
__declspec(implementation_key(743)) CommandBarButtonPtr AddIn::AddCommandBarButton ( _bstr_t EnvironmentCatID, _bstr_t CommandBarName, long CommandID );
__declspec(implementation_key(744)) IDispatchPtr ISEAddIns::GetApplication ( );
__declspec(implementation_key(745)) long ISEAddIns::GetCount ( );
__declspec(implementation_key(746)) IUnknownPtr ISEAddIns::Get_NewEnum ( );
__declspec(implementation_key(747)) AddInPtr ISEAddIns::Item ( const _variant_t & Index );
__declspec(implementation_key(748)) HRESULT ISEAddIns::Update ( );
__declspec(implementation_key(749)) HRESULT ISEAddInEvents::OnCommand ( long CommandID );
__declspec(implementation_key(750)) HRESULT ISEAddInEvents::OnCommandHelp ( long hFrameWnd, long HelpCommandID, long CommandID );
__declspec(implementation_key(751)) HRESULT ISEAddInEvents::OnCommandUpdateUI ( long CommandID, long * CommandFlags, BSTR * MenuItemText, long * BitmapID );
__declspec(implementation_key(752)) HRESULT DISEAddInEvents::OnCommand ( long nCmdID );
__declspec(implementation_key(753)) HRESULT DISEAddInEvents::OnCommandHelp ( long hFrameWnd, long uHelpCommand, long nCmdID );
__declspec(implementation_key(754)) HRESULT DISEAddInEvents::OnCommandUpdateUI ( long nCmdID, long * lCmdFlags, BSTR * MenuItemText, long * nIDBitmap );
__declspec(implementation_key(755)) IDispatchPtr CommandBarButton::GetApplication ( );
__declspec(implementation_key(756)) VARIANT_BOOL CommandBarButton::GetBeginGroup ( );
__declspec(implementation_key(757)) void CommandBarButton::PutBeginGroup ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(758)) VARIANT_BOOL CommandBarButton::GetBuiltIn ( );
__declspec(implementation_key(759)) VARIANT_BOOL CommandBarButton::GetBuiltInFace ( );
__declspec(implementation_key(760)) void CommandBarButton::PutBuiltInFace ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(761)) _bstr_t CommandBarButton::GetCaption ( );
__declspec(implementation_key(762)) void CommandBarButton::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(763)) _bstr_t CommandBarButton::GetDescriptionText ( );
__declspec(implementation_key(764)) void CommandBarButton::PutDescriptionText ( _bstr_t _arg1 );
__declspec(implementation_key(765)) VARIANT_BOOL CommandBarButton::GetEnabled ( );
__declspec(implementation_key(766)) void CommandBarButton::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(767)) long CommandBarButton::GetFaceId ( );
__declspec(implementation_key(768)) void CommandBarButton::PutFaceId ( long _arg1 );
__declspec(implementation_key(769)) long CommandBarButton::GetHeight ( );
__declspec(implementation_key(770)) long CommandBarButton::GetHelpContextId ( );
__declspec(implementation_key(771)) void CommandBarButton::PutHelpContextId ( long _arg1 );
__declspec(implementation_key(772)) _bstr_t CommandBarButton::GetHelpFile ( );
__declspec(implementation_key(773)) void CommandBarButton::PutHelpFile ( _bstr_t _arg1 );
__declspec(implementation_key(774)) long CommandBarButton::GetId ( );
__declspec(implementation_key(775)) long CommandBarButton::GetIndex ( );
__declspec(implementation_key(776)) long CommandBarButton::GetLeft ( );
__declspec(implementation_key(777)) _bstr_t CommandBarButton::GetOnAction ( );
__declspec(implementation_key(778)) void CommandBarButton::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(779)) _bstr_t CommandBarButton::GetParameterText ( );
__declspec(implementation_key(780)) void CommandBarButton::PutParameterText ( _bstr_t _arg1 );
__declspec(implementation_key(781)) CommandBarPtr CommandBarButton::GetParent ( );
__declspec(implementation_key(782)) _bstr_t CommandBarButton::GetShortcutText ( );
__declspec(implementation_key(783)) void CommandBarButton::PutShortcutText ( _bstr_t _arg1 );
__declspec(implementation_key(784)) _bstr_t CommandBarButton::GetTag ( );
__declspec(implementation_key(785)) void CommandBarButton::PutTag ( _bstr_t _arg1 );
__declspec(implementation_key(786)) _bstr_t CommandBarButton::GetTooltipText ( );
__declspec(implementation_key(787)) void CommandBarButton::PutTooltipText ( _bstr_t _arg1 );
__declspec(implementation_key(788)) long CommandBarButton::GetTop ( );
__declspec(implementation_key(789)) enum SeControlType CommandBarButton::GetType ( );
__declspec(implementation_key(790)) VARIANT_BOOL CommandBarButton::GetVisible ( );
__declspec(implementation_key(791)) void CommandBarButton::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(792)) long CommandBarButton::GetWidth ( );
__declspec(implementation_key(793)) HRESULT CommandBarButton::Delete ( const _variant_t & Temporary );
__declspec(implementation_key(794)) HRESULT CommandBarButton::Execute ( );
__declspec(implementation_key(795)) HRESULT CommandBarButton::Help ( );
__declspec(implementation_key(796)) HRESULT CommandBarButton::LoadFace ( _bstr_t Face );
__declspec(implementation_key(797)) IUnknownPtr CommandBarButton::GetCommandBarButtonEvents ( );
__declspec(implementation_key(798)) enum SeButtonState CommandBarButton::GetState ( );
__declspec(implementation_key(799)) void CommandBarButton::PutState ( enum SeButtonState _arg1 );
__declspec(implementation_key(800)) enum SeButtonStyle CommandBarButton::GetStyle ( );
__declspec(implementation_key(801)) void CommandBarButton::PutStyle ( enum SeButtonStyle _arg1 );
__declspec(implementation_key(802)) IDispatchPtr ISEAddIn::GetApplication ( );
__declspec(implementation_key(803)) IUnknownPtr ISEAddIn::GetAddInEvents ( );
__declspec(implementation_key(804)) VARIANT_BOOL ISEAddIn::GetConnect ( );
__declspec(implementation_key(805)) void ISEAddIn::PutConnect ( VARIANT_BOOL Connect );
__declspec(implementation_key(806)) _bstr_t ISEAddIn::GetDescription ( );
__declspec(implementation_key(807)) void ISEAddIn::PutDescription ( _bstr_t Description );
__declspec(implementation_key(808)) _bstr_t ISEAddIn::GetGUID ( );
__declspec(implementation_key(809)) long ISEAddIn::GetGuiVersion ( );
__declspec(implementation_key(810)) void ISEAddIn::PutGuiVersion ( long GuiVersion );
__declspec(implementation_key(811)) IDispatchPtr ISEAddIn::GetObject ( );
__declspec(implementation_key(812)) void ISEAddIn::PutObject ( IDispatch * Object );
__declspec(implementation_key(813)) _bstr_t ISEAddIn::GetProgID ( );
__declspec(implementation_key(814)) VARIANT_BOOL ISEAddIn::GetVisible ( );
__declspec(implementation_key(815)) void ISEAddIn::PutVisible ( VARIANT_BOOL Visible );
__declspec(implementation_key(816)) HRESULT ISEAddIn::SetAddInInfo ( long InstanceHandle, _bstr_t EnvironmentCatID, _bstr_t CategoryName, long IDColorBitmapMedium, long IDColorBitmapLarge, long IDMonochromeBitmapMedium, long IDMonochromeBitmapLarge, long NumberOfCommands, SAFEARRAY * * CommandNames, SAFEARRAY * * CommandIDs );
__declspec(implementation_key(817)) long ISEAddIn::AddCommand ( _bstr_t EnvironmentCatID, _bstr_t CommandName, long CommandID );
__declspec(implementation_key(818)) CommandBarButtonPtr ISEAddIn::AddCommandBarButton ( _bstr_t EnvironmentCatID, _bstr_t CommandBarName, long CommandID );
__declspec(implementation_key(819)) HRESULT ISECommandBarButtonEvents::Click ( );
__declspec(implementation_key(820)) HRESULT ISECommandBarButtonEvents::Help ( long hFrameWnd, long HelpCommandID );
__declspec(implementation_key(821)) HRESULT ISECommandBarButtonEvents::UpdateUI ( );
__declspec(implementation_key(822)) HRESULT DISECommandBarButtonEvents::Click ( );
__declspec(implementation_key(823)) HRESULT DISECommandBarButtonEvents::Help ( long hFrameWnd, long uHelpCommand );
__declspec(implementation_key(824)) HRESULT DISECommandBarButtonEvents::UpdateUI ( );
__declspec(implementation_key(825)) IUnknownPtr ISECommandBarButton::GetCommandBarButtonEvents ( );
__declspec(implementation_key(826)) enum SeButtonState ISECommandBarButton::GetState ( );
__declspec(implementation_key(827)) void ISECommandBarButton::PutState ( enum SeButtonState State );
__declspec(implementation_key(828)) enum SeButtonStyle ISECommandBarButton::GetStyle ( );
__declspec(implementation_key(829)) void ISECommandBarButton::PutStyle ( enum SeButtonStyle Style );
__declspec(implementation_key(830)) HRESULT ISEFeatureLibraryEvents::AfterFeatureLibraryDocumentCreated ( _bstr_t Name );
__declspec(implementation_key(831)) HRESULT ISEFeatureLibraryEvents::AfterFeatureLibraryDocumentRenamed ( _bstr_t NewName, _bstr_t OldName );
__declspec(implementation_key(832)) HRESULT ISEFeatureLibraryEvents::AfterFeatureLibraryDocumentDeleted ( _bstr_t Name );
__declspec(implementation_key(833)) HRESULT Insight::DownloadDocumentFromServer ( _bstr_t DocumentToDownLoadFromServer, enum DocumentAccess DocumentAccessMode, BSTR * LocalPath, const _variant_t & GetLatestDocuments, const _variant_t & ProcessIndirectDocuments, const _variant_t & RevisionRuleOption, const _variant_t & StopFileOpenIfRevisionRuleNotApplicable );
__declspec(implementation_key(834)) HRESULT Insight::ImportDocumentsToServer ( long NumberOfDocumentsFoldersToImport, const _variant_t & ListOfDocumentsFoldersToImport, _bstr_t ImportLocation, enum UploadType TypeOfUpload, enum CheckInOptions CheckInOption );
__declspec(implementation_key(835)) HRESULT Insight::UploadDocumentsToServer ( long NumberOfDocumentsToUpload, const _variant_t & DocumentsToUpload );
__declspec(implementation_key(836)) HRESULT Insight::ExportDocumentsFromServer ( long NumberOfDocumentsToExport, const _variant_t & ListOfDocumentsToExport, _bstr_t ExportToLocation, VARIANT_BOOL SetDocToReadOnly, enum OverWriteFilesOption OverWriteOption );
__declspec(implementation_key(837)) HRESULT Insight::DeleteDocumentsFromServer ( long NumberOfDocumentsToBeDeleted, const _variant_t & ListOfDocumentsToBeDeleted, long * NumberOfSuccessfullyDeletedDocuments, VARIANT * SuccessfullyDeletedDocuments );
__declspec(implementation_key(838)) HRESULT Insight::FindWhereUsedOnServer ( long NumberOfProperties, const _variant_t & ListOfProperties, long NumberOfSharePointDirectories, const _variant_t & ListOfSharePointDirectories, long NumberOfDocuments, const _variant_t & ListOfDocumentsForWhereUsed, long * NumberOfUserFiles, VARIANT * DocumentsUsedByList, const _variant_t & TypeOfSearch );
__declspec(implementation_key(839)) HRESULT Insight::CheckOutDocumentsFromServer ( long NumberOfDocumentsToCheckOutFromServer, const _variant_t & ListOfDocumentsToCheckOutFromServer );
__declspec(implementation_key(840)) HRESULT Insight::CheckInDocumentsToServer ( long NumberOfDocumentsToCheckInToServer, const _variant_t & ListOfDocumentsToCheckInFromServer, const _variant_t & FailIfDocumentsOpenInSolidEdge );
__declspec(implementation_key(841)) HRESULT Insight::UndoCheckOutDocumentsFromServer ( long NumberOfDocumentsToUndoCheckOutFromServer, const _variant_t & ListOfDocumentsToUndoCheckOutFromServer );
__declspec(implementation_key(842)) HRESULT Insight::ShowRevisionsForServerDocument ( _bstr_t DocumentNameToShowRevisions, long * NumberOfRevisions, VARIANT * DocumentNamesOfRevisions );
__declspec(implementation_key(843)) HRESULT Insight::GetRevisedFrom ( _bstr_t RevisedDocumentName, BSTR * RevisedFromDocument );
__declspec(implementation_key(844)) HRESULT Insight::SetInsightUserNamePassword ( _bstr_t WorkspaceUrl, _bstr_t UserName, _bstr_t Password, _bstr_t DomainName );
__declspec(implementation_key(845)) HRESULT Insight::GetLastInsightTransactionMessages ( BSTR * TransactionString, long * NumberOfDocuments, VARIANT * ListofDocumentNamesWithPath, VARIANT * ListofMessages, VARIANT * ListofSeverityCodes );
__declspec(implementation_key(846)) HRESULT Insight::GetOutOfDateDocuments ( long * NumberOfOutOfDateDocuments, VARIANT * ListOfOutOfDateDocuments );
__declspec(implementation_key(847)) HRESULT Insight::ClearCache ( );
__declspec(implementation_key(848)) HRESULT Insight::DeleteDocumentsFromCache ( long NumberOfDocumentsToBeDeletedFromCache, const _variant_t & ListOfDocumentsToBeDeletedFromCache, long * NumberOfNotDeletedDocuments, VARIANT * ListOfNotDeletedDocuments );
__declspec(implementation_key(849)) HRESULT Insight::PutUserNameAndPasswordIntoCache ( _bstr_t WorkspaceUrl );
__declspec(implementation_key(850)) HRESULT Insight::EnableDeveloperLog ( VARIANT_BOOL bCreateFlag );
__declspec(implementation_key(851)) HRESULT Insight::SynchronizeDocumentsInCache ( long NumberOfDocumentsToBeSynchronizedWithServer, const _variant_t & ListOfDocumentsInCacheToBeSynchronized );
__declspec(implementation_key(852)) HRESULT Insight::SynchronizeAllDocumentsInCache ( );
__declspec(implementation_key(853)) HRESULT Insight::CheckInAllCheckedOutDocumentsInCache ( );
__declspec(implementation_key(854)) HRESULT Insight::GetFilePropertiesFromServer ( long NumberOfFilesToBeQueriedForProperties, const _variant_t & FileUrlsList, long NumberOfPropertiesTobeQueried, const _variant_t & PropertyUrisList, long * numberOfPropertiesValues, VARIANT * PropertyValueList );
__declspec(implementation_key(855)) HRESULT Insight::MoveDocumentsThroughWorkFlow ( _bstr_t Filename, enum DocumentStatus newstatus, const _variant_t & NumberOfDraftFiles, const _variant_t & draftFileList, const _variant_t & draftFileStatusList, const _variant_t & NumberOfRevisionFiles, const _variant_t & revisionFileList, const _variant_t & RevisionFileStatusList );
__declspec(implementation_key(856)) HRESULT Insight::MoveAllDocumentsThroughWorkFlow ( _bstr_t Filename, enum DocumentStatus newstatus );
__declspec(implementation_key(857)) HRESULT Insight::GetSharePointServerType ( _bstr_t Filename, enum SPServerType * SPServerType, VARIANT * bProcessChecks );
__declspec(implementation_key(858)) HRESULT Insight::FileExists ( _bstr_t FileUrl, VARIANT_BOOL * bFileExists );
__declspec(implementation_key(859)) HRESULT Insight::CreateFolder ( long numberOfFoldersToCreate, const _variant_t & varListOfFoldersToCreate );
__declspec(implementation_key(860)) HRESULT Insight::DeleteFolder ( long NumberOfDocumentsToBeDeleted, const _variant_t & varlistOfFilesToDelete, long * NumberOfSuccessfullyDeletedDocuments, VARIANT * listOfFoldersSuccessfullyDeleted );
__declspec(implementation_key(861)) HRESULT Insight::FolderExists ( _bstr_t bstrFolderName, VARIANT_BOOL * bFolderExists );
__declspec(implementation_key(862)) HRESULT Insight::GetDirs ( _bstr_t ParentUrl, long * numberOfSubFoldersFound, VARIANT * ListOfSubFoldersFound );
__declspec(implementation_key(863)) HRESULT Insight::GetFiles ( _bstr_t ParentUrl, long * numberOfFilesFound, VARIANT * ListOfFilesFound, const _variant_t & FileFilter );
__declspec(implementation_key(864)) HRESULT Insight::DoesUserHaveAdminRights ( _bstr_t FileOrFolderUrl, _bstr_t UserName, VARIANT_BOOL * bUserHasAdminRights );
__declspec(implementation_key(865)) HRESULT Insight::IsInsightSupported ( VARIANT_BOOL * bInsightIsSupported );
__declspec(implementation_key(866)) HRESULT Insight::IsFileCheckedOut ( _bstr_t FileUrl, VARIANT_BOOL * bFileIsCheckedOut, BSTR * UserName );
__declspec(implementation_key(867)) HRESULT Insight::GetCachePath ( long numberOfFilesToGetPathFor, const _variant_t & varListOfFilePaths, long * numberOfFilesReturned, VARIANT * varListOfFilesContainingCachePaths );
__declspec(implementation_key(868)) HRESULT Insight::GetUserRole ( _bstr_t FileOrFolderUrl, _bstr_t UserName, BSTR * UserRole );
__declspec(implementation_key(869)) HRESULT Insight::GetDocState ( _bstr_t UrlToGetStateFor, VARIANT * docState );
__declspec(implementation_key(870)) HRESULT Insight::CheckSupport ( _bstr_t ServerUrl, VARIANT_BOOL * bSPSIsSupported );
__declspec(implementation_key(871)) HRESULT Insight::GetUserRights ( _bstr_t FileOrFolderUrl, enum InsightSPUserRights * UserRights );
__declspec(implementation_key(872)) HRESULT Insight::GetIndirectFilesTree ( _bstr_t containerFileName, VARIANT * pIndirectFilesTree );
__declspec(implementation_key(873)) HRESULT Insight::UsePathAsDefaultFolderMapPath ( _bstr_t WorkspaceUrl );
__declspec(implementation_key(874)) HRESULT Insight::RemoveAllFilesFromRecycleBin ( _bstr_t bstrDocLibUrl );
__declspec(implementation_key(875)) HRESULT Insight::RestoreAllFilesFromRecycleBin ( _bstr_t bstrDocLibUrl );
__declspec(implementation_key(876)) HRESULT Insight::DownloadDocumentFromServerWithAllLinks ( _bstr_t DocumentToDownLoadFromServer, enum DocumentAccess DocumentAccessMode, BSTR * LocalPath, const _variant_t & GetLatestDocuments, const _variant_t & ProcessIndirectDocuments, const _variant_t & RevisionRuleOption, const _variant_t & StopFileOpenIfRevisionRuleNotApplicable );
__declspec(implementation_key(877)) HRESULT Insight::SetInsightATPRunning ( VARIANT_BOOL bRunningInsightATP );
__declspec(implementation_key(878)) HRESULT Insight::SetInsightATPInfo ( _bstr_t bstrATPLevel1, _bstr_t bstrATPClassName, _bstr_t bstrATPName, long ATPId );
__declspec(implementation_key(879)) HRESULT Insight::ValidateDocsOnLCA ( _bstr_t bstrInputURL, long numberOfDocumentstoValidate, const _variant_t & varlistOfDocsToValidate, _bstr_t bstrInputData );
__declspec(implementation_key(880)) HRESULT Insight::IsVersioningEnabledForTheInputDocLib ( _bstr_t docLibName, VARIANT_BOOL * pbIsVersioningOnForTheInputDocLib );
__declspec(implementation_key(881)) HRESULT Insight::IsFileCheckedOutToSameUser ( _bstr_t filePath, _bstr_t UserName, _bstr_t Password, BSTR * checkedoutby, VARIANT_BOOL UpdateCache );
__declspec(implementation_key(882)) HRESULT Insight::IsDocumentLibraryContainsRequiredProperty ( _bstr_t docLibName, VARIANT_BOOL * pbIsRequiredPropertyExist );
__declspec(implementation_key(883)) HRESULT Insight::SetInsightOfflineMode ( VARIANT_BOOL bOfflineModeVal );
__declspec(implementation_key(884)) HRESULT Insight::DisplayPropertyManagerDlg ( _bstr_t bstrFilename );
__declspec(implementation_key(885)) HRESULT Insight::GetCookieData ( _bstr_t bstrFilename, enum CookieDataToGet valCookieDataToGet, enum RevisionRuleType * varRevisionRule );
__declspec(implementation_key(886)) HRESULT Insight::SetFilePropertiesOnServer ( _bstr_t bstrInputURL, long NumberOfPropertiesToSet, const _variant_t & PropertyUrIList, const _variant_t & PropertyValueList );
__declspec(implementation_key(887)) HRESULT Insight::ISDocumentParserEnabled ( _bstr_t bstrInputURL, VARIANT_BOOL * bDocParserEnabled );
__declspec(implementation_key(888)) HRESULT Insight::GetLWFPathForUrl ( _bstr_t bstrUrl, BSTR * bstrLWFPath );
__declspec(implementation_key(889)) HRESULT Insight::DisplaySEPackNGoDlg ( _bstr_t bstrFilename );
__declspec(implementation_key(890)) HRESULT _IInsightAuto::DownloadDocumentFromServer ( _bstr_t DocumentToDownLoadFromServer, enum DocumentAccess DocumentAccessMode, BSTR * LocalPath, const _variant_t & GetLatestDocuments, const _variant_t & ProcessIndirectDocuments, const _variant_t & RevisionRuleOption, const _variant_t & StopFileOpenIfRevisionRuleNotApplicable );
__declspec(implementation_key(891)) HRESULT _IInsightAuto::ImportDocumentsToServer ( long NumberOfDocumentsFoldersToImport, const _variant_t & ListOfDocumentsFoldersToImport, _bstr_t ImportLocation, enum UploadType TypeOfUpload, enum CheckInOptions CheckInOption );
__declspec(implementation_key(892)) HRESULT _IInsightAuto::UploadDocumentsToServer ( long NumberOfDocumentsToUpload, const _variant_t & DocumentsToUpload );
__declspec(implementation_key(893)) HRESULT _IInsightAuto::ExportDocumentsFromServer ( long NumberOfDocumentsToExport, const _variant_t & ListOfDocumentsToExport, _bstr_t ExportToLocation, VARIANT_BOOL SetDocToReadOnly, enum OverWriteFilesOption OverWriteOption );
__declspec(implementation_key(894)) HRESULT _IInsightAuto::DeleteDocumentsFromServer ( long NumberOfDocumentsToBeDeleted, const _variant_t & ListOfDocumentsToBeDeleted, long * NumberOfSuccessfullyDeletedDocuments, VARIANT * SuccessfullyDeletedDocuments );
__declspec(implementation_key(895)) HRESULT _IInsightAuto::FindWhereUsedOnServer ( long NumberOfProperties, const _variant_t & ListOfProperties, long NumberOfSharePointDirectories, const _variant_t & ListOfSharePointDirectories, long NumberOfDocuments, const _variant_t & ListOfDocumentsForWhereUsed, long * NumberOfUserFiles, VARIANT * DocumentsUsedByList, const _variant_t & TypeOfSearch );
__declspec(implementation_key(896)) HRESULT _IInsightAuto::CheckOutDocumentsFromServer ( long NumberOfDocumentsToCheckOutFromServer, const _variant_t & ListOfDocumentsToCheckOutFromServer );
__declspec(implementation_key(897)) HRESULT _IInsightAuto::CheckInDocumentsToServer ( long NumberOfDocumentsToCheckInToServer, const _variant_t & ListOfDocumentsToCheckInFromServer, const _variant_t & FailIfDocumentsOpenInSolidEdge );
__declspec(implementation_key(898)) HRESULT _IInsightAuto::UndoCheckOutDocumentsFromServer ( long NumberOfDocumentsToUndoCheckOutFromServer, const _variant_t & ListOfDocumentsToUndoCheckOutFromServer );
__declspec(implementation_key(899)) HRESULT _IInsightAuto::ShowRevisionsForServerDocument ( _bstr_t DocumentNameToShowRevisions, long * NumberOfRevisions, VARIANT * DocumentNamesOfRevisions );
__declspec(implementation_key(900)) HRESULT _IInsightAuto::GetRevisedFrom ( _bstr_t RevisedDocumentName, BSTR * RevisedFromDocument );
__declspec(implementation_key(901)) HRESULT _IInsightAuto::SetInsightUserNamePassword ( _bstr_t WorkspaceUrl, _bstr_t UserName, _bstr_t Password, _bstr_t DomainName );
__declspec(implementation_key(902)) HRESULT _IInsightAuto::GetLastInsightTransactionMessages ( BSTR * TransactionString, long * NumberOfDocuments, VARIANT * ListofDocumentNamesWithPath, VARIANT * ListofMessages, VARIANT * ListofSeverityCodes );
__declspec(implementation_key(903)) HRESULT _IInsightAuto::GetOutOfDateDocuments ( long * NumberOfOutOfDateDocuments, VARIANT * ListOfOutOfDateDocuments );
__declspec(implementation_key(904)) HRESULT _IInsightAuto::ClearCache ( );
__declspec(implementation_key(905)) HRESULT _IInsightAuto::DeleteDocumentsFromCache ( long NumberOfDocumentsToBeDeletedFromCache, const _variant_t & ListOfDocumentsToBeDeletedFromCache, long * NumberOfNotDeletedDocuments, VARIANT * ListOfNotDeletedDocuments );
__declspec(implementation_key(906)) HRESULT _IInsightAuto::PutUserNameAndPasswordIntoCache ( _bstr_t WorkspaceUrl );
__declspec(implementation_key(907)) HRESULT _IInsightAuto::EnableDeveloperLog ( VARIANT_BOOL bCreateFlag );
__declspec(implementation_key(908)) HRESULT _IInsightAuto::SynchronizeDocumentsInCache ( long NumberOfDocumentsToBeSynchronizedWithServer, const _variant_t & ListOfDocumentsInCacheToBeSynchronized );
__declspec(implementation_key(909)) HRESULT _IInsightAuto::SynchronizeAllDocumentsInCache ( );
__declspec(implementation_key(910)) HRESULT _IInsightAuto::CheckInAllCheckedOutDocumentsInCache ( );
__declspec(implementation_key(911)) HRESULT _IInsightAuto::GetFilePropertiesFromServer ( long NumberOfFilesToBeQueriedForProperties, const _variant_t & FileUrlsList, long NumberOfPropertiesTobeQueried, const _variant_t & PropertyUrisList, long * numberOfPropertiesValues, VARIANT * PropertyValueList );
__declspec(implementation_key(912)) HRESULT _IInsightAuto::MoveDocumentsThroughWorkFlow ( _bstr_t Filename, enum DocumentStatus newstatus, const _variant_t & NumberOfDraftFiles, const _variant_t & draftFileList, const _variant_t & draftFileStatusList, const _variant_t & NumberOfRevisionFiles, const _variant_t & revisionFileList, const _variant_t & RevisionFileStatusList );
__declspec(implementation_key(913)) HRESULT _IInsightAuto::MoveAllDocumentsThroughWorkFlow ( _bstr_t Filename, enum DocumentStatus newstatus );
__declspec(implementation_key(914)) HRESULT _IInsightAuto::GetSharePointServerType ( _bstr_t Filename, enum SPServerType * SPServerType, VARIANT * bProcessChecks );
__declspec(implementation_key(915)) HRESULT _IInsightAuto::FileExists ( _bstr_t FileUrl, VARIANT_BOOL * bFileExists );
__declspec(implementation_key(916)) HRESULT _IInsightAuto::CreateFolder ( long numberOfFoldersToCreate, const _variant_t & varListOfFoldersToCreate );
__declspec(implementation_key(917)) HRESULT _IInsightAuto::DeleteFolder ( long NumberOfDocumentsToBeDeleted, const _variant_t & varlistOfFilesToDelete, long * NumberOfSuccessfullyDeletedDocuments, VARIANT * listOfFoldersSuccessfullyDeleted );
__declspec(implementation_key(918)) HRESULT _IInsightAuto::FolderExists ( _bstr_t bstrFolderName, VARIANT_BOOL * bFolderExists );
__declspec(implementation_key(919)) HRESULT _IInsightAuto::GetDirs ( _bstr_t ParentUrl, long * numberOfSubFoldersFound, VARIANT * ListOfSubFoldersFound );
__declspec(implementation_key(920)) HRESULT _IInsightAuto::GetFiles ( _bstr_t ParentUrl, long * numberOfFilesFound, VARIANT * ListOfFilesFound, const _variant_t & FileFilter );
__declspec(implementation_key(921)) HRESULT _IInsightAuto::DoesUserHaveAdminRights ( _bstr_t FileOrFolderUrl, _bstr_t UserName, VARIANT_BOOL * bUserHasAdminRights );
__declspec(implementation_key(922)) HRESULT _IInsightAuto::IsInsightSupported ( VARIANT_BOOL * bInsightIsSupported );
__declspec(implementation_key(923)) HRESULT _IInsightAuto::IsFileCheckedOut ( _bstr_t FileUrl, VARIANT_BOOL * bFileIsCheckedOut, BSTR * UserName );
__declspec(implementation_key(924)) HRESULT _IInsightAuto::GetCachePath ( long numberOfFilesToGetPathFor, const _variant_t & varListOfFilePaths, long * numberOfFilesReturned, VARIANT * varListOfFilesContainingCachePaths );
__declspec(implementation_key(925)) HRESULT _IInsightAuto::GetUserRole ( _bstr_t FileOrFolderUrl, _bstr_t UserName, BSTR * UserRole );
__declspec(implementation_key(926)) HRESULT _IInsightAuto::GetDocState ( _bstr_t UrlToGetStateFor, VARIANT * docState );
__declspec(implementation_key(927)) HRESULT _IInsightAuto::CheckSupport ( _bstr_t ServerUrl, VARIANT_BOOL * bSPSIsSupported );
__declspec(implementation_key(928)) HRESULT _IInsightAuto::GetUserRights ( _bstr_t FileOrFolderUrl, enum InsightSPUserRights * UserRights );
__declspec(implementation_key(929)) HRESULT _IInsightAuto::GetIndirectFilesTree ( _bstr_t containerFileName, VARIANT * pIndirectFilesTree );
__declspec(implementation_key(930)) HRESULT _IInsightAuto::UsePathAsDefaultFolderMapPath ( _bstr_t WorkspaceUrl );
__declspec(implementation_key(931)) HRESULT _IInsightAuto::RemoveAllFilesFromRecycleBin ( _bstr_t bstrDocLibUrl );
__declspec(implementation_key(932)) HRESULT _IInsightAuto::RestoreAllFilesFromRecycleBin ( _bstr_t bstrDocLibUrl );
__declspec(implementation_key(933)) HRESULT _IInsightAuto::DownloadDocumentFromServerWithAllLinks ( _bstr_t DocumentToDownLoadFromServer, enum DocumentAccess DocumentAccessMode, BSTR * LocalPath, const _variant_t & GetLatestDocuments, const _variant_t & ProcessIndirectDocuments, const _variant_t & RevisionRuleOption, const _variant_t & StopFileOpenIfRevisionRuleNotApplicable );
__declspec(implementation_key(934)) HRESULT _IInsightAuto::SetInsightATPRunning ( VARIANT_BOOL bRunningInsightATP );
__declspec(implementation_key(935)) HRESULT _IInsightAuto::SetInsightATPInfo ( _bstr_t bstrATPLevel1, _bstr_t bstrATPClassName, _bstr_t bstrATPName, long ATPId );
__declspec(implementation_key(936)) HRESULT _IInsightAuto::ValidateDocsOnLCA ( _bstr_t bstrInputURL, long numberOfDocumentstoValidate, const _variant_t & varlistOfDocsToValidate, _bstr_t bstrInputData );
__declspec(implementation_key(937)) HRESULT _IInsightAuto::IsVersioningEnabledForTheInputDocLib ( _bstr_t docLibName, VARIANT_BOOL * pbIsVersioningOnForTheInputDocLib );
__declspec(implementation_key(938)) HRESULT _IInsightAuto::IsFileCheckedOutToSameUser ( _bstr_t filePath, _bstr_t UserName, _bstr_t Password, BSTR * checkedoutby, VARIANT_BOOL UpdateCache );
__declspec(implementation_key(939)) HRESULT _IInsightAuto::IsDocumentLibraryContainsRequiredProperty ( _bstr_t docLibName, VARIANT_BOOL * pbIsRequiredPropertyExist );
__declspec(implementation_key(940)) HRESULT _IInsightAuto::SetInsightOfflineMode ( VARIANT_BOOL bOfflineModeVal );
__declspec(implementation_key(941)) HRESULT _IInsightAuto::DisplayPropertyManagerDlg ( _bstr_t bstrFilename );
__declspec(implementation_key(942)) HRESULT _IInsightAuto::GetCookieData ( _bstr_t bstrFilename, enum CookieDataToGet valCookieDataToGet, enum RevisionRuleType * varRevisionRule );
__declspec(implementation_key(943)) HRESULT _IInsightAuto::SetFilePropertiesOnServer ( _bstr_t bstrInputURL, long NumberOfPropertiesToSet, const _variant_t & PropertyUrIList, const _variant_t & PropertyValueList );
__declspec(implementation_key(944)) HRESULT _IInsightAuto::ISDocumentParserEnabled ( _bstr_t bstrInputURL, VARIANT_BOOL * bDocParserEnabled );
__declspec(implementation_key(945)) HRESULT _IInsightAuto::GetLWFPathForUrl ( _bstr_t bstrUrl, BSTR * bstrLWFPath );
__declspec(implementation_key(946)) HRESULT _IInsightAuto::DisplaySEPackNGoDlg ( _bstr_t bstrFilename );
__declspec(implementation_key(947)) HRESULT ISEApplicationV8AfterDocumentOpenEvent::AfterDocumentOpen ( IDispatch * theDocument );
__declspec(implementation_key(948)) HRESULT DISEFeatureSelectedFromPFEvents::AfterFeatureSelectedFromPF ( IDispatch * theDocument, IDispatch * SelectedFeature, long lFeatureType );
__declspec(implementation_key(949)) HRESULT ISEFeatureSelectedFromPFEvents::AfterFeatureSelectedFromPF ( IDispatch * theDocument, IDispatch * SelectedFeature, long lFeatureType );
__declspec(implementation_key(950)) HRESULT MatTable::GetMaterialList ( long * plNumMaterials, VARIANT * listOfMaterials );
__declspec(implementation_key(951)) HRESULT MatTable::SetActiveDocument ( IDispatch * pDocument );
__declspec(implementation_key(952)) HRESULT MatTable::AddMaterial ( _bstr_t bstrMatName, long lNumProps, const _variant_t & varPropList, _bstr_t bstrFaceStyle, _bstr_t bstrFillStyle, _bstr_t bstrVSPlusStyle );
__declspec(implementation_key(953)) HRESULT MatTable::GetMatPropValue ( _bstr_t bstrMatName, MatTablePropIndex lPropIndex, VARIANT * varPropValue );
__declspec(implementation_key(954)) HRESULT MatTable::SetMatPropValue ( _bstr_t bstrMatName, MatTablePropIndex lPropIndex, const _variant_t & varPropValue );
__declspec(implementation_key(955)) HRESULT MatTable::DeleteMaterial ( _bstr_t bstrMatName );
__declspec(implementation_key(956)) HRESULT MatTable::ApplyMaterial ( IDispatch * pDocument, _bstr_t bstrMatName );
__declspec(implementation_key(957)) HRESULT MatTable::GetMatLibFileName ( VARIANT * varMatLibName );
__declspec(implementation_key(958)) HRESULT MatTable::WriteMatLibFileFromXML ( _bstr_t bstrXMLFile, _bstr_t bstrMatLibName );
__declspec(implementation_key(959)) HRESULT MatTable::WriteMaterialDataToXML ( _bstr_t bstrXMLFile );
__declspec(implementation_key(960)) HRESULT MatTable::GetPSMGaugeListFromExcel ( _bstr_t bstrGageTableName, long * plNumGages, VARIANT * listOfGages );
__declspec(implementation_key(961)) HRESULT MatTable::GetPSMGaugeInfoForDoc ( IDispatch * pDocument, BSTR * bstrGageName, BSTR * bstrGageFilePath, int * iMTLUsingExcel, BSTR * bstrMTLGageTableName, int * iDocUsingExcel, BSTR * bstrDocGageTableName, int * iCountBendRadiusVals, int * iCountBendAngleVals, int * iCountNFVals );
__declspec(implementation_key(962)) HRESULT MatTable::GetDefaultGageFileName ( BSTR * strGageFileName );
__declspec(implementation_key(963)) VARIANT_BOOL MatTable::PerformGageDataValidation ( _bstr_t strExcelFile, _bstr_t strGageTable, _bstr_t strGage );
__declspec(implementation_key(964)) HRESULT MatTable::SetMaterialToGageTableAssociation ( IDispatch * pDocument, _bstr_t bstrMaterialName, _bstr_t bstrMaterialGageTableName, VARIANT_BOOL bAddAssociation );
__declspec(implementation_key(965)) HRESULT MatTable::SetDocumentToGageTableAssociation ( IDispatch * pDocument, _bstr_t bstrDocGageName, _bstr_t bstrDocGageTableName, VARIANT_BOOL bUseNeutralFactorFromExcel, VARIANT_BOOL bAddAssociation );
__declspec(implementation_key(966)) HRESULT MatTable::UseNeutralFactorFromExcel ( IDispatch * pDocument, VARIANT_BOOL bUseNeutralFactorFromExcel );
__declspec(implementation_key(967)) HRESULT MatTable::EditOpenGageExcelFile ( _bstr_t bstrDocGageTableName );
__declspec(implementation_key(968)) HRESULT MatTable::GetCurrentGageName ( IDispatch * pDocument, BSTR * bstrGageName );
__declspec(implementation_key(969)) HRESULT MatTable::GetCurrentMaterialName ( IDispatch * pDocument, BSTR * bstrMaterialName );
__declspec(implementation_key(970)) HRESULT MatTable::GetMaterialListFromLibrary ( _bstr_t bstrLibraryName, long * plNumMaterials, VARIANT * listOfMaterials );
__declspec(implementation_key(971)) HRESULT MatTable::AddMaterialToLibrary ( _bstr_t bstrMatName, _bstr_t bstrLibrary, _bstr_t bstrMaterialPath, long lNumProps, const _variant_t & varPropList, _bstr_t bstrFaceStyle, _bstr_t bstrFillStyle );
__declspec(implementation_key(972)) HRESULT MatTable::DeleteMaterialFromLibrary ( _bstr_t bstrMatName, _bstr_t bstrLibraryName );
__declspec(implementation_key(973)) HRESULT MatTable::GetMaterialPropValueFromLibrary ( _bstr_t bstrMatName, _bstr_t bstrLibraryName, MatTablePropIndex lPropIndex, VARIANT * varPropValue );
__declspec(implementation_key(974)) HRESULT MatTable::SetMaterialPropValueToLibrary ( _bstr_t bstrMatName, _bstr_t bstrLibraryName, MatTablePropIndex lPropIndex, const _variant_t & varPropValue );
__declspec(implementation_key(975)) HRESULT MatTable::GetMaterialPropValueFromDoc ( IDispatch * pDocument, MatTablePropIndex lPropIndex, VARIANT * varPropValue );
__declspec(implementation_key(976)) HRESULT MatTable::ApplyMaterialToDoc ( IDispatch * pDocument, _bstr_t bstrMatName, _bstr_t bstrLibraryName );
__declspec(implementation_key(977)) HRESULT MatTable::AddMaterialToFavorites ( _bstr_t bstrMaterialName, _bstr_t bstrLibraryName );
__declspec(implementation_key(978)) HRESULT MatTable::GetFavoriteMaterialList ( VARIANT * MaterialNames, VARIANT * LibraryNames, long * plNumMaterials );
__declspec(implementation_key(979)) HRESULT MatTable::GetMRUMaterialList ( VARIANT * MaterialNames, VARIANT * LibraryNames, long * plNumMaterials );
__declspec(implementation_key(980)) HRESULT MatTable::SetMRUMaterialLimit ( int nNoOfMRUMtls );
__declspec(implementation_key(981)) HRESULT MatTable::GetMRUMaterialLimit ( int * nNoOfMRUMtls );
__declspec(implementation_key(982)) HRESULT MatTable::ClearMRUList ( );
__declspec(implementation_key(983)) HRESULT MatTable::AddCustomProperty ( _bstr_t bstrMatName, _bstr_t bstrMatLibName, _bstr_t bstrPropName, enum UnitTypeConstants ePropUnitType, const _variant_t & varPropValue );
__declspec(implementation_key(984)) HRESULT MatTable::DeleteCustomProperty ( _bstr_t bstrMatName, _bstr_t bstrMatLibName, int nPropIndex );
__declspec(implementation_key(985)) HRESULT MatTable::GetCountOfCustomProperties ( _bstr_t bstrMatName, _bstr_t bstrMatLibName, int * nNumOfCustProps );
__declspec(implementation_key(986)) HRESULT MatTable::GetCustomMaterialPropertyFromLibrary ( _bstr_t bstrMatName, _bstr_t bstrMatLibName, int nPropIndex, BSTR * bstrPropName, enum UnitTypeConstants * ePropUnitType, VARIANT * varPropValue );
__declspec(implementation_key(987)) HRESULT MatTable::GetCustomMaterialPropertyFromDoc ( IDispatch * pDocument, int nPropIndex, BSTR * bstrPropName, enum UnitTypeConstants * ePropUnitType, VARIANT * varPropValue );
__declspec(implementation_key(988)) HRESULT MatTable::GetMaterialsFolderPath ( BSTR * bstrMtlFolderPath );
__declspec(implementation_key(989)) HRESULT MatTable::GetMaterialLibraryFileList ( VARIANT * MaterialLibList, long * plNumMaterialLibraries );
__declspec(implementation_key(990)) HRESULT MatTable::CreateNewMaterialLibrary ( _bstr_t bstrLibInputName );
__declspec(implementation_key(991)) HRESULT MatTable::CreateNewDirectory ( _bstr_t bstrLibname, _bstr_t bstrDirectoryPath );
__declspec(implementation_key(992)) HRESULT MatTable::RenameMaterial ( _bstr_t bstrMatOldName, _bstr_t bstrLibname, _bstr_t bstrMatNewName );
__declspec(implementation_key(993)) HRESULT MatTable::RenameLibrary ( _bstr_t bstrLibOldName, _bstr_t bstrLibNeName );
__declspec(implementation_key(994)) HRESULT MatTable::RenameDirectory ( _bstr_t bstrDirOldName, _bstr_t bstrLibname, _bstr_t bstrDirNewName );
__declspec(implementation_key(995)) HRESULT MatTable::ExportMaterialDataToFile ( _bstr_t bstrMaterialLibraryName, _bstr_t bstrXMLFile );
__declspec(implementation_key(996)) HRESULT MatTable::ImportMaterialDataFromFile ( _bstr_t bstrXMLFile, _bstr_t bstrMatLibFile );
__declspec(implementation_key(997)) HRESULT MatTable::SetMaterialsFolderPath ( _bstr_t bstrMtlFolderPath );
__declspec(implementation_key(998)) HRESULT MatTable::DeleteDirectory ( _bstr_t bstrDirName, _bstr_t bstrLibname );
__declspec(implementation_key(999)) HRESULT MatTable::GetMaterialLibraryList ( VARIANT * MaterialLibList, long * plNumMaterialLibraries );
__declspec(implementation_key(1000)) HRESULT MatTable::ApplyMaterialToFile ( _bstr_t bstrFilename, _bstr_t bstrMatName, _bstr_t bstrLibraryName );
__declspec(implementation_key(1001)) HRESULT MatTable::GetOODStatusofMaterialAndGage ( IDispatch * pDoc, VARIANT_BOOL * vbMaterialPropOOD, VARIANT_BOOL * vbGagePropOOD );
__declspec(implementation_key(1002)) HRESULT MatTable::UpdateOODMaterialAndGageProperties ( IDispatch * pDoc, VARIANT_BOOL vbUpdateMaterialProp, VARIANT_BOOL vbUpdateGageProp );
__declspec(implementation_key(1003)) HRESULT MatTable::GetNeutralFactor ( IDispatch * pDoc, double dBendAngle, double dBendRadius, double * dNeutralFactor );
__declspec(implementation_key(1004)) HRESULT MatTable::ApplyGageFromLibraryToDoc ( IDispatch * pDocument, _bstr_t bstrGage, _bstr_t bstrLibraryName );
__declspec(implementation_key(1005)) HRESULT MatTable::ApplyGageFromGageTableToDoc ( IDispatch * pDocument, _bstr_t bstrGage, _bstr_t bstrGageTableName );
__declspec(implementation_key(1006)) HRESULT MatTable::ApplyMaterialToInternalComponents ( IDispatch * pDocument, long NumOfInternalComponents, SAFEARRAY * * psaInternalComponents, _bstr_t bstrMatName, _bstr_t bstrLibraryName );
__declspec(implementation_key(1007)) HRESULT MatTable::ApplyGageFromLibraryToInternalComponents ( IDispatch * pDocument, long NumOfInternalComponents, SAFEARRAY * * psaInternalComponents, _bstr_t bstrGage, _bstr_t bstrLibraryName );
__declspec(implementation_key(1008)) HRESULT MatTable::ApplyGageFromGageTableToInternalComponents ( IDispatch * pDocument, long NumOfInternalComponents, SAFEARRAY * * psaInternalComponents, _bstr_t bstrGage, _bstr_t bstrGageTableName );
__declspec(implementation_key(1009)) HRESULT _IMatTableAuto::GetMaterialList ( long * plNumMaterials, VARIANT * listOfMaterials );
__declspec(implementation_key(1010)) HRESULT _IMatTableAuto::SetActiveDocument ( IDispatch * pDocument );
__declspec(implementation_key(1011)) HRESULT _IMatTableAuto::AddMaterial ( _bstr_t bstrMatName, long lNumProps, const _variant_t & varPropList, _bstr_t bstrFaceStyle, _bstr_t bstrFillStyle, _bstr_t bstrVSPlusStyle );
__declspec(implementation_key(1012)) HRESULT _IMatTableAuto::GetMatPropValue ( _bstr_t bstrMatName, MatTablePropIndex lPropIndex, VARIANT * varPropValue );
__declspec(implementation_key(1013)) HRESULT _IMatTableAuto::SetMatPropValue ( _bstr_t bstrMatName, MatTablePropIndex lPropIndex, const _variant_t & varPropValue );
__declspec(implementation_key(1014)) HRESULT _IMatTableAuto::DeleteMaterial ( _bstr_t bstrMatName );
__declspec(implementation_key(1015)) HRESULT _IMatTableAuto::ApplyMaterial ( IDispatch * pDocument, _bstr_t bstrMatName );
__declspec(implementation_key(1016)) HRESULT _IMatTableAuto::GetMatLibFileName ( VARIANT * varMatLibName );
__declspec(implementation_key(1017)) HRESULT _IMatTableAuto::WriteMatLibFileFromXML ( _bstr_t bstrXMLFile, _bstr_t bstrMatLibName );
__declspec(implementation_key(1018)) HRESULT _IMatTableAuto::WriteMaterialDataToXML ( _bstr_t bstrXMLFile );
__declspec(implementation_key(1019)) HRESULT _IMatTableAuto::GetPSMGaugeListFromExcel ( _bstr_t bstrGageTableName, long * plNumGages, VARIANT * listOfGages );
__declspec(implementation_key(1020)) HRESULT _IMatTableAuto::GetPSMGaugeInfoForDoc ( IDispatch * pDocument, BSTR * bstrGageName, BSTR * bstrGageFilePath, int * iMTLUsingExcel, BSTR * bstrMTLGageTableName, int * iDocUsingExcel, BSTR * bstrDocGageTableName, int * iCountBendRadiusVals, int * iCountBendAngleVals, int * iCountNFVals );
__declspec(implementation_key(1021)) HRESULT _IMatTableAuto::GetDefaultGageFileName ( BSTR * strGageFileName );
__declspec(implementation_key(1022)) VARIANT_BOOL _IMatTableAuto::PerformGageDataValidation ( _bstr_t strExcelFile, _bstr_t strGageTable, _bstr_t strGage );
__declspec(implementation_key(1023)) HRESULT _IMatTableAuto::SetMaterialToGageTableAssociation ( IDispatch * pDocument, _bstr_t bstrMaterialName, _bstr_t bstrMaterialGageTableName, VARIANT_BOOL bAddAssociation );
__declspec(implementation_key(1024)) HRESULT _IMatTableAuto::SetDocumentToGageTableAssociation ( IDispatch * pDocument, _bstr_t bstrDocGageName, _bstr_t bstrDocGageTableName, VARIANT_BOOL bUseNeutralFactorFromExcel, VARIANT_BOOL bAddAssociation );
__declspec(implementation_key(1025)) HRESULT _IMatTableAuto::UseNeutralFactorFromExcel ( IDispatch * pDocument, VARIANT_BOOL bUseNeutralFactorFromExcel );
__declspec(implementation_key(1026)) HRESULT _IMatTableAuto::EditOpenGageExcelFile ( _bstr_t bstrDocGageTableName );
__declspec(implementation_key(1027)) HRESULT _IMatTableAuto::GetCurrentGageName ( IDispatch * pDocument, BSTR * bstrGageName );
__declspec(implementation_key(1028)) HRESULT _IMatTableAuto::GetCurrentMaterialName ( IDispatch * pDocument, BSTR * bstrMaterialName );
__declspec(implementation_key(1029)) HRESULT _IMatTableAuto::GetMaterialListFromLibrary ( _bstr_t bstrLibraryName, long * plNumMaterials, VARIANT * listOfMaterials );
__declspec(implementation_key(1030)) HRESULT _IMatTableAuto::AddMaterialToLibrary ( _bstr_t bstrMatName, _bstr_t bstrLibrary, _bstr_t bstrMaterialPath, long lNumProps, const _variant_t & varPropList, _bstr_t bstrFaceStyle, _bstr_t bstrFillStyle );
__declspec(implementation_key(1031)) HRESULT _IMatTableAuto::DeleteMaterialFromLibrary ( _bstr_t bstrMatName, _bstr_t bstrLibraryName );
__declspec(implementation_key(1032)) HRESULT _IMatTableAuto::GetMaterialPropValueFromLibrary ( _bstr_t bstrMatName, _bstr_t bstrLibraryName, MatTablePropIndex lPropIndex, VARIANT * varPropValue );
__declspec(implementation_key(1033)) HRESULT _IMatTableAuto::SetMaterialPropValueToLibrary ( _bstr_t bstrMatName, _bstr_t bstrLibraryName, MatTablePropIndex lPropIndex, const _variant_t & varPropValue );
__declspec(implementation_key(1034)) HRESULT _IMatTableAuto::GetMaterialPropValueFromDoc ( IDispatch * pDocument, MatTablePropIndex lPropIndex, VARIANT * varPropValue );
__declspec(implementation_key(1035)) HRESULT _IMatTableAuto::ApplyMaterialToDoc ( IDispatch * pDocument, _bstr_t bstrMatName, _bstr_t bstrLibraryName );
__declspec(implementation_key(1036)) HRESULT _IMatTableAuto::AddMaterialToFavorites ( _bstr_t bstrMaterialName, _bstr_t bstrLibraryName );
__declspec(implementation_key(1037)) HRESULT _IMatTableAuto::GetFavoriteMaterialList ( VARIANT * MaterialNames, VARIANT * LibraryNames, long * plNumMaterials );
__declspec(implementation_key(1038)) HRESULT _IMatTableAuto::GetMRUMaterialList ( VARIANT * MaterialNames, VARIANT * LibraryNames, long * plNumMaterials );
__declspec(implementation_key(1039)) HRESULT _IMatTableAuto::SetMRUMaterialLimit ( int nNoOfMRUMtls );
__declspec(implementation_key(1040)) HRESULT _IMatTableAuto::GetMRUMaterialLimit ( int * nNoOfMRUMtls );
__declspec(implementation_key(1041)) HRESULT _IMatTableAuto::ClearMRUList ( );
__declspec(implementation_key(1042)) HRESULT _IMatTableAuto::AddCustomProperty ( _bstr_t bstrMatName, _bstr_t bstrMatLibName, _bstr_t bstrPropName, enum UnitTypeConstants ePropUnitType, const _variant_t & varPropValue );
__declspec(implementation_key(1043)) HRESULT _IMatTableAuto::DeleteCustomProperty ( _bstr_t bstrMatName, _bstr_t bstrMatLibName, int nPropIndex );
__declspec(implementation_key(1044)) HRESULT _IMatTableAuto::GetCountOfCustomProperties ( _bstr_t bstrMatName, _bstr_t bstrMatLibName, int * nNumOfCustProps );
__declspec(implementation_key(1045)) HRESULT _IMatTableAuto::GetCustomMaterialPropertyFromLibrary ( _bstr_t bstrMatName, _bstr_t bstrMatLibName, int nPropIndex, BSTR * bstrPropName, enum UnitTypeConstants * ePropUnitType, VARIANT * varPropValue );
__declspec(implementation_key(1046)) HRESULT _IMatTableAuto::GetCustomMaterialPropertyFromDoc ( IDispatch * pDocument, int nPropIndex, BSTR * bstrPropName, enum UnitTypeConstants * ePropUnitType, VARIANT * varPropValue );
__declspec(implementation_key(1047)) HRESULT _IMatTableAuto::GetMaterialsFolderPath ( BSTR * bstrMtlFolderPath );
__declspec(implementation_key(1048)) HRESULT _IMatTableAuto::GetMaterialLibraryFileList ( VARIANT * MaterialLibList, long * plNumMaterialLibraries );
__declspec(implementation_key(1049)) HRESULT _IMatTableAuto::CreateNewMaterialLibrary ( _bstr_t bstrLibInputName );
__declspec(implementation_key(1050)) HRESULT _IMatTableAuto::CreateNewDirectory ( _bstr_t bstrLibname, _bstr_t bstrDirectoryPath );
__declspec(implementation_key(1051)) HRESULT _IMatTableAuto::RenameMaterial ( _bstr_t bstrMatOldName, _bstr_t bstrLibname, _bstr_t bstrMatNewName );
__declspec(implementation_key(1052)) HRESULT _IMatTableAuto::RenameLibrary ( _bstr_t bstrLibOldName, _bstr_t bstrLibNeName );
__declspec(implementation_key(1053)) HRESULT _IMatTableAuto::RenameDirectory ( _bstr_t bstrDirOldName, _bstr_t bstrLibname, _bstr_t bstrDirNewName );
__declspec(implementation_key(1054)) HRESULT _IMatTableAuto::ExportMaterialDataToFile ( _bstr_t bstrMaterialLibraryName, _bstr_t bstrXMLFile );
__declspec(implementation_key(1055)) HRESULT _IMatTableAuto::ImportMaterialDataFromFile ( _bstr_t bstrXMLFile, _bstr_t bstrMatLibFile );
__declspec(implementation_key(1056)) HRESULT _IMatTableAuto::SetMaterialsFolderPath ( _bstr_t bstrMtlFolderPath );
__declspec(implementation_key(1057)) HRESULT _IMatTableAuto::DeleteDirectory ( _bstr_t bstrDirName, _bstr_t bstrLibname );
__declspec(implementation_key(1058)) HRESULT _IMatTableAuto::GetMaterialLibraryList ( VARIANT * MaterialLibList, long * plNumMaterialLibraries );
__declspec(implementation_key(1059)) HRESULT _IMatTableAuto::ApplyMaterialToFile ( _bstr_t bstrFilename, _bstr_t bstrMatName, _bstr_t bstrLibraryName );
__declspec(implementation_key(1060)) HRESULT _IMatTableAuto::GetOODStatusofMaterialAndGage ( IDispatch * pDoc, VARIANT_BOOL * vbMaterialPropOOD, VARIANT_BOOL * vbGagePropOOD );
__declspec(implementation_key(1061)) HRESULT _IMatTableAuto::UpdateOODMaterialAndGageProperties ( IDispatch * pDoc, VARIANT_BOOL vbUpdateMaterialProp, VARIANT_BOOL vbUpdateGageProp );
__declspec(implementation_key(1062)) HRESULT _IMatTableAuto::GetNeutralFactor ( IDispatch * pDoc, double dBendAngle, double dBendRadius, double * dNeutralFactor );
__declspec(implementation_key(1063)) HRESULT _IMatTableAuto::ApplyGageFromLibraryToDoc ( IDispatch * pDocument, _bstr_t bstrGage, _bstr_t bstrLibraryName );
__declspec(implementation_key(1064)) HRESULT _IMatTableAuto::ApplyGageFromGageTableToDoc ( IDispatch * pDocument, _bstr_t bstrGage, _bstr_t bstrGageTableName );
__declspec(implementation_key(1065)) HRESULT _IMatTableAuto::ApplyMaterialToInternalComponents ( IDispatch * pDocument, long NumOfInternalComponents, SAFEARRAY * * psaInternalComponents, _bstr_t bstrMatName, _bstr_t bstrLibraryName );
__declspec(implementation_key(1066)) HRESULT _IMatTableAuto::ApplyGageFromLibraryToInternalComponents ( IDispatch * pDocument, long NumOfInternalComponents, SAFEARRAY * * psaInternalComponents, _bstr_t bstrGage, _bstr_t bstrLibraryName );
__declspec(implementation_key(1067)) HRESULT _IMatTableAuto::ApplyGageFromGageTableToInternalComponents ( IDispatch * pDocument, long NumOfInternalComponents, SAFEARRAY * * psaInternalComponents, _bstr_t bstrGage, _bstr_t bstrGageTableName );
__declspec(implementation_key(1068)) HRESULT ISENewFileUIEvents::OnNewFileUI ( enum DocumentTypeConstants DocumentType, BSTR * Filename, BSTR * AppendToTitle );
__declspec(implementation_key(1069)) HRESULT ISEShortCutMenuEvents::BuildMenu ( _bstr_t EnvCatID, enum ShortCutMenuContextConstants Context, IDispatch * pGraphicDispatch, SAFEARRAY * * MenuStrings, SAFEARRAY * * CommandIDs );
__declspec(implementation_key(1070)) HRESULT SolidEdgeTCE::GetPDMCachePath ( BSTR * bStrCachePath );
__declspec(implementation_key(1071)) HRESULT SolidEdgeTCE::CheckInDocumentsToTeamCenterServer ( SAFEARRAY * * ppsaFileList, VARIANT_BOOL bOnlyUpload );
__declspec(implementation_key(1072)) HRESULT SolidEdgeTCE::CheckOutDocumentsFromTeamCenterServer ( _bstr_t bstrDirctFileItemId, _bstr_t bstrDirctFileItemRevId, VARIANT_BOOL bOnlyDownload, _bstr_t bstrFilename, enum DocumentDownloadLevel enumDownloadLevel );
__declspec(implementation_key(1073)) int SolidEdgeTCE::IsTeamCenterFileCheckedOut ( _bstr_t bstrFilename );
__declspec(implementation_key(1074)) HRESULT SolidEdgeTCE::GetDocumentUID ( _bstr_t bstrFilename, BSTR * bstrItemId, BSTR * bstrItemRev );
__declspec(implementation_key(1075)) HRESULT SolidEdgeTCE::DoesTeamCenterFileExists ( _bstr_t bstrItemId, _bstr_t bstrItemRev, VARIANT_BOOL * bFileExists );
__declspec(implementation_key(1076)) HRESULT SolidEdgeTCE::GetTeamCenterMode ( VARIANT_BOOL * bIsTeamCenterMode );
__declspec(implementation_key(1077)) HRESULT SolidEdgeTCE::SetTeamCenterMode ( VARIANT_BOOL bMode );
__declspec(implementation_key(1078)) HRESULT SolidEdgeTCE::ValidateLogin ( _bstr_t bstrUserName, _bstr_t bstrPassword, _bstr_t bstrGroup, _bstr_t bstrUserRole, _bstr_t bstrDBUrl );
__declspec(implementation_key(1079)) HRESULT SolidEdgeTCE::AssignItemID ( _bstr_t bstrItemType, BSTR * bstrItemId, BSTR * bstrItemRev );
__declspec(implementation_key(1080)) HRESULT SolidEdgeTCE::PutItemTypeAsCustomProp ( _bstr_t bstrFilename, _bstr_t bstrItemType );
__declspec(implementation_key(1081)) HRESULT SolidEdgeTCE::GetDatasetNameFromCookie ( _bstr_t bstrFilename, BSTR * bstrDatasetName );
__declspec(implementation_key(1082)) HRESULT SolidEdgeTCE::DeleteFilesFromCache ( SAFEARRAY * * psaCacheFiles );
__declspec(implementation_key(1083)) HRESULT SolidEdgeTCE::ImportDocumentsToServer ( long lnumberOfDocumentsFoldersToImport, SAFEARRAY * * psalistOfFilesFoldersToImport, _bstr_t bstrUserName, _bstr_t bstrPassword, _bstr_t bstrGroup, _bstr_t bstrUserRole, _bstr_t bstrDBUrl, VARIANT_BOOL bImportAsPrecise, VARIANT_BOOL bPerformOnlyDryRun, VARIANT_BOOL bDisplayAlert, VARIANT_BOOL bIsFromATP, VARIANT_BOOL bIsOverwrite, VARIANT_BOOL brestart, VARIANT_BOOL bLinkTraversal, VARIANT_BOOL bIncludeSubFolders, BSTR * bstrFolderUID );
__declspec(implementation_key(1084)) HRESULT SolidEdgeTCE::OnUndoCheckOutDocuments ( SAFEARRAY * * psaCacheFiles );
__declspec(implementation_key(1085)) HRESULT SolidEdgeTCE::OnSynchronizeFile ( SAFEARRAY * * psaSynchFiles, enum SyncOption enumSyncOption );
__declspec(implementation_key(1086)) HRESULT SolidEdgeTCE::GetOutOfDateDocuments ( VARIANT * pvarListOfOutOfDateDocuments );
__declspec(implementation_key(1087)) HRESULT SolidEdgeTCE::GetUserLogMessages ( VARIANT * pvarUserLogMessages );
__declspec(implementation_key(1088)) HRESULT SolidEdgeTCE::SaveAsToTeamCenter ( _bstr_t bstrItemId, _bstr_t bstrItemRev, _bstr_t bstrDataSetFileName, _bstr_t bstrRevisionRule, _bstr_t bstrFolderName, VARIANT * pvarListOldAndNewItemIDRevsFileNames );
__declspec(implementation_key(1089)) HRESULT SolidEdgeTCE::ReviseToTeamCenter ( _bstr_t bstrItemId, _bstr_t bstrItemRev, _bstr_t bstrDataSetFileName, _bstr_t bstrRevisionRule, _bstr_t bstrFolderName, VARIANT * pvarListOldAndNewItemIDRevsFileNames );
__declspec(implementation_key(1090)) HRESULT SolidEdgeTCE::OnGetWhereUsedForAutomation ( _bstr_t bstrItemId, _bstr_t bstrItemRev, _bstr_t bstrDataSetFileName, VARIANT * pvarListOfWhereUsedDocuments );
__declspec(implementation_key(1091)) HRESULT SolidEdgeTCE::CreateNewProject ( _bstr_t bstrProjectName );
__declspec(implementation_key(1092)) HRESULT SolidEdgeTCE::DeleteProject ( _bstr_t bstrProjectName );
__declspec(implementation_key(1093)) HRESULT SolidEdgeTCE::DeleteAllProjects ( );
__declspec(implementation_key(1094)) HRESULT SolidEdgeTCE::DownladDocumentsFromServerWithOptions ( _bstr_t bstrItemId, _bstr_t bstrItemRev, _bstr_t bstrDataSetFileName, _bstr_t bstrRevisionRule, _bstr_t bstrVariantRule, VARIANT_BOOL vbReadOnly, VARIANT_BOOL vbAllLevel, unsigned long dwDownloadOption, SAFEARRAY * * pvarListOfFiles );
__declspec(implementation_key(1095)) HRESULT SolidEdgeTCE::GetListOfIndirectFilesForGivenFile ( _bstr_t bstrItemId, _bstr_t bstrItemRev, _bstr_t bstrDataSetFileName, _bstr_t bstrRevisionRule, _bstr_t bstrVariantRule, VARIANT * pvarListOfIndirectFiles );
__declspec(implementation_key(1096)) HRESULT SolidEdgeTCE::GetMappedPropertiesForGivenFile ( _bstr_t bstrItemId, _bstr_t bstrItemRev, _bstr_t bstrDataSetFileName, VARIANT * pvarListOfProperties );
__declspec(implementation_key(1097)) HRESULT SolidEdgeTCE::GetListOfFilesFromTeamcenterServer ( _bstr_t bstrDirctFileItemId, _bstr_t bstrDirctFileItemRevId, VARIANT * vFileNames, long * nFiles );
__declspec(implementation_key(1098)) HRESULT SolidEdgeTCE::GetTALLogFileName ( BSTR * bstrLogFileName );
__declspec(implementation_key(1099)) HRESULT SolidEdgeTCE::ValidateTcObjectModel ( _bstr_t bstrFilename, _bstr_t bstrOldItemID, _bstr_t bstrOldRev, VARIANT_BOOL * bIsTcModelCorrect, BSTR * bsrtCompResult, VARIANT * vRevisionRule, VARIANT * vValidateBOMOnly, long * nNoOfServerComponents );
__declspec(implementation_key(1100)) HRESULT SolidEdgeTCE::GetBomStructure ( _bstr_t bstrItemId, _bstr_t bstrItemRevId, _bstr_t bstrRevisionRule, VARIANT_BOOL bDeepList, long * NoOfComponents, VARIANT * ListOfItemRevIds, VARIANT * ListOfFileSpecs );
__declspec(implementation_key(1101)) HRESULT SolidEdgeTCE::GetItemRevBasedOnSEType ( enum TCESETypes nSEType, _bstr_t bstrUserName, VARIANT * ListOfItemRevIds );
__declspec(implementation_key(1102)) HRESULT SolidEdgeTCE::GetItemTypesInfo ( BSTR * pbstrXML, BSTR * pbstrDefaultItemType );
__declspec(implementation_key(1103)) HRESULT SolidEdgeTCE::GetSmartCodes ( VARIANT * pvarSmartCodesInfo );
__declspec(implementation_key(1104)) HRESULT SolidEdgeTCE::UnGetSmartCodes ( SAFEARRAY * * ppsaUnGetInfo );
__declspec(implementation_key(1105)) HRESULT SolidEdgeTCE::CheckInDocumentsToTeamCenterServerEx ( VARIANT * pvarFilesToBeCheckedInInfo, VARIANT * pvarArguments );
__declspec(implementation_key(1106)) HRESULT SolidEdgeTCE::IsItemTypeSmartCodesConfigured ( _bstr_t bstrItemType, VARIANT_BOOL * pvbIsSmartCodesConfigured );
__declspec(implementation_key(1107)) HRESULT SolidEdgeTCE::GetSEECOrTCPreferenceValues ( VARIANT * pvarPreferenceInfo );
__declspec(implementation_key(1108)) HRESULT SolidEdgeTCE::UpdateStatusInformation ( SAFEARRAY * * psaCacheFiles );
__declspec(implementation_key(1109)) HRESULT SolidEdgeTCE::GetProjectsForLoggedInUSer ( VARIANT * pvarListOfUserProjects, VARIANT * pvarListOfUserProjectUIDs );
__declspec(implementation_key(1110)) HRESULT SolidEdgeTCE::GetProjectsForGivenItemIDs ( VARIANT * pvarListOfItemIDsAndProjects );
__declspec(implementation_key(1111)) HRESULT SolidEdgeTCE::AddOrRemoveItemsToOrFromProjects ( VARIANT * pvarItemInfoToAddOrRemoveToProjects );
__declspec(implementation_key(1112)) HRESULT SolidEdgeTCE::CheckBomStructure ( _bstr_t bstrItemId, _bstr_t bstrItemRevId, _bstr_t bstrRevisionRule, VARIANT_BOOL * bIsDuplicateBOMLineExists, VARIANT * ListOfDupliacteObjIDs );
__declspec(implementation_key(1113)) HRESULT SolidEdgeTCE::AutoAssign ( VARIANT_BOOL vbAutoAssign );
__declspec(implementation_key(1114)) HRESULT SolidEdgeTCE::GetMFKAttributesForGivenItemType ( _bstr_t bstrItemType, VARIANT * pvMFKAttributes );
__declspec(implementation_key(1115)) HRESULT SolidEdgeTCE::SetPDMProperties ( _bstr_t bstrOldFileName, VARIANT * pvarListOfPropsForFileSaveAs, BSTR * bstrNewFileName );
__declspec(implementation_key(1116)) HRESULT SolidEdgeTCE::GetCurrentUserName ( BSTR * bStrCurrentUser );
__declspec(implementation_key(1117)) HRESULT SolidEdgeTCE::GetDocumentUIDEx ( _bstr_t bstrFilename, BSTR * bstrItemId, BSTR * bstrItemRev, BSTR * bstrItemUID, BSTR * bstrRevUID );
__declspec(implementation_key(1118)) HRESULT SolidEdgeTCE::DoesTeamCenterFileExistsUsingKeyProperties ( _bstr_t bstrItemType, VARIANT * pvarMFKAttrInfo, _bstr_t bstrItemRev, VARIANT_BOOL * bFileExists );
__declspec(implementation_key(1119)) HRESULT SolidEdgeTCE::CheckOutDocumentsFromTeamCenterServerUsingKeyProperties ( VARIANT * pvarMFKAttrInfo, _bstr_t bstrItemType, _bstr_t bstrDirctFileItemRevId, VARIANT_BOOL bOnlyDownload, _bstr_t bstrFilename, enum DocumentDownloadLevel enumDownloadLevel );
__declspec(implementation_key(1120)) HRESULT SolidEdgeTCE::GetTeamcenterVersion ( BSTR * bstrMajorVersion, BSTR * bstrCompleteVersion );
__declspec(implementation_key(1121)) HRESULT SolidEdgeTCE::GetItemIDAndRevisionPatterns ( _bstr_t bstrItemType, VARIANT * pvarItemIDPattern, VARIANT * pvarRevisionPattern );
__declspec(implementation_key(1122)) HRESULT SolidEdgeTCE::AssignItemIDAndRevUsingPatterns ( _bstr_t bstrItemType, _bstr_t bstrItemIDPattern, _bstr_t bstrRevisionPattern, BSTR * pItemIDPattern, BSTR * pRevisionPattern );
__declspec(implementation_key(1123)) HRESULT SolidEdgeTCE::GetItemTypesInfoEx ( _bstr_t bstrFilename, VARIANT * pvarItemTypeList );
__declspec(implementation_key(1124)) HRESULT SolidEdgeTCE::MapMFKAttributtesToFileProperties ( _bstr_t bstrFilename, SAFEARRAY * * psaMFKAttributes, VARIANT * pvarPropertyInfo );
__declspec(implementation_key(1125)) HRESULT SolidEdgeTCE::GetListOfFilesFromTeamcenterServerUsingKeyProperties ( VARIANT * pvarMFKAttrInfo, _bstr_t bstrDirctFileItemRevId, _bstr_t bstrItemType, VARIANT * vFileNames, long * nFiles );
__declspec(implementation_key(1126)) HRESULT SolidEdgeTCE::GetBomStructureUsingKeyProperties ( VARIANT * pvarMFKAttrInfo, _bstr_t bstrItemRevId, _bstr_t bstrItemType, _bstr_t bstrRevisionRule, VARIANT_BOOL bDeepList, long * NoOfComponents, VARIANT * ListOfItemRevIds, VARIANT * ListOfFileSpecs );
__declspec(implementation_key(1127)) HRESULT SolidEdgeTCE::CheckBomStructureUsingKeyProperties ( VARIANT * pvarMFKAttrInfo, _bstr_t bstrItemRevId, _bstr_t bstrItemType, _bstr_t bstrRevisionRule, VARIANT_BOOL * bIsDuplicateBOMLineExists, VARIANT * ListOfDupliacteObjIDs );
__declspec(implementation_key(1128)) HRESULT SolidEdgeTCE::SaveAsToTeamCenterUsingKeyProperties ( VARIANT * pvarMFKAttrInfo, _bstr_t bstrItemRev, _bstr_t bstrItemType, _bstr_t bstrDataSetFileName, _bstr_t bstrRevisionRule, _bstr_t bstrFolderName, VARIANT * pvarListOldAndNewItemIDRevsFileNames );
__declspec(implementation_key(1129)) HRESULT SolidEdgeTCE::ReviseToTeamCenterUsingKeyProperties ( VARIANT * pvarMFKAttrInfo, _bstr_t bstrItemRev, _bstr_t bstrItemType, _bstr_t bstrDataSetFileName, _bstr_t bstrRevisionRule, _bstr_t bstrFolderName, VARIANT * pvarListOldAndNewItemIDRevsFileNames );
__declspec(implementation_key(1130)) HRESULT SolidEdgeTCE::GetListOfIndirectFilesForGivenFileUsingKeyProperties ( VARIANT * pvarMFKAttrInfo, _bstr_t bstrItemRev, _bstr_t bstrItemType, _bstr_t bstrDataSetFileName, _bstr_t bstrRevisionRule, VARIANT * pvarListOfIndirectFiles );
__declspec(implementation_key(1131)) HRESULT SolidEdgeTCE::GetMappedPropertiesForGivenFileUsingKeyProperties ( VARIANT * pvarMFKAttrInfo, _bstr_t bstrItemRev, _bstr_t bstrItemType, _bstr_t bstrDataSetFileName, VARIANT * pvarListOfProperties );
__declspec(implementation_key(1132)) HRESULT SolidEdgeTCE::ValidateTcObjectModelUsingKeyProperties ( _bstr_t bstrFilename, VARIANT * pvarMFKAttrInfo, _bstr_t bstrItemType, _bstr_t bstrOldRev, VARIANT_BOOL * bIsTcModelCorrect, BSTR * bsrtCompResult, VARIANT * vRevisionRule, VARIANT * vValidateBOMOnly, long * nNoOfServerComponents );
__declspec(implementation_key(1133)) HRESULT SolidEdgeTCE::OnGetWhereUsedForAutomationUsingKeyProperties ( VARIANT * pvarMFKAttrInfo, _bstr_t bstrItemRev, _bstr_t bstrItemType, _bstr_t bstrDataSetFileName, VARIANT * pvarListOfWhereUsedDocuments );
__declspec(implementation_key(1134)) HRESULT SolidEdgeTCE::DownloadDocumentsFromServerWithOptionsUsingKeyProperties ( VARIANT * pvarMFKAttrInfo, _bstr_t bstrItemRev, _bstr_t bstrDataSetFileName, _bstr_t bstrRevisionRule, _bstr_t bstrItemType, VARIANT_BOOL vbReadOnly, VARIANT_BOOL vbAllLevel, unsigned long dwDownloadOption, SAFEARRAY * * pvarListOfFiles );
__declspec(implementation_key(1135)) HRESULT SolidEdgeTCE::ValidateKeyProperties ( VARIANT * pvarMFKAttrInfo, _bstr_t bstrRevID, _bstr_t bstrItemType, VARIANT * pvarListOfPropsVsStatus );
__declspec(implementation_key(1136)) HRESULT SolidEdgeTCE::GetStorageNameForProperties ( _bstr_t bstrFilename, VARIANT * pvarListOfPropInfo );
__declspec(implementation_key(1137)) HRESULT SolidEdgeTCE::GetErrorMessages ( VARIANT * pvarListOfErrorMsgs, VARIANT * pvarListOfWarningMsgs, VARIANT * pvarListOfInformationalMsgs );
__declspec(implementation_key(1138)) HRESULT SolidEdgeTCE::GetAllRevisions ( VARIANT * pvarMFKAttributes, _bstr_t bstrItemType, VARIANT * pvarRevisionList );
__declspec(implementation_key(1139)) HRESULT SolidEdgeTCE::CreateZipOfCache ( _bstr_t bstrSourceCachePath, _bstr_t bstrDestinationZipPath );
__declspec(implementation_key(1140)) HRESULT SolidEdgeTCE::GetListOfWorkflows ( VARIANT * pvarMFKAttributes, _bstr_t bstrItemType, _bstr_t bstrItemRev, VARIANT_BOOL bGetFiltered, VARIANT * pVarWorkflows );
__declspec(implementation_key(1141)) HRESULT SolidEdgeTCE::ExecuteWorkflow ( VARIANT * pvarMFKAttributes, _bstr_t bstrItemType, _bstr_t bstrItemRev, _bstr_t bstrprocessName, _bstr_t bstrProcessDesr, _bstr_t bstrTemplate, VARIANT * pVarOut );
__declspec(implementation_key(1142)) HRESULT SolidEdgeTCE::GetActivePDMMode ( unsigned long * activePDM );
__declspec(implementation_key(1143)) HRESULT SolidEdgeTCE::GetSolidEdgePreferencePath ( BSTR * lpSEPreferencePath );
__declspec(implementation_key(1144)) HRESULT SolidEdgeTCE::SetSEECOptions ( enum SEECOptions enumSEECDialog, unsigned long * dwValue );
__declspec(implementation_key(1145)) HRESULT SolidEdgeTCE::GetBOMProperties ( VARIANT * pvarMFKAttributes, _bstr_t bstrItemRevId, _bstr_t bstrItemType, _bstr_t bstrRevisionRule, long * NoOfComponents, VARIANT * FileOccProp );
__declspec(implementation_key(1146)) HRESULT SolidEdgeTCE::PublishFamilyOfAssemblyMembers ( VARIANT * pvarMFKAttrInfo, _bstr_t bstrItemRev, _bstr_t bstrDataSetFileName, _bstr_t bstrRevisionRule, _bstr_t bstrItemType, SAFEARRAY * * psaMemberInfo, VARIANT * pvarListOfWhereUsedDocuments );
__declspec(implementation_key(1147)) HRESULT SolidEdgeTCE::GetFamilyOfAssemblyMembers ( VARIANT * pvarMFKAttrInfo, _bstr_t bstrItemRev, _bstr_t bstrItemType, VARIANT * psaPublishedMemberInfo, VARIANT * psaUnpublishedMemberInfo );
__declspec(implementation_key(1148)) HRESULT SolidEdgeTCE::GetWhereUsedInfoForPublishedFamilyOfAssembly ( VARIANT * pvarMFKAttrInfo, _bstr_t bstrItemRev, _bstr_t bstrDataSetFileName, _bstr_t bstrRevisionRule, _bstr_t bstrItemType, VARIANT * pvarListOfWhereUsedDocuments );
__declspec(implementation_key(1149)) HRESULT SolidEdgeTCE::GetWhereUsedInfo ( VARIANT * pvarMFKAttrInfo, _bstr_t bstrItemRev, _bstr_t bstrItemType, _bstr_t bstrDataSetFileName, VARIANT * pvarListFilesWithMFKAttributes );
__declspec(implementation_key(1150)) HRESULT SolidEdgeTCE::PublishMembersOfActiveFamilyOfAssemblyDocument ( SAFEARRAY * * psaMemberInfo, VARIANT * pvarListOfWhereUsedDocuments );
__declspec(implementation_key(1151)) HRESULT SolidEdgeTCE::GetWhereUsedInfoForPublishedActiveFamilyOfAssemblyDocument ( VARIANT * pvarListOfWhereUsedDocuments );
__declspec(implementation_key(1152)) HRESULT SolidEdgeTCE::GetFamilyOfAssemblyMembersOfActiveDocument ( VARIANT * psaPublishedMemberInfo, VARIANT * psaUnpublishedMemberInfo );
__declspec(implementation_key(1153)) HRESULT SolidEdgeTCE::GetTeamcenterDefaultItemTypePreference ( _bstr_t bstrFilename, BSTR * bstrDefaultItemType );
__declspec(implementation_key(1154)) HRESULT SolidEdgeTCE::CreateBOMAndRelations ( VARIANT * pvarContainerInfo, SAFEARRAY * * psaComponentsInfo, VARIANT_BOOL bUploadFile, VARIANT_BOOL bCreatePreciseBOM, _bstr_t bstrRevRule, VARIANT_BOOL * bHasOverrideBody );
__declspec(implementation_key(1155)) HRESULT SolidEdgeTCE::UploadModelViewsOfActiveAssemblyDocument ( );
__declspec(implementation_key(1156)) HRESULT SolidEdgeTCE::ExtractTranslatedFiles ( VARIANT * pvarMFKAttrInfo, _bstr_t bstrItemRev, _bstr_t bstrRevisionRule, _bstr_t bstrItemType, _bstr_t bstrEtractLocation, _bstr_t bstrDataSetFileName, unsigned long dwExpandSelectionOptions, VARIANT * pvarSEFiletypeFilters, VARIANT * pvarRelationFilters, VARIANT * pvarReferanceFilters, VARIANT * pvarExportFileextensions, VARIANT * pvarListOfFiles );
__declspec(implementation_key(1157)) HRESULT SolidEdgeTCE::ExtractTranslatedFilesOfActiveDocument ( _bstr_t bstrEtractLocation, unsigned long dwExpandSelectionOptions, VARIANT * pvarSEFiletypeFilters, VARIANT * pvarRelationFilters, VARIANT * pvarReferanceFilters, VARIANT * pvarExportFileextensions, VARIANT * pvarListOfFiles );
__declspec(implementation_key(1158)) HRESULT SolidEdgeTCE::CloneDraftDocument ( VARIANT_BOOL vbOpenCloneDocument );
__declspec(implementation_key(1159)) HRESULT SolidEdgeTCE::GetMFKAttributesAndItemTypeForGivenFile ( _bstr_t bstrFilename, BSTR * bstrItemType, VARIANT * pvarMFKAttributeValues );
__declspec(implementation_key(1160)) HRESULT SolidEdgeTCE::SetPDMPropsAndUploadTranslatedFile ( _bstr_t bstrOldFileName, VARIANT * pvarListOfPropsForFileSaveAs, BSTR * bstrNewFileName );
__declspec(implementation_key(1161)) HRESULT SolidEdgeTCE::GetListOfFilesUnderItemRevision ( VARIANT * pvarMFKAttrInfo, _bstr_t bstrItemRev, _bstr_t bstrItemType, VARIANT * pvarSEFileListUnderItemRev, VARIANT * pvarAllFileListUnderItemRev );
__declspec(implementation_key(1162)) HRESULT SolidEdgeTCE::GetTCSaveAsTranslationMBDPrefValues ( BSTR * bRelation, BSTR * bDatasetType, BSTR * bNamedReference, BSTR * bStringToAppend, VARIANT_BOOL * bIncludeRevName );
__declspec(implementation_key(1163)) HRESULT SolidEdgeTCE::GetRequiredPDMProperties ( _bstr_t bstrFilename, VARIANT * pvarProperties, VARIANT * pvarPropertiesWithValues );
__declspec(implementation_key(1164)) HRESULT SolidEdgeTCE::GetActiveDocumentFilename ( BSTR * bstrFilename, BSTR * bstrDisplayname, BSTR * bstrReservedname );
__declspec(implementation_key(1165)) HRESULT SolidEdgeTCE::GetTeamcenterInformation ( _bstr_t bstrFilename, VARIANT * psaTCInfo );
__declspec(implementation_key(1166)) HRESULT SolidEdgeTCE::OnUndoCheckOutDocumentsEx ( SAFEARRAY * * psaCacheFiles, VARIANT_BOOL bIgnoreFileModifiedStatus );
__declspec(implementation_key(1167)) HRESULT SolidEdgeTCE::GetTCSaveAsTranslationPrefValues ( _bstr_t bstrExportType, BSTR * bRelation, BSTR * bDatasetType, BSTR * bNamedReference, BSTR * bStringToAppend, VARIANT_BOOL * bIncludeRevName );
__declspec(implementation_key(1168)) HRESULT SolidEdgeTCE::DownloadDocumentsFromServerWithOptionsUsingKeyPropertiesEx ( VARIANT * pvarMFKAttrInfo, _bstr_t bstrItemRev, _bstr_t bstrDataSetFileName, _bstr_t bstrRevisionRule, _bstr_t bstrVariantRule, _bstr_t bstrItemType, VARIANT_BOOL vbReadOnly, VARIANT_BOOL vbAllLevel, unsigned long dwDownloadOption, SAFEARRAY * * pvarListOfFiles );
__declspec(implementation_key(1169)) HRESULT SolidEdgeTCE::ValidateLogin_TCCS ( _bstr_t bstrUserName, _bstr_t bstrPassword, _bstr_t bstrGroup, _bstr_t bstrUserRole, _bstr_t bstrDBUrl, _bstr_t bstrDBDesc );
__declspec(implementation_key(1170)) HRESULT SolidEdgeTCE::GetTCSaveAsTranslationPrefValuesEx ( _bstr_t bstrExportType, BSTR * bRelation, BSTR * bDatasetType, BSTR * bNamedReference, BSTR * bStringToAppend, BSTR * bAutomaticVsManualTranslation, VARIANT_BOOL * bIncludeRevName );
__declspec(implementation_key(1171)) HRESULT SolidEdgeTCE::CheckInStdPartsToTeamcenter ( SAFEARRAY * * ppsaFileList, VARIANT_BOOL bOnlyUpload );
__declspec(implementation_key(1172)) HRESULT _ISolidEdgeTCEAuto::GetPDMCachePath ( BSTR * bStrCachePath );
__declspec(implementation_key(1173)) HRESULT _ISolidEdgeTCEAuto::CheckInDocumentsToTeamCenterServer ( SAFEARRAY * * ppsaFileList, VARIANT_BOOL bOnlyUpload );
__declspec(implementation_key(1174)) HRESULT _ISolidEdgeTCEAuto::CheckOutDocumentsFromTeamCenterServer ( _bstr_t bstrDirctFileItemId, _bstr_t bstrDirctFileItemRevId, VARIANT_BOOL bOnlyDownload, _bstr_t bstrFilename, enum DocumentDownloadLevel enumDownloadLevel );
__declspec(implementation_key(1175)) HRESULT _ISolidEdgeTCEAuto::GetDocumentUID ( _bstr_t bstrFilename, BSTR * bstrItemId, BSTR * bstrItemRev );
__declspec(implementation_key(1176)) HRESULT _ISolidEdgeTCEAuto::DoesTeamCenterFileExists ( _bstr_t bstrItemId, _bstr_t bstrItemRev, VARIANT_BOOL * bFileExists );
__declspec(implementation_key(1177)) HRESULT _ISolidEdgeTCEAuto::GetTeamCenterMode ( VARIANT_BOOL * bIsTeamCenterMode );
__declspec(implementation_key(1178)) HRESULT _ISolidEdgeTCEAuto::SetTeamCenterMode ( VARIANT_BOOL bMode );
__declspec(implementation_key(1179)) HRESULT _ISolidEdgeTCEAuto::ValidateLogin ( _bstr_t bstrUserName, _bstr_t bstrPassword, _bstr_t bstrGroup, _bstr_t bstrUserRole, _bstr_t bstrDBUrl );
__declspec(implementation_key(1180)) HRESULT _ISolidEdgeTCEAuto::AssignItemID ( _bstr_t bstrItemType, BSTR * bstrItemId, BSTR * bstrItemRev );
__declspec(implementation_key(1181)) HRESULT _ISolidEdgeTCEAuto::PutItemTypeAsCustomProp ( _bstr_t bstrFilename, _bstr_t bstrItemType );
__declspec(implementation_key(1182)) HRESULT _ISolidEdgeTCEAuto::GetDatasetNameFromCookie ( _bstr_t bstrFilename, BSTR * bstrDatasetName );
__declspec(implementation_key(1183)) HRESULT _ISolidEdgeTCEAuto::DeleteFilesFromCache ( SAFEARRAY * * psaCacheFiles );
__declspec(implementation_key(1184)) HRESULT _ISolidEdgeTCEAuto::ImportDocumentsToServer ( long lnumberOfDocumentsFoldersToImport, SAFEARRAY * * psalistOfFilesFoldersToImport, _bstr_t bstrUserName, _bstr_t bstrPassword, _bstr_t bstrGroup, _bstr_t bstrUserRole, _bstr_t bstrDBUrl, VARIANT_BOOL bImportAsPrecise, VARIANT_BOOL bPerformOnlyDryRun, VARIANT_BOOL bDisplayAlert, VARIANT_BOOL bIsFromATP, VARIANT_BOOL bIsOverwrite, VARIANT_BOOL brestart, VARIANT_BOOL bLinkTraversal, VARIANT_BOOL bIncludeSubFolders, BSTR * bstrFolderUID );
__declspec(implementation_key(1185)) HRESULT _ISolidEdgeTCEAuto::OnUndoCheckOutDocuments ( SAFEARRAY * * psaCacheFiles );
__declspec(implementation_key(1186)) HRESULT _ISolidEdgeTCEAuto::OnSynchronizeFile ( SAFEARRAY * * psaSynchFiles, enum SyncOption enumSyncOption );
__declspec(implementation_key(1187)) HRESULT _ISolidEdgeTCEAuto::GetOutOfDateDocuments ( VARIANT * pvarListOfOutOfDateDocuments );
__declspec(implementation_key(1188)) HRESULT _ISolidEdgeTCEAuto::GetUserLogMessages ( VARIANT * pvarUserLogMessages );
__declspec(implementation_key(1189)) HRESULT _ISolidEdgeTCEAuto::SaveAsToTeamCenter ( _bstr_t bstrItemId, _bstr_t bstrItemRev, _bstr_t bstrDataSetFileName, _bstr_t bstrRevisionRule, _bstr_t bstrFolderName, VARIANT * pvarListOldAndNewItemIDRevsFileNames );
__declspec(implementation_key(1190)) HRESULT _ISolidEdgeTCEAuto::ReviseToTeamCenter ( _bstr_t bstrItemId, _bstr_t bstrItemRev, _bstr_t bstrDataSetFileName, _bstr_t bstrRevisionRule, _bstr_t bstrFolderName, VARIANT * pvarListOldAndNewItemIDRevsFileNames );
__declspec(implementation_key(1191)) HRESULT _ISolidEdgeTCEAuto::OnGetWhereUsedForAutomation ( _bstr_t bstrItemId, _bstr_t bstrItemRev, _bstr_t bstrDataSetFileName, VARIANT * pvarListOfWhereUsedDocuments );
__declspec(implementation_key(1192)) HRESULT _ISolidEdgeTCEAuto::CreateNewProject ( _bstr_t bstrProjectName );
__declspec(implementation_key(1193)) HRESULT _ISolidEdgeTCEAuto::DeleteProject ( _bstr_t bstrProjectName );
__declspec(implementation_key(1194)) HRESULT _ISolidEdgeTCEAuto::DeleteAllProjects ( );
__declspec(implementation_key(1195)) HRESULT _ISolidEdgeTCEAuto::DownladDocumentsFromServerWithOptions ( _bstr_t bstrItemId, _bstr_t bstrItemRev, _bstr_t bstrDataSetFileName, _bstr_t bstrRevisionRule, _bstr_t bstrVariantRule, VARIANT_BOOL vbReadOnly, VARIANT_BOOL vbAllLevel, unsigned long dwDownloadOption, SAFEARRAY * * pvarListOfFiles );
__declspec(implementation_key(1196)) HRESULT _ISolidEdgeTCEAuto::GetListOfIndirectFilesForGivenFile ( _bstr_t bstrItemId, _bstr_t bstrItemRev, _bstr_t bstrDataSetFileName, _bstr_t bstrRevisionRule, _bstr_t bstrVariantRule, VARIANT * pvarListOfIndirectFiles );
__declspec(implementation_key(1197)) HRESULT _ISolidEdgeTCEAuto::GetMappedPropertiesForGivenFile ( _bstr_t bstrItemId, _bstr_t bstrItemRev, _bstr_t bstrDataSetFileName, VARIANT * pvarListOfProperties );
__declspec(implementation_key(1198)) HRESULT _ISolidEdgeTCEAuto::GetListOfFilesFromTeamcenterServer ( _bstr_t bstrDirctFileItemId, _bstr_t bstrDirctFileItemRevId, VARIANT * vFileNames, long * nFiles );
__declspec(implementation_key(1199)) HRESULT _ISolidEdgeTCEAuto::GetTALLogFileName ( BSTR * bstrLogFileName );
__declspec(implementation_key(1200)) HRESULT _ISolidEdgeTCEAuto::ValidateTcObjectModel ( _bstr_t bstrFilename, _bstr_t bstrOldItemID, _bstr_t bstrOldRev, VARIANT_BOOL * bIsTcModelCorrect, BSTR * bsrtCompResult, VARIANT * vRevisionRule, VARIANT * vValidateBOMOnly, long * nNoOfServerComponents );
__declspec(implementation_key(1201)) HRESULT _ISolidEdgeTCEAuto::GetBomStructure ( _bstr_t bstrItemId, _bstr_t bstrItemRevId, _bstr_t bstrRevisionRule, VARIANT_BOOL bDeepList, long * NoOfComponents, VARIANT * ListOfItemRevIds, VARIANT * ListOfFileSpecs );
__declspec(implementation_key(1202)) HRESULT _ISolidEdgeTCEAuto::GetItemRevBasedOnSEType ( enum TCESETypes nSEType, _bstr_t bstrUserName, VARIANT * ListOfItemRevIds );
__declspec(implementation_key(1203)) HRESULT _ISolidEdgeTCEAuto::GetItemTypesInfo ( BSTR * pbstrXML, BSTR * pbstrDefaultItemType );
__declspec(implementation_key(1204)) HRESULT _ISolidEdgeTCEAuto::GetSmartCodes ( VARIANT * pvarSmartCodesInfo );
__declspec(implementation_key(1205)) HRESULT _ISolidEdgeTCEAuto::UnGetSmartCodes ( SAFEARRAY * * ppsaUnGetInfo );
__declspec(implementation_key(1206)) HRESULT _ISolidEdgeTCEAuto::CheckInDocumentsToTeamCenterServerEx ( VARIANT * pvarFilesToBeCheckedInInfo, VARIANT * pvarArguments );
__declspec(implementation_key(1207)) HRESULT _ISolidEdgeTCEAuto::IsItemTypeSmartCodesConfigured ( _bstr_t bstrItemType, VARIANT_BOOL * pvbIsSmartCodesConfigured );
__declspec(implementation_key(1208)) HRESULT _ISolidEdgeTCEAuto::GetSEECOrTCPreferenceValues ( VARIANT * pvarPreferenceInfo );
__declspec(implementation_key(1209)) HRESULT _ISolidEdgeTCEAuto::UpdateStatusInformation ( SAFEARRAY * * psaCacheFiles );
__declspec(implementation_key(1210)) HRESULT _ISolidEdgeTCEAuto::GetProjectsForLoggedInUSer ( VARIANT * pvarListOfUserProjects, VARIANT * pvarListOfUserProjectUIDs );
__declspec(implementation_key(1211)) HRESULT _ISolidEdgeTCEAuto::GetProjectsForGivenItemIDs ( VARIANT * pvarListOfItemIDsAndProjects );
__declspec(implementation_key(1212)) HRESULT _ISolidEdgeTCEAuto::AddOrRemoveItemsToOrFromProjects ( VARIANT * pvarItemInfoToAddOrRemoveToProjects );
__declspec(implementation_key(1213)) HRESULT _ISolidEdgeTCEAuto::CheckBomStructure ( _bstr_t bstrItemId, _bstr_t bstrItemRevId, _bstr_t bstrRevisionRule, VARIANT_BOOL * bIsDuplicateBOMLineExists, VARIANT * ListOfDupliacteObjIDs );
__declspec(implementation_key(1214)) HRESULT _ISolidEdgeTCEAuto::AutoAssign ( VARIANT_BOOL vbAutoAssign );
__declspec(implementation_key(1215)) HRESULT _ISolidEdgeTCEAuto::GetMFKAttributesForGivenItemType ( _bstr_t bstrItemType, VARIANT * pvMFKAttributes );
__declspec(implementation_key(1216)) HRESULT _ISolidEdgeTCEAuto::SetPDMProperties ( _bstr_t bstrOldFileName, VARIANT * pvarListOfPropsForFileSaveAs, BSTR * bstrNewFileName );
__declspec(implementation_key(1217)) HRESULT _ISolidEdgeTCEAuto::GetCurrentUserName ( BSTR * bStrCurrentUser );
__declspec(implementation_key(1218)) HRESULT _ISolidEdgeTCEAuto::GetDocumentUIDEx ( _bstr_t bstrFilename, BSTR * bstrItemId, BSTR * bstrItemRev, BSTR * bstrItemUID, BSTR * bstrRevUID );
__declspec(implementation_key(1219)) HRESULT _ISolidEdgeTCEAuto::DoesTeamCenterFileExistsUsingKeyProperties ( _bstr_t bstrItemType, VARIANT * pvarMFKAttrInfo, _bstr_t bstrItemRev, VARIANT_BOOL * bFileExists );
__declspec(implementation_key(1220)) HRESULT _ISolidEdgeTCEAuto::CheckOutDocumentsFromTeamCenterServerUsingKeyProperties ( VARIANT * pvarMFKAttrInfo, _bstr_t bstrItemType, _bstr_t bstrDirctFileItemRevId, VARIANT_BOOL bOnlyDownload, _bstr_t bstrFilename, enum DocumentDownloadLevel enumDownloadLevel );
__declspec(implementation_key(1221)) HRESULT _ISolidEdgeTCEAuto::GetTeamcenterVersion ( BSTR * bstrMajorVersion, BSTR * bstrCompleteVersion );
__declspec(implementation_key(1222)) HRESULT _ISolidEdgeTCEAuto::GetItemIDAndRevisionPatterns ( _bstr_t bstrItemType, VARIANT * pvarItemIDPattern, VARIANT * pvarRevisionPattern );
__declspec(implementation_key(1223)) HRESULT _ISolidEdgeTCEAuto::AssignItemIDAndRevUsingPatterns ( _bstr_t bstrItemType, _bstr_t bstrItemIDPattern, _bstr_t bstrRevisionPattern, BSTR * pItemIDPattern, BSTR * pRevisionPattern );
__declspec(implementation_key(1224)) HRESULT _ISolidEdgeTCEAuto::GetItemTypesInfoEx ( _bstr_t bstrFilename, VARIANT * pvarItemTypeList );
__declspec(implementation_key(1225)) HRESULT _ISolidEdgeTCEAuto::MapMFKAttributtesToFileProperties ( _bstr_t bstrFilename, SAFEARRAY * * psaMFKAttributes, VARIANT * pvarPropertyInfo );
__declspec(implementation_key(1226)) HRESULT _ISolidEdgeTCEAuto::GetListOfFilesFromTeamcenterServerUsingKeyProperties ( VARIANT * pvarMFKAttrInfo, _bstr_t bstrDirctFileItemRevId, _bstr_t bstrItemType, VARIANT * vFileNames, long * nFiles );
__declspec(implementation_key(1227)) HRESULT _ISolidEdgeTCEAuto::GetBomStructureUsingKeyProperties ( VARIANT * pvarMFKAttrInfo, _bstr_t bstrItemRevId, _bstr_t bstrItemType, _bstr_t bstrRevisionRule, VARIANT_BOOL bDeepList, long * NoOfComponents, VARIANT * ListOfItemRevIds, VARIANT * ListOfFileSpecs );
__declspec(implementation_key(1228)) HRESULT _ISolidEdgeTCEAuto::CheckBomStructureUsingKeyProperties ( VARIANT * pvarMFKAttrInfo, _bstr_t bstrItemRevId, _bstr_t bstrItemType, _bstr_t bstrRevisionRule, VARIANT_BOOL * bIsDuplicateBOMLineExists, VARIANT * ListOfDupliacteObjIDs );
__declspec(implementation_key(1229)) HRESULT _ISolidEdgeTCEAuto::SaveAsToTeamCenterUsingKeyProperties ( VARIANT * pvarMFKAttrInfo, _bstr_t bstrItemRev, _bstr_t bstrItemType, _bstr_t bstrDataSetFileName, _bstr_t bstrRevisionRule, _bstr_t bstrFolderName, VARIANT * pvarListOldAndNewItemIDRevsFileNames );
__declspec(implementation_key(1230)) HRESULT _ISolidEdgeTCEAuto::ReviseToTeamCenterUsingKeyProperties ( VARIANT * pvarMFKAttrInfo, _bstr_t bstrItemRev, _bstr_t bstrItemType, _bstr_t bstrDataSetFileName, _bstr_t bstrRevisionRule, _bstr_t bstrFolderName, VARIANT * pvarListOldAndNewItemIDRevsFileNames );
__declspec(implementation_key(1231)) HRESULT _ISolidEdgeTCEAuto::GetListOfIndirectFilesForGivenFileUsingKeyProperties ( VARIANT * pvarMFKAttrInfo, _bstr_t bstrItemRev, _bstr_t bstrItemType, _bstr_t bstrDataSetFileName, _bstr_t bstrRevisionRule, VARIANT * pvarListOfIndirectFiles );
__declspec(implementation_key(1232)) HRESULT _ISolidEdgeTCEAuto::GetMappedPropertiesForGivenFileUsingKeyProperties ( VARIANT * pvarMFKAttrInfo, _bstr_t bstrItemRev, _bstr_t bstrItemType, _bstr_t bstrDataSetFileName, VARIANT * pvarListOfProperties );
__declspec(implementation_key(1233)) HRESULT _ISolidEdgeTCEAuto::ValidateTcObjectModelUsingKeyProperties ( _bstr_t bstrFilename, VARIANT * pvarMFKAttrInfo, _bstr_t bstrItemType, _bstr_t bstrOldRev, VARIANT_BOOL * bIsTcModelCorrect, BSTR * bsrtCompResult, VARIANT * vRevisionRule, VARIANT * vValidateBOMOnly, long * nNoOfServerComponents );
__declspec(implementation_key(1234)) HRESULT _ISolidEdgeTCEAuto::OnGetWhereUsedForAutomationUsingKeyProperties ( VARIANT * pvarMFKAttrInfo, _bstr_t bstrItemRev, _bstr_t bstrItemType, _bstr_t bstrDataSetFileName, VARIANT * pvarListOfWhereUsedDocuments );
__declspec(implementation_key(1235)) HRESULT _ISolidEdgeTCEAuto::DownloadDocumentsFromServerWithOptionsUsingKeyProperties ( VARIANT * pvarMFKAttrInfo, _bstr_t bstrItemRev, _bstr_t bstrDataSetFileName, _bstr_t bstrRevisionRule, _bstr_t bstrItemType, VARIANT_BOOL vbReadOnly, VARIANT_BOOL vbAllLevel, unsigned long dwDownloadOption, SAFEARRAY * * pvarListOfFiles );
__declspec(implementation_key(1236)) HRESULT _ISolidEdgeTCEAuto::ValidateKeyProperties ( VARIANT * pvarMFKAttrInfo, _bstr_t bstrRevID, _bstr_t bstrItemType, VARIANT * pvarListOfPropsVsStatus );
__declspec(implementation_key(1237)) HRESULT _ISolidEdgeTCEAuto::GetStorageNameForProperties ( _bstr_t bstrFilename, VARIANT * pvarListOfPropInfo );
__declspec(implementation_key(1238)) HRESULT _ISolidEdgeTCEAuto::GetErrorMessages ( VARIANT * pvarListOfErrorMsgs, VARIANT * pvarListOfWarningMsgs, VARIANT * pvarListOfInformationalMsgs );
__declspec(implementation_key(1239)) HRESULT _ISolidEdgeTCEAuto::GetAllRevisions ( VARIANT * pvarMFKAttributes, _bstr_t bstrItemType, VARIANT * pvarRevisionList );
__declspec(implementation_key(1240)) HRESULT _ISolidEdgeTCEAuto::CreateZipOfCache ( _bstr_t bstrSourceCachePath, _bstr_t bstrDestinationZipPath );
__declspec(implementation_key(1241)) HRESULT _ISolidEdgeTCEAuto::GetListOfWorkflows ( VARIANT * pvarMFKAttributes, _bstr_t bstrItemType, _bstr_t bstrItemRev, VARIANT_BOOL bGetFiltered, VARIANT * pVarWorkflows );
__declspec(implementation_key(1242)) HRESULT _ISolidEdgeTCEAuto::ExecuteWorkflow ( VARIANT * pvarMFKAttributes, _bstr_t bstrItemType, _bstr_t bstrItemRev, _bstr_t bstrprocessName, _bstr_t bstrProcessDesr, _bstr_t bstrTemplate, VARIANT * pVarOut );
__declspec(implementation_key(1243)) HRESULT _ISolidEdgeTCEAuto::GetActivePDMMode ( unsigned long * activePDM );
__declspec(implementation_key(1244)) HRESULT _ISolidEdgeTCEAuto::GetSolidEdgePreferencePath ( BSTR * lpSEPreferencePath );
__declspec(implementation_key(1245)) HRESULT _ISolidEdgeTCEAuto::SetSEECOptions ( enum SEECOptions enumSEECDialog, unsigned long * dwValue );
__declspec(implementation_key(1246)) HRESULT _ISolidEdgeTCEAuto::GetBOMProperties ( VARIANT * pvarMFKAttributes, _bstr_t bstrItemRevId, _bstr_t bstrItemType, _bstr_t bstrRevisionRule, long * NoOfComponents, VARIANT * FileOccProp );
__declspec(implementation_key(1247)) HRESULT _ISolidEdgeTCEAuto::PublishFamilyOfAssemblyMembers ( VARIANT * pvarMFKAttrInfo, _bstr_t bstrItemRev, _bstr_t bstrDataSetFileName, _bstr_t bstrRevisionRule, _bstr_t bstrItemType, SAFEARRAY * * psaMemberInfo, VARIANT * pvarListOfWhereUsedDocuments );
__declspec(implementation_key(1248)) HRESULT _ISolidEdgeTCEAuto::GetFamilyOfAssemblyMembers ( VARIANT * pvarMFKAttrInfo, _bstr_t bstrItemRev, _bstr_t bstrItemType, VARIANT * psaPublishedMemberInfo, VARIANT * psaUnpublishedMemberInfo );
__declspec(implementation_key(1249)) HRESULT _ISolidEdgeTCEAuto::GetWhereUsedInfoForPublishedFamilyOfAssembly ( VARIANT * pvarMFKAttrInfo, _bstr_t bstrItemRev, _bstr_t bstrDataSetFileName, _bstr_t bstrRevisionRule, _bstr_t bstrItemType, VARIANT * pvarListOfWhereUsedDocuments );
__declspec(implementation_key(1250)) HRESULT _ISolidEdgeTCEAuto::GetWhereUsedInfo ( VARIANT * pvarMFKAttrInfo, _bstr_t bstrItemRev, _bstr_t bstrItemType, _bstr_t bstrDataSetFileName, VARIANT * pvarListFilesWithMFKAttributes );
__declspec(implementation_key(1251)) HRESULT _ISolidEdgeTCEAuto::PublishMembersOfActiveFamilyOfAssemblyDocument ( SAFEARRAY * * psaMemberInfo, VARIANT * pvarListOfWhereUsedDocuments );
__declspec(implementation_key(1252)) HRESULT _ISolidEdgeTCEAuto::GetWhereUsedInfoForPublishedActiveFamilyOfAssemblyDocument ( VARIANT * pvarListOfWhereUsedDocuments );
__declspec(implementation_key(1253)) HRESULT _ISolidEdgeTCEAuto::GetFamilyOfAssemblyMembersOfActiveDocument ( VARIANT * psaPublishedMemberInfo, VARIANT * psaUnpublishedMemberInfo );
__declspec(implementation_key(1254)) HRESULT _ISolidEdgeTCEAuto::GetTeamcenterDefaultItemTypePreference ( _bstr_t bstrFilename, BSTR * bstrDefaultItemType );
__declspec(implementation_key(1255)) HRESULT _ISolidEdgeTCEAuto::CreateBOMAndRelations ( VARIANT * pvarContainerInfo, SAFEARRAY * * psaComponentsInfo, VARIANT_BOOL bUploadFile, VARIANT_BOOL bCreatePreciseBOM, _bstr_t bstrRevRule, VARIANT_BOOL * bHasOverrideBody );
__declspec(implementation_key(1256)) HRESULT _ISolidEdgeTCEAuto::UploadModelViewsOfActiveAssemblyDocument ( );
__declspec(implementation_key(1257)) HRESULT _ISolidEdgeTCEAuto::ExtractTranslatedFiles ( VARIANT * pvarMFKAttrInfo, _bstr_t bstrItemRev, _bstr_t bstrRevisionRule, _bstr_t bstrItemType, _bstr_t bstrEtractLocation, _bstr_t bstrDataSetFileName, unsigned long dwExpandSelectionOptions, VARIANT * pvarSEFiletypeFilters, VARIANT * pvarRelationFilters, VARIANT * pvarReferanceFilters, VARIANT * pvarExportFileextensions, VARIANT * pvarListOfFiles );
__declspec(implementation_key(1258)) HRESULT _ISolidEdgeTCEAuto::ExtractTranslatedFilesOfActiveDocument ( _bstr_t bstrEtractLocation, unsigned long dwExpandSelectionOptions, VARIANT * pvarSEFiletypeFilters, VARIANT * pvarRelationFilters, VARIANT * pvarReferanceFilters, VARIANT * pvarExportFileextensions, VARIANT * pvarListOfFiles );
__declspec(implementation_key(1259)) HRESULT _ISolidEdgeTCEAuto::CloneDraftDocument ( VARIANT_BOOL vbOpenCloneDocument );
__declspec(implementation_key(1260)) HRESULT _ISolidEdgeTCEAuto::GetMFKAttributesAndItemTypeForGivenFile ( _bstr_t bstrFilename, BSTR * bstrItemType, VARIANT * pvarMFKAttributeValues );
__declspec(implementation_key(1261)) HRESULT _ISolidEdgeTCEAuto::SetPDMPropsAndUploadTranslatedFile ( _bstr_t bstrOldFileName, VARIANT * pvarListOfPropsForFileSaveAs, BSTR * bstrNewFileName );
__declspec(implementation_key(1262)) HRESULT _ISolidEdgeTCEAuto::GetListOfFilesUnderItemRevision ( VARIANT * pvarMFKAttrInfo, _bstr_t bstrItemRev, _bstr_t bstrItemType, VARIANT * pvarSEFileListUnderItemRev, VARIANT * pvarAllFileListUnderItemRev );
__declspec(implementation_key(1263)) HRESULT _ISolidEdgeTCEAuto::GetTCSaveAsTranslationMBDPrefValues ( BSTR * bRelation, BSTR * bDatasetType, BSTR * bNamedReference, BSTR * bStringToAppend, VARIANT_BOOL * bIncludeRevName );
__declspec(implementation_key(1264)) HRESULT _ISolidEdgeTCEAuto::GetRequiredPDMProperties ( _bstr_t bstrFilename, VARIANT * pvarProperties, VARIANT * pvarPropertiesWithValues );
__declspec(implementation_key(1265)) HRESULT _ISolidEdgeTCEAuto::GetActiveDocumentFilename ( BSTR * bstrFilename, BSTR * bstrDisplayname, BSTR * bstrReservedname );
__declspec(implementation_key(1266)) HRESULT _ISolidEdgeTCEAuto::GetTeamcenterInformation ( _bstr_t bstrFilename, VARIANT * psaTCInfo );
__declspec(implementation_key(1267)) HRESULT _ISolidEdgeTCEAuto::OnUndoCheckOutDocumentsEx ( SAFEARRAY * * psaCacheFiles, VARIANT_BOOL bIgnoreFileModifiedStatus );
__declspec(implementation_key(1268)) HRESULT _ISolidEdgeTCEAuto::GetTCSaveAsTranslationPrefValues ( _bstr_t bstrExportType, BSTR * bRelation, BSTR * bDatasetType, BSTR * bNamedReference, BSTR * bStringToAppend, VARIANT_BOOL * bIncludeRevName );
__declspec(implementation_key(1269)) HRESULT _ISolidEdgeTCEAuto::DownloadDocumentsFromServerWithOptionsUsingKeyPropertiesEx ( VARIANT * pvarMFKAttrInfo, _bstr_t bstrItemRev, _bstr_t bstrDataSetFileName, _bstr_t bstrRevisionRule, _bstr_t bstrVariantRule, _bstr_t bstrItemType, VARIANT_BOOL vbReadOnly, VARIANT_BOOL vbAllLevel, unsigned long dwDownloadOption, SAFEARRAY * * pvarListOfFiles );
__declspec(implementation_key(1270)) HRESULT _ISolidEdgeTCEAuto::ValidateLogin_TCCS ( _bstr_t bstrUserName, _bstr_t bstrPassword, _bstr_t bstrGroup, _bstr_t bstrUserRole, _bstr_t bstrDBUrl, _bstr_t bstrDBDesc );
__declspec(implementation_key(1271)) HRESULT _ISolidEdgeTCEAuto::GetTCSaveAsTranslationPrefValuesEx ( _bstr_t bstrExportType, BSTR * bRelation, BSTR * bDatasetType, BSTR * bNamedReference, BSTR * bStringToAppend, BSTR * bAutomaticVsManualTranslation, VARIANT_BOOL * bIncludeRevName );
__declspec(implementation_key(1272)) HRESULT _ISolidEdgeTCEAuto::CheckInStdPartsToTeamcenter ( SAFEARRAY * * ppsaFileList, VARIANT_BOOL bOnlyUpload );
__declspec(implementation_key(1273)) HRESULT SolidEdgeInsightXT::GetPDMCachePath ( BSTR * bStrCachePath );
__declspec(implementation_key(1274)) HRESULT SolidEdgeInsightXT::CheckInDocumentsToInsightXTServer ( SAFEARRAY * * ppsaFileList, VARIANT_BOOL bOnlyUpload, _bstr_t bstrUrl );
__declspec(implementation_key(1275)) HRESULT SolidEdgeInsightXT::CheckOutDocumentsFromInsightXTServer ( _bstr_t bstrDirctFileItemId, _bstr_t bstrDirctFileItemRevId, VARIANT_BOOL bOnlyDownload, _bstr_t bstrFilename, enum DocumentDownloadLevel enumDownloadLevel );
__declspec(implementation_key(1276)) int SolidEdgeInsightXT::IsInsightXTFileCheckedOut ( _bstr_t bstrFilename );
__declspec(implementation_key(1277)) HRESULT SolidEdgeInsightXT::GetDocumentUID ( _bstr_t bstrFilename, BSTR * bstrItemId, BSTR * bstrItemRev );
__declspec(implementation_key(1278)) HRESULT SolidEdgeInsightXT::DoesInsightXTFileExists ( _bstr_t bstrItemId, _bstr_t bstrItemRev, VARIANT_BOOL * bFileExists );
__declspec(implementation_key(1279)) HRESULT SolidEdgeInsightXT::GetInsightXTMode ( VARIANT_BOOL * bIsInsightXTMode );
__declspec(implementation_key(1280)) HRESULT SolidEdgeInsightXT::SetInsightXTMode ( VARIANT_BOOL bMode );
__declspec(implementation_key(1281)) HRESULT SolidEdgeInsightXT::ValidateLogin ( _bstr_t bstrUserName, _bstr_t bstrPassword, _bstr_t bstrGroup, _bstr_t bstrUserRole, _bstr_t bstrDBUrl );
__declspec(implementation_key(1282)) HRESULT SolidEdgeInsightXT::AssignItemID ( _bstr_t bstrItemType, BSTR * bstrItemId, BSTR * bstrItemRev );
__declspec(implementation_key(1283)) HRESULT SolidEdgeInsightXT::SESP_GetItemAndRevisionNo ( _bstr_t bstrItemContentType, _bstr_t bstrItemRevContentType, BSTR * bstrPartno, BSTR * bstrPartRevno );
__declspec(implementation_key(1284)) HRESULT SolidEdgeInsightXT::PutItemTypeAsCustomProp ( _bstr_t bstrFilename, _bstr_t bstrItemType );
__declspec(implementation_key(1285)) HRESULT SolidEdgeInsightXT::GetDatasetNameFromCookie ( _bstr_t bstrFilename, BSTR * bstrDatasetName );
__declspec(implementation_key(1286)) HRESULT SolidEdgeInsightXT::DeleteFilesFromCache ( SAFEARRAY * * psaCacheFiles );
__declspec(implementation_key(1287)) HRESULT SolidEdgeInsightXT::ImportDocumentsToServer ( long lnumberOfDocumentsFoldersToImport, SAFEARRAY * * psalistOfFilesFoldersToImport, _bstr_t bstrUserName, _bstr_t bstrPassword, _bstr_t bstrGroup, _bstr_t bstrUserRole, _bstr_t bstrDBUrl, VARIANT_BOOL bImportAsPrecise, VARIANT_BOOL bPerformOnlyDryRun, VARIANT_BOOL bDisplayAlert, VARIANT_BOOL bIsFromATP, VARIANT_BOOL bIsOverwrite, VARIANT_BOOL brestart, VARIANT_BOOL bLinkTraversal, VARIANT_BOOL bIncludeSubFolders, BSTR * bstrFolderUID );
__declspec(implementation_key(1288)) HRESULT SolidEdgeInsightXT::OnUndoCheckOutDocuments ( SAFEARRAY * * psaCacheFiles );
__declspec(implementation_key(1289)) HRESULT SolidEdgeInsightXT::OnSynchronizeFile ( SAFEARRAY * * psaSynchFiles, enum SyncOption enumSyncOption );
__declspec(implementation_key(1290)) HRESULT SolidEdgeInsightXT::GetOutOfDateDocuments ( VARIANT * pvarListOfOutOfDateDocuments );
__declspec(implementation_key(1291)) HRESULT SolidEdgeInsightXT::GetUserLogMessages ( VARIANT * pvarUserLogMessages );
__declspec(implementation_key(1292)) HRESULT SolidEdgeInsightXT::SaveAsToInsightXT ( _bstr_t bstrItemId, _bstr_t bstrItemRev, _bstr_t bstrDataSetFileName, _bstr_t bstrRevisionRule, _bstr_t bstrFolderName, VARIANT * pvarListOldAndNewItemIDRevsFileNames );
__declspec(implementation_key(1293)) HRESULT SolidEdgeInsightXT::ReviseToInsightXT ( _bstr_t bstrItemId, _bstr_t bstrItemRev, _bstr_t bstrDataSetFileName, _bstr_t bstrRevisionRule, _bstr_t bstrFolderName, VARIANT * pvarListOldAndNewItemIDRevsFileNames );
__declspec(implementation_key(1294)) HRESULT SolidEdgeInsightXT::OnGetWhereUsedForAutomation ( _bstr_t bstrItemId, _bstr_t bstrItemRev, _bstr_t bstrDataSetFileName, VARIANT * pvarListOfWhereUsedDocuments );
__declspec(implementation_key(1295)) HRESULT SolidEdgeInsightXT::CreateNewProject ( _bstr_t bstrProjectName );
__declspec(implementation_key(1296)) HRESULT SolidEdgeInsightXT::DeleteProject ( _bstr_t bstrProjectName );
__declspec(implementation_key(1297)) HRESULT SolidEdgeInsightXT::DeleteAllProjects ( );
__declspec(implementation_key(1298)) HRESULT SolidEdgeInsightXT::DownladDocumentsFromServerWithOptions ( _bstr_t bstrItemId, _bstr_t bstrItemRev, _bstr_t bstrDataSetFileName, _bstr_t bstrRevisionRule, _bstr_t bstrVariantRule, VARIANT_BOOL vbReadOnly, VARIANT_BOOL vbAllLevel, unsigned long dwDownloadOption, SAFEARRAY * * pvarListOfFiles );
__declspec(implementation_key(1299)) HRESULT SolidEdgeInsightXT::GetListOfIndirectFilesForGivenFile ( _bstr_t bstrItemId, _bstr_t bstrItemRev, _bstr_t bstrDataSetFileName, _bstr_t bstrRevisionRule, _bstr_t bstrVariantRule, VARIANT * pvarListOfIndirectFiles );
__declspec(implementation_key(1300)) HRESULT SolidEdgeInsightXT::GetMappedPropertiesForGivenFile ( _bstr_t bstrItemId, _bstr_t bstrItemRev, _bstr_t bstrDataSetFileName, VARIANT * pvarListOfProperties );
__declspec(implementation_key(1301)) HRESULT SolidEdgeInsightXT::GetListOfFilesFromInsightXTServer ( _bstr_t bstrDirctFileItemId, _bstr_t bstrDirctFileItemRevId, VARIANT * vFileNames, long * nFiles );
__declspec(implementation_key(1302)) HRESULT SolidEdgeInsightXT::GetTALLogFileName ( BSTR * bstrLogFileName );
__declspec(implementation_key(1303)) HRESULT SolidEdgeInsightXT::ValidateTcObjectModel ( _bstr_t bstrFilename, _bstr_t bstrOldItemID, _bstr_t bstrOldRev, VARIANT_BOOL * bIsTcModelCorrect, BSTR * bsrtCompResult, VARIANT * vRevisionRule, VARIANT * vValidateBOMOnly, long * nNoOfServerComponents );
__declspec(implementation_key(1304)) HRESULT SolidEdgeInsightXT::GetBomStructure ( _bstr_t bstrItemId, _bstr_t bstrItemRevId, _bstr_t bstrRevisionRule, VARIANT_BOOL bDeepList, long * NoOfComponents, VARIANT * ListOfItemRevIds, VARIANT * ListOfFileSpecs );
__declspec(implementation_key(1305)) HRESULT SolidEdgeInsightXT::GetItemRevBasedOnSEType ( enum TCESETypes nSEType, _bstr_t bstrUserName, VARIANT * ListOfItemRevIds );
__declspec(implementation_key(1306)) HRESULT SolidEdgeInsightXT::GetItemTypesInfo ( BSTR * pbstrXML, BSTR * pbstrDefaultItemType );
__declspec(implementation_key(1307)) HRESULT SolidEdgeInsightXT::GetSmartCodes ( VARIANT * pvarSmartCodesInfo );
__declspec(implementation_key(1308)) HRESULT SolidEdgeInsightXT::UnGetSmartCodes ( SAFEARRAY * * ppsaUnGetInfo );
__declspec(implementation_key(1309)) HRESULT SolidEdgeInsightXT::CheckInDocumentsToInsightXTServerEx ( VARIANT * pvarFilesToBeCheckedInInfo, VARIANT * pvarArguments );
__declspec(implementation_key(1310)) HRESULT SolidEdgeInsightXT::IsItemTypeSmartCodesConfigured ( _bstr_t bstrItemType, VARIANT_BOOL * pvbIsSmartCodesConfigured );
__declspec(implementation_key(1311)) HRESULT SolidEdgeInsightXT::GetInsightXTOrTCPreferenceValues ( VARIANT * pvarPreferenceInfo );
__declspec(implementation_key(1312)) HRESULT SolidEdgeInsightXT::UpdateStatusInformation ( SAFEARRAY * * psaCacheFiles );
__declspec(implementation_key(1313)) HRESULT SolidEdgeInsightXT::GetProjectsForLoggedInUSer ( VARIANT * pvarListOfUserProjects, VARIANT * pvarListOfUserProjectUIDs );
__declspec(implementation_key(1314)) HRESULT SolidEdgeInsightXT::GetProjectsForGivenItemIDs ( VARIANT * pvarListOfItemIDsAndProjects );
__declspec(implementation_key(1315)) HRESULT SolidEdgeInsightXT::AddOrRemoveItemsToOrFromProjects ( VARIANT * pvarItemInfoToAddOrRemoveToProjects );
__declspec(implementation_key(1316)) HRESULT SolidEdgeInsightXT::CheckBomStructure ( _bstr_t bstrItemId, _bstr_t bstrItemRevId, _bstr_t bstrRevisionRule, VARIANT_BOOL * bIsDuplicateBOMLineExists, VARIANT * ListOfDupliacteObjIDs );
__declspec(implementation_key(1317)) HRESULT SolidEdgeInsightXT::GetItemContentTypesSupportingRevisioning ( VARIANT * pvarListOfContentTypes );
__declspec(implementation_key(1318)) HRESULT SolidEdgeInsightXT::ProcessUpdateDrawing ( VARIANT_BOOL * bTerminateProcess );
__declspec(implementation_key(1319)) HRESULT SolidEdgeInsightXT::SESPUpdateWFCallouts ( VARIANT * plistItemAndRevId, VARIANT * pListOldAndNewPropName, VARIANT * ListOfFailedDrafts, VARIANT_BOOL * bTerminateProcess );
__declspec(implementation_key(1320)) HRESULT SolidEdgeInsightXT::SESPGetActiveUrl ( VARIANT * activeUrl );
__declspec(implementation_key(1321)) HRESULT SolidEdgeInsightXT::IsInsightXTLicenseAvailable ( VARIANT_BOOL * bIsInsightXTLicenseAvailable );
__declspec(implementation_key(1322)) HRESULT SolidEdgeInsightXT::PutContentTypeIntoStorage ( _bstr_t bstrFilename, _bstr_t bstrItemType, _bstr_t bItemRevType, _bstr_t bContentType );
__declspec(implementation_key(1323)) HRESULT _ISolidEdgeInsightXTAuto::GetPDMCachePath ( BSTR * bStrCachePath );
__declspec(implementation_key(1324)) HRESULT _ISolidEdgeInsightXTAuto::CheckInDocumentsToInsightXTServer ( SAFEARRAY * * ppsaFileList, VARIANT_BOOL bOnlyUpload, _bstr_t bstrUrl );
__declspec(implementation_key(1325)) HRESULT _ISolidEdgeInsightXTAuto::CheckOutDocumentsFromInsightXTServer ( _bstr_t bstrDirctFileItemId, _bstr_t bstrDirctFileItemRevId, VARIANT_BOOL bOnlyDownload, _bstr_t bstrFilename, enum DocumentDownloadLevel enumDownloadLevel );
__declspec(implementation_key(1326)) HRESULT _ISolidEdgeInsightXTAuto::GetDocumentUID ( _bstr_t bstrFilename, BSTR * bstrItemId, BSTR * bstrItemRev );
__declspec(implementation_key(1327)) HRESULT _ISolidEdgeInsightXTAuto::DoesInsightXTFileExists ( _bstr_t bstrItemId, _bstr_t bstrItemRev, VARIANT_BOOL * bFileExists );
__declspec(implementation_key(1328)) HRESULT _ISolidEdgeInsightXTAuto::GetInsightXTMode ( VARIANT_BOOL * bIsInsightXTMode );
__declspec(implementation_key(1329)) HRESULT _ISolidEdgeInsightXTAuto::SetInsightXTMode ( VARIANT_BOOL bMode );
__declspec(implementation_key(1330)) HRESULT _ISolidEdgeInsightXTAuto::ValidateLogin ( _bstr_t bstrUserName, _bstr_t bstrPassword, _bstr_t bstrGroup, _bstr_t bstrUserRole, _bstr_t bstrDBUrl );
__declspec(implementation_key(1331)) HRESULT _ISolidEdgeInsightXTAuto::AssignItemID ( _bstr_t bstrItemType, BSTR * bstrItemId, BSTR * bstrItemRev );
__declspec(implementation_key(1332)) HRESULT _ISolidEdgeInsightXTAuto::SESP_GetItemAndRevisionNo ( _bstr_t bstrItemContentType, _bstr_t bstrItemRevContentType, BSTR * bstrPartno, BSTR * bstrPartRevno );
__declspec(implementation_key(1333)) HRESULT _ISolidEdgeInsightXTAuto::PutItemTypeAsCustomProp ( _bstr_t bstrFilename, _bstr_t bstrItemType );
__declspec(implementation_key(1334)) HRESULT _ISolidEdgeInsightXTAuto::GetDatasetNameFromCookie ( _bstr_t bstrFilename, BSTR * bstrDatasetName );
__declspec(implementation_key(1335)) HRESULT _ISolidEdgeInsightXTAuto::DeleteFilesFromCache ( SAFEARRAY * * psaCacheFiles );
__declspec(implementation_key(1336)) HRESULT _ISolidEdgeInsightXTAuto::ImportDocumentsToServer ( long lnumberOfDocumentsFoldersToImport, SAFEARRAY * * psalistOfFilesFoldersToImport, _bstr_t bstrUserName, _bstr_t bstrPassword, _bstr_t bstrGroup, _bstr_t bstrUserRole, _bstr_t bstrDBUrl, VARIANT_BOOL bImportAsPrecise, VARIANT_BOOL bPerformOnlyDryRun, VARIANT_BOOL bDisplayAlert, VARIANT_BOOL bIsFromATP, VARIANT_BOOL bIsOverwrite, VARIANT_BOOL brestart, VARIANT_BOOL bLinkTraversal, VARIANT_BOOL bIncludeSubFolders, BSTR * bstrFolderUID );
__declspec(implementation_key(1337)) HRESULT _ISolidEdgeInsightXTAuto::OnUndoCheckOutDocuments ( SAFEARRAY * * psaCacheFiles );
__declspec(implementation_key(1338)) HRESULT _ISolidEdgeInsightXTAuto::OnSynchronizeFile ( SAFEARRAY * * psaSynchFiles, enum SyncOption enumSyncOption );
__declspec(implementation_key(1339)) HRESULT _ISolidEdgeInsightXTAuto::GetOutOfDateDocuments ( VARIANT * pvarListOfOutOfDateDocuments );
__declspec(implementation_key(1340)) HRESULT _ISolidEdgeInsightXTAuto::GetUserLogMessages ( VARIANT * pvarUserLogMessages );
__declspec(implementation_key(1341)) HRESULT _ISolidEdgeInsightXTAuto::SaveAsToInsightXT ( _bstr_t bstrItemId, _bstr_t bstrItemRev, _bstr_t bstrDataSetFileName, _bstr_t bstrRevisionRule, _bstr_t bstrFolderName, VARIANT * pvarListOldAndNewItemIDRevsFileNames );
__declspec(implementation_key(1342)) HRESULT _ISolidEdgeInsightXTAuto::ReviseToInsightXT ( _bstr_t bstrItemId, _bstr_t bstrItemRev, _bstr_t bstrDataSetFileName, _bstr_t bstrRevisionRule, _bstr_t bstrFolderName, VARIANT * pvarListOldAndNewItemIDRevsFileNames );
__declspec(implementation_key(1343)) HRESULT _ISolidEdgeInsightXTAuto::OnGetWhereUsedForAutomation ( _bstr_t bstrItemId, _bstr_t bstrItemRev, _bstr_t bstrDataSetFileName, VARIANT * pvarListOfWhereUsedDocuments );
__declspec(implementation_key(1344)) HRESULT _ISolidEdgeInsightXTAuto::CreateNewProject ( _bstr_t bstrProjectName );
__declspec(implementation_key(1345)) HRESULT _ISolidEdgeInsightXTAuto::DeleteProject ( _bstr_t bstrProjectName );
__declspec(implementation_key(1346)) HRESULT _ISolidEdgeInsightXTAuto::DeleteAllProjects ( );
__declspec(implementation_key(1347)) HRESULT _ISolidEdgeInsightXTAuto::DownladDocumentsFromServerWithOptions ( _bstr_t bstrItemId, _bstr_t bstrItemRev, _bstr_t bstrDataSetFileName, _bstr_t bstrRevisionRule, _bstr_t bstrVariantRule, VARIANT_BOOL vbReadOnly, VARIANT_BOOL vbAllLevel, unsigned long dwDownloadOption, SAFEARRAY * * pvarListOfFiles );
__declspec(implementation_key(1348)) HRESULT _ISolidEdgeInsightXTAuto::GetListOfIndirectFilesForGivenFile ( _bstr_t bstrItemId, _bstr_t bstrItemRev, _bstr_t bstrDataSetFileName, _bstr_t bstrRevisionRule, _bstr_t bstrVariantRule, VARIANT * pvarListOfIndirectFiles );
__declspec(implementation_key(1349)) HRESULT _ISolidEdgeInsightXTAuto::GetMappedPropertiesForGivenFile ( _bstr_t bstrItemId, _bstr_t bstrItemRev, _bstr_t bstrDataSetFileName, VARIANT * pvarListOfProperties );
__declspec(implementation_key(1350)) HRESULT _ISolidEdgeInsightXTAuto::GetListOfFilesFromInsightXTServer ( _bstr_t bstrDirctFileItemId, _bstr_t bstrDirctFileItemRevId, VARIANT * vFileNames, long * nFiles );
__declspec(implementation_key(1351)) HRESULT _ISolidEdgeInsightXTAuto::GetTALLogFileName ( BSTR * bstrLogFileName );
__declspec(implementation_key(1352)) HRESULT _ISolidEdgeInsightXTAuto::ValidateTcObjectModel ( _bstr_t bstrFilename, _bstr_t bstrOldItemID, _bstr_t bstrOldRev, VARIANT_BOOL * bIsTcModelCorrect, BSTR * bsrtCompResult, VARIANT * vRevisionRule, VARIANT * vValidateBOMOnly, long * nNoOfServerComponents );
__declspec(implementation_key(1353)) HRESULT _ISolidEdgeInsightXTAuto::GetBomStructure ( _bstr_t bstrItemId, _bstr_t bstrItemRevId, _bstr_t bstrRevisionRule, VARIANT_BOOL bDeepList, long * NoOfComponents, VARIANT * ListOfItemRevIds, VARIANT * ListOfFileSpecs );
__declspec(implementation_key(1354)) HRESULT _ISolidEdgeInsightXTAuto::GetItemRevBasedOnSEType ( enum TCESETypes nSEType, _bstr_t bstrUserName, VARIANT * ListOfItemRevIds );
__declspec(implementation_key(1355)) HRESULT _ISolidEdgeInsightXTAuto::GetItemTypesInfo ( BSTR * pbstrXML, BSTR * pbstrDefaultItemType );
__declspec(implementation_key(1356)) HRESULT _ISolidEdgeInsightXTAuto::GetSmartCodes ( VARIANT * pvarSmartCodesInfo );
__declspec(implementation_key(1357)) HRESULT _ISolidEdgeInsightXTAuto::UnGetSmartCodes ( SAFEARRAY * * ppsaUnGetInfo );
__declspec(implementation_key(1358)) HRESULT _ISolidEdgeInsightXTAuto::CheckInDocumentsToInsightXTServerEx ( VARIANT * pvarFilesToBeCheckedInInfo, VARIANT * pvarArguments );
__declspec(implementation_key(1359)) HRESULT _ISolidEdgeInsightXTAuto::IsItemTypeSmartCodesConfigured ( _bstr_t bstrItemType, VARIANT_BOOL * pvbIsSmartCodesConfigured );
__declspec(implementation_key(1360)) HRESULT _ISolidEdgeInsightXTAuto::GetInsightXTOrTCPreferenceValues ( VARIANT * pvarPreferenceInfo );
__declspec(implementation_key(1361)) HRESULT _ISolidEdgeInsightXTAuto::UpdateStatusInformation ( SAFEARRAY * * psaCacheFiles );
__declspec(implementation_key(1362)) HRESULT _ISolidEdgeInsightXTAuto::GetProjectsForLoggedInUSer ( VARIANT * pvarListOfUserProjects, VARIANT * pvarListOfUserProjectUIDs );
__declspec(implementation_key(1363)) HRESULT _ISolidEdgeInsightXTAuto::GetProjectsForGivenItemIDs ( VARIANT * pvarListOfItemIDsAndProjects );
__declspec(implementation_key(1364)) HRESULT _ISolidEdgeInsightXTAuto::AddOrRemoveItemsToOrFromProjects ( VARIANT * pvarItemInfoToAddOrRemoveToProjects );
__declspec(implementation_key(1365)) HRESULT _ISolidEdgeInsightXTAuto::CheckBomStructure ( _bstr_t bstrItemId, _bstr_t bstrItemRevId, _bstr_t bstrRevisionRule, VARIANT_BOOL * bIsDuplicateBOMLineExists, VARIANT * ListOfDupliacteObjIDs );
__declspec(implementation_key(1366)) HRESULT _ISolidEdgeInsightXTAuto::GetItemContentTypesSupportingRevisioning ( VARIANT * pvarListOfContentTypes );
__declspec(implementation_key(1367)) HRESULT _ISolidEdgeInsightXTAuto::ProcessUpdateDrawing ( VARIANT_BOOL * bTerminateProcess );
__declspec(implementation_key(1368)) HRESULT _ISolidEdgeInsightXTAuto::SESPUpdateWFCallouts ( VARIANT * plistItemAndRevId, VARIANT * pListOldAndNewPropName, VARIANT * ListOfFailedDrafts, VARIANT_BOOL * bTerminateProcess );
__declspec(implementation_key(1369)) HRESULT _ISolidEdgeInsightXTAuto::SESPGetActiveUrl ( VARIANT * activeUrl );
__declspec(implementation_key(1370)) HRESULT _ISolidEdgeInsightXTAuto::IsInsightXTLicenseAvailable ( VARIANT_BOOL * bIsInsightXTLicenseAvailable );
__declspec(implementation_key(1371)) HRESULT _ISolidEdgeInsightXTAuto::PutContentTypeIntoStorage ( _bstr_t bstrFilename, _bstr_t bstrItemType, _bstr_t bItemRevType, _bstr_t bContentType );
__declspec(implementation_key(1372)) HRESULT ISEECEvents::SEEC_IsPreCPDEventSupported ( VARIANT_BOOL * pvbPreCPDEventSupported );
__declspec(implementation_key(1373)) HRESULT ISEECEvents::SEEC_BeforeCPDDisplay ( IDispatch * pCPDInitializer, enum eCPDMode eCPDMode );
__declspec(implementation_key(1374)) HRESULT ISEECEvents::PDM_OnFileOpenUI ( BSTR * bstrFilename );
__declspec(implementation_key(1375)) HRESULT ISESPEvents::SESP_IsPreCPDEventSupported ( VARIANT_BOOL * pvbPreCPDEventSupported );
__declspec(implementation_key(1376)) HRESULT ISESPEvents::SESP_BeforeCPDDisplay ( IDispatch * pCPDInitializer, enum eCPDMode eCPDMode );
__declspec(implementation_key(1377)) HRESULT ISESPEvents::SESPPDM_OnFileOpenUI ( BSTR * bstrFilename );
__declspec(implementation_key(1378)) HRESULT IBiDMEvents::BiDM_IsPreCPDEventSupported ( VARIANT_BOOL * pvbPreCPDEventSupported );
__declspec(implementation_key(1379)) HRESULT IBiDMEvents::BiDM_BeforeCPDDisplay ( IDispatch * pCPDInitializer, enum eCPDMode eCPDMode );
__declspec(implementation_key(1380)) ApplicationPtr Customization::GetApplication ( );
__declspec(implementation_key(1381)) ApplicationPtr Customization::GetParent ( );
__declspec(implementation_key(1382)) RibbonBarThemesPtr Customization::GetRibbonBarThemes ( );
__declspec(implementation_key(1383)) RadialMenuPtr Customization::GetRadialMenu ( );
__declspec(implementation_key(1384)) SwitchWindowCustPtr Customization::GetSwitchWindowCust ( );
__declspec(implementation_key(1385)) HRESULT Customization::BeginCustomization ( );
__declspec(implementation_key(1386)) HRESULT Customization::EndCustomization ( );
__declspec(implementation_key(1387)) ApplicationPtr RibbonBarThemes::GetApplication ( );
__declspec(implementation_key(1388)) CustomizationPtr RibbonBarThemes::GetParent ( );
__declspec(implementation_key(1389)) long RibbonBarThemes::GetCount ( );
__declspec(implementation_key(1390)) RibbonBarThemePtr RibbonBarThemes::Item ( const _variant_t & Index );
__declspec(implementation_key(1391)) RibbonBarThemePtr RibbonBarThemes::Create ( const _variant_t & BasedOffTheme );
__declspec(implementation_key(1392)) HRESULT RibbonBarThemes::Commit ( );
__declspec(implementation_key(1393)) HRESULT RibbonBarThemes::Remove ( const _variant_t & Theme );
__declspec(implementation_key(1394)) HRESULT RibbonBarThemes::ActivateTheme ( const _variant_t & Theme );
__declspec(implementation_key(1395)) ApplicationPtr RibbonBarTheme::GetApplication ( );
__declspec(implementation_key(1396)) RibbonBarThemesPtr RibbonBarTheme::GetParent ( );
__declspec(implementation_key(1397)) RibbonBarsPtr RibbonBarTheme::GetRibbonBars ( );
__declspec(implementation_key(1398)) _bstr_t RibbonBarTheme::GetName ( );
__declspec(implementation_key(1399)) void RibbonBarTheme::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(1400)) enum RibbonBarControlSize RibbonBarTheme::GetGlobalControlSize ( );
__declspec(implementation_key(1401)) void RibbonBarTheme::PutGlobalControlSize ( enum RibbonBarControlSize _arg1 );
__declspec(implementation_key(1402)) enum RibbonBarControlText RibbonBarTheme::GetGlobalControlText ( );
__declspec(implementation_key(1403)) void RibbonBarTheme::PutGlobalControlText ( enum RibbonBarControlText _arg1 );
__declspec(implementation_key(1404)) VARIANT_BOOL RibbonBarTheme::GetActive ( );
__declspec(implementation_key(1405)) ApplicationPtr _IRibbonBarThemesAuto::GetApplication ( );
__declspec(implementation_key(1406)) CustomizationPtr _IRibbonBarThemesAuto::GetParent ( );
__declspec(implementation_key(1407)) long _IRibbonBarThemesAuto::GetCount ( );
__declspec(implementation_key(1408)) RibbonBarThemePtr _IRibbonBarThemesAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(1409)) IUnknownPtr _IRibbonBarThemesAuto::Get_NewEnum ( );
__declspec(implementation_key(1410)) RibbonBarThemePtr _IRibbonBarThemesAuto::Create ( const _variant_t & BasedOffTheme );
__declspec(implementation_key(1411)) HRESULT _IRibbonBarThemesAuto::Commit ( );
__declspec(implementation_key(1412)) HRESULT _IRibbonBarThemesAuto::Remove ( const _variant_t & Theme );
__declspec(implementation_key(1413)) HRESULT _IRibbonBarThemesAuto::ActivateTheme ( const _variant_t & Theme );
__declspec(implementation_key(1414)) ApplicationPtr RibbonBars::GetApplication ( );
__declspec(implementation_key(1415)) RibbonBarThemePtr RibbonBars::GetParent ( );
__declspec(implementation_key(1416)) long RibbonBars::GetCount ( );
__declspec(implementation_key(1417)) RibbonBarPtr RibbonBars::Item ( const _variant_t & Index );
__declspec(implementation_key(1418)) ApplicationPtr RibbonBar::GetApplication ( );
__declspec(implementation_key(1419)) RibbonBarsPtr RibbonBar::GetParent ( );
__declspec(implementation_key(1420)) RibbonBarTabsPtr RibbonBar::GetRibbonBarTabs ( );
__declspec(implementation_key(1421)) _bstr_t RibbonBar::GetEnvironment ( );
__declspec(implementation_key(1422)) ApplicationPtr _IRibbonBarsAuto::GetApplication ( );
__declspec(implementation_key(1423)) RibbonBarThemePtr _IRibbonBarsAuto::GetParent ( );
__declspec(implementation_key(1424)) long _IRibbonBarsAuto::GetCount ( );
__declspec(implementation_key(1425)) RibbonBarPtr _IRibbonBarsAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(1426)) IUnknownPtr _IRibbonBarsAuto::Get_NewEnum ( );
__declspec(implementation_key(1427)) ApplicationPtr RibbonBarTabs::GetApplication ( );
__declspec(implementation_key(1428)) RibbonBarPtr RibbonBarTabs::GetParent ( );
__declspec(implementation_key(1429)) long RibbonBarTabs::GetCount ( );
__declspec(implementation_key(1430)) RibbonBarTabPtr RibbonBarTabs::Item ( const _variant_t & Index );
__declspec(implementation_key(1431)) RibbonBarTabPtr RibbonBarTabs::Insert ( const _variant_t & Item, const _variant_t & AtItem, enum RibbonBarInsertMode mode );
__declspec(implementation_key(1432)) HRESULT RibbonBarTabs::Remove ( const _variant_t & Item );
__declspec(implementation_key(1433)) ApplicationPtr _IRibbonBarAuto::GetApplication ( );
__declspec(implementation_key(1434)) RibbonBarsPtr _IRibbonBarAuto::GetParent ( );
__declspec(implementation_key(1435)) RibbonBarTabsPtr _IRibbonBarAuto::GetRibbonBarTabs ( );
__declspec(implementation_key(1436)) _bstr_t _IRibbonBarAuto::GetEnvironment ( );
__declspec(implementation_key(1437)) ApplicationPtr RibbonBarTab::GetApplication ( );
__declspec(implementation_key(1438)) RibbonBarTabsPtr RibbonBarTab::GetParent ( );
__declspec(implementation_key(1439)) RibbonBarGroupsPtr RibbonBarTab::GetRibbonBarGroups ( );
__declspec(implementation_key(1440)) _bstr_t RibbonBarTab::GetName ( );
__declspec(implementation_key(1441)) void RibbonBarTab::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(1442)) long RibbonBarTab::GetId ( );
__declspec(implementation_key(1443)) VARIANT_BOOL RibbonBarTab::GetVisible ( );
__declspec(implementation_key(1444)) void RibbonBarTab::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1445)) HRESULT RibbonBarTab::Activate ( );
__declspec(implementation_key(1446)) ApplicationPtr RibbonBarGroups::GetApplication ( );
__declspec(implementation_key(1447)) RibbonBarTabPtr RibbonBarGroups::GetParent ( );
__declspec(implementation_key(1448)) long RibbonBarGroups::GetCount ( );
__declspec(implementation_key(1449)) RibbonBarGroupPtr RibbonBarGroups::Item ( const _variant_t & Index );
__declspec(implementation_key(1450)) RibbonBarGroupPtr RibbonBarGroups::Insert ( const _variant_t & Item, const _variant_t & AtItem, enum RibbonBarInsertMode mode );
__declspec(implementation_key(1451)) HRESULT RibbonBarGroups::Remove ( const _variant_t & Item );
__declspec(implementation_key(1452)) ApplicationPtr _IRibbonBarTabAuto::GetApplication ( );
__declspec(implementation_key(1453)) RibbonBarTabsPtr _IRibbonBarTabAuto::GetParent ( );
__declspec(implementation_key(1454)) RibbonBarGroupsPtr _IRibbonBarTabAuto::GetRibbonBarGroups ( );
__declspec(implementation_key(1455)) _bstr_t _IRibbonBarTabAuto::GetName ( );
__declspec(implementation_key(1456)) void _IRibbonBarTabAuto::PutName ( _bstr_t Name );
__declspec(implementation_key(1457)) long _IRibbonBarTabAuto::GetId ( );
__declspec(implementation_key(1458)) VARIANT_BOOL _IRibbonBarTabAuto::GetVisible ( );
__declspec(implementation_key(1459)) void _IRibbonBarTabAuto::PutVisible ( VARIANT_BOOL Visible );
__declspec(implementation_key(1460)) HRESULT _IRibbonBarTabAuto::Activate ( );
__declspec(implementation_key(1461)) ApplicationPtr RibbonBarGroup::GetApplication ( );
__declspec(implementation_key(1462)) RibbonBarGroupsPtr RibbonBarGroup::GetParent ( );
__declspec(implementation_key(1463)) RibbonBarControlsPtr RibbonBarGroup::GetRibbonBarControls ( );
__declspec(implementation_key(1464)) _bstr_t RibbonBarGroup::GetName ( );
__declspec(implementation_key(1465)) void RibbonBarGroup::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(1466)) long RibbonBarGroup::GetId ( );
__declspec(implementation_key(1467)) VARIANT_BOOL RibbonBarGroup::GetVisible ( );
__declspec(implementation_key(1468)) void RibbonBarGroup::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1469)) ApplicationPtr RibbonBarControls::GetApplication ( );
__declspec(implementation_key(1470)) RibbonBarGroupPtr RibbonBarControls::GetParentRibbonBarGroup ( );
__declspec(implementation_key(1471)) RibbonBarControlPtr RibbonBarControls::GetParentRibbonBarControl ( );
__declspec(implementation_key(1472)) long RibbonBarControls::GetCount ( );
__declspec(implementation_key(1473)) RibbonBarControlPtr RibbonBarControls::Item ( const _variant_t & Index );
__declspec(implementation_key(1474)) RibbonBarControlPtr RibbonBarControls::Insert ( const _variant_t & Item, const _variant_t & AtItem, enum RibbonBarInsertMode mode );
__declspec(implementation_key(1475)) HRESULT RibbonBarControls::Remove ( const _variant_t & Item );
__declspec(implementation_key(1476)) ApplicationPtr _IRibbonBarGroupAuto::GetApplication ( );
__declspec(implementation_key(1477)) RibbonBarGroupsPtr _IRibbonBarGroupAuto::GetParent ( );
__declspec(implementation_key(1478)) RibbonBarControlsPtr _IRibbonBarGroupAuto::GetRibbonBarControls ( );
__declspec(implementation_key(1479)) _bstr_t _IRibbonBarGroupAuto::GetName ( );
__declspec(implementation_key(1480)) void _IRibbonBarGroupAuto::PutName ( _bstr_t Name );
__declspec(implementation_key(1481)) long _IRibbonBarGroupAuto::GetId ( );
__declspec(implementation_key(1482)) VARIANT_BOOL _IRibbonBarGroupAuto::GetVisible ( );
__declspec(implementation_key(1483)) void _IRibbonBarGroupAuto::PutVisible ( VARIANT_BOOL Visible );
__declspec(implementation_key(1484)) ApplicationPtr RibbonBarControl::GetApplication ( );
__declspec(implementation_key(1485)) RibbonBarControlsPtr RibbonBarControl::GetParent ( );
__declspec(implementation_key(1486)) RibbonBarControlsPtr RibbonBarControl::GetRibbonBarControls ( );
__declspec(implementation_key(1487)) _bstr_t RibbonBarControl::GetName ( );
__declspec(implementation_key(1488)) void RibbonBarControl::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(1489)) VARIANT_BOOL RibbonBarControl::GetVisible ( );
__declspec(implementation_key(1490)) void RibbonBarControl::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1491)) enum RibbonBarControlSize RibbonBarControl::GetSize ( );
__declspec(implementation_key(1492)) void RibbonBarControl::PutSize ( enum RibbonBarControlSize _arg1 );
__declspec(implementation_key(1493)) enum RibbonBarControlText RibbonBarControl::GetText ( );
__declspec(implementation_key(1494)) void RibbonBarControl::PutText ( enum RibbonBarControlText _arg1 );
__declspec(implementation_key(1495)) long RibbonBarControl::GetId ( );
__declspec(implementation_key(1496)) long RibbonBarControl::GetIconId ( );
__declspec(implementation_key(1497)) ApplicationPtr _IRibbonBarThemeAuto::GetApplication ( );
__declspec(implementation_key(1498)) RibbonBarThemesPtr _IRibbonBarThemeAuto::GetParent ( );
__declspec(implementation_key(1499)) RibbonBarsPtr _IRibbonBarThemeAuto::GetRibbonBars ( );
__declspec(implementation_key(1500)) _bstr_t _IRibbonBarThemeAuto::GetName ( );
__declspec(implementation_key(1501)) void _IRibbonBarThemeAuto::PutName ( _bstr_t Name );
__declspec(implementation_key(1502)) enum RibbonBarControlSize _IRibbonBarThemeAuto::GetGlobalControlSize ( );
__declspec(implementation_key(1503)) void _IRibbonBarThemeAuto::PutGlobalControlSize ( enum RibbonBarControlSize SizeType );
__declspec(implementation_key(1504)) enum RibbonBarControlText _IRibbonBarThemeAuto::GetGlobalControlText ( );
__declspec(implementation_key(1505)) void _IRibbonBarThemeAuto::PutGlobalControlText ( enum RibbonBarControlText TextType );
__declspec(implementation_key(1506)) VARIANT_BOOL _IRibbonBarThemeAuto::GetActive ( );
__declspec(implementation_key(1507)) ApplicationPtr _IRibbonBarControlAuto::GetApplication ( );
__declspec(implementation_key(1508)) RibbonBarControlsPtr _IRibbonBarControlAuto::GetParent ( );
__declspec(implementation_key(1509)) RibbonBarControlsPtr _IRibbonBarControlAuto::GetRibbonBarControls ( );
__declspec(implementation_key(1510)) _bstr_t _IRibbonBarControlAuto::GetName ( );
__declspec(implementation_key(1511)) void _IRibbonBarControlAuto::PutName ( _bstr_t Name );
__declspec(implementation_key(1512)) VARIANT_BOOL _IRibbonBarControlAuto::GetVisible ( );
__declspec(implementation_key(1513)) void _IRibbonBarControlAuto::PutVisible ( VARIANT_BOOL Visible );
__declspec(implementation_key(1514)) enum RibbonBarControlSize _IRibbonBarControlAuto::GetSize ( );
__declspec(implementation_key(1515)) void _IRibbonBarControlAuto::PutSize ( enum RibbonBarControlSize SizeType );
__declspec(implementation_key(1516)) enum RibbonBarControlText _IRibbonBarControlAuto::GetText ( );
__declspec(implementation_key(1517)) void _IRibbonBarControlAuto::PutText ( enum RibbonBarControlText TextType );
__declspec(implementation_key(1518)) long _IRibbonBarControlAuto::GetId ( );
__declspec(implementation_key(1519)) long _IRibbonBarControlAuto::GetIconId ( );
__declspec(implementation_key(1520)) ApplicationPtr _IRibbonBarTabsAuto::GetApplication ( );
__declspec(implementation_key(1521)) RibbonBarPtr _IRibbonBarTabsAuto::GetParent ( );
__declspec(implementation_key(1522)) long _IRibbonBarTabsAuto::GetCount ( );
__declspec(implementation_key(1523)) RibbonBarTabPtr _IRibbonBarTabsAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(1524)) IUnknownPtr _IRibbonBarTabsAuto::Get_NewEnum ( );
__declspec(implementation_key(1525)) RibbonBarTabPtr _IRibbonBarTabsAuto::Insert ( const _variant_t & Item, const _variant_t & AtItem, enum RibbonBarInsertMode mode );
__declspec(implementation_key(1526)) HRESULT _IRibbonBarTabsAuto::Remove ( const _variant_t & Item );
__declspec(implementation_key(1527)) ApplicationPtr _IRibbonBarGroupsAuto::GetApplication ( );
__declspec(implementation_key(1528)) RibbonBarTabPtr _IRibbonBarGroupsAuto::GetParent ( );
__declspec(implementation_key(1529)) long _IRibbonBarGroupsAuto::GetCount ( );
__declspec(implementation_key(1530)) RibbonBarGroupPtr _IRibbonBarGroupsAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(1531)) IUnknownPtr _IRibbonBarGroupsAuto::Get_NewEnum ( );
__declspec(implementation_key(1532)) RibbonBarGroupPtr _IRibbonBarGroupsAuto::Insert ( const _variant_t & Item, const _variant_t & AtItem, enum RibbonBarInsertMode mode );
__declspec(implementation_key(1533)) HRESULT _IRibbonBarGroupsAuto::Remove ( const _variant_t & Item );
__declspec(implementation_key(1534)) ApplicationPtr _IRibbonBarControlsAuto::GetApplication ( );
__declspec(implementation_key(1535)) RibbonBarGroupPtr _IRibbonBarControlsAuto::GetParentRibbonBarGroup ( );
__declspec(implementation_key(1536)) RibbonBarControlPtr _IRibbonBarControlsAuto::GetParentRibbonBarControl ( );
__declspec(implementation_key(1537)) long _IRibbonBarControlsAuto::GetCount ( );
__declspec(implementation_key(1538)) RibbonBarControlPtr _IRibbonBarControlsAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(1539)) IUnknownPtr _IRibbonBarControlsAuto::Get_NewEnum ( );
__declspec(implementation_key(1540)) RibbonBarControlPtr _IRibbonBarControlsAuto::Insert ( const _variant_t & Item, const _variant_t & AtItem, enum RibbonBarInsertMode mode );
__declspec(implementation_key(1541)) HRESULT _IRibbonBarControlsAuto::Remove ( const _variant_t & Item );
__declspec(implementation_key(1542)) ApplicationPtr RadialMenu::GetApplication ( );
__declspec(implementation_key(1543)) CustomizationPtr RadialMenu::GetParent ( );
__declspec(implementation_key(1544)) long RadialMenu::GetCount ( );
__declspec(implementation_key(1545)) RibbonBarThemePtr RadialMenu::Item ( const _variant_t & Index );
__declspec(implementation_key(1546)) RibbonBarThemePtr RadialMenu::Create ( const _variant_t & BasedOffTheme );
__declspec(implementation_key(1547)) HRESULT RadialMenu::Commit ( );
__declspec(implementation_key(1548)) HRESULT RadialMenu::Remove ( const _variant_t & Theme );
__declspec(implementation_key(1549)) HRESULT RadialMenu::LoadPallets ( BSTR * strConfigFilename );
__declspec(implementation_key(1550)) HRESULT RadialMenu::SavePallets ( BSTR * strConfigFilename );
__declspec(implementation_key(1551)) HRESULT RadialMenu::DumpPallets ( BSTR * strLogfileName );
__declspec(implementation_key(1552)) HRESULT RadialMenu::DumpPallet ( BSTR * strEnvironmentName, BSTR * strLogfileName );
__declspec(implementation_key(1553)) HRESULT RadialMenu::SetCommand ( BSTR * strEnvironmentName, int ring, int wedge, int cmdID, int imageID );
__declspec(implementation_key(1554)) HRESULT RadialMenu::RemoveCommand ( BSTR * strEnvironmentName, int ring, int wedge );
__declspec(implementation_key(1555)) HRESULT RadialMenu::SwapCommands ( BSTR * strEnvironmentName, int ring1, int wedge1, int ring2, int wedge2 );
__declspec(implementation_key(1556)) ApplicationPtr _IRadialMenuAuto::GetApplication ( );
__declspec(implementation_key(1557)) CustomizationPtr _IRadialMenuAuto::GetParent ( );
__declspec(implementation_key(1558)) long _IRadialMenuAuto::GetCount ( );
__declspec(implementation_key(1559)) RibbonBarThemePtr _IRadialMenuAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(1560)) IUnknownPtr _IRadialMenuAuto::Get_NewEnum ( );
__declspec(implementation_key(1561)) RibbonBarThemePtr _IRadialMenuAuto::Create ( const _variant_t & BasedOffTheme );
__declspec(implementation_key(1562)) HRESULT _IRadialMenuAuto::Commit ( );
__declspec(implementation_key(1563)) HRESULT _IRadialMenuAuto::Remove ( const _variant_t & Theme );
__declspec(implementation_key(1564)) HRESULT _IRadialMenuAuto::LoadPallets ( BSTR * strConfigFilename );
__declspec(implementation_key(1565)) HRESULT _IRadialMenuAuto::SavePallets ( BSTR * strConfigFilename );
__declspec(implementation_key(1566)) HRESULT _IRadialMenuAuto::DumpPallets ( BSTR * strLogfileName );
__declspec(implementation_key(1567)) HRESULT _IRadialMenuAuto::DumpPallet ( BSTR * strEnvironmentName, BSTR * strLogfileName );
__declspec(implementation_key(1568)) HRESULT _IRadialMenuAuto::SetCommand ( BSTR * strEnvironmentName, int ring, int wedge, int cmdID, int imageID );
__declspec(implementation_key(1569)) HRESULT _IRadialMenuAuto::RemoveCommand ( BSTR * strEnvironmentName, int ring, int wedge );
__declspec(implementation_key(1570)) HRESULT _IRadialMenuAuto::SwapCommands ( BSTR * strEnvironmentName, int ring1, int wedge1, int ring2, int wedge2 );
__declspec(implementation_key(1571)) ApplicationPtr SwitchWindowCust::GetApplication ( );
__declspec(implementation_key(1572)) CustomizationPtr SwitchWindowCust::GetParent ( );
__declspec(implementation_key(1573)) long SwitchWindowCust::GetCount ( );
__declspec(implementation_key(1574)) RibbonBarThemePtr SwitchWindowCust::Item ( const _variant_t & Index );
__declspec(implementation_key(1575)) RibbonBarThemePtr SwitchWindowCust::Create ( const _variant_t & BasedOffTheme );
__declspec(implementation_key(1576)) HRESULT SwitchWindowCust::Commit ( );
__declspec(implementation_key(1577)) HRESULT SwitchWindowCust::Remove ( const _variant_t & Theme );
__declspec(implementation_key(1578)) HRESULT SwitchWindowCust::EnumGraphicViews ( int * pNumGraphicViews );
__declspec(implementation_key(1579)) HRESULT SwitchWindowCust::NextGraphicView ( BSTR * strTitle, BSTR * strFullName, int * fileType, unsigned long * hWnd, unsigned long * bActive, unsigned long * bDirty );
__declspec(implementation_key(1580)) HRESULT SwitchWindowCust::ActivateGraphicView ( unsigned long hWnd );
__declspec(implementation_key(1581)) ApplicationPtr _ICustomizationAuto::GetApplication ( );
__declspec(implementation_key(1582)) ApplicationPtr _ICustomizationAuto::GetParent ( );
__declspec(implementation_key(1583)) RibbonBarThemesPtr _ICustomizationAuto::GetRibbonBarThemes ( );
__declspec(implementation_key(1584)) RadialMenuPtr _ICustomizationAuto::GetRadialMenu ( );
__declspec(implementation_key(1585)) SwitchWindowCustPtr _ICustomizationAuto::GetSwitchWindowCust ( );
__declspec(implementation_key(1586)) HRESULT _ICustomizationAuto::BeginCustomization ( );
__declspec(implementation_key(1587)) HRESULT _ICustomizationAuto::EndCustomization ( );
__declspec(implementation_key(1588)) ApplicationPtr _ISwitchWindowCustAuto::GetApplication ( );
__declspec(implementation_key(1589)) CustomizationPtr _ISwitchWindowCustAuto::GetParent ( );
__declspec(implementation_key(1590)) long _ISwitchWindowCustAuto::GetCount ( );
__declspec(implementation_key(1591)) RibbonBarThemePtr _ISwitchWindowCustAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(1592)) IUnknownPtr _ISwitchWindowCustAuto::Get_NewEnum ( );
__declspec(implementation_key(1593)) RibbonBarThemePtr _ISwitchWindowCustAuto::Create ( const _variant_t & BasedOffTheme );
__declspec(implementation_key(1594)) HRESULT _ISwitchWindowCustAuto::Commit ( );
__declspec(implementation_key(1595)) HRESULT _ISwitchWindowCustAuto::Remove ( const _variant_t & Theme );
__declspec(implementation_key(1596)) HRESULT _ISwitchWindowCustAuto::EnumGraphicViews ( int * pNumGraphicViews );
__declspec(implementation_key(1597)) HRESULT _ISwitchWindowCustAuto::NextGraphicView ( BSTR * strTitle, BSTR * strFullName, int * fileType, unsigned long * hWnd, unsigned long * bActive, unsigned long * bDirty );
__declspec(implementation_key(1598)) HRESULT _ISwitchWindowCustAuto::ActivateGraphicView ( unsigned long hWnd );
__declspec(implementation_key(1599)) HRESULT DynamicVisualization::EnableDelayedIndexing ( VARIANT_BOOL bEnableDelayedIndexing );
__declspec(implementation_key(1600)) HRESULT _IDynamicVisualizationAuto::EnableDelayedIndexing ( VARIANT_BOOL bEnableDelayedIndexing );
__declspec(implementation_key(1601)) HRESULT ISEOpenNonSolidEdgeFileUIEvents::OnOpenNonSolidEdgeFileUI ( enum OpenNonSolidEdgeFileContext FileContext, _bstr_t FileFilter, BSTR * Filename );
__declspec(implementation_key(1602)) HRESULT _IApplicationAuto::Activate ( );
__declspec(implementation_key(1603)) IDispatchPtr _IApplicationAuto::GetActiveDocument ( );
__declspec(implementation_key(1604)) _bstr_t _IApplicationAuto::GetActiveEnvironment ( );
__declspec(implementation_key(1605)) _bstr_t _IApplicationAuto::GetActivePrinter ( );
__declspec(implementation_key(1606)) SelectSetPtr _IApplicationAuto::GetActiveSelectSet ( );
__declspec(implementation_key(1607)) int _IApplicationAuto::GetActiveStatusBarPart ( );
__declspec(implementation_key(1608)) void _IApplicationAuto::PutActiveStatusBarPart ( int ActiveStatusBarPart );
__declspec(implementation_key(1609)) IDispatchPtr _IApplicationAuto::GetActiveWindow ( );
__declspec(implementation_key(1610)) ApplicationPtr _IApplicationAuto::GetApplication ( );
__declspec(implementation_key(1611)) _bstr_t _IApplicationAuto::GetCaption ( );
__declspec(implementation_key(1612)) void _IApplicationAuto::PutCaption ( _bstr_t Caption );
__declspec(implementation_key(1613)) _bstr_t _IApplicationAuto::GetDefaultFilePath ( );
__declspec(implementation_key(1614)) void _IApplicationAuto::PutDefaultFilePath ( _bstr_t Path );
__declspec(implementation_key(1615)) void _IApplicationAuto::PutDelayCompute ( VARIANT_BOOL DelayCompute );
__declspec(implementation_key(1616)) VARIANT_BOOL _IApplicationAuto::GetDelayCompute ( );
__declspec(implementation_key(1617)) VARIANT_BOOL _IApplicationAuto::GetDisplayAlerts ( );
__declspec(implementation_key(1618)) void _IApplicationAuto::PutDisplayAlerts ( VARIANT_BOOL DisplayAlerts );
__declspec(implementation_key(1619)) VARIANT_BOOL _IApplicationAuto::GetDisplayFullScreen ( );
__declspec(implementation_key(1620)) void _IApplicationAuto::PutDisplayFullScreen ( VARIANT_BOOL DisplayFullScreen );
__declspec(implementation_key(1621)) VARIANT_BOOL _IApplicationAuto::GetDisplayRecentFiles ( );
__declspec(implementation_key(1622)) void _IApplicationAuto::PutDisplayRecentFiles ( VARIANT_BOOL DisplayRecentFiles );
__declspec(implementation_key(1623)) long _IApplicationAuto::GetDisplayRecentFilesCount ( );
__declspec(implementation_key(1624)) void _IApplicationAuto::PutDisplayRecentFilesCount ( long DisplayRecentFilesCount );
__declspec(implementation_key(1625)) DocumentsPtr _IApplicationAuto::GetDocuments ( );
__declspec(implementation_key(1626)) EnvironmentsPtr _IApplicationAuto::GetEnvironments ( );
__declspec(implementation_key(1627)) _variant_t _IApplicationAuto::SEGetOpenFileName ( enum LinksUpdateOption * LinksUpdate, BSTR * AltLinkPath, enum DocumentAccess * DocAccess, enum NotifyOption * OptNotify, IDispatch * * DocRelationAutoServer, const _variant_t & FileFilter, const _variant_t & FilterIndex, const _variant_t & Title, const _variant_t & IgnoreWarnings );
__declspec(implementation_key(1628)) _variant_t _IApplicationAuto::GetSaveAsFileName ( int * LinkSaveOption, long * SelectedFilter, const _variant_t & InitialFilename, const _variant_t & FileFilter, const _variant_t & FilterIndex, const _variant_t & Title, const _variant_t & IsTemplate );
__declspec(implementation_key(1629)) _variant_t _IApplicationAuto::FindFile ( );
__declspec(implementation_key(1630)) _variant_t _IApplicationAuto::GetDirectoryName ( );
__declspec(implementation_key(1631)) int _IApplicationAuto::GetHeight ( );
__declspec(implementation_key(1632)) void _IApplicationAuto::PutHeight ( int Height );
__declspec(implementation_key(1633)) long _IApplicationAuto::GethWnd ( );
__declspec(implementation_key(1634)) VARIANT_BOOL _IApplicationAuto::GetInteractive ( );
__declspec(implementation_key(1635)) void _IApplicationAuto::PutInteractive ( VARIANT_BOOL Interactive );
__declspec(implementation_key(1636)) int _IApplicationAuto::GetLeft ( );
__declspec(implementation_key(1637)) void _IApplicationAuto::PutLeft ( int Left );
__declspec(implementation_key(1638)) HRESULT _IApplicationAuto::MailLogoff ( );
__declspec(implementation_key(1639)) HRESULT _IApplicationAuto::MailLogon ( const _variant_t & Name, const _variant_t & Password, const _variant_t & DownloadNewMail );
__declspec(implementation_key(1640)) long _IApplicationAuto::GetMailSession ( );
__declspec(implementation_key(1641)) _bstr_t _IApplicationAuto::GetName ( );
__declspec(implementation_key(1642)) ApplicationPtr _IApplicationAuto::GetParent ( );
__declspec(implementation_key(1643)) HRESULT _IApplicationAuto::Quit ( );
__declspec(implementation_key(1644)) VARIANT_BOOL _IApplicationAuto::GetScreenUpdating ( );
__declspec(implementation_key(1645)) void _IApplicationAuto::PutScreenUpdating ( VARIANT_BOOL ScreenUpdating );
__declspec(implementation_key(1646)) _bstr_t _IApplicationAuto::GetStatusBar ( );
__declspec(implementation_key(1647)) void _IApplicationAuto::PutStatusBar ( _bstr_t StatusBar );
__declspec(implementation_key(1648)) VARIANT_BOOL _IApplicationAuto::GetStatusBarDelayUpdate ( );
__declspec(implementation_key(1649)) void _IApplicationAuto::PutStatusBarDelayUpdate ( VARIANT_BOOL StatusBarDelayUpdate );
__declspec(implementation_key(1650)) int _IApplicationAuto::GetStatusBarHeight ( );
__declspec(implementation_key(1651)) int _IApplicationAuto::GetStatusBarPartCount ( );
__declspec(implementation_key(1652)) void _IApplicationAuto::PutStatusBarPartCount ( int StatusBarPartCount );
__declspec(implementation_key(1653)) int _IApplicationAuto::GetStatusBarPartWidth ( );
__declspec(implementation_key(1654)) void _IApplicationAuto::PutStatusBarPartWidth ( int StatusBarPartWidth );
__declspec(implementation_key(1655)) VARIANT_BOOL _IApplicationAuto::GetStatusBarVisible ( );
__declspec(implementation_key(1656)) void _IApplicationAuto::PutStatusBarVisible ( VARIANT_BOOL StatusBarVisible );
__declspec(implementation_key(1657)) int _IApplicationAuto::GetTop ( );
__declspec(implementation_key(1658)) void _IApplicationAuto::PutTop ( int Top );
__declspec(implementation_key(1659)) int _IApplicationAuto::GetUsableHeight ( );
__declspec(implementation_key(1660)) int _IApplicationAuto::GetUsableWidth ( );
__declspec(implementation_key(1661)) _bstr_t _IApplicationAuto::GetUserName ( );
__declspec(implementation_key(1662)) void _IApplicationAuto::PutUserName ( _bstr_t UserName );
__declspec(implementation_key(1663)) _bstr_t _IApplicationAuto::GetValue ( );
__declspec(implementation_key(1664)) _bstr_t _IApplicationAuto::GetVersion ( );
__declspec(implementation_key(1665)) VARIANT_BOOL _IApplicationAuto::GetVisible ( );
__declspec(implementation_key(1666)) void _IApplicationAuto::PutVisible ( VARIANT_BOOL Visible );
__declspec(implementation_key(1667)) int _IApplicationAuto::GetWidth ( );
__declspec(implementation_key(1668)) void _IApplicationAuto::PutWidth ( int Width );
__declspec(implementation_key(1669)) WindowsPtr _IApplicationAuto::GetWindows ( );
__declspec(implementation_key(1670)) int _IApplicationAuto::GetWindowState ( );
__declspec(implementation_key(1671)) void _IApplicationAuto::PutWindowState ( int WindowState );
__declspec(implementation_key(1672)) IUnknownPtr _IApplicationAuto::GetApplicationEvents ( );
__declspec(implementation_key(1673)) IUnknownPtr _IApplicationAuto::GetApplicationWindowEvents ( );
__declspec(implementation_key(1674)) enum DocumentTypeConstants _IApplicationAuto::GetActiveDocumentType ( );
__declspec(implementation_key(1675)) IUnknownPtr _IApplicationAuto::GetFileUIEvents ( );
__declspec(implementation_key(1676)) IUnknownPtr _IApplicationAuto::GetBeforeFileSaveAsEvents ( );
__declspec(implementation_key(1677)) HRESULT _IApplicationAuto::StartCommand ( enum SolidEdgeCommandConstants CommandID );
__declspec(implementation_key(1678)) VARIANT_BOOL _IApplicationAuto::CommandEnabled ( int CommandID, _bstr_t strEnvironment, VARIANT_BOOL * bLicensed, VARIANT_BOOL * bUnknownCmd );
__declspec(implementation_key(1679)) DISECommandPtr _IApplicationAuto::CreateCommand ( long CmdFlags );
__declspec(implementation_key(1680)) HRESULT _IApplicationAuto::ReplaceReference ( const _variant_t & FromReference, const _variant_t & ToReference, const _variant_t & Scope, const _variant_t & Recursive );
__declspec(implementation_key(1681)) HRESULT _IApplicationAuto::RunMacro ( _bstr_t Filename );
__declspec(implementation_key(1682)) AddInsPtr _IApplicationAuto::GetAddIns ( );
__declspec(implementation_key(1683)) VARIANT_BOOL _IApplicationAuto::GetEnableStereo ( );
__declspec(implementation_key(1684)) void _IApplicationAuto::PutEnableStereo ( VARIANT_BOOL EnableStereo );
__declspec(implementation_key(1685)) VARIANT_BOOL _IApplicationAuto::GetEdgeBarVisible ( );
__declspec(implementation_key(1686)) void _IApplicationAuto::PutEdgeBarVisible ( VARIANT_BOOL EdgeBarVisible );
__declspec(implementation_key(1687)) IUnknownPtr _IApplicationAuto::GetFeatureLibraryEvents ( );
__declspec(implementation_key(1688)) HRESULT _IApplicationAuto::GetGlobalParameter ( enum ApplicationGlobalConstants Parameter, VARIANT * Value );
__declspec(implementation_key(1689)) HRESULT _IApplicationAuto::SetGlobalParameter ( enum ApplicationGlobalConstants Parameter, const _variant_t & Value );
__declspec(implementation_key(1690)) IDispatchPtr _IApplicationAuto::GetActiveObject ( enum SeObjectType Type );
__declspec(implementation_key(1691)) InsightPtr _IApplicationAuto::GetInsight ( );
__declspec(implementation_key(1692)) IUnknownPtr _IApplicationAuto::GetApplicationV8AfterDocumentOpenEvent ( );
__declspec(implementation_key(1693)) HRESULT _IApplicationAuto::SetOLERequestPendingTimeout ( const _variant_t & SetOLERequestPendingTimeout );
__declspec(implementation_key(1694)) HRESULT _IApplicationAuto::SetOLEServerBusyTimeout ( const _variant_t & SetOLEServerBusyTimeout );
__declspec(implementation_key(1695)) IUnknownPtr _IApplicationAuto::GetFeatureSelectedFromPFEvents ( );
__declspec(implementation_key(1696)) HRESULT _IApplicationAuto::CreateSEDocumentFromTDMAuto ( _bstr_t bstrHostName, _bstr_t bstrServerName, _bstr_t bstrFolderLocation, _bstr_t bstrProject, _bstr_t bstrLibrary, _bstr_t bstrItemGUID, _bstr_t bstrVersionGUID, _bstr_t bstrVersionNumber, enum DocumentTypeConstants SEDocType, _bstr_t bstrAssemblyTemplate, _bstr_t bstrPartTemplate );
__declspec(implementation_key(1697)) HRESULT _IApplicationAuto::CreateSEDraftDocFromDXFAuto ( _bstr_t bstrDxfFileName, _bstr_t bstrDraftFileLocation, _bstr_t bstrDraftTemplateFile, _bstr_t bstrclsidDoc );
__declspec(implementation_key(1698)) HRESULT _IApplicationAuto::CreateSEDocumentFromForeignFile ( _bstr_t bstrForeignFilePath, _bstr_t bstrSEFileLocation, _bstr_t bstrTemplatePath, _bstr_t bstrClsid, enum BulkMigrationTypeConstants MigrationType );
__declspec(implementation_key(1699)) _bstr_t _IApplicationAuto::GetTemplateFileName ( enum DocumentTypeConstants * DocType, const _variant_t & FileFilter );
__declspec(implementation_key(1700)) _bstr_t _IApplicationAuto::GetDefaultTemplatePath ( enum DocumentTypeConstants DocType );
__declspec(implementation_key(1701)) HRESULT _IApplicationAuto::SetDefaultTemplatePath ( enum DocumentTypeConstants DocType, _bstr_t TemplatePath );
__declspec(implementation_key(1702)) HRESULT _IApplicationAuto::DoIdle ( );
__declspec(implementation_key(1703)) MatTablePtr _IApplicationAuto::GetMaterialTable ( );
__declspec(implementation_key(1704)) IUnknownPtr _IApplicationAuto::GetNewFileUIEvents ( );
__declspec(implementation_key(1705)) HRESULT _IApplicationAuto::SEAdminUpdate ( );
__declspec(implementation_key(1706)) IUnknownPtr _IApplicationAuto::GetShortcutMenuEvents ( );
__declspec(implementation_key(1707)) VARIANT_BOOL _IApplicationAuto::GetApprenticeMode ( );
__declspec(implementation_key(1708)) void _IApplicationAuto::PutApprenticeMode ( VARIANT_BOOL ApprenticeModeOn );
__declspec(implementation_key(1709)) VARIANT_BOOL _IApplicationAuto::GetShowStartupScreen ( );
__declspec(implementation_key(1710)) void _IApplicationAuto::PutShowStartupScreen ( VARIANT_BOOL ShowStartupScreen );
__declspec(implementation_key(1711)) SolidEdgeTCEPtr _IApplicationAuto::GetSolidEdgeTCE ( );
__declspec(implementation_key(1712)) SolidEdgeInsightXTPtr _IApplicationAuto::GetSolidEdgeInsightXT ( );
__declspec(implementation_key(1713)) VARIANT_BOOL _IApplicationAuto::GetIsIdling ( long MilliSec );
__declspec(implementation_key(1714)) VARIANT_BOOL _IApplicationAuto::GetResolveLink ( );
__declspec(implementation_key(1715)) void _IApplicationAuto::PutResolveLink ( VARIANT_BOOL ResolveLink );
__declspec(implementation_key(1716)) HRESULT _IApplicationAuto::DisableEventsForGivenAddIn ( _bstr_t bstrClsid );
__declspec(implementation_key(1717)) HRESULT _IApplicationAuto::SetAddInInterfaces ( _bstr_t bstrClsid, SAFEARRAY * * pSaUnknownPtrs );
__declspec(implementation_key(1718)) HRESULT _IApplicationAuto::EnableEventsForGivenAddIn ( _bstr_t bstrClsid );
__declspec(implementation_key(1719)) HRESULT _IApplicationAuto::ShowCommand ( int nCmdID, VARIANT_BOOL Highlight );
__declspec(implementation_key(1720)) int _IApplicationAuto::GetProcessID ( );
__declspec(implementation_key(1721)) IUnknownPtr _IApplicationAuto::GetSEECEvents ( );
__declspec(implementation_key(1722)) IUnknownPtr _IApplicationAuto::GetSESPEvents ( );
__declspec(implementation_key(1723)) IUnknownPtr _IApplicationAuto::GetBiDMEvents ( );
__declspec(implementation_key(1724)) HRESULT _IApplicationAuto::WriteDocumentFormulaIntoXML ( _bstr_t outputXMLPath, _bstr_t knownResXMLPath, VARIANT_BOOL bDeepTree );
__declspec(implementation_key(1725)) HRESULT _IApplicationAuto::SetBuiltInATPRunningFlagAndATPID ( VARIANT_BOOL bRunningFlag, _bstr_t strATPID );
__declspec(implementation_key(1726)) HRESULT _IApplicationAuto::SetValuesForBIDMCPD ( VARIANT * pvarListOfValues );
__declspec(implementation_key(1727)) HRESULT _IApplicationAuto::SetMessageForBIDMCPD ( VARIANT * pvarListOfMessages );
__declspec(implementation_key(1728)) HRESULT _IApplicationAuto::SetBIDMATPInfo ( _bstr_t bstrATPClassName, _bstr_t bstrATPName, long ATPId );
__declspec(implementation_key(1729)) int _IApplicationAuto::GetCountOfOpenModelsInFemap ( );
__declspec(implementation_key(1730)) CustomizationPtr _IApplicationAuto::GetCustomization ( );
__declspec(implementation_key(1731)) IDispatchPtr _IApplicationAuto::GetDraftPrintUtility ( );
__declspec(implementation_key(1732)) HRESULT _IApplicationAuto::ArrangeWindows ( enum ArrangeWindowsStyles Style );
__declspec(implementation_key(1733)) _variant_t _IApplicationAuto::GetOpenFileNameWithOptions ( unsigned long dwFlagForOpen, enum LinksUpdateOption * LinksUpdate, BSTR * AltLinkPath, enum DocumentAccess * DocAccess, enum NotifyOption * OptNotify, IDispatch * * DocRelationAutoServer, const _variant_t & FileFilter, const _variant_t & FilterIndex, const _variant_t & Title, const _variant_t & IgnoreWarnings );
__declspec(implementation_key(1734)) HRESULT _IApplicationAuto::SEGetFileVersionInfo ( _bstr_t Filename, enum DocumentTypeConstants * DocType, BSTR * CreatedVersion, BSTR * LastSavedVersion, unsigned long * GeometricVersion );
__declspec(implementation_key(1735)) HRESULT _IApplicationAuto::GenerateMasterImportListForDataPrep ( SAFEARRAY * * psalistOfFilesFolders, VARIANT_BOOL IncludeSubFolders, unsigned long FileTypes, _bstr_t TimeStamp, _bstr_t WorkingFolderLocation, BSTR * OrderedCSVFilePath, BSTR * UnOrderedCSVFilePath, BSTR * BrokenLinkXMLFilePath, int * iNumberOfBrokenLinks, BSTR * LinkReportFilePath, BSTR * ErrorMsg, enum GenerateMasterImportListError * ErrCode );
__declspec(implementation_key(1736)) _variant_t _IApplicationAuto::FindWhereUsedDocuments ( const _variant_t & DocumentPathName, SAFEARRAY * * psalistOfDirectories, VARIANT_BOOL IncludeSubFolders, SAFEARRAY * * psaFilterList );
__declspec(implementation_key(1737)) _variant_t _IApplicationAuto::QuerySystemInformation ( _bstr_t Search );
__declspec(implementation_key(1738)) HRESULT _IApplicationAuto::DisableBuilInDataMgmt ( VARIANT_BOOL bDisableBuiltInDM );
__declspec(implementation_key(1739)) _bstr_t _IApplicationAuto::GetRegistryPath ( );
__declspec(implementation_key(1740)) _bstr_t _IApplicationAuto::GetAppDataFolder ( );
__declspec(implementation_key(1741)) HRESULT _IApplicationAuto::GetRevisionLinkInfo ( _bstr_t bstrFilePath, VARIANT * pVarRevisionRoot, VARIANT * pVarRevisedFrom );
__declspec(implementation_key(1742)) HRESULT _IApplicationAuto::GetRevisionsHistory ( _bstr_t PathName, SAFEARRAY * * psaScope, VARIANT * psaRevHistoryFileNameList, VARIANT * psaRevHistoryRevisionFromList );
__declspec(implementation_key(1743)) HRESULT _IApplicationAuto::OpenDraft ( );
__declspec(implementation_key(1744)) HRESULT _IApplicationAuto::GetLatestRevision ( _bstr_t PathName, SAFEARRAY * * psaScope, BSTR * bLatestRevPath, BSTR * bLatestReleasedRevPath );
__declspec(implementation_key(1745)) HRESULT _IApplicationAuto::GetTopLevelAssemblyFileNames ( SAFEARRAY * * FileNames, SAFEARRAY * * TopLevelAssemblyFileNames );
__declspec(implementation_key(1746)) HRESULT _IApplicationAuto::FindSEDocumentsContainingText ( _bstr_t text_to_search, SAFEARRAY * * psaScope, _bstr_t file_types, VARIANT_BOOL bIncludeSubFolders, SAFEARRAY * * FilesFoundInSearch );
__declspec(implementation_key(1747)) HRESULT _IApplicationAuto::ResetConfigFile ( enum ConfigResetType eResetType, enum ConfigForForeignFileType eConfigFileType, enum FileTranslationMode eTranslationMode, _bstr_t GroupName, VARIANT * pFile, VARIANT * pTemplateName );
__declspec(implementation_key(1748)) long _IApplicationAuto::GetNextDocumentNumbers ( int countOfFiles, VARIANT * pVarPrefix, VARIANT * pVarDocNumbs );
__declspec(implementation_key(1749)) HRESULT _IApplicationAuto::Get_Set_UseBiDM_SEOption ( VARIANT_BOOL bGet, VARIANT_BOOL * iValue );
__declspec(implementation_key(1750)) HRESULT _IApplicationAuto::Get_Set_FileNamingRule ( VARIANT_BOOL bGet, VARIANT_BOOL * bValue );
__declspec(implementation_key(1751)) _bstr_t _IApplicationAuto::GetDocNameFormulaForFile ( _bstr_t bFilename );
__declspec(implementation_key(1752)) HRESULT _IApplicationAuto::BiDM_RegisterCustomProps ( VARIANT_BOOL bProcessCustomPropsFromPropSeed, VARIANT_BOOL bProcessCustomPropsFromTemplates );
__declspec(implementation_key(1753)) HRESULT _IApplicationAuto::PerformSolidEdgeWorkflow ( _bstr_t bstrFilePath, struct SolidEdgeWorkflowInfo * pSEWorkflowInfo );
__declspec(implementation_key(1754)) HRESULT _IApplicationAuto::GetSolidEdgeWorkflowInformation ( _bstr_t bstrFilePath, struct SolidEdgeWorkflowQueryInfo * pSEWorkflowQueryInfo );
__declspec(implementation_key(1755)) HRESULT _IApplicationAuto::SuspendMRU ( );
__declspec(implementation_key(1756)) HRESULT _IApplicationAuto::ResumeMRU ( );
__declspec(implementation_key(1757)) HRESULT _IApplicationAuto::ClearMRU ( );
__declspec(implementation_key(1758)) HRESULT _IApplicationAuto::AbortCommand ( VARIANT_BOOL AbortAllCommands );
__declspec(implementation_key(1759)) VARIANT_BOOL _IApplicationAuto::Publish3DPDF ( _bstr_t bstrInputFileOrFolderPath, _bstr_t bstr3DPDFTemplateFile, VARIANT_BOOL bIncludeSubFolders, _bstr_t bstrOutputFolderPath, _bstr_t bstr3DPDFFileName, VARIANT_BOOL bOpenPDFAfterPublish, VARIANT_BOOL bPublishHTML, VARIANT_BOOL bAddNextPrevButtons, VARIANT_BOOL bAddFileCustomPropsToPDF, VARIANT_BOOL bSelectAllPMIModelViewsForPDF, _bstr_t bstrDefaultModelView, VARIANT_BOOL bGenAndAttachSTEPAP242, VARIANT_BOOL bGenAndAttachJT, const _variant_t & ListOfAttachments );
__declspec(implementation_key(1760)) VARIANT_BOOL _IApplicationAuto::ConvertByFilePath ( _bstr_t InputFileOrFolderPath, _bstr_t OutputFileOrFolderPath );
__declspec(implementation_key(1761)) VARIANT_BOOL _IApplicationAuto::GetCommandPredictionLearningMode ( );
__declspec(implementation_key(1762)) void _IApplicationAuto::PutCommandPredictionLearningMode ( VARIANT_BOOL pbEnabled );
__declspec(implementation_key(1763)) _bstr_t _IApplicationAuto::GetSoldToID ( );
__declspec(implementation_key(1764)) HRESULT _IApplicationAuto::GetListOfTopLevelAssembliesFromFolder ( _bstr_t FolderPath, SAFEARRAY * * TopAssembliesList );
__declspec(implementation_key(1765)) _bstr_t _IApplicationAuto::GetLicenseType ( );
__declspec(implementation_key(1766)) HRESULT _IApplicationAuto::GenerateSourceImportListForDataPrep ( SAFEARRAY * * psalistOfFilesFolders, VARIANT_BOOL IncludeSubFolders, unsigned long FileTypes, _bstr_t TimeStamp, _bstr_t WorkingFolderLocation, BSTR * OrderedCSVFilePath, BSTR * UnOrderedCSVFilePath, BSTR * BrokenLinkXMLFilePath, int * iNumberOfBrokenLinks, BSTR * LinkReportFilePath, BSTR * ErrorMsg, enum GenerateSourceImportListError * ErrCode );
__declspec(implementation_key(1767)) long _IApplicationAuto::GetActiveFramehWnd ( );
__declspec(implementation_key(1768)) DynamicVisualizationPtr _IApplicationAuto::GetDynamicVisualization ( );
__declspec(implementation_key(1769)) __int64 _IApplicationAuto::GetLicenseHandle ( );
__declspec(implementation_key(1770)) HRESULT _IApplicationAuto::OpenNoteLibrary ( );
__declspec(implementation_key(1771)) HRESULT _IApplicationAuto::CloseNoteLibrary ( );
__declspec(implementation_key(1772)) HRESULT _IApplicationAuto::GetSavedNoteList ( SAFEARRAY * * saSavedNote );
__declspec(implementation_key(1773)) IUnknownPtr _IApplicationAuto::GetSavedNote ( _bstr_t bstrNoteName );
__declspec(implementation_key(1774)) HRESULT _IApplicationAuto::AddNote ( _bstr_t bstrNoteName, _bstr_t bstrText, VARIANT_BOOL bNoteOverWrite );
__declspec(implementation_key(1775)) VARIANT_BOOL _IApplicationAuto::Publish3DPDFEx ( _bstr_t bstrInputFileOrFolderPath, _bstr_t bstr3DPDFTemplateFile, VARIANT_BOOL bIncludeSubFolders, _bstr_t bstrOutputFolderPath, _bstr_t bstr3DPDFFileName, VARIANT_BOOL bOpenPDFAfterPublish, VARIANT_BOOL bPublishHTML, VARIANT_BOOL bAddNextPrevButtons, VARIANT_BOOL bAddFileCustomPropsToPDF, VARIANT_BOOL bSelectAllPMIModelViewsForPDF, _bstr_t bstrDefaultModelView, VARIANT_BOOL bGenAndAttachSTEPAP242, VARIANT_BOOL bGenAndAttachJT, const _variant_t & ListOfAttachments, VARIANT_BOOL bSelectAllNamedViewsForPDF, const _variant_t & ListOfNamedViews, const _variant_t & ListOfPMIModelViews );
__declspec(implementation_key(1776)) long _IApplicationAuto::GetActiveCommand ( );
__declspec(implementation_key(1777)) IUnknownPtr _IApplicationAuto::GetOpenNonSolidEdgeFileUIEvents ( );
__declspec(implementation_key(1778)) VARIANT_BOOL _IApplicationAuto::LicenseCheck ( enum SELicenseCheck Type, _bstr_t Feature );
__declspec(implementation_key(1779)) HRESULT View::Fit ( );
__declspec(implementation_key(1780)) WindowPtr View::GetWindow ( );
__declspec(implementation_key(1781)) HRESULT View::ModelToDC ( SAFEARRAY * * Matrix );
__declspec(implementation_key(1782)) HRESULT View::ModelToView ( SAFEARRAY * * Matrix );
__declspec(implementation_key(1783)) HRESULT View::ViewToGLProjection ( SAFEARRAY * * Matrix );
__declspec(implementation_key(1784)) HRESULT View::Update ( );
__declspec(implementation_key(1785)) HRESULT View::ShowDrawDC ( );
__declspec(implementation_key(1786)) HRESULT View::SwapBuffers ( );
__declspec(implementation_key(1787)) long View::GetDrawDC ( );
__declspec(implementation_key(1788)) HRESULT View::GetCamera ( double * EyeX, double * EyeY, double * EyeZ, double * TargetX, double * TargetY, double * TargetZ, double * UpX, double * UpY, double * UpZ, VARIANT_BOOL * Perspective, double * ScaleOrAngle );
__declspec(implementation_key(1789)) HRESULT View::BeginCameraDynamics ( );
__declspec(implementation_key(1790)) HRESULT View::SetCamera ( double EyeX, double EyeY, double EyeZ, double TargetX, double TargetY, double TargetZ, double UpX, double UpY, double UpZ, VARIANT_BOOL Perspective, double ScaleOrAngle );
__declspec(implementation_key(1791)) HRESULT View::EndCameraDynamics ( );
__declspec(implementation_key(1792)) HRESULT View::RotateCamera ( double Angle, double CenterX, double CenterY, double CenterZ, double AxisX, double AxisY, double AxisZ );
__declspec(implementation_key(1793)) HRESULT View::PanCamera ( int dX, int dY );
__declspec(implementation_key(1794)) HRESULT View::ZoomCamera ( double __MIDL___IViewAuto0000 );
__declspec(implementation_key(1795)) HRESULT View::OrientCamera ( int cmdtype, int X1, int Y1, int X2, int Y2, int X3, int Y3 );
__declspec(implementation_key(1796)) IUnknownPtr View::GetViewEvents ( );
__declspec(implementation_key(1797)) IUnknownPtr View::GetDisplayEvents ( );
__declspec(implementation_key(1798)) IUnknownPtr View::GetGLDisplayEvents ( );
__declspec(implementation_key(1799)) IUnknownPtr View::GetRenderEvents ( );
__declspec(implementation_key(1800)) IUnknownPtr View::GetAnimationEvents ( );
__declspec(implementation_key(1801)) VARIANT_BOOL View::GetDisplayEnabled ( );
__declspec(implementation_key(1802)) void View::PutDisplayEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1803)) VARIANT_BOOL View::GetCullingEnabled ( );
__declspec(implementation_key(1804)) void View::PutCullingEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1805)) VARIANT_BOOL View::GetStyleFallbackEnabled ( );
__declspec(implementation_key(1806)) void View::PutStyleFallbackEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1807)) int View::GetSharpnessLevelCount ( );
__declspec(implementation_key(1808)) int View::GetSharpnessLevel ( );
__declspec(implementation_key(1809)) void View::PutSharpnessLevel ( int _arg1 );
__declspec(implementation_key(1810)) VARIANT_BOOL View::GetStereoEnabled ( );
__declspec(implementation_key(1811)) void View::PutStereoEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1812)) double View::GetStereoAngle ( );
__declspec(implementation_key(1813)) void View::PutStereoAngle ( double _arg1 );
__declspec(implementation_key(1814)) double View::GetStereoDeviation ( );
__declspec(implementation_key(1815)) void View::PutStereoDeviation ( double _arg1 );
__declspec(implementation_key(1816)) HRESULT View::TransformModelToDC ( double ModelX, double ModelY, double ModelZ, long * DeviceX, long * DeviceY );
__declspec(implementation_key(1817)) HRESULT View::TransformDCToModel ( long DeviceX, long DeviceY, double * ModelX, double * ModelY, double * ModelZ );
__declspec(implementation_key(1818)) HRESULT View::TransformModelToView ( double ModelX, double ModelY, double ModelZ, double * ViewX, double * ViewY, double * ViewZ );
__declspec(implementation_key(1819)) HRESULT View::TransformViewToModel ( double ViewX, double ViewY, double ViewZ, double * ModelX, double * ModelY, double * ModelZ );
__declspec(implementation_key(1820)) HRESULT View::TransformGLProjectionToView ( double GLX, double GLY, double GLlZ, double * ViewX, double * ViewY, double * ViewZ );
__declspec(implementation_key(1821)) HRESULT View::TransformViewToGLProjection ( double ViewX, double ViewY, double ViewZ, double * GLX, double * GLY, double * GLZ );
__declspec(implementation_key(1822)) HRESULT View::GetCounter ( int Type, VARIANT_BOOL bReset, double * dCounter );
__declspec(implementation_key(1823)) VARIANT_BOOL View::GetGDIBufferModified ( );
__declspec(implementation_key(1824)) void View::PutGDIBufferModified ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1825)) HRESULT View::SaveAsImage ( _bstr_t Filename, const _variant_t & Width, const _variant_t & Height, const _variant_t & AltViewStyle, const _variant_t & Resolution, const _variant_t & ColorDepth, enum SeImageQualityType ImageQuality, VARIANT_BOOL Invert );
__declspec(implementation_key(1826)) IDispatchPtr View::GetViewStyle ( );
__declspec(implementation_key(1827)) void View::PutViewStyle ( IDispatch * _arg1 );
__declspec(implementation_key(1828)) _bstr_t View::GetStyle ( );
__declspec(implementation_key(1829)) void View::PutStyle ( _bstr_t _arg1 );
__declspec(implementation_key(1830)) HRESULT View::SetRenderMode ( const _variant_t & mode );
__declspec(implementation_key(1831)) enum SeRenderModeType View::GetRenderModeType ( );
__declspec(implementation_key(1832)) void View::PutRenderModeType ( enum SeRenderModeType _arg1 );
__declspec(implementation_key(1833)) VARIANT_BOOL View::GetSilhouettesEnabled ( );
__declspec(implementation_key(1834)) void View::PutSilhouettesEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1835)) VARIANT_BOOL View::GetSectionPlanesEnabled ( );
__declspec(implementation_key(1836)) void View::PutSectionPlanesEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1837)) HRESULT View::SetDisplayDepths ( double dFront, double dBack, VARIANT * FrontFaceStyle, VARIANT * BackFaceStyle, VARIANT * Monument );
__declspec(implementation_key(1838)) HRESULT View::GetDisplayDepths ( double * pdFront, double * pdBack, VARIANT * FrontFaceStyle, VARIANT * BackFaceStyle, VARIANT * Monument );
__declspec(implementation_key(1839)) HRESULT View::SetSectionPlanes ( long nPlanes, VARIANT * Positions, VARIANT * Normals, VARIANT * FaceStyles );
__declspec(implementation_key(1840)) HRESULT View::GetSectionPlanes ( long * pnPlanes, VARIANT * Positions, VARIANT * Normals, VARIANT * FaceStyles );
__declspec(implementation_key(1841)) HRESULT View::SetAttribute ( long Attribute, const _variant_t & AttributeData );
__declspec(implementation_key(1842)) HRESULT View::GetAttribute ( long Attribute, VARIANT * AttributeData );
__declspec(implementation_key(1843)) HRESULT View::ClearRotationFocus ( );
__declspec(implementation_key(1844)) HRESULT View::GetRotationFocus ( double * pdPointX, double * pdPointY, double * pdPointZ, double * pdDirectionX, double * pdDirectionZ, double * pdDirectionY, double * pdFront, double * pdBack, double * pdRadius, long * puOptions );
__declspec(implementation_key(1845)) HRESULT View::SetRotationPoint ( double dPointX, double dPointY, double dPointZ );
__declspec(implementation_key(1846)) HRESULT View::SetRotationAxis ( double dPointX, double dPointY, double dPointZ, double dDirectionX, double dDirectionY, double dDirectionZ );
__declspec(implementation_key(1847)) HRESULT View::SetRotationFocus ( double dPointX, double dPointY, double dPointZ, double dDirectionX, double dDirectionZ, double dDirectionY, double dFront, double dBack, double dRadius, long uOptions );
__declspec(implementation_key(1848)) HRESULT View::Locate ( long lPointX, long lPointY, long lRadius, double * pdHitPointX, double * pdHitPointY, double * pdHitPointZ );
__declspec(implementation_key(1849)) HRESULT View::GetModelRange ( double * pdLowX, double * pdLowY, double * pdLowZ, double * pdHighX, double * pdHighY, double * pdHighZ );
__declspec(implementation_key(1850)) HRESULT View::OrientCameraEx ( long lFlags, long lButtons, double dX, double dY, double dZ, double dYaw, double dPitch, double dRoll );
__declspec(implementation_key(1851)) HRESULT View::GetCameraEx ( long * lFlags, double * dEyeX, double * dEyeY, double * dEyeZ, double * dTargetX, double * dTargetY, double * dTargetZ, double * dUpX, double * dUpY, double * dUpZ, double * dNearClip, double * dFarClip, double * dFrameWidth, double * dFrameHeight, double * dFrameEyeX, double * dFrameEyeY, double * dFrameScale );
__declspec(implementation_key(1852)) HRESULT View::SetCameraEx ( long lFlags, double dEyeX, double dEyeY, double dEyeZ, double dTargetX, double dTargetY, double dTargetZ, double dUpX, double dUpY, double dUpZ, double dNearClip, double dFarClip, double dFrameWidth, double dFrameHeight, double dFrameEyeX, double dFrameEyeY, double dFrameScale );
__declspec(implementation_key(1853)) HRESULT View::SaveCurrentView ( const _variant_t & Name );
__declspec(implementation_key(1854)) HRESULT View::ApplyNamedView ( const _variant_t & Name );
__declspec(implementation_key(1855)) HRESULT View::AreaZoomCamera ( int X1, int Y1, int X2, int Y2 );
__declspec(implementation_key(1856)) HRESULT View::CreateUserRange ( long * pidUserRange );
__declspec(implementation_key(1857)) HRESULT View::DeleteUserRange ( long idUserRange );
__declspec(implementation_key(1858)) HRESULT View::GetUserRange ( long idUserRange, double * pdLowX, double * pdLowY, double * pdLowZ, double * pdHighX, double * pdHighY, double * pdHighZ );
__declspec(implementation_key(1859)) HRESULT View::SetUserRange ( long idUserRange, double dLowX, double dLowY, double dLowZ, double dHighX, double dHighY, double dHighZ );
__declspec(implementation_key(1860)) unsigned long View::GetMovieFrameRate ( );
__declspec(implementation_key(1861)) void View::PutMovieFrameRate ( unsigned long _arg1 );
__declspec(implementation_key(1862)) unsigned long View::GetMovieBitRate ( );
__declspec(implementation_key(1863)) void View::PutMovieBitRate ( unsigned long _arg1 );
__declspec(implementation_key(1864)) _bstr_t View::GetMovieCodec ( );
__declspec(implementation_key(1865)) void View::PutMovieCodec ( _bstr_t _arg1 );
__declspec(implementation_key(1866)) unsigned long View::GetMovieQuality ( );
__declspec(implementation_key(1867)) void View::PutMovieQuality ( unsigned long _arg1 );
__declspec(implementation_key(1868)) _bstr_t View::GetMovieTitle ( );
__declspec(implementation_key(1869)) void View::PutMovieTitle ( _bstr_t _arg1 );
__declspec(implementation_key(1870)) _bstr_t View::GetMovieSubTitle ( );
__declspec(implementation_key(1871)) void View::PutMovieSubTitle ( _bstr_t _arg1 );
__declspec(implementation_key(1872)) _bstr_t View::GetMovieCopyright ( );
__declspec(implementation_key(1873)) void View::PutMovieCopyright ( _bstr_t _arg1 );
__declspec(implementation_key(1874)) _bstr_t View::GetMovieAuthor ( );
__declspec(implementation_key(1875)) void View::PutMovieAuthor ( _bstr_t _arg1 );
__declspec(implementation_key(1876)) _bstr_t View::GetMovieAuthorURL ( );
__declspec(implementation_key(1877)) void View::PutMovieAuthorURL ( _bstr_t _arg1 );
__declspec(implementation_key(1878)) _bstr_t View::GetMovieDescription ( );
__declspec(implementation_key(1879)) void View::PutMovieDescription ( _bstr_t _arg1 );
__declspec(implementation_key(1880)) HRESULT View::GetAvailableMovieCodecs ( SAFEARRAY * * AvailableCodecs );
__declspec(implementation_key(1881)) HRESULT View::SetMovieResolution ( enum seMovieStandardResolutionConstants StandardMovieResolution );
__declspec(implementation_key(1882)) HRESULT View::SetCustomMovieResolution ( int nWidth, int nHeight );
__declspec(implementation_key(1883)) HRESULT View::CreateMovieRecorder ( enum seMovieFormatConstants Format );
__declspec(implementation_key(1884)) HRESULT View::DestroyMovieRecorder ( );
__declspec(implementation_key(1885)) HRESULT View::BeginMovieRecording ( _bstr_t Filename );
__declspec(implementation_key(1886)) HRESULT View::AddFrameToMovie ( VARIANT_BOOL KeyFrame, int * pNewFrameCount );
__declspec(implementation_key(1887)) HRESULT View::EndMovieRecording ( );
__declspec(implementation_key(1888)) HRESULT View::RangeZoomCamera ( double dLowX, double dLowY, double dLowZ, double dHighX, double dHighY, double dHighZ );
__declspec(implementation_key(1889)) HRESULT View::UserRangeZoomCamera ( long idUserRange );
__declspec(implementation_key(1890)) HRESULT View::RefreshView ( long nOptions );
__declspec(implementation_key(1891)) enum seSharpenLevelConstants View::GetSharpenLevel ( );
__declspec(implementation_key(1892)) void View::PutSharpenLevel ( enum seSharpenLevelConstants _arg1 );
__declspec(implementation_key(1893)) _variant_t View::GetSectionPlanesOptions ( );
__declspec(implementation_key(1894)) void View::PutSectionPlanesOptions ( const _variant_t & _arg1 );
__declspec(implementation_key(1895)) HRESULT View::SetSectionPlanesParams ( const _variant_t & Options, const _variant_t & PlaneCount, VARIANT * Positions, VARIANT * Normals, VARIANT * Colors );
__declspec(implementation_key(1896)) HRESULT View::GetSectionPlanesParams ( VARIANT * Options, VARIANT * PlaneCount, VARIANT * Positions, VARIANT * Normals, VARIANT * Colors );
__declspec(implementation_key(1897)) HRESULT _IWindowAuto::Activate ( );
__declspec(implementation_key(1898)) HRESULT _IWindowAuto::ActivateNext ( );
__declspec(implementation_key(1899)) HRESULT _IWindowAuto::ActivatePrevious ( );
__declspec(implementation_key(1900)) ApplicationPtr _IWindowAuto::GetApplication ( );
__declspec(implementation_key(1901)) _bstr_t _IWindowAuto::GetCaption ( );
__declspec(implementation_key(1902)) void _IWindowAuto::PutCaption ( _bstr_t Caption );
__declspec(implementation_key(1903)) HRESULT _IWindowAuto::Close ( const _variant_t & SaveChanges, const _variant_t & Filename, const _variant_t & RouteWorkbook );
__declspec(implementation_key(1904)) _bstr_t _IWindowAuto::GetEnvironment ( );
__declspec(implementation_key(1905)) void _IWindowAuto::PutEnvironment ( _bstr_t Environment );
__declspec(implementation_key(1906)) int _IWindowAuto::GetHeight ( );
__declspec(implementation_key(1907)) void _IWindowAuto::PutHeight ( int Height );
__declspec(implementation_key(1908)) long _IWindowAuto::GethWnd ( );
__declspec(implementation_key(1909)) int _IWindowAuto::GetIndex ( );
__declspec(implementation_key(1910)) int _IWindowAuto::GetLeft ( );
__declspec(implementation_key(1911)) void _IWindowAuto::PutLeft ( int Left );
__declspec(implementation_key(1912)) IDispatchPtr _IWindowAuto::GetParent ( );
__declspec(implementation_key(1913)) HRESULT _IWindowAuto::PrintOut ( );
__declspec(implementation_key(1914)) SelectSetPtr _IWindowAuto::GetSelectSet ( );
__declspec(implementation_key(1915)) int _IWindowAuto::GetTop ( );
__declspec(implementation_key(1916)) void _IWindowAuto::PutTop ( int Top );
__declspec(implementation_key(1917)) _bstr_t _IWindowAuto::GetType ( );
__declspec(implementation_key(1918)) VARIANT_BOOL _IWindowAuto::GetVisible ( );
__declspec(implementation_key(1919)) void _IWindowAuto::PutVisible ( VARIANT_BOOL Visible );
__declspec(implementation_key(1920)) int _IWindowAuto::GetWidth ( );
__declspec(implementation_key(1921)) void _IWindowAuto::PutWidth ( int Width );
__declspec(implementation_key(1922)) int _IWindowAuto::GetWindowNumber ( );
__declspec(implementation_key(1923)) int _IWindowAuto::GetWindowState ( );
__declspec(implementation_key(1924)) void _IWindowAuto::PutWindowState ( int WindowState );
__declspec(implementation_key(1925)) long _IWindowAuto::GetIcon ( );
__declspec(implementation_key(1926)) HRESULT _IWindowAuto::Paste ( );
__declspec(implementation_key(1927)) int _IWindowAuto::GetUsableHeight ( );
__declspec(implementation_key(1928)) int _IWindowAuto::GetUsableWidth ( );
__declspec(implementation_key(1929)) ViewPtr _IWindowAuto::GetView ( );
__declspec(implementation_key(1930)) long _IWindowAuto::GetDrawHwnd ( );
__declspec(implementation_key(1931)) IDispatchPtr _IWindowAuto::GetAttributeSets ( );
__declspec(implementation_key(1932)) VARIANT_BOOL _IWindowAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(1933)) VARIANT_BOOL _IWindowAuto::GetFloating ( );
__declspec(implementation_key(1934)) HRESULT _IWindowAuto::FloatWindow ( );
__declspec(implementation_key(1935)) HRESULT _IWindowAuto::DockWindow ( );
__declspec(implementation_key(1936)) int _IWindowAuto::GetWidthEx ( );
__declspec(implementation_key(1937)) void _IWindowAuto::PutWidthEx ( int Width );
__declspec(implementation_key(1938)) int _IWindowAuto::GetHeightEx ( );
__declspec(implementation_key(1939)) void _IWindowAuto::PutHeightEx ( int Height );
__declspec(implementation_key(1940)) HRESULT Window::Activate ( );
__declspec(implementation_key(1941)) HRESULT Window::ActivateNext ( );
__declspec(implementation_key(1942)) HRESULT Window::ActivatePrevious ( );
__declspec(implementation_key(1943)) ApplicationPtr Window::GetApplication ( );
__declspec(implementation_key(1944)) _bstr_t Window::GetCaption ( );
__declspec(implementation_key(1945)) void Window::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(1946)) HRESULT Window::Close ( const _variant_t & SaveChanges, const _variant_t & Filename, const _variant_t & RouteWorkbook );
__declspec(implementation_key(1947)) _bstr_t Window::GetEnvironment ( );
__declspec(implementation_key(1948)) void Window::PutEnvironment ( _bstr_t _arg1 );
__declspec(implementation_key(1949)) int Window::GetHeight ( );
__declspec(implementation_key(1950)) void Window::PutHeight ( int _arg1 );
__declspec(implementation_key(1951)) long Window::GethWnd ( );
__declspec(implementation_key(1952)) int Window::GetIndex ( );
__declspec(implementation_key(1953)) int Window::GetLeft ( );
__declspec(implementation_key(1954)) void Window::PutLeft ( int _arg1 );
__declspec(implementation_key(1955)) IDispatchPtr Window::GetParent ( );
__declspec(implementation_key(1956)) HRESULT Window::PrintOut ( );
__declspec(implementation_key(1957)) SelectSetPtr Window::GetSelectSet ( );
__declspec(implementation_key(1958)) int Window::GetTop ( );
__declspec(implementation_key(1959)) void Window::PutTop ( int _arg1 );
__declspec(implementation_key(1960)) _bstr_t Window::GetType ( );
__declspec(implementation_key(1961)) VARIANT_BOOL Window::GetVisible ( );
__declspec(implementation_key(1962)) void Window::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1963)) int Window::GetWidth ( );
__declspec(implementation_key(1964)) void Window::PutWidth ( int _arg1 );
__declspec(implementation_key(1965)) int Window::GetWindowNumber ( );
__declspec(implementation_key(1966)) int Window::GetWindowState ( );
__declspec(implementation_key(1967)) void Window::PutWindowState ( int _arg1 );
__declspec(implementation_key(1968)) long Window::GetIcon ( );
__declspec(implementation_key(1969)) HRESULT Window::Paste ( );
__declspec(implementation_key(1970)) int Window::GetUsableHeight ( );
__declspec(implementation_key(1971)) int Window::GetUsableWidth ( );
__declspec(implementation_key(1972)) ViewPtr Window::GetView ( );
__declspec(implementation_key(1973)) long Window::GetDrawHwnd ( );
__declspec(implementation_key(1974)) IDispatchPtr Window::GetAttributeSets ( );
__declspec(implementation_key(1975)) VARIANT_BOOL Window::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(1976)) VARIANT_BOOL Window::GetFloating ( );
__declspec(implementation_key(1977)) HRESULT Window::FloatWindow ( );
__declspec(implementation_key(1978)) HRESULT Window::DockWindow ( );
__declspec(implementation_key(1979)) int Window::GetWidthEx ( );
__declspec(implementation_key(1980)) void Window::PutWidthEx ( int _arg1 );
__declspec(implementation_key(1981)) int Window::GetHeightEx ( );
__declspec(implementation_key(1982)) void Window::PutHeightEx ( int _arg1 );
__declspec(implementation_key(1983)) HRESULT DISEViewEvents::Changed ( );
__declspec(implementation_key(1984)) HRESULT DISEViewEvents::Destroyed ( );
__declspec(implementation_key(1985)) HRESULT DISEViewEvents::StyleChanged ( );
__declspec(implementation_key(1986)) HRESULT ISEViewEvents::Changed ( );
__declspec(implementation_key(1987)) HRESULT ISEViewEvents::Destroyed ( );
__declspec(implementation_key(1988)) HRESULT ISEViewEvents::StyleChanged ( );
__declspec(implementation_key(1989)) HRESULT DISEhDCDisplayEvents::BeginDisplay ( );
__declspec(implementation_key(1990)) HRESULT DISEhDCDisplayEvents::EndDisplay ( );
__declspec(implementation_key(1991)) HRESULT DISEhDCDisplayEvents::BeginhDCMainDisplay ( long hDC, SAFEARRAY * * ModelToDC, SAFEARRAY * * Rect );
__declspec(implementation_key(1992)) HRESULT DISEhDCDisplayEvents::EndhDCMainDisplay ( long hDC, SAFEARRAY * * ModelToDC, SAFEARRAY * * Rect );
__declspec(implementation_key(1993)) HRESULT ISEhDCDisplayEvents::BeginDisplay ( );
__declspec(implementation_key(1994)) HRESULT ISEhDCDisplayEvents::EndDisplay ( );
__declspec(implementation_key(1995)) HRESULT ISEhDCDisplayEvents::BeginhDCMainDisplay ( long hDC, double * ModelToDC, long * Rect );
__declspec(implementation_key(1996)) HRESULT ISEhDCDisplayEvents::EndhDCMainDisplay ( long hDC, double * ModelToDC, long * Rect );
__declspec(implementation_key(1997)) HRESULT ISEIGLDisplayEvents::BeginDisplay ( );
__declspec(implementation_key(1998)) HRESULT ISEIGLDisplayEvents::EndDisplay ( );
__declspec(implementation_key(1999)) HRESULT ISEIGLDisplayEvents::BeginIGLMainDisplay ( IUnknown * pUnknownIGL );
__declspec(implementation_key(2000)) HRESULT ISEIGLDisplayEvents::EndIGLMainDisplay ( IUnknown * pUnknownIGL );
__declspec(implementation_key(2001)) HRESULT ISERenderEvents::PreRender ( IUnknown * pDevice, IUnknown * pScene );
__declspec(implementation_key(2002)) HRESULT ISERenderEvents::Render ( IUnknown * pDevice, IUnknown * pScene, IUnknown * pProgress );
__declspec(implementation_key(2003)) HRESULT ISERenderEvents::PostRender ( IUnknown * pDevice, IUnknown * pScene );
__declspec(implementation_key(2004)) HRESULT DISEAnimationEvents::AnimationEvent ( enum AnimationEventConstants AnimationEventType, int nFrame );
__declspec(implementation_key(2005)) HRESULT ISEAnimationEvents::AnimationEvent ( enum AnimationEventConstants AnimationEventType, int nFrame );
__declspec(implementation_key(2006)) HRESULT _IViewAuto::Fit ( );
__declspec(implementation_key(2007)) WindowPtr _IViewAuto::GetWindow ( );
__declspec(implementation_key(2008)) HRESULT _IViewAuto::ModelToDC ( SAFEARRAY * * Matrix );
__declspec(implementation_key(2009)) HRESULT _IViewAuto::ModelToView ( SAFEARRAY * * Matrix );
__declspec(implementation_key(2010)) HRESULT _IViewAuto::ViewToGLProjection ( SAFEARRAY * * Matrix );
__declspec(implementation_key(2011)) HRESULT _IViewAuto::Update ( );
__declspec(implementation_key(2012)) HRESULT _IViewAuto::ShowDrawDC ( );
__declspec(implementation_key(2013)) HRESULT _IViewAuto::SwapBuffers ( );
__declspec(implementation_key(2014)) long _IViewAuto::GetDrawDC ( );
__declspec(implementation_key(2015)) HRESULT _IViewAuto::GetCamera ( double * EyeX, double * EyeY, double * EyeZ, double * TargetX, double * TargetY, double * TargetZ, double * UpX, double * UpY, double * UpZ, VARIANT_BOOL * Perspective, double * ScaleOrAngle );
__declspec(implementation_key(2016)) HRESULT _IViewAuto::BeginCameraDynamics ( );
__declspec(implementation_key(2017)) HRESULT _IViewAuto::SetCamera ( double EyeX, double EyeY, double EyeZ, double TargetX, double TargetY, double TargetZ, double UpX, double UpY, double UpZ, VARIANT_BOOL Perspective, double ScaleOrAngle );
__declspec(implementation_key(2018)) HRESULT _IViewAuto::EndCameraDynamics ( );
__declspec(implementation_key(2019)) HRESULT _IViewAuto::RotateCamera ( double Angle, double CenterX, double CenterY, double CenterZ, double AxisX, double AxisY, double AxisZ );
__declspec(implementation_key(2020)) HRESULT _IViewAuto::PanCamera ( int dX, int dY );
__declspec(implementation_key(2021)) HRESULT _IViewAuto::ZoomCamera ( double __MIDL___IViewAuto0000 );
__declspec(implementation_key(2022)) HRESULT _IViewAuto::OrientCamera ( int cmdtype, int X1, int Y1, int X2, int Y2, int X3, int Y3 );
__declspec(implementation_key(2023)) IUnknownPtr _IViewAuto::GetViewEvents ( );
__declspec(implementation_key(2024)) IUnknownPtr _IViewAuto::GetDisplayEvents ( );
__declspec(implementation_key(2025)) IUnknownPtr _IViewAuto::GetGLDisplayEvents ( );
__declspec(implementation_key(2026)) IUnknownPtr _IViewAuto::GetRenderEvents ( );
__declspec(implementation_key(2027)) IUnknownPtr _IViewAuto::GetAnimationEvents ( );
__declspec(implementation_key(2028)) VARIANT_BOOL _IViewAuto::GetDisplayEnabled ( );
__declspec(implementation_key(2029)) void _IViewAuto::PutDisplayEnabled ( VARIANT_BOOL Enabled );
__declspec(implementation_key(2030)) VARIANT_BOOL _IViewAuto::GetCullingEnabled ( );
__declspec(implementation_key(2031)) void _IViewAuto::PutCullingEnabled ( VARIANT_BOOL Enabled );
__declspec(implementation_key(2032)) VARIANT_BOOL _IViewAuto::GetStyleFallbackEnabled ( );
__declspec(implementation_key(2033)) void _IViewAuto::PutStyleFallbackEnabled ( VARIANT_BOOL Enabled );
__declspec(implementation_key(2034)) int _IViewAuto::GetSharpnessLevelCount ( );
__declspec(implementation_key(2035)) int _IViewAuto::GetSharpnessLevel ( );
__declspec(implementation_key(2036)) void _IViewAuto::PutSharpnessLevel ( int Level );
__declspec(implementation_key(2037)) VARIANT_BOOL _IViewAuto::GetStereoEnabled ( );
__declspec(implementation_key(2038)) void _IViewAuto::PutStereoEnabled ( VARIANT_BOOL Stereo );
__declspec(implementation_key(2039)) double _IViewAuto::GetStereoAngle ( );
__declspec(implementation_key(2040)) void _IViewAuto::PutStereoAngle ( double Angle );
__declspec(implementation_key(2041)) double _IViewAuto::GetStereoDeviation ( );
__declspec(implementation_key(2042)) void _IViewAuto::PutStereoDeviation ( double Deviation );
__declspec(implementation_key(2043)) HRESULT _IViewAuto::TransformModelToDC ( double ModelX, double ModelY, double ModelZ, long * DeviceX, long * DeviceY );
__declspec(implementation_key(2044)) HRESULT _IViewAuto::TransformDCToModel ( long DeviceX, long DeviceY, double * ModelX, double * ModelY, double * ModelZ );
__declspec(implementation_key(2045)) HRESULT _IViewAuto::TransformModelToView ( double ModelX, double ModelY, double ModelZ, double * ViewX, double * ViewY, double * ViewZ );
__declspec(implementation_key(2046)) HRESULT _IViewAuto::TransformViewToModel ( double ViewX, double ViewY, double ViewZ, double * ModelX, double * ModelY, double * ModelZ );
__declspec(implementation_key(2047)) HRESULT _IViewAuto::TransformGLProjectionToView ( double GLX, double GLY, double GLlZ, double * ViewX, double * ViewY, double * ViewZ );
__declspec(implementation_key(2048)) HRESULT _IViewAuto::TransformViewToGLProjection ( double ViewX, double ViewY, double ViewZ, double * GLX, double * GLY, double * GLZ );
__declspec(implementation_key(2049)) HRESULT _IViewAuto::GetCounter ( int Type, VARIANT_BOOL bReset, double * dCounter );
__declspec(implementation_key(2050)) VARIANT_BOOL _IViewAuto::GetGDIBufferModified ( );
__declspec(implementation_key(2051)) void _IViewAuto::PutGDIBufferModified ( VARIANT_BOOL GDIBufferModified );
__declspec(implementation_key(2052)) HRESULT _IViewAuto::SaveAsImage ( _bstr_t Filename, const _variant_t & Width, const _variant_t & Height, const _variant_t & AltViewStyle, const _variant_t & Resolution, const _variant_t & ColorDepth, enum SeImageQualityType ImageQuality, VARIANT_BOOL Invert );
__declspec(implementation_key(2053)) IDispatchPtr _IViewAuto::GetViewStyle ( );
__declspec(implementation_key(2054)) void _IViewAuto::PutViewStyle ( IDispatch * ViewStyle );
__declspec(implementation_key(2055)) _bstr_t _IViewAuto::GetStyle ( );
__declspec(implementation_key(2056)) void _IViewAuto::PutStyle ( _bstr_t Style );
__declspec(implementation_key(2057)) HRESULT _IViewAuto::SetRenderMode ( const _variant_t & mode );
__declspec(implementation_key(2058)) enum SeRenderModeType _IViewAuto::GetRenderModeType ( );
__declspec(implementation_key(2059)) void _IViewAuto::PutRenderModeType ( enum SeRenderModeType pbEnabled );
__declspec(implementation_key(2060)) VARIANT_BOOL _IViewAuto::GetSilhouettesEnabled ( );
__declspec(implementation_key(2061)) void _IViewAuto::PutSilhouettesEnabled ( VARIANT_BOOL pbEnabled );
__declspec(implementation_key(2062)) VARIANT_BOOL _IViewAuto::GetSectionPlanesEnabled ( );
__declspec(implementation_key(2063)) void _IViewAuto::PutSectionPlanesEnabled ( VARIANT_BOOL pbEnabled );
__declspec(implementation_key(2064)) HRESULT _IViewAuto::SetDisplayDepths ( double dFront, double dBack, VARIANT * FrontFaceStyle, VARIANT * BackFaceStyle, VARIANT * Monument );
__declspec(implementation_key(2065)) HRESULT _IViewAuto::GetDisplayDepths ( double * pdFront, double * pdBack, VARIANT * FrontFaceStyle, VARIANT * BackFaceStyle, VARIANT * Monument );
__declspec(implementation_key(2066)) HRESULT _IViewAuto::SetSectionPlanes ( long nPlanes, VARIANT * Positions, VARIANT * Normals, VARIANT * FaceStyles );
__declspec(implementation_key(2067)) HRESULT _IViewAuto::GetSectionPlanes ( long * pnPlanes, VARIANT * Positions, VARIANT * Normals, VARIANT * FaceStyles );
__declspec(implementation_key(2068)) HRESULT _IViewAuto::SetAttribute ( long Attribute, const _variant_t & AttributeData );
__declspec(implementation_key(2069)) HRESULT _IViewAuto::GetAttribute ( long Attribute, VARIANT * AttributeData );
__declspec(implementation_key(2070)) HRESULT _IViewAuto::ClearRotationFocus ( );
__declspec(implementation_key(2071)) HRESULT _IViewAuto::GetRotationFocus ( double * pdPointX, double * pdPointY, double * pdPointZ, double * pdDirectionX, double * pdDirectionZ, double * pdDirectionY, double * pdFront, double * pdBack, double * pdRadius, long * puOptions );
__declspec(implementation_key(2072)) HRESULT _IViewAuto::SetRotationPoint ( double dPointX, double dPointY, double dPointZ );
__declspec(implementation_key(2073)) HRESULT _IViewAuto::SetRotationAxis ( double dPointX, double dPointY, double dPointZ, double dDirectionX, double dDirectionY, double dDirectionZ );
__declspec(implementation_key(2074)) HRESULT _IViewAuto::SetRotationFocus ( double dPointX, double dPointY, double dPointZ, double dDirectionX, double dDirectionZ, double dDirectionY, double dFront, double dBack, double dRadius, long uOptions );
__declspec(implementation_key(2075)) HRESULT _IViewAuto::Locate ( long lPointX, long lPointY, long lRadius, double * pdHitPointX, double * pdHitPointY, double * pdHitPointZ );
__declspec(implementation_key(2076)) HRESULT _IViewAuto::GetModelRange ( double * pdLowX, double * pdLowY, double * pdLowZ, double * pdHighX, double * pdHighY, double * pdHighZ );
__declspec(implementation_key(2077)) HRESULT _IViewAuto::OrientCameraEx ( long lFlags, long lButtons, double dX, double dY, double dZ, double dYaw, double dPitch, double dRoll );
__declspec(implementation_key(2078)) HRESULT _IViewAuto::GetCameraEx ( long * lFlags, double * dEyeX, double * dEyeY, double * dEyeZ, double * dTargetX, double * dTargetY, double * dTargetZ, double * dUpX, double * dUpY, double * dUpZ, double * dNearClip, double * dFarClip, double * dFrameWidth, double * dFrameHeight, double * dFrameEyeX, double * dFrameEyeY, double * dFrameScale );
__declspec(implementation_key(2079)) HRESULT _IViewAuto::SetCameraEx ( long lFlags, double dEyeX, double dEyeY, double dEyeZ, double dTargetX, double dTargetY, double dTargetZ, double dUpX, double dUpY, double dUpZ, double dNearClip, double dFarClip, double dFrameWidth, double dFrameHeight, double dFrameEyeX, double dFrameEyeY, double dFrameScale );
__declspec(implementation_key(2080)) HRESULT _IViewAuto::SaveCurrentView ( const _variant_t & Name );
__declspec(implementation_key(2081)) HRESULT _IViewAuto::ApplyNamedView ( const _variant_t & Name );
__declspec(implementation_key(2082)) HRESULT _IViewAuto::AreaZoomCamera ( int X1, int Y1, int X2, int Y2 );
__declspec(implementation_key(2083)) HRESULT _IViewAuto::CreateUserRange ( long * pidUserRange );
__declspec(implementation_key(2084)) HRESULT _IViewAuto::DeleteUserRange ( long idUserRange );
__declspec(implementation_key(2085)) HRESULT _IViewAuto::GetUserRange ( long idUserRange, double * pdLowX, double * pdLowY, double * pdLowZ, double * pdHighX, double * pdHighY, double * pdHighZ );
__declspec(implementation_key(2086)) HRESULT _IViewAuto::SetUserRange ( long idUserRange, double dLowX, double dLowY, double dLowZ, double dHighX, double dHighY, double dHighZ );
__declspec(implementation_key(2087)) unsigned long _IViewAuto::GetMovieFrameRate ( );
__declspec(implementation_key(2088)) void _IViewAuto::PutMovieFrameRate ( unsigned long pdwMovieFrameRate );
__declspec(implementation_key(2089)) unsigned long _IViewAuto::GetMovieBitRate ( );
__declspec(implementation_key(2090)) void _IViewAuto::PutMovieBitRate ( unsigned long pdwMovieBitRate );
__declspec(implementation_key(2091)) _bstr_t _IViewAuto::GetMovieCodec ( );
__declspec(implementation_key(2092)) void _IViewAuto::PutMovieCodec ( _bstr_t pCodec );
__declspec(implementation_key(2093)) unsigned long _IViewAuto::GetMovieQuality ( );
__declspec(implementation_key(2094)) void _IViewAuto::PutMovieQuality ( unsigned long pdwMovieQuality );
__declspec(implementation_key(2095)) _bstr_t _IViewAuto::GetMovieTitle ( );
__declspec(implementation_key(2096)) void _IViewAuto::PutMovieTitle ( _bstr_t pTitle );
__declspec(implementation_key(2097)) _bstr_t _IViewAuto::GetMovieSubTitle ( );
__declspec(implementation_key(2098)) void _IViewAuto::PutMovieSubTitle ( _bstr_t pSubTitle );
__declspec(implementation_key(2099)) _bstr_t _IViewAuto::GetMovieCopyright ( );
__declspec(implementation_key(2100)) void _IViewAuto::PutMovieCopyright ( _bstr_t pCopyright );
__declspec(implementation_key(2101)) _bstr_t _IViewAuto::GetMovieAuthor ( );
__declspec(implementation_key(2102)) void _IViewAuto::PutMovieAuthor ( _bstr_t pAuthor );
__declspec(implementation_key(2103)) _bstr_t _IViewAuto::GetMovieAuthorURL ( );
__declspec(implementation_key(2104)) void _IViewAuto::PutMovieAuthorURL ( _bstr_t pAuthorURL );
__declspec(implementation_key(2105)) _bstr_t _IViewAuto::GetMovieDescription ( );
__declspec(implementation_key(2106)) void _IViewAuto::PutMovieDescription ( _bstr_t pDescription );
__declspec(implementation_key(2107)) HRESULT _IViewAuto::GetAvailableMovieCodecs ( SAFEARRAY * * AvailableCodecs );
__declspec(implementation_key(2108)) HRESULT _IViewAuto::SetMovieResolution ( enum seMovieStandardResolutionConstants StandardMovieResolution );
__declspec(implementation_key(2109)) HRESULT _IViewAuto::SetCustomMovieResolution ( int nWidth, int nHeight );
__declspec(implementation_key(2110)) HRESULT _IViewAuto::CreateMovieRecorder ( enum seMovieFormatConstants Format );
__declspec(implementation_key(2111)) HRESULT _IViewAuto::DestroyMovieRecorder ( );
__declspec(implementation_key(2112)) HRESULT _IViewAuto::BeginMovieRecording ( _bstr_t Filename );
__declspec(implementation_key(2113)) HRESULT _IViewAuto::AddFrameToMovie ( VARIANT_BOOL KeyFrame, int * pNewFrameCount );
__declspec(implementation_key(2114)) HRESULT _IViewAuto::EndMovieRecording ( );
__declspec(implementation_key(2115)) HRESULT _IViewAuto::RangeZoomCamera ( double dLowX, double dLowY, double dLowZ, double dHighX, double dHighY, double dHighZ );
__declspec(implementation_key(2116)) HRESULT _IViewAuto::UserRangeZoomCamera ( long idUserRange );
__declspec(implementation_key(2117)) HRESULT _IViewAuto::RefreshView ( long nOptions );
__declspec(implementation_key(2118)) enum seSharpenLevelConstants _IViewAuto::GetSharpenLevel ( );
__declspec(implementation_key(2119)) void _IViewAuto::PutSharpenLevel ( enum seSharpenLevelConstants peLevel );
__declspec(implementation_key(2120)) _variant_t _IViewAuto::GetSectionPlanesOptions ( );
__declspec(implementation_key(2121)) void _IViewAuto::PutSectionPlanesOptions ( const _variant_t & Options );
__declspec(implementation_key(2122)) HRESULT _IViewAuto::SetSectionPlanesParams ( const _variant_t & Options, const _variant_t & PlaneCount, VARIANT * Positions, VARIANT * Normals, VARIANT * Colors );
__declspec(implementation_key(2123)) HRESULT _IViewAuto::GetSectionPlanesParams ( VARIANT * Options, VARIANT * PlaneCount, VARIANT * Positions, VARIANT * Normals, VARIANT * Colors );
__declspec(implementation_key(2124)) _bstr_t NamedView::GetName ( );
__declspec(implementation_key(2125)) void NamedView::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(2126)) _bstr_t NamedView::GetDescription ( );
__declspec(implementation_key(2127)) void NamedView::PutDescription ( _bstr_t _arg1 );
__declspec(implementation_key(2128)) HRESULT NamedView::GetCamera ( double * EyeX, double * EyeY, double * EyeZ, double * TargetX, double * TargetY, double * TargetZ, double * UpX, double * UpY, double * UpZ, VARIANT_BOOL * Perspective, double * ScaleOrAngle );
__declspec(implementation_key(2129)) HRESULT NamedView::SetCamera ( double EyeX, double EyeY, double EyeZ, double TargetX, double TargetY, double TargetZ, double UpX, double UpY, double UpZ, VARIANT_BOOL Perspective, double ScaleOrAngle );
__declspec(implementation_key(2130)) HRESULT NamedView::GetCameraEx ( long * plFlags, double * pdEyeX, double * pdEyeY, double * pdEyeZ, double * pdTargetX, double * pdTargetY, double * pdTargetZ, double * pdUpX, double * pdUpY, double * pdUpZ, double * pdNearClip, double * pdFarClip, double * pdFrameWidth, double * pdFrameHeight, double * pdFrameEyeX, double * pdFrameEyeY, double * pdFrameScale );
__declspec(implementation_key(2131)) HRESULT NamedView::SetCameraEx ( long lFlags, double dEyeX, double dEyeY, double dEyeZ, double dTargetX, double dTargetY, double dTargetZ, double dUpX, double dUpY, double dUpZ, double dNearClip, double dFarClip, double dFrameWidth, double dFrameHeight, double dFrameEyeX, double dFrameEyeY, double dFrameScale );
__declspec(implementation_key(2132)) long _INamedViewsAuto::GetCount ( );
__declspec(implementation_key(2133)) SAFEARRAY * _INamedViewsAuto::GetNames ( );
__declspec(implementation_key(2134)) NamedViewPtr _INamedViewsAuto::Create ( _bstr_t Name );
__declspec(implementation_key(2135)) NamedViewPtr _INamedViewsAuto::GetByName ( _bstr_t Name );
__declspec(implementation_key(2136)) HRESULT _INamedViewsAuto::Remove ( _bstr_t Name );
__declspec(implementation_key(2137)) HRESULT _INamedViewsAuto::Rename ( _bstr_t currName, _bstr_t NewName );
__declspec(implementation_key(2138)) IUnknownPtr _INamedViewsAuto::Get_NewEnum ( );
__declspec(implementation_key(2139)) NamedViewPtr _INamedViewsAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(2140)) _bstr_t _INamedViewAuto::GetName ( );
__declspec(implementation_key(2141)) void _INamedViewAuto::PutName ( _bstr_t Name );
__declspec(implementation_key(2142)) _bstr_t _INamedViewAuto::GetDescription ( );
__declspec(implementation_key(2143)) void _INamedViewAuto::PutDescription ( _bstr_t Description );
__declspec(implementation_key(2144)) HRESULT _INamedViewAuto::GetCamera ( double * EyeX, double * EyeY, double * EyeZ, double * TargetX, double * TargetY, double * TargetZ, double * UpX, double * UpY, double * UpZ, VARIANT_BOOL * Perspective, double * ScaleOrAngle );
__declspec(implementation_key(2145)) HRESULT _INamedViewAuto::SetCamera ( double EyeX, double EyeY, double EyeZ, double TargetX, double TargetY, double TargetZ, double UpX, double UpY, double UpZ, VARIANT_BOOL Perspective, double ScaleOrAngle );
__declspec(implementation_key(2146)) HRESULT _INamedViewAuto::GetCameraEx ( long * plFlags, double * pdEyeX, double * pdEyeY, double * pdEyeZ, double * pdTargetX, double * pdTargetY, double * pdTargetZ, double * pdUpX, double * pdUpY, double * pdUpZ, double * pdNearClip, double * pdFarClip, double * pdFrameWidth, double * pdFrameHeight, double * pdFrameEyeX, double * pdFrameEyeY, double * pdFrameScale );
__declspec(implementation_key(2147)) HRESULT _INamedViewAuto::SetCameraEx ( long lFlags, double dEyeX, double dEyeY, double dEyeZ, double dTargetX, double dTargetY, double dTargetZ, double dUpX, double dUpY, double dUpZ, double dNearClip, double dFarClip, double dFrameWidth, double dFrameHeight, double dFrameEyeX, double dFrameEyeY, double dFrameScale );
__declspec(implementation_key(2148)) enum UnitTypeConstants UnitOfMeasure::GetType ( );
__declspec(implementation_key(2149)) int UnitOfMeasure::GetUnits ( );
__declspec(implementation_key(2150)) void UnitOfMeasure::PutUnits ( int _arg1 );
__declspec(implementation_key(2151)) int UnitOfMeasure::GetPrecision ( );
__declspec(implementation_key(2152)) void UnitOfMeasure::PutPrecision ( int _arg1 );
__declspec(implementation_key(2153)) _variant_t _IUnitsOfMeasureAuto::ParseUnit ( int Index, _bstr_t UnitString );
__declspec(implementation_key(2154)) _variant_t _IUnitsOfMeasureAuto::FormatUnit ( int Index, double Dbus, const _variant_t & PrecisionConstant );
__declspec(implementation_key(2155)) ApplicationPtr _IUnitsOfMeasureAuto::GetApplication ( );
__declspec(implementation_key(2156)) IDispatchPtr _IUnitsOfMeasureAuto::GetParent ( );
__declspec(implementation_key(2157)) long _IUnitsOfMeasureAuto::GetCount ( );
__declspec(implementation_key(2158)) IUnknownPtr _IUnitsOfMeasureAuto::Get_NewEnum ( );
__declspec(implementation_key(2159)) UnitOfMeasurePtr _IUnitsOfMeasureAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(2160)) enum UnitTypeConstants _IUnitOfMeasureAuto::GetType ( );
__declspec(implementation_key(2161)) int _IUnitOfMeasureAuto::GetUnits ( );
__declspec(implementation_key(2162)) void _IUnitOfMeasureAuto::PutUnits ( int Units );
__declspec(implementation_key(2163)) int _IUnitOfMeasureAuto::GetPrecision ( );
__declspec(implementation_key(2164)) void _IUnitOfMeasureAuto::PutPrecision ( int Precision );
__declspec(implementation_key(2165)) HRESULT _ICPDInitializerBiDMAuto::GetDocuments ( SAFEARRAY * * psaDocs );
__declspec(implementation_key(2166)) HRESULT _ICPDInitializerBiDMAuto::GetPropertiesInfo ( _bstr_t bstrDocName, VARIANT * pvPropInfo );
__declspec(implementation_key(2167)) HRESULT _ICPDInitializerBiDMAuto::SetPropertiesInfo ( _bstr_t bstrDocName, const _variant_t & vPropInfo );
__declspec(implementation_key(2168)) HRESULT _ICPDInitializerBiDMAuto::SetControlsBehavior ( VARIANT_BOOL vbDisableAssignAllButtonAndMenu, VARIANT_BOOL vbDisableDocumentNumberCell, VARIANT_BOOL vbDisableRevisionIDCell );
__declspec(implementation_key(2169)) IDispatchPtr CommandBarPopup::GetApplication ( );
__declspec(implementation_key(2170)) VARIANT_BOOL CommandBarPopup::GetBeginGroup ( );
__declspec(implementation_key(2171)) void CommandBarPopup::PutBeginGroup ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2172)) VARIANT_BOOL CommandBarPopup::GetBuiltIn ( );
__declspec(implementation_key(2173)) VARIANT_BOOL CommandBarPopup::GetBuiltInFace ( );
__declspec(implementation_key(2174)) void CommandBarPopup::PutBuiltInFace ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2175)) _bstr_t CommandBarPopup::GetCaption ( );
__declspec(implementation_key(2176)) void CommandBarPopup::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(2177)) _bstr_t CommandBarPopup::GetDescriptionText ( );
__declspec(implementation_key(2178)) void CommandBarPopup::PutDescriptionText ( _bstr_t _arg1 );
__declspec(implementation_key(2179)) VARIANT_BOOL CommandBarPopup::GetEnabled ( );
__declspec(implementation_key(2180)) void CommandBarPopup::PutEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2181)) long CommandBarPopup::GetFaceId ( );
__declspec(implementation_key(2182)) void CommandBarPopup::PutFaceId ( long _arg1 );
__declspec(implementation_key(2183)) long CommandBarPopup::GetHeight ( );
__declspec(implementation_key(2184)) long CommandBarPopup::GetHelpContextId ( );
__declspec(implementation_key(2185)) void CommandBarPopup::PutHelpContextId ( long _arg1 );
__declspec(implementation_key(2186)) _bstr_t CommandBarPopup::GetHelpFile ( );
__declspec(implementation_key(2187)) void CommandBarPopup::PutHelpFile ( _bstr_t _arg1 );
__declspec(implementation_key(2188)) long CommandBarPopup::GetId ( );
__declspec(implementation_key(2189)) long CommandBarPopup::GetIndex ( );
__declspec(implementation_key(2190)) long CommandBarPopup::GetLeft ( );
__declspec(implementation_key(2191)) _bstr_t CommandBarPopup::GetOnAction ( );
__declspec(implementation_key(2192)) void CommandBarPopup::PutOnAction ( _bstr_t _arg1 );
__declspec(implementation_key(2193)) _bstr_t CommandBarPopup::GetParameterText ( );
__declspec(implementation_key(2194)) void CommandBarPopup::PutParameterText ( _bstr_t _arg1 );
__declspec(implementation_key(2195)) CommandBarPtr CommandBarPopup::GetParent ( );
__declspec(implementation_key(2196)) _bstr_t CommandBarPopup::GetShortcutText ( );
__declspec(implementation_key(2197)) void CommandBarPopup::PutShortcutText ( _bstr_t _arg1 );
__declspec(implementation_key(2198)) _bstr_t CommandBarPopup::GetTag ( );
__declspec(implementation_key(2199)) void CommandBarPopup::PutTag ( _bstr_t _arg1 );
__declspec(implementation_key(2200)) _bstr_t CommandBarPopup::GetTooltipText ( );
__declspec(implementation_key(2201)) void CommandBarPopup::PutTooltipText ( _bstr_t _arg1 );
__declspec(implementation_key(2202)) long CommandBarPopup::GetTop ( );
__declspec(implementation_key(2203)) enum SeControlType CommandBarPopup::GetType ( );
__declspec(implementation_key(2204)) VARIANT_BOOL CommandBarPopup::GetVisible ( );
__declspec(implementation_key(2205)) void CommandBarPopup::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2206)) long CommandBarPopup::GetWidth ( );
__declspec(implementation_key(2207)) HRESULT CommandBarPopup::Delete ( const _variant_t & Temporary );
__declspec(implementation_key(2208)) HRESULT CommandBarPopup::Execute ( );
__declspec(implementation_key(2209)) HRESULT CommandBarPopup::Help ( );
__declspec(implementation_key(2210)) HRESULT CommandBarPopup::LoadFace ( _bstr_t Face );
__declspec(implementation_key(2211)) CommandBarPtr CommandBarPopup::GetCommandBar ( );
__declspec(implementation_key(2212)) CommandBarControlsPtr CommandBarPopup::GetControls ( );
__declspec(implementation_key(2213)) CommandBarPtr ISECommandBarPopup::GetCommandBar ( );
__declspec(implementation_key(2214)) CommandBarControlsPtr ISECommandBarPopup::GetControls ( );
__declspec(implementation_key(2215)) HRESULT DISEBendTableEvents::BendTableStart ( );
__declspec(implementation_key(2216)) HRESULT DISEBendTableEvents::BendTableEnd ( );
__declspec(implementation_key(2217)) HRESULT DISEBendTableEvents::BendSelect ( long BendIndex, long ColumnId );
__declspec(implementation_key(2218)) HRESULT DISEBendTableEvents::BendUserDataChanged ( long BendIndex, long ColumnId );
__declspec(implementation_key(2219)) HRESULT ISEDocumentEvents::BeforeClose ( );
__declspec(implementation_key(2220)) HRESULT ISEDocumentEvents::BeforeSave ( );
__declspec(implementation_key(2221)) HRESULT ISEDocumentEvents::AfterSave ( );
__declspec(implementation_key(2222)) HRESULT ISEDocumentEvents::SelectSetChanged ( IDispatch * SelectSet );
__declspec(implementation_key(2223)) HRESULT ISEDocumentEventsEx::CanSave ( VARIANT_BOOL * bCanSave );
__declspec(implementation_key(2224)) HRESULT ISEDocumentEventsEx::CanClose ( VARIANT_BOOL * bCanClose );
__declspec(implementation_key(2225)) HRESULT ISEBendTableEvents::BendTableStart ( );
__declspec(implementation_key(2226)) HRESULT ISEBendTableEvents::BendTableEnd ( );
__declspec(implementation_key(2227)) HRESULT ISEBendTableEvents::BendSelect ( long BendIndex, long ColumnId );
__declspec(implementation_key(2228)) HRESULT ISEBendTableEvents::BendUserDataChanged ( long BendIndex, long ColumnId );
__declspec(implementation_key(2229)) HRESULT ISEModelRecomputeEvents::BeforeRecompute ( );
__declspec(implementation_key(2230)) HRESULT ISEModelRecomputeEvents::AfterFeatureIsAdded ( enum SeFeatureAddFlag AddFlag, IDispatch * Feature );
__declspec(implementation_key(2231)) HRESULT ISEModelRecomputeEvents::BeforeFeatureIsDeleted ( enum SeFeatureDeleteFlag DeleteFlag, IDispatch * Feature );
__declspec(implementation_key(2232)) HRESULT ISEModelRecomputeEvents::AfterFeatureIsModified ( enum SeFeatureModifyFlag ModifyFlag, IDispatch * Feature );
__declspec(implementation_key(2233)) HRESULT ISEModelRecomputeEvents::AfterRecompute ( );
__declspec(implementation_key(2234)) HRESULT ISEModelRecomputeEvents::BeforeModelIsDeleted ( IDispatch * Model );
__declspec(implementation_key(2235)) HRESULT ISEDynamicEditEvents::BeginDynamicEdit ( );
__declspec(implementation_key(2236)) HRESULT ISEDynamicEditEvents::EndDynamicEdit ( );
__declspec(implementation_key(2237)) HRESULT ISEApplicationEventsEx::OnCommandUpdateUI ( long CommandID, long * CommandFlags, BSTR * MenuItemTextD );
__declspec(implementation_key(2238)) HRESULT ISEApplicationEventsEx2::OnBeforeDocumentOpen ( enum ApplicationBeforeDocumentOpenEvent Context, _bstr_t Filename, VARIANT_BOOL * CancelOpen );
__declspec(implementation_key(2239)) HRESULT ISEApplicationReadyEvents::OnApplicationReady ( enum ApplicationReadyEvent Context );
__declspec(implementation_key(2240)) HRESULT ISEApplicationActiveFrameSwitchingEvents::OnApplicationActiveFrameSwitching ( enum ApplicationActiveFrameSwitchingEvent Context, long hWndPreviouslyActiveFrame, long hWndNewlyActiveFrame );
__declspec(implementation_key(2241)) HRESULT ISEApplicationLicenseEvents::OnApplicationLicense ( enum ApplicationLicenseEvent Context, _bstr_t FeatureName );
__declspec(implementation_key(2242)) HRESULT ISEApplicationDocumentLoadingEvents::OnApplicationDocumentLoading ( _bstr_t TopLevelFilename, enum ApplicationDocumentLoadingEvent Context, unsigned long Level, VARIANT_BOOL * Cancel );
__declspec(implementation_key(2243)) HRESULT ISEAddInEventsEx::OnCommandOnLineHelp ( long HelpCommandID, long CommandID, BSTR * HelpURL );
__declspec(implementation_key(2244)) HRESULT ISEAddInEventsEx2::OnCommand ( long CommandID, enum ShortCutMenuContextConstants Context, enum DocumentTypeConstants ActiveDocumentType, IDispatch * pActiveDocument, IDispatch * pActiveWindow, IDispatch * pActiveSelectSet );
__declspec(implementation_key(2245)) HRESULT ISEAddInEventsEx2::OnCommandHelp ( long hFrameWnd, long HelpCommandID, long CommandID );
__declspec(implementation_key(2246)) HRESULT ISEAddInEventsEx2::OnCommandUpdateUI ( long CommandID, enum ShortCutMenuContextConstants Context, enum DocumentTypeConstants ActiveDocumentType, IDispatch * pActiveDocument, IDispatch * pActiveWindow, IDispatch * pActiveSelectSet, long * CommandFlags, BSTR * MenuItemText, long * BitmapID );
__declspec(implementation_key(2247)) HRESULT ISEAddInEventsEx2::OnCommandOnLineHelp ( long HelpCommandID, long CommandID, BSTR * HelpURL );
__declspec(implementation_key(2248)) HRESULT ISEAddInEdgeBarEvents::AddPage ( IDispatch * theDocument );
__declspec(implementation_key(2249)) HRESULT ISEAddInEdgeBarEvents::RemovePage ( IDispatch * theDocument );
__declspec(implementation_key(2250)) HRESULT ISEAddInEdgeBarEvents::IsPageDisplayable ( IDispatch * theDocument, _bstr_t EnvironmentCatID, VARIANT_BOOL * vbIsPageDisplayable );
__declspec(implementation_key(2251)) HRESULT ISEAddInEdgeBarEventsEx::AddPage ( IDispatch * theDocument );
__declspec(implementation_key(2252)) HRESULT ISEAddInEdgeBarEventsEx::RemovePage ( IDispatch * theDocument );
__declspec(implementation_key(2253)) HRESULT ISEAddInEdgeBarEventsEx::IsPageDisplayable ( IDispatch * theDocument, _bstr_t EnvironmentCatID, VARIANT_BOOL * vbIsPageDisplayable );
__declspec(implementation_key(2254)) HRESULT ISEAssemblyChangeEvents::BeforeChange ( IDispatch * theDocument, IDispatch * Object, enum ObjectType Type, seAssemblyChangeEventsConstants ChangeType );
__declspec(implementation_key(2255)) HRESULT ISEAssemblyChangeEvents::AfterChange ( IDispatch * theDocument, IDispatch * Object, enum ObjectType Type, seAssemblyChangeEventsConstants ChangeType );
__declspec(implementation_key(2256)) HRESULT DISEAssemblyChangeEvents::BeforeChange ( IDispatch * theDocument, IDispatch * Object, enum ObjectType Type, seAssemblyChangeEventsConstants ChangeType );
__declspec(implementation_key(2257)) HRESULT DISEAssemblyChangeEvents::AfterChange ( IDispatch * theDocument, IDispatch * Object, enum ObjectType Type, seAssemblyChangeEventsConstants ChangeType );
__declspec(implementation_key(2258)) HRESULT ISEAssemblyConfigurationChangeEvents::OnBeforeAssemblyConfigurationChange ( IDispatch * theDocument, VARIANT * varConfigNames, int nConfigNameCount );
__declspec(implementation_key(2259)) HRESULT ISEAssemblyConfigurationChangeEvents::OnAfterAssemblyConfigurationChange ( IDispatch * theDocument, VARIANT * varConfigNames, int nConfigNameCount );
__declspec(implementation_key(2260)) HRESULT DISEAssemblyConfigurationChangeEvents::OnBeforeAssemblyConfigurationChange ( IDispatch * theDocument, VARIANT * varConfigNames, int nConfigNameCount );
__declspec(implementation_key(2261)) HRESULT DISEAssemblyConfigurationChangeEvents::OnAfterAssemblyConfigurationChange ( IDispatch * theDocument, VARIANT * varConfigNames, int nConfigNameCount );
__declspec(implementation_key(2262)) HRESULT ISEAssemblyRecomputeEvents::BeforeRecompute ( IDispatch * theDocument );
__declspec(implementation_key(2263)) HRESULT ISEAssemblyRecomputeEvents::AfterRecompute ( IDispatch * theDocument );
__declspec(implementation_key(2264)) HRESULT ISEAssemblyRecomputeEvents::AfterAdd ( IDispatch * theDocument, IDispatch * Object, enum ObjectType Type );
__declspec(implementation_key(2265)) HRESULT ISEAssemblyRecomputeEvents::BeforeDelete ( IDispatch * theDocument, IDispatch * Object, enum ObjectType Type );
__declspec(implementation_key(2266)) HRESULT ISEAssemblyRecomputeEvents::AfterModify ( IDispatch * theDocument, IDispatch * Object, enum ObjectType Type, seAssemblyEventConstants ModifyType );
__declspec(implementation_key(2267)) HRESULT DISEAssemblyRecomputeEvents::BeforeRecompute ( IDispatch * theDocument );
__declspec(implementation_key(2268)) HRESULT DISEAssemblyRecomputeEvents::AfterRecompute ( IDispatch * theDocument );
__declspec(implementation_key(2269)) HRESULT DISEAssemblyRecomputeEvents::AfterAdd ( IDispatch * theDocument, IDispatch * Object, enum ObjectType Type );
__declspec(implementation_key(2270)) HRESULT DISEAssemblyRecomputeEvents::BeforeDelete ( IDispatch * theDocument, IDispatch * Object, enum ObjectType Type );
__declspec(implementation_key(2271)) HRESULT DISEAssemblyRecomputeEvents::AfterModify ( IDispatch * theDocument, IDispatch * Object, enum ObjectType Type, seAssemblyEventConstants ModifyType );
__declspec(implementation_key(2272)) HRESULT ISEAssemblyFamilyEvents::BeforeMemberActivate ( IDispatch * theDocument, _bstr_t memberName );
__declspec(implementation_key(2273)) HRESULT ISEAssemblyFamilyEvents::AfterMemberActivate ( IDispatch * theDocument, _bstr_t memberName );
__declspec(implementation_key(2274)) HRESULT ISEAssemblyFamilyEvents::BeforeMemberCreate ( IDispatch * theDocument, _bstr_t memberName );
__declspec(implementation_key(2275)) HRESULT ISEAssemblyFamilyEvents::AfterMemberCreate ( IDispatch * theDocument, _bstr_t memberName );
__declspec(implementation_key(2276)) HRESULT ISEAssemblyFamilyEvents::BeforeMemberDelete ( IDispatch * theDocument, _bstr_t memberName );
__declspec(implementation_key(2277)) HRESULT ISEAssemblyFamilyEvents::AfterMemberDelete ( IDispatch * theDocument, _bstr_t memberName );
__declspec(implementation_key(2278)) HRESULT ISEAssemblyFamilyEvents2::BeforeMemberActivate ( IDispatch * theDocument, _bstr_t memberName );
__declspec(implementation_key(2279)) HRESULT ISEAssemblyFamilyEvents2::AfterMemberActivate ( IDispatch * theDocument, _bstr_t memberName );
__declspec(implementation_key(2280)) HRESULT ISEAssemblyFamilyEvents2::BeforeMemberCreate ( IDispatch * theDocument, _bstr_t memberName );
__declspec(implementation_key(2281)) HRESULT ISEAssemblyFamilyEvents2::AfterMemberCreate ( IDispatch * theDocument, _bstr_t memberName );
__declspec(implementation_key(2282)) HRESULT ISEAssemblyFamilyEvents2::BeforeMemberDelete ( IDispatch * theDocument, _bstr_t memberName );
__declspec(implementation_key(2283)) HRESULT ISEAssemblyFamilyEvents2::AfterMemberDelete ( IDispatch * theDocument, _bstr_t memberName );
__declspec(implementation_key(2284)) HRESULT ISEAssemblyFamilyEvents2::BeforeMemberRename ( IDispatch * theDocument, _bstr_t OldMemberName );
__declspec(implementation_key(2285)) HRESULT ISEAssemblyFamilyEvents2::AfterMemberRename ( IDispatch * theDocument, _bstr_t NewMemberName );
__declspec(implementation_key(2286)) HRESULT ISEFamilyOfPartsEvents::AfterMemberDocumentCreated ( IDispatch * theMember );
__declspec(implementation_key(2287)) HRESULT ISEFamilyOfPartsEvents::AfterMemberDocumentRenamed ( IDispatch * theMember, _bstr_t OldName );
__declspec(implementation_key(2288)) HRESULT ISEFamilyOfPartsEvents::BeforeMemberDocumentDeleted ( IDispatch * theMember );
__declspec(implementation_key(2289)) HRESULT ISEFamilyOfPartsExEvents::AfterMemberDocumentCreated ( IDispatch * theMember, VARIANT_BOOL DocumentExists );
__declspec(implementation_key(2290)) HRESULT ISEFamilyOfPartsExEvents::AfterMemberDocumentRenamed ( IDispatch * theMember, _bstr_t OldName );
__declspec(implementation_key(2291)) HRESULT ISEFamilyOfPartsExEvents::BeforeMemberDocumentDeleted ( IDispatch * theMember );
__declspec(implementation_key(2292)) HRESULT ISEDividePartEvents::AfterDividePartDocumentCreated ( IDispatch * theMember );
__declspec(implementation_key(2293)) HRESULT ISEDividePartEvents::AfterDividePartDocumentRenamed ( IDispatch * theMember, _bstr_t OldName );
__declspec(implementation_key(2294)) HRESULT ISEDividePartEvents::BeforeDividePartDocumentDeleted ( IDispatch * theMember );
__declspec(implementation_key(2295)) HRESULT ISEDrawingViewEvents::AfterUpdate ( IDispatch * DrawingView );
__declspec(implementation_key(2296)) HRESULT ISEPartsListEvents::AfterUpdate ( IDispatch * PartsList );
__declspec(implementation_key(2297)) HRESULT ISEDraftBendTableEvents::AfterUpdate ( IDispatch * DraftBendTable );
__declspec(implementation_key(2298)) HRESULT ISEConnectorTableEvents::AfterUpdate ( IDispatch * ConnectorTable );
__declspec(implementation_key(2299)) HRESULT ISEBlockTableEvents::AfterUpdate ( IDispatch * BlockTable );
__declspec(implementation_key(2300)) HRESULT DISEDocumentEvents::BeforeClose ( );
__declspec(implementation_key(2301)) HRESULT DISEDocumentEvents::BeforeSave ( );
__declspec(implementation_key(2302)) HRESULT DISEDocumentEvents::AfterSave ( );
__declspec(implementation_key(2303)) HRESULT DISEDocumentEvents::SelectSetChanged ( IDispatch * SelectSet );
__declspec(implementation_key(2304)) long ISECommandInfoEx::GetimageID ( );
__declspec(implementation_key(2305)) HRESULT ISEAssemblyPhysicalPropertiesChangeEvents::OnAfterAssemblyPhysicalPropertiesChange ( IDispatch * theDocument );
__declspec(implementation_key(2306)) HRESULT ISEAssemblyPhysicalPropertiesChangeEvents::OnBeforeAssemblyPhysicalPropertiesChange ( IDispatch * theDocument );
__declspec(implementation_key(2307)) HRESULT DISEAssemblyPhysicalPropertiesChangeEvents::OnAfterAssemblyPhysicalPropertiesChange ( IDispatch * theDocument );
__declspec(implementation_key(2308)) HRESULT DISEAssemblyPhysicalPropertiesChangeEvents::OnBeforeAssemblyPhysicalPropertiesChange ( IDispatch * theDocument );
__declspec(implementation_key(2309)) HRESULT ISEPhysicalPropertiesChangeEvents::OnAfterPartPhysicalPropertiesChange ( IDispatch * theMember );
__declspec(implementation_key(2310)) HRESULT ISEPhysicalPropertiesChangeEvents::OnBeforePartPhysicalPropertiesChange ( IDispatch * theMember );
__declspec(implementation_key(2311)) HRESULT ISELocateFilterEvents::Filter ( IDispatch * pGraphicDispatch, VARIANT_BOOL * vbValid );
__declspec(implementation_key(2312)) HRESULT ISECommandEx::BeginUndoTransaction ( _bstr_t TransactionName );
__declspec(implementation_key(2313)) HRESULT ISECommandEx2::BeginTransparentUndoTransaction ( _bstr_t TransactionName );
__declspec(implementation_key(2314)) HRESULT ISECommandEx2::EndUndoTransaction ( );
__declspec(implementation_key(2315)) HRESULT DISEAddInEventsEx::OnCommand ( long nCmdID );
__declspec(implementation_key(2316)) HRESULT DISEAddInEventsEx::OnCommandHelp ( long hFrameWnd, long uHelpCommand, long nCmdID );
__declspec(implementation_key(2317)) HRESULT DISEAddInEventsEx::OnCommandUpdateUI ( long nCmdID, long * lCmdFlags, BSTR * MenuItemText, long * nIDBitmap );
__declspec(implementation_key(2318)) HRESULT DISEAddInEventsEx::OnCommandOnLineHelp ( long uHelpCommand, long nCmdID, BSTR * HelpURL );
__declspec(implementation_key(2319)) HRESULT DISEAddInEventsEx2::OnCommand ( long nCmdID, long Context, long ActiveDocumentType, IDispatch * pActiveDocument, IDispatch * pActiveWindow, IDispatch * pActiveSelectSet );
__declspec(implementation_key(2320)) HRESULT DISEAddInEventsEx2::OnCommandHelp ( long hFrameWnd, long uHelpCommand, long nCmdID );
__declspec(implementation_key(2321)) HRESULT DISEAddInEventsEx2::OnCommandUpdateUI ( long nCmdID, long Context, long ActiveDocumentType, IDispatch * pActiveDocument, IDispatch * pActiveWindow, IDispatch * pActiveSelectSet, long * lCmdFlags, BSTR * MenuItemText, long * nIDBitmap );
__declspec(implementation_key(2322)) HRESULT DISEAddInEventsEx2::OnCommandOnLineHelp ( long uHelpCommand, long nCmdID, BSTR * HelpURL );
__declspec(implementation_key(2323)) HRESULT ISEAddInEx::SetAddInInfoEx ( _bstr_t ResourceFilename, _bstr_t EnvironmentCatID, _bstr_t CategoryName, long IDColorBitmapMedium, long IDColorBitmapLarge, long IDMonochromeBitmapMedium, long IDMonochromeBitmapLarge, long NumberOfCommands, SAFEARRAY * * CommandNames, SAFEARRAY * * CommandIDs );
__declspec(implementation_key(2324)) IUnknownPtr ISEAddInEx::GetAddInEdgeBarEvents ( );
__declspec(implementation_key(2325)) HRESULT ISEAddInEx2::SetAddInInfoEx2 ( _bstr_t ResourceFilename, _bstr_t EnvironmentCatID, _bstr_t CategoryName, long IDColorBitmapMedium, long IDColorBitmapLarge, long IDMonochromeBitmapMedium, long IDMonochromeBitmapLarge, long NumberOfCommands, SAFEARRAY * * CommandNames, SAFEARRAY * * CommandIDs, SAFEARRAY * * CommandButtonStyles );
__declspec(implementation_key(2326)) HRESULT ISEAddInSaveAsTranslatorEvents::OnOptions ( IDispatch * theDocument, _bstr_t FileExtension );
__declspec(implementation_key(2327)) HRESULT ISEAddInSaveAsTranslatorEvents::OnOptionsUpdateUI ( IDispatch * theDocument, _bstr_t FileExtension, long * Flags );
__declspec(implementation_key(2328)) HRESULT ISEAddInSaveAsTranslatorEvents::OnSaveAs ( IDispatch * theDocument, _bstr_t SaveAsFileName, long * hResult );
__declspec(implementation_key(2329)) HRESULT ISEAddInSaveAsTranslator::SetSaveAsTranlatorInfo ( enum DocumentTypeConstants DocumentType, _bstr_t Filter );
__declspec(implementation_key(2330)) IUnknownPtr ISEAddInSaveAsTranslator::GetAddInSaveAsTranslatorEvents ( );
__declspec(implementation_key(2331)) HRESULT ISolidEdgeAddIn::OnConnection ( IDispatch * Application, enum SeConnectMode ConnectMode, struct AddIn * AddInInstance );
__declspec(implementation_key(2332)) HRESULT ISolidEdgeAddIn::OnConnectToEnvironment ( _bstr_t EnvCatID, IDispatch * pEnvironmentDispatch, VARIANT_BOOL bFirstTime );
__declspec(implementation_key(2333)) HRESULT ISolidEdgeAddIn::OnDisconnection ( enum SeDisconnectMode DisconnectMode );
__declspec(implementation_key(2334)) long ISolidEdgeBar::AddPage ( IDispatch * theDocument, long InstanceHandle, long nBitmapID, _bstr_t Tooltip, long nOptions );
__declspec(implementation_key(2335)) HRESULT ISolidEdgeBar::RemovePage ( IDispatch * theDocument, long hWnd, long nOptions );
__declspec(implementation_key(2336)) HRESULT ISolidEdgeBar::SetActivePage ( IDispatch * theDocument, long hWnd, long nOptions );
__declspec(implementation_key(2337)) long ISolidEdgeBarEx::AddPageEx ( IDispatch * theDocument, _bstr_t ResourceFilename, long nBitmapID, _bstr_t Tooltip, long nOptions );
__declspec(implementation_key(2338)) long ISolidEdgeBarEx2::AddPageEx2 ( IDispatch * theDocument, _bstr_t ResourceFilename, long Index, long nBitmapID, _bstr_t Tooltip, _bstr_t Title, _bstr_t Caption, long nOptions, const _variant_t & Direction, const _variant_t & InitialWidth, const _variant_t & InitialHeight );
__declspec(implementation_key(2339)) HRESULT ISolidEdgeBarEx2::RemovePageEx2 ( IDispatch * theDocument, long Index, long hWnd, long nOptions );
__declspec(implementation_key(2340)) HRESULT ISolidEdgeBarEx2::SetActivePageEx2 ( IDispatch * theDocument, long Index, long hWnd, long nOptions );
__declspec(implementation_key(2341)) long ISolidEdgeRibbonBar::AddRibbon ( int DialogId, long InstanceHandle );
__declspec(implementation_key(2342)) HRESULT ISolidEdgeRibbonBar::ShowRibbon ( );
__declspec(implementation_key(2343)) HRESULT ISolidEdgeRibbonBar::HideRibbon ( );
__declspec(implementation_key(2344)) HRESULT ISolidEdgeRibbonBar::RemoveRibbon ( );
__declspec(implementation_key(2345)) HRESULT ISolidEdgeRibbonBar::AddEditField ( int Id );
__declspec(implementation_key(2346)) HRESULT ISolidEdgeRibbonBar::SetCurrentFocus ( );
__declspec(implementation_key(2347)) HRESULT ISolidEdgeRibbonBar::GetCurrentFocus ( int * Id );
__declspec(implementation_key(2348)) HRESULT ISolidEdgeRibbonBar::NextFocus ( );
__declspec(implementation_key(2349)) HRESULT ISolidEdgeRibbonBar::SetAccelerators ( SAFEARRAY * * Accelerators );
__declspec(implementation_key(2350)) long ISolidEdgeRibbonBarEx::AddRibbonEx ( int DialogId, _bstr_t ResourceFilename );
__declspec(implementation_key(2351)) long ISolidEdgeCommandBar::AddGroup ( int nTitleID, int nDialogId, int nBitmapID, _bstr_t ResourceFilename, VARIANT_BOOL bExpandable, VARIANT_BOOL bExpanded, VARIANT_BOOL bEnabled, VARIANT_BOOL bRedraw );
__declspec(implementation_key(2352)) HRESULT ISolidEdgeCommandBar::AddCommandBarHeader ( VARIANT_BOOL bDoIt, VARIANT_BOOL bOptions, _bstr_t DoitText, _bstr_t OptionsText );
__declspec(implementation_key(2353)) HRESULT ISolidEdgeCommandBar::SetCommandBarHeaderText ( _bstr_t DoitText, _bstr_t OptionsText );
__declspec(implementation_key(2354)) HRESULT ISolidEdgeCommandBar::RemoveGroup ( int nTitleID, const _variant_t & hWndGroupDialog );
__declspec(implementation_key(2355)) HRESULT ISolidEdgeCommandBar::ShowGroup ( int nTitleID, const _variant_t & hWndGroupDialog );
__declspec(implementation_key(2356)) HRESULT ISolidEdgeCommandBar::HideGroup ( int nTitleID, const _variant_t & hWndGroupDialog );
__declspec(implementation_key(2357)) HRESULT ISolidEdgeCommandBar::EnableGroup ( int nTitleID, VARIANT_BOOL bEnabled, VARIANT_BOOL bDisableAllOthers );
__declspec(implementation_key(2358)) VARIANT_BOOL ISolidEdgeCommandBar::IsGroupEnabled ( int nTitleID );
__declspec(implementation_key(2359)) HRESULT ISolidEdgeCommandBar::ExpandGroup ( int nTitleID, VARIANT_BOOL bExpanded, VARIANT_BOOL bCollapseAllOthers );
__declspec(implementation_key(2360)) VARIANT_BOOL ISolidEdgeCommandBar::IsGroupExpanded ( int nTitleID );
__declspec(implementation_key(2361)) HRESULT ISolidEdgeCommandBar::EnsureVisible ( int nTitleID, const _variant_t & hWndGroupDialog );
__declspec(implementation_key(2362)) HRESULT ISolidEdgeCommandBar::ShowGroups ( );
__declspec(implementation_key(2363)) HRESULT ISolidEdgeCommandBar::HideGroups ( );
__declspec(implementation_key(2364)) HRESULT ISolidEdgeCommandBar::RemoveGroups ( );
__declspec(implementation_key(2365)) HRESULT ISolidEdgeCommandBar::AddBitmapToButton ( long hWndGroupDialog, int nButtonID, int nBitmapID, const _variant_t & ResourceFilename );
__declspec(implementation_key(2366)) HRESULT ISolidEdgeCommandBar::AddEditField ( long hWndGroupDialog, int Id );
__declspec(implementation_key(2367)) HRESULT ISolidEdgeCommandBar::SetCurrentFocus ( long hWndGroupDialog );
__declspec(implementation_key(2368)) HRESULT ISolidEdgeCommandBar::GetCurrentFocus ( long hWndGroupDialog, int * Id );
__declspec(implementation_key(2369)) HRESULT ISolidEdgeCommandBar::NextFocus ( long hWndGroupDialog );
__declspec(implementation_key(2370)) HRESULT ISolidEdgeCommandBar::SetAccelerators ( long hWndGroupDialog, SAFEARRAY * * Accelerators );
__declspec(implementation_key(2371)) HRESULT DISEAssemblyFamilyEvents::BeforeMemberActivate ( IDispatch * theDocument, _bstr_t memberName );
__declspec(implementation_key(2372)) HRESULT DISEAssemblyFamilyEvents::AfterMemberActivate ( IDispatch * theDocument, _bstr_t memberName );
__declspec(implementation_key(2373)) HRESULT DISEAssemblyFamilyEvents::BeforeMemberCreate ( IDispatch * theDocument, _bstr_t memberName );
__declspec(implementation_key(2374)) HRESULT DISEAssemblyFamilyEvents::AfterMemberCreate ( IDispatch * theDocument, _bstr_t memberName );
__declspec(implementation_key(2375)) HRESULT DISEAssemblyFamilyEvents::BeforeMemberDelete ( IDispatch * theDocument, _bstr_t memberName );
__declspec(implementation_key(2376)) HRESULT DISEAssemblyFamilyEvents::AfterMemberDelete ( IDispatch * theDocument, _bstr_t memberName );
__declspec(implementation_key(2377)) HRESULT DISEAssemblyFamilyEvents2::BeforeMemberActivate ( IDispatch * theDocument, _bstr_t memberName );
__declspec(implementation_key(2378)) HRESULT DISEAssemblyFamilyEvents2::AfterMemberActivate ( IDispatch * theDocument, _bstr_t memberName );
__declspec(implementation_key(2379)) HRESULT DISEAssemblyFamilyEvents2::BeforeMemberCreate ( IDispatch * theDocument, _bstr_t memberName );
__declspec(implementation_key(2380)) HRESULT DISEAssemblyFamilyEvents2::AfterMemberCreate ( IDispatch * theDocument, _bstr_t memberName );
__declspec(implementation_key(2381)) HRESULT DISEAssemblyFamilyEvents2::BeforeMemberDelete ( IDispatch * theDocument, _bstr_t memberName );
__declspec(implementation_key(2382)) HRESULT DISEAssemblyFamilyEvents2::AfterMemberDelete ( IDispatch * theDocument, _bstr_t memberName );
__declspec(implementation_key(2383)) HRESULT DISEAssemblyFamilyEvents2::BeforeMemberRename ( IDispatch * theDocument, _bstr_t OldMemberName );
__declspec(implementation_key(2384)) HRESULT DISEAssemblyFamilyEvents2::AfterMemberRename ( IDispatch * theDocument, _bstr_t NewMemberName );
__declspec(implementation_key(2385)) HRESULT ISEECEventsEx::PDM_OnAfterDocumentUpload ( VARIANT * varUploadFileList );
__declspec(implementation_key(2386)) HRESULT ISESketchRecomputeEvents::BeforeRecompute ( IDispatch * Sketch );
__declspec(implementation_key(2387)) HRESULT ISESketchRecomputeEvents::AfterRecompute ( IDispatch * Sketch );
__declspec(implementation_key(2388)) HRESULT ISESketchRecomputeEvents::AfterSketchIsModified ( enum SeModifySketchFlag ModifySkFlag, IDispatch * Entity, IDispatch * Sketch );
__declspec(implementation_key(2389)) HRESULT ISESketchRecomputeEvents::BeforeSketchIsDeleted ( );
__declspec(implementation_key(2390)) HRESULT DISESketchRecomputeEvents::BeforeRecompute ( IDispatch * Sketch );
__declspec(implementation_key(2391)) HRESULT DISESketchRecomputeEvents::AfterRecompute ( IDispatch * Sketch );
__declspec(implementation_key(2392)) HRESULT DISESketchRecomputeEvents::AfterSketchIsModified ( enum SeModifySketchFlag ModifySkFlag, IDispatch * Entity, IDispatch * Sketch );
__declspec(implementation_key(2393)) HRESULT DISESketchRecomputeEvents::BeforeSketchIsDeleted ( );
__declspec(implementation_key(2394)) void _IVariableAuto::PutName ( _bstr_t pName );
__declspec(implementation_key(2395)) _bstr_t _IVariableAuto::GetName ( );
__declspec(implementation_key(2396)) int _IVariableAuto::GetUnitsType ( );
__declspec(implementation_key(2397)) void _IVariableAuto::PutUnitsType ( int pUnitType );
__declspec(implementation_key(2398)) void _IVariableAuto::PutValue ( double pDoubleValue );
__declspec(implementation_key(2399)) double _IVariableAuto::GetValue ( );
__declspec(implementation_key(2400)) void _IVariableAuto::PutProperties ( int pProperties );
__declspec(implementation_key(2401)) int _IVariableAuto::GetProperties ( );
__declspec(implementation_key(2402)) void _IVariableAuto::PutFormula ( _bstr_t pFormula );
__declspec(implementation_key(2403)) _bstr_t _IVariableAuto::GetFormula ( );
__declspec(implementation_key(2404)) HRESULT _IVariableAuto::SetRange ( _bstr_t LowValue, int Condition, _bstr_t HighValue );
__declspec(implementation_key(2405)) HRESULT _IVariableAuto::GetRange ( BSTR * LowValue, int * Condition, BSTR * HighValue );
__declspec(implementation_key(2406)) HRESULT _IVariableAuto::SetRangeEx ( _bstr_t LowValue, _bstr_t LowLimitVarName, _bstr_t HighValue, _bstr_t HighLimitVarName, int Condition, long bSkipSettingInitialValue );
__declspec(implementation_key(2407)) HRESULT _IVariableAuto::SetValue ( _bstr_t Value );
__declspec(implementation_key(2408)) HRESULT _IVariableAuto::GetValue ( BSTR * Value );
__declspec(implementation_key(2409)) HRESULT _IVariableAuto::Delete ( );
__declspec(implementation_key(2410)) enum ObjectType _IVariableAuto::GetType ( );
__declspec(implementation_key(2411)) void _IVariableAuto::PutVariableTableName ( _bstr_t pName );
__declspec(implementation_key(2412)) _bstr_t _IVariableAuto::GetVariableTableName ( );
__declspec(implementation_key(2413)) void _IVariableAuto::PutExpose ( long pbExpose );
__declspec(implementation_key(2414)) long _IVariableAuto::GetExpose ( );
__declspec(implementation_key(2415)) void _IVariableAuto::PutExposeName ( _bstr_t pbsName );
__declspec(implementation_key(2416)) _bstr_t _IVariableAuto::GetExposeName ( );
__declspec(implementation_key(2417)) _bstr_t _IVariableAuto::GetDisplayName ( );
__declspec(implementation_key(2418)) _bstr_t _IVariableAuto::GetSystemName ( );
__declspec(implementation_key(2419)) VARIANT_BOOL _IVariableAuto::GetIsSuppressVariable ( );
__declspec(implementation_key(2420)) double _IVariableAuto::GetValueOutOfRange ( );
__declspec(implementation_key(2421)) HRESULT _IVariableAuto::GetDiscreteValues ( SAFEARRAY * * DiscreteValues );
__declspec(implementation_key(2422)) HRESULT _IVariableAuto::SetDiscreteValues ( SAFEARRAY * * DiscreteValues );
__declspec(implementation_key(2423)) HRESULT _IVariableAuto::AddDiscreteValue ( double DiscreteValue );
__declspec(implementation_key(2424)) HRESULT _IVariableAuto::RemoveDiscreteValue ( double DiscreteValue );
__declspec(implementation_key(2425)) HRESULT _IVariableAuto::ClearLimitsOrDiscreteValues ( );
__declspec(implementation_key(2426)) HRESULT _IVariableAuto::AddDiscreteVariables ( SAFEARRAY * * DiscreteVariables );
__declspec(implementation_key(2427)) HRESULT _IVariableAuto::GetDiscreteVariables ( VARIANT * DiscreteVariables, int * numDiscreteVariables );
__declspec(implementation_key(2428)) HRESULT _IVariableAuto::RemoveDiscreteVariables ( SAFEARRAY * * DiscreteVariables );
__declspec(implementation_key(2429)) _bstr_t _IVariableAuto::GetComment ( );
__declspec(implementation_key(2430)) HRESULT _IVariableAuto::SetComment ( _bstr_t Comment );
__declspec(implementation_key(2431)) HRESULT _IVariableAuto::HasExternalLink ( VARIANT_BOOL * bLinked );
__declspec(implementation_key(2432)) HRESULT _IVariableAuto::IsExternalLinkFrozen ( VARIANT_BOOL * bFrozen );
__declspec(implementation_key(2433)) HRESULT _IVariableAuto::GetExternalLinkInfo ( BSTR * SourceVariableName, BSTR * SourceDocumenetName );
__declspec(implementation_key(2434)) HRESULT _IVariableAuto::FreezeExternalLink ( );
__declspec(implementation_key(2435)) HRESULT _IVariableAuto::ThawExternalLink ( );
__declspec(implementation_key(2436)) HRESULT _IVariableAuto::BreakExternalLink ( );
__declspec(implementation_key(2437)) VARIANT_BOOL _IVariableAuto::GetIsReadOnly ( );
__declspec(implementation_key(2438)) enum seVariableTypeConstants _IVariableAuto::GetVariableType ( );
__declspec(implementation_key(2439)) HRESULT _IVariableAuto::GetValueRangeHighValue ( double * pdHighValue );
__declspec(implementation_key(2440)) HRESULT _IVariableAuto::SetValueRangeHighValue ( double dHighValue );
__declspec(implementation_key(2441)) HRESULT _IVariableAuto::GetValueRangeLowValue ( double * pdHighValue );
__declspec(implementation_key(2442)) HRESULT _IVariableAuto::SetValueRangeLowValue ( double dHighValue );
__declspec(implementation_key(2443)) HRESULT _IVariableAuto::SetValueRangeValues ( double LowValue, int Condition, double HighValue );
__declspec(implementation_key(2444)) HRESULT _IVariableAuto::GetValueRangeValues ( double * LowValue, int * Condition, double * HighValue );
__declspec(implementation_key(2445)) HRESULT _IVariableAuto::GetValueDiscreteValues ( SAFEARRAY * * DiscreteValues );
__declspec(implementation_key(2446)) HRESULT _IVariableAuto::SetValueDiscreteValues ( SAFEARRAY * * DiscreteValues );
__declspec(implementation_key(2447)) HRESULT _IVariableAuto::GetValueEx ( double * pdValue, enum seUnitsTypeConstants seUnitsType );
__declspec(implementation_key(2448)) HRESULT _IVariableAuto::SetValueEx ( double dValue, enum seUnitsTypeConstants seUnitsType );
__declspec(implementation_key(2449)) HRESULT _IVariableAuto::GetRangeEx ( BSTR * LowValue, BSTR * LowLimitVarName, BSTR * HighValue, BSTR * HighLimitVarName, int * Condition );
__declspec(implementation_key(2450)) HRESULT _IVariableAuto::HasVariableLimit ( VARIANT_BOOL * bVariableLimit, enum VariableLimitValueConstant * LimitValue );
__declspec(implementation_key(2451)) IDispatchPtr _IVariableAuto::GetAttributeSets ( );
__declspec(implementation_key(2452)) VARIANT_BOOL _IVariableAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(2453)) int _IVariableListAuto::GetCount ( );
__declspec(implementation_key(2454)) IDispatchPtr _IVariableListAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(2455)) IUnknownPtr _IVariableListAuto::Get_NewEnum ( );
__declspec(implementation_key(2456)) HRESULT _IVariableListAuto::Remove ( const _variant_t & Index );
__declspec(implementation_key(2457)) HRESULT _IVariableListAuto::Add ( const _variant_t & variable );
__declspec(implementation_key(2458)) int _IVariablesAuto::GetCount ( );
__declspec(implementation_key(2459)) IDispatchPtr _IVariablesAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(2460)) IUnknownPtr _IVariablesAuto::Get_NewEnum ( );
__declspec(implementation_key(2461)) IDispatchPtr _IVariablesAuto::GetApplication ( );
__declspec(implementation_key(2462)) IDispatchPtr _IVariablesAuto::GetParent ( );
__declspec(implementation_key(2463)) IDispatchPtr _IVariablesAuto::Add ( _bstr_t pName, _bstr_t pFormula, const _variant_t & UnitsType );
__declspec(implementation_key(2464)) IDispatchPtr _IVariablesAuto::AddFromClipboard ( _bstr_t pName, const _variant_t & UnitsType );
__declspec(implementation_key(2465)) HRESULT _IVariablesAuto::Edit ( _bstr_t pName, _bstr_t pFormula );
__declspec(implementation_key(2466)) HRESULT _IVariablesAuto::EditFromClipboard ( _bstr_t pName );
__declspec(implementation_key(2467)) HRESULT _IVariablesAuto::PutName ( IDispatch * pVariable, _bstr_t pName );
__declspec(implementation_key(2468)) _bstr_t _IVariablesAuto::GetName ( IDispatch * pVariable );
__declspec(implementation_key(2469)) IDispatchPtr _IVariablesAuto::Translate ( _bstr_t pName );
__declspec(implementation_key(2470)) IDispatchPtr _IVariablesAuto::Query ( _bstr_t pFindCriterium, const _variant_t & NamedBy, const _variant_t & VarType, const _variant_t & CaseInsensitive );
__declspec(implementation_key(2471)) _bstr_t _IVariablesAuto::GetFormula ( _bstr_t wcpName );
__declspec(implementation_key(2472)) _bstr_t _IVariablesAuto::GetDisplayName ( IDispatch * pVariable );
__declspec(implementation_key(2473)) _bstr_t _IVariablesAuto::GetSystemName ( IDispatch * pVariable );
__declspec(implementation_key(2474)) HRESULT _IVariablesAuto::CopyToClipboard ( _bstr_t bsName );
__declspec(implementation_key(2475)) HRESULT _IInterpartLinkAuto::IsFrozen ( VARIANT_BOOL * bFrozen );
__declspec(implementation_key(2476)) HRESULT _IInterpartLinkAuto::GetInfo ( BSTR * SourceFeatureName, BSTR * SourceDocumenetName );
__declspec(implementation_key(2477)) HRESULT _IInterpartLinkAuto::Freeze ( );
__declspec(implementation_key(2478)) HRESULT _IInterpartLinkAuto::Thaw ( );
__declspec(implementation_key(2479)) HRESULT _IInterpartLinkAuto::BreakLink ( );
__declspec(implementation_key(2480)) int _IInterpartLinksAuto::GetCount ( );
__declspec(implementation_key(2481)) IDispatchPtr _IInterpartLinksAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(2482)) IDispatchPtr _IInterpartLinksAuto::GetApplication ( );
__declspec(implementation_key(2483)) IDispatchPtr _IInterpartLinksAuto::GetParent ( );
__declspec(implementation_key(2484)) enum SensorTypeConstants _ISensorAuto::GetSensorType ( );
__declspec(implementation_key(2485)) enum SensorStatusConstants _ISensorAuto::GetStatus ( );
__declspec(implementation_key(2486)) VARIANT_BOOL _ISensorAuto::GetIsInRange ( );
__declspec(implementation_key(2487)) double _ISensorAuto::GetCurrentValue ( );
__declspec(implementation_key(2488)) void _ISensorAuto::PutName ( _bstr_t Name );
__declspec(implementation_key(2489)) _bstr_t _ISensorAuto::GetName ( );
__declspec(implementation_key(2490)) void _ISensorAuto::PutDescription ( _bstr_t Description );
__declspec(implementation_key(2491)) _bstr_t _ISensorAuto::GetDescription ( );
__declspec(implementation_key(2492)) void _ISensorAuto::PutLowerRange ( double LowerRange );
__declspec(implementation_key(2493)) double _ISensorAuto::GetLowerRange ( );
__declspec(implementation_key(2494)) void _ISensorAuto::PutUpperRange ( double UpperRange );
__declspec(implementation_key(2495)) double _ISensorAuto::GetUpperRange ( );
__declspec(implementation_key(2496)) void _ISensorAuto::PutOperator ( enum SensorOperatorConstants Operator );
__declspec(implementation_key(2497)) enum SensorOperatorConstants _ISensorAuto::GetOperator ( );
__declspec(implementation_key(2498)) void _ISensorAuto::PutMinimumThreshold ( double MinimumThreshold );
__declspec(implementation_key(2499)) double _ISensorAuto::GetMinimumThreshold ( );
__declspec(implementation_key(2500)) void _ISensorAuto::PutMaximumThreshold ( double MaximumThreshold );
__declspec(implementation_key(2501)) double _ISensorAuto::GetMaximumThreshold ( );
__declspec(implementation_key(2502)) void _ISensorAuto::PutDisplayType ( enum SensorDisplayTypeConstants DisplayType );
__declspec(implementation_key(2503)) enum SensorDisplayTypeConstants _ISensorAuto::GetDisplayType ( );
__declspec(implementation_key(2504)) void _ISensorAuto::PutUpdateMechanism ( enum SensorUpdateMechanismConstants UpdateMechanism );
__declspec(implementation_key(2505)) enum SensorUpdateMechanismConstants _ISensorAuto::GetUpdateMechanism ( );
__declspec(implementation_key(2506)) HRESULT _ISensorAuto::Update ( );
__declspec(implementation_key(2507)) HRESULT _ISensorAuto::Delete ( );
__declspec(implementation_key(2508)) IDispatchPtr _ISensorAuto::GetAttributeSets ( );
__declspec(implementation_key(2509)) VARIANT_BOOL _ISensorAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(2510)) int _ISensorsAuto::GetCount ( );
__declspec(implementation_key(2511)) IDispatchPtr _ISensorsAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(2512)) IUnknownPtr _ISensorsAuto::Get_NewEnum ( );
__declspec(implementation_key(2513)) IDispatchPtr _ISensorsAuto::GetApplication ( );
__declspec(implementation_key(2514)) IDispatchPtr _ISensorsAuto::GetParent ( );
__declspec(implementation_key(2515)) IDispatchPtr _ISensorsAuto::AddVariableSensor ( IDispatch * variable, _bstr_t Name, _bstr_t Description, double LowerRange, double UpperRange, double MinimumThreshold, double MaximumThreshold, enum SensorOperatorConstants Operator, enum SensorDisplayTypeConstants DisplayType, enum SensorUpdateMechanismConstants UpdateMechanism );
__declspec(implementation_key(2516)) IDispatchPtr _ISensorsAuto::AddMinimumDistanceSensor ( IDispatch * Element1, IDispatch * Element2, _bstr_t Name, _bstr_t Description, double LowerRange, double UpperRange, double MinimumThreshold, double MaximumThreshold, enum SensorOperatorConstants Operator, enum SensorDisplayTypeConstants DisplayType, enum SensorUpdateMechanismConstants UpdateMechanism );
__declspec(implementation_key(2517)) IDispatchPtr _ISensorsAuto::AddSurfaceAreaSensor ( enum SurfaceAreaSensorAreaTypeConstants iSensorType, enum SurfaceAreaSensorSelectionTypeConstants iSelectionType, _bstr_t Name, _bstr_t Description, double LowerRange, double UpperRange, double MinimumThreshold, double MaximumThreshold, enum SensorOperatorConstants Operator, enum SensorDisplayTypeConstants DisplayType, enum SensorUpdateMechanismConstants UpdateMechanism, VARIANT * Element );
__declspec(implementation_key(2518)) int _ISheetMetalSensorsAuto::GetCount ( );
__declspec(implementation_key(2519)) IDispatchPtr _ISheetMetalSensorsAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(2520)) IUnknownPtr _ISheetMetalSensorsAuto::Get_NewEnum ( );
__declspec(implementation_key(2521)) IDispatchPtr _ISheetMetalSensorsAuto::GetApplication ( );
__declspec(implementation_key(2522)) IDispatchPtr _ISheetMetalSensorsAuto::GetParent ( );
__declspec(implementation_key(2523)) IDispatchPtr _ISheetMetalSensorsAuto::AddVariableSensor ( IDispatch * variable, _bstr_t Name, _bstr_t Description, double LowerRange, double UpperRange, double MinimumThreshold, double MaximumThreshold, enum SensorOperatorConstants Operator, enum SensorDisplayTypeConstants DisplayType, enum SensorUpdateMechanismConstants UpdateMechanism );
__declspec(implementation_key(2524)) IDispatchPtr _ISheetMetalSensorsAuto::AddMinimumDistanceSensor ( IDispatch * Element1, IDispatch * Element2, _bstr_t Name, _bstr_t Description, double LowerRange, double UpperRange, double MinimumThreshold, double MaximumThreshold, enum SensorOperatorConstants Operator, enum SensorDisplayTypeConstants DisplayType, enum SensorUpdateMechanismConstants UpdateMechanism );
__declspec(implementation_key(2525)) IDispatchPtr _ISheetMetalSensorsAuto::AddSheetMetalCheckerSensor ( enum SheetMetalSensorFeatureTypeConstants LeftFeatureType, enum SheetMetalSensorFeatureTypeConstants RightFeatureType, _bstr_t Name, _bstr_t Description, double Threshold, enum SensorUpdateMechanismConstants UpdateMechanism, VARIANT * Element );
__declspec(implementation_key(2526)) IDispatchPtr _ISheetMetalSensorsAuto::AddSurfaceAreaSensor ( enum SurfaceAreaSensorAreaTypeConstants iSensorType, enum SurfaceAreaSensorSelectionTypeConstants iSelectionType, _bstr_t Name, _bstr_t Description, double LowerRange, double UpperRange, double MinimumThreshold, double MaximumThreshold, enum SensorOperatorConstants Operator, enum SensorDisplayTypeConstants DisplayType, enum SensorUpdateMechanismConstants UpdateMechanism, VARIANT * Element );
__declspec(implementation_key(2527)) void _ISectionViewAuto::PutCaption ( _bstr_t Caption );
__declspec(implementation_key(2528)) _bstr_t _ISectionViewAuto::GetCaption ( );
__declspec(implementation_key(2529)) HRESULT _ISectionViewAuto::Show ( VARIANT_BOOL bShowSectionView );
__declspec(implementation_key(2530)) HRESULT _ISectionViewAuto::Delete ( );
__declspec(implementation_key(2531)) void _ISectionViewAuto::PutName ( _bstr_t Name );
__declspec(implementation_key(2532)) _bstr_t _ISectionViewAuto::GetName ( );
__declspec(implementation_key(2533)) void _ISectionViewAuto::PutStyle ( _bstr_t Style );
__declspec(implementation_key(2534)) _bstr_t _ISectionViewAuto::GetStyle ( );
__declspec(implementation_key(2535)) void _ISectionViewAuto::PutCuttingPlaneColor ( long PlaneColor );
__declspec(implementation_key(2536)) long _ISectionViewAuto::GetCuttingPlaneColor ( );
__declspec(implementation_key(2537)) void _ISectionViewAuto::PutCuttingPlaneEdgeColor ( long EdgeColor );
__declspec(implementation_key(2538)) long _ISectionViewAuto::GetCuttingPlaneEdgeColor ( );
__declspec(implementation_key(2539)) void _ISectionViewAuto::PutOpacity ( double pdOpacity );
__declspec(implementation_key(2540)) double _ISectionViewAuto::GetOpacity ( );
__declspec(implementation_key(2541)) void _ISectionViewAuto::PutThroughAllExtent ( double pdExtent );
__declspec(implementation_key(2542)) double _ISectionViewAuto::GetThroughAllExtent ( );
__declspec(implementation_key(2543)) void _ISectionViewAuto::PutCutHardware ( long pbCutHardware );
__declspec(implementation_key(2544)) long _ISectionViewAuto::GetCutHardware ( );
__declspec(implementation_key(2545)) void _ISectionViewAuto::PutSectionDisplayMode ( enum PMISectionDisplayModeConstants val );
__declspec(implementation_key(2546)) enum PMISectionDisplayModeConstants _ISectionViewAuto::GetSectionDisplayMode ( );
__declspec(implementation_key(2547)) void _ISectionViewAuto::PutShowCuttingPlane ( long pbShowCuttingPlane );
__declspec(implementation_key(2548)) long _ISectionViewAuto::GetShowCuttingPlane ( );
__declspec(implementation_key(2549)) HRESULT _ISectionViewAuto::AddToModelView ( IUnknown * ModelView );
__declspec(implementation_key(2550)) HRESULT _ISectionViewAuto::RemoveFromModelView ( IUnknown * ModelView );
__declspec(implementation_key(2551)) HRESULT _ISectionViewAuto::EditByPlane ( long nNumPlanes, SAFEARRAY * * pPlanes, SAFEARRAY * * PlaneCutDirections, enum SectionViewPlaneExtentTypeConstant eExtentType, long bCutHardwareParts );
__declspec(implementation_key(2552)) void _ISectionViewAuto::PutPlaneExtentType ( enum SectionViewPlaneExtentTypeConstant peExtentType );
__declspec(implementation_key(2553)) enum SectionViewPlaneExtentTypeConstant _ISectionViewAuto::GetPlaneExtentType ( );
__declspec(implementation_key(2554)) IDispatchPtr _ISectionViewAuto::GetAttributeSets ( );
__declspec(implementation_key(2555)) VARIANT_BOOL _ISectionViewAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(2556)) HRESULT _ISectionViewAuto::EditByPlaneEx ( long nNumPlanes, SAFEARRAY * * pPlanes, SAFEARRAY * * PlaneCutDirections, SAFEARRAY * * SectionViewPlaneTypes, enum SectionViewPlaneExtentTypeConstant eExtentType, VARIANT_BOOL bCutHardwareParts );
__declspec(implementation_key(2557)) long _ISectionViewAuto::GetIsCutByPlane ( );
__declspec(implementation_key(2558)) int _ISectionViewsAuto::GetCount ( );
__declspec(implementation_key(2559)) IDispatchPtr _ISectionViewsAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(2560)) IUnknownPtr _ISectionViewsAuto::Get_NewEnum ( );
__declspec(implementation_key(2561)) IDispatchPtr _ISectionViewsAuto::GetApplication ( );
__declspec(implementation_key(2562)) IDispatchPtr _ISectionViewsAuto::GetParent ( );
__declspec(implementation_key(2563)) IDispatchPtr _ISectionViewsAuto::Add ( long nNumProfiles, SAFEARRAY * * pProfiles, _bstr_t szCaption, double dExtent, enum SectionViewExtentSide eExtentSide, enum SectionViewProfileSide eProfileSide, long bCutHardwareParts );
__declspec(implementation_key(2564)) IDispatchPtr _ISectionViewsAuto::AddByPlane ( long nNumPlanes, SAFEARRAY * * pPlanes, SAFEARRAY * * PlaneCutDirections, enum SectionViewPlaneExtentTypeConstant eExtentType, _bstr_t szCaption, long bCutHardwareParts );
__declspec(implementation_key(2565)) IDispatchPtr _ISectionViewsAuto::AddByPlaneEx ( long nNumPlanes, SAFEARRAY * * pPlanes, SAFEARRAY * * PlaneCutDirections, SAFEARRAY * * SectionViewPlaneTypes, enum SectionViewPlaneExtentTypeConstant eExtentType, _bstr_t szCaption, VARIANT_BOOL bCutHardwareParts );
__declspec(implementation_key(2566)) ApplicationPtr _ILayerAuto::GetApplication ( );
__declspec(implementation_key(2567)) IDispatchPtr _ILayerAuto::GetParent ( );
__declspec(implementation_key(2568)) HRESULT _ILayerAuto::Delete ( );
__declspec(implementation_key(2569)) VARIANT_BOOL _ILayerAuto::GetIsEmpty ( );
__declspec(implementation_key(2570)) _bstr_t _ILayerAuto::GetKey ( );
__declspec(implementation_key(2571)) void _ILayerAuto::PutName ( _bstr_t Name );
__declspec(implementation_key(2572)) _bstr_t _ILayerAuto::GetName ( );
__declspec(implementation_key(2573)) void _ILayerAuto::PutDescription ( _bstr_t Description );
__declspec(implementation_key(2574)) _bstr_t _ILayerAuto::GetDescription ( );
__declspec(implementation_key(2575)) HRESULT _ILayerAuto::Activate ( );
__declspec(implementation_key(2576)) VARIANT_BOOL _ILayerAuto::GetShow ( );
__declspec(implementation_key(2577)) void _ILayerAuto::PutShow ( VARIANT_BOOL Value );
__declspec(implementation_key(2578)) VARIANT_BOOL _ILayerAuto::GetLocatable ( );
__declspec(implementation_key(2579)) void _ILayerAuto::PutLocatable ( VARIANT_BOOL Value );
__declspec(implementation_key(2580)) HRESULT _ILayerAuto::ShowInContext ( IDispatch * Context );
__declspec(implementation_key(2581)) HRESULT _ILayerAuto::HideInContext ( IDispatch * Context );
__declspec(implementation_key(2582)) HRESULT _ILayerAuto::MakeLocatableInContext ( IDispatch * Context );
__declspec(implementation_key(2583)) HRESULT _ILayerAuto::MakeNonLocatableInContext ( IDispatch * Context );
__declspec(implementation_key(2584)) HRESULT _ILayerAuto::ActivateInContext ( IDispatch * Context );
__declspec(implementation_key(2585)) VARIANT_BOOL _ILayerAuto::IsShownInContext ( IDispatch * Context );
__declspec(implementation_key(2586)) VARIANT_BOOL _ILayerAuto::IsLocatableInContext ( IDispatch * Context );
__declspec(implementation_key(2587)) HRESULT _ILayerAuto::ShowOnly ( );
__declspec(implementation_key(2588)) HRESULT _ILayerAuto::ShowOnlyInContext ( IDispatch * Context );
__declspec(implementation_key(2589)) HRESULT _ILayerAuto::DeleteLayerAndObjects ( );
__declspec(implementation_key(2590)) HRESULT _ILayerAuto::ShowEverywhere ( );
__declspec(implementation_key(2591)) HRESULT _ILayerAuto::HideEverywhere ( );
__declspec(implementation_key(2592)) HRESULT _ILayerAuto::MoveAllObjectsToLayer ( IDispatch * NewLayerDispatch );
__declspec(implementation_key(2593)) IDispatchPtr _ILayerAuto::GetAttributeSets ( );
__declspec(implementation_key(2594)) VARIANT_BOOL _ILayerAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(2595)) ApplicationPtr Layer::GetApplication ( );
__declspec(implementation_key(2596)) IDispatchPtr Layer::GetParent ( );
__declspec(implementation_key(2597)) HRESULT Layer::Delete ( );
__declspec(implementation_key(2598)) VARIANT_BOOL Layer::GetIsEmpty ( );
__declspec(implementation_key(2599)) _bstr_t Layer::GetKey ( );
__declspec(implementation_key(2600)) void Layer::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(2601)) _bstr_t Layer::GetName ( );
__declspec(implementation_key(2602)) void Layer::PutDescription ( _bstr_t _arg1 );
__declspec(implementation_key(2603)) _bstr_t Layer::GetDescription ( );
__declspec(implementation_key(2604)) HRESULT Layer::Activate ( );
__declspec(implementation_key(2605)) VARIANT_BOOL Layer::GetShow ( );
__declspec(implementation_key(2606)) void Layer::PutShow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2607)) VARIANT_BOOL Layer::GetLocatable ( );
__declspec(implementation_key(2608)) void Layer::PutLocatable ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2609)) HRESULT Layer::ShowInContext ( IDispatch * Context );
__declspec(implementation_key(2610)) HRESULT Layer::HideInContext ( IDispatch * Context );
__declspec(implementation_key(2611)) HRESULT Layer::MakeLocatableInContext ( IDispatch * Context );
__declspec(implementation_key(2612)) HRESULT Layer::MakeNonLocatableInContext ( IDispatch * Context );
__declspec(implementation_key(2613)) HRESULT Layer::ActivateInContext ( IDispatch * Context );
__declspec(implementation_key(2614)) VARIANT_BOOL Layer::IsShownInContext ( IDispatch * Context );
__declspec(implementation_key(2615)) VARIANT_BOOL Layer::IsLocatableInContext ( IDispatch * Context );
__declspec(implementation_key(2616)) HRESULT Layer::ShowOnly ( );
__declspec(implementation_key(2617)) HRESULT Layer::ShowOnlyInContext ( IDispatch * Context );
__declspec(implementation_key(2618)) HRESULT Layer::DeleteLayerAndObjects ( );
__declspec(implementation_key(2619)) HRESULT Layer::ShowEverywhere ( );
__declspec(implementation_key(2620)) HRESULT Layer::HideEverywhere ( );
__declspec(implementation_key(2621)) HRESULT Layer::MoveAllObjectsToLayer ( IDispatch * NewLayerDispatch );
__declspec(implementation_key(2622)) IDispatchPtr Layer::GetAttributeSets ( );
__declspec(implementation_key(2623)) VARIANT_BOOL Layer::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(2624)) LayerPtr _ILayersAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(2625)) ApplicationPtr _ILayersAuto::GetApplication ( );
__declspec(implementation_key(2626)) IDispatchPtr _ILayersAuto::GetParent ( );
__declspec(implementation_key(2627)) long _ILayersAuto::GetCount ( );
__declspec(implementation_key(2628)) LayerPtr _ILayersAuto::Add ( _bstr_t Name );
__declspec(implementation_key(2629)) LayerPtr _ILayersAuto::GetActiveLayer ( );
__declspec(implementation_key(2630)) IUnknownPtr _ILayersAuto::Get_NewEnum ( );
__declspec(implementation_key(2631)) void _ILinearStyleAuto::PutName ( _bstr_t Name );
__declspec(implementation_key(2632)) _bstr_t _ILinearStyleAuto::GetName ( );
__declspec(implementation_key(2633)) void _ILinearStyleAuto::PutParent ( _bstr_t Name );
__declspec(implementation_key(2634)) _bstr_t _ILinearStyleAuto::GetParent ( );
__declspec(implementation_key(2635)) _bstr_t _ILinearStyleAuto::GetDescription ( );
__declspec(implementation_key(2636)) void _ILinearStyleAuto::PutUnits ( enum StyleUnitsConstant Units );
__declspec(implementation_key(2637)) enum StyleUnitsConstant _ILinearStyleAuto::GetUnits ( );
__declspec(implementation_key(2638)) void _ILinearStyleAuto::PutColor ( long Color );
__declspec(implementation_key(2639)) long _ILinearStyleAuto::GetColor ( );
__declspec(implementation_key(2640)) void _ILinearStyleAuto::PutWidth ( double Width );
__declspec(implementation_key(2641)) double _ILinearStyleAuto::GetWidth ( );
__declspec(implementation_key(2642)) HRESULT _ILinearStyleAuto::SetDashGap ( long nCount, SAFEARRAY * * dDashGap, VARIANT_BOOL fAutoPhase );
__declspec(implementation_key(2643)) long _ILinearStyleAuto::GetDashGapCount ( );
__declspec(implementation_key(2644)) HRESULT _ILinearStyleAuto::GetDashGap ( long * pnCount, SAFEARRAY * * dDashGap, VARIANT_BOOL * pfAutoPhase );
__declspec(implementation_key(2645)) void _ILinearStyleAuto::PutDashType ( _bstr_t Name );
__declspec(implementation_key(2646)) _bstr_t _ILinearStyleAuto::GetDashType ( );
__declspec(implementation_key(2647)) IDispatchPtr _ILinearStyleAuto::GetAttributeSets ( );
__declspec(implementation_key(2648)) VARIANT_BOOL _ILinearStyleAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(2649)) void _IFillStyleAuto::PutName ( _bstr_t Name );
__declspec(implementation_key(2650)) _bstr_t _IFillStyleAuto::GetName ( );
__declspec(implementation_key(2651)) _bstr_t _IFillStyleAuto::GetDescription ( );
__declspec(implementation_key(2652)) void _IFillStyleAuto::PutPatternName ( _bstr_t Name );
__declspec(implementation_key(2653)) _bstr_t _IFillStyleAuto::GetPatternName ( );
__declspec(implementation_key(2654)) long _IFillStyleAuto::GetPatternType ( );
__declspec(implementation_key(2655)) void _IFillStyleAuto::PutColor ( long Color );
__declspec(implementation_key(2656)) long _IFillStyleAuto::GetColor ( );
__declspec(implementation_key(2657)) void _IFillStyleAuto::PutFillBackground ( long flag );
__declspec(implementation_key(2658)) long _IFillStyleAuto::GetFillBackground ( );
__declspec(implementation_key(2659)) void _IFillStyleAuto::PutFillColor ( long Color );
__declspec(implementation_key(2660)) long _IFillStyleAuto::GetFillColor ( );
__declspec(implementation_key(2661)) void _IFillStyleAuto::PutRotation ( double Angle );
__declspec(implementation_key(2662)) double _IFillStyleAuto::GetRotation ( );
__declspec(implementation_key(2663)) void _IFillStyleAuto::PutSpacing ( double Spacing );
__declspec(implementation_key(2664)) double _IFillStyleAuto::GetSpacing ( );
__declspec(implementation_key(2665)) void _IFillStyleAuto::PutScale ( double __MIDL___IFillStyleAuto0001 );
__declspec(implementation_key(2666)) double _IFillStyleAuto::GetScale ( );
__declspec(implementation_key(2667)) void _IFillStyleAuto::PutUnits ( long Units );
__declspec(implementation_key(2668)) long _IFillStyleAuto::GetUnits ( );
__declspec(implementation_key(2669)) void _IFillStyleAuto::PutParent ( _bstr_t Name );
__declspec(implementation_key(2670)) _bstr_t _IFillStyleAuto::GetParent ( );
__declspec(implementation_key(2671)) void _IFillStyleAuto::PutActive ( _bstr_t Name );
__declspec(implementation_key(2672)) _bstr_t _IFillStyleAuto::GetActive ( );
__declspec(implementation_key(2673)) void _IHatchPatternStyleAuto::PutName ( _bstr_t lpName );
__declspec(implementation_key(2674)) _bstr_t _IHatchPatternStyleAuto::GetName ( );
__declspec(implementation_key(2675)) void _IHatchPatternStyleAuto::PutParent ( _bstr_t lpName );
__declspec(implementation_key(2676)) _bstr_t _IHatchPatternStyleAuto::GetParent ( );
__declspec(implementation_key(2677)) void _IHatchPatternStyleAuto::PutUnits ( long lpUnits );
__declspec(implementation_key(2678)) long _IHatchPatternStyleAuto::GetUnits ( );
__declspec(implementation_key(2679)) long _IHatchPatternStyleAuto::GetCount ( );
__declspec(implementation_key(2680)) long _IHatchPatternStyleAuto::AddHatch ( double dRotation, double dXOrigin, double dYOrigin, double dSpacing, double dShift, long nColor, double dWidth, _bstr_t DashTypeName );
__declspec(implementation_key(2681)) HRESULT _IHatchPatternStyleAuto::GetHatch ( long nDisplayIndex, double * lpdRotation, double * lpdXOrigin, double * lpdYOrigin, double * lpdSpacing, double * lpdShift, long * lpnColor, double * lpdWidth, BSTR * DashTypeName );
__declspec(implementation_key(2682)) HRESULT _IHatchPatternStyleAuto::SetHatch ( long nDisplayIndex, double dRotation, double dXOrigin, double dYOrigin, double dSpacing, double dShift, long nColor, double dWidth, _bstr_t DashTypeName );
__declspec(implementation_key(2683)) HRESULT _IHatchPatternStyleAuto::RemoveHatch ( long nDisplayIndex );
__declspec(implementation_key(2684)) HRESULT _IHatchPatternStyleAuto::SetRotation ( long nDisplayIndex, double dRotation );
__declspec(implementation_key(2685)) double _IHatchPatternStyleAuto::GetRotation ( long nDisplayIndex );
__declspec(implementation_key(2686)) HRESULT _IHatchPatternStyleAuto::SetOrigin ( long nDisplayIndex, double dX, double dY );
__declspec(implementation_key(2687)) HRESULT _IHatchPatternStyleAuto::GetOrigin ( long nDisplayIndex, double * lpdX, double * lpdY );
__declspec(implementation_key(2688)) HRESULT _IHatchPatternStyleAuto::SetSpacing ( long nDisplayIndex, double dSpacing );
__declspec(implementation_key(2689)) double _IHatchPatternStyleAuto::GetSpacing ( long nDisplayIndex );
__declspec(implementation_key(2690)) HRESULT _IHatchPatternStyleAuto::SetShift ( long nDisplayIndex, double dShift );
__declspec(implementation_key(2691)) double _IHatchPatternStyleAuto::GetShift ( long nDisplayIndex );
__declspec(implementation_key(2692)) HRESULT _IHatchPatternStyleAuto::SetColor ( long nDisplayIndex, long nColor );
__declspec(implementation_key(2693)) long _IHatchPatternStyleAuto::GetColor ( long nDisplayIndex );
__declspec(implementation_key(2694)) HRESULT _IHatchPatternStyleAuto::SetWidth ( long nDisplayIndex, double dWidth );
__declspec(implementation_key(2695)) double _IHatchPatternStyleAuto::GetWidth ( long nDisplayIndex );
__declspec(implementation_key(2696)) HRESULT _IHatchPatternStyleAuto::SetDashType ( long nDisplayIndex, _bstr_t DashTypeName );
__declspec(implementation_key(2697)) _bstr_t _IHatchPatternStyleAuto::GetDashType ( long nDisplayIndex );
__declspec(implementation_key(2698)) HRESULT _IHatchPatternStyleAuto::SetDisplayIndex ( long nCurrentIndex, long nNewIndex );
__declspec(implementation_key(2699)) HRESULT _IHatchPatternStyleAuto::SetDashGap ( long nDisplayIndex, long nCount, SAFEARRAY * * dDashGap );
__declspec(implementation_key(2700)) long _IHatchPatternStyleAuto::GetDashGapCount ( long nDisplayIndex );
__declspec(implementation_key(2701)) HRESULT _IHatchPatternStyleAuto::GetDashGap ( long nDisplayIndex, long * pnCount, SAFEARRAY * * dDashGap );
__declspec(implementation_key(2702)) IDispatchPtr _IHatchPatternStyleAuto::GetAttributeSets ( );
__declspec(implementation_key(2703)) VARIANT_BOOL _IHatchPatternStyleAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(2704)) void _IHatchPatternStyleAuto::PutMasterRotation ( double pdRotation );
__declspec(implementation_key(2705)) double _IHatchPatternStyleAuto::GetMasterRotation ( );
__declspec(implementation_key(2706)) void _IHatchPatternStyleAuto::PutMasterScale ( double pdScale );
__declspec(implementation_key(2707)) double _IHatchPatternStyleAuto::GetMasterScale ( );
__declspec(implementation_key(2708)) HRESULT _IHatchPatternStyleAuto::SetMasterColor ( long nColor );
__declspec(implementation_key(2709)) HRESULT _IHatchPatternStyleAuto::SetMasterWidth ( double dWidth );
__declspec(implementation_key(2710)) long _IHatchPatternStyleAuto::AddHatchWithOption ( double dRotation, double dXOrigin, double dYOrigin, double dSpacing, double dShift, long nColor, double dWidth, _bstr_t DashTypeName, enum HatchElementType elementType, enum RadialHatchElementCenterLocation ellipseCenterLocation, double dEllipseAxisRatio );
__declspec(implementation_key(2711)) HRESULT _IHatchPatternStyleAuto::GetHatchWithOption ( long nDisplayIndex, double * lpdRotation, double * lpdXOrigin, double * lpdYOrigin, double * lpdSpacing, double * lpdShift, long * lpnColor, double * lpdWidth, BSTR * DashTypeName, enum HatchElementType * elementType, enum RadialHatchElementCenterLocation * ellipseCenterLocation, double * dEllipseAxisRatio );
__declspec(implementation_key(2712)) HRESULT _IHatchPatternStyleAuto::SetHatchWithOption ( long nDisplayIndex, double dRotation, double dXOrigin, double dYOrigin, double dSpacing, double dShift, long nColor, double dWidth, _bstr_t DashTypeName, enum HatchElementType elementType, enum RadialHatchElementCenterLocation ellipseCenterLocation, double dEllipseAxisRatio );
__declspec(implementation_key(2713)) HRESULT _IHatchPatternStyleAuto::SetElementType ( long nDisplayIndex, enum HatchElementType elementType );
__declspec(implementation_key(2714)) enum HatchElementType _IHatchPatternStyleAuto::GetElementType ( long nDisplayIndex );
__declspec(implementation_key(2715)) HRESULT _IHatchPatternStyleAuto::SetRadialElementCenterLocation ( long nDisplayIndex, enum RadialHatchElementCenterLocation ellipseCenterLocation );
__declspec(implementation_key(2716)) enum RadialHatchElementCenterLocation _IHatchPatternStyleAuto::GetRadialElementCenterLocation ( long nDisplayIndex );
__declspec(implementation_key(2717)) HRESULT _IHatchPatternStyleAuto::SetRadialElementAxisRatio ( long nDisplayIndex, double dEllipseAxisRatio );
__declspec(implementation_key(2718)) double _IHatchPatternStyleAuto::GetRadialElementAxisRatio ( long nDisplayIndex );
__declspec(implementation_key(2719)) HRESULT _IHatchPatternStyleAuto::SetSourceColor ( long nColor );
__declspec(implementation_key(2720)) HRESULT _IHatchPatternStyleAuto::SetSourceWidth ( double dWidth );
__declspec(implementation_key(2721)) void _IHatchPatternStyleAuto::PutSourceRotation ( double pdRotation );
__declspec(implementation_key(2722)) double _IHatchPatternStyleAuto::GetSourceRotation ( );
__declspec(implementation_key(2723)) void _IHatchPatternStyleAuto::PutSourceScale ( double pdScale );
__declspec(implementation_key(2724)) double _IHatchPatternStyleAuto::GetSourceScale ( );
__declspec(implementation_key(2725)) void LinearStyle::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(2726)) _bstr_t LinearStyle::GetName ( );
__declspec(implementation_key(2727)) void LinearStyle::PutParent ( _bstr_t _arg1 );
__declspec(implementation_key(2728)) _bstr_t LinearStyle::GetParent ( );
__declspec(implementation_key(2729)) _bstr_t LinearStyle::GetDescription ( );
__declspec(implementation_key(2730)) void LinearStyle::PutUnits ( enum StyleUnitsConstant _arg1 );
__declspec(implementation_key(2731)) enum StyleUnitsConstant LinearStyle::GetUnits ( );
__declspec(implementation_key(2732)) void LinearStyle::PutColor ( long _arg1 );
__declspec(implementation_key(2733)) long LinearStyle::GetColor ( );
__declspec(implementation_key(2734)) void LinearStyle::PutWidth ( double _arg1 );
__declspec(implementation_key(2735)) double LinearStyle::GetWidth ( );
__declspec(implementation_key(2736)) HRESULT LinearStyle::SetDashGap ( long nCount, SAFEARRAY * * dDashGap, VARIANT_BOOL fAutoPhase );
__declspec(implementation_key(2737)) long LinearStyle::GetDashGapCount ( );
__declspec(implementation_key(2738)) HRESULT LinearStyle::GetDashGap ( long * pnCount, SAFEARRAY * * dDashGap, VARIANT_BOOL * pfAutoPhase );
__declspec(implementation_key(2739)) void LinearStyle::PutDashType ( _bstr_t _arg1 );
__declspec(implementation_key(2740)) _bstr_t LinearStyle::GetDashType ( );
__declspec(implementation_key(2741)) IDispatchPtr LinearStyle::GetAttributeSets ( );
__declspec(implementation_key(2742)) VARIANT_BOOL LinearStyle::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(2743)) long _ILinearStylesAuto::GetCount ( );
__declspec(implementation_key(2744)) IDispatchPtr _ILinearStylesAuto::GetParent ( );
__declspec(implementation_key(2745)) IDispatchPtr _ILinearStylesAuto::GetApplication ( );
__declspec(implementation_key(2746)) LinearStylePtr _ILinearStylesAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(2747)) IUnknownPtr _ILinearStylesAuto::Get_NewEnum ( );
__declspec(implementation_key(2748)) LinearStylePtr _ILinearStylesAuto::Add ( _bstr_t Name, _bstr_t Parent );
__declspec(implementation_key(2749)) HRESULT _ILinearStylesAuto::Remove ( _bstr_t Name );
__declspec(implementation_key(2750)) _bstr_t _ILinearStylesAuto::GetActive ( );
__declspec(implementation_key(2751)) void _ILinearStylesAuto::PutActive ( _bstr_t Name );
__declspec(implementation_key(2752)) void FillStyle::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(2753)) _bstr_t FillStyle::GetName ( );
__declspec(implementation_key(2754)) _bstr_t FillStyle::GetDescription ( );
__declspec(implementation_key(2755)) void FillStyle::PutPatternName ( _bstr_t _arg1 );
__declspec(implementation_key(2756)) _bstr_t FillStyle::GetPatternName ( );
__declspec(implementation_key(2757)) long FillStyle::GetPatternType ( );
__declspec(implementation_key(2758)) void FillStyle::PutColor ( long _arg1 );
__declspec(implementation_key(2759)) long FillStyle::GetColor ( );
__declspec(implementation_key(2760)) void FillStyle::PutFillBackground ( long _arg1 );
__declspec(implementation_key(2761)) long FillStyle::GetFillBackground ( );
__declspec(implementation_key(2762)) void FillStyle::PutFillColor ( long _arg1 );
__declspec(implementation_key(2763)) long FillStyle::GetFillColor ( );
__declspec(implementation_key(2764)) void FillStyle::PutRotation ( double _arg1 );
__declspec(implementation_key(2765)) double FillStyle::GetRotation ( );
__declspec(implementation_key(2766)) void FillStyle::PutSpacing ( double _arg1 );
__declspec(implementation_key(2767)) double FillStyle::GetSpacing ( );
__declspec(implementation_key(2768)) void FillStyle::PutScale ( double _arg1 );
__declspec(implementation_key(2769)) double FillStyle::GetScale ( );
__declspec(implementation_key(2770)) void FillStyle::PutUnits ( long _arg1 );
__declspec(implementation_key(2771)) long FillStyle::GetUnits ( );
__declspec(implementation_key(2772)) void FillStyle::PutParent ( _bstr_t _arg1 );
__declspec(implementation_key(2773)) _bstr_t FillStyle::GetParent ( );
__declspec(implementation_key(2774)) void FillStyle::PutActive ( _bstr_t _arg1 );
__declspec(implementation_key(2775)) _bstr_t FillStyle::GetActive ( );
__declspec(implementation_key(2776)) long _IFillStylesAuto::GetCount ( );
__declspec(implementation_key(2777)) IDispatchPtr _IFillStylesAuto::GetParent ( );
__declspec(implementation_key(2778)) IDispatchPtr _IFillStylesAuto::GetApplication ( );
__declspec(implementation_key(2779)) FillStylePtr _IFillStylesAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(2780)) IUnknownPtr _IFillStylesAuto::Get_NewEnum ( );
__declspec(implementation_key(2781)) FillStylePtr _IFillStylesAuto::Add ( _bstr_t Name, _bstr_t Parent );
__declspec(implementation_key(2782)) HRESULT _IFillStylesAuto::Remove ( _bstr_t Name );
__declspec(implementation_key(2783)) void _IFillStylesAuto::PutActive ( _bstr_t Name );
__declspec(implementation_key(2784)) _bstr_t _IFillStylesAuto::GetActive ( );
__declspec(implementation_key(2785)) void HatchPatternStyle::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(2786)) _bstr_t HatchPatternStyle::GetName ( );
__declspec(implementation_key(2787)) void HatchPatternStyle::PutParent ( _bstr_t _arg1 );
__declspec(implementation_key(2788)) _bstr_t HatchPatternStyle::GetParent ( );
__declspec(implementation_key(2789)) void HatchPatternStyle::PutUnits ( long _arg1 );
__declspec(implementation_key(2790)) long HatchPatternStyle::GetUnits ( );
__declspec(implementation_key(2791)) long HatchPatternStyle::GetCount ( );
__declspec(implementation_key(2792)) long HatchPatternStyle::AddHatch ( double dRotation, double dXOrigin, double dYOrigin, double dSpacing, double dShift, long nColor, double dWidth, _bstr_t DashTypeName );
__declspec(implementation_key(2793)) HRESULT HatchPatternStyle::GetHatch ( long nDisplayIndex, double * lpdRotation, double * lpdXOrigin, double * lpdYOrigin, double * lpdSpacing, double * lpdShift, long * lpnColor, double * lpdWidth, BSTR * DashTypeName );
__declspec(implementation_key(2794)) HRESULT HatchPatternStyle::SetHatch ( long nDisplayIndex, double dRotation, double dXOrigin, double dYOrigin, double dSpacing, double dShift, long nColor, double dWidth, _bstr_t DashTypeName );
__declspec(implementation_key(2795)) HRESULT HatchPatternStyle::RemoveHatch ( long nDisplayIndex );
__declspec(implementation_key(2796)) HRESULT HatchPatternStyle::SetRotation ( long nDisplayIndex, double dRotation );
__declspec(implementation_key(2797)) double HatchPatternStyle::GetRotation ( long nDisplayIndex );
__declspec(implementation_key(2798)) HRESULT HatchPatternStyle::SetOrigin ( long nDisplayIndex, double dX, double dY );
__declspec(implementation_key(2799)) HRESULT HatchPatternStyle::GetOrigin ( long nDisplayIndex, double * lpdX, double * lpdY );
__declspec(implementation_key(2800)) HRESULT HatchPatternStyle::SetSpacing ( long nDisplayIndex, double dSpacing );
__declspec(implementation_key(2801)) double HatchPatternStyle::GetSpacing ( long nDisplayIndex );
__declspec(implementation_key(2802)) HRESULT HatchPatternStyle::SetShift ( long nDisplayIndex, double dShift );
__declspec(implementation_key(2803)) double HatchPatternStyle::GetShift ( long nDisplayIndex );
__declspec(implementation_key(2804)) HRESULT HatchPatternStyle::SetColor ( long nDisplayIndex, long nColor );
__declspec(implementation_key(2805)) long HatchPatternStyle::GetColor ( long nDisplayIndex );
__declspec(implementation_key(2806)) HRESULT HatchPatternStyle::SetWidth ( long nDisplayIndex, double dWidth );
__declspec(implementation_key(2807)) double HatchPatternStyle::GetWidth ( long nDisplayIndex );
__declspec(implementation_key(2808)) HRESULT HatchPatternStyle::SetDashType ( long nDisplayIndex, _bstr_t DashTypeName );
__declspec(implementation_key(2809)) _bstr_t HatchPatternStyle::GetDashType ( long nDisplayIndex );
__declspec(implementation_key(2810)) HRESULT HatchPatternStyle::SetDisplayIndex ( long nCurrentIndex, long nNewIndex );
__declspec(implementation_key(2811)) HRESULT HatchPatternStyle::SetDashGap ( long nDisplayIndex, long nCount, SAFEARRAY * * dDashGap );
__declspec(implementation_key(2812)) long HatchPatternStyle::GetDashGapCount ( long nDisplayIndex );
__declspec(implementation_key(2813)) HRESULT HatchPatternStyle::GetDashGap ( long nDisplayIndex, long * pnCount, SAFEARRAY * * dDashGap );
__declspec(implementation_key(2814)) IDispatchPtr HatchPatternStyle::GetAttributeSets ( );
__declspec(implementation_key(2815)) VARIANT_BOOL HatchPatternStyle::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(2816)) void HatchPatternStyle::PutMasterRotation ( double _arg1 );
__declspec(implementation_key(2817)) double HatchPatternStyle::GetMasterRotation ( );
__declspec(implementation_key(2818)) void HatchPatternStyle::PutMasterScale ( double _arg1 );
__declspec(implementation_key(2819)) double HatchPatternStyle::GetMasterScale ( );
__declspec(implementation_key(2820)) HRESULT HatchPatternStyle::SetMasterColor ( long nColor );
__declspec(implementation_key(2821)) HRESULT HatchPatternStyle::SetMasterWidth ( double dWidth );
__declspec(implementation_key(2822)) long HatchPatternStyle::AddHatchWithOption ( double dRotation, double dXOrigin, double dYOrigin, double dSpacing, double dShift, long nColor, double dWidth, _bstr_t DashTypeName, enum HatchElementType elementType, enum RadialHatchElementCenterLocation ellipseCenterLocation, double dEllipseAxisRatio );
__declspec(implementation_key(2823)) HRESULT HatchPatternStyle::GetHatchWithOption ( long nDisplayIndex, double * lpdRotation, double * lpdXOrigin, double * lpdYOrigin, double * lpdSpacing, double * lpdShift, long * lpnColor, double * lpdWidth, BSTR * DashTypeName, enum HatchElementType * elementType, enum RadialHatchElementCenterLocation * ellipseCenterLocation, double * dEllipseAxisRatio );
__declspec(implementation_key(2824)) HRESULT HatchPatternStyle::SetHatchWithOption ( long nDisplayIndex, double dRotation, double dXOrigin, double dYOrigin, double dSpacing, double dShift, long nColor, double dWidth, _bstr_t DashTypeName, enum HatchElementType elementType, enum RadialHatchElementCenterLocation ellipseCenterLocation, double dEllipseAxisRatio );
__declspec(implementation_key(2825)) HRESULT HatchPatternStyle::SetElementType ( long nDisplayIndex, enum HatchElementType elementType );
__declspec(implementation_key(2826)) enum HatchElementType HatchPatternStyle::GetElementType ( long nDisplayIndex );
__declspec(implementation_key(2827)) HRESULT HatchPatternStyle::SetRadialElementCenterLocation ( long nDisplayIndex, enum RadialHatchElementCenterLocation ellipseCenterLocation );
__declspec(implementation_key(2828)) enum RadialHatchElementCenterLocation HatchPatternStyle::GetRadialElementCenterLocation ( long nDisplayIndex );
__declspec(implementation_key(2829)) HRESULT HatchPatternStyle::SetRadialElementAxisRatio ( long nDisplayIndex, double dEllipseAxisRatio );
__declspec(implementation_key(2830)) double HatchPatternStyle::GetRadialElementAxisRatio ( long nDisplayIndex );
__declspec(implementation_key(2831)) HRESULT HatchPatternStyle::SetSourceColor ( long nColor );
__declspec(implementation_key(2832)) HRESULT HatchPatternStyle::SetSourceWidth ( double dWidth );
__declspec(implementation_key(2833)) void HatchPatternStyle::PutSourceRotation ( double _arg1 );
__declspec(implementation_key(2834)) double HatchPatternStyle::GetSourceRotation ( );
__declspec(implementation_key(2835)) void HatchPatternStyle::PutSourceScale ( double _arg1 );
__declspec(implementation_key(2836)) double HatchPatternStyle::GetSourceScale ( );
__declspec(implementation_key(2837)) long _IHatchPatternStylesAuto::GetCount ( );
__declspec(implementation_key(2838)) IDispatchPtr _IHatchPatternStylesAuto::GetParent ( );
__declspec(implementation_key(2839)) IDispatchPtr _IHatchPatternStylesAuto::GetApplication ( );
__declspec(implementation_key(2840)) HatchPatternStylePtr _IHatchPatternStylesAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(2841)) IUnknownPtr _IHatchPatternStylesAuto::Get_NewEnum ( );
__declspec(implementation_key(2842)) HatchPatternStylePtr _IHatchPatternStylesAuto::Add ( _bstr_t Name, _bstr_t Parent );
__declspec(implementation_key(2843)) HRESULT _IHatchPatternStylesAuto::Remove ( _bstr_t Name );
__declspec(implementation_key(2844)) void _IDashStyleAuto::PutName ( _bstr_t lpName );
__declspec(implementation_key(2845)) _bstr_t _IDashStyleAuto::GetName ( );
__declspec(implementation_key(2846)) void _IDashStyleAuto::PutUnits ( long lpUnits );
__declspec(implementation_key(2847)) long _IDashStyleAuto::GetUnits ( );
__declspec(implementation_key(2848)) long _IDashStyleAuto::GetDashGapCount ( );
__declspec(implementation_key(2849)) HRESULT _IDashStyleAuto::SetDashGap ( long nCount, SAFEARRAY * * dDashGap );
__declspec(implementation_key(2850)) HRESULT _IDashStyleAuto::GetDashGap ( long * pnCount, SAFEARRAY * * dDashGap );
__declspec(implementation_key(2851)) void _IDashStyleAuto::PutCenter ( VARIANT_BOOL pvbCenter );
__declspec(implementation_key(2852)) VARIANT_BOOL _IDashStyleAuto::GetCenter ( );
__declspec(implementation_key(2853)) void _IDashStyleAuto::PutPercentStartEndDash ( double pdPercentStartEndDash );
__declspec(implementation_key(2854)) double _IDashStyleAuto::GetPercentStartEndDash ( );
__declspec(implementation_key(2855)) IDispatchPtr _IDashStyleAuto::GetAttributeSets ( );
__declspec(implementation_key(2856)) VARIANT_BOOL _IDashStyleAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(2857)) void DashStyle::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(2858)) _bstr_t DashStyle::GetName ( );
__declspec(implementation_key(2859)) void DashStyle::PutUnits ( long _arg1 );
__declspec(implementation_key(2860)) long DashStyle::GetUnits ( );
__declspec(implementation_key(2861)) long DashStyle::GetDashGapCount ( );
__declspec(implementation_key(2862)) HRESULT DashStyle::SetDashGap ( long nCount, SAFEARRAY * * dDashGap );
__declspec(implementation_key(2863)) HRESULT DashStyle::GetDashGap ( long * pnCount, SAFEARRAY * * dDashGap );
__declspec(implementation_key(2864)) void DashStyle::PutCenter ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2865)) VARIANT_BOOL DashStyle::GetCenter ( );
__declspec(implementation_key(2866)) void DashStyle::PutPercentStartEndDash ( double _arg1 );
__declspec(implementation_key(2867)) double DashStyle::GetPercentStartEndDash ( );
__declspec(implementation_key(2868)) IDispatchPtr DashStyle::GetAttributeSets ( );
__declspec(implementation_key(2869)) VARIANT_BOOL DashStyle::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(2870)) long _IDashStylesAuto::GetCount ( );
__declspec(implementation_key(2871)) IDispatchPtr _IDashStylesAuto::GetParent ( );
__declspec(implementation_key(2872)) IDispatchPtr _IDashStylesAuto::GetApplication ( );
__declspec(implementation_key(2873)) DashStylePtr _IDashStylesAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(2874)) IUnknownPtr _IDashStylesAuto::Get_NewEnum ( );
__declspec(implementation_key(2875)) DashStylePtr _IDashStylesAuto::Add ( _bstr_t Name );
__declspec(implementation_key(2876)) HRESULT _IDashStylesAuto::Remove ( _bstr_t Name );
__declspec(implementation_key(2877)) _bstr_t _IFaceStyleAuto::GetStyleName ( );
__declspec(implementation_key(2878)) void _IFaceStyleAuto::PutStyleName ( _bstr_t psStyleName );
__declspec(implementation_key(2879)) _bstr_t _IFaceStyleAuto::GetParent ( );
__declspec(implementation_key(2880)) void _IFaceStyleAuto::PutParent ( _bstr_t psParentName );
__declspec(implementation_key(2881)) long _IFaceStyleAuto::GetType ( );
__declspec(implementation_key(2882)) void _IFaceStyleAuto::PutType ( long plType );
__declspec(implementation_key(2883)) long _IFaceStyleAuto::GetFlags ( );
__declspec(implementation_key(2884)) void _IFaceStyleAuto::PutFlags ( long plFlags );
__declspec(implementation_key(2885)) float _IFaceStyleAuto::GetWireframeColorRed ( );
__declspec(implementation_key(2886)) void _IFaceStyleAuto::PutWireframeColorRed ( float pfWireframeColorRed );
__declspec(implementation_key(2887)) float _IFaceStyleAuto::GetWireframeColorGreen ( );
__declspec(implementation_key(2888)) void _IFaceStyleAuto::PutWireframeColorGreen ( float pfWireframeColorGreen );
__declspec(implementation_key(2889)) float _IFaceStyleAuto::GetWireframeColorBlue ( );
__declspec(implementation_key(2890)) void _IFaceStyleAuto::PutWireframeColorBlue ( float pfWireframeColorBlue );
__declspec(implementation_key(2891)) long _IFaceStyleAuto::GetStipplePattern ( );
__declspec(implementation_key(2892)) void _IFaceStyleAuto::PutStipplePattern ( long plStipplePattern );
__declspec(implementation_key(2893)) short _IFaceStyleAuto::GetStippleScale ( );
__declspec(implementation_key(2894)) void _IFaceStyleAuto::PutStippleScale ( short psStippleScale );
__declspec(implementation_key(2895)) float _IFaceStyleAuto::GetLineWidth ( );
__declspec(implementation_key(2896)) void _IFaceStyleAuto::PutLineWidth ( float pfLineWidth );
__declspec(implementation_key(2897)) short _IFaceStyleAuto::GetWidthSpace ( );
__declspec(implementation_key(2898)) void _IFaceStyleAuto::PutWidthSpace ( short psWidthSpace );
__declspec(implementation_key(2899)) float _IFaceStyleAuto::GetDiffuseRed ( );
__declspec(implementation_key(2900)) void _IFaceStyleAuto::PutDiffuseRed ( float pfDiffuseRed );
__declspec(implementation_key(2901)) float _IFaceStyleAuto::GetDiffuseGreen ( );
__declspec(implementation_key(2902)) void _IFaceStyleAuto::PutDiffuseGreen ( float pfDiffuseGreen );
__declspec(implementation_key(2903)) float _IFaceStyleAuto::GetDiffuseBlue ( );
__declspec(implementation_key(2904)) void _IFaceStyleAuto::PutDiffuseBlue ( float pfDiffuseBlue );
__declspec(implementation_key(2905)) float _IFaceStyleAuto::GetSpecularRed ( );
__declspec(implementation_key(2906)) void _IFaceStyleAuto::PutSpecularRed ( float pfSpecularRed );
__declspec(implementation_key(2907)) float _IFaceStyleAuto::GetSpecularGreen ( );
__declspec(implementation_key(2908)) void _IFaceStyleAuto::PutSpecularGreen ( float pfSpecularGreen );
__declspec(implementation_key(2909)) float _IFaceStyleAuto::GetSpecularBlue ( );
__declspec(implementation_key(2910)) void _IFaceStyleAuto::PutSpecularBlue ( float pfSpecularBlue );
__declspec(implementation_key(2911)) float _IFaceStyleAuto::GetAmbientRed ( );
__declspec(implementation_key(2912)) void _IFaceStyleAuto::PutAmbientRed ( float pfAmbientRed );
__declspec(implementation_key(2913)) float _IFaceStyleAuto::GetAmbientGreen ( );
__declspec(implementation_key(2914)) void _IFaceStyleAuto::PutAmbientGreen ( float pfAmbientGreen );
__declspec(implementation_key(2915)) float _IFaceStyleAuto::GetAmbientBlue ( );
__declspec(implementation_key(2916)) void _IFaceStyleAuto::PutAmbientBlue ( float pfAmbientBlue );
__declspec(implementation_key(2917)) float _IFaceStyleAuto::GetEmissionRed ( );
__declspec(implementation_key(2918)) void _IFaceStyleAuto::PutEmissionRed ( float pfEmissionRed );
__declspec(implementation_key(2919)) float _IFaceStyleAuto::GetEmissionGreen ( );
__declspec(implementation_key(2920)) void _IFaceStyleAuto::PutEmissionGreen ( float pfEmissionGreen );
__declspec(implementation_key(2921)) float _IFaceStyleAuto::GetEmissionBlue ( );
__declspec(implementation_key(2922)) void _IFaceStyleAuto::PutEmissionBlue ( float pfEmissionBlue );
__declspec(implementation_key(2923)) float _IFaceStyleAuto::GetShininess ( );
__declspec(implementation_key(2924)) void _IFaceStyleAuto::PutShininess ( float pfShininess );
__declspec(implementation_key(2925)) float _IFaceStyleAuto::GetOpacity ( );
__declspec(implementation_key(2926)) void _IFaceStyleAuto::PutOpacity ( float pfOpacity );
__declspec(implementation_key(2927)) float _IFaceStyleAuto::GetReflectivity ( );
__declspec(implementation_key(2928)) void _IFaceStyleAuto::PutReflectivity ( float pfReflectivity );
__declspec(implementation_key(2929)) float _IFaceStyleAuto::GetRefraction ( );
__declspec(implementation_key(2930)) void _IFaceStyleAuto::PutRefraction ( float pfRefraction );
__declspec(implementation_key(2931)) long _IFaceStyleAuto::GetCastsShadows ( );
__declspec(implementation_key(2932)) void _IFaceStyleAuto::PutCastsShadows ( long pbCastsShadows );
__declspec(implementation_key(2933)) long _IFaceStyleAuto::GetAcceptsShadows ( );
__declspec(implementation_key(2934)) void _IFaceStyleAuto::PutAcceptsShadows ( long pbAcceptsShadows );
__declspec(implementation_key(2935)) _bstr_t _IFaceStyleAuto::GetTextureFileName ( );
__declspec(implementation_key(2936)) void _IFaceStyleAuto::PutTextureFileName ( _bstr_t psTextureFileName );
__declspec(implementation_key(2937)) long _IFaceStyleAuto::GetTextureTransparent ( );
__declspec(implementation_key(2938)) void _IFaceStyleAuto::PutTextureTransparent ( long pbTextureTransparent );
__declspec(implementation_key(2939)) float _IFaceStyleAuto::GetTextureTransparentColorRed ( );
__declspec(implementation_key(2940)) void _IFaceStyleAuto::PutTextureTransparentColorRed ( float pfRed );
__declspec(implementation_key(2941)) float _IFaceStyleAuto::GetTextureTransparentColorGreen ( );
__declspec(implementation_key(2942)) void _IFaceStyleAuto::PutTextureTransparentColorGreen ( float pfGreen );
__declspec(implementation_key(2943)) float _IFaceStyleAuto::GetTextureTransparentColorBlue ( );
__declspec(implementation_key(2944)) void _IFaceStyleAuto::PutTextureTransparentColorBlue ( float pfBlue );
__declspec(implementation_key(2945)) int _IFaceStyleAuto::GetTextureUnits ( );
__declspec(implementation_key(2946)) void _IFaceStyleAuto::PutTextureUnits ( int pnUnits );
__declspec(implementation_key(2947)) float _IFaceStyleAuto::GetTextureScaleX ( );
__declspec(implementation_key(2948)) void _IFaceStyleAuto::PutTextureScaleX ( float pfScaleX );
__declspec(implementation_key(2949)) float _IFaceStyleAuto::GetTextureScaleY ( );
__declspec(implementation_key(2950)) void _IFaceStyleAuto::PutTextureScaleY ( float pfScaleY );
__declspec(implementation_key(2951)) float _IFaceStyleAuto::GetTextureOffsetX ( );
__declspec(implementation_key(2952)) void _IFaceStyleAuto::PutTextureOffsetX ( float pfOffsetX );
__declspec(implementation_key(2953)) float _IFaceStyleAuto::GetTextureOffsetY ( );
__declspec(implementation_key(2954)) void _IFaceStyleAuto::PutTextureOffsetY ( float pfOffsetY );
__declspec(implementation_key(2955)) long _IFaceStyleAuto::GetTextureMirrorX ( );
__declspec(implementation_key(2956)) void _IFaceStyleAuto::PutTextureMirrorX ( long pbMirrorX );
__declspec(implementation_key(2957)) long _IFaceStyleAuto::GetTextureMirrorY ( );
__declspec(implementation_key(2958)) void _IFaceStyleAuto::PutTextureMirrorY ( long pbMirrorY );
__declspec(implementation_key(2959)) float _IFaceStyleAuto::GetTextureRotation ( );
__declspec(implementation_key(2960)) void _IFaceStyleAuto::PutTextureRotation ( float pfRotation );
__declspec(implementation_key(2961)) float _IFaceStyleAuto::GetTextureWeight ( );
__declspec(implementation_key(2962)) void _IFaceStyleAuto::PutTextureWeight ( float pfWeight );
__declspec(implementation_key(2963)) _bstr_t _IFaceStyleAuto::GetBumpmapFileName ( );
__declspec(implementation_key(2964)) void _IFaceStyleAuto::PutBumpmapFileName ( _bstr_t psBumpmapFileName );
__declspec(implementation_key(2965)) int _IFaceStyleAuto::GetBumpmapUnits ( );
__declspec(implementation_key(2966)) void _IFaceStyleAuto::PutBumpmapUnits ( int pnUnits );
__declspec(implementation_key(2967)) float _IFaceStyleAuto::GetBumpmapScaleX ( );
__declspec(implementation_key(2968)) void _IFaceStyleAuto::PutBumpmapScaleX ( float pfScaleX );
__declspec(implementation_key(2969)) float _IFaceStyleAuto::GetBumpmapScaleY ( );
__declspec(implementation_key(2970)) void _IFaceStyleAuto::PutBumpmapScaleY ( float pfScaleY );
__declspec(implementation_key(2971)) float _IFaceStyleAuto::GetBumpmapOffsetX ( );
__declspec(implementation_key(2972)) void _IFaceStyleAuto::PutBumpmapOffsetX ( float pfOffsetX );
__declspec(implementation_key(2973)) float _IFaceStyleAuto::GetBumpmapOffsetY ( );
__declspec(implementation_key(2974)) void _IFaceStyleAuto::PutBumpmapOffsetY ( float pfOffsetY );
__declspec(implementation_key(2975)) long _IFaceStyleAuto::GetBumpmapMirrorX ( );
__declspec(implementation_key(2976)) void _IFaceStyleAuto::PutBumpmapMirrorX ( long pbMirrorX );
__declspec(implementation_key(2977)) long _IFaceStyleAuto::GetBumpmapMirrorY ( );
__declspec(implementation_key(2978)) void _IFaceStyleAuto::PutBumpmapMirrorY ( long pbMirrorY );
__declspec(implementation_key(2979)) float _IFaceStyleAuto::GetBumpmapRotation ( );
__declspec(implementation_key(2980)) void _IFaceStyleAuto::PutBumpmapRotation ( float pfRotation );
__declspec(implementation_key(2981)) float _IFaceStyleAuto::GetBumpmapHeight ( );
__declspec(implementation_key(2982)) void _IFaceStyleAuto::PutBumpmapHeight ( float pfHeight );
__declspec(implementation_key(2983)) long _IFaceStyleAuto::GetBumpmapInvert ( );
__declspec(implementation_key(2984)) void _IFaceStyleAuto::PutBumpmapInvert ( long pbInvert );
__declspec(implementation_key(2985)) enum SeSkyboxType _IFaceStyleAuto::GetSkyboxType ( );
__declspec(implementation_key(2986)) void _IFaceStyleAuto::PutSkyboxType ( enum SeSkyboxType peType );
__declspec(implementation_key(2987)) float _IFaceStyleAuto::GetSkyboxAzimuth ( );
__declspec(implementation_key(2988)) void _IFaceStyleAuto::PutSkyboxAzimuth ( float pfAzimuth );
__declspec(implementation_key(2989)) float _IFaceStyleAuto::GetSkyboxAltitude ( );
__declspec(implementation_key(2990)) void _IFaceStyleAuto::PutSkyboxAltitude ( float pfAltitude );
__declspec(implementation_key(2991)) float _IFaceStyleAuto::GetSkyboxRoll ( );
__declspec(implementation_key(2992)) void _IFaceStyleAuto::PutSkyboxRoll ( float pfRoll );
__declspec(implementation_key(2993)) float _IFaceStyleAuto::GetSkyboxConeAngle ( );
__declspec(implementation_key(2994)) void _IFaceStyleAuto::PutSkyboxConeAngle ( float pfConeAngle );
__declspec(implementation_key(2995)) long _IFaceStyleAuto::GetStyleID ( );
__declspec(implementation_key(2996)) HRESULT _IFaceStyleAuto::BeginPropertyBuffer ( );
__declspec(implementation_key(2997)) HRESULT _IFaceStyleAuto::FlushPropertyBuffer ( );
__declspec(implementation_key(2998)) HRESULT _IFaceStyleAuto::HasWireframeProperties ( int * pbResult );
__declspec(implementation_key(2999)) HRESULT _IFaceStyleAuto::HasSurfaceProperties ( int * pbResult );
__declspec(implementation_key(3000)) HRESULT _IFaceStyleAuto::ClearWireframeProperties ( );
__declspec(implementation_key(3001)) HRESULT _IFaceStyleAuto::ClearSurfaceProperties ( );
__declspec(implementation_key(3002)) HRESULT _IFaceStyleAuto::GetWireframeColor ( float * pfRed, float * pfGreen, float * pfBlue );
__declspec(implementation_key(3003)) HRESULT _IFaceStyleAuto::SetWireframeColor ( float fRed, float fGreen, float fBlue );
__declspec(implementation_key(3004)) HRESULT _IFaceStyleAuto::GetDiffuse ( float * pfRed, float * pfGreen, float * pfBlue );
__declspec(implementation_key(3005)) HRESULT _IFaceStyleAuto::SetDiffuse ( float fRed, float fGreen, float fBlue );
__declspec(implementation_key(3006)) HRESULT _IFaceStyleAuto::GetSpecular ( float * pfRed, float * pfGreen, float * pfBlue );
__declspec(implementation_key(3007)) HRESULT _IFaceStyleAuto::SetSpecular ( float fRed, float fGreen, float fBlue );
__declspec(implementation_key(3008)) HRESULT _IFaceStyleAuto::GetAmbient ( float * pfRed, float * pfGreen, float * pfBlue );
__declspec(implementation_key(3009)) HRESULT _IFaceStyleAuto::SetAmbient ( float fRed, float fGreen, float fBlue );
__declspec(implementation_key(3010)) HRESULT _IFaceStyleAuto::GetEmission ( float * pfRed, float * pfGreen, float * pfBlue );
__declspec(implementation_key(3011)) HRESULT _IFaceStyleAuto::SetEmission ( float fRed, float fGreen, float fBlue );
__declspec(implementation_key(3012)) HRESULT _IFaceStyleAuto::Delete ( );
__declspec(implementation_key(3013)) HRESULT _IFaceStyleAuto::Detach ( );
__declspec(implementation_key(3014)) HRESULT _IFaceStyleAuto::GetTextureTransparentColor ( float * pfRed, float * pfGreen, float * pfBlue );
__declspec(implementation_key(3015)) HRESULT _IFaceStyleAuto::SetTextureTransparentColor ( float fRed, float fGreen, float fBlue );
__declspec(implementation_key(3016)) HRESULT _IFaceStyleAuto::GetTextureScale ( float * pfXScale, float * pfYScale );
__declspec(implementation_key(3017)) HRESULT _IFaceStyleAuto::SetTextureScale ( float fXScale, float fYScale );
__declspec(implementation_key(3018)) HRESULT _IFaceStyleAuto::GetTextureOffset ( float * pfXOffset, float * pfYOffset );
__declspec(implementation_key(3019)) HRESULT _IFaceStyleAuto::SetTextureOffset ( float fXOffset, float fYOffset );
__declspec(implementation_key(3020)) HRESULT _IFaceStyleAuto::GetBumpmapScale ( float * pfXScale, float * pfYScale );
__declspec(implementation_key(3021)) HRESULT _IFaceStyleAuto::SetBumpmapScale ( float fXScale, float fYScale );
__declspec(implementation_key(3022)) HRESULT _IFaceStyleAuto::GetBumpmapOffset ( float * pfXOffset, float * pfYOffset );
__declspec(implementation_key(3023)) HRESULT _IFaceStyleAuto::SetBumpmapOffset ( float fXOffset, float fYOffset );
__declspec(implementation_key(3024)) HRESULT _IFaceStyleAuto::SetSkyboxSkyFile ( _bstr_t sFilename );
__declspec(implementation_key(3025)) HRESULT _IFaceStyleAuto::SetSkyboxSideFilename ( int nSide, _bstr_t sFilename );
__declspec(implementation_key(3026)) _bstr_t _IFaceStyleAuto::GetSkyboxSideFilename ( int nSide );
__declspec(implementation_key(3027)) HRESULT _IFaceStyleAuto::SkyboxClear ( int nSide );
__declspec(implementation_key(3028)) HRESULT _IFaceStyleAuto::SkyboxClearAll ( );
__declspec(implementation_key(3029)) HRESULT _IFaceStyleAuto::GetSkyboxOrientation ( float * pfxDirection, float * pfyDirection, float * pfzDirection, float * pfxUp, float * pfyUp, float * pfzUp, float * pfFieldOfView );
__declspec(implementation_key(3030)) HRESULT _IFaceStyleAuto::SetSkyboxOrientation ( float fxDirection, float fyDirection, float fzDirection, float fxUp, float fyUp, float fzUp, float fFieldOfView );
__declspec(implementation_key(3031)) long _IFaceStyleAuto::GetVersion ( int eVersion );
__declspec(implementation_key(3032)) HRESULT _IFaceStyleAuto::SetVersion ( int eVersion, long nVersion );
__declspec(implementation_key(3033)) HRESULT _IFaceStyleAuto::GetShaderData ( int * pnId, long * peType, long * pnHints );
__declspec(implementation_key(3034)) HRESULT _IFaceStyleAuto::SetShaderData ( long eType, long nHints );
__declspec(implementation_key(3035)) long _IFaceStyleAuto::GetAutomaticShaderType ( );
__declspec(implementation_key(3036)) long _IFaceStyleAuto::GetShaderType ( );
__declspec(implementation_key(3037)) void _IFaceStyleAuto::PutShaderType ( long peType );
__declspec(implementation_key(3038)) IDispatchPtr _IFaceStyleAuto::GetAttributeSets ( );
__declspec(implementation_key(3039)) VARIANT_BOOL _IFaceStyleAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(3040)) HRESULT _IFaceStyleAuto::ResetSkyboxOrientation ( );
__declspec(implementation_key(3041)) HRESULT _IFaceStyleAuto::DeleteSkybox ( );
__declspec(implementation_key(3042)) enum SeRenderModeType _IFaceStyleAuto::GetRenderModeType ( );
__declspec(implementation_key(3043)) void _IFaceStyleAuto::PutRenderModeType ( enum SeRenderModeType peType );
__declspec(implementation_key(3044)) HRESULT _IFaceStyleAuto::HasPointProperties ( int * pbResult );
__declspec(implementation_key(3045)) HRESULT _IFaceStyleAuto::ClearPointProperties ( );
__declspec(implementation_key(3046)) float _IFaceStyleAuto::GetPointSize ( );
__declspec(implementation_key(3047)) void _IFaceStyleAuto::PutPointSize ( float pfSize );
__declspec(implementation_key(3048)) enum SeRenderSpaceType _IFaceStyleAuto::GetPointSizeSpace ( );
__declspec(implementation_key(3049)) void _IFaceStyleAuto::PutPointSizeSpace ( enum SeRenderSpaceType peSpace );
__declspec(implementation_key(3050)) HRESULT _IFaceStyleAuto::GetPointOptions ( enum SeRenderShapeType * peShape, enum SeRenderFillMode * peFillMode, enum SeRenderShadeMode * peShadeMode );
__declspec(implementation_key(3051)) HRESULT _IFaceStyleAuto::SetPointOptions ( enum SeRenderShapeType eShape, enum SeRenderFillMode eFillMode, enum SeRenderShadeMode eShadeMode );
__declspec(implementation_key(3052)) HRESULT _IFaceStyleAuto::GetPointColor ( float * pfRed, float * pfGreen, float * pfBlue );
__declspec(implementation_key(3053)) HRESULT _IFaceStyleAuto::SetPointColor ( float fRed, float fGreen, float fBlue );
__declspec(implementation_key(3054)) _bstr_t _IFaceStyleAuto::GetTextureFileNameEx ( );
__declspec(implementation_key(3055)) HRESULT _IFaceStyleAuto::GetMaterial ( BSTR * psMaterial, enum SeRenderMaterialGetMode eMode );
__declspec(implementation_key(3056)) HRESULT _IFaceStyleAuto::SetMaterial ( _bstr_t sMaterial, enum SeRenderMaterialSetMode eMode );
__declspec(implementation_key(3057)) _bstr_t _IFaceStyleAuto::GetMaterial ( );
__declspec(implementation_key(3058)) void _IFaceStyleAuto::PutMaterial ( _bstr_t psMaterial );
__declspec(implementation_key(3059)) _bstr_t FaceStyle::GetStyleName ( );
__declspec(implementation_key(3060)) void FaceStyle::PutStyleName ( _bstr_t _arg1 );
__declspec(implementation_key(3061)) _bstr_t FaceStyle::GetParent ( );
__declspec(implementation_key(3062)) void FaceStyle::PutParent ( _bstr_t _arg1 );
__declspec(implementation_key(3063)) long FaceStyle::GetType ( );
__declspec(implementation_key(3064)) void FaceStyle::PutType ( long _arg1 );
__declspec(implementation_key(3065)) long FaceStyle::GetFlags ( );
__declspec(implementation_key(3066)) void FaceStyle::PutFlags ( long _arg1 );
__declspec(implementation_key(3067)) float FaceStyle::GetWireframeColorRed ( );
__declspec(implementation_key(3068)) void FaceStyle::PutWireframeColorRed ( float _arg1 );
__declspec(implementation_key(3069)) float FaceStyle::GetWireframeColorGreen ( );
__declspec(implementation_key(3070)) void FaceStyle::PutWireframeColorGreen ( float _arg1 );
__declspec(implementation_key(3071)) float FaceStyle::GetWireframeColorBlue ( );
__declspec(implementation_key(3072)) void FaceStyle::PutWireframeColorBlue ( float _arg1 );
__declspec(implementation_key(3073)) long FaceStyle::GetStipplePattern ( );
__declspec(implementation_key(3074)) void FaceStyle::PutStipplePattern ( long _arg1 );
__declspec(implementation_key(3075)) short FaceStyle::GetStippleScale ( );
__declspec(implementation_key(3076)) void FaceStyle::PutStippleScale ( short _arg1 );
__declspec(implementation_key(3077)) float FaceStyle::GetLineWidth ( );
__declspec(implementation_key(3078)) void FaceStyle::PutLineWidth ( float _arg1 );
__declspec(implementation_key(3079)) short FaceStyle::GetWidthSpace ( );
__declspec(implementation_key(3080)) void FaceStyle::PutWidthSpace ( short _arg1 );
__declspec(implementation_key(3081)) float FaceStyle::GetDiffuseRed ( );
__declspec(implementation_key(3082)) void FaceStyle::PutDiffuseRed ( float _arg1 );
__declspec(implementation_key(3083)) float FaceStyle::GetDiffuseGreen ( );
__declspec(implementation_key(3084)) void FaceStyle::PutDiffuseGreen ( float _arg1 );
__declspec(implementation_key(3085)) float FaceStyle::GetDiffuseBlue ( );
__declspec(implementation_key(3086)) void FaceStyle::PutDiffuseBlue ( float _arg1 );
__declspec(implementation_key(3087)) float FaceStyle::GetSpecularRed ( );
__declspec(implementation_key(3088)) void FaceStyle::PutSpecularRed ( float _arg1 );
__declspec(implementation_key(3089)) float FaceStyle::GetSpecularGreen ( );
__declspec(implementation_key(3090)) void FaceStyle::PutSpecularGreen ( float _arg1 );
__declspec(implementation_key(3091)) float FaceStyle::GetSpecularBlue ( );
__declspec(implementation_key(3092)) void FaceStyle::PutSpecularBlue ( float _arg1 );
__declspec(implementation_key(3093)) float FaceStyle::GetAmbientRed ( );
__declspec(implementation_key(3094)) void FaceStyle::PutAmbientRed ( float _arg1 );
__declspec(implementation_key(3095)) float FaceStyle::GetAmbientGreen ( );
__declspec(implementation_key(3096)) void FaceStyle::PutAmbientGreen ( float _arg1 );
__declspec(implementation_key(3097)) float FaceStyle::GetAmbientBlue ( );
__declspec(implementation_key(3098)) void FaceStyle::PutAmbientBlue ( float _arg1 );
__declspec(implementation_key(3099)) float FaceStyle::GetEmissionRed ( );
__declspec(implementation_key(3100)) void FaceStyle::PutEmissionRed ( float _arg1 );
__declspec(implementation_key(3101)) float FaceStyle::GetEmissionGreen ( );
__declspec(implementation_key(3102)) void FaceStyle::PutEmissionGreen ( float _arg1 );
__declspec(implementation_key(3103)) float FaceStyle::GetEmissionBlue ( );
__declspec(implementation_key(3104)) void FaceStyle::PutEmissionBlue ( float _arg1 );
__declspec(implementation_key(3105)) float FaceStyle::GetShininess ( );
__declspec(implementation_key(3106)) void FaceStyle::PutShininess ( float _arg1 );
__declspec(implementation_key(3107)) float FaceStyle::GetOpacity ( );
__declspec(implementation_key(3108)) void FaceStyle::PutOpacity ( float _arg1 );
__declspec(implementation_key(3109)) float FaceStyle::GetReflectivity ( );
__declspec(implementation_key(3110)) void FaceStyle::PutReflectivity ( float _arg1 );
__declspec(implementation_key(3111)) float FaceStyle::GetRefraction ( );
__declspec(implementation_key(3112)) void FaceStyle::PutRefraction ( float _arg1 );
__declspec(implementation_key(3113)) long FaceStyle::GetCastsShadows ( );
__declspec(implementation_key(3114)) void FaceStyle::PutCastsShadows ( long _arg1 );
__declspec(implementation_key(3115)) long FaceStyle::GetAcceptsShadows ( );
__declspec(implementation_key(3116)) void FaceStyle::PutAcceptsShadows ( long _arg1 );
__declspec(implementation_key(3117)) _bstr_t FaceStyle::GetTextureFileName ( );
__declspec(implementation_key(3118)) void FaceStyle::PutTextureFileName ( _bstr_t _arg1 );
__declspec(implementation_key(3119)) long FaceStyle::GetTextureTransparent ( );
__declspec(implementation_key(3120)) void FaceStyle::PutTextureTransparent ( long _arg1 );
__declspec(implementation_key(3121)) float FaceStyle::GetTextureTransparentColorRed ( );
__declspec(implementation_key(3122)) void FaceStyle::PutTextureTransparentColorRed ( float _arg1 );
__declspec(implementation_key(3123)) float FaceStyle::GetTextureTransparentColorGreen ( );
__declspec(implementation_key(3124)) void FaceStyle::PutTextureTransparentColorGreen ( float _arg1 );
__declspec(implementation_key(3125)) float FaceStyle::GetTextureTransparentColorBlue ( );
__declspec(implementation_key(3126)) void FaceStyle::PutTextureTransparentColorBlue ( float _arg1 );
__declspec(implementation_key(3127)) int FaceStyle::GetTextureUnits ( );
__declspec(implementation_key(3128)) void FaceStyle::PutTextureUnits ( int _arg1 );
__declspec(implementation_key(3129)) float FaceStyle::GetTextureScaleX ( );
__declspec(implementation_key(3130)) void FaceStyle::PutTextureScaleX ( float _arg1 );
__declspec(implementation_key(3131)) float FaceStyle::GetTextureScaleY ( );
__declspec(implementation_key(3132)) void FaceStyle::PutTextureScaleY ( float _arg1 );
__declspec(implementation_key(3133)) float FaceStyle::GetTextureOffsetX ( );
__declspec(implementation_key(3134)) void FaceStyle::PutTextureOffsetX ( float _arg1 );
__declspec(implementation_key(3135)) float FaceStyle::GetTextureOffsetY ( );
__declspec(implementation_key(3136)) void FaceStyle::PutTextureOffsetY ( float _arg1 );
__declspec(implementation_key(3137)) long FaceStyle::GetTextureMirrorX ( );
__declspec(implementation_key(3138)) void FaceStyle::PutTextureMirrorX ( long _arg1 );
__declspec(implementation_key(3139)) long FaceStyle::GetTextureMirrorY ( );
__declspec(implementation_key(3140)) void FaceStyle::PutTextureMirrorY ( long _arg1 );
__declspec(implementation_key(3141)) float FaceStyle::GetTextureRotation ( );
__declspec(implementation_key(3142)) void FaceStyle::PutTextureRotation ( float _arg1 );
__declspec(implementation_key(3143)) float FaceStyle::GetTextureWeight ( );
__declspec(implementation_key(3144)) void FaceStyle::PutTextureWeight ( float _arg1 );
__declspec(implementation_key(3145)) _bstr_t FaceStyle::GetBumpmapFileName ( );
__declspec(implementation_key(3146)) void FaceStyle::PutBumpmapFileName ( _bstr_t _arg1 );
__declspec(implementation_key(3147)) int FaceStyle::GetBumpmapUnits ( );
__declspec(implementation_key(3148)) void FaceStyle::PutBumpmapUnits ( int _arg1 );
__declspec(implementation_key(3149)) float FaceStyle::GetBumpmapScaleX ( );
__declspec(implementation_key(3150)) void FaceStyle::PutBumpmapScaleX ( float _arg1 );
__declspec(implementation_key(3151)) float FaceStyle::GetBumpmapScaleY ( );
__declspec(implementation_key(3152)) void FaceStyle::PutBumpmapScaleY ( float _arg1 );
__declspec(implementation_key(3153)) float FaceStyle::GetBumpmapOffsetX ( );
__declspec(implementation_key(3154)) void FaceStyle::PutBumpmapOffsetX ( float _arg1 );
__declspec(implementation_key(3155)) float FaceStyle::GetBumpmapOffsetY ( );
__declspec(implementation_key(3156)) void FaceStyle::PutBumpmapOffsetY ( float _arg1 );
__declspec(implementation_key(3157)) long FaceStyle::GetBumpmapMirrorX ( );
__declspec(implementation_key(3158)) void FaceStyle::PutBumpmapMirrorX ( long _arg1 );
__declspec(implementation_key(3159)) long FaceStyle::GetBumpmapMirrorY ( );
__declspec(implementation_key(3160)) void FaceStyle::PutBumpmapMirrorY ( long _arg1 );
__declspec(implementation_key(3161)) float FaceStyle::GetBumpmapRotation ( );
__declspec(implementation_key(3162)) void FaceStyle::PutBumpmapRotation ( float _arg1 );
__declspec(implementation_key(3163)) float FaceStyle::GetBumpmapHeight ( );
__declspec(implementation_key(3164)) void FaceStyle::PutBumpmapHeight ( float _arg1 );
__declspec(implementation_key(3165)) long FaceStyle::GetBumpmapInvert ( );
__declspec(implementation_key(3166)) void FaceStyle::PutBumpmapInvert ( long _arg1 );
__declspec(implementation_key(3167)) enum SeSkyboxType FaceStyle::GetSkyboxType ( );
__declspec(implementation_key(3168)) void FaceStyle::PutSkyboxType ( enum SeSkyboxType _arg1 );
__declspec(implementation_key(3169)) float FaceStyle::GetSkyboxAzimuth ( );
__declspec(implementation_key(3170)) void FaceStyle::PutSkyboxAzimuth ( float _arg1 );
__declspec(implementation_key(3171)) float FaceStyle::GetSkyboxAltitude ( );
__declspec(implementation_key(3172)) void FaceStyle::PutSkyboxAltitude ( float _arg1 );
__declspec(implementation_key(3173)) float FaceStyle::GetSkyboxRoll ( );
__declspec(implementation_key(3174)) void FaceStyle::PutSkyboxRoll ( float _arg1 );
__declspec(implementation_key(3175)) float FaceStyle::GetSkyboxConeAngle ( );
__declspec(implementation_key(3176)) void FaceStyle::PutSkyboxConeAngle ( float _arg1 );
__declspec(implementation_key(3177)) long FaceStyle::GetStyleID ( );
__declspec(implementation_key(3178)) HRESULT FaceStyle::BeginPropertyBuffer ( );
__declspec(implementation_key(3179)) HRESULT FaceStyle::FlushPropertyBuffer ( );
__declspec(implementation_key(3180)) HRESULT FaceStyle::HasWireframeProperties ( int * pbResult );
__declspec(implementation_key(3181)) HRESULT FaceStyle::HasSurfaceProperties ( int * pbResult );
__declspec(implementation_key(3182)) HRESULT FaceStyle::ClearWireframeProperties ( );
__declspec(implementation_key(3183)) HRESULT FaceStyle::ClearSurfaceProperties ( );
__declspec(implementation_key(3184)) HRESULT FaceStyle::GetWireframeColor ( float * pfRed, float * pfGreen, float * pfBlue );
__declspec(implementation_key(3185)) HRESULT FaceStyle::SetWireframeColor ( float fRed, float fGreen, float fBlue );
__declspec(implementation_key(3186)) HRESULT FaceStyle::GetDiffuse ( float * pfRed, float * pfGreen, float * pfBlue );
__declspec(implementation_key(3187)) HRESULT FaceStyle::SetDiffuse ( float fRed, float fGreen, float fBlue );
__declspec(implementation_key(3188)) HRESULT FaceStyle::GetSpecular ( float * pfRed, float * pfGreen, float * pfBlue );
__declspec(implementation_key(3189)) HRESULT FaceStyle::SetSpecular ( float fRed, float fGreen, float fBlue );
__declspec(implementation_key(3190)) HRESULT FaceStyle::GetAmbient ( float * pfRed, float * pfGreen, float * pfBlue );
__declspec(implementation_key(3191)) HRESULT FaceStyle::SetAmbient ( float fRed, float fGreen, float fBlue );
__declspec(implementation_key(3192)) HRESULT FaceStyle::GetEmission ( float * pfRed, float * pfGreen, float * pfBlue );
__declspec(implementation_key(3193)) HRESULT FaceStyle::SetEmission ( float fRed, float fGreen, float fBlue );
__declspec(implementation_key(3194)) HRESULT FaceStyle::Delete ( );
__declspec(implementation_key(3195)) HRESULT FaceStyle::Detach ( );
__declspec(implementation_key(3196)) HRESULT FaceStyle::GetTextureTransparentColor ( float * pfRed, float * pfGreen, float * pfBlue );
__declspec(implementation_key(3197)) HRESULT FaceStyle::SetTextureTransparentColor ( float fRed, float fGreen, float fBlue );
__declspec(implementation_key(3198)) HRESULT FaceStyle::GetTextureScale ( float * pfXScale, float * pfYScale );
__declspec(implementation_key(3199)) HRESULT FaceStyle::SetTextureScale ( float fXScale, float fYScale );
__declspec(implementation_key(3200)) HRESULT FaceStyle::GetTextureOffset ( float * pfXOffset, float * pfYOffset );
__declspec(implementation_key(3201)) HRESULT FaceStyle::SetTextureOffset ( float fXOffset, float fYOffset );
__declspec(implementation_key(3202)) HRESULT FaceStyle::GetBumpmapScale ( float * pfXScale, float * pfYScale );
__declspec(implementation_key(3203)) HRESULT FaceStyle::SetBumpmapScale ( float fXScale, float fYScale );
__declspec(implementation_key(3204)) HRESULT FaceStyle::GetBumpmapOffset ( float * pfXOffset, float * pfYOffset );
__declspec(implementation_key(3205)) HRESULT FaceStyle::SetBumpmapOffset ( float fXOffset, float fYOffset );
__declspec(implementation_key(3206)) HRESULT FaceStyle::SetSkyboxSkyFile ( _bstr_t sFilename );
__declspec(implementation_key(3207)) HRESULT FaceStyle::SetSkyboxSideFilename ( int nSide, _bstr_t sFilename );
__declspec(implementation_key(3208)) _bstr_t FaceStyle::GetSkyboxSideFilename ( int nSide );
__declspec(implementation_key(3209)) HRESULT FaceStyle::SkyboxClear ( int nSide );
__declspec(implementation_key(3210)) HRESULT FaceStyle::SkyboxClearAll ( );
__declspec(implementation_key(3211)) HRESULT FaceStyle::GetSkyboxOrientation ( float * pfxDirection, float * pfyDirection, float * pfzDirection, float * pfxUp, float * pfyUp, float * pfzUp, float * pfFieldOfView );
__declspec(implementation_key(3212)) HRESULT FaceStyle::SetSkyboxOrientation ( float fxDirection, float fyDirection, float fzDirection, float fxUp, float fyUp, float fzUp, float fFieldOfView );
__declspec(implementation_key(3213)) long FaceStyle::GetVersion ( int eVersion );
__declspec(implementation_key(3214)) HRESULT FaceStyle::SetVersion ( int eVersion, long nVersion );
__declspec(implementation_key(3215)) HRESULT FaceStyle::GetShaderData ( int * pnId, long * peType, long * pnHints );
__declspec(implementation_key(3216)) HRESULT FaceStyle::SetShaderData ( long eType, long nHints );
__declspec(implementation_key(3217)) long FaceStyle::GetAutomaticShaderType ( );
__declspec(implementation_key(3218)) long FaceStyle::GetShaderType ( );
__declspec(implementation_key(3219)) void FaceStyle::PutShaderType ( long _arg1 );
__declspec(implementation_key(3220)) IDispatchPtr FaceStyle::GetAttributeSets ( );
__declspec(implementation_key(3221)) VARIANT_BOOL FaceStyle::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(3222)) HRESULT FaceStyle::ResetSkyboxOrientation ( );
__declspec(implementation_key(3223)) HRESULT FaceStyle::DeleteSkybox ( );
__declspec(implementation_key(3224)) enum SeRenderModeType FaceStyle::GetRenderModeType ( );
__declspec(implementation_key(3225)) void FaceStyle::PutRenderModeType ( enum SeRenderModeType _arg1 );
__declspec(implementation_key(3226)) HRESULT FaceStyle::HasPointProperties ( int * pbResult );
__declspec(implementation_key(3227)) HRESULT FaceStyle::ClearPointProperties ( );
__declspec(implementation_key(3228)) float FaceStyle::GetPointSize ( );
__declspec(implementation_key(3229)) void FaceStyle::PutPointSize ( float _arg1 );
__declspec(implementation_key(3230)) enum SeRenderSpaceType FaceStyle::GetPointSizeSpace ( );
__declspec(implementation_key(3231)) void FaceStyle::PutPointSizeSpace ( enum SeRenderSpaceType _arg1 );
__declspec(implementation_key(3232)) HRESULT FaceStyle::GetPointOptions ( enum SeRenderShapeType * peShape, enum SeRenderFillMode * peFillMode, enum SeRenderShadeMode * peShadeMode );
__declspec(implementation_key(3233)) HRESULT FaceStyle::SetPointOptions ( enum SeRenderShapeType eShape, enum SeRenderFillMode eFillMode, enum SeRenderShadeMode eShadeMode );
__declspec(implementation_key(3234)) HRESULT FaceStyle::GetPointColor ( float * pfRed, float * pfGreen, float * pfBlue );
__declspec(implementation_key(3235)) HRESULT FaceStyle::SetPointColor ( float fRed, float fGreen, float fBlue );
__declspec(implementation_key(3236)) _bstr_t FaceStyle::GetTextureFileNameEx ( );
__declspec(implementation_key(3237)) HRESULT FaceStyle::GetMaterial ( BSTR * psMaterial, enum SeRenderMaterialGetMode eMode );
__declspec(implementation_key(3238)) HRESULT FaceStyle::SetMaterial ( _bstr_t sMaterial, enum SeRenderMaterialSetMode eMode );
__declspec(implementation_key(3239)) _bstr_t FaceStyle::GetMaterial ( );
__declspec(implementation_key(3240)) void FaceStyle::PutMaterial ( _bstr_t _arg1 );
__declspec(implementation_key(3241)) IDispatchPtr _IFaceStylesAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(3242)) IUnknownPtr _IFaceStylesAuto::Get_NewEnum ( );
__declspec(implementation_key(3243)) IDispatchPtr _IFaceStylesAuto::GetApplication ( );
__declspec(implementation_key(3244)) long _IFaceStylesAuto::GetCount ( );
__declspec(implementation_key(3245)) IDispatchPtr _IFaceStylesAuto::GetParent ( );
__declspec(implementation_key(3246)) FaceStylePtr _IFaceStylesAuto::Add ( _bstr_t Name, _bstr_t Parent );
__declspec(implementation_key(3247)) HRESULT _IFaceStylesAuto::Remove ( _bstr_t Name );
__declspec(implementation_key(3248)) IDispatchPtr _IFaceStylesAuto::GetStyleByID ( long StyleID );
__declspec(implementation_key(3249)) void _ITextStyleAuto::PutName ( _bstr_t Name );
__declspec(implementation_key(3250)) _bstr_t _ITextStyleAuto::GetName ( );
__declspec(implementation_key(3251)) _bstr_t _ITextStyleAuto::GetDescription ( long paperUnits, long Precision );
__declspec(implementation_key(3252)) long _ITextStyleAuto::GetUnits ( );
__declspec(implementation_key(3253)) void _ITextStyleAuto::PutUnits ( long Units );
__declspec(implementation_key(3254)) void _ITextStyleAuto::PutParent ( _bstr_t Name );
__declspec(implementation_key(3255)) _bstr_t _ITextStyleAuto::GetParent ( );
__declspec(implementation_key(3256)) long _ITextStyleAuto::GetAlignment ( );
__declspec(implementation_key(3257)) void _ITextStyleAuto::PutAlignment ( long Alignment );
__declspec(implementation_key(3258)) double _ITextStyleAuto::GetBeforeSpacing ( );
__declspec(implementation_key(3259)) void _ITextStyleAuto::PutBeforeSpacing ( double Spacing );
__declspec(implementation_key(3260)) double _ITextStyleAuto::GetAfterSpacing ( );
__declspec(implementation_key(3261)) void _ITextStyleAuto::PutAfterSpacing ( double Spacing );
__declspec(implementation_key(3262)) double _ITextStyleAuto::GetLineSpacing ( );
__declspec(implementation_key(3263)) void _ITextStyleAuto::PutLineSpacing ( double lSpacing );
__declspec(implementation_key(3264)) double _ITextStyleAuto::GetTabs ( );
__declspec(implementation_key(3265)) void _ITextStyleAuto::PutTabs ( double tabDistance );
__declspec(implementation_key(3266)) void _ITextStyleAuto::PutCharStyleName ( _bstr_t Name );
__declspec(implementation_key(3267)) _bstr_t _ITextStyleAuto::GetCharStyleName ( );
__declspec(implementation_key(3268)) HRESULT _ITextStyleAuto::SetLineLeading ( double leading, long leadingType );
__declspec(implementation_key(3269)) HRESULT _ITextStyleAuto::GetLineLeading ( double * leading, long * leadingType );
__declspec(implementation_key(3270)) enum TextStyleNumberJustificationConstants _ITextStyleAuto::GetNumberJustification ( );
__declspec(implementation_key(3271)) void _ITextStyleAuto::PutNumberJustification ( enum TextStyleNumberJustificationConstants NumberJustification );
__declspec(implementation_key(3272)) IDispatchPtr _ITextStyleAuto::GetAttributeSets ( );
__declspec(implementation_key(3273)) VARIANT_BOOL _ITextStyleAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(3274)) void TextStyle::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(3275)) _bstr_t TextStyle::GetName ( );
__declspec(implementation_key(3276)) _bstr_t TextStyle::GetDescription ( long paperUnits, long Precision );
__declspec(implementation_key(3277)) long TextStyle::GetUnits ( );
__declspec(implementation_key(3278)) void TextStyle::PutUnits ( long _arg1 );
__declspec(implementation_key(3279)) void TextStyle::PutParent ( _bstr_t _arg1 );
__declspec(implementation_key(3280)) _bstr_t TextStyle::GetParent ( );
__declspec(implementation_key(3281)) long TextStyle::GetAlignment ( );
__declspec(implementation_key(3282)) void TextStyle::PutAlignment ( long _arg1 );
__declspec(implementation_key(3283)) double TextStyle::GetBeforeSpacing ( );
__declspec(implementation_key(3284)) void TextStyle::PutBeforeSpacing ( double _arg1 );
__declspec(implementation_key(3285)) double TextStyle::GetAfterSpacing ( );
__declspec(implementation_key(3286)) void TextStyle::PutAfterSpacing ( double _arg1 );
__declspec(implementation_key(3287)) double TextStyle::GetLineSpacing ( );
__declspec(implementation_key(3288)) void TextStyle::PutLineSpacing ( double _arg1 );
__declspec(implementation_key(3289)) double TextStyle::GetTabs ( );
__declspec(implementation_key(3290)) void TextStyle::PutTabs ( double _arg1 );
__declspec(implementation_key(3291)) void TextStyle::PutCharStyleName ( _bstr_t _arg1 );
__declspec(implementation_key(3292)) _bstr_t TextStyle::GetCharStyleName ( );
__declspec(implementation_key(3293)) HRESULT TextStyle::SetLineLeading ( double leading, long leadingType );
__declspec(implementation_key(3294)) HRESULT TextStyle::GetLineLeading ( double * leading, long * leadingType );
__declspec(implementation_key(3295)) enum TextStyleNumberJustificationConstants TextStyle::GetNumberJustification ( );
__declspec(implementation_key(3296)) void TextStyle::PutNumberJustification ( enum TextStyleNumberJustificationConstants _arg1 );
__declspec(implementation_key(3297)) IDispatchPtr TextStyle::GetAttributeSets ( );
__declspec(implementation_key(3298)) VARIANT_BOOL TextStyle::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(3299)) long _ITextStylesAuto::GetCount ( );
__declspec(implementation_key(3300)) IDispatchPtr _ITextStylesAuto::GetParent ( );
__declspec(implementation_key(3301)) IDispatchPtr _ITextStylesAuto::GetApplication ( );
__declspec(implementation_key(3302)) TextStylePtr _ITextStylesAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(3303)) IUnknownPtr _ITextStylesAuto::Get_NewEnum ( );
__declspec(implementation_key(3304)) TextStylePtr _ITextStylesAuto::Add ( _bstr_t Name, _bstr_t Parent );
__declspec(implementation_key(3305)) HRESULT _ITextStylesAuto::Remove ( _bstr_t Name );
__declspec(implementation_key(3306)) _bstr_t _ITextStylesAuto::GetActive ( );
__declspec(implementation_key(3307)) void _ITextStylesAuto::PutActive ( _bstr_t Name );
__declspec(implementation_key(3308)) void _ITextCharStyleAuto::PutName ( _bstr_t Name );
__declspec(implementation_key(3309)) _bstr_t _ITextCharStyleAuto::GetName ( );
__declspec(implementation_key(3310)) _bstr_t _ITextCharStyleAuto::GetDescription ( long paperUnits, long Precision );
__declspec(implementation_key(3311)) void _ITextCharStyleAuto::PutUnits ( long Units );
__declspec(implementation_key(3312)) long _ITextCharStyleAuto::GetUnits ( );
__declspec(implementation_key(3313)) long _ITextCharStyleAuto::GetColor ( );
__declspec(implementation_key(3314)) void _ITextCharStyleAuto::PutColor ( long Color );
__declspec(implementation_key(3315)) _bstr_t _ITextCharStyleAuto::GetParent ( );
__declspec(implementation_key(3316)) void _ITextCharStyleAuto::PutParent ( _bstr_t Name );
__declspec(implementation_key(3317)) void _ITextCharStyleAuto::PutFontName ( _bstr_t Name );
__declspec(implementation_key(3318)) _bstr_t _ITextCharStyleAuto::GetFontName ( );
__declspec(implementation_key(3319)) void _ITextCharStyleAuto::PutStyle ( long Style );
__declspec(implementation_key(3320)) long _ITextCharStyleAuto::GetStyle ( );
__declspec(implementation_key(3321)) long _ITextCharStyleAuto::GetUnderlineStyle ( );
__declspec(implementation_key(3322)) void _ITextCharStyleAuto::PutUnderlineStyle ( long Style );
__declspec(implementation_key(3323)) long _ITextCharStyleAuto::GetLangID ( );
__declspec(implementation_key(3324)) void _ITextCharStyleAuto::PutLangID ( long LangID );
__declspec(implementation_key(3325)) double _ITextCharStyleAuto::GetTextSize ( );
__declspec(implementation_key(3326)) void _ITextCharStyleAuto::PutTextSize ( double TextSize );
__declspec(implementation_key(3327)) HRESULT _ITextCharStyleAuto::SetTextSize ( double TextSize, long SizeType );
__declspec(implementation_key(3328)) HRESULT _ITextCharStyleAuto::GetTextSize ( double * TextSize, long * SizeType );
__declspec(implementation_key(3329)) double _ITextCharStyleAuto::GetAspectRatio ( );
__declspec(implementation_key(3330)) void _ITextCharStyleAuto::PutAspectRatio ( double TextSize );
__declspec(implementation_key(3331)) IDispatchPtr _ITextCharStyleAuto::GetAttributeSets ( );
__declspec(implementation_key(3332)) VARIANT_BOOL _ITextCharStyleAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(3333)) void TextCharStyle::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(3334)) _bstr_t TextCharStyle::GetName ( );
__declspec(implementation_key(3335)) _bstr_t TextCharStyle::GetDescription ( long paperUnits, long Precision );
__declspec(implementation_key(3336)) void TextCharStyle::PutUnits ( long _arg1 );
__declspec(implementation_key(3337)) long TextCharStyle::GetUnits ( );
__declspec(implementation_key(3338)) long TextCharStyle::GetColor ( );
__declspec(implementation_key(3339)) void TextCharStyle::PutColor ( long _arg1 );
__declspec(implementation_key(3340)) _bstr_t TextCharStyle::GetParent ( );
__declspec(implementation_key(3341)) void TextCharStyle::PutParent ( _bstr_t _arg1 );
__declspec(implementation_key(3342)) void TextCharStyle::PutFontName ( _bstr_t _arg1 );
__declspec(implementation_key(3343)) _bstr_t TextCharStyle::GetFontName ( );
__declspec(implementation_key(3344)) void TextCharStyle::PutStyle ( long _arg1 );
__declspec(implementation_key(3345)) long TextCharStyle::GetStyle ( );
__declspec(implementation_key(3346)) long TextCharStyle::GetUnderlineStyle ( );
__declspec(implementation_key(3347)) void TextCharStyle::PutUnderlineStyle ( long _arg1 );
__declspec(implementation_key(3348)) long TextCharStyle::GetLangID ( );
__declspec(implementation_key(3349)) void TextCharStyle::PutLangID ( long _arg1 );
__declspec(implementation_key(3350)) double TextCharStyle::GetTextSize ( );
__declspec(implementation_key(3351)) void TextCharStyle::PutTextSize ( double _arg1 );
__declspec(implementation_key(3352)) HRESULT TextCharStyle::SetTextSize ( double TextSize, long SizeType );
__declspec(implementation_key(3353)) HRESULT TextCharStyle::GetTextSize ( double * TextSize, long * SizeType );
__declspec(implementation_key(3354)) double TextCharStyle::GetAspectRatio ( );
__declspec(implementation_key(3355)) void TextCharStyle::PutAspectRatio ( double _arg1 );
__declspec(implementation_key(3356)) IDispatchPtr TextCharStyle::GetAttributeSets ( );
__declspec(implementation_key(3357)) VARIANT_BOOL TextCharStyle::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(3358)) long _ITextCharStylesAuto::GetCount ( );
__declspec(implementation_key(3359)) IDispatchPtr _ITextCharStylesAuto::GetParent ( );
__declspec(implementation_key(3360)) IDispatchPtr _ITextCharStylesAuto::GetApplication ( );
__declspec(implementation_key(3361)) TextCharStylePtr _ITextCharStylesAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(3362)) IUnknownPtr _ITextCharStylesAuto::Get_NewEnum ( );
__declspec(implementation_key(3363)) TextCharStylePtr _ITextCharStylesAuto::Add ( _bstr_t Name, _bstr_t Parent );
__declspec(implementation_key(3364)) HRESULT _ITextCharStylesAuto::Remove ( _bstr_t Name );
__declspec(implementation_key(3365)) IDispatchPtr _ISymbol2dAuto::GetStyle ( );
__declspec(implementation_key(3366)) VARIANT_BOOL _ISymbol2dAuto::GetUseSymbolLayer ( );
__declspec(implementation_key(3367)) void _ISymbol2dAuto::PutUseSymbolLayer ( VARIANT_BOOL flag );
__declspec(implementation_key(3368)) _bstr_t _ISymbol2dAuto::GetLayer ( );
__declspec(implementation_key(3369)) void _ISymbol2dAuto::PutLayer ( _bstr_t pLayer );
__declspec(implementation_key(3370)) double _ISymbol2dAuto::GetAngle ( );
__declspec(implementation_key(3371)) void _ISymbol2dAuto::PutAngle ( double Angle );
__declspec(implementation_key(3372)) VARIANT_BOOL _ISymbol2dAuto::GetScaleFactorLock ( );
__declspec(implementation_key(3373)) void _ISymbol2dAuto::PutScaleFactorLock ( VARIANT_BOOL lock );
__declspec(implementation_key(3374)) long _ISymbol2dAuto::GetQuantity ( );
__declspec(implementation_key(3375)) void _ISymbol2dAuto::PutQuantity ( long Quantity );
__declspec(implementation_key(3376)) IDispatchPtr _ISymbol2dAuto::GetUser ( );
__declspec(implementation_key(3377)) double _ISymbol2dAuto::GetScaleFactor ( );
__declspec(implementation_key(3378)) void _ISymbol2dAuto::PutScaleFactor ( double __MIDL___ISymbol2dAuto0000 );
__declspec(implementation_key(3379)) HRESULT _ISymbol2dAuto::GetOrigin ( double * Ox, double * Oy );
__declspec(implementation_key(3380)) HRESULT _ISymbol2dAuto::SetOrigin ( double Ox, double Oy );
__declspec(implementation_key(3381)) HRESULT _ISymbol2dAuto::GetRotations ( double * Xx, double * Xy, double * Yx, double * Yy );
__declspec(implementation_key(3382)) HRESULT _ISymbol2dAuto::SetRotations ( double Xx, double Xy, double Yx, double Yy );
__declspec(implementation_key(3383)) enum DisplayTypeConstant _ISymbol2dAuto::GetDisplayType ( );
__declspec(implementation_key(3384)) void _ISymbol2dAuto::PutDisplayType ( enum DisplayTypeConstant Type );
__declspec(implementation_key(3385)) VARIANT_BOOL _ISymbol2dAuto::GetNestedDisplay ( );
__declspec(implementation_key(3386)) void _ISymbol2dAuto::PutNestedDisplay ( VARIANT_BOOL flag );
__declspec(implementation_key(3387)) VARIANT_BOOL _ISymbol2dAuto::GetContentsLocatable ( );
__declspec(implementation_key(3388)) void _ISymbol2dAuto::PutContentsLocatable ( VARIANT_BOOL flag );
__declspec(implementation_key(3389)) _bstr_t _ISymbol2dAuto::GetSourceDoc ( );
__declspec(implementation_key(3390)) _bstr_t _ISymbol2dAuto::GetClass ( );
__declspec(implementation_key(3391)) IDispatchPtr _ISymbol2dAuto::GetObject ( );
__declspec(implementation_key(3392)) enum OLEInsertionTypeConstant _ISymbol2dAuto::GetOLEType ( );
__declspec(implementation_key(3393)) enum OLEUpdateOptionConstant _ISymbol2dAuto::GetUpdateOptions ( );
__declspec(implementation_key(3394)) void _ISymbol2dAuto::PutUpdateOptions ( enum OLEUpdateOptionConstant option );
__declspec(implementation_key(3395)) HRESULT _ISymbol2dAuto::Update ( );
__declspec(implementation_key(3396)) HRESULT _ISymbol2dAuto::DoVerb ( const _variant_t & verb );
__declspec(implementation_key(3397)) long _ISymbol2dAuto::GetObjectVerbsCount ( );
__declspec(implementation_key(3398)) _bstr_t _ISymbol2dAuto::ObjectVerbs ( const _variant_t & Index );
__declspec(implementation_key(3399)) _bstr_t _ISymbol2dAuto::GetAlternatePath ( );
__declspec(implementation_key(3400)) void _ISymbol2dAuto::PutAlternatePath ( BSTR * currentPath );
__declspec(implementation_key(3401)) ApplicationPtr _ISymbol2dAuto::GetApplication ( );
__declspec(implementation_key(3402)) long _ISymbol2dAuto::GetIndex ( );
__declspec(implementation_key(3403)) _bstr_t _ISymbol2dAuto::GetName ( const _variant_t & Recurse, long Lcid );
__declspec(implementation_key(3404)) IDispatchPtr _ISymbol2dAuto::GetParent ( );
__declspec(implementation_key(3405)) long _ISymbol2dAuto::GetType ( );
__declspec(implementation_key(3406)) long _ISymbol2dAuto::GetZOrder ( );
__declspec(implementation_key(3407)) _bstr_t _ISymbol2dAuto::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(3408)) IDispatchPtr _ISymbol2dAuto::GetDocument ( );
__declspec(implementation_key(3409)) HRESULT _ISymbol2dAuto::Copy ( );
__declspec(implementation_key(3410)) HRESULT _ISymbol2dAuto::Cut ( );
__declspec(implementation_key(3411)) HRESULT _ISymbol2dAuto::Delete ( );
__declspec(implementation_key(3412)) HRESULT _ISymbol2dAuto::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(3413)) HRESULT _ISymbol2dAuto::Scale ( double Factor );
__declspec(implementation_key(3414)) HRESULT _ISymbol2dAuto::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(3415)) HRESULT _ISymbol2dAuto::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(3416)) IDispatchPtr _ISymbol2dAuto::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(3417)) IDispatchPtr _ISymbol2dAuto::Mirror ( double X1, double Y1, double X2, double Y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(3418)) HRESULT _ISymbol2dAuto::BringToFront ( );
__declspec(implementation_key(3419)) HRESULT _ISymbol2dAuto::BringForward ( );
__declspec(implementation_key(3420)) HRESULT _ISymbol2dAuto::SendToBack ( );
__declspec(implementation_key(3421)) HRESULT _ISymbol2dAuto::SendBackward ( );
__declspec(implementation_key(3422)) HRESULT _ISymbol2dAuto::Select ( );
__declspec(implementation_key(3423)) long _ISymbol2dAuto::GetKeyPointCount ( );
__declspec(implementation_key(3424)) HRESULT _ISymbol2dAuto::GetKeyPoint ( long Index, double * x, double * y, double * z, enum KeyPointType * KeyPointType, long * HandleType );
__declspec(implementation_key(3425)) HRESULT _ISymbol2dAuto::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(3426)) IDispatchPtr _ISymbol2dAuto::GetAttributeSets ( );
__declspec(implementation_key(3427)) VARIANT_BOOL _ISymbol2dAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(3428)) HRESULT _ISymbol2dAuto::ConvertToGroup ( );
__declspec(implementation_key(3429)) IDispatchPtr _ISymbol2dAuto::GetMemberReference ( IDispatch * Member );
__declspec(implementation_key(3430)) IDispatchPtr _ISymbol2dAuto::GetSourceDocument ( );
__declspec(implementation_key(3431)) IDispatchPtr Symbol2d::GetStyle ( );
__declspec(implementation_key(3432)) VARIANT_BOOL Symbol2d::GetUseSymbolLayer ( );
__declspec(implementation_key(3433)) void Symbol2d::PutUseSymbolLayer ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3434)) _bstr_t Symbol2d::GetLayer ( );
__declspec(implementation_key(3435)) void Symbol2d::PutLayer ( _bstr_t _arg1 );
__declspec(implementation_key(3436)) double Symbol2d::GetAngle ( );
__declspec(implementation_key(3437)) void Symbol2d::PutAngle ( double _arg1 );
__declspec(implementation_key(3438)) VARIANT_BOOL Symbol2d::GetScaleFactorLock ( );
__declspec(implementation_key(3439)) void Symbol2d::PutScaleFactorLock ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3440)) long Symbol2d::GetQuantity ( );
__declspec(implementation_key(3441)) void Symbol2d::PutQuantity ( long _arg1 );
__declspec(implementation_key(3442)) IDispatchPtr Symbol2d::GetUser ( );
__declspec(implementation_key(3443)) double Symbol2d::GetScaleFactor ( );
__declspec(implementation_key(3444)) void Symbol2d::PutScaleFactor ( double _arg1 );
__declspec(implementation_key(3445)) HRESULT Symbol2d::GetOrigin ( double * Ox, double * Oy );
__declspec(implementation_key(3446)) HRESULT Symbol2d::SetOrigin ( double Ox, double Oy );
__declspec(implementation_key(3447)) HRESULT Symbol2d::GetRotations ( double * Xx, double * Xy, double * Yx, double * Yy );
__declspec(implementation_key(3448)) HRESULT Symbol2d::SetRotations ( double Xx, double Xy, double Yx, double Yy );
__declspec(implementation_key(3449)) enum DisplayTypeConstant Symbol2d::GetDisplayType ( );
__declspec(implementation_key(3450)) void Symbol2d::PutDisplayType ( enum DisplayTypeConstant _arg1 );
__declspec(implementation_key(3451)) VARIANT_BOOL Symbol2d::GetNestedDisplay ( );
__declspec(implementation_key(3452)) void Symbol2d::PutNestedDisplay ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3453)) VARIANT_BOOL Symbol2d::GetContentsLocatable ( );
__declspec(implementation_key(3454)) void Symbol2d::PutContentsLocatable ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3455)) _bstr_t Symbol2d::GetSourceDoc ( );
__declspec(implementation_key(3456)) _bstr_t Symbol2d::GetClass ( );
__declspec(implementation_key(3457)) IDispatchPtr Symbol2d::GetObject ( );
__declspec(implementation_key(3458)) enum OLEInsertionTypeConstant Symbol2d::GetOLEType ( );
__declspec(implementation_key(3459)) enum OLEUpdateOptionConstant Symbol2d::GetUpdateOptions ( );
__declspec(implementation_key(3460)) void Symbol2d::PutUpdateOptions ( enum OLEUpdateOptionConstant _arg1 );
__declspec(implementation_key(3461)) HRESULT Symbol2d::Update ( );
__declspec(implementation_key(3462)) HRESULT Symbol2d::DoVerb ( const _variant_t & verb );
__declspec(implementation_key(3463)) long Symbol2d::GetObjectVerbsCount ( );
__declspec(implementation_key(3464)) _bstr_t Symbol2d::ObjectVerbs ( const _variant_t & Index );
__declspec(implementation_key(3465)) _bstr_t Symbol2d::GetAlternatePath ( );
__declspec(implementation_key(3466)) void Symbol2d::PutAlternatePath ( BSTR * _arg1 );
__declspec(implementation_key(3467)) ApplicationPtr Symbol2d::GetApplication ( );
__declspec(implementation_key(3468)) long Symbol2d::GetIndex ( );
__declspec(implementation_key(3469)) _bstr_t Symbol2d::GetName ( const _variant_t & Recurse );
__declspec(implementation_key(3470)) IDispatchPtr Symbol2d::GetParent ( );
__declspec(implementation_key(3471)) long Symbol2d::GetType ( );
__declspec(implementation_key(3472)) long Symbol2d::GetZOrder ( );
__declspec(implementation_key(3473)) _bstr_t Symbol2d::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(3474)) IDispatchPtr Symbol2d::GetDocument ( );
__declspec(implementation_key(3475)) HRESULT Symbol2d::Copy ( );
__declspec(implementation_key(3476)) HRESULT Symbol2d::Cut ( );
__declspec(implementation_key(3477)) HRESULT Symbol2d::Delete ( );
__declspec(implementation_key(3478)) HRESULT Symbol2d::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(3479)) HRESULT Symbol2d::Scale ( double Factor );
__declspec(implementation_key(3480)) HRESULT Symbol2d::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(3481)) HRESULT Symbol2d::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(3482)) IDispatchPtr Symbol2d::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(3483)) IDispatchPtr Symbol2d::Mirror ( double X1, double Y1, double X2, double Y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(3484)) HRESULT Symbol2d::BringToFront ( );
__declspec(implementation_key(3485)) HRESULT Symbol2d::BringForward ( );
__declspec(implementation_key(3486)) HRESULT Symbol2d::SendToBack ( );
__declspec(implementation_key(3487)) HRESULT Symbol2d::SendBackward ( );
__declspec(implementation_key(3488)) HRESULT Symbol2d::Select ( );
__declspec(implementation_key(3489)) long Symbol2d::GetKeyPointCount ( );
__declspec(implementation_key(3490)) HRESULT Symbol2d::GetKeyPoint ( long Index, double * x, double * y, double * z, enum KeyPointType * KeyPointType, long * HandleType );
__declspec(implementation_key(3491)) HRESULT Symbol2d::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(3492)) IDispatchPtr Symbol2d::GetAttributeSets ( );
__declspec(implementation_key(3493)) VARIANT_BOOL Symbol2d::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(3494)) HRESULT Symbol2d::ConvertToGroup ( );
__declspec(implementation_key(3495)) IDispatchPtr Symbol2d::GetMemberReference ( IDispatch * Member );
__declspec(implementation_key(3496)) IDispatchPtr Symbol2d::GetSourceDocument ( );
__declspec(implementation_key(3497)) IDispatchPtr _ISymbolsAuto::GetApplication ( );
__declspec(implementation_key(3498)) long _ISymbolsAuto::GetCount ( );
__declspec(implementation_key(3499)) IDispatchPtr _ISymbolsAuto::GetParent ( );
__declspec(implementation_key(3500)) IDispatchPtr _ISymbolsAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(3501)) IUnknownPtr _ISymbolsAuto::Get_NewEnum ( );
__declspec(implementation_key(3502)) Symbol2dPtr _ISymbolsAuto::Add ( long insertionType, _bstr_t filePath, double x, double y, const _variant_t & z );
__declspec(implementation_key(3503)) HRESULT _ISymbolsAuto::InsertSymbolAsGeometry ( _bstr_t filePath, double dOriginX, double dOriginY );
__declspec(implementation_key(3504)) IDispatchPtr _ISymbolPropertiesAuto::GetApplication ( );
__declspec(implementation_key(3505)) IDispatchPtr _ISymbolPropertiesAuto::GetParent ( );
__declspec(implementation_key(3506)) IDispatchPtr _ISymbolPropertiesAuto::GetSymbol ( );
__declspec(implementation_key(3507)) IDispatchPtr _ISymbolPropertiesAuto::GetAttributeSets ( );
__declspec(implementation_key(3508)) VARIANT_BOOL _ISymbolPropertiesAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(3509)) _bstr_t _IViewStyleAuto::GetStyleName ( );
__declspec(implementation_key(3510)) void _IViewStyleAuto::PutStyleName ( _bstr_t psStyleName );
__declspec(implementation_key(3511)) _bstr_t _IViewStyleAuto::GetParent ( );
__declspec(implementation_key(3512)) void _IViewStyleAuto::PutParent ( _bstr_t psParentName );
__declspec(implementation_key(3513)) long _IViewStyleAuto::GetRenderMode ( );
__declspec(implementation_key(3514)) void _IViewStyleAuto::PutRenderMode ( long pnRenderMode );
__declspec(implementation_key(3515)) int _IViewStyleAuto::GetAllowOverrides ( );
__declspec(implementation_key(3516)) void _IViewStyleAuto::PutAllowOverrides ( int pbAllowOverrides );
__declspec(implementation_key(3517)) int _IViewStyleAuto::GetAntialiasWireframe ( );
__declspec(implementation_key(3518)) void _IViewStyleAuto::PutAntialiasWireframe ( int pnAntialiasWireframe );
__declspec(implementation_key(3519)) int _IViewStyleAuto::GetAntialiasSurface ( );
__declspec(implementation_key(3520)) void _IViewStyleAuto::PutAntialiasSurface ( int pnAntialiasSurface );
__declspec(implementation_key(3521)) int _IViewStyleAuto::GetDepthFading ( );
__declspec(implementation_key(3522)) void _IViewStyleAuto::PutDepthFading ( int pbDepthFading );
__declspec(implementation_key(3523)) int _IViewStyleAuto::GetPerspective ( );
__declspec(implementation_key(3524)) void _IViewStyleAuto::PutPerspective ( int pbPerspective );
__declspec(implementation_key(3525)) long _IViewStyleAuto::GetFocalLength ( );
__declspec(implementation_key(3526)) void _IViewStyleAuto::PutFocalLength ( long pnFocalLength );
__declspec(implementation_key(3527)) long _IViewStyleAuto::GetNumLights ( );
__declspec(implementation_key(3528)) long _IViewStyleAuto::GetAmbientColor ( );
__declspec(implementation_key(3529)) void _IViewStyleAuto::PutAmbientColor ( long plAmbientColor );
__declspec(implementation_key(3530)) float _IViewStyleAuto::GetAmbientIntensity ( );
__declspec(implementation_key(3531)) void _IViewStyleAuto::PutAmbientIntensity ( float pfAmbientIntensity );
__declspec(implementation_key(3532)) float _IViewStyleAuto::GetAmbientRed ( );
__declspec(implementation_key(3533)) void _IViewStyleAuto::PutAmbientRed ( float pfAmbientRed );
__declspec(implementation_key(3534)) float _IViewStyleAuto::GetAmbientGreen ( );
__declspec(implementation_key(3535)) void _IViewStyleAuto::PutAmbientGreen ( float pfAmbientGreen );
__declspec(implementation_key(3536)) float _IViewStyleAuto::GetAmbientBlue ( );
__declspec(implementation_key(3537)) void _IViewStyleAuto::PutAmbientBlue ( float pfAmbientBlue );
__declspec(implementation_key(3538)) long _IViewStyleAuto::GetHiddenLineMode ( );
__declspec(implementation_key(3539)) void _IViewStyleAuto::PutHiddenLineMode ( long pnHiddenLineMode );
__declspec(implementation_key(3540)) float _IViewStyleAuto::GetDimPercentage ( );
__declspec(implementation_key(3541)) void _IViewStyleAuto::PutDimPercentage ( float pfDimPercentage );
__declspec(implementation_key(3542)) int _IViewStyleAuto::GetIsBackgroundImageDisplayed ( );
__declspec(implementation_key(3543)) HRESULT _IViewStyleAuto::BeginPropertyBuffer ( );
__declspec(implementation_key(3544)) HRESULT _IViewStyleAuto::FlushPropertyBuffer ( );
__declspec(implementation_key(3545)) HRESULT _IViewStyleAuto::AddLight ( float fRed, float fGreen, float fBlue, float fTheta, float fPhi, long * pnLight );
__declspec(implementation_key(3546)) HRESULT _IViewStyleAuto::DeleteLight ( long nLight );
__declspec(implementation_key(3547)) HRESULT _IViewStyleAuto::GetLight ( long nLight, float * pfRed, float * pfGreen, float * pfBlue, float * pfTheta, float * pfPhi );
__declspec(implementation_key(3548)) HRESULT _IViewStyleAuto::SetLight ( long nLight, float fRed, float fGreen, float fBlue, float fTheta, float fPhi );
__declspec(implementation_key(3549)) HRESULT _IViewStyleAuto::GetLightColor ( long nLight, long * plLightColor );
__declspec(implementation_key(3550)) HRESULT _IViewStyleAuto::SetLightColor ( long nLight, long lLightColor );
__declspec(implementation_key(3551)) HRESULT _IViewStyleAuto::GetLightIntensity ( long nLight, float * pfIntensity );
__declspec(implementation_key(3552)) HRESULT _IViewStyleAuto::SetLightIntensity ( long nLight, float fIntensity );
__declspec(implementation_key(3553)) HRESULT _IViewStyleAuto::GetLightTheta ( long nLight, float * pfTheta );
__declspec(implementation_key(3554)) HRESULT _IViewStyleAuto::SetLightTheta ( long nLight, float fTheta );
__declspec(implementation_key(3555)) HRESULT _IViewStyleAuto::GetLightPhi ( long nLight, float * pfPhi );
__declspec(implementation_key(3556)) HRESULT _IViewStyleAuto::SetLightPhi ( long nLight, float fPhi );
__declspec(implementation_key(3557)) HRESULT _IViewStyleAuto::Delete ( );
__declspec(implementation_key(3558)) enum SeRenderModeType _IViewStyleAuto::GetRenderModeType ( );
__declspec(implementation_key(3559)) void _IViewStyleAuto::PutRenderModeType ( enum SeRenderModeType pnRenderMode );
__declspec(implementation_key(3560)) VARIANT_BOOL _IViewStyleAuto::GetSilhouettesEnabled ( );
__declspec(implementation_key(3561)) void _IViewStyleAuto::PutSilhouettesEnabled ( VARIANT_BOOL pbEnabled );
__declspec(implementation_key(3562)) long _IViewStyleAuto::GetStyleID ( );
__declspec(implementation_key(3563)) HRESULT _IViewStyleAuto::GetAnalysisParameters ( enum SeAnalysisStateType * peState, enum SeAnalysisModeType * peMode, VARIANT * pQualityScale, VARIANT * pArg1, VARIANT * pArg2, VARIANT * pArg3, VARIANT * pArg4 );
__declspec(implementation_key(3564)) HRESULT _IViewStyleAuto::SetAnalysisParameters ( enum SeAnalysisStateType eState, enum SeAnalysisModeType eMode, const _variant_t & QualityScale, const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(3565)) enum SeBackgroundType _IViewStyleAuto::GetBackgroundType ( );
__declspec(implementation_key(3566)) void _IViewStyleAuto::PutBackgroundType ( enum SeBackgroundType pnBackgroundType );
__declspec(implementation_key(3567)) _bstr_t _IViewStyleAuto::GetBackgroundImageFile ( );
__declspec(implementation_key(3568)) void _IViewStyleAuto::PutBackgroundImageFile ( _bstr_t psBackgroundImageFile );
__declspec(implementation_key(3569)) enum SeSkyboxType _IViewStyleAuto::GetSkyboxType ( );
__declspec(implementation_key(3570)) void _IViewStyleAuto::PutSkyboxType ( enum SeSkyboxType peType );
__declspec(implementation_key(3571)) HRESULT _IViewStyleAuto::SetSkyboxSkyFile ( _bstr_t sFilename );
__declspec(implementation_key(3572)) HRESULT _IViewStyleAuto::SetSkyboxSideFilename ( int nSide, _bstr_t sFilename );
__declspec(implementation_key(3573)) _bstr_t _IViewStyleAuto::GetSkyboxSideFilename ( int nSide );
__declspec(implementation_key(3574)) HRESULT _IViewStyleAuto::SkyboxClear ( int nSide );
__declspec(implementation_key(3575)) HRESULT _IViewStyleAuto::SkyboxClearAll ( );
__declspec(implementation_key(3576)) HRESULT _IViewStyleAuto::GetSkyboxOrientation ( float * pfxDirection, float * pfyDirection, float * pfzDirection, float * pfxUp, float * pfyUp, float * pfzUp, float * pfFieldOfView );
__declspec(implementation_key(3577)) HRESULT _IViewStyleAuto::SetSkyboxOrientation ( float fxDirection, float fyDirection, float fzDirection, float fxUp, float fyUp, float fzUp, float fFieldOfView );
__declspec(implementation_key(3578)) long _IViewStyleAuto::GetBackgroundMirrorX ( );
__declspec(implementation_key(3579)) void _IViewStyleAuto::PutBackgroundMirrorX ( long pbMirrorX );
__declspec(implementation_key(3580)) long _IViewStyleAuto::GetBackgroundMirrorY ( );
__declspec(implementation_key(3581)) void _IViewStyleAuto::PutBackgroundMirrorY ( long pbMirrorY );
__declspec(implementation_key(3582)) long _IViewStyleAuto::GetTextures ( );
__declspec(implementation_key(3583)) void _IViewStyleAuto::PutTextures ( long pbTextures );
__declspec(implementation_key(3584)) long _IViewStyleAuto::GetReflections ( );
__declspec(implementation_key(3585)) void _IViewStyleAuto::PutReflections ( long pbReflections );
__declspec(implementation_key(3586)) long _IViewStyleAuto::GetBumpmaps ( );
__declspec(implementation_key(3587)) void _IViewStyleAuto::PutBumpmaps ( long pbBumpmaps );
__declspec(implementation_key(3588)) long _IViewStyleAuto::GetFloorReflection ( );
__declspec(implementation_key(3589)) void _IViewStyleAuto::PutFloorReflection ( long pbFloorReflection );
__declspec(implementation_key(3590)) long _IViewStyleAuto::GetCastShadows ( );
__declspec(implementation_key(3591)) void _IViewStyleAuto::PutCastShadows ( long pbCastShadows );
__declspec(implementation_key(3592)) long _IViewStyleAuto::GetDropShadow ( );
__declspec(implementation_key(3593)) void _IViewStyleAuto::PutDropShadow ( long pbDropShadow );
__declspec(implementation_key(3594)) HRESULT _IViewStyleAuto::SetGradientBackground ( enum SeGradientType eType, long crColor1, long crColor2, const _variant_t & SpotCenterX, const _variant_t & SpotCenterY );
__declspec(implementation_key(3595)) HRESULT _IViewStyleAuto::GetGradientBackground ( enum SeGradientType * peType, long * pcrColor1, long * pcrColor2, VARIANT * pSpotCenterX, VARIANT * pSpotCenterY );
__declspec(implementation_key(3596)) HRESULT _IViewStyleAuto::SetGradientColor ( int nColor, long crColor );
__declspec(implementation_key(3597)) long _IViewStyleAuto::GetGradientColor ( int nColor );
__declspec(implementation_key(3598)) enum SeAntiAliasLevel _IViewStyleAuto::GetAntialiasLevel ( );
__declspec(implementation_key(3599)) void _IViewStyleAuto::PutAntialiasLevel ( enum SeAntiAliasLevel pnAntialiasLevel );
__declspec(implementation_key(3600)) long _IViewStyleAuto::GetSilhouettes ( );
__declspec(implementation_key(3601)) void _IViewStyleAuto::PutSilhouettes ( long pbEnabled );
__declspec(implementation_key(3602)) enum SeHiddenLineMode _IViewStyleAuto::GetHiddenLines ( );
__declspec(implementation_key(3603)) void _IViewStyleAuto::PutHiddenLines ( enum SeHiddenLineMode peMode );
__declspec(implementation_key(3604)) long _IViewStyleAuto::GetHighQuality ( );
__declspec(implementation_key(3605)) void _IViewStyleAuto::PutHighQuality ( long pbHighQuality );
__declspec(implementation_key(3606)) HRESULT _IViewStyleAuto::ResetSkyboxOrientation ( );
__declspec(implementation_key(3607)) HRESULT _IViewStyleAuto::DeleteSkybox ( );
__declspec(implementation_key(3608)) long _IViewStyleAuto::GetAmbientShadows ( );
__declspec(implementation_key(3609)) void _IViewStyleAuto::PutAmbientShadows ( long pbAmbientShadows );
__declspec(implementation_key(3610)) long _IViewStyleAuto::GetFloorShadow ( );
__declspec(implementation_key(3611)) void _IViewStyleAuto::PutFloorShadow ( long pbFloorShadow );
__declspec(implementation_key(3612)) HRESULT _IViewStyleAuto::GetLightFlags ( long nLight, long * pnFlags );
__declspec(implementation_key(3613)) HRESULT _IViewStyleAuto::SetLightFlags ( long nLight, long nFlags );
__declspec(implementation_key(3614)) _bstr_t ViewStyle::GetStyleName ( );
__declspec(implementation_key(3615)) void ViewStyle::PutStyleName ( _bstr_t _arg1 );
__declspec(implementation_key(3616)) _bstr_t ViewStyle::GetParent ( );
__declspec(implementation_key(3617)) void ViewStyle::PutParent ( _bstr_t _arg1 );
__declspec(implementation_key(3618)) long ViewStyle::GetRenderMode ( );
__declspec(implementation_key(3619)) void ViewStyle::PutRenderMode ( long _arg1 );
__declspec(implementation_key(3620)) int ViewStyle::GetAllowOverrides ( );
__declspec(implementation_key(3621)) void ViewStyle::PutAllowOverrides ( int _arg1 );
__declspec(implementation_key(3622)) int ViewStyle::GetAntialiasWireframe ( );
__declspec(implementation_key(3623)) void ViewStyle::PutAntialiasWireframe ( int _arg1 );
__declspec(implementation_key(3624)) int ViewStyle::GetAntialiasSurface ( );
__declspec(implementation_key(3625)) void ViewStyle::PutAntialiasSurface ( int _arg1 );
__declspec(implementation_key(3626)) int ViewStyle::GetDepthFading ( );
__declspec(implementation_key(3627)) void ViewStyle::PutDepthFading ( int _arg1 );
__declspec(implementation_key(3628)) int ViewStyle::GetPerspective ( );
__declspec(implementation_key(3629)) void ViewStyle::PutPerspective ( int _arg1 );
__declspec(implementation_key(3630)) long ViewStyle::GetFocalLength ( );
__declspec(implementation_key(3631)) void ViewStyle::PutFocalLength ( long _arg1 );
__declspec(implementation_key(3632)) long ViewStyle::GetNumLights ( );
__declspec(implementation_key(3633)) long ViewStyle::GetAmbientColor ( );
__declspec(implementation_key(3634)) void ViewStyle::PutAmbientColor ( long _arg1 );
__declspec(implementation_key(3635)) float ViewStyle::GetAmbientIntensity ( );
__declspec(implementation_key(3636)) void ViewStyle::PutAmbientIntensity ( float _arg1 );
__declspec(implementation_key(3637)) float ViewStyle::GetAmbientRed ( );
__declspec(implementation_key(3638)) void ViewStyle::PutAmbientRed ( float _arg1 );
__declspec(implementation_key(3639)) float ViewStyle::GetAmbientGreen ( );
__declspec(implementation_key(3640)) void ViewStyle::PutAmbientGreen ( float _arg1 );
__declspec(implementation_key(3641)) float ViewStyle::GetAmbientBlue ( );
__declspec(implementation_key(3642)) void ViewStyle::PutAmbientBlue ( float _arg1 );
__declspec(implementation_key(3643)) long ViewStyle::GetHiddenLineMode ( );
__declspec(implementation_key(3644)) void ViewStyle::PutHiddenLineMode ( long _arg1 );
__declspec(implementation_key(3645)) float ViewStyle::GetDimPercentage ( );
__declspec(implementation_key(3646)) void ViewStyle::PutDimPercentage ( float _arg1 );
__declspec(implementation_key(3647)) int ViewStyle::GetIsBackgroundImageDisplayed ( );
__declspec(implementation_key(3648)) HRESULT ViewStyle::BeginPropertyBuffer ( );
__declspec(implementation_key(3649)) HRESULT ViewStyle::FlushPropertyBuffer ( );
__declspec(implementation_key(3650)) HRESULT ViewStyle::AddLight ( float fRed, float fGreen, float fBlue, float fTheta, float fPhi, long * pnLight );
__declspec(implementation_key(3651)) HRESULT ViewStyle::DeleteLight ( long nLight );
__declspec(implementation_key(3652)) HRESULT ViewStyle::GetLight ( long nLight, float * pfRed, float * pfGreen, float * pfBlue, float * pfTheta, float * pfPhi );
__declspec(implementation_key(3653)) HRESULT ViewStyle::SetLight ( long nLight, float fRed, float fGreen, float fBlue, float fTheta, float fPhi );
__declspec(implementation_key(3654)) HRESULT ViewStyle::GetLightColor ( long nLight, long * plLightColor );
__declspec(implementation_key(3655)) HRESULT ViewStyle::SetLightColor ( long nLight, long lLightColor );
__declspec(implementation_key(3656)) HRESULT ViewStyle::GetLightIntensity ( long nLight, float * pfIntensity );
__declspec(implementation_key(3657)) HRESULT ViewStyle::SetLightIntensity ( long nLight, float fIntensity );
__declspec(implementation_key(3658)) HRESULT ViewStyle::GetLightTheta ( long nLight, float * pfTheta );
__declspec(implementation_key(3659)) HRESULT ViewStyle::SetLightTheta ( long nLight, float fTheta );
__declspec(implementation_key(3660)) HRESULT ViewStyle::GetLightPhi ( long nLight, float * pfPhi );
__declspec(implementation_key(3661)) HRESULT ViewStyle::SetLightPhi ( long nLight, float fPhi );
__declspec(implementation_key(3662)) HRESULT ViewStyle::Delete ( );
__declspec(implementation_key(3663)) enum SeRenderModeType ViewStyle::GetRenderModeType ( );
__declspec(implementation_key(3664)) void ViewStyle::PutRenderModeType ( enum SeRenderModeType _arg1 );
__declspec(implementation_key(3665)) VARIANT_BOOL ViewStyle::GetSilhouettesEnabled ( );
__declspec(implementation_key(3666)) void ViewStyle::PutSilhouettesEnabled ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3667)) long ViewStyle::GetStyleID ( );
__declspec(implementation_key(3668)) HRESULT ViewStyle::GetAnalysisParameters ( enum SeAnalysisStateType * peState, enum SeAnalysisModeType * peMode, VARIANT * pQualityScale, VARIANT * pArg1, VARIANT * pArg2, VARIANT * pArg3, VARIANT * pArg4 );
__declspec(implementation_key(3669)) HRESULT ViewStyle::SetAnalysisParameters ( enum SeAnalysisStateType eState, enum SeAnalysisModeType eMode, const _variant_t & QualityScale, const _variant_t & Arg1, const _variant_t & Arg2, const _variant_t & Arg3, const _variant_t & Arg4 );
__declspec(implementation_key(3670)) enum SeBackgroundType ViewStyle::GetBackgroundType ( );
__declspec(implementation_key(3671)) void ViewStyle::PutBackgroundType ( enum SeBackgroundType _arg1 );
__declspec(implementation_key(3672)) _bstr_t ViewStyle::GetBackgroundImageFile ( );
__declspec(implementation_key(3673)) void ViewStyle::PutBackgroundImageFile ( _bstr_t _arg1 );
__declspec(implementation_key(3674)) enum SeSkyboxType ViewStyle::GetSkyboxType ( );
__declspec(implementation_key(3675)) void ViewStyle::PutSkyboxType ( enum SeSkyboxType _arg1 );
__declspec(implementation_key(3676)) HRESULT ViewStyle::SetSkyboxSkyFile ( _bstr_t sFilename );
__declspec(implementation_key(3677)) HRESULT ViewStyle::SetSkyboxSideFilename ( int nSide, _bstr_t sFilename );
__declspec(implementation_key(3678)) _bstr_t ViewStyle::GetSkyboxSideFilename ( int nSide );
__declspec(implementation_key(3679)) HRESULT ViewStyle::SkyboxClear ( int nSide );
__declspec(implementation_key(3680)) HRESULT ViewStyle::SkyboxClearAll ( );
__declspec(implementation_key(3681)) HRESULT ViewStyle::GetSkyboxOrientation ( float * pfxDirection, float * pfyDirection, float * pfzDirection, float * pfxUp, float * pfyUp, float * pfzUp, float * pfFieldOfView );
__declspec(implementation_key(3682)) HRESULT ViewStyle::SetSkyboxOrientation ( float fxDirection, float fyDirection, float fzDirection, float fxUp, float fyUp, float fzUp, float fFieldOfView );
__declspec(implementation_key(3683)) long ViewStyle::GetBackgroundMirrorX ( );
__declspec(implementation_key(3684)) void ViewStyle::PutBackgroundMirrorX ( long _arg1 );
__declspec(implementation_key(3685)) long ViewStyle::GetBackgroundMirrorY ( );
__declspec(implementation_key(3686)) void ViewStyle::PutBackgroundMirrorY ( long _arg1 );
__declspec(implementation_key(3687)) long ViewStyle::GetTextures ( );
__declspec(implementation_key(3688)) void ViewStyle::PutTextures ( long _arg1 );
__declspec(implementation_key(3689)) long ViewStyle::GetReflections ( );
__declspec(implementation_key(3690)) void ViewStyle::PutReflections ( long _arg1 );
__declspec(implementation_key(3691)) long ViewStyle::GetBumpmaps ( );
__declspec(implementation_key(3692)) void ViewStyle::PutBumpmaps ( long _arg1 );
__declspec(implementation_key(3693)) long ViewStyle::GetFloorReflection ( );
__declspec(implementation_key(3694)) void ViewStyle::PutFloorReflection ( long _arg1 );
__declspec(implementation_key(3695)) long ViewStyle::GetCastShadows ( );
__declspec(implementation_key(3696)) void ViewStyle::PutCastShadows ( long _arg1 );
__declspec(implementation_key(3697)) long ViewStyle::GetDropShadow ( );
__declspec(implementation_key(3698)) void ViewStyle::PutDropShadow ( long _arg1 );
__declspec(implementation_key(3699)) HRESULT ViewStyle::SetGradientBackground ( enum SeGradientType eType, long crColor1, long crColor2, const _variant_t & SpotCenterX, const _variant_t & SpotCenterY );
__declspec(implementation_key(3700)) HRESULT ViewStyle::GetGradientBackground ( enum SeGradientType * peType, long * pcrColor1, long * pcrColor2, VARIANT * pSpotCenterX, VARIANT * pSpotCenterY );
__declspec(implementation_key(3701)) HRESULT ViewStyle::SetGradientColor ( int nColor, long crColor );
__declspec(implementation_key(3702)) long ViewStyle::GetGradientColor ( int nColor );
__declspec(implementation_key(3703)) enum SeAntiAliasLevel ViewStyle::GetAntialiasLevel ( );
__declspec(implementation_key(3704)) void ViewStyle::PutAntialiasLevel ( enum SeAntiAliasLevel _arg1 );
__declspec(implementation_key(3705)) long ViewStyle::GetSilhouettes ( );
__declspec(implementation_key(3706)) void ViewStyle::PutSilhouettes ( long _arg1 );
__declspec(implementation_key(3707)) enum SeHiddenLineMode ViewStyle::GetHiddenLines ( );
__declspec(implementation_key(3708)) void ViewStyle::PutHiddenLines ( enum SeHiddenLineMode _arg1 );
__declspec(implementation_key(3709)) long ViewStyle::GetHighQuality ( );
__declspec(implementation_key(3710)) void ViewStyle::PutHighQuality ( long _arg1 );
__declspec(implementation_key(3711)) HRESULT ViewStyle::ResetSkyboxOrientation ( );
__declspec(implementation_key(3712)) HRESULT ViewStyle::DeleteSkybox ( );
__declspec(implementation_key(3713)) long ViewStyle::GetAmbientShadows ( );
__declspec(implementation_key(3714)) void ViewStyle::PutAmbientShadows ( long _arg1 );
__declspec(implementation_key(3715)) long ViewStyle::GetFloorShadow ( );
__declspec(implementation_key(3716)) void ViewStyle::PutFloorShadow ( long _arg1 );
__declspec(implementation_key(3717)) HRESULT ViewStyle::GetLightFlags ( long nLight, long * pnFlags );
__declspec(implementation_key(3718)) HRESULT ViewStyle::SetLightFlags ( long nLight, long nFlags );
__declspec(implementation_key(3719)) ViewStylePtr _IViewStylesAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(3720)) IUnknownPtr _IViewStylesAuto::Get_NewEnum ( );
__declspec(implementation_key(3721)) IDispatchPtr _IViewStylesAuto::GetApplication ( );
__declspec(implementation_key(3722)) long _IViewStylesAuto::GetCount ( );
__declspec(implementation_key(3723)) IDispatchPtr _IViewStylesAuto::GetParent ( );
__declspec(implementation_key(3724)) ViewStylePtr _IViewStylesAuto::Add ( _bstr_t Name, _bstr_t Parent );
__declspec(implementation_key(3725)) HRESULT _IViewStylesAuto::Remove ( _bstr_t Name );
__declspec(implementation_key(3726)) IDispatchPtr _IViewStylesAuto::GetStyleByID ( long StyleID );
__declspec(implementation_key(3727)) ViewStylePtr _IViewStylesAuto::AddFromFile ( _bstr_t Filename, _bstr_t StyleName );
__declspec(implementation_key(3728)) IDispatchPtr _IReferenceAuto::GetApplication ( );
__declspec(implementation_key(3729)) IDispatchPtr _IReferenceAuto::GetObject ( );
__declspec(implementation_key(3730)) IDispatchPtr _IReferenceAuto::GetParent ( );
__declspec(implementation_key(3731)) enum ObjectType _IReferenceAuto::GetType ( );
__declspec(implementation_key(3732)) HRESULT _IReferenceAuto::GetMatrix ( SAFEARRAY * * Matrix );
__declspec(implementation_key(3733)) IDispatchPtr _IReferenceAuto::GetAttributeSets ( );
__declspec(implementation_key(3734)) VARIANT_BOOL _IReferenceAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(3735)) IDispatchPtr _IReferenceAuto::GetImmediateParent ( );
__declspec(implementation_key(3736)) _bstr_t _IReferenceAuto::GetStyle ( );
__declspec(implementation_key(3737)) void _IReferenceAuto::PutStyle ( _bstr_t Style );
__declspec(implementation_key(3738)) HRESULT _IReferenceAuto::GetOccurrencesInPath ( IDispatch * * TopOccurrence, long * NumSubOccurrencesInPath, long * NumBoundSubOccurrencesInPath, SAFEARRAY * * BoundSubOccurrencesInPath );
__declspec(implementation_key(3739)) void _IRoutingSlipAuto::PutSubject ( _bstr_t bsSubject );
__declspec(implementation_key(3740)) _bstr_t _IRoutingSlipAuto::GetSubject ( );
__declspec(implementation_key(3741)) void _IRoutingSlipAuto::PutReturnWhenDone ( VARIANT_BOOL pReturn );
__declspec(implementation_key(3742)) VARIANT_BOOL _IRoutingSlipAuto::GetReturnWhenDone ( );
__declspec(implementation_key(3743)) void _IRoutingSlipAuto::PutMessage ( _bstr_t pbsMessage );
__declspec(implementation_key(3744)) _bstr_t _IRoutingSlipAuto::GetMessage ( );
__declspec(implementation_key(3745)) void _IRoutingSlipAuto::PutRecipients ( const _variant_t & _arg1 );
__declspec(implementation_key(3746)) void _IRoutingSlipAuto::PutDelivery ( enum RouteType RoutMethod );
__declspec(implementation_key(3747)) enum RouteType _IRoutingSlipAuto::GetDelivery ( );
__declspec(implementation_key(3748)) enum RouteStatus _IRoutingSlipAuto::GetStatus ( );
__declspec(implementation_key(3749)) VARIANT_BOOL _IRoutingSlipAuto::GetHasRouted ( );
__declspec(implementation_key(3750)) IDispatchPtr _IRoutingSlipAuto::GetApplication ( );
__declspec(implementation_key(3751)) IDispatchPtr _IRoutingSlipAuto::GetParent ( );
__declspec(implementation_key(3752)) void _IRoutingSlipAuto::PutTrackStatus ( VARIANT_BOOL TrackStatus );
__declspec(implementation_key(3753)) VARIANT_BOOL _IRoutingSlipAuto::GetTrackStatus ( );
__declspec(implementation_key(3754)) void _IRoutingSlipAuto::PutAskForApproval ( VARIANT_BOOL pAskApproval );
__declspec(implementation_key(3755)) VARIANT_BOOL _IRoutingSlipAuto::GetAskForApproval ( );
__declspec(implementation_key(3756)) void _IRoutingSlipAuto::PutApprove ( VARIANT_BOOL pApprove );
__declspec(implementation_key(3757)) VARIANT_BOOL _IRoutingSlipAuto::GetApprove ( );
__declspec(implementation_key(3758)) VARIANT_BOOL _IRoutingSlipAuto::GetApproved ( );
__declspec(implementation_key(3759)) VARIANT_BOOL _IRoutingSlipAuto::GetRouteInfo ( );
__declspec(implementation_key(3760)) HRESULT _IRoutingSlipAuto::AddRecipient ( _bstr_t bsRecip );
__declspec(implementation_key(3761)) HRESULT _IRoutingSlipAuto::Route ( const _variant_t & ConfirmRoute );
__declspec(implementation_key(3762)) HRESULT _IRoutingSlipAuto::Reset ( );
__declspec(implementation_key(3763)) IDispatchPtr _IRoutingSlipAuto::GetAttributeSets ( );
__declspec(implementation_key(3764)) VARIANT_BOOL _IRoutingSlipAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(3765)) long Properties::GetCount ( );
__declspec(implementation_key(3766)) IDispatchPtr Properties::GetParent ( );
__declspec(implementation_key(3767)) ApplicationPtr Properties::GetApplication ( );
__declspec(implementation_key(3768)) _bstr_t Properties::GetName ( );
__declspec(implementation_key(3769)) PropertyPtr Properties::Item ( const _variant_t & vIndex );
__declspec(implementation_key(3770)) HRESULT Properties::Save ( );
__declspec(implementation_key(3771)) PropertyPtr Properties::Add ( const _variant_t & Name, const _variant_t & Value );
__declspec(implementation_key(3772)) PropertyPtr Properties::PropertyByID ( const _variant_t & vIndex );
__declspec(implementation_key(3773)) long _IPropertySetsAuto::GetCount ( );
__declspec(implementation_key(3774)) IDispatchPtr _IPropertySetsAuto::GetParent ( );
__declspec(implementation_key(3775)) ApplicationPtr _IPropertySetsAuto::GetApplication ( );
__declspec(implementation_key(3776)) IUnknownPtr _IPropertySetsAuto::Get_NewEnum ( );
__declspec(implementation_key(3777)) PropertiesPtr _IPropertySetsAuto::Item ( const _variant_t & vIndex );
__declspec(implementation_key(3778)) HRESULT _IPropertySetsAuto::Save ( );
__declspec(implementation_key(3779)) _bstr_t Property::GetName ( );
__declspec(implementation_key(3780)) _variant_t Property::GetValue ( );
__declspec(implementation_key(3781)) void Property::PutValue ( VARIANT * _arg1 );
__declspec(implementation_key(3782)) _variant_t Property::GetType ( );
__declspec(implementation_key(3783)) HRESULT Property::Delete ( );
__declspec(implementation_key(3784)) _variant_t Property::Id ( );
__declspec(implementation_key(3785)) long _IPropertiesAuto::GetCount ( );
__declspec(implementation_key(3786)) IDispatchPtr _IPropertiesAuto::GetParent ( );
__declspec(implementation_key(3787)) ApplicationPtr _IPropertiesAuto::GetApplication ( );
__declspec(implementation_key(3788)) IUnknownPtr _IPropertiesAuto::Get_NewEnum ( );
__declspec(implementation_key(3789)) _bstr_t _IPropertiesAuto::GetName ( );
__declspec(implementation_key(3790)) PropertyPtr _IPropertiesAuto::Item ( const _variant_t & vIndex );
__declspec(implementation_key(3791)) HRESULT _IPropertiesAuto::Save ( );
__declspec(implementation_key(3792)) PropertyPtr _IPropertiesAuto::Add ( const _variant_t & Name, const _variant_t & Value );
__declspec(implementation_key(3793)) PropertyPtr _IPropertiesAuto::PropertyByID ( const _variant_t & vIndex );
__declspec(implementation_key(3794)) _bstr_t _IPropertyAuto::GetName ( );
__declspec(implementation_key(3795)) _variant_t _IPropertyAuto::GetValue ( );
__declspec(implementation_key(3796)) void _IPropertyAuto::PutValue ( VARIANT * Value );
__declspec(implementation_key(3797)) _variant_t _IPropertyAuto::GetType ( );
__declspec(implementation_key(3798)) HRESULT _IPropertyAuto::Delete ( );
__declspec(implementation_key(3799)) _variant_t _IPropertyAuto::Id ( );
__declspec(implementation_key(3800)) HRESULT _IPropertyExAuto::GetProps ( BSTR * bstName, VARIANT * Value, VARIANT * Type );
__declspec(implementation_key(3801)) _variant_t _ISummaryInfoAuto::GetAccessDate ( );
__declspec(implementation_key(3802)) ApplicationPtr _ISummaryInfoAuto::GetApplication ( );
__declspec(implementation_key(3803)) _bstr_t _ISummaryInfoAuto::GetAuthor ( );
__declspec(implementation_key(3804)) void _ISummaryInfoAuto::PutAuthor ( _bstr_t vValue );
__declspec(implementation_key(3805)) _bstr_t _ISummaryInfoAuto::GetCategory ( );
__declspec(implementation_key(3806)) void _ISummaryInfoAuto::PutCategory ( _bstr_t vValue );
__declspec(implementation_key(3807)) _bstr_t _ISummaryInfoAuto::GetComments ( );
__declspec(implementation_key(3808)) void _ISummaryInfoAuto::PutComments ( _bstr_t vValue );
__declspec(implementation_key(3809)) _bstr_t _ISummaryInfoAuto::GetCompany ( );
__declspec(implementation_key(3810)) void _ISummaryInfoAuto::PutCompany ( _bstr_t vValue );
__declspec(implementation_key(3811)) _bstr_t _ISummaryInfoAuto::GetCreateApp ( );
__declspec(implementation_key(3812)) void _ISummaryInfoAuto::PutCreateApp ( _bstr_t vValue );
__declspec(implementation_key(3813)) _variant_t _ISummaryInfoAuto::GetCreateDate ( );
__declspec(implementation_key(3814)) long _ISummaryInfoAuto::GetCreationLocale ( );
__declspec(implementation_key(3815)) _bstr_t _ISummaryInfoAuto::GetDocumentNumber ( );
__declspec(implementation_key(3816)) void _ISummaryInfoAuto::PutDocumentNumber ( _bstr_t vValue );
__declspec(implementation_key(3817)) _bstr_t _ISummaryInfoAuto::GetKeywords ( );
__declspec(implementation_key(3818)) void _ISummaryInfoAuto::PutKeywords ( _bstr_t vValue );
__declspec(implementation_key(3819)) _bstr_t _ISummaryInfoAuto::GetLastSavedBy ( );
__declspec(implementation_key(3820)) void _ISummaryInfoAuto::PutLastSavedBy ( _bstr_t vValue );
__declspec(implementation_key(3821)) _bstr_t _ISummaryInfoAuto::GetManager ( );
__declspec(implementation_key(3822)) void _ISummaryInfoAuto::PutManager ( _bstr_t vValue );
__declspec(implementation_key(3823)) IDispatchPtr _ISummaryInfoAuto::GetParent ( );
__declspec(implementation_key(3824)) _bstr_t _ISummaryInfoAuto::GetProjectName ( );
__declspec(implementation_key(3825)) void _ISummaryInfoAuto::PutProjectName ( _bstr_t vValue );
__declspec(implementation_key(3826)) _bstr_t _ISummaryInfoAuto::GetRevisionNumber ( );
__declspec(implementation_key(3827)) void _ISummaryInfoAuto::PutRevisionNumber ( _bstr_t vValue );
__declspec(implementation_key(3828)) _bstr_t _ISummaryInfoAuto::GetSaveApp ( );
__declspec(implementation_key(3829)) void _ISummaryInfoAuto::PutSaveApp ( _bstr_t vValue );
__declspec(implementation_key(3830)) _variant_t _ISummaryInfoAuto::GetSaveDate ( );
__declspec(implementation_key(3831)) _bstr_t _ISummaryInfoAuto::GetSubject ( );
__declspec(implementation_key(3832)) void _ISummaryInfoAuto::PutSubject ( _bstr_t vValue );
__declspec(implementation_key(3833)) _bstr_t _ISummaryInfoAuto::GetTemplate ( );
__declspec(implementation_key(3834)) void _ISummaryInfoAuto::PutTemplate ( _bstr_t vValue );
__declspec(implementation_key(3835)) _bstr_t _ISummaryInfoAuto::GetTitle ( );
__declspec(implementation_key(3836)) void _ISummaryInfoAuto::PutTitle ( _bstr_t vValue );
__declspec(implementation_key(3837)) _bstr_t _ISummaryInfoAuto::GetTotalEdits ( );
__declspec(implementation_key(3838)) void _ISummaryInfoAuto::PutTotalEdits ( _bstr_t vValue );
__declspec(implementation_key(3839)) long AttributeSet::GetCount ( );
__declspec(implementation_key(3840)) AttributePtr AttributeSet::Item ( const _variant_t & Index );
__declspec(implementation_key(3841)) AttributePtr AttributeSet::Add ( _bstr_t Name, enum AttributeTypeConstants Type );
__declspec(implementation_key(3842)) HRESULT AttributeSet::Remove ( _bstr_t Name );
__declspec(implementation_key(3843)) _bstr_t AttributeSet::GetSetName ( );
__declspec(implementation_key(3844)) long _IAttributeSetsAuto::GetCount ( );
__declspec(implementation_key(3845)) IUnknownPtr _IAttributeSetsAuto::Get_NewEnum ( );
__declspec(implementation_key(3846)) AttributeSetPtr _IAttributeSetsAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(3847)) AttributeSetPtr _IAttributeSetsAuto::Add ( _bstr_t Name );
__declspec(implementation_key(3848)) HRESULT _IAttributeSetsAuto::Remove ( _bstr_t Name );
__declspec(implementation_key(3849)) _bstr_t Attribute::GetName ( );
__declspec(implementation_key(3850)) _variant_t Attribute::GetValue ( );
__declspec(implementation_key(3851)) void Attribute::PutValue ( const _variant_t & _arg1 );
__declspec(implementation_key(3852)) enum AttributeTypeConstants Attribute::GetType ( );
__declspec(implementation_key(3853)) long _IAttributeSetAuto::GetCount ( );
__declspec(implementation_key(3854)) IUnknownPtr _IAttributeSetAuto::Get_NewEnum ( );
__declspec(implementation_key(3855)) AttributePtr _IAttributeSetAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(3856)) AttributePtr _IAttributeSetAuto::Add ( _bstr_t Name, enum AttributeTypeConstants Type );
__declspec(implementation_key(3857)) HRESULT _IAttributeSetAuto::Remove ( _bstr_t Name );
__declspec(implementation_key(3858)) _bstr_t _IAttributeSetAuto::GetSetName ( );
__declspec(implementation_key(3859)) _bstr_t _IAttributeAuto::GetName ( );
__declspec(implementation_key(3860)) _variant_t _IAttributeAuto::GetValue ( );
__declspec(implementation_key(3861)) void _IAttributeAuto::PutValue ( const _variant_t & Value );
__declspec(implementation_key(3862)) enum AttributeTypeConstants _IAttributeAuto::GetType ( );
__declspec(implementation_key(3863)) ApplicationPtr QueryObjects::GetApplication ( );
__declspec(implementation_key(3864)) long QueryObjects::GetCount ( );
__declspec(implementation_key(3865)) IDispatchPtr QueryObjects::Item ( long Index );
__declspec(implementation_key(3866)) IDispatchPtr QueryObjects::GetParent ( );
__declspec(implementation_key(3867)) QueryObjectsPtr _IAttributeQueryAuto::QueryByName ( const _variant_t & AttributeSetName, const _variant_t & AttributeName );
__declspec(implementation_key(3868)) ApplicationPtr _IAttributeQueryAuto::GetApplication ( );
__declspec(implementation_key(3869)) IDispatchPtr _IAttributeQueryAuto::GetParent ( );
__declspec(implementation_key(3870)) ApplicationPtr _IQueryObjectsAuto::GetApplication ( );
__declspec(implementation_key(3871)) long _IQueryObjectsAuto::GetCount ( );
__declspec(implementation_key(3872)) IDispatchPtr _IQueryObjectsAuto::Item ( long Index );
__declspec(implementation_key(3873)) IDispatchPtr _IQueryObjectsAuto::GetParent ( );
__declspec(implementation_key(3874)) HRESULT HighlightSet::AddItem ( IDispatch * Item );
__declspec(implementation_key(3875)) HRESULT HighlightSet::AddSelected ( );
__declspec(implementation_key(3876)) HRESULT HighlightSet::RemoveItem ( const _variant_t & Index );
__declspec(implementation_key(3877)) HRESULT HighlightSet::RemoveAll ( );
__declspec(implementation_key(3878)) HRESULT HighlightSet::Draw ( );
__declspec(implementation_key(3879)) HRESULT HighlightSet::Delete ( );
__declspec(implementation_key(3880)) long HighlightSet::GetCount ( );
__declspec(implementation_key(3881)) IDispatchPtr HighlightSet::Item ( const _variant_t & Index );
__declspec(implementation_key(3882)) long HighlightSet::GetColor ( );
__declspec(implementation_key(3883)) void HighlightSet::PutColor ( long _arg1 );
__declspec(implementation_key(3884)) HRESULT HighlightSet::SetTransform ( SAFEARRAY * * Matrix );
__declspec(implementation_key(3885)) HRESULT HighlightSet::ClearTransform ( );
__declspec(implementation_key(3886)) ApplicationPtr _IHighlightSetsAuto::GetApplication ( );
__declspec(implementation_key(3887)) IDispatchPtr _IHighlightSetsAuto::GetParent ( );
__declspec(implementation_key(3888)) long _IHighlightSetsAuto::GetCount ( );
__declspec(implementation_key(3889)) IUnknownPtr _IHighlightSetsAuto::Get_NewEnum ( );
__declspec(implementation_key(3890)) HighlightSetPtr _IHighlightSetsAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(3891)) HighlightSetPtr _IHighlightSetsAuto::Add ( );
__declspec(implementation_key(3892)) HRESULT _IHighlightSetAuto::AddItem ( IDispatch * Item );
__declspec(implementation_key(3893)) HRESULT _IHighlightSetAuto::AddSelected ( );
__declspec(implementation_key(3894)) HRESULT _IHighlightSetAuto::RemoveItem ( const _variant_t & Index );
__declspec(implementation_key(3895)) HRESULT _IHighlightSetAuto::RemoveAll ( );
__declspec(implementation_key(3896)) HRESULT _IHighlightSetAuto::Draw ( );
__declspec(implementation_key(3897)) HRESULT _IHighlightSetAuto::Delete ( );
__declspec(implementation_key(3898)) long _IHighlightSetAuto::GetCount ( );
__declspec(implementation_key(3899)) IDispatchPtr _IHighlightSetAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(3900)) long _IHighlightSetAuto::GetColor ( );
__declspec(implementation_key(3901)) void _IHighlightSetAuto::PutColor ( long Color );
__declspec(implementation_key(3902)) HRESULT _IHighlightSetAuto::SetTransform ( SAFEARRAY * * Matrix );
__declspec(implementation_key(3903)) HRESULT _IHighlightSetAuto::ClearTransform ( );
__declspec(implementation_key(3904)) ApplicationPtr _ISEGenericCollectionAuto::GetApplication ( );
__declspec(implementation_key(3905)) IDispatchPtr _ISEGenericCollectionAuto::GetParent ( );
__declspec(implementation_key(3906)) long _ISEGenericCollectionAuto::GetCount ( );
__declspec(implementation_key(3907)) IUnknownPtr _ISEGenericCollectionAuto::Get_NewEnum ( );
__declspec(implementation_key(3908)) IDispatchPtr _ISEGenericCollectionAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(3909)) long NamedViews::GetCount ( );
__declspec(implementation_key(3910)) SAFEARRAY * NamedViews::GetNames ( );
__declspec(implementation_key(3911)) NamedViewPtr NamedViews::Create ( _bstr_t Name );
__declspec(implementation_key(3912)) NamedViewPtr NamedViews::GetByName ( _bstr_t Name );
__declspec(implementation_key(3913)) HRESULT NamedViews::Remove ( _bstr_t Name );
__declspec(implementation_key(3914)) HRESULT NamedViews::Rename ( _bstr_t currName, _bstr_t NewName );
__declspec(implementation_key(3915)) NamedViewPtr NamedViews::Item ( const _variant_t & Index );
__declspec(implementation_key(3916)) _variant_t UnitsOfMeasure::ParseUnit ( int Index, _bstr_t UnitString );
__declspec(implementation_key(3917)) _variant_t UnitsOfMeasure::FormatUnit ( int Index, double Dbus, const _variant_t & PrecisionConstant );
__declspec(implementation_key(3918)) ApplicationPtr UnitsOfMeasure::GetApplication ( );
__declspec(implementation_key(3919)) IDispatchPtr UnitsOfMeasure::GetParent ( );
__declspec(implementation_key(3920)) long UnitsOfMeasure::GetCount ( );
__declspec(implementation_key(3921)) UnitOfMeasurePtr UnitsOfMeasure::Item ( const _variant_t & Index );
__declspec(implementation_key(3922)) void variable::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(3923)) _bstr_t variable::GetName ( );
__declspec(implementation_key(3924)) int variable::GetUnitsType ( );
__declspec(implementation_key(3925)) void variable::PutUnitsType ( int _arg1 );
__declspec(implementation_key(3926)) void variable::PutValue ( double _arg1 );
__declspec(implementation_key(3927)) double variable::GetValue ( );
__declspec(implementation_key(3928)) void variable::PutProperties ( int _arg1 );
__declspec(implementation_key(3929)) int variable::GetProperties ( );
__declspec(implementation_key(3930)) void variable::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(3931)) _bstr_t variable::GetFormula ( );
__declspec(implementation_key(3932)) HRESULT variable::SetRange ( _bstr_t LowValue, int Condition, _bstr_t HighValue );
__declspec(implementation_key(3933)) HRESULT variable::GetRange ( BSTR * LowValue, int * Condition, BSTR * HighValue );
__declspec(implementation_key(3934)) HRESULT variable::SetRangeEx ( _bstr_t LowValue, _bstr_t LowLimitVarName, _bstr_t HighValue, _bstr_t HighLimitVarName, int Condition, long bSkipSettingInitialValue );
__declspec(implementation_key(3935)) HRESULT variable::SetValue ( _bstr_t Value );
__declspec(implementation_key(3936)) HRESULT variable::GetValue ( BSTR * Value );
__declspec(implementation_key(3937)) HRESULT variable::Delete ( );
__declspec(implementation_key(3938)) enum ObjectType variable::GetType ( );
__declspec(implementation_key(3939)) void variable::PutVariableTableName ( _bstr_t _arg1 );
__declspec(implementation_key(3940)) _bstr_t variable::GetVariableTableName ( );
__declspec(implementation_key(3941)) void variable::PutExpose ( long _arg1 );
__declspec(implementation_key(3942)) long variable::GetExpose ( );
__declspec(implementation_key(3943)) void variable::PutExposeName ( _bstr_t _arg1 );
__declspec(implementation_key(3944)) _bstr_t variable::GetExposeName ( );
__declspec(implementation_key(3945)) _bstr_t variable::GetDisplayName ( );
__declspec(implementation_key(3946)) _bstr_t variable::GetSystemName ( );
__declspec(implementation_key(3947)) VARIANT_BOOL variable::GetIsSuppressVariable ( );
__declspec(implementation_key(3948)) double variable::GetValueOutOfRange ( );
__declspec(implementation_key(3949)) HRESULT variable::GetDiscreteValues ( SAFEARRAY * * DiscreteValues );
__declspec(implementation_key(3950)) HRESULT variable::SetDiscreteValues ( SAFEARRAY * * DiscreteValues );
__declspec(implementation_key(3951)) HRESULT variable::AddDiscreteValue ( double DiscreteValue );
__declspec(implementation_key(3952)) HRESULT variable::RemoveDiscreteValue ( double DiscreteValue );
__declspec(implementation_key(3953)) HRESULT variable::ClearLimitsOrDiscreteValues ( );
__declspec(implementation_key(3954)) HRESULT variable::AddDiscreteVariables ( SAFEARRAY * * DiscreteVariables );
__declspec(implementation_key(3955)) HRESULT variable::GetDiscreteVariables ( VARIANT * DiscreteVariables, int * numDiscreteVariables );
__declspec(implementation_key(3956)) HRESULT variable::RemoveDiscreteVariables ( SAFEARRAY * * DiscreteVariables );
__declspec(implementation_key(3957)) _bstr_t variable::GetComment ( );
__declspec(implementation_key(3958)) HRESULT variable::SetComment ( _bstr_t Comment );
__declspec(implementation_key(3959)) HRESULT variable::HasExternalLink ( VARIANT_BOOL * bLinked );
__declspec(implementation_key(3960)) HRESULT variable::IsExternalLinkFrozen ( VARIANT_BOOL * bFrozen );
__declspec(implementation_key(3961)) HRESULT variable::GetExternalLinkInfo ( BSTR * SourceVariableName, BSTR * SourceDocumenetName );
__declspec(implementation_key(3962)) HRESULT variable::FreezeExternalLink ( );
__declspec(implementation_key(3963)) HRESULT variable::ThawExternalLink ( );
__declspec(implementation_key(3964)) HRESULT variable::BreakExternalLink ( );
__declspec(implementation_key(3965)) VARIANT_BOOL variable::GetIsReadOnly ( );
__declspec(implementation_key(3966)) enum seVariableTypeConstants variable::GetVariableType ( );
__declspec(implementation_key(3967)) HRESULT variable::GetValueRangeHighValue ( double * pdHighValue );
__declspec(implementation_key(3968)) HRESULT variable::SetValueRangeHighValue ( double dHighValue );
__declspec(implementation_key(3969)) HRESULT variable::GetValueRangeLowValue ( double * pdHighValue );
__declspec(implementation_key(3970)) HRESULT variable::SetValueRangeLowValue ( double dHighValue );
__declspec(implementation_key(3971)) HRESULT variable::SetValueRangeValues ( double LowValue, int Condition, double HighValue );
__declspec(implementation_key(3972)) HRESULT variable::GetValueRangeValues ( double * LowValue, int * Condition, double * HighValue );
__declspec(implementation_key(3973)) HRESULT variable::GetValueDiscreteValues ( SAFEARRAY * * DiscreteValues );
__declspec(implementation_key(3974)) HRESULT variable::SetValueDiscreteValues ( SAFEARRAY * * DiscreteValues );
__declspec(implementation_key(3975)) HRESULT variable::GetValueEx ( double * pdValue, enum seUnitsTypeConstants seUnitsType );
__declspec(implementation_key(3976)) HRESULT variable::SetValueEx ( double dValue, enum seUnitsTypeConstants seUnitsType );
__declspec(implementation_key(3977)) HRESULT variable::GetRangeEx ( BSTR * LowValue, BSTR * LowLimitVarName, BSTR * HighValue, BSTR * HighLimitVarName, int * Condition );
__declspec(implementation_key(3978)) HRESULT variable::HasVariableLimit ( VARIANT_BOOL * bVariableLimit, enum VariableLimitValueConstant * LimitValue );
__declspec(implementation_key(3979)) IDispatchPtr variable::GetAttributeSets ( );
__declspec(implementation_key(3980)) VARIANT_BOOL variable::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(3981)) int VariableList::GetCount ( );
__declspec(implementation_key(3982)) IDispatchPtr VariableList::Item ( const _variant_t & Index );
__declspec(implementation_key(3983)) HRESULT VariableList::Remove ( const _variant_t & Index );
__declspec(implementation_key(3984)) HRESULT VariableList::Add ( const _variant_t & variable );
__declspec(implementation_key(3985)) int Variables::GetCount ( );
__declspec(implementation_key(3986)) IDispatchPtr Variables::Item ( const _variant_t & Index );
__declspec(implementation_key(3987)) IDispatchPtr Variables::GetApplication ( );
__declspec(implementation_key(3988)) IDispatchPtr Variables::GetParent ( );
__declspec(implementation_key(3989)) IDispatchPtr Variables::Add ( _bstr_t pName, _bstr_t pFormula, const _variant_t & UnitsType );
__declspec(implementation_key(3990)) IDispatchPtr Variables::AddFromClipboard ( _bstr_t pName, const _variant_t & UnitsType );
__declspec(implementation_key(3991)) HRESULT Variables::Edit ( _bstr_t pName, _bstr_t pFormula );
__declspec(implementation_key(3992)) HRESULT Variables::EditFromClipboard ( _bstr_t pName );
__declspec(implementation_key(3993)) HRESULT Variables::PutName ( IDispatch * pVariable, _bstr_t pName );
__declspec(implementation_key(3994)) _bstr_t Variables::GetName ( IDispatch * pVariable );
__declspec(implementation_key(3995)) IDispatchPtr Variables::Translate ( _bstr_t pName );
__declspec(implementation_key(3996)) IDispatchPtr Variables::Query ( _bstr_t pFindCriterium, const _variant_t & NamedBy, const _variant_t & VarType, const _variant_t & CaseInsensitive );
__declspec(implementation_key(3997)) _bstr_t Variables::GetFormula ( _bstr_t wcpName );
__declspec(implementation_key(3998)) _bstr_t Variables::GetDisplayName ( IDispatch * pVariable );
__declspec(implementation_key(3999)) _bstr_t Variables::GetSystemName ( IDispatch * pVariable );
__declspec(implementation_key(4000)) HRESULT Variables::CopyToClipboard ( _bstr_t bsName );
__declspec(implementation_key(4001)) HRESULT InterpartLink::IsFrozen ( VARIANT_BOOL * bFrozen );
__declspec(implementation_key(4002)) HRESULT InterpartLink::GetInfo ( BSTR * SourceFeatureName, BSTR * SourceDocumenetName );
__declspec(implementation_key(4003)) HRESULT InterpartLink::Freeze ( );
__declspec(implementation_key(4004)) HRESULT InterpartLink::Thaw ( );
__declspec(implementation_key(4005)) HRESULT InterpartLink::BreakLink ( );
__declspec(implementation_key(4006)) int InterpartLinks::GetCount ( );
__declspec(implementation_key(4007)) IDispatchPtr InterpartLinks::Item ( const _variant_t & Index );
__declspec(implementation_key(4008)) IDispatchPtr InterpartLinks::GetApplication ( );
__declspec(implementation_key(4009)) IDispatchPtr InterpartLinks::GetParent ( );
__declspec(implementation_key(4010)) enum SensorTypeConstants Sensor::GetSensorType ( );
__declspec(implementation_key(4011)) enum SensorStatusConstants Sensor::GetStatus ( );
__declspec(implementation_key(4012)) VARIANT_BOOL Sensor::GetIsInRange ( );
__declspec(implementation_key(4013)) double Sensor::GetCurrentValue ( );
__declspec(implementation_key(4014)) void Sensor::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(4015)) _bstr_t Sensor::GetName ( );
__declspec(implementation_key(4016)) void Sensor::PutDescription ( _bstr_t _arg1 );
__declspec(implementation_key(4017)) _bstr_t Sensor::GetDescription ( );
__declspec(implementation_key(4018)) void Sensor::PutLowerRange ( double _arg1 );
__declspec(implementation_key(4019)) double Sensor::GetLowerRange ( );
__declspec(implementation_key(4020)) void Sensor::PutUpperRange ( double _arg1 );
__declspec(implementation_key(4021)) double Sensor::GetUpperRange ( );
__declspec(implementation_key(4022)) void Sensor::PutOperator ( enum SensorOperatorConstants _arg1 );
__declspec(implementation_key(4023)) enum SensorOperatorConstants Sensor::GetOperator ( );
__declspec(implementation_key(4024)) void Sensor::PutMinimumThreshold ( double _arg1 );
__declspec(implementation_key(4025)) double Sensor::GetMinimumThreshold ( );
__declspec(implementation_key(4026)) void Sensor::PutMaximumThreshold ( double _arg1 );
__declspec(implementation_key(4027)) double Sensor::GetMaximumThreshold ( );
__declspec(implementation_key(4028)) void Sensor::PutDisplayType ( enum SensorDisplayTypeConstants _arg1 );
__declspec(implementation_key(4029)) enum SensorDisplayTypeConstants Sensor::GetDisplayType ( );
__declspec(implementation_key(4030)) void Sensor::PutUpdateMechanism ( enum SensorUpdateMechanismConstants _arg1 );
__declspec(implementation_key(4031)) enum SensorUpdateMechanismConstants Sensor::GetUpdateMechanism ( );
__declspec(implementation_key(4032)) HRESULT Sensor::Update ( );
__declspec(implementation_key(4033)) HRESULT Sensor::Delete ( );
__declspec(implementation_key(4034)) IDispatchPtr Sensor::GetAttributeSets ( );
__declspec(implementation_key(4035)) VARIANT_BOOL Sensor::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(4036)) int Sensors::GetCount ( );
__declspec(implementation_key(4037)) IDispatchPtr Sensors::Item ( const _variant_t & Index );
__declspec(implementation_key(4038)) IDispatchPtr Sensors::GetApplication ( );
__declspec(implementation_key(4039)) IDispatchPtr Sensors::GetParent ( );
__declspec(implementation_key(4040)) IDispatchPtr Sensors::AddVariableSensor ( IDispatch * variable, _bstr_t Name, _bstr_t Description, double LowerRange, double UpperRange, double MinimumThreshold, double MaximumThreshold, enum SensorOperatorConstants Operator, enum SensorDisplayTypeConstants DisplayType, enum SensorUpdateMechanismConstants UpdateMechanism );
__declspec(implementation_key(4041)) IDispatchPtr Sensors::AddMinimumDistanceSensor ( IDispatch * Element1, IDispatch * Element2, _bstr_t Name, _bstr_t Description, double LowerRange, double UpperRange, double MinimumThreshold, double MaximumThreshold, enum SensorOperatorConstants Operator, enum SensorDisplayTypeConstants DisplayType, enum SensorUpdateMechanismConstants UpdateMechanism );
__declspec(implementation_key(4042)) IDispatchPtr Sensors::AddSurfaceAreaSensor ( enum SurfaceAreaSensorAreaTypeConstants iSensorType, enum SurfaceAreaSensorSelectionTypeConstants iSelectionType, _bstr_t Name, _bstr_t Description, double LowerRange, double UpperRange, double MinimumThreshold, double MaximumThreshold, enum SensorOperatorConstants Operator, enum SensorDisplayTypeConstants DisplayType, enum SensorUpdateMechanismConstants UpdateMechanism, VARIANT * Element );
__declspec(implementation_key(4043)) int SheetMetalSensors::GetCount ( );
__declspec(implementation_key(4044)) IDispatchPtr SheetMetalSensors::Item ( const _variant_t & Index );
__declspec(implementation_key(4045)) IDispatchPtr SheetMetalSensors::GetApplication ( );
__declspec(implementation_key(4046)) IDispatchPtr SheetMetalSensors::GetParent ( );
__declspec(implementation_key(4047)) IDispatchPtr SheetMetalSensors::AddVariableSensor ( IDispatch * variable, _bstr_t Name, _bstr_t Description, double LowerRange, double UpperRange, double MinimumThreshold, double MaximumThreshold, enum SensorOperatorConstants Operator, enum SensorDisplayTypeConstants DisplayType, enum SensorUpdateMechanismConstants UpdateMechanism );
__declspec(implementation_key(4048)) IDispatchPtr SheetMetalSensors::AddMinimumDistanceSensor ( IDispatch * Element1, IDispatch * Element2, _bstr_t Name, _bstr_t Description, double LowerRange, double UpperRange, double MinimumThreshold, double MaximumThreshold, enum SensorOperatorConstants Operator, enum SensorDisplayTypeConstants DisplayType, enum SensorUpdateMechanismConstants UpdateMechanism );
__declspec(implementation_key(4049)) IDispatchPtr SheetMetalSensors::AddSheetMetalCheckerSensor ( enum SheetMetalSensorFeatureTypeConstants LeftFeatureType, enum SheetMetalSensorFeatureTypeConstants RightFeatureType, _bstr_t Name, _bstr_t Description, double Threshold, enum SensorUpdateMechanismConstants UpdateMechanism, VARIANT * Element );
__declspec(implementation_key(4050)) IDispatchPtr SheetMetalSensors::AddSurfaceAreaSensor ( enum SurfaceAreaSensorAreaTypeConstants iSensorType, enum SurfaceAreaSensorSelectionTypeConstants iSelectionType, _bstr_t Name, _bstr_t Description, double LowerRange, double UpperRange, double MinimumThreshold, double MaximumThreshold, enum SensorOperatorConstants Operator, enum SensorDisplayTypeConstants DisplayType, enum SensorUpdateMechanismConstants UpdateMechanism, VARIANT * Element );
__declspec(implementation_key(4051)) LayerPtr Layers::Item ( const _variant_t & Index );
__declspec(implementation_key(4052)) ApplicationPtr Layers::GetApplication ( );
__declspec(implementation_key(4053)) IDispatchPtr Layers::GetParent ( );
__declspec(implementation_key(4054)) long Layers::GetCount ( );
__declspec(implementation_key(4055)) LayerPtr Layers::Add ( _bstr_t Name );
__declspec(implementation_key(4056)) LayerPtr Layers::GetActiveLayer ( );
__declspec(implementation_key(4057)) long DashStyles::GetCount ( );
__declspec(implementation_key(4058)) IDispatchPtr DashStyles::GetParent ( );
__declspec(implementation_key(4059)) IDispatchPtr DashStyles::GetApplication ( );
__declspec(implementation_key(4060)) DashStylePtr DashStyles::Item ( const _variant_t & Index );
__declspec(implementation_key(4061)) DashStylePtr DashStyles::Add ( _bstr_t Name );
__declspec(implementation_key(4062)) HRESULT DashStyles::Remove ( _bstr_t Name );
__declspec(implementation_key(4063)) long LinearStyles::GetCount ( );
__declspec(implementation_key(4064)) IDispatchPtr LinearStyles::GetParent ( );
__declspec(implementation_key(4065)) IDispatchPtr LinearStyles::GetApplication ( );
__declspec(implementation_key(4066)) LinearStylePtr LinearStyles::Item ( const _variant_t & Index );
__declspec(implementation_key(4067)) LinearStylePtr LinearStyles::Add ( _bstr_t Name, _bstr_t Parent );
__declspec(implementation_key(4068)) HRESULT LinearStyles::Remove ( _bstr_t Name );
__declspec(implementation_key(4069)) _bstr_t LinearStyles::GetActive ( );
__declspec(implementation_key(4070)) void LinearStyles::PutActive ( _bstr_t _arg1 );
__declspec(implementation_key(4071)) long FillStyles::GetCount ( );
__declspec(implementation_key(4072)) IDispatchPtr FillStyles::GetParent ( );
__declspec(implementation_key(4073)) IDispatchPtr FillStyles::GetApplication ( );
__declspec(implementation_key(4074)) FillStylePtr FillStyles::Item ( const _variant_t & Index );
__declspec(implementation_key(4075)) FillStylePtr FillStyles::Add ( _bstr_t Name, _bstr_t Parent );
__declspec(implementation_key(4076)) HRESULT FillStyles::Remove ( _bstr_t Name );
__declspec(implementation_key(4077)) void FillStyles::PutActive ( _bstr_t _arg1 );
__declspec(implementation_key(4078)) _bstr_t FillStyles::GetActive ( );
__declspec(implementation_key(4079)) long HatchPatternStyles::GetCount ( );
__declspec(implementation_key(4080)) IDispatchPtr HatchPatternStyles::GetParent ( );
__declspec(implementation_key(4081)) IDispatchPtr HatchPatternStyles::GetApplication ( );
__declspec(implementation_key(4082)) HatchPatternStylePtr HatchPatternStyles::Item ( const _variant_t & Index );
__declspec(implementation_key(4083)) HatchPatternStylePtr HatchPatternStyles::Add ( _bstr_t Name, _bstr_t Parent );
__declspec(implementation_key(4084)) HRESULT HatchPatternStyles::Remove ( _bstr_t Name );
__declspec(implementation_key(4085)) IDispatchPtr FaceStyles::Item ( const _variant_t & Index );
__declspec(implementation_key(4086)) IDispatchPtr FaceStyles::GetApplication ( );
__declspec(implementation_key(4087)) long FaceStyles::GetCount ( );
__declspec(implementation_key(4088)) IDispatchPtr FaceStyles::GetParent ( );
__declspec(implementation_key(4089)) FaceStylePtr FaceStyles::Add ( _bstr_t Name, _bstr_t Parent );
__declspec(implementation_key(4090)) HRESULT FaceStyles::Remove ( _bstr_t Name );
__declspec(implementation_key(4091)) IDispatchPtr FaceStyles::GetStyleByID ( long StyleID );
__declspec(implementation_key(4092)) long TextStyles::GetCount ( );
__declspec(implementation_key(4093)) IDispatchPtr TextStyles::GetParent ( );
__declspec(implementation_key(4094)) IDispatchPtr TextStyles::GetApplication ( );
__declspec(implementation_key(4095)) TextStylePtr TextStyles::Item ( const _variant_t & Index );
__declspec(implementation_key(4096)) TextStylePtr TextStyles::Add ( _bstr_t Name, _bstr_t Parent );
__declspec(implementation_key(4097)) HRESULT TextStyles::Remove ( _bstr_t Name );
__declspec(implementation_key(4098)) _bstr_t TextStyles::GetActive ( );
__declspec(implementation_key(4099)) void TextStyles::PutActive ( _bstr_t _arg1 );
__declspec(implementation_key(4100)) long TextCharStyles::GetCount ( );
__declspec(implementation_key(4101)) IDispatchPtr TextCharStyles::GetParent ( );
__declspec(implementation_key(4102)) IDispatchPtr TextCharStyles::GetApplication ( );
__declspec(implementation_key(4103)) TextCharStylePtr TextCharStyles::Item ( const _variant_t & Index );
__declspec(implementation_key(4104)) TextCharStylePtr TextCharStyles::Add ( _bstr_t Name, _bstr_t Parent );
__declspec(implementation_key(4105)) HRESULT TextCharStyles::Remove ( _bstr_t Name );
__declspec(implementation_key(4106)) IDispatchPtr Symbols::GetApplication ( );
__declspec(implementation_key(4107)) long Symbols::GetCount ( );
__declspec(implementation_key(4108)) IDispatchPtr Symbols::GetParent ( );
__declspec(implementation_key(4109)) IDispatchPtr Symbols::Item ( const _variant_t & Index );
__declspec(implementation_key(4110)) Symbol2dPtr Symbols::Add ( long insertionType, _bstr_t filePath, double x, double y, const _variant_t & z );
__declspec(implementation_key(4111)) HRESULT Symbols::InsertSymbolAsGeometry ( _bstr_t filePath, double dOriginX, double dOriginY );
__declspec(implementation_key(4112)) ViewStylePtr ViewStyles::Item ( const _variant_t & Index );
__declspec(implementation_key(4113)) IDispatchPtr ViewStyles::GetApplication ( );
__declspec(implementation_key(4114)) long ViewStyles::GetCount ( );
__declspec(implementation_key(4115)) IDispatchPtr ViewStyles::GetParent ( );
__declspec(implementation_key(4116)) ViewStylePtr ViewStyles::Add ( _bstr_t Name, _bstr_t Parent );
__declspec(implementation_key(4117)) HRESULT ViewStyles::Remove ( _bstr_t Name );
__declspec(implementation_key(4118)) IDispatchPtr ViewStyles::GetStyleByID ( long StyleID );
__declspec(implementation_key(4119)) ViewStylePtr ViewStyles::AddFromFile ( _bstr_t Filename, _bstr_t StyleName );
__declspec(implementation_key(4120)) IDispatchPtr Reference::GetApplication ( );
__declspec(implementation_key(4121)) IDispatchPtr Reference::GetObject ( );
__declspec(implementation_key(4122)) IDispatchPtr Reference::GetParent ( );
__declspec(implementation_key(4123)) enum ObjectType Reference::GetType ( );
__declspec(implementation_key(4124)) HRESULT Reference::GetMatrix ( SAFEARRAY * * Matrix );
__declspec(implementation_key(4125)) IDispatchPtr Reference::GetAttributeSets ( );
__declspec(implementation_key(4126)) VARIANT_BOOL Reference::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(4127)) IDispatchPtr Reference::GetImmediateParent ( );
__declspec(implementation_key(4128)) _bstr_t Reference::GetStyle ( );
__declspec(implementation_key(4129)) void Reference::PutStyle ( _bstr_t _arg1 );
__declspec(implementation_key(4130)) HRESULT Reference::GetOccurrencesInPath ( IDispatch * * TopOccurrence, long * NumSubOccurrencesInPath, long * NumBoundSubOccurrencesInPath, SAFEARRAY * * BoundSubOccurrencesInPath );
__declspec(implementation_key(4131)) void RoutingSlip::PutSubject ( _bstr_t _arg1 );
__declspec(implementation_key(4132)) _bstr_t RoutingSlip::GetSubject ( );
__declspec(implementation_key(4133)) void RoutingSlip::PutReturnWhenDone ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4134)) VARIANT_BOOL RoutingSlip::GetReturnWhenDone ( );
__declspec(implementation_key(4135)) void RoutingSlip::PutMessage ( _bstr_t _arg1 );
__declspec(implementation_key(4136)) _bstr_t RoutingSlip::GetMessage ( );
__declspec(implementation_key(4137)) void RoutingSlip::PutRecipients ( const _variant_t & _arg1 );
__declspec(implementation_key(4138)) void RoutingSlip::PutDelivery ( enum RouteType _arg1 );
__declspec(implementation_key(4139)) enum RouteType RoutingSlip::GetDelivery ( );
__declspec(implementation_key(4140)) enum RouteStatus RoutingSlip::GetStatus ( );
__declspec(implementation_key(4141)) VARIANT_BOOL RoutingSlip::GetHasRouted ( );
__declspec(implementation_key(4142)) IDispatchPtr RoutingSlip::GetApplication ( );
__declspec(implementation_key(4143)) IDispatchPtr RoutingSlip::GetParent ( );
__declspec(implementation_key(4144)) void RoutingSlip::PutTrackStatus ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4145)) VARIANT_BOOL RoutingSlip::GetTrackStatus ( );
__declspec(implementation_key(4146)) void RoutingSlip::PutAskForApproval ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4147)) VARIANT_BOOL RoutingSlip::GetAskForApproval ( );
__declspec(implementation_key(4148)) void RoutingSlip::PutApprove ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4149)) VARIANT_BOOL RoutingSlip::GetApprove ( );
__declspec(implementation_key(4150)) VARIANT_BOOL RoutingSlip::GetApproved ( );
__declspec(implementation_key(4151)) VARIANT_BOOL RoutingSlip::GetRouteInfo ( );
__declspec(implementation_key(4152)) HRESULT RoutingSlip::AddRecipient ( _bstr_t bsRecip );
__declspec(implementation_key(4153)) HRESULT RoutingSlip::Route ( const _variant_t & ConfirmRoute );
__declspec(implementation_key(4154)) HRESULT RoutingSlip::Reset ( );
__declspec(implementation_key(4155)) IDispatchPtr RoutingSlip::GetAttributeSets ( );
__declspec(implementation_key(4156)) VARIANT_BOOL RoutingSlip::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(4157)) IDispatchPtr SymbolProperties::GetApplication ( );
__declspec(implementation_key(4158)) IDispatchPtr SymbolProperties::GetParent ( );
__declspec(implementation_key(4159)) IDispatchPtr SymbolProperties::GetSymbol ( );
__declspec(implementation_key(4160)) IDispatchPtr SymbolProperties::GetAttributeSets ( );
__declspec(implementation_key(4161)) VARIANT_BOOL SymbolProperties::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(4162)) long PropertySets::GetCount ( );
__declspec(implementation_key(4163)) IDispatchPtr PropertySets::GetParent ( );
__declspec(implementation_key(4164)) ApplicationPtr PropertySets::GetApplication ( );
__declspec(implementation_key(4165)) PropertiesPtr PropertySets::Item ( const _variant_t & vIndex );
__declspec(implementation_key(4166)) HRESULT PropertySets::Save ( );
__declspec(implementation_key(4167)) _bstr_t PropertyEx::GetName ( );
__declspec(implementation_key(4168)) _variant_t PropertyEx::GetValue ( );
__declspec(implementation_key(4169)) void PropertyEx::PutValue ( VARIANT * _arg1 );
__declspec(implementation_key(4170)) _variant_t PropertyEx::GetType ( );
__declspec(implementation_key(4171)) HRESULT PropertyEx::Delete ( );
__declspec(implementation_key(4172)) _variant_t PropertyEx::Id ( );
__declspec(implementation_key(4173)) HRESULT PropertyEx::GetProps ( BSTR * bstName, VARIANT * Value, VARIANT * Type );
__declspec(implementation_key(4174)) _variant_t SummaryInfo::GetAccessDate ( );
__declspec(implementation_key(4175)) ApplicationPtr SummaryInfo::GetApplication ( );
__declspec(implementation_key(4176)) _bstr_t SummaryInfo::GetAuthor ( );
__declspec(implementation_key(4177)) void SummaryInfo::PutAuthor ( _bstr_t _arg1 );
__declspec(implementation_key(4178)) _bstr_t SummaryInfo::GetCategory ( );
__declspec(implementation_key(4179)) void SummaryInfo::PutCategory ( _bstr_t _arg1 );
__declspec(implementation_key(4180)) _bstr_t SummaryInfo::GetComments ( );
__declspec(implementation_key(4181)) void SummaryInfo::PutComments ( _bstr_t _arg1 );
__declspec(implementation_key(4182)) _bstr_t SummaryInfo::GetCompany ( );
__declspec(implementation_key(4183)) void SummaryInfo::PutCompany ( _bstr_t _arg1 );
__declspec(implementation_key(4184)) _bstr_t SummaryInfo::GetCreateApp ( );
__declspec(implementation_key(4185)) void SummaryInfo::PutCreateApp ( _bstr_t _arg1 );
__declspec(implementation_key(4186)) _variant_t SummaryInfo::GetCreateDate ( );
__declspec(implementation_key(4187)) long SummaryInfo::GetCreationLocale ( );
__declspec(implementation_key(4188)) _bstr_t SummaryInfo::GetDocumentNumber ( );
__declspec(implementation_key(4189)) void SummaryInfo::PutDocumentNumber ( _bstr_t _arg1 );
__declspec(implementation_key(4190)) _bstr_t SummaryInfo::GetKeywords ( );
__declspec(implementation_key(4191)) void SummaryInfo::PutKeywords ( _bstr_t _arg1 );
__declspec(implementation_key(4192)) _bstr_t SummaryInfo::GetLastSavedBy ( );
__declspec(implementation_key(4193)) void SummaryInfo::PutLastSavedBy ( _bstr_t _arg1 );
__declspec(implementation_key(4194)) _bstr_t SummaryInfo::GetManager ( );
__declspec(implementation_key(4195)) void SummaryInfo::PutManager ( _bstr_t _arg1 );
__declspec(implementation_key(4196)) IDispatchPtr SummaryInfo::GetParent ( );
__declspec(implementation_key(4197)) _bstr_t SummaryInfo::GetProjectName ( );
__declspec(implementation_key(4198)) void SummaryInfo::PutProjectName ( _bstr_t _arg1 );
__declspec(implementation_key(4199)) _bstr_t SummaryInfo::GetRevisionNumber ( );
__declspec(implementation_key(4200)) void SummaryInfo::PutRevisionNumber ( _bstr_t _arg1 );
__declspec(implementation_key(4201)) _bstr_t SummaryInfo::GetSaveApp ( );
__declspec(implementation_key(4202)) void SummaryInfo::PutSaveApp ( _bstr_t _arg1 );
__declspec(implementation_key(4203)) _variant_t SummaryInfo::GetSaveDate ( );
__declspec(implementation_key(4204)) _bstr_t SummaryInfo::GetSubject ( );
__declspec(implementation_key(4205)) void SummaryInfo::PutSubject ( _bstr_t _arg1 );
__declspec(implementation_key(4206)) _bstr_t SummaryInfo::GetTemplate ( );
__declspec(implementation_key(4207)) void SummaryInfo::PutTemplate ( _bstr_t _arg1 );
__declspec(implementation_key(4208)) _bstr_t SummaryInfo::GetTitle ( );
__declspec(implementation_key(4209)) void SummaryInfo::PutTitle ( _bstr_t _arg1 );
__declspec(implementation_key(4210)) _bstr_t SummaryInfo::GetTotalEdits ( );
__declspec(implementation_key(4211)) void SummaryInfo::PutTotalEdits ( _bstr_t _arg1 );
__declspec(implementation_key(4212)) QueryObjectsPtr AttributeQuery::QueryByName ( const _variant_t & AttributeSetName, const _variant_t & AttributeName );
__declspec(implementation_key(4213)) ApplicationPtr AttributeQuery::GetApplication ( );
__declspec(implementation_key(4214)) IDispatchPtr AttributeQuery::GetParent ( );
__declspec(implementation_key(4215)) ApplicationPtr HighlightSets::GetApplication ( );
__declspec(implementation_key(4216)) IDispatchPtr HighlightSets::GetParent ( );
__declspec(implementation_key(4217)) long HighlightSets::GetCount ( );
__declspec(implementation_key(4218)) HighlightSetPtr HighlightSets::Item ( const _variant_t & Index );
__declspec(implementation_key(4219)) HighlightSetPtr HighlightSets::Add ( );
__declspec(implementation_key(4220)) ApplicationPtr SEGenericCollection::GetApplication ( );
__declspec(implementation_key(4221)) IDispatchPtr SEGenericCollection::GetParent ( );
__declspec(implementation_key(4222)) long SEGenericCollection::GetCount ( );
__declspec(implementation_key(4223)) IDispatchPtr SEGenericCollection::Item ( const _variant_t & Index );
__declspec(implementation_key(4224)) long AttributeSets::GetCount ( );
__declspec(implementation_key(4225)) AttributeSetPtr AttributeSets::Item ( const _variant_t & Index );
__declspec(implementation_key(4226)) AttributeSetPtr AttributeSets::Add ( _bstr_t Name );
__declspec(implementation_key(4227)) HRESULT AttributeSets::Remove ( _bstr_t Name );
__declspec(implementation_key(4228)) HRESULT SolidEdgeDocument::Activate ( );
__declspec(implementation_key(4229)) ApplicationPtr SolidEdgeDocument::GetApplication ( );
__declspec(implementation_key(4230)) HRESULT SolidEdgeDocument::Close ( const _variant_t & SaveChanges, const _variant_t & Filename, const _variant_t & RouteWorkbook );
__declspec(implementation_key(4231)) _bstr_t SolidEdgeDocument::GetFullName ( );
__declspec(implementation_key(4232)) _bstr_t SolidEdgeDocument::GetName ( );
__declspec(implementation_key(4233)) ApplicationPtr SolidEdgeDocument::GetParent ( );
__declspec(implementation_key(4234)) _bstr_t SolidEdgeDocument::GetPath ( );
__declspec(implementation_key(4235)) HRESULT SolidEdgeDocument::PrintOut ( const _variant_t & Printer, const _variant_t & NumCopies, const _variant_t & Orientation, const _variant_t & PaperSize, const _variant_t & Scale, const _variant_t & PrintToFile, const _variant_t & OutputFileName, const _variant_t & PrintRange, const _variant_t & Sheets, const _variant_t & ColorAsBlack, const _variant_t & Collate );
__declspec(implementation_key(4236)) VARIANT_BOOL SolidEdgeDocument::GetReadOnly ( );
__declspec(implementation_key(4237)) IDispatchPtr SolidEdgeDocument::GetRoutingSlip ( );
__declspec(implementation_key(4238)) HRESULT SolidEdgeDocument::Save ( );
__declspec(implementation_key(4239)) HRESULT SolidEdgeDocument::SaveAs ( _bstr_t NewName, const _variant_t & IsATemplate, const _variant_t & FileFormat, const _variant_t & ReadOnlyEnforced, const _variant_t & ReadOnlyRecommended, const _variant_t & newstatus, const _variant_t & CreateBackup, const _variant_t & UpdateLinkInContainer, const _variant_t & UpdateAllLinksInContainer );
__declspec(implementation_key(4240)) HRESULT SolidEdgeDocument::SaveCopyAs ( _bstr_t Name );
__declspec(implementation_key(4241)) HRESULT SolidEdgeDocument::SaveAsJT ( _bstr_t NewName, const _variant_t & Include_PreciseGeom, const _variant_t & Prod_Structure_Option, const _variant_t & Export_PMI, const _variant_t & Export_CoordinateSystem, const _variant_t & Export_3DBodies, const _variant_t & NumberofLODs, const _variant_t & JTFileUnit, const _variant_t & Write_Which_Files, const _variant_t & Use_Simplified_TopAsm, const _variant_t & Use_Simplified_SubAsm, const _variant_t & Use_Simplified_Part, const _variant_t & EnableDefaultOutputPath, const _variant_t & IncludeSEProperties, const _variant_t & Export_VisiblePartsOnly, const _variant_t & Export_VisibleConstructionsOnly, const _variant_t & RemoveUnsafeCharacters, const _variant_t & ExportSEPartFileAsSingleJTFile );
__declspec(implementation_key(4242)) _bstr_t SolidEdgeDocument::SaveAsBIDM ( _bstr_t filePath, _bstr_t DocumentNumber, _bstr_t Revision, _bstr_t Title );
__declspec(implementation_key(4243)) _bstr_t SolidEdgeDocument::ReviseBIDM ( _bstr_t filePath, _bstr_t Revision, _bstr_t Title );
__declspec(implementation_key(4244)) SelectSetPtr SolidEdgeDocument::GetSelectSet ( );
__declspec(implementation_key(4245)) HRESULT SolidEdgeDocument::SendMail ( const _variant_t & Recipients, const _variant_t & Subject, const _variant_t & ReturnReceipt );
__declspec(implementation_key(4246)) IDispatchPtr SolidEdgeDocument::GetSummaryInfo ( );
__declspec(implementation_key(4247)) WindowsPtr SolidEdgeDocument::GetWindows ( );
__declspec(implementation_key(4248)) IDispatchPtr SolidEdgeDocument::GetProperties ( );
__declspec(implementation_key(4249)) VARIANT_BOOL SolidEdgeDocument::GetIsTemplate ( );
__declspec(implementation_key(4250)) void SolidEdgeDocument::PutIsTemplate ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4251)) enum DocumentStatus SolidEdgeDocument::GetStatus ( );
__declspec(implementation_key(4252)) void SolidEdgeDocument::PutStatus ( enum DocumentStatus _arg1 );
__declspec(implementation_key(4253)) HRESULT SolidEdgeDocument::EditProperties ( );
__declspec(implementation_key(4254)) UnitsOfMeasurePtr SolidEdgeDocument::GetUnitsOfMeasure ( );
__declspec(implementation_key(4255)) IDispatchPtr SolidEdgeDocument::GetActiveSketch ( );
__declspec(implementation_key(4256)) enum DocumentTypeConstants SolidEdgeDocument::GetType ( );
__declspec(implementation_key(4257)) IUnknownPtr SolidEdgeDocument::GetDocumentEvents ( );
__declspec(implementation_key(4258)) IUnknownPtr SolidEdgeDocument::GetRootStorage ( );
__declspec(implementation_key(4259)) IUnknownPtr SolidEdgeDocument::GetAddInsStorage ( _bstr_t Name, long grfMode );
__declspec(implementation_key(4260)) VARIANT_BOOL SolidEdgeDocument::GetDirty ( );
__declspec(implementation_key(4261)) void SolidEdgeDocument::PutDirty ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4262)) AttributeQueryPtr SolidEdgeDocument::GetAttributeQuery ( );
__declspec(implementation_key(4263)) _bstr_t SolidEdgeDocument::GetCreatedVersion ( );
__declspec(implementation_key(4264)) _bstr_t SolidEdgeDocument::GetLastSavedVersion ( );
__declspec(implementation_key(4265)) HighlightSetsPtr SolidEdgeDocument::GetHighlightSets ( );
__declspec(implementation_key(4266)) VARIANT_BOOL SolidEdgeDocument::GetInPlaceActivated ( );
__declspec(implementation_key(4267)) HRESULT SolidEdgeDocument::SeekWriteAccess ( VARIANT_BOOL * WriteAccess );
__declspec(implementation_key(4268)) long SolidEdgeDocument::GetUndoSteps ( );
__declspec(implementation_key(4269)) void SolidEdgeDocument::PutUndoSteps ( long _arg1 );
__declspec(implementation_key(4270)) HRESULT SolidEdgeDocument::CreatePreview ( );
__declspec(implementation_key(4271)) void SolidEdgeDocument::PutReadOnly ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4272)) HRESULT SolidEdgeDocument::SeekReadOnlyAccess ( VARIANT_BOOL * ReadOnlyAccess );
__declspec(implementation_key(4273)) HRESULT SolidEdgeDocument::ImportStyles2 ( enum seStyleTypeConstants StyleType, VARIANT_BOOL bReplace, IDispatch * pSrcDocument );
__declspec(implementation_key(4274)) VARIANT_BOOL SolidEdgeDocument::GetIsInsightFile ( );
__declspec(implementation_key(4275)) NamedViewsPtr SolidEdgeDocument::GetNamedViews ( );
__declspec(implementation_key(4276)) HRESULT SolidEdgeDocument::GetRegisteredCustomPropertiesBiDM ( VARIANT * varPropInfo );
__declspec(implementation_key(4277)) _bstr_t SolidEdgeDocument::SaveAsWithCustomPropertiesBIDM ( _bstr_t filePath, _bstr_t DocumentNumber, _bstr_t Revision, _bstr_t Title, const _variant_t & varPropInfo );
__declspec(implementation_key(4278)) _bstr_t SolidEdgeDocument::ReviseWithCustomPropertiesBIDM ( _bstr_t filePath, _bstr_t Revision, _bstr_t Title, const _variant_t & varPropInfo );
__declspec(implementation_key(4279)) HRESULT SolidEdgeDocument::SaveAsPRC ( _bstr_t Filename );
__declspec(implementation_key(4280)) IDispatchPtr SolidEdgeDocument::GetVariables ( );
__declspec(implementation_key(4281)) _variant_t SolidEdgeDocument::NewWindow ( const _variant_t & NewWindowOptions, const _variant_t & Environment );
__declspec(implementation_key(4282)) IDispatchPtr SolidEdgeDocument::GetBlocks ( );
__declspec(implementation_key(4283)) void SolidEdgeDocument::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(4284)) HRESULT SolidEdgeDocument::SaveAs3DPrint ( _bstr_t filePath, long NumberOfCoordinates, SAFEARRAY * * PositionArray, long NumberOfNormals, SAFEARRAY * * NormalArray, long NumberofColors, SAFEARRAY * * colorArray, long NumberofIndices, SAFEARRAY * * Indexarray, long NumberOfFaces, SAFEARRAY * * FaceArray );
__declspec(implementation_key(4285)) HRESULT SolidEdgeDocument::SaveAsPLMXML ( _bstr_t bstrPLMXMLFilePath, _bstr_t bstrPLMXMLINIFilePath );
__declspec(implementation_key(4286)) PredefineRelationProducerPtr SolidEdgeDocument::GetGetPredefineRelationProducer ( );
__declspec(implementation_key(4287)) HRESULT SolidEdgeDocument::TGCopyFileByPackFunc ( _bstr_t bsDest );
__declspec(implementation_key(4288)) HRESULT SolidEdgeDocument::TGSaveAsLib ( _bstr_t filePath );
__declspec(implementation_key(4289)) HRESULT SolidEdgeDocument::TGSaveVaribalesInJson ( _bstr_t filePath );
__declspec(implementation_key(4290)) int PredefineRelationProducer::GroupCount ( );
__declspec(implementation_key(4291)) int PredefineRelationProducer::MagneticGroupCount ( );
__declspec(implementation_key(4292)) VARIANT_BOOL PredefineRelationProducer::HasAssemblyCaptureFitRelation ( );
__declspec(implementation_key(4293)) unsigned int PredefineRelationProducer::AddPredefineRelationGroup ( _bstr_t bstrGroupName, enum PredefineRelationGroupPolarityConstants ePolarity, VARIANT_BOOL bSetDefault );
__declspec(implementation_key(4294)) void PredefineRelationProducer::PutDefaultGroup ( unsigned int _arg1 );
__declspec(implementation_key(4295)) unsigned int PredefineRelationProducer::GetDefaultGroup ( );
__declspec(implementation_key(4296)) HRESULT PredefineRelationProducer::SetCaptureFitDefault ( VARIANT_BOOL bCaptureFitDefault );
__declspec(implementation_key(4297)) HRESULT PredefineRelationProducer::ClearDefault ( );
__declspec(implementation_key(4298)) HRESULT PredefineRelationProducer::SetGroupName ( unsigned int nGroupId, _bstr_t bstrGroupName );
__declspec(implementation_key(4299)) _bstr_t PredefineRelationProducer::GetGroupName ( unsigned int nGroupId );
__declspec(implementation_key(4300)) HRESULT PredefineRelationProducer::SetGroupPolarity ( unsigned int nGroupId, enum PredefineRelationGroupPolarityConstants ePolarity );
__declspec(implementation_key(4301)) enum PredefineRelationGroupPolarityConstants PredefineRelationProducer::GetGroupPolarity ( unsigned int nGroupId );
__declspec(implementation_key(4302)) int PredefineRelationProducer::GetRelationCount ( unsigned int nGroupId );
__declspec(implementation_key(4303)) int PredefineRelationProducer::GetCaptureFitRelationCount ( );
__declspec(implementation_key(4304)) HRESULT PredefineRelationProducer::DeleteGroups ( int numDeleteGroups, unsigned int * pnDeleteGroupIds );
__declspec(implementation_key(4305)) HRESULT PredefineRelationProducer::GetRelationData ( unsigned int nGroupId, int nRelationIndex, IDispatch * * ppElement, enum CapturedRelationshipTypeConstants * pRelationType, enum CapturedRelationshipOffsetTypeConstants * pOffsetType, double * pdOffsetOne, double * pdOffsetTwo );
__declspec(implementation_key(4306)) HRESULT PredefineRelationProducer::SetRelationData ( unsigned int nGroupId, int nRelationIndex, IDispatch * pElement, enum CapturedRelationshipTypeConstants relationType, enum CapturedRelationshipOffsetTypeConstants offsetType, double dOffsetOne, double dOffsetTwo );
__declspec(implementation_key(4307)) HRESULT PredefineRelationProducer::DeleteRelation ( unsigned int nGroupId, int nRelationIndex );
__declspec(implementation_key(4308)) HRESULT PredefineRelationProducer::AddMateRelation ( unsigned int nGroupId, IDispatch * pElement, enum CapturedRelationshipOffsetTypeConstants * pOffsetType, double * pdOffsetOne, double * pdOffsetTwo );
__declspec(implementation_key(4309)) HRESULT PredefineRelationProducer::AddPlanarRelation ( unsigned int nGroupId, IDispatch * pElement, enum CapturedRelationshipOffsetTypeConstants * pOffsetType, double * pdOffsetOne, double * pdOffsetTwo );
__declspec(implementation_key(4310)) HRESULT PredefineRelationProducer::AddAxialRelation ( unsigned int nGroupId, IDispatch * pElement );
__declspec(implementation_key(4311)) HRESULT PredefineRelationProducer::AddTangentRelation ( unsigned int nGroupId, IDispatch * pElement, enum CapturedRelationshipOffsetTypeConstants * pOffsetType, double * pdOffsetOne, double * pdOffsetTwo );
__declspec(implementation_key(4312)) HRESULT PredefineRelationProducer::AddConnectRelation ( unsigned int nGroupId, IDispatch * pElement, enum CapturedRelationshipOffsetTypeConstants * pOffsetType, double * pdOffsetOne, double * pdOffsetTwo );
__declspec(implementation_key(4313)) HRESULT PredefineRelationProducer::AddParallelRelation ( unsigned int nGroupId, IDispatch * pElement, enum CapturedRelationshipOffsetTypeConstants * pOffsetType, double * pdOffsetOne, double * pdOffsetTwo );
__declspec(implementation_key(4314)) IDispatchPtr PredefineRelationProducer::GetApplication ( );
__declspec(implementation_key(4315)) HRESULT _ISolidEdgeDocumentAuto::Activate ( );
__declspec(implementation_key(4316)) ApplicationPtr _ISolidEdgeDocumentAuto::GetApplication ( );
__declspec(implementation_key(4317)) HRESULT _ISolidEdgeDocumentAuto::Close ( const _variant_t & SaveChanges, const _variant_t & Filename, const _variant_t & RouteWorkbook );
__declspec(implementation_key(4318)) _bstr_t _ISolidEdgeDocumentAuto::GetFullName ( );
__declspec(implementation_key(4319)) _bstr_t _ISolidEdgeDocumentAuto::GetName ( );
__declspec(implementation_key(4320)) ApplicationPtr _ISolidEdgeDocumentAuto::GetParent ( );
__declspec(implementation_key(4321)) _bstr_t _ISolidEdgeDocumentAuto::GetPath ( );
__declspec(implementation_key(4322)) HRESULT _ISolidEdgeDocumentAuto::PrintOut ( const _variant_t & Printer, const _variant_t & NumCopies, const _variant_t & Orientation, const _variant_t & PaperSize, const _variant_t & Scale, const _variant_t & PrintToFile, const _variant_t & OutputFileName, const _variant_t & PrintRange, const _variant_t & Sheets, const _variant_t & ColorAsBlack, const _variant_t & Collate );
__declspec(implementation_key(4323)) VARIANT_BOOL _ISolidEdgeDocumentAuto::GetReadOnly ( );
__declspec(implementation_key(4324)) IDispatchPtr _ISolidEdgeDocumentAuto::GetRoutingSlip ( );
__declspec(implementation_key(4325)) HRESULT _ISolidEdgeDocumentAuto::Save ( );
__declspec(implementation_key(4326)) HRESULT _ISolidEdgeDocumentAuto::SaveAs ( _bstr_t NewName, const _variant_t & IsATemplate, const _variant_t & FileFormat, const _variant_t & ReadOnlyEnforced, const _variant_t & ReadOnlyRecommended, const _variant_t & newstatus, const _variant_t & CreateBackup, const _variant_t & UpdateLinkInContainer, const _variant_t & UpdateAllLinksInContainer );
__declspec(implementation_key(4327)) HRESULT _ISolidEdgeDocumentAuto::SaveCopyAs ( _bstr_t Name );
__declspec(implementation_key(4328)) HRESULT _ISolidEdgeDocumentAuto::SaveAsJT ( _bstr_t NewName, const _variant_t & Include_PreciseGeom, const _variant_t & Prod_Structure_Option, const _variant_t & Export_PMI, const _variant_t & Export_CoordinateSystem, const _variant_t & Export_3DBodies, const _variant_t & NumberofLODs, const _variant_t & JTFileUnit, const _variant_t & Write_Which_Files, const _variant_t & Use_Simplified_TopAsm, const _variant_t & Use_Simplified_SubAsm, const _variant_t & Use_Simplified_Part, const _variant_t & EnableDefaultOutputPath, const _variant_t & IncludeSEProperties, const _variant_t & Export_VisiblePartsOnly, const _variant_t & Export_VisibleConstructionsOnly, const _variant_t & RemoveUnsafeCharacters, const _variant_t & ExportSEPartFileAsSingleJTFile );
__declspec(implementation_key(4329)) _bstr_t _ISolidEdgeDocumentAuto::SaveAsBIDM ( _bstr_t filePath, _bstr_t DocumentNumber, _bstr_t Revision, _bstr_t Title );
__declspec(implementation_key(4330)) _bstr_t _ISolidEdgeDocumentAuto::ReviseBIDM ( _bstr_t filePath, _bstr_t Revision, _bstr_t Title );
__declspec(implementation_key(4331)) SelectSetPtr _ISolidEdgeDocumentAuto::GetSelectSet ( );
__declspec(implementation_key(4332)) HRESULT _ISolidEdgeDocumentAuto::SendMail ( const _variant_t & Recipients, const _variant_t & Subject, const _variant_t & ReturnReceipt );
__declspec(implementation_key(4333)) IDispatchPtr _ISolidEdgeDocumentAuto::GetSummaryInfo ( );
__declspec(implementation_key(4334)) WindowsPtr _ISolidEdgeDocumentAuto::GetWindows ( );
__declspec(implementation_key(4335)) IDispatchPtr _ISolidEdgeDocumentAuto::GetProperties ( );
__declspec(implementation_key(4336)) VARIANT_BOOL _ISolidEdgeDocumentAuto::GetIsTemplate ( );
__declspec(implementation_key(4337)) void _ISolidEdgeDocumentAuto::PutIsTemplate ( VARIANT_BOOL IsTemplate );
__declspec(implementation_key(4338)) enum DocumentStatus _ISolidEdgeDocumentAuto::GetStatus ( );
__declspec(implementation_key(4339)) void _ISolidEdgeDocumentAuto::PutStatus ( enum DocumentStatus Status );
__declspec(implementation_key(4340)) HRESULT _ISolidEdgeDocumentAuto::EditProperties ( );
__declspec(implementation_key(4341)) UnitsOfMeasurePtr _ISolidEdgeDocumentAuto::GetUnitsOfMeasure ( );
__declspec(implementation_key(4342)) IDispatchPtr _ISolidEdgeDocumentAuto::GetActiveSketch ( );
__declspec(implementation_key(4343)) enum DocumentTypeConstants _ISolidEdgeDocumentAuto::GetType ( );
__declspec(implementation_key(4344)) IUnknownPtr _ISolidEdgeDocumentAuto::GetDocumentEvents ( );
__declspec(implementation_key(4345)) IUnknownPtr _ISolidEdgeDocumentAuto::GetRootStorage ( );
__declspec(implementation_key(4346)) IUnknownPtr _ISolidEdgeDocumentAuto::GetAddInsStorage ( _bstr_t Name, long grfMode );
__declspec(implementation_key(4347)) VARIANT_BOOL _ISolidEdgeDocumentAuto::GetDirty ( );
__declspec(implementation_key(4348)) void _ISolidEdgeDocumentAuto::PutDirty ( VARIANT_BOOL Dirty );
__declspec(implementation_key(4349)) AttributeQueryPtr _ISolidEdgeDocumentAuto::GetAttributeQuery ( );
__declspec(implementation_key(4350)) _bstr_t _ISolidEdgeDocumentAuto::GetCreatedVersion ( );
__declspec(implementation_key(4351)) _bstr_t _ISolidEdgeDocumentAuto::GetLastSavedVersion ( );
__declspec(implementation_key(4352)) HighlightSetsPtr _ISolidEdgeDocumentAuto::GetHighlightSets ( );
__declspec(implementation_key(4353)) VARIANT_BOOL _ISolidEdgeDocumentAuto::GetInPlaceActivated ( );
__declspec(implementation_key(4354)) HRESULT _ISolidEdgeDocumentAuto::SeekWriteAccess ( VARIANT_BOOL * WriteAccess );
__declspec(implementation_key(4355)) long _ISolidEdgeDocumentAuto::GetUndoSteps ( );
__declspec(implementation_key(4356)) void _ISolidEdgeDocumentAuto::PutUndoSteps ( long NumberOfUndoSteps );
__declspec(implementation_key(4357)) HRESULT _ISolidEdgeDocumentAuto::CreatePreview ( );
__declspec(implementation_key(4358)) void _ISolidEdgeDocumentAuto::PutReadOnly ( VARIANT_BOOL ReadOnly );
__declspec(implementation_key(4359)) HRESULT _ISolidEdgeDocumentAuto::SeekReadOnlyAccess ( VARIANT_BOOL * ReadOnlyAccess );
__declspec(implementation_key(4360)) HRESULT _ISolidEdgeDocumentAuto::ImportStyles2 ( enum seStyleTypeConstants StyleType, VARIANT_BOOL bReplace, IDispatch * pSrcDocument );
__declspec(implementation_key(4361)) VARIANT_BOOL _ISolidEdgeDocumentAuto::GetIsInsightFile ( );
__declspec(implementation_key(4362)) NamedViewsPtr _ISolidEdgeDocumentAuto::GetNamedViews ( );
__declspec(implementation_key(4363)) HRESULT _ISolidEdgeDocumentAuto::GetRegisteredCustomPropertiesBiDM ( VARIANT * varPropInfo );
__declspec(implementation_key(4364)) _bstr_t _ISolidEdgeDocumentAuto::SaveAsWithCustomPropertiesBIDM ( _bstr_t filePath, _bstr_t DocumentNumber, _bstr_t Revision, _bstr_t Title, const _variant_t & varPropInfo );
__declspec(implementation_key(4365)) _bstr_t _ISolidEdgeDocumentAuto::ReviseWithCustomPropertiesBIDM ( _bstr_t filePath, _bstr_t Revision, _bstr_t Title, const _variant_t & varPropInfo );
__declspec(implementation_key(4366)) HRESULT _ISolidEdgeDocumentAuto::SaveAsPRC ( _bstr_t Filename );
__declspec(implementation_key(4367)) IDispatchPtr _ISolidEdgeDocumentAuto::GetVariables ( );
__declspec(implementation_key(4368)) _variant_t _ISolidEdgeDocumentAuto::NewWindow ( const _variant_t & NewWindowOptions, const _variant_t & Environment );
__declspec(implementation_key(4369)) IDispatchPtr _ISolidEdgeDocumentAuto::GetBlocks ( );
__declspec(implementation_key(4370)) void _ISolidEdgeDocumentAuto::PutName ( _bstr_t Name );
__declspec(implementation_key(4371)) HRESULT _ISolidEdgeDocumentAuto::SaveAs3DPrint ( _bstr_t filePath, long NumberOfCoordinates, SAFEARRAY * * PositionArray, long NumberOfNormals, SAFEARRAY * * NormalArray, long NumberofColors, SAFEARRAY * * colorArray, long NumberofIndices, SAFEARRAY * * Indexarray, long NumberOfFaces, SAFEARRAY * * FaceArray );
__declspec(implementation_key(4372)) HRESULT _ISolidEdgeDocumentAuto::SaveAsPLMXML ( _bstr_t bstrPLMXMLFilePath, _bstr_t bstrPLMXMLINIFilePath );
__declspec(implementation_key(4373)) PredefineRelationProducerPtr _ISolidEdgeDocumentAuto::GetGetPredefineRelationProducer ( );
__declspec(implementation_key(4374)) HRESULT _ISolidEdgeDocumentAuto::TGCopyFileByPackFunc ( _bstr_t bsDest );
__declspec(implementation_key(4375)) HRESULT _ISolidEdgeDocumentAuto::TGSaveAsLib ( _bstr_t filePath );
__declspec(implementation_key(4376)) HRESULT _ISolidEdgeDocumentAuto::TGSaveVaribalesInJson ( _bstr_t filePath );
__declspec(implementation_key(4377)) int _IPredefineRelationProducerAuto::GroupCount ( );
__declspec(implementation_key(4378)) int _IPredefineRelationProducerAuto::MagneticGroupCount ( );
__declspec(implementation_key(4379)) VARIANT_BOOL _IPredefineRelationProducerAuto::HasAssemblyCaptureFitRelation ( );
__declspec(implementation_key(4380)) unsigned int _IPredefineRelationProducerAuto::AddPredefineRelationGroup ( _bstr_t bstrGroupName, enum PredefineRelationGroupPolarityConstants ePolarity, VARIANT_BOOL bSetDefault );
__declspec(implementation_key(4381)) void _IPredefineRelationProducerAuto::PutDefaultGroup ( unsigned int nGroupId );
__declspec(implementation_key(4382)) unsigned int _IPredefineRelationProducerAuto::GetDefaultGroup ( );
__declspec(implementation_key(4383)) HRESULT _IPredefineRelationProducerAuto::SetCaptureFitDefault ( VARIANT_BOOL bCaptureFitDefault );
__declspec(implementation_key(4384)) HRESULT _IPredefineRelationProducerAuto::ClearDefault ( );
__declspec(implementation_key(4385)) HRESULT _IPredefineRelationProducerAuto::SetGroupName ( unsigned int nGroupId, _bstr_t bstrGroupName );
__declspec(implementation_key(4386)) _bstr_t _IPredefineRelationProducerAuto::GetGroupName ( unsigned int nGroupId );
__declspec(implementation_key(4387)) HRESULT _IPredefineRelationProducerAuto::SetGroupPolarity ( unsigned int nGroupId, enum PredefineRelationGroupPolarityConstants ePolarity );
__declspec(implementation_key(4388)) enum PredefineRelationGroupPolarityConstants _IPredefineRelationProducerAuto::GetGroupPolarity ( unsigned int nGroupId );
__declspec(implementation_key(4389)) int _IPredefineRelationProducerAuto::GetRelationCount ( unsigned int nGroupId );
__declspec(implementation_key(4390)) int _IPredefineRelationProducerAuto::GetCaptureFitRelationCount ( );
__declspec(implementation_key(4391)) HRESULT _IPredefineRelationProducerAuto::DeleteGroups ( int numDeleteGroups, unsigned int * pnDeleteGroupIds );
__declspec(implementation_key(4392)) HRESULT _IPredefineRelationProducerAuto::GetRelationData ( unsigned int nGroupId, int nRelationIndex, IDispatch * * ppElement, enum CapturedRelationshipTypeConstants * pRelationType, enum CapturedRelationshipOffsetTypeConstants * pOffsetType, double * pdOffsetOne, double * pdOffsetTwo );
__declspec(implementation_key(4393)) HRESULT _IPredefineRelationProducerAuto::SetRelationData ( unsigned int nGroupId, int nRelationIndex, IDispatch * pElement, enum CapturedRelationshipTypeConstants relationType, enum CapturedRelationshipOffsetTypeConstants offsetType, double dOffsetOne, double dOffsetTwo );
__declspec(implementation_key(4394)) HRESULT _IPredefineRelationProducerAuto::DeleteRelation ( unsigned int nGroupId, int nRelationIndex );
__declspec(implementation_key(4395)) HRESULT _IPredefineRelationProducerAuto::AddMateRelation ( unsigned int nGroupId, IDispatch * pElement, enum CapturedRelationshipOffsetTypeConstants * pOffsetType, double * pdOffsetOne, double * pdOffsetTwo );
__declspec(implementation_key(4396)) HRESULT _IPredefineRelationProducerAuto::AddPlanarRelation ( unsigned int nGroupId, IDispatch * pElement, enum CapturedRelationshipOffsetTypeConstants * pOffsetType, double * pdOffsetOne, double * pdOffsetTwo );
__declspec(implementation_key(4397)) HRESULT _IPredefineRelationProducerAuto::AddAxialRelation ( unsigned int nGroupId, IDispatch * pElement );
__declspec(implementation_key(4398)) HRESULT _IPredefineRelationProducerAuto::AddTangentRelation ( unsigned int nGroupId, IDispatch * pElement, enum CapturedRelationshipOffsetTypeConstants * pOffsetType, double * pdOffsetOne, double * pdOffsetTwo );
__declspec(implementation_key(4399)) HRESULT _IPredefineRelationProducerAuto::AddConnectRelation ( unsigned int nGroupId, IDispatch * pElement, enum CapturedRelationshipOffsetTypeConstants * pOffsetType, double * pdOffsetOne, double * pdOffsetTwo );
__declspec(implementation_key(4400)) HRESULT _IPredefineRelationProducerAuto::AddParallelRelation ( unsigned int nGroupId, IDispatch * pElement, enum CapturedRelationshipOffsetTypeConstants * pOffsetType, double * pdOffsetOne, double * pdOffsetTwo );
__declspec(implementation_key(4401)) IDispatchPtr _IPredefineRelationProducerAuto::GetApplication ( );
__declspec(implementation_key(4402)) HRESULT CPDInitializerInsightXT::GetDocuments ( SAFEARRAY * * psaDocs );
__declspec(implementation_key(4403)) HRESULT CPDInitializerInsightXT::GetPropertiesInfo ( _bstr_t bstrDocName, VARIANT * pvPropInfo );
__declspec(implementation_key(4404)) HRESULT CPDInitializerInsightXT::SetPropertiesInfo ( _bstr_t bstrDocName, const _variant_t & vPropInfo );
__declspec(implementation_key(4405)) HRESULT CPDInitializerInsightXT::GetItemTypes ( _bstr_t bstrDocName, SAFEARRAY * * psaItemTypes );
__declspec(implementation_key(4406)) HRESULT CPDInitializerInsightXT::GetMappedPropertiesInfo ( _bstr_t bstrDocName, _bstr_t bstrItemType, VARIANT * pvPropInfo );
__declspec(implementation_key(4407)) HRESULT CPDInitializerInsightXT::SetControlsBehavior ( VARIANT_BOOL vbDisableAssignAllButtonAndMenu, VARIANT_BOOL vbDisableRestoreButton, VARIANT_BOOL vbDisableItemIDCell, VARIANT_BOOL vbDisableItemRevisionCell, VARIANT_BOOL vbDisableItemNameCell, VARIANT_BOOL vbDisableDatasetNameCell );
__declspec(implementation_key(4408)) HRESULT _ICPDInitializerInsightXTAuto::GetDocuments ( SAFEARRAY * * psaDocs );
__declspec(implementation_key(4409)) HRESULT _ICPDInitializerInsightXTAuto::GetPropertiesInfo ( _bstr_t bstrDocName, VARIANT * pvPropInfo );
__declspec(implementation_key(4410)) HRESULT _ICPDInitializerInsightXTAuto::SetPropertiesInfo ( _bstr_t bstrDocName, const _variant_t & vPropInfo );
__declspec(implementation_key(4411)) HRESULT _ICPDInitializerInsightXTAuto::GetItemTypes ( _bstr_t bstrDocName, SAFEARRAY * * psaItemTypes );
__declspec(implementation_key(4412)) HRESULT _ICPDInitializerInsightXTAuto::GetMappedPropertiesInfo ( _bstr_t bstrDocName, _bstr_t bstrItemType, VARIANT * pvPropInfo );
__declspec(implementation_key(4413)) HRESULT _ICPDInitializerInsightXTAuto::SetControlsBehavior ( VARIANT_BOOL vbDisableAssignAllButtonAndMenu, VARIANT_BOOL vbDisableRestoreButton, VARIANT_BOOL vbDisableItemIDCell, VARIANT_BOOL vbDisableItemRevisionCell, VARIANT_BOOL vbDisableItemNameCell, VARIANT_BOOL vbDisableDatasetNameCell );
__declspec(implementation_key(4414)) HRESULT CPDInitializer::GetDocuments ( SAFEARRAY * * psaDocs );
__declspec(implementation_key(4415)) HRESULT CPDInitializer::GetPropertiesInfo ( _bstr_t bstrDocName, VARIANT * pvPropInfo );
__declspec(implementation_key(4416)) HRESULT CPDInitializer::SetPropertiesInfo ( _bstr_t bstrDocName, const _variant_t & vPropInfo );
__declspec(implementation_key(4417)) HRESULT CPDInitializer::GetItemTypes ( _bstr_t bstrDocName, SAFEARRAY * * psaItemTypes );
__declspec(implementation_key(4418)) HRESULT CPDInitializer::GetMappedPropertiesInfo ( _bstr_t bstrDocName, _bstr_t bstrItemType, VARIANT * pvPropInfo );
__declspec(implementation_key(4419)) HRESULT CPDInitializer::SetControlsBehavior ( VARIANT_BOOL vbDisableAssignAllButtonAndMenu, VARIANT_BOOL vbDisableRestoreButton, VARIANT_BOOL vbDisableItemIDCell, VARIANT_BOOL vbDisableItemRevisionCell, VARIANT_BOOL vbDisableItemNameCell, VARIANT_BOOL vbDisableDatasetNameCell );
__declspec(implementation_key(4420)) HRESULT _ICPDInitializerAuto::GetDocuments ( SAFEARRAY * * psaDocs );
__declspec(implementation_key(4421)) HRESULT _ICPDInitializerAuto::GetPropertiesInfo ( _bstr_t bstrDocName, VARIANT * pvPropInfo );
__declspec(implementation_key(4422)) HRESULT _ICPDInitializerAuto::SetPropertiesInfo ( _bstr_t bstrDocName, const _variant_t & vPropInfo );
__declspec(implementation_key(4423)) HRESULT _ICPDInitializerAuto::GetItemTypes ( _bstr_t bstrDocName, SAFEARRAY * * psaItemTypes );
__declspec(implementation_key(4424)) HRESULT _ICPDInitializerAuto::GetMappedPropertiesInfo ( _bstr_t bstrDocName, _bstr_t bstrItemType, VARIANT * pvPropInfo );
__declspec(implementation_key(4425)) HRESULT _ICPDInitializerAuto::SetControlsBehavior ( VARIANT_BOOL vbDisableAssignAllButtonAndMenu, VARIANT_BOOL vbDisableRestoreButton, VARIANT_BOOL vbDisableItemIDCell, VARIANT_BOOL vbDisableItemRevisionCell, VARIANT_BOOL vbDisableItemNameCell, VARIANT_BOOL vbDisableDatasetNameCell );
__declspec(implementation_key(4426)) void SectionView::PutCaption ( _bstr_t _arg1 );
__declspec(implementation_key(4427)) _bstr_t SectionView::GetCaption ( );
__declspec(implementation_key(4428)) HRESULT SectionView::Show ( VARIANT_BOOL bShowSectionView );
__declspec(implementation_key(4429)) HRESULT SectionView::Delete ( );
__declspec(implementation_key(4430)) void SectionView::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(4431)) _bstr_t SectionView::GetName ( );
__declspec(implementation_key(4432)) void SectionView::PutStyle ( _bstr_t _arg1 );
__declspec(implementation_key(4433)) _bstr_t SectionView::GetStyle ( );
__declspec(implementation_key(4434)) void SectionView::PutCuttingPlaneColor ( long _arg1 );
__declspec(implementation_key(4435)) long SectionView::GetCuttingPlaneColor ( );
__declspec(implementation_key(4436)) void SectionView::PutCuttingPlaneEdgeColor ( long _arg1 );
__declspec(implementation_key(4437)) long SectionView::GetCuttingPlaneEdgeColor ( );
__declspec(implementation_key(4438)) void SectionView::PutOpacity ( double _arg1 );
__declspec(implementation_key(4439)) double SectionView::GetOpacity ( );
__declspec(implementation_key(4440)) void SectionView::PutThroughAllExtent ( double _arg1 );
__declspec(implementation_key(4441)) double SectionView::GetThroughAllExtent ( );
__declspec(implementation_key(4442)) void SectionView::PutCutHardware ( long _arg1 );
__declspec(implementation_key(4443)) long SectionView::GetCutHardware ( );
__declspec(implementation_key(4444)) void SectionView::PutSectionDisplayMode ( enum PMISectionDisplayModeConstants _arg1 );
__declspec(implementation_key(4445)) enum PMISectionDisplayModeConstants SectionView::GetSectionDisplayMode ( );
__declspec(implementation_key(4446)) void SectionView::PutShowCuttingPlane ( long _arg1 );
__declspec(implementation_key(4447)) long SectionView::GetShowCuttingPlane ( );
__declspec(implementation_key(4448)) HRESULT SectionView::AddToModelView ( IUnknown * ModelView );
__declspec(implementation_key(4449)) HRESULT SectionView::RemoveFromModelView ( IUnknown * ModelView );
__declspec(implementation_key(4450)) HRESULT SectionView::EditByPlane ( long nNumPlanes, SAFEARRAY * * pPlanes, SAFEARRAY * * PlaneCutDirections, enum SectionViewPlaneExtentTypeConstant eExtentType, long bCutHardwareParts );
__declspec(implementation_key(4451)) void SectionView::PutPlaneExtentType ( enum SectionViewPlaneExtentTypeConstant _arg1 );
__declspec(implementation_key(4452)) enum SectionViewPlaneExtentTypeConstant SectionView::GetPlaneExtentType ( );
__declspec(implementation_key(4453)) IDispatchPtr SectionView::GetAttributeSets ( );
__declspec(implementation_key(4454)) VARIANT_BOOL SectionView::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(4455)) HRESULT SectionView::EditByPlaneEx ( long nNumPlanes, SAFEARRAY * * pPlanes, SAFEARRAY * * PlaneCutDirections, SAFEARRAY * * SectionViewPlaneTypes, enum SectionViewPlaneExtentTypeConstant eExtentType, VARIANT_BOOL bCutHardwareParts );
__declspec(implementation_key(4456)) long SectionView::GetIsCutByPlane ( );
__declspec(implementation_key(4457)) int SectionViews::GetCount ( );
__declspec(implementation_key(4458)) IDispatchPtr SectionViews::Item ( const _variant_t & Index );
__declspec(implementation_key(4459)) IDispatchPtr SectionViews::GetApplication ( );
__declspec(implementation_key(4460)) IDispatchPtr SectionViews::GetParent ( );
__declspec(implementation_key(4461)) IDispatchPtr SectionViews::Add ( long nNumProfiles, SAFEARRAY * * pProfiles, _bstr_t szCaption, double dExtent, enum SectionViewExtentSide eExtentSide, enum SectionViewProfileSide eProfileSide, long bCutHardwareParts );
__declspec(implementation_key(4462)) IDispatchPtr SectionViews::AddByPlane ( long nNumPlanes, SAFEARRAY * * pPlanes, SAFEARRAY * * PlaneCutDirections, enum SectionViewPlaneExtentTypeConstant eExtentType, _bstr_t szCaption, long bCutHardwareParts );
__declspec(implementation_key(4463)) IDispatchPtr SectionViews::AddByPlaneEx ( long nNumPlanes, SAFEARRAY * * pPlanes, SAFEARRAY * * PlaneCutDirections, SAFEARRAY * * SectionViewPlaneTypes, enum SectionViewPlaneExtentTypeConstant eExtentType, _bstr_t szCaption, VARIANT_BOOL bCutHardwareParts );
__declspec(implementation_key(4464)) HRESULT InterDocumentUpdate::GetFilesToUpdate ( SAFEARRAY * * FilesToUpdate, const _variant_t & FutureUse );
__declspec(implementation_key(4465)) HRESULT InterDocumentUpdate::LoadFilesToUpdate ( const _variant_t & FutureUse );
__declspec(implementation_key(4466)) HRESULT InterDocumentUpdate::Update ( enum InterDocumentUpdateMode UpdateMode, const _variant_t & FutureUse );
__declspec(implementation_key(4467)) HRESULT InterDocumentUpdate::GetFilesToSave ( SAFEARRAY * * FilesToSave, const _variant_t & FutureUse );
__declspec(implementation_key(4468)) HRESULT InterDocumentUpdate::SaveChangedFiles ( SAFEARRAY * * FilesNotSaved, const _variant_t & FutureUse );
__declspec(implementation_key(4469)) HRESULT _IInterDocumentUpdateAuto::GetFilesToUpdate ( SAFEARRAY * * FilesToUpdate, const _variant_t & FutureUse );
__declspec(implementation_key(4470)) HRESULT _IInterDocumentUpdateAuto::LoadFilesToUpdate ( const _variant_t & FutureUse );
__declspec(implementation_key(4471)) HRESULT _IInterDocumentUpdateAuto::Update ( enum InterDocumentUpdateMode UpdateMode, const _variant_t & FutureUse );
__declspec(implementation_key(4472)) HRESULT _IInterDocumentUpdateAuto::GetFilesToSave ( SAFEARRAY * * FilesToSave, const _variant_t & FutureUse );
__declspec(implementation_key(4473)) HRESULT _IInterDocumentUpdateAuto::SaveChangedFiles ( SAFEARRAY * * FilesNotSaved, const _variant_t & FutureUse );
__declspec(implementation_key(4474)) HRESULT SteeringWheel::GetOrigin ( double * OriginX, double * OriginY, double * OriginZ );
__declspec(implementation_key(4475)) HRESULT SteeringWheel::SetOrigin ( double OriginX, double OriginY, double OriginZ );
__declspec(implementation_key(4476)) HRESULT SteeringWheel::GetOriginAndAxis ( enum seSteeringWheelConstants AxisType, double * OriginX, double * OriginY, double * OriginZ, double * AxisXComponent, double * AxisYComponent, double * AxisZComponent );
__declspec(implementation_key(4477)) HRESULT SteeringWheel::Align ( enum seSteeringWheelConstants AxisType, double AxisXComponent, double AxisYComponent, double AxisZComponent );
__declspec(implementation_key(4478)) HRESULT SteeringWheel::AlignAlongLinerElement ( enum seSteeringWheelConstants AxisType, IDispatch * LinearElementToAlignWith );
__declspec(implementation_key(4479)) HRESULT _ISteeringWheelAuto::GetOrigin ( double * OriginX, double * OriginY, double * OriginZ );
__declspec(implementation_key(4480)) HRESULT _ISteeringWheelAuto::SetOrigin ( double OriginX, double OriginY, double OriginZ );
__declspec(implementation_key(4481)) HRESULT _ISteeringWheelAuto::GetOriginAndAxis ( enum seSteeringWheelConstants AxisType, double * OriginX, double * OriginY, double * OriginZ, double * AxisXComponent, double * AxisYComponent, double * AxisZComponent );
__declspec(implementation_key(4482)) HRESULT _ISteeringWheelAuto::Align ( enum seSteeringWheelConstants AxisType, double AxisXComponent, double AxisYComponent, double AxisZComponent );
__declspec(implementation_key(4483)) HRESULT _ISteeringWheelAuto::AlignAlongLinerElement ( enum seSteeringWheelConstants AxisType, IDispatch * LinearElementToAlignWith );
__declspec(implementation_key(4484)) HRESULT CPDInitializerBiDM::GetDocuments ( SAFEARRAY * * psaDocs );
__declspec(implementation_key(4485)) HRESULT CPDInitializerBiDM::GetPropertiesInfo ( _bstr_t bstrDocName, VARIANT * pvPropInfo );
__declspec(implementation_key(4486)) HRESULT CPDInitializerBiDM::SetPropertiesInfo ( _bstr_t bstrDocName, const _variant_t & vPropInfo );
__declspec(implementation_key(4487)) HRESULT CPDInitializerBiDM::SetControlsBehavior ( VARIANT_BOOL vbDisableAssignAllButtonAndMenu, VARIANT_BOOL vbDisableDocumentNumberCell, VARIANT_BOOL vbDisableRevisionIDCell );
#pragma stop_map_region

} // namespace TGFramework

#pragma pack(pop)
