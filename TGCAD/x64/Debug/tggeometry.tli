// Created by Microsoft (R) C/C++ Compiler Version 14.32.31332.0 (1215a8e7).
//
// D:\visualstudio\project\TGCAD\TGCAD\x64\Debug\tggeometry.tli
//
// Wrapper implementations for type library tggeometry.tlb
// compiler-generated file - DO NOT EDIT!

#pragma once

//
// dispinterface CurveBody wrapper method implementations
//

inline TGFramework::ApplicationPtr CurveBody::GetApplication ( ) {
    struct TGFramework::Application * _result = 0;
    _com_dispatch_method(this, 0x3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return TGFramework::ApplicationPtr(_result, false);
}

inline IDispatchPtr CurveBody::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline CurvePathsPtr CurveBody::GetCurvePaths ( ) {
    struct CurvePaths * _result = 0;
    _com_dispatch_method(this, 0x5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return CurvePathsPtr(_result, false);
}

inline CurvesPtr CurveBody::GetCurves ( ) {
    struct Curves * _result = 0;
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return CurvesPtr(_result, false);
}

inline IDispatchPtr CurveBody::GetDocument ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL CurveBody::GetHasArea ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline HRESULT CurveBody::GetRange ( SAFEARRAY * * MinRangePoint, SAFEARRAY * * MaxRangePoint ) {
    return _com_dispatch_method(this, 0x9, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005\x6005", MinRangePoint, MaxRangePoint);
}

inline HRESULT CurveBody::GetExactRange ( SAFEARRAY * * MinRangePoint, SAFEARRAY * * MaxRangePoint ) {
    return _com_dispatch_method(this, 0xf, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005\x6005", MinRangePoint, MaxRangePoint);
}

inline double CurveBody::GetArea ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0xa, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline long CurveBody::GetGeometryForm ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0xb, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline HRESULT CurveBody::GetReferenceKey ( SAFEARRAY * * ReferenceKey, VARIANT * KeySize ) {
    return _com_dispatch_method(this, 0xc, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6011\x480c", ReferenceKey, KeySize);
}

inline long CurveBody::GetUpdatesCounter ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0xd, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline enum GNTTypePropertyConstants CurveBody::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    _com_dispatch_method(this, 0xe, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline CurveVerticesPtr CurveBody::GetCurveVertices ( ) {
    struct CurveVertices * _result = 0;
    _com_dispatch_method(this, 0x10, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return CurveVerticesPtr(_result, false);
}

//
// dispinterface CurvePaths wrapper method implementations
//

inline TGFramework::ApplicationPtr CurvePaths::GetApplication ( ) {
    struct TGFramework::Application * _result = 0;
    _com_dispatch_method(this, 0x15, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return TGFramework::ApplicationPtr(_result, false);
}

inline IDispatchPtr CurvePaths::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x16, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline long CurvePaths::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x17, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline CurvePathPtr CurvePaths::Item ( const _variant_t & index ) {
    struct CurvePath * _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &index);
    return CurvePathPtr(_result, false);
}

//
// dispinterface CurvePath wrapper method implementations
//

inline TGFramework::ApplicationPtr CurvePath::GetApplication ( ) {
    struct TGFramework::Application * _result = 0;
    _com_dispatch_method(this, 0x3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return TGFramework::ApplicationPtr(_result, false);
}

inline IDispatchPtr CurvePath::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline CurvesPtr CurvePath::GetCurves ( ) {
    struct Curves * _result = 0;
    _com_dispatch_method(this, 0x5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return CurvesPtr(_result, false);
}

inline CurveBodyPtr CurvePath::GetCurveBody ( ) {
    struct CurveBody * _result = 0;
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return CurveBodyPtr(_result, false);
}

inline VARIANT_BOOL CurvePath::GetIsClosed ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline VARIANT_BOOL CurvePath::GetIsVoid ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline VARIANT_BOOL CurvePath::GetIsPlanar ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline VARIANT_BOOL CurvePath::GetIsPointInside ( SAFEARRAY * * Point ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xa, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, 
        L"\x6005", Point);
    return _result;
}

inline HRESULT CurvePath::GetRange ( SAFEARRAY * * MinRangePoint, SAFEARRAY * * MaxRangePoint ) {
    return _com_dispatch_method(this, 0xb, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005\x6005", MinRangePoint, MaxRangePoint);
}

inline HRESULT CurvePath::GetExactRange ( SAFEARRAY * * MinRangePoint, SAFEARRAY * * MaxRangePoint ) {
    return _com_dispatch_method(this, 0xe, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005\x6005", MinRangePoint, MaxRangePoint);
}

inline double CurvePath::GetArea ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0xc, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline enum GNTTypePropertyConstants CurvePath::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    _com_dispatch_method(this, 0xd, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

//
// interface _IDMDCurvePaths wrapper method implementations
//

inline TGFramework::ApplicationPtr _IDMDCurvePaths::GetApplication ( ) {
    struct TGFramework::Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TGFramework::ApplicationPtr(_result, false);
}

inline IDispatchPtr _IDMDCurvePaths::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long _IDMDCurvePaths::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IUnknownPtr _IDMDCurvePaths::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline CurvePathPtr _IDMDCurvePaths::Item ( const _variant_t & index ) {
    struct CurvePath * _result = 0;
    HRESULT _hr = raw_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CurvePathPtr(_result, false);
}

//
// dispinterface Curves wrapper method implementations
//

inline TGFramework::ApplicationPtr Curves::GetApplication ( ) {
    struct TGFramework::Application * _result = 0;
    _com_dispatch_method(this, 0x15, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return TGFramework::ApplicationPtr(_result, false);
}

inline IDispatchPtr Curves::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x16, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline long Curves::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x17, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline CurvePtr Curves::Item ( const _variant_t & index ) {
    struct Curve * _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &index);
    return CurvePtr(_result, false);
}

//
// dispinterface Curve wrapper method implementations
//

inline TGFramework::ApplicationPtr Curve::GetApplication ( ) {
    struct TGFramework::Application * _result = 0;
    _com_dispatch_method(this, 0x3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return TGFramework::ApplicationPtr(_result, false);
}

inline IDispatchPtr Curve::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline CurvePathPtr Curve::GetCurvePath ( ) {
    struct CurvePath * _result = 0;
    _com_dispatch_method(this, 0x5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return CurvePathPtr(_result, false);
}

inline CurveBodyPtr Curve::GetCurveBody ( ) {
    struct CurveBody * _result = 0;
    _com_dispatch_method(this, 0x6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return CurveBodyPtr(_result, false);
}

inline VARIANT_BOOL Curve::GetIsParamReversed ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline enum GNTTypePropertyConstants Curve::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    _com_dispatch_method(this, 0x8, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline HRESULT Curve::GetRange ( SAFEARRAY * * MinRangePoint, SAFEARRAY * * MaxRangePoint ) {
    return _com_dispatch_method(this, 0x9, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005\x6005", MinRangePoint, MaxRangePoint);
}

inline HRESULT Curve::GetExactRange ( SAFEARRAY * * MinRangePoint, SAFEARRAY * * MaxRangePoint ) {
    return _com_dispatch_method(this, 0x19, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005\x6005", MinRangePoint, MaxRangePoint);
}

inline HRESULT Curve::GetEndPoints ( SAFEARRAY * * StartPoint, SAFEARRAY * * EndPoint ) {
    return _com_dispatch_method(this, 0xa, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005\x6005", StartPoint, EndPoint);
}

inline HRESULT Curve::GetParamExtents ( double * MinParam, double * MaxParam ) {
    return _com_dispatch_method(this, 0xb, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4005\x4005", MinParam, MaxParam);
}

inline HRESULT Curve::GetParamAtPoint ( long NumPoints, SAFEARRAY * * Points, SAFEARRAY * * GuessParams, SAFEARRAY * * MaxDeviations, SAFEARRAY * * Params, SAFEARRAY * * Flags ) {
    return _com_dispatch_method(this, 0xc, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x6005\x6005\x6005\x6005\x6003", NumPoints, Points, GuessParams, MaxDeviations, Params, Flags);
}

inline HRESULT Curve::GetPointAtParam ( long NumParams, SAFEARRAY * * Params, SAFEARRAY * * Points ) {
    return _com_dispatch_method(this, 0xd, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x6005\x6005", NumParams, Params, Points);
}

inline HRESULT Curve::GetTangent ( long NumParams, SAFEARRAY * * Params, SAFEARRAY * * Tangents ) {
    return _com_dispatch_method(this, 0xe, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x6005\x6005", NumParams, Params, Tangents);
}

inline HRESULT Curve::GetCurvature ( long NumParams, SAFEARRAY * * Params, SAFEARRAY * * Directions, SAFEARRAY * * Curvatures ) {
    return _com_dispatch_method(this, 0xf, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x6005\x6005\x6005", NumParams, Params, Directions, Curvatures);
}

inline HRESULT Curve::GetDerivatives ( long NumParams, SAFEARRAY * * Params, SAFEARRAY * * FirstDerv, SAFEARRAY * * SecondDerv, SAFEARRAY * * ThirdDerv ) {
    return _com_dispatch_method(this, 0x10, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x6005\x6005\x6005\x6005", NumParams, Params, FirstDerv, SecondDerv, ThirdDerv);
}

inline HRESULT Curve::GetParamAtLength ( double FromParam, double Length, double * Param ) {
    return _com_dispatch_method(this, 0x11, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0005\x0005\x4005", FromParam, Length, Param);
}

inline HRESULT Curve::GetLengthAtParam ( double FromParam, double ToParam, double * Length ) {
    return _com_dispatch_method(this, 0x12, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0005\x0005\x4005", FromParam, ToParam, Length);
}

inline long Curve::GetContinuity ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x13, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline HRESULT Curve::GetParamAnomaly ( SAFEARRAY * * Periodicity, VARIANT_BOOL * Singular ) {
    return _com_dispatch_method(this, 0x14, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005\x400b", Periodicity, Singular);
}

inline long Curve::GetGeometryForm ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x15, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline HRESULT Curve::GetReferenceKey ( SAFEARRAY * * ReferenceKey, VARIANT * KeySize ) {
    return _com_dispatch_method(this, 0x16, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6011\x480c", ReferenceKey, KeySize);
}

inline long Curve::GetUpdatesCounter ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x17, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Curve::GetGeometry ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x18, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline CurveVerticesPtr Curve::GetCurveVertices ( ) {
    struct CurveVertices * _result = 0;
    _com_dispatch_method(this, 0x1a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return CurveVerticesPtr(_result, false);
}

inline HRESULT Curve::GetParamAtPointEx ( long NumPoints, SAFEARRAY * * Points, SAFEARRAY * * Params, const _variant_t & GuessParams, VARIANT * MaxDeviations, VARIANT * Flags ) {
    return _com_dispatch_method(this, 0x1b, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x6005\x6005\x080c\x480c\x480c", NumPoints, Points, Params, &GuessParams, MaxDeviations, Flags);
}

//
// interface _IDMDCurves wrapper method implementations
//

inline TGFramework::ApplicationPtr _IDMDCurves::GetApplication ( ) {
    struct TGFramework::Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TGFramework::ApplicationPtr(_result, false);
}

inline IDispatchPtr _IDMDCurves::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long _IDMDCurves::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IUnknownPtr _IDMDCurves::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline CurvePtr _IDMDCurves::Item ( const _variant_t & index ) {
    struct Curve * _result = 0;
    HRESULT _hr = raw_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CurvePtr(_result, false);
}

//
// interface _IDMDCurvePath wrapper method implementations
//

inline TGFramework::ApplicationPtr _IDMDCurvePath::GetApplication ( ) {
    struct TGFramework::Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TGFramework::ApplicationPtr(_result, false);
}

inline IDispatchPtr _IDMDCurvePath::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline CurvesPtr _IDMDCurvePath::GetCurves ( ) {
    struct Curves * _result = 0;
    HRESULT _hr = get_Curves(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CurvesPtr(_result, false);
}

inline CurveBodyPtr _IDMDCurvePath::GetCurveBody ( ) {
    struct CurveBody * _result = 0;
    HRESULT _hr = get_CurveBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CurveBodyPtr(_result, false);
}

inline VARIANT_BOOL _IDMDCurvePath::GetIsClosed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsClosed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL _IDMDCurvePath::GetIsVoid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVoid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL _IDMDCurvePath::GetIsPlanar ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPlanar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL _IDMDCurvePath::GetIsPointInside ( SAFEARRAY * * Point ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPointInside(Point, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _IDMDCurvePath::GetRange ( SAFEARRAY * * MinRangePoint, SAFEARRAY * * MaxRangePoint ) {
    HRESULT _hr = raw_GetRange(MinRangePoint, MaxRangePoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDCurvePath::GetExactRange ( SAFEARRAY * * MinRangePoint, SAFEARRAY * * MaxRangePoint ) {
    HRESULT _hr = raw_GetExactRange(MinRangePoint, MaxRangePoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double _IDMDCurvePath::GetArea ( ) {
    double _result = 0;
    HRESULT _hr = get_Area(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum GNTTypePropertyConstants _IDMDCurvePath::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// dispinterface CurveVertices wrapper method implementations
//

inline IDispatchPtr CurveVertices::GetApplication ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x15, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr CurveVertices::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x16, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline long CurveVertices::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x17, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline CurveVertexPtr CurveVertices::Item ( const _variant_t & index ) {
    struct CurveVertex * _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &index);
    return CurveVertexPtr(_result, false);
}

//
// interface _IDMDCurveBody wrapper method implementations
//

inline TGFramework::ApplicationPtr _IDMDCurveBody::GetApplication ( ) {
    struct TGFramework::Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TGFramework::ApplicationPtr(_result, false);
}

inline IDispatchPtr _IDMDCurveBody::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline CurvePathsPtr _IDMDCurveBody::GetCurvePaths ( ) {
    struct CurvePaths * _result = 0;
    HRESULT _hr = get_CurvePaths(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CurvePathsPtr(_result, false);
}

inline CurvesPtr _IDMDCurveBody::GetCurves ( ) {
    struct Curves * _result = 0;
    HRESULT _hr = get_Curves(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CurvesPtr(_result, false);
}

inline IDispatchPtr _IDMDCurveBody::GetDocument ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL _IDMDCurveBody::GetHasArea ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_HasArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _IDMDCurveBody::GetRange ( SAFEARRAY * * MinRangePoint, SAFEARRAY * * MaxRangePoint ) {
    HRESULT _hr = raw_GetRange(MinRangePoint, MaxRangePoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDCurveBody::GetExactRange ( SAFEARRAY * * MinRangePoint, SAFEARRAY * * MaxRangePoint ) {
    HRESULT _hr = raw_GetExactRange(MinRangePoint, MaxRangePoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double _IDMDCurveBody::GetArea ( ) {
    double _result = 0;
    HRESULT _hr = get_Area(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long _IDMDCurveBody::GetGeometryForm ( ) {
    long _result = 0;
    HRESULT _hr = get_GeometryForm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _IDMDCurveBody::GetReferenceKey ( SAFEARRAY * * ReferenceKey, VARIANT * KeySize ) {
    HRESULT _hr = raw_GetReferenceKey(ReferenceKey, KeySize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long _IDMDCurveBody::GetUpdatesCounter ( ) {
    long _result = 0;
    HRESULT _hr = get_UpdatesCounter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum GNTTypePropertyConstants _IDMDCurveBody::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline CurveVerticesPtr _IDMDCurveBody::GetCurveVertices ( ) {
    struct CurveVertices * _result = 0;
    HRESULT _hr = get_CurveVertices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CurveVerticesPtr(_result, false);
}

//
// interface _IDMDCurve wrapper method implementations
//

inline TGFramework::ApplicationPtr _IDMDCurve::GetApplication ( ) {
    struct TGFramework::Application * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TGFramework::ApplicationPtr(_result, false);
}

inline IDispatchPtr _IDMDCurve::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline CurvePathPtr _IDMDCurve::GetCurvePath ( ) {
    struct CurvePath * _result = 0;
    HRESULT _hr = get_CurvePath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CurvePathPtr(_result, false);
}

inline CurveBodyPtr _IDMDCurve::GetCurveBody ( ) {
    struct CurveBody * _result = 0;
    HRESULT _hr = get_CurveBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CurveBodyPtr(_result, false);
}

inline VARIANT_BOOL _IDMDCurve::GetIsParamReversed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsParamReversed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum GNTTypePropertyConstants _IDMDCurve::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _IDMDCurve::GetRange ( SAFEARRAY * * MinRangePoint, SAFEARRAY * * MaxRangePoint ) {
    HRESULT _hr = raw_GetRange(MinRangePoint, MaxRangePoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDCurve::GetExactRange ( SAFEARRAY * * MinRangePoint, SAFEARRAY * * MaxRangePoint ) {
    HRESULT _hr = raw_GetExactRange(MinRangePoint, MaxRangePoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDCurve::GetEndPoints ( SAFEARRAY * * StartPoint, SAFEARRAY * * EndPoint ) {
    HRESULT _hr = raw_GetEndPoints(StartPoint, EndPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDCurve::GetParamExtents ( double * MinParam, double * MaxParam ) {
    HRESULT _hr = raw_GetParamExtents(MinParam, MaxParam);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDCurve::GetParamAtPoint ( long NumPoints, SAFEARRAY * * Points, SAFEARRAY * * GuessParams, SAFEARRAY * * MaxDeviations, SAFEARRAY * * Params, SAFEARRAY * * Flags ) {
    HRESULT _hr = raw_GetParamAtPoint(NumPoints, Points, GuessParams, MaxDeviations, Params, Flags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDCurve::GetPointAtParam ( long NumParams, SAFEARRAY * * Params, SAFEARRAY * * Points ) {
    HRESULT _hr = raw_GetPointAtParam(NumParams, Params, Points);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDCurve::GetTangent ( long NumParams, SAFEARRAY * * Params, SAFEARRAY * * Tangents ) {
    HRESULT _hr = raw_GetTangent(NumParams, Params, Tangents);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDCurve::GetCurvature ( long NumParams, SAFEARRAY * * Params, SAFEARRAY * * Directions, SAFEARRAY * * Curvatures ) {
    HRESULT _hr = raw_GetCurvature(NumParams, Params, Directions, Curvatures);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDCurve::GetDerivatives ( long NumParams, SAFEARRAY * * Params, SAFEARRAY * * FirstDerv, SAFEARRAY * * SecondDerv, SAFEARRAY * * ThirdDerv ) {
    HRESULT _hr = raw_GetDerivatives(NumParams, Params, FirstDerv, SecondDerv, ThirdDerv);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDCurve::GetParamAtLength ( double FromParam, double Length, double * Param ) {
    HRESULT _hr = raw_GetParamAtLength(FromParam, Length, Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDCurve::GetLengthAtParam ( double FromParam, double ToParam, double * Length ) {
    HRESULT _hr = raw_GetLengthAtParam(FromParam, ToParam, Length);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long _IDMDCurve::GetContinuity ( ) {
    long _result = 0;
    HRESULT _hr = get_Continuity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _IDMDCurve::GetParamAnomaly ( SAFEARRAY * * Periodicity, VARIANT_BOOL * Singular ) {
    HRESULT _hr = raw_GetParamAnomaly(Periodicity, Singular);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long _IDMDCurve::GetGeometryForm ( ) {
    long _result = 0;
    HRESULT _hr = get_GeometryForm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _IDMDCurve::GetReferenceKey ( SAFEARRAY * * ReferenceKey, VARIANT * KeySize ) {
    HRESULT _hr = raw_GetReferenceKey(ReferenceKey, KeySize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long _IDMDCurve::GetUpdatesCounter ( ) {
    long _result = 0;
    HRESULT _hr = get_UpdatesCounter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr _IDMDCurve::GetGeometry ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Geometry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline CurveVerticesPtr _IDMDCurve::GetCurveVertices ( ) {
    struct CurveVertices * _result = 0;
    HRESULT _hr = get_CurveVertices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CurveVerticesPtr(_result, false);
}

inline HRESULT _IDMDCurve::GetParamAtPointEx ( long NumPoints, SAFEARRAY * * Points, SAFEARRAY * * Params, const _variant_t & GuessParams, VARIANT * MaxDeviations, VARIANT * Flags ) {
    HRESULT _hr = raw_GetParamAtPointEx(NumPoints, Points, Params, GuessParams, MaxDeviations, Flags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// dispinterface CurveVertex wrapper method implementations
//

inline IDispatchPtr CurveVertex::GetApplication ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x79, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline HRESULT CurveVertex::GetPointData ( SAFEARRAY * * Point ) {
    return _com_dispatch_method(this, 0x7c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005", Point);
}

inline IDispatchPtr CurveVertex::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x7d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline HRESULT CurveVertex::GetReferenceKey ( SAFEARRAY * * ReferenceKey, VARIANT * KeySize ) {
    return _com_dispatch_method(this, 0x7e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6011\x480c", ReferenceKey, KeySize);
}

inline enum GNTTypePropertyConstants CurveVertex::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline long CurveVertex::GetUpdatesCounter ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline int CurveVertex::GetID ( ) {
    int _result = 0;
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline int CurveVertex::GetTag ( ) {
    int _result = 0;
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr CurveVertex::GetBody ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

//
// interface _ISEDCurveVertices wrapper method implementations
//

inline IDispatchPtr _ISEDCurveVertices::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _ISEDCurveVertices::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long _ISEDCurveVertices::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IUnknownPtr _ISEDCurveVertices::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline CurveVertexPtr _ISEDCurveVertices::Item ( const _variant_t & index ) {
    struct CurveVertex * _result = 0;
    HRESULT _hr = raw_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return CurveVertexPtr(_result, false);
}

//
// interface _ISEDCurveVertex wrapper method implementations
//

inline IDispatchPtr _ISEDCurveVertex::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _ISEDCurveVertex::GetPointData ( SAFEARRAY * * Point ) {
    HRESULT _hr = raw_GetPointData(Point);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IDispatchPtr _ISEDCurveVertex::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _ISEDCurveVertex::GetReferenceKey ( SAFEARRAY * * ReferenceKey, VARIANT * KeySize ) {
    HRESULT _hr = raw_GetReferenceKey(ReferenceKey, KeySize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline enum GNTTypePropertyConstants _ISEDCurveVertex::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long _ISEDCurveVertex::GetUpdatesCounter ( ) {
    long _result = 0;
    HRESULT _hr = get_UpdatesCounter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int _ISEDCurveVertex::GetID ( ) {
    int _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int _ISEDCurveVertex::GetTag ( ) {
    int _result = 0;
    HRESULT _hr = get_Tag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr _ISEDCurveVertex::GetBody ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface _IDMDBody wrapper method implementations
//

inline IDispatchPtr _IDMDBody::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _IDMDBody::GetEdges ( enum FeatureTopologyQueryTypeConstants EdgeType ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Edges(EdgeType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _IDMDBody::GetFaces ( enum FeatureTopologyQueryTypeConstants FaceType ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Faces(FaceType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _IDMDBody::GetFacesByRay ( double Xorigin, double Yorigin, double Zorigin, double Xdir, double Ydir, double Zdir ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_FacesByRay(Xorigin, Yorigin, Zorigin, Xdir, Ydir, Zdir, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _IDMDBody::GetShells ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Shells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long _IDMDBody::GetFacetCount ( double Tolerance ) {
    long _result = 0;
    HRESULT _hr = get_FacetCount(Tolerance, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _IDMDBody::GetFacetData ( double Tolerance, long * FacetCount, SAFEARRAY * * Points, VARIANT * Normals, VARIANT * TextureCoords, VARIANT * StyleIDs, VARIANT * FaceIDs, const _variant_t & bHonourPrefs ) {
    HRESULT _hr = raw_GetFacetData(Tolerance, FacetCount, Points, Normals, TextureCoords, StyleIDs, FaceIDs, bHonourPrefs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDBody::GetRange ( SAFEARRAY * * MinRangePoint, SAFEARRAY * * MaxRangePoint ) {
    HRESULT _hr = raw_GetRange(MinRangePoint, MaxRangePoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDBody::GetExactRange ( SAFEARRAY * * MinRangePoint, SAFEARRAY * * MaxRangePoint ) {
    HRESULT _hr = raw_GetExactRange(MinRangePoint, MaxRangePoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double _IDMDBody::GetVolume ( ) {
    double _result = 0;
    HRESULT _hr = get_Volume(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum GNTTypePropertyConstants _IDMDBody::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long _IDMDBody::GetGeometryForm ( ) {
    long _result = 0;
    HRESULT _hr = get_GeometryForm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr _IDMDBody::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL _IDMDBody::GetIsSolid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSolid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _IDMDBody::ComputePhysicalProperties ( double Density, double Accuracy, double * Volume, double * Area, double * Mass, SAFEARRAY * * CenterOfGravity, SAFEARRAY * * CenterOfVolume, SAFEARRAY * * GlobalMomentsOfInteria, SAFEARRAY * * PrincipalMomentsOfInteria, SAFEARRAY * * PrincipalAxes, SAFEARRAY * * RadiiOfGyration, double * RelativeAccuracyAchieved, int * Status ) {
    HRESULT _hr = raw_ComputePhysicalProperties(Density, Accuracy, Volume, Area, Mass, CenterOfGravity, CenterOfVolume, GlobalMomentsOfInteria, PrincipalMomentsOfInteria, PrincipalAxes, RadiiOfGyration, RelativeAccuracyAchieved, Status);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long _IDMDBody::GetUpdatesCounter ( ) {
    long _result = 0;
    HRESULT _hr = get_UpdatesCounter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _IDMDBody::GetReferenceKey ( SAFEARRAY * * ReferenceKey, VARIANT * KeySize ) {
    HRESULT _hr = raw_GetReferenceKey(ReferenceKey, KeySize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IDispatchPtr _IDMDBody::CreateCollection ( enum TopologyCollectionTypeConstants Type, const _variant_t & NumberOfObjects, const _variant_t & ObjectArray ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_CreateCollection(Type, NumberOfObjects, ObjectArray, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _IDMDBody::CreateSmartCollection ( IDispatch * SeedObject, enum SmartCollectionTypeConstants CollectionType, const _variant_t & AdditionalObject ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_CreateSmartCollection(SeedObject, CollectionType, AdditionalObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL _IDMDBody::GetValid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Valid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr _IDMDBody::GetFaceByFaceID ( int FaceID ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetFaceByFaceID(FaceID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline TGFramework::FaceStylePtr _IDMDBody::GetStyle ( ) {
    struct TGFramework::FaceStyle * _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TGFramework::FaceStylePtr(_result, false);
}

inline void _IDMDBody::PutStyle ( struct TGFramework::FaceStyle * Style ) {
    HRESULT _hr = put_Style(Style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT _IDMDBody::SetFacesStyle ( long NumberOfFaces, SAFEARRAY * * FacesArray, struct TGFramework::FaceStyle * Style ) {
    HRESULT _hr = raw_SetFacesStyle(NumberOfFaces, FacesArray, Style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL _IDMDBody::GetIsOverriddenBody ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsOverriddenBody(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL _IDMDBody::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Visible(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void _IDMDBody::PutVisible ( VARIANT_BOOL Visible ) {
    HRESULT _hr = put_Visible(Visible);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline int _IDMDBody::GetTag ( ) {
    int _result = 0;
    HRESULT _hr = get_Tag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr _IDMDBody::GetVertices ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Vertices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _IDMDBody::GetEntityByID ( int EntityID ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetEntityByID(EntityID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline int _IDMDBody::GetIDFromEntity ( IDispatch * Entity ) {
    int _result = 0;
    HRESULT _hr = raw_GetIDFromEntity(Entity, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int _IDMDBody::GetEntityType ( IDispatch * Entity ) {
    int _result = 0;
    HRESULT _hr = raw_GetEntityType(Entity, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr _IDMDBody::GetLoops ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Loops(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _IDMDBody::GetExtremePoint ( double DirectionX, double DirectionY, double DirectionZ, double * ExtremeX, double * ExtremeY, double * ExtremeZ ) {
    HRESULT _hr = raw_GetExtremePoint(DirectionX, DirectionY, DirectionZ, ExtremeX, ExtremeY, ExtremeZ);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDBody::ClearOverrides ( ) {
    HRESULT _hr = raw_ClearOverrides();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IDispatchPtr _IDMDBody::GetDocument ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t _IDMDBody::GetDisplayName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_DisplayName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void _IDMDBody::PutDisplayName ( _bstr_t pbsName ) {
    HRESULT _hr = put_DisplayName(pbsName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline int _IDMDBody::GetRefID ( ) {
    int _result = 0;
    HRESULT _hr = get_RefID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _IDMDBody::CalculateWallThickness ( enum WallThicknessDisplayResolution resolution, double * pDUpVector, VARIANT * pvecThicknessData, int * piSize, SAFEARRAY * pdTransform ) {
    HRESULT _hr = raw_CalculateWallThickness(resolution, pDUpVector, pvecThicknessData, piSize, pdTransform);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDBody::GetRenderLineData ( double chordTol, long * pointCount, SAFEARRAY * * Points, long * lineCount, SAFEARRAY * * pointIndices, SAFEARRAY * * edgeIDs ) {
    HRESULT _hr = raw_GetRenderLineData(chordTol, pointCount, Points, lineCount, pointIndices, edgeIDs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDBody::GetFacetDataEx ( double Tolerance, long * pointCount, SAFEARRAY * * Points, long * FacetCount, SAFEARRAY * * FacetPointIndices, VARIANT * NormalCount, VARIANT * Normals, VARIANT * FacetNormalIndices, VARIANT * TextureCoordsCount, VARIANT * TextureCoords, VARIANT * FacetTextureCoordsIndices, VARIANT * FacetStyleIDs, VARIANT * FacetFaceIDs, const _variant_t & bHonourPrefs ) {
    HRESULT _hr = raw_GetFacetDataEx(Tolerance, pointCount, Points, FacetCount, FacetPointIndices, NormalCount, Normals, FacetNormalIndices, TextureCoordsCount, TextureCoords, FacetTextureCoordsIndices, FacetStyleIDs, FacetFaceIDs, bHonourPrefs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IDMDEdgeUse wrapper method implementations
//

inline IDispatchPtr _IDMDEdgeUse::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _IDMDEdgeUse::GetEdge ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Edge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL _IDMDEdgeUse::GetIsOpposedToEdge ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsOpposedToEdge(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL _IDMDEdgeUse::GetIsParamReversed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsParamReversed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr _IDMDEdgeUse::GetLoop ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Loop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _IDMDEdgeUse::GetGeometry ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Geometry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _IDMDEdgeUse::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _IDMDEdgeUse::GetPartner ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Partner(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline enum GNTTypePropertyConstants _IDMDEdgeUse::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL _IDMDEdgeUse::GetIsClosed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsClosed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr _IDMDEdgeUse::GetNext ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Next(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _IDMDEdgeUse::GetPrevious ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Previous(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _IDMDEdgeUse::GetDerivatives ( long NumParams, SAFEARRAY * * Params, SAFEARRAY * * FirstDerv, SAFEARRAY * * SecondDerv, SAFEARRAY * * ThirdDerv ) {
    HRESULT _hr = raw_GetDerivatives(NumParams, Params, FirstDerv, SecondDerv, ThirdDerv);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDEdgeUse::GetRange ( SAFEARRAY * * MinRangePoint, SAFEARRAY * * MaxRangePoint ) {
    HRESULT _hr = raw_GetRange(MinRangePoint, MaxRangePoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDEdgeUse::GetExactRange ( SAFEARRAY * * MinRangePoint, SAFEARRAY * * MaxRangePoint ) {
    HRESULT _hr = raw_GetExactRange(MinRangePoint, MaxRangePoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDEdgeUse::GetEndPoints ( SAFEARRAY * * StartPoint, SAFEARRAY * * EndPoint ) {
    HRESULT _hr = raw_GetEndPoints(StartPoint, EndPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDEdgeUse::GetParamAtPoint ( long NumPoints, SAFEARRAY * * Points, SAFEARRAY * * GuessParams, SAFEARRAY * * MaxDeviations, SAFEARRAY * * Params, SAFEARRAY * * Flags ) {
    HRESULT _hr = raw_GetParamAtPoint(NumPoints, Points, GuessParams, MaxDeviations, Params, Flags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDEdgeUse::GetParamExtents ( double * MinParam, double * MaxParam ) {
    HRESULT _hr = raw_GetParamExtents(MinParam, MaxParam);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDEdgeUse::GetPointAtParam ( long NumParams, SAFEARRAY * * Params, SAFEARRAY * * Points ) {
    HRESULT _hr = raw_GetPointAtParam(NumParams, Params, Points);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDEdgeUse::GetTangent ( long NumParams, SAFEARRAY * * Params, SAFEARRAY * * Tangents ) {
    HRESULT _hr = raw_GetTangent(NumParams, Params, Tangents);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDEdgeUse::GetParamAtPointEx ( long NumPoints, SAFEARRAY * * Points, SAFEARRAY * * Params, const _variant_t & GuessParams, VARIANT * MaxDeviations, VARIANT * Flags ) {
    HRESULT _hr = raw_GetParamAtPointEx(NumPoints, Points, Params, GuessParams, MaxDeviations, Flags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IDMDShells wrapper method implementations
//

inline IDispatchPtr _IDMDShells::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _IDMDShells::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long _IDMDShells::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IUnknownPtr _IDMDShells::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IDispatchPtr _IDMDShells::Item ( const _variant_t & index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline enum GNTTypePropertyConstants _IDMDShells::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IDMDFaces wrapper method implementations
//

inline IDispatchPtr _IDMDFaces::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _IDMDFaces::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long _IDMDFaces::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IUnknownPtr _IDMDFaces::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IDispatchPtr _IDMDFaces::Item ( const _variant_t & index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _IDMDFaces::Add ( IDispatch * Item ) {
    HRESULT _hr = raw_Add(Item);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDFaces::Remove ( IDispatch * Item ) {
    HRESULT _hr = raw_Remove(Item);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDFaces::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL _IDMDFaces::GetIsUserDefined ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsUserDefined(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum GNTTypePropertyConstants _IDMDFaces::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IDMDLoops wrapper method implementations
//

inline IDispatchPtr _IDMDLoops::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _IDMDLoops::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long _IDMDLoops::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IUnknownPtr _IDMDLoops::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IDispatchPtr _IDMDLoops::Item ( const _variant_t & index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline enum GNTTypePropertyConstants _IDMDLoops::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IDMDEdgeUses wrapper method implementations
//

inline IDispatchPtr _IDMDEdgeUses::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _IDMDEdgeUses::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long _IDMDEdgeUses::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IUnknownPtr _IDMDEdgeUses::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IDispatchPtr _IDMDEdgeUses::Item ( const _variant_t & index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline enum GNTTypePropertyConstants _IDMDEdgeUses::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IDMDEdges wrapper method implementations
//

inline IDispatchPtr _IDMDEdges::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _IDMDEdges::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long _IDMDEdges::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IUnknownPtr _IDMDEdges::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IDispatchPtr _IDMDEdges::Item ( const _variant_t & index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _IDMDEdges::Add ( IDispatch * Item ) {
    HRESULT _hr = raw_Add(Item);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDEdges::Remove ( IDispatch * Item ) {
    HRESULT _hr = raw_Remove(Item);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDEdges::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL _IDMDEdges::GetIsUserDefined ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsUserDefined(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum GNTTypePropertyConstants _IDMDEdges::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IDMDVertices wrapper method implementations
//

inline IDispatchPtr _IDMDVertices::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _IDMDVertices::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long _IDMDVertices::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IUnknownPtr _IDMDVertices::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IDispatchPtr _IDMDVertices::Item ( const _variant_t & index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _IDMDVertices::Add ( IDispatch * Item ) {
    HRESULT _hr = raw_Add(Item);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDVertices::Remove ( IDispatch * Item ) {
    HRESULT _hr = raw_Remove(Item);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDVertices::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL _IDMDVertices::GetIsUserDefined ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsUserDefined(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum GNTTypePropertyConstants _IDMDVertices::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IDMDCollection wrapper method implementations
//

inline IDispatchPtr _IDMDCollection::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _IDMDCollection::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long _IDMDCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IUnknownPtr _IDMDCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

inline IDispatchPtr _IDMDCollection::Item ( const _variant_t & index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _IDMDCollection::Add ( IDispatch * Item ) {
    HRESULT _hr = raw_Add(Item);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDCollection::Remove ( IDispatch * Item ) {
    HRESULT _hr = raw_Remove(Item);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDCollection::RemoveAll ( ) {
    HRESULT _hr = raw_RemoveAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL _IDMDCollection::GetIsUserDefined ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsUserDefined(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum GNTTypePropertyConstants _IDMDCollection::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IDMDEdge wrapper method implementations
//

inline IDispatchPtr _IDMDEdge::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _IDMDEdge::GetEdgeUses ( long * NumEdgeUses, SAFEARRAY * * EdgeUses ) {
    HRESULT _hr = raw_GetEdgeUses(NumEdgeUses, EdgeUses);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IDispatchPtr _IDMDEdge::GetEndVertex ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_EndVertex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _IDMDEdge::GetFaces ( long * NumFaces, SAFEARRAY * * Faces ) {
    HRESULT _hr = raw_GetFaces(NumFaces, Faces);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IDispatchPtr _IDMDEdge::GetGeometry ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Geometry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL _IDMDEdge::GetIsParamReversed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsParamReversed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL _IDMDEdge::GetIsClosed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsClosed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr _IDMDEdge::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _IDMDEdge::GetReferenceKey ( SAFEARRAY * * ReferenceKey, VARIANT * KeySize ) {
    HRESULT _hr = raw_GetReferenceKey(ReferenceKey, KeySize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IDispatchPtr _IDMDEdge::GetStartVertex ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_StartVertex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long _IDMDEdge::GetStrokeCount ( double Tolerance ) {
    long _result = 0;
    HRESULT _hr = get_StrokeCount(Tolerance, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _IDMDEdge::GetStrokeData ( double Tolerance, long * StrokeCount, SAFEARRAY * * Points, SAFEARRAY * * Params ) {
    HRESULT _hr = raw_GetStrokeData(Tolerance, StrokeCount, Points, Params);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline enum GNTTypePropertyConstants _IDMDEdge::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long _IDMDEdge::GetContinuity ( ) {
    long _result = 0;
    HRESULT _hr = get_Continuity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _IDMDEdge::GetCurvature ( long NumParams, SAFEARRAY * * Params, SAFEARRAY * * Directions, SAFEARRAY * * Curvatures ) {
    HRESULT _hr = raw_GetCurvature(NumParams, Params, Directions, Curvatures);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDEdge::GetDerivatives ( long NumParams, SAFEARRAY * * Params, SAFEARRAY * * FirstDerv, SAFEARRAY * * SecondDerv, SAFEARRAY * * ThirdDerv ) {
    HRESULT _hr = raw_GetDerivatives(NumParams, Params, FirstDerv, SecondDerv, ThirdDerv);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long _IDMDEdge::GetGeometryForm ( ) {
    long _result = 0;
    HRESULT _hr = get_GeometryForm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _IDMDEdge::GetRange ( SAFEARRAY * * MinRangePoint, SAFEARRAY * * MaxRangePoint ) {
    HRESULT _hr = raw_GetRange(MinRangePoint, MaxRangePoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDEdge::GetExactRange ( SAFEARRAY * * MinRangePoint, SAFEARRAY * * MaxRangePoint ) {
    HRESULT _hr = raw_GetExactRange(MinRangePoint, MaxRangePoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDEdge::GetEndPoints ( SAFEARRAY * * StartPoint, SAFEARRAY * * EndPoint ) {
    HRESULT _hr = raw_GetEndPoints(StartPoint, EndPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDEdge::GetLengthAtParam ( double FromParam, double ToParam, double * Length ) {
    HRESULT _hr = raw_GetLengthAtParam(FromParam, ToParam, Length);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDEdge::GetParamAnomaly ( SAFEARRAY * * Periodicity, VARIANT_BOOL * Singular ) {
    HRESULT _hr = raw_GetParamAnomaly(Periodicity, Singular);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDEdge::GetParamAtPoint ( long NumPoints, SAFEARRAY * * Points, SAFEARRAY * * GuessParams, SAFEARRAY * * MaxDeviations, SAFEARRAY * * Params, SAFEARRAY * * Flags ) {
    HRESULT _hr = raw_GetParamAtPoint(NumPoints, Points, GuessParams, MaxDeviations, Params, Flags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDEdge::GetParamAtLength ( double FromParam, double Length, double * Param ) {
    HRESULT _hr = raw_GetParamAtLength(FromParam, Length, Param);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDEdge::GetParamExtents ( double * MinParam, double * MaxParam ) {
    HRESULT _hr = raw_GetParamExtents(MinParam, MaxParam);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDEdge::GetPointAtParam ( long NumParams, SAFEARRAY * * Params, SAFEARRAY * * Points ) {
    HRESULT _hr = raw_GetPointAtParam(NumParams, Params, Points);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDEdge::GetTangent ( long NumParams, SAFEARRAY * * Params, SAFEARRAY * * Tangents ) {
    HRESULT _hr = raw_GetTangent(NumParams, Params, Tangents);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long _IDMDEdge::GetUpdatesCounter ( ) {
    long _result = 0;
    HRESULT _hr = get_UpdatesCounter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int _IDMDEdge::GetID ( ) {
    int _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int _IDMDEdge::GetTag ( ) {
    int _result = 0;
    HRESULT _hr = get_Tag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr _IDMDEdge::GetBody ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _IDMDEdge::GetShells ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Shells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _IDMDEdge::GetParamAtPointEx ( long NumPoints, SAFEARRAY * * Points, SAFEARRAY * * Params, const _variant_t & GuessParams, VARIANT * MaxDeviations, VARIANT * Flags ) {
    HRESULT _hr = raw_GetParamAtPointEx(NumPoints, Points, Params, GuessParams, MaxDeviations, Flags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IDispatchPtr _IDMDEdge::GetDocument ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _IDMDEdge::GetRenderLineData ( double chordTol, long * pointCount, SAFEARRAY * * Points, long * lineCount, SAFEARRAY * * pointIndices, SAFEARRAY * * edgeIDs ) {
    HRESULT _hr = raw_GetRenderLineData(chordTol, pointCount, Points, lineCount, pointIndices, edgeIDs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IDMDFace wrapper method implementations
//

inline IDispatchPtr _IDMDFace::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _IDMDFace::GetBody ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _IDMDFace::GetEdges ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Edges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _IDMDFace::GetGeometry ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Geometry(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL _IDMDFace::GetIsParamReversed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsParamReversed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr _IDMDFace::GetLoops ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Loops(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _IDMDFace::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _IDMDFace::GetReferenceKey ( SAFEARRAY * * ReferenceKey, VARIANT * KeySize ) {
    HRESULT _hr = raw_GetReferenceKey(ReferenceKey, KeySize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IDispatchPtr _IDMDFace::GetShell ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Shell(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long _IDMDFace::GetFacetCount ( double Tolerance ) {
    long _result = 0;
    HRESULT _hr = get_FacetCount(Tolerance, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _IDMDFace::GetFacetData ( double Tolerance, long * FacetCount, SAFEARRAY * * Points, VARIANT * Normals, VARIANT * TextureCoords ) {
    HRESULT _hr = raw_GetFacetData(Tolerance, FacetCount, Points, Normals, TextureCoords);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline enum GNTTypePropertyConstants _IDMDFace::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr _IDMDFace::GetVertices ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Vertices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline double _IDMDFace::GetArea ( ) {
    double _result = 0;
    HRESULT _hr = get_Area(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long _IDMDFace::GetGeometryForm ( ) {
    long _result = 0;
    HRESULT _hr = get_GeometryForm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _IDMDFace::GetRange ( SAFEARRAY * * MinRangePoint, SAFEARRAY * * MaxRangePoint ) {
    HRESULT _hr = raw_GetRange(MinRangePoint, MaxRangePoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDFace::GetExactRange ( SAFEARRAY * * MinRangePoint, SAFEARRAY * * MaxRangePoint ) {
    HRESULT _hr = raw_GetExactRange(MinRangePoint, MaxRangePoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDFace::GetDerivatives ( long NumParams, SAFEARRAY * * Params, SAFEARRAY * * UPartials, SAFEARRAY * * VPartials, SAFEARRAY * * UUPartials, SAFEARRAY * * UVPartials, SAFEARRAY * * VVPartials, SAFEARRAY * * UUUPartials, SAFEARRAY * * VVVPartials ) {
    HRESULT _hr = raw_GetDerivatives(NumParams, Params, UPartials, VPartials, UUPartials, UVPartials, VVPartials, UUUPartials, VVVPartials);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDFace::GetNormal ( long NumParams, SAFEARRAY * * Params, SAFEARRAY * * Normals ) {
    HRESULT _hr = raw_GetNormal(NumParams, Params, Normals);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDFace::GetParamAnomaly ( SAFEARRAY * * PeriodicityU, SAFEARRAY * * PeriodicityV, long * EndSingularityU, SAFEARRAY * * SingularityU, long * EndSingularityV, SAFEARRAY * * SingularityV ) {
    HRESULT _hr = raw_GetParamAnomaly(PeriodicityU, PeriodicityV, EndSingularityU, SingularityU, EndSingularityV, SingularityV);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDFace::GetParamOnFace ( long NumParams, SAFEARRAY * * Params, SAFEARRAY * * OnFace ) {
    HRESULT _hr = raw_GetParamOnFace(NumParams, Params, OnFace);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDFace::GetParamRange ( SAFEARRAY * * MinParam, SAFEARRAY * * MaxParam ) {
    HRESULT _hr = raw_GetParamRange(MinParam, MaxParam);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDFace::GetPointAtParam ( long NumParams, SAFEARRAY * * Params, SAFEARRAY * * Points ) {
    HRESULT _hr = raw_GetPointAtParam(NumParams, Params, Points);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDFace::GetParamAtPoint ( long NumPoints, SAFEARRAY * * Points, SAFEARRAY * * GuessParams, SAFEARRAY * * MaxDeviations, SAFEARRAY * * Params, SAFEARRAY * * Flags ) {
    HRESULT _hr = raw_GetParamAtPoint(NumPoints, Points, GuessParams, MaxDeviations, Params, Flags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDFace::GetTangents ( long NumParams, SAFEARRAY * * Params, SAFEARRAY * * UTangents, SAFEARRAY * * VTangents ) {
    HRESULT _hr = raw_GetTangents(NumParams, Params, UTangents, VTangents);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long _IDMDFace::GetContinuity ( ) {
    long _result = 0;
    HRESULT _hr = get_Continuity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _IDMDFace::GetCurvatures ( long NumParams, SAFEARRAY * * Params, SAFEARRAY * * MaxTangents, SAFEARRAY * * MaxCurvatures, SAFEARRAY * * MinCurvatures ) {
    HRESULT _hr = raw_GetCurvatures(NumParams, Params, MaxTangents, MaxCurvatures, MinCurvatures);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long _IDMDFace::GetUpdatesCounter ( ) {
    long _result = 0;
    HRESULT _hr = get_UpdatesCounter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline TGFramework::FaceStylePtr _IDMDFace::GetStyle ( ) {
    struct TGFramework::FaceStyle * _result = 0;
    HRESULT _hr = get_Style(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return TGFramework::FaceStylePtr(_result, false);
}

inline void _IDMDFace::PutStyle ( struct TGFramework::FaceStyle * Style ) {
    HRESULT _hr = put_Style(Style);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT _IDMDFace::GetBendCenterLineAttributes ( VARIANT_BOOL * BendAtributesExist, VARIANT * BendCenterLineEndPoints, VARIANT * AttrbuteVersion, VARIANT * BendRadius, VARIANT * BendAngle, VARIANT * BendSweepAngle, VARIANT * BendOrientation ) {
    HRESULT _hr = raw_GetBendCenterLineAttributes(BendAtributesExist, BendCenterLineEndPoints, AttrbuteVersion, BendRadius, BendAngle, BendSweepAngle, BendOrientation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDFace::GetBendCenterLineAttributesEx ( VARIANT_BOOL * BendAtributesExist, VARIANT * BendCenterLineEndPoints, VARIANT * AttrbuteVersion, VARIANT * BendRadius, VARIANT * BendAngle, VARIANT * BendSweepAngle, VARIANT * BendOrientation ) {
    HRESULT _hr = raw_GetBendCenterLineAttributesEx(BendAtributesExist, BendCenterLineEndPoints, AttrbuteVersion, BendRadius, BendAngle, BendSweepAngle, BendOrientation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline int _IDMDFace::GetID ( ) {
    int _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int _IDMDFace::GetTag ( ) {
    int _result = 0;
    HRESULT _hr = get_Tag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _IDMDFace::GetParamAtPointEx ( long NumPoints, SAFEARRAY * * Points, SAFEARRAY * * Params, const _variant_t & GuessParams, VARIANT * MaxDeviations, VARIANT * Flags ) {
    HRESULT _hr = raw_GetParamAtPointEx(NumPoints, Points, Params, GuessParams, MaxDeviations, Flags);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDFace::GetRGBAVals ( double * RVal, double * GVal, double * BVal, double * AVal ) {
    HRESULT _hr = raw_GetRGBAVals(RVal, GVal, BVal, AVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IDispatchPtr _IDMDFace::GetDocument ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _IDMDFace::GetRenderLineData ( double chordTol, long * pointCount, SAFEARRAY * * Points, long * lineCount, SAFEARRAY * * pointIndices, SAFEARRAY * * edgeIDs ) {
    HRESULT _hr = raw_GetRenderLineData(chordTol, pointCount, Points, lineCount, pointIndices, edgeIDs);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _variant_t _IDMDFace::GetFeatureIDsAndNames ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_FeatureIDsAndNames(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline HRESULT _IDMDFace::GetFacetDataEx ( double Tolerance, long * pointCount, SAFEARRAY * * Points, long * FacetCount, SAFEARRAY * * FacetPointIndices, VARIANT * NormalCount, VARIANT * Normals, VARIANT * FacetNormalIndices, VARIANT * TextureCoordsCount, VARIANT * TextureCoords, VARIANT * FacetTextureCoordsIndices ) {
    HRESULT _hr = raw_GetFacetDataEx(Tolerance, pointCount, Points, FacetCount, FacetPointIndices, NormalCount, Normals, FacetNormalIndices, TextureCoordsCount, TextureCoords, FacetTextureCoordsIndices);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IDMDLoop wrapper method implementations
//

inline IDispatchPtr _IDMDLoop::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _IDMDLoop::GetEdges ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Edges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _IDMDLoop::GetEdgeUses ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_EdgeUses(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _IDMDLoop::GetFace ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Face(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL _IDMDLoop::GetIsOuterLoop ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsOuterLoop(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr _IDMDLoop::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _IDMDLoop::GetRange ( SAFEARRAY * * MinRangePoint, SAFEARRAY * * MaxRangePoint ) {
    HRESULT _hr = raw_GetRange(MinRangePoint, MaxRangePoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDLoop::GetExactRange ( SAFEARRAY * * MinRangePoint, SAFEARRAY * * MaxRangePoint ) {
    HRESULT _hr = raw_GetExactRange(MinRangePoint, MaxRangePoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline enum GNTTypePropertyConstants _IDMDLoop::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int _IDMDLoop::GetID ( ) {
    int _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int _IDMDLoop::GetTag ( ) {
    int _result = 0;
    HRESULT _hr = get_Tag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr _IDMDLoop::GetBody ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _IDMDLoop::GetVertices ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Vertices(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _IDMDLoop::GetDocument ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface _IDMDShell wrapper method implementations
//

inline IDispatchPtr _IDMDShell::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _IDMDShell::GetBody ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _IDMDShell::GetEdges ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Edges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _IDMDShell::GetFaces ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Faces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL _IDMDShell::GetIsClosed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsClosed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL _IDMDShell::GetIsPointInside ( SAFEARRAY * * Point ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPointInside(Point, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL _IDMDShell::GetIsVoid ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsVoid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr _IDMDShell::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _IDMDShell::GetRange ( SAFEARRAY * * MinRangePoint, SAFEARRAY * * MaxRangePoint ) {
    HRESULT _hr = raw_GetRange(MinRangePoint, MaxRangePoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDShell::GetExactRange ( SAFEARRAY * * MinRangePoint, SAFEARRAY * * MaxRangePoint ) {
    HRESULT _hr = raw_GetExactRange(MinRangePoint, MaxRangePoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline enum GNTTypePropertyConstants _IDMDShell::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double _IDMDShell::GetVolume ( ) {
    double _result = 0;
    HRESULT _hr = get_Volume(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _IDMDShell::GetNonStitchedEdges ( long * NumEdgeCollections, SAFEARRAY * * EdgeCollections ) {
    HRESULT _hr = raw_GetNonStitchedEdges(NumEdgeCollections, EdgeCollections);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline int _IDMDShell::GetID ( ) {
    int _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int _IDMDShell::GetTag ( ) {
    int _result = 0;
    HRESULT _hr = get_Tag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr _IDMDShell::GetDocument ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface _IDMDVertex wrapper method implementations
//

inline IDispatchPtr _IDMDVertex::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _IDMDVertex::GetEdges ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Edges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _IDMDVertex::GetFaces ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Faces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _IDMDVertex::GetPointData ( SAFEARRAY * * Point ) {
    HRESULT _hr = raw_GetPointData(Point);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IDispatchPtr _IDMDVertex::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _IDMDVertex::GetReferenceKey ( SAFEARRAY * * ReferenceKey, VARIANT * KeySize ) {
    HRESULT _hr = raw_GetReferenceKey(ReferenceKey, KeySize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline enum GNTTypePropertyConstants _IDMDVertex::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long _IDMDVertex::GetUpdatesCounter ( ) {
    long _result = 0;
    HRESULT _hr = get_UpdatesCounter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int _IDMDVertex::GetID ( ) {
    int _result = 0;
    HRESULT _hr = get_ID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int _IDMDVertex::GetTag ( ) {
    int _result = 0;
    HRESULT _hr = get_Tag(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr _IDMDVertex::GetBody ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Body(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _IDMDVertex::GetLoops ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Loops(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _IDMDVertex::GetShells ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Shells(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _IDMDVertex::GetDocument ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Document(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface _IDMDBSplineSurface wrapper method implementations
//

inline IDispatchPtr _IDMDBSplineSurface::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _IDMDBSplineSurface::GetBSplineInfo ( SAFEARRAY * * Order, SAFEARRAY * * NumPoles, SAFEARRAY * * NumKnots, VARIANT_BOOL * Rational, SAFEARRAY * * Closed, SAFEARRAY * * Periodic, VARIANT_BOOL * Planar ) {
    HRESULT _hr = raw_GetBSplineInfo(Order, NumPoles, NumKnots, Rational, Closed, Periodic, Planar);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDBSplineSurface::GetBSplineData ( long NumPoles, long NumKnotsU, long NumKnotsV, long NumWeights, SAFEARRAY * * Poles, SAFEARRAY * * KnotsU, SAFEARRAY * * KnotsV, SAFEARRAY * * Weights ) {
    HRESULT _hr = raw_GetBSplineData(NumPoles, NumKnotsU, NumKnotsV, NumWeights, Poles, KnotsU, KnotsV, Weights);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDBSplineSurface::GetNumKnots ( SAFEARRAY * * NumKnots ) {
    HRESULT _hr = raw_GetNumKnots(NumKnots);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDBSplineSurface::GetNumPoles ( SAFEARRAY * * NumPoles ) {
    HRESULT _hr = raw_GetNumPoles(NumPoles);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDBSplineSurface::GetOrder ( SAFEARRAY * * Order ) {
    HRESULT _hr = raw_GetOrder(Order);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDBSplineSurface::GetIsPeriodic ( SAFEARRAY * * Periodic ) {
    HRESULT _hr = raw_GetIsPeriodic(Periodic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL _IDMDBSplineSurface::GetIsPlanar ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPlanar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL _IDMDBSplineSurface::GetIsRational ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsRational(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _IDMDBSplineSurface::GetIsClosed ( SAFEARRAY * * Closed ) {
    HRESULT _hr = raw_GetIsClosed(Closed);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline enum GNTTypePropertyConstants _IDMDBSplineSurface::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr _IDMDBSplineSurface::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface _IDMDCone wrapper method implementations
//

inline IDispatchPtr _IDMDCone::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _IDMDCone::GetAxisVector ( SAFEARRAY * * AxisVector ) {
    HRESULT _hr = raw_GetAxisVector(AxisVector);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDCone::GetBasePoint ( SAFEARRAY * * BasePoint ) {
    HRESULT _hr = raw_GetBasePoint(BasePoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDCone::GetConeData ( SAFEARRAY * * BasePoint, SAFEARRAY * * AxisVector, double * Radius, double * HalfAngle, VARIANT_BOOL * Expanding ) {
    HRESULT _hr = raw_GetConeData(BasePoint, AxisVector, Radius, HalfAngle, Expanding);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL _IDMDCone::GetExpanding ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Expanding(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double _IDMDCone::GetHalfAngle ( ) {
    double _result = 0;
    HRESULT _hr = get_HalfAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr _IDMDCone::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline double _IDMDCone::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum GNTTypePropertyConstants _IDMDCone::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IDMDCylinder wrapper method implementations
//

inline IDispatchPtr _IDMDCylinder::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _IDMDCylinder::GetAxisVector ( SAFEARRAY * * AxisVect ) {
    HRESULT _hr = raw_GetAxisVector(AxisVect);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDCylinder::GetBasePoint ( SAFEARRAY * * BasePoint ) {
    HRESULT _hr = raw_GetBasePoint(BasePoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDCylinder::GetCylinderData ( SAFEARRAY * * BasePoint, SAFEARRAY * * AxisVector, double * Radius ) {
    HRESULT _hr = raw_GetCylinderData(BasePoint, AxisVector, Radius);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline enum GNTTypePropertyConstants _IDMDCylinder::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr _IDMDCylinder::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline double _IDMDCylinder::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IDMDMesh wrapper method implementations
//

inline IDispatchPtr _IDMDMesh::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _IDMDMesh::GetTrianglePoints ( long * FacetCount, SAFEARRAY * * Points ) {
    HRESULT _hr = raw_GetTrianglePoints(FacetCount, Points);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDMesh::GetTriangleNormals ( long * FacetCount, SAFEARRAY * * Normals ) {
    HRESULT _hr = raw_GetTriangleNormals(FacetCount, Normals);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDMesh::GetTriangleData ( long * FacetCount, SAFEARRAY * * Points, SAFEARRAY * * Normals ) {
    HRESULT _hr = raw_GetTriangleData(FacetCount, Points, Normals);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline enum GNTTypePropertyConstants _IDMDMesh::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr _IDMDMesh::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface _IDMDPlane wrapper method implementations
//

inline IDispatchPtr _IDMDPlane::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _IDMDPlane::GetNormalVector ( SAFEARRAY * * NormalVector ) {
    HRESULT _hr = raw_GetNormalVector(NormalVector);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDPlane::GetPlaneData ( SAFEARRAY * * RootPoint, SAFEARRAY * * NormalVector ) {
    HRESULT _hr = raw_GetPlaneData(RootPoint, NormalVector);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDPlane::GetRootPoint ( SAFEARRAY * * RootPoint ) {
    HRESULT _hr = raw_GetRootPoint(RootPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline enum GNTTypePropertyConstants _IDMDPlane::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr _IDMDPlane::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _IDMDPlane::GetPlaneProperties ( double ReqRelAccy, double * Area, SAFEARRAY * * RootPoint, SAFEARRAY * * Moments, SAFEARRAY * * PrincipalAxes, double * RelAccyAchieved ) {
    HRESULT _hr = raw_GetPlaneProperties(ReqRelAccy, Area, RootPoint, Moments, PrincipalAxes, RelAccyAchieved);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IDMDSphere wrapper method implementations
//

inline IDispatchPtr _IDMDSphere::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _IDMDSphere::GetCenterPoint ( SAFEARRAY * * CenterPoint ) {
    HRESULT _hr = raw_GetCenterPoint(CenterPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IDispatchPtr _IDMDSphere::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline double _IDMDSphere::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _IDMDSphere::GetSphereData ( SAFEARRAY * * CenterPoint, double * Radius ) {
    HRESULT _hr = raw_GetSphereData(CenterPoint, Radius);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline enum GNTTypePropertyConstants _IDMDSphere::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IDMDTorus wrapper method implementations
//

inline IDispatchPtr _IDMDTorus::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _IDMDTorus::GetAxisVector ( SAFEARRAY * * AxisVector ) {
    HRESULT _hr = raw_GetAxisVector(AxisVector);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDTorus::GetCenterPoint ( SAFEARRAY * * CenterPoint ) {
    HRESULT _hr = raw_GetCenterPoint(CenterPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double _IDMDTorus::GetMajorRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_MajorRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline double _IDMDTorus::GetMinorRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_MinorRadius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr _IDMDTorus::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _IDMDTorus::GetTorusData ( SAFEARRAY * * CenterPoint, SAFEARRAY * * AxisVector, double * MajorRadius, double * MinorRadius ) {
    HRESULT _hr = raw_GetTorusData(CenterPoint, AxisVector, MajorRadius, MinorRadius);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline enum GNTTypePropertyConstants _IDMDTorus::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IDMDBSplineCurve wrapper method implementations
//

inline IDispatchPtr _IDMDBSplineCurve::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _IDMDBSplineCurve::GetBSplineData ( long NumPoles, long NumKnots, long NumWeights, SAFEARRAY * * Poles, SAFEARRAY * * Knots, SAFEARRAY * * Weights ) {
    HRESULT _hr = raw_GetBSplineData(NumPoles, NumKnots, NumWeights, Poles, Knots, Weights);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDBSplineCurve::GetBSplineInfo ( long * Order, long * NumPoles, long * NumKnots, VARIANT_BOOL * Rational, VARIANT_BOOL * Closed, VARIANT_BOOL * Periodic, VARIANT_BOOL * Planar, SAFEARRAY * * PlaneVector ) {
    HRESULT _hr = raw_GetBSplineInfo(Order, NumPoles, NumKnots, Rational, Closed, Periodic, Planar, PlaneVector);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL _IDMDBSplineCurve::GetIsClosed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetIsClosed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long _IDMDBSplineCurve::GetNumKnots ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetNumKnots(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long _IDMDBSplineCurve::GetNumPoles ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetNumPoles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long _IDMDBSplineCurve::GetOrder ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr _IDMDBSplineCurve::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL _IDMDBSplineCurve::GetIsPeriodic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetIsPeriodic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL _IDMDBSplineCurve::GetIsPlanar ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsPlanar(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL _IDMDBSplineCurve::GetIsRational ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsRational(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum GNTTypePropertyConstants _IDMDBSplineCurve::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IDMDCircle wrapper method implementations
//

inline IDispatchPtr _IDMDCircle::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _IDMDCircle::GetAxisVector ( SAFEARRAY * * AxisVector ) {
    HRESULT _hr = raw_GetAxisVector(AxisVector);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDCircle::GetCenterPoint ( SAFEARRAY * * CenterPoint ) {
    HRESULT _hr = raw_GetCenterPoint(CenterPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDCircle::GetCircleData ( SAFEARRAY * * CenterPoint, SAFEARRAY * * AxisVector, double * Radius ) {
    HRESULT _hr = raw_GetCircleData(CenterPoint, AxisVector, Radius);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IDispatchPtr _IDMDCircle::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline double _IDMDCircle::GetRadius ( ) {
    double _result = 0;
    HRESULT _hr = get_Radius(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum GNTTypePropertyConstants _IDMDCircle::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IDMDEllipse wrapper method implementations
//

inline IDispatchPtr _IDMDEllipse::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _IDMDEllipse::GetAxisVector ( SAFEARRAY * * AxisVector ) {
    HRESULT _hr = raw_GetAxisVector(AxisVector);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDEllipse::GetCenterPoint ( SAFEARRAY * * CenterPoint ) {
    HRESULT _hr = raw_GetCenterPoint(CenterPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDEllipse::GetEllipseData ( SAFEARRAY * * CenterPoint, SAFEARRAY * * AxisVector, SAFEARRAY * * MajorAxis, double * MinorMajorRatio ) {
    HRESULT _hr = raw_GetEllipseData(CenterPoint, AxisVector, MajorAxis, MinorMajorRatio);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDEllipse::GetMajorAxis ( SAFEARRAY * * MajorAxis ) {
    HRESULT _hr = raw_GetMajorAxis(MajorAxis);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline double _IDMDEllipse::GetMinorMajorRatio ( ) {
    double _result = 0;
    HRESULT _hr = get_MinorMajorRatio(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr _IDMDEllipse::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline enum GNTTypePropertyConstants _IDMDEllipse::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface _IDMDLine wrapper method implementations
//

inline IDispatchPtr _IDMDLine::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _IDMDLine::GetLineData ( SAFEARRAY * * RootPoint, SAFEARRAY * * DirectionVector ) {
    HRESULT _hr = raw_GetLineData(RootPoint, DirectionVector);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IDispatchPtr _IDMDLine::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _IDMDLine::GetRootPoint ( SAFEARRAY * * RootPoint ) {
    HRESULT _hr = raw_GetRootPoint(RootPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline enum GNTTypePropertyConstants _IDMDLine::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _IDMDLine::GetVector ( SAFEARRAY * * Vector ) {
    HRESULT _hr = raw_GetVector(Vector);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IDMDPLine wrapper method implementations
//

inline IDispatchPtr _IDMDPLine::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _IDMDPLine::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline enum GNTTypePropertyConstants _IDMDPLine::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT _IDMDPLine::GetPLineData ( long * PointsCount, SAFEARRAY * * Points, VARIANT_BOOL * Closed, double * BaseParameter ) {
    HRESULT _hr = raw_GetPLineData(PointsCount, Points, Closed, BaseParameter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDPLine::GetPoints ( long * PointsCount, SAFEARRAY * * Points ) {
    HRESULT _hr = raw_GetPoints(PointsCount, Points);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDPLine::GetClosed ( VARIANT_BOOL * Closed ) {
    HRESULT _hr = raw_GetClosed(Closed);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDPLine::GetBaseParameter ( double * BaseParameter ) {
    HRESULT _hr = raw_GetBaseParameter(BaseParameter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface _IDMDParamBSplineCurve wrapper method implementations
//

inline IDispatchPtr _IDMDParamBSplineCurve::GetApplication ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT _IDMDParamBSplineCurve::GetBSpline2dData ( long NumPoles, long NumKnots, long NumWeights, SAFEARRAY * * Poles, SAFEARRAY * * Knots, SAFEARRAY * * Weights ) {
    HRESULT _hr = raw_GetBSpline2dData(NumPoles, NumKnots, NumWeights, Poles, Knots, Weights);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT _IDMDParamBSplineCurve::GetBSpline2dInfo ( long * Order, long * NumPoles, long * NumKnots, VARIANT_BOOL * Rational, VARIANT_BOOL * Closed, VARIANT_BOOL * Periodic ) {
    HRESULT _hr = raw_GetBSpline2dInfo(Order, NumPoles, NumKnots, Rational, Closed, Periodic);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline VARIANT_BOOL _IDMDParamBSplineCurve::GetIsClosed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetIsClosed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr _IDMDParamBSplineCurve::GetParent ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long _IDMDParamBSplineCurve::GetNumKnots ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetNumKnots(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long _IDMDParamBSplineCurve::GetNumPoles ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetNumPoles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long _IDMDParamBSplineCurve::GetOrder ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL _IDMDParamBSplineCurve::GetIsPeriodic ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = raw_GetIsPeriodic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline VARIANT_BOOL _IDMDParamBSplineCurve::GetIsRational ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsRational(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum GNTTypePropertyConstants _IDMDParamBSplineCurve::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    HRESULT _hr = get_Type(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// dispinterface Body wrapper method implementations
//

inline IDispatchPtr Body::GetApplication ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x33, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr Body::GetEdges ( enum FeatureTopologyQueryTypeConstants EdgeType ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x34, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", EdgeType);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr Body::GetFaces ( enum FeatureTopologyQueryTypeConstants FaceType ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x35, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0003", FaceType);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr Body::GetFacesByRay ( double Xorigin, double Yorigin, double Zorigin, double Xdir, double Ydir, double Zdir ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x44, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, 
        L"\x0005\x0005\x0005\x0005\x0005\x0005", Xorigin, Yorigin, Zorigin, Xdir, Ydir, Zdir);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr Body::GetShells ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x36, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline long Body::GetFacetCount ( double Tolerance ) {
    long _result = 0;
    _com_dispatch_method(this, 0x37, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, 
        L"\x0005", Tolerance);
    return _result;
}

inline HRESULT Body::GetFacetData ( double Tolerance, long * FacetCount, SAFEARRAY * * Points, VARIANT * Normals, VARIANT * TextureCoords, VARIANT * StyleIDs, VARIANT * FaceIDs, const _variant_t & bHonourPrefs ) {
    return _com_dispatch_method(this, 0x38, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0005\x4003\x6005\x480c\x480c\x480c\x480c\x080c", Tolerance, FacetCount, Points, Normals, TextureCoords, StyleIDs, FaceIDs, &bHonourPrefs);
}

inline HRESULT Body::GetRange ( SAFEARRAY * * MinRangePoint, SAFEARRAY * * MaxRangePoint ) {
    return _com_dispatch_method(this, 0x3a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005\x6005", MinRangePoint, MaxRangePoint);
}

inline HRESULT Body::GetExactRange ( SAFEARRAY * * MinRangePoint, SAFEARRAY * * MaxRangePoint ) {
    return _com_dispatch_method(this, 0x81, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005\x6005", MinRangePoint, MaxRangePoint);
}

inline double Body::GetVolume ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x3b, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline enum GNTTypePropertyConstants Body::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    _com_dispatch_method(this, 0x3c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline long Body::GetGeometryForm ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x3e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Body::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x3f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL Body::GetIsSolid ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x41, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline HRESULT Body::ComputePhysicalProperties ( double Density, double Accuracy, double * Volume, double * Area, double * Mass, SAFEARRAY * * CenterOfGravity, SAFEARRAY * * CenterOfVolume, SAFEARRAY * * GlobalMomentsOfInteria, SAFEARRAY * * PrincipalMomentsOfInteria, SAFEARRAY * * PrincipalAxes, SAFEARRAY * * RadiiOfGyration, double * RelativeAccuracyAchieved, int * Status ) {
    return _com_dispatch_method(this, 0x42, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0005\x0005\x4005\x4005\x4005\x6005\x6005\x6005\x6005\x6005\x6005\x4005\x4003", Density, Accuracy, Volume, Area, Mass, CenterOfGravity, CenterOfVolume, GlobalMomentsOfInteria, PrincipalMomentsOfInteria, PrincipalAxes, RadiiOfGyration, RelativeAccuracyAchieved, Status);
}

inline long Body::GetUpdatesCounter ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x45, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline HRESULT Body::GetReferenceKey ( SAFEARRAY * * ReferenceKey, VARIANT * KeySize ) {
    return _com_dispatch_method(this, 0x46, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6011\x480c", ReferenceKey, KeySize);
}

inline IDispatchPtr Body::CreateCollection ( enum TopologyCollectionTypeConstants Type, const _variant_t & NumberOfObjects, const _variant_t & ObjectArray ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x1ff, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0003\x080c\x080c", Type, &NumberOfObjects, &ObjectArray);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr Body::CreateSmartCollection ( IDispatch * SeedObject, enum SmartCollectionTypeConstants CollectionType, const _variant_t & AdditionalObject ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x200, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0009\x0003\x080c", SeedObject, CollectionType, &AdditionalObject);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL Body::GetValid ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x201, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Body::GetFaceByFaceID ( int FaceID ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x202, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0003", FaceID);
    return IDispatchPtr(_result, false);
}

inline TGFramework::FaceStylePtr Body::GetStyle ( ) {
    struct TGFramework::FaceStyle * _result = 0;
    _com_dispatch_method(this, 0x203, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return TGFramework::FaceStylePtr(_result, false);
}

inline void Body::PutStyle ( struct TGFramework::FaceStyle * _arg1 ) {
    _com_dispatch_method(this, 0x203, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0009", _arg1);
}

inline HRESULT Body::SetFacesStyle ( long NumberOfFaces, SAFEARRAY * * FacesArray, struct TGFramework::FaceStyle * Style ) {
    return _com_dispatch_method(this, 0x204, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x6009\x0009", NumberOfFaces, FacesArray, Style);
}

inline VARIANT_BOOL Body::GetIsOverriddenBody ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x205, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline VARIANT_BOOL Body::GetVisible ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x206, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline void Body::PutVisible ( VARIANT_BOOL _arg1 ) {
    _com_dispatch_method(this, 0x206, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x000b", _arg1);
}

inline int Body::GetTag ( ) {
    int _result = 0;
    _com_dispatch_method(this, 0x207, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Body::GetVertices ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x208, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr Body::GetEntityByID ( int EntityID ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x209, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x0003", EntityID);
    return IDispatchPtr(_result, false);
}

inline int Body::GetIDFromEntity ( IDispatch * Entity ) {
    int _result = 0;
    _com_dispatch_method(this, 0x20b, DISPATCH_METHOD, VT_I4, (void*)&_result, 
        L"\x0009", Entity);
    return _result;
}

inline int Body::GetEntityType ( IDispatch * Entity ) {
    int _result = 0;
    _com_dispatch_method(this, 0x20a, DISPATCH_METHOD, VT_I4, (void*)&_result, 
        L"\x0009", Entity);
    return _result;
}

inline IDispatchPtr Body::GetLoops ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x20c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline HRESULT Body::GetExtremePoint ( double DirectionX, double DirectionY, double DirectionZ, double * ExtremeX, double * ExtremeY, double * ExtremeZ ) {
    return _com_dispatch_method(this, 0x127, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0005\x0005\x0005\x4005\x4005\x4005", DirectionX, DirectionY, DirectionZ, ExtremeX, ExtremeY, ExtremeZ);
}

inline HRESULT Body::ClearOverrides ( ) {
    return _com_dispatch_method(this, 0x129, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline IDispatchPtr Body::GetDocument ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x28a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline _bstr_t Body::GetDisplayName ( ) {
    BSTR _result = 0;
    _com_dispatch_method(this, 0x12a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&_result, NULL);
    return _bstr_t(_result, false);
}

inline void Body::PutDisplayName ( _bstr_t _arg1 ) {
    _com_dispatch_method(this, 0x12a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0008", (BSTR)_arg1);
}

inline int Body::GetRefID ( ) {
    int _result = 0;
    _com_dispatch_method(this, 0x20d, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline HRESULT Body::CalculateWallThickness ( enum WallThicknessDisplayResolution resolution, double * pDUpVector, VARIANT * pvecThicknessData, int * piSize, SAFEARRAY * pdTransform ) {
    return _com_dispatch_method(this, 0x12b, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x4005\x400c\x4003\x2005", resolution, pDUpVector, pvecThicknessData, piSize, pdTransform);
}

inline HRESULT Body::GetRenderLineData ( double chordTol, long * pointCount, SAFEARRAY * * Points, long * lineCount, SAFEARRAY * * pointIndices, SAFEARRAY * * edgeIDs ) {
    return _com_dispatch_method(this, 0x12c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0005\x4003\x6005\x4003\x6003\x6003", chordTol, pointCount, Points, lineCount, pointIndices, edgeIDs);
}

inline HRESULT Body::GetFacetDataEx ( double Tolerance, long * pointCount, SAFEARRAY * * Points, long * FacetCount, SAFEARRAY * * FacetPointIndices, VARIANT * NormalCount, VARIANT * Normals, VARIANT * FacetNormalIndices, VARIANT * TextureCoordsCount, VARIANT * TextureCoords, VARIANT * FacetTextureCoordsIndices, VARIANT * FacetStyleIDs, VARIANT * FacetFaceIDs, const _variant_t & bHonourPrefs ) {
    return _com_dispatch_method(this, 0x12d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0005\x4003\x6005\x4003\x6003\x480c\x480c\x480c\x480c\x480c\x480c\x480c\x480c\x080c", Tolerance, pointCount, Points, FacetCount, FacetPointIndices, NormalCount, Normals, FacetNormalIndices, TextureCoordsCount, TextureCoords, FacetTextureCoordsIndices, FacetStyleIDs, FacetFaceIDs, &bHonourPrefs);
}

//
// dispinterface EdgeUse wrapper method implementations
//

inline IDispatchPtr EdgeUse::GetApplication ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x65, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr EdgeUse::GetEdge ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x66, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL EdgeUse::GetIsOpposedToEdge ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline VARIANT_BOOL EdgeUse::GetIsParamReversed ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x68, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr EdgeUse::GetLoop ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x69, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr EdgeUse::GetGeometry ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x6b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr EdgeUse::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x6c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr EdgeUse::GetPartner ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x6d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline enum GNTTypePropertyConstants EdgeUse::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    _com_dispatch_method(this, 0x6f, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline VARIANT_BOOL EdgeUse::GetIsClosed ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x56, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr EdgeUse::GetNext ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x70, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr EdgeUse::GetPrevious ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x71, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline HRESULT EdgeUse::GetDerivatives ( long NumParams, SAFEARRAY * * Params, SAFEARRAY * * FirstDerv, SAFEARRAY * * SecondDerv, SAFEARRAY * * ThirdDerv ) {
    return _com_dispatch_method(this, 0x11b, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x6005\x6005\x6005\x6005", NumParams, Params, FirstDerv, SecondDerv, ThirdDerv);
}

inline HRESULT EdgeUse::GetRange ( SAFEARRAY * * MinRangePoint, SAFEARRAY * * MaxRangePoint ) {
    return _com_dispatch_method(this, 0x11e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005\x6005", MinRangePoint, MaxRangePoint);
}

inline HRESULT EdgeUse::GetExactRange ( SAFEARRAY * * MinRangePoint, SAFEARRAY * * MaxRangePoint ) {
    return _com_dispatch_method(this, 0x86, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005\x6005", MinRangePoint, MaxRangePoint);
}

inline HRESULT EdgeUse::GetEndPoints ( SAFEARRAY * * StartPoint, SAFEARRAY * * EndPoint ) {
    return _com_dispatch_method(this, 0x11f, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005\x6005", StartPoint, EndPoint);
}

inline HRESULT EdgeUse::GetParamAtPoint ( long NumPoints, SAFEARRAY * * Points, SAFEARRAY * * GuessParams, SAFEARRAY * * MaxDeviations, SAFEARRAY * * Params, SAFEARRAY * * Flags ) {
    return _com_dispatch_method(this, 0x122, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x6005\x6005\x6005\x6005\x6003", NumPoints, Points, GuessParams, MaxDeviations, Params, Flags);
}

inline HRESULT EdgeUse::GetParamExtents ( double * MinParam, double * MaxParam ) {
    return _com_dispatch_method(this, 0x124, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4005\x4005", MinParam, MaxParam);
}

inline HRESULT EdgeUse::GetPointAtParam ( long NumParams, SAFEARRAY * * Params, SAFEARRAY * * Points ) {
    return _com_dispatch_method(this, 0x125, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x6005\x6005", NumParams, Params, Points);
}

inline HRESULT EdgeUse::GetTangent ( long NumParams, SAFEARRAY * * Params, SAFEARRAY * * Tangents ) {
    return _com_dispatch_method(this, 0x126, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x6005\x6005", NumParams, Params, Tangents);
}

inline HRESULT EdgeUse::GetParamAtPointEx ( long NumPoints, SAFEARRAY * * Points, SAFEARRAY * * Params, const _variant_t & GuessParams, VARIANT * MaxDeviations, VARIANT * Flags ) {
    return _com_dispatch_method(this, 0x128, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x6005\x6005\x080c\x480c\x480c", NumPoints, Points, Params, &GuessParams, MaxDeviations, Flags);
}

//
// dispinterface Shells wrapper method implementations
//

inline IDispatchPtr Shells::GetApplication ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x15, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr Shells::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x16, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline long Shells::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x17, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Shells::Item ( const _variant_t & index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &index);
    return IDispatchPtr(_result, false);
}

inline enum GNTTypePropertyConstants Shells::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    _com_dispatch_method(this, 0x18, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

//
// dispinterface Faces wrapper method implementations
//

inline IDispatchPtr Faces::GetApplication ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x15, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr Faces::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x16, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline long Faces::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x17, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Faces::Item ( const _variant_t & index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &index);
    return IDispatchPtr(_result, false);
}

inline HRESULT Faces::Add ( IDispatch * Item ) {
    return _com_dispatch_method(this, 0x259, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Item);
}

inline HRESULT Faces::Remove ( IDispatch * Item ) {
    return _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Item);
}

inline HRESULT Faces::RemoveAll ( ) {
    return _com_dispatch_method(this, 0x25b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline VARIANT_BOOL Faces::GetIsUserDefined ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x25c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline enum GNTTypePropertyConstants Faces::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    _com_dispatch_method(this, 0x18, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

//
// dispinterface Loops wrapper method implementations
//

inline IDispatchPtr Loops::GetApplication ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x15, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr Loops::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x16, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline long Loops::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x17, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Loops::Item ( const _variant_t & index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &index);
    return IDispatchPtr(_result, false);
}

inline enum GNTTypePropertyConstants Loops::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    _com_dispatch_method(this, 0x18, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

//
// dispinterface EdgeUses wrapper method implementations
//

inline IDispatchPtr EdgeUses::GetApplication ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x15, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr EdgeUses::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x16, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline long EdgeUses::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x17, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr EdgeUses::Item ( const _variant_t & index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &index);
    return IDispatchPtr(_result, false);
}

inline enum GNTTypePropertyConstants EdgeUses::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    _com_dispatch_method(this, 0x18, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

//
// dispinterface Edges wrapper method implementations
//

inline IDispatchPtr Edges::GetApplication ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x15, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr Edges::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x16, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline long Edges::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x17, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Edges::Item ( const _variant_t & index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &index);
    return IDispatchPtr(_result, false);
}

inline HRESULT Edges::Add ( IDispatch * Item ) {
    return _com_dispatch_method(this, 0x259, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Item);
}

inline HRESULT Edges::Remove ( IDispatch * Item ) {
    return _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Item);
}

inline HRESULT Edges::RemoveAll ( ) {
    return _com_dispatch_method(this, 0x25b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline VARIANT_BOOL Edges::GetIsUserDefined ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x25c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline enum GNTTypePropertyConstants Edges::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    _com_dispatch_method(this, 0x18, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

//
// dispinterface Vertices wrapper method implementations
//

inline IDispatchPtr Vertices::GetApplication ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x15, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr Vertices::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x16, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline long Vertices::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x17, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Vertices::Item ( const _variant_t & index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &index);
    return IDispatchPtr(_result, false);
}

inline HRESULT Vertices::Add ( IDispatch * Item ) {
    return _com_dispatch_method(this, 0x259, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Item);
}

inline HRESULT Vertices::Remove ( IDispatch * Item ) {
    return _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Item);
}

inline HRESULT Vertices::RemoveAll ( ) {
    return _com_dispatch_method(this, 0x25b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline VARIANT_BOOL Vertices::GetIsUserDefined ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x25c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline enum GNTTypePropertyConstants Vertices::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    _com_dispatch_method(this, 0x18, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

//
// dispinterface _Collection wrapper method implementations
//

inline IDispatchPtr _Collection::GetApplication ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x15, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr _Collection::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x16, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline long _Collection::GetCount ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x17, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr _Collection::Item ( const _variant_t & index ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x0, DISPATCH_METHOD, VT_DISPATCH, (void*)&_result, 
        L"\x000c", &index);
    return IDispatchPtr(_result, false);
}

inline HRESULT _Collection::Add ( IDispatch * Item ) {
    return _com_dispatch_method(this, 0x259, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Item);
}

inline HRESULT _Collection::Remove ( IDispatch * Item ) {
    return _com_dispatch_method(this, 0x25a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", Item);
}

inline HRESULT _Collection::RemoveAll ( ) {
    return _com_dispatch_method(this, 0x25b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline VARIANT_BOOL _Collection::GetIsUserDefined ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x25c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline enum GNTTypePropertyConstants _Collection::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    _com_dispatch_method(this, 0x18, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

//
// dispinterface Edge wrapper method implementations
//

inline IDispatchPtr Edge::GetApplication ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x47, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline HRESULT Edge::GetEdgeUses ( long * NumEdgeUses, SAFEARRAY * * EdgeUses ) {
    return _com_dispatch_method(this, 0x49, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4003\x6009", NumEdgeUses, EdgeUses);
}

inline IDispatchPtr Edge::GetEndVertex ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x4a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline HRESULT Edge::GetFaces ( long * NumFaces, SAFEARRAY * * Faces ) {
    return _com_dispatch_method(this, 0x4b, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4003\x6009", NumFaces, Faces);
}

inline IDispatchPtr Edge::GetGeometry ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x4c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL Edge::GetIsParamReversed ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x4d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline VARIANT_BOOL Edge::GetIsClosed ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x55, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Edge::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x4e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline HRESULT Edge::GetReferenceKey ( SAFEARRAY * * ReferenceKey, VARIANT * KeySize ) {
    return _com_dispatch_method(this, 0x4f, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6011\x480c", ReferenceKey, KeySize);
}

inline IDispatchPtr Edge::GetStartVertex ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x50, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline long Edge::GetStrokeCount ( double Tolerance ) {
    long _result = 0;
    _com_dispatch_method(this, 0x51, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, 
        L"\x0005", Tolerance);
    return _result;
}

inline HRESULT Edge::GetStrokeData ( double Tolerance, long * StrokeCount, SAFEARRAY * * Points, SAFEARRAY * * Params ) {
    return _com_dispatch_method(this, 0x52, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0005\x4003\x6005\x6005", Tolerance, StrokeCount, Points, Params);
}

inline enum GNTTypePropertyConstants Edge::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    _com_dispatch_method(this, 0x53, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline long Edge::GetContinuity ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x105, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline HRESULT Edge::GetCurvature ( long NumParams, SAFEARRAY * * Params, SAFEARRAY * * Directions, SAFEARRAY * * Curvatures ) {
    return _com_dispatch_method(this, 0x106, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x6005\x6005\x6005", NumParams, Params, Directions, Curvatures);
}

inline HRESULT Edge::GetDerivatives ( long NumParams, SAFEARRAY * * Params, SAFEARRAY * * FirstDerv, SAFEARRAY * * SecondDerv, SAFEARRAY * * ThirdDerv ) {
    return _com_dispatch_method(this, 0x107, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x6005\x6005\x6005\x6005", NumParams, Params, FirstDerv, SecondDerv, ThirdDerv);
}

inline long Edge::GetGeometryForm ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x108, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline HRESULT Edge::GetRange ( SAFEARRAY * * MinRangePoint, SAFEARRAY * * MaxRangePoint ) {
    return _com_dispatch_method(this, 0x10a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005\x6005", MinRangePoint, MaxRangePoint);
}

inline HRESULT Edge::GetExactRange ( SAFEARRAY * * MinRangePoint, SAFEARRAY * * MaxRangePoint ) {
    return _com_dispatch_method(this, 0x85, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005\x6005", MinRangePoint, MaxRangePoint);
}

inline HRESULT Edge::GetEndPoints ( SAFEARRAY * * StartPoint, SAFEARRAY * * EndPoint ) {
    return _com_dispatch_method(this, 0x10b, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005\x6005", StartPoint, EndPoint);
}

inline HRESULT Edge::GetLengthAtParam ( double FromParam, double ToParam, double * Length ) {
    return _com_dispatch_method(this, 0x10c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0005\x0005\x4005", FromParam, ToParam, Length);
}

inline HRESULT Edge::GetParamAnomaly ( SAFEARRAY * * Periodicity, VARIANT_BOOL * Singular ) {
    return _com_dispatch_method(this, 0x10d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005\x400b", Periodicity, Singular);
}

inline HRESULT Edge::GetParamAtPoint ( long NumPoints, SAFEARRAY * * Points, SAFEARRAY * * GuessParams, SAFEARRAY * * MaxDeviations, SAFEARRAY * * Params, SAFEARRAY * * Flags ) {
    return _com_dispatch_method(this, 0x10e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x6005\x6005\x6005\x6005\x6003", NumPoints, Points, GuessParams, MaxDeviations, Params, Flags);
}

inline HRESULT Edge::GetParamAtLength ( double FromParam, double Length, double * Param ) {
    return _com_dispatch_method(this, 0x10f, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0005\x0005\x4005", FromParam, Length, Param);
}

inline HRESULT Edge::GetParamExtents ( double * MinParam, double * MaxParam ) {
    return _com_dispatch_method(this, 0x110, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4005\x4005", MinParam, MaxParam);
}

inline HRESULT Edge::GetPointAtParam ( long NumParams, SAFEARRAY * * Params, SAFEARRAY * * Points ) {
    return _com_dispatch_method(this, 0x111, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x6005\x6005", NumParams, Params, Points);
}

inline HRESULT Edge::GetTangent ( long NumParams, SAFEARRAY * * Params, SAFEARRAY * * Tangents ) {
    return _com_dispatch_method(this, 0x112, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x6005\x6005", NumParams, Params, Tangents);
}

inline long Edge::GetUpdatesCounter ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x54, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline int Edge::GetID ( ) {
    int _result = 0;
    _com_dispatch_method(this, 0x57, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline int Edge::GetTag ( ) {
    int _result = 0;
    _com_dispatch_method(this, 0x58, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Edge::GetBody ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x59, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr Edge::GetShells ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x5a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline HRESULT Edge::GetParamAtPointEx ( long NumPoints, SAFEARRAY * * Points, SAFEARRAY * * Params, const _variant_t & GuessParams, VARIANT * MaxDeviations, VARIANT * Flags ) {
    return _com_dispatch_method(this, 0x128, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x6005\x6005\x080c\x480c\x480c", NumPoints, Points, Params, &GuessParams, MaxDeviations, Flags);
}

inline IDispatchPtr Edge::GetDocument ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x28a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline HRESULT Edge::GetRenderLineData ( double chordTol, long * pointCount, SAFEARRAY * * Points, long * lineCount, SAFEARRAY * * pointIndices, SAFEARRAY * * edgeIDs ) {
    return _com_dispatch_method(this, 0x113, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0005\x4003\x6005\x4003\x6003\x6003", chordTol, pointCount, Points, lineCount, pointIndices, edgeIDs);
}

//
// dispinterface Face wrapper method implementations
//

inline IDispatchPtr Face::GetApplication ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x24, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr Face::GetBody ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x25, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr Face::GetEdges ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x26, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr Face::GetGeometry ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x27, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL Face::GetIsParamReversed ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x28, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Face::GetLoops ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x29, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr Face::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x2a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline HRESULT Face::GetReferenceKey ( SAFEARRAY * * ReferenceKey, VARIANT * KeySize ) {
    return _com_dispatch_method(this, 0x2b, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6011\x480c", ReferenceKey, KeySize);
}

inline IDispatchPtr Face::GetShell ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x2c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline long Face::GetFacetCount ( double Tolerance ) {
    long _result = 0;
    _com_dispatch_method(this, 0x2e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, 
        L"\x0005", Tolerance);
    return _result;
}

inline HRESULT Face::GetFacetData ( double Tolerance, long * FacetCount, SAFEARRAY * * Points, VARIANT * Normals, VARIANT * TextureCoords ) {
    return _com_dispatch_method(this, 0x2f, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0005\x4003\x6005\x480c\x480c", Tolerance, FacetCount, Points, Normals, TextureCoords);
}

inline enum GNTTypePropertyConstants Face::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    _com_dispatch_method(this, 0x30, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Face::GetVertices ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x31, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline double Face::GetArea ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0xe0, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline long Face::GetGeometryForm ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0xe1, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline HRESULT Face::GetRange ( SAFEARRAY * * MinRangePoint, SAFEARRAY * * MaxRangePoint ) {
    return _com_dispatch_method(this, 0xe3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005\x6005", MinRangePoint, MaxRangePoint);
}

inline HRESULT Face::GetExactRange ( SAFEARRAY * * MinRangePoint, SAFEARRAY * * MaxRangePoint ) {
    return _com_dispatch_method(this, 0x84, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005\x6005", MinRangePoint, MaxRangePoint);
}

inline HRESULT Face::GetDerivatives ( long NumParams, SAFEARRAY * * Params, SAFEARRAY * * UPartials, SAFEARRAY * * VPartials, SAFEARRAY * * UUPartials, SAFEARRAY * * UVPartials, SAFEARRAY * * VVPartials, SAFEARRAY * * UUUPartials, SAFEARRAY * * VVVPartials ) {
    return _com_dispatch_method(this, 0xe4, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x6005\x6005\x6005\x6005\x6005\x6005\x6005\x6005", NumParams, Params, UPartials, VPartials, UUPartials, UVPartials, VVPartials, UUUPartials, VVVPartials);
}

inline HRESULT Face::GetNormal ( long NumParams, SAFEARRAY * * Params, SAFEARRAY * * Normals ) {
    return _com_dispatch_method(this, 0xe5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x6005\x6005", NumParams, Params, Normals);
}

inline HRESULT Face::GetParamAnomaly ( SAFEARRAY * * PeriodicityU, SAFEARRAY * * PeriodicityV, long * EndSingularityU, SAFEARRAY * * SingularityU, long * EndSingularityV, SAFEARRAY * * SingularityV ) {
    return _com_dispatch_method(this, 0xe6, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005\x6005\x4003\x6005\x4003\x6005", PeriodicityU, PeriodicityV, EndSingularityU, SingularityU, EndSingularityV, SingularityV);
}

inline HRESULT Face::GetParamOnFace ( long NumParams, SAFEARRAY * * Params, SAFEARRAY * * OnFace ) {
    return _com_dispatch_method(this, 0xe7, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x6005\x600b", NumParams, Params, OnFace);
}

inline HRESULT Face::GetParamRange ( SAFEARRAY * * MinParam, SAFEARRAY * * MaxParam ) {
    return _com_dispatch_method(this, 0xe8, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005\x6005", MinParam, MaxParam);
}

inline HRESULT Face::GetPointAtParam ( long NumParams, SAFEARRAY * * Params, SAFEARRAY * * Points ) {
    return _com_dispatch_method(this, 0xe9, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x6005\x6005", NumParams, Params, Points);
}

inline HRESULT Face::GetParamAtPoint ( long NumPoints, SAFEARRAY * * Points, SAFEARRAY * * GuessParams, SAFEARRAY * * MaxDeviations, SAFEARRAY * * Params, SAFEARRAY * * Flags ) {
    return _com_dispatch_method(this, 0xea, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x6005\x6005\x6005\x6005\x6003", NumPoints, Points, GuessParams, MaxDeviations, Params, Flags);
}

inline HRESULT Face::GetTangents ( long NumParams, SAFEARRAY * * Params, SAFEARRAY * * UTangents, SAFEARRAY * * VTangents ) {
    return _com_dispatch_method(this, 0xeb, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x6005\x6005\x6005", NumParams, Params, UTangents, VTangents);
}

inline long Face::GetContinuity ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0xec, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline HRESULT Face::GetCurvatures ( long NumParams, SAFEARRAY * * Params, SAFEARRAY * * MaxTangents, SAFEARRAY * * MaxCurvatures, SAFEARRAY * * MinCurvatures ) {
    return _com_dispatch_method(this, 0xed, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x6005\x6005\x6005\x6005", NumParams, Params, MaxTangents, MaxCurvatures, MinCurvatures);
}

inline long Face::GetUpdatesCounter ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x32, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline TGFramework::FaceStylePtr Face::GetStyle ( ) {
    struct TGFramework::FaceStyle * _result = 0;
    _com_dispatch_method(this, 0x25d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return TGFramework::FaceStylePtr(_result, false);
}

inline void Face::PutStyle ( struct TGFramework::FaceStyle * _arg1 ) {
    _com_dispatch_method(this, 0x25d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, 
        L"\x0009", _arg1);
}

inline HRESULT Face::GetBendCenterLineAttributes ( VARIANT_BOOL * BendAtributesExist, VARIANT * BendCenterLineEndPoints, VARIANT * AttrbuteVersion, VARIANT * BendRadius, VARIANT * BendAngle, VARIANT * BendSweepAngle, VARIANT * BendOrientation ) {
    return _com_dispatch_method(this, 0x25e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b\x480c\x480c\x480c\x480c\x480c\x480c", BendAtributesExist, BendCenterLineEndPoints, AttrbuteVersion, BendRadius, BendAngle, BendSweepAngle, BendOrientation);
}

inline HRESULT Face::GetBendCenterLineAttributesEx ( VARIANT_BOOL * BendAtributesExist, VARIANT * BendCenterLineEndPoints, VARIANT * AttrbuteVersion, VARIANT * BendRadius, VARIANT * BendAngle, VARIANT * BendSweepAngle, VARIANT * BendOrientation ) {
    return _com_dispatch_method(this, 0x25f, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b\x480c\x480c\x480c\x480c\x480c\x480c", BendAtributesExist, BendCenterLineEndPoints, AttrbuteVersion, BendRadius, BendAngle, BendSweepAngle, BendOrientation);
}

inline int Face::GetID ( ) {
    int _result = 0;
    _com_dispatch_method(this, 0x260, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline int Face::GetTag ( ) {
    int _result = 0;
    _com_dispatch_method(this, 0x261, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline HRESULT Face::GetParamAtPointEx ( long NumPoints, SAFEARRAY * * Points, SAFEARRAY * * Params, const _variant_t & GuessParams, VARIANT * MaxDeviations, VARIANT * Flags ) {
    return _com_dispatch_method(this, 0x128, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x6005\x6005\x080c\x480c\x480c", NumPoints, Points, Params, &GuessParams, MaxDeviations, Flags);
}

inline HRESULT Face::GetRGBAVals ( double * RVal, double * GVal, double * BVal, double * AVal ) {
    return _com_dispatch_method(this, 0x262, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4005\x4005\x4005\x4005", RVal, GVal, BVal, AVal);
}

inline IDispatchPtr Face::GetDocument ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x28a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline HRESULT Face::GetRenderLineData ( double chordTol, long * pointCount, SAFEARRAY * * Points, long * lineCount, SAFEARRAY * * pointIndices, SAFEARRAY * * edgeIDs ) {
    return _com_dispatch_method(this, 0x263, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0005\x4003\x6005\x4003\x6003\x6003", chordTol, pointCount, Points, lineCount, pointIndices, edgeIDs);
}

inline _variant_t Face::GetFeatureIDsAndNames ( ) {
    VARIANT _result;
    VariantInit(&_result);
    _com_dispatch_method(this, 0x265, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&_result, NULL);
    return _variant_t(_result, false);
}

inline HRESULT Face::GetFacetDataEx ( double Tolerance, long * pointCount, SAFEARRAY * * Points, long * FacetCount, SAFEARRAY * * FacetPointIndices, VARIANT * NormalCount, VARIANT * Normals, VARIANT * FacetNormalIndices, VARIANT * TextureCoordsCount, VARIANT * TextureCoords, VARIANT * FacetTextureCoordsIndices ) {
    return _com_dispatch_method(this, 0x266, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0005\x4003\x6005\x4003\x6003\x480c\x480c\x480c\x480c\x480c\x480c", Tolerance, pointCount, Points, FacetCount, FacetPointIndices, NormalCount, Normals, FacetNormalIndices, TextureCoordsCount, TextureCoords, FacetTextureCoordsIndices);
}

//
// dispinterface Loop wrapper method implementations
//

inline IDispatchPtr Loop::GetApplication ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x5b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr Loop::GetEdges ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x5c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr Loop::GetEdgeUses ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x5d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr Loop::GetFace ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x5e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL Loop::GetIsOuterLoop ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x5f, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Loop::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x60, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline HRESULT Loop::GetRange ( SAFEARRAY * * MinRangePoint, SAFEARRAY * * MaxRangePoint ) {
    return _com_dispatch_method(this, 0x61, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005\x6005", MinRangePoint, MaxRangePoint);
}

inline HRESULT Loop::GetExactRange ( SAFEARRAY * * MinRangePoint, SAFEARRAY * * MaxRangePoint ) {
    return _com_dispatch_method(this, 0x83, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005\x6005", MinRangePoint, MaxRangePoint);
}

inline enum GNTTypePropertyConstants Loop::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    _com_dispatch_method(this, 0x63, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline int Loop::GetID ( ) {
    int _result = 0;
    _com_dispatch_method(this, 0x8b, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline int Loop::GetTag ( ) {
    int _result = 0;
    _com_dispatch_method(this, 0x8c, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Loop::GetBody ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x8d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr Loop::GetVertices ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x8e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr Loop::GetDocument ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x28a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

//
// dispinterface Shell wrapper method implementations
//

inline IDispatchPtr Shell::GetApplication ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x18, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr Shell::GetBody ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x19, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr Shell::GetEdges ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x1a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr Shell::GetFaces ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x1b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL Shell::GetIsClosed ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x1c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline VARIANT_BOOL Shell::GetIsPointInside ( SAFEARRAY * * Point ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x1d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, 
        L"\x6005", Point);
    return _result;
}

inline VARIANT_BOOL Shell::GetIsVoid ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x1e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Shell::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x1f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline HRESULT Shell::GetRange ( SAFEARRAY * * MinRangePoint, SAFEARRAY * * MaxRangePoint ) {
    return _com_dispatch_method(this, 0x20, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005\x6005", MinRangePoint, MaxRangePoint);
}

inline HRESULT Shell::GetExactRange ( SAFEARRAY * * MinRangePoint, SAFEARRAY * * MaxRangePoint ) {
    return _com_dispatch_method(this, 0x82, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005\x6005", MinRangePoint, MaxRangePoint);
}

inline enum GNTTypePropertyConstants Shell::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    _com_dispatch_method(this, 0x22, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline double Shell::GetVolume ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x23, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline HRESULT Shell::GetNonStitchedEdges ( long * NumEdgeCollections, SAFEARRAY * * EdgeCollections ) {
    return _com_dispatch_method(this, 0x87, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4003\x6009", NumEdgeCollections, EdgeCollections);
}

inline int Shell::GetID ( ) {
    int _result = 0;
    _com_dispatch_method(this, 0x8f, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline int Shell::GetTag ( ) {
    int _result = 0;
    _com_dispatch_method(this, 0x90, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Shell::GetDocument ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x28a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

//
// dispinterface Vertex wrapper method implementations
//

inline IDispatchPtr Vertex::GetApplication ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x79, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr Vertex::GetEdges ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x7a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr Vertex::GetFaces ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x7b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline HRESULT Vertex::GetPointData ( SAFEARRAY * * Point ) {
    return _com_dispatch_method(this, 0x7c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005", Point);
}

inline IDispatchPtr Vertex::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x7d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline HRESULT Vertex::GetReferenceKey ( SAFEARRAY * * ReferenceKey, VARIANT * KeySize ) {
    return _com_dispatch_method(this, 0x7e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6011\x480c", ReferenceKey, KeySize);
}

inline enum GNTTypePropertyConstants Vertex::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    _com_dispatch_method(this, 0x7f, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline long Vertex::GetUpdatesCounter ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x80, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline int Vertex::GetID ( ) {
    int _result = 0;
    _com_dispatch_method(this, 0x88, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline int Vertex::GetTag ( ) {
    int _result = 0;
    _com_dispatch_method(this, 0x89, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Vertex::GetBody ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x8a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr Vertex::GetLoops ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x91, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr Vertex::GetShells ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x92, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr Vertex::GetDocument ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x28a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

//
// dispinterface BSplineSurface wrapper method implementations
//

inline IDispatchPtr BSplineSurface::GetApplication ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0xee, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline HRESULT BSplineSurface::GetBSplineInfo ( SAFEARRAY * * Order, SAFEARRAY * * NumPoles, SAFEARRAY * * NumKnots, VARIANT_BOOL * Rational, SAFEARRAY * * Closed, SAFEARRAY * * Periodic, VARIANT_BOOL * Planar ) {
    return _com_dispatch_method(this, 0xef, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6003\x6003\x6003\x400b\x600b\x600b\x400b", Order, NumPoles, NumKnots, Rational, Closed, Periodic, Planar);
}

inline HRESULT BSplineSurface::GetBSplineData ( long NumPoles, long NumKnotsU, long NumKnotsV, long NumWeights, SAFEARRAY * * Poles, SAFEARRAY * * KnotsU, SAFEARRAY * * KnotsV, SAFEARRAY * * Weights ) {
    return _com_dispatch_method(this, 0xf0, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x0003\x6005\x6005\x6005\x6005", NumPoles, NumKnotsU, NumKnotsV, NumWeights, Poles, KnotsU, KnotsV, Weights);
}

inline HRESULT BSplineSurface::GetNumKnots ( SAFEARRAY * * NumKnots ) {
    return _com_dispatch_method(this, 0xf3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6003", NumKnots);
}

inline HRESULT BSplineSurface::GetNumPoles ( SAFEARRAY * * NumPoles ) {
    return _com_dispatch_method(this, 0xf4, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6003", NumPoles);
}

inline HRESULT BSplineSurface::GetOrder ( SAFEARRAY * * Order ) {
    return _com_dispatch_method(this, 0xf5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6003", Order);
}

inline HRESULT BSplineSurface::GetIsPeriodic ( SAFEARRAY * * Periodic ) {
    return _com_dispatch_method(this, 0xf6, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x600b", Periodic);
}

inline VARIANT_BOOL BSplineSurface::GetIsPlanar ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xf7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline VARIANT_BOOL BSplineSurface::GetIsRational ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xf9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline HRESULT BSplineSurface::GetIsClosed ( SAFEARRAY * * Closed ) {
    return _com_dispatch_method(this, 0xfb, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x600b", Closed);
}

inline enum GNTTypePropertyConstants BSplineSurface::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    _com_dispatch_method(this, 0xfc, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr BSplineSurface::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0xfd, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

//
// dispinterface Cone wrapper method implementations
//

inline IDispatchPtr Cone::GetApplication ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0xd6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline HRESULT Cone::GetAxisVector ( SAFEARRAY * * AxisVector ) {
    return _com_dispatch_method(this, 0xd7, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005", AxisVector);
}

inline HRESULT Cone::GetBasePoint ( SAFEARRAY * * BasePoint ) {
    return _com_dispatch_method(this, 0xd8, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005", BasePoint);
}

inline HRESULT Cone::GetConeData ( SAFEARRAY * * BasePoint, SAFEARRAY * * AxisVector, double * Radius, double * HalfAngle, VARIANT_BOOL * Expanding ) {
    return _com_dispatch_method(this, 0xd9, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005\x6005\x4005\x4005\x400b", BasePoint, AxisVector, Radius, HalfAngle, Expanding);
}

inline VARIANT_BOOL Cone::GetExpanding ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0xda, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline double Cone::GetHalfAngle ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0xdb, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Cone::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0xdc, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline double Cone::GetRadius ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0xdd, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline enum GNTTypePropertyConstants Cone::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    _com_dispatch_method(this, 0xde, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

//
// dispinterface Cylinder wrapper method implementations
//

inline IDispatchPtr Cylinder::GetApplication ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0xc9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline HRESULT Cylinder::GetAxisVector ( SAFEARRAY * * AxisVect ) {
    return _com_dispatch_method(this, 0xca, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005", AxisVect);
}

inline HRESULT Cylinder::GetBasePoint ( SAFEARRAY * * BasePoint ) {
    return _com_dispatch_method(this, 0xcb, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005", BasePoint);
}

inline HRESULT Cylinder::GetCylinderData ( SAFEARRAY * * BasePoint, SAFEARRAY * * AxisVector, double * Radius ) {
    return _com_dispatch_method(this, 0xcc, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005\x6005\x4005", BasePoint, AxisVector, Radius);
}

inline enum GNTTypePropertyConstants Cylinder::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    _com_dispatch_method(this, 0xcd, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Cylinder::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0xce, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline double Cylinder::GetRadius ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0xcf, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

//
// dispinterface Plane wrapper method implementations
//

inline IDispatchPtr Plane::GetApplication ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0xc2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline HRESULT Plane::GetNormalVector ( SAFEARRAY * * NormalVector ) {
    return _com_dispatch_method(this, 0xc3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005", NormalVector);
}

inline HRESULT Plane::GetPlaneData ( SAFEARRAY * * RootPoint, SAFEARRAY * * NormalVector ) {
    return _com_dispatch_method(this, 0xc4, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005\x6005", RootPoint, NormalVector);
}

inline HRESULT Plane::GetRootPoint ( SAFEARRAY * * RootPoint ) {
    return _com_dispatch_method(this, 0xc5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005", RootPoint);
}

inline enum GNTTypePropertyConstants Plane::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    _com_dispatch_method(this, 0xc6, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Plane::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0xc7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline HRESULT Plane::GetPlaneProperties ( double ReqRelAccy, double * Area, SAFEARRAY * * RootPoint, SAFEARRAY * * Moments, SAFEARRAY * * PrincipalAxes, double * RelAccyAchieved ) {
    return _com_dispatch_method(this, 0xc8, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0005\x4005\x6005\x6005\x6005\x4005", ReqRelAccy, Area, RootPoint, Moments, PrincipalAxes, RelAccyAchieved);
}

//
// dispinterface Sphere wrapper method implementations
//

inline IDispatchPtr Sphere::GetApplication ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0xd0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline HRESULT Sphere::GetCenterPoint ( SAFEARRAY * * CenterPoint ) {
    return _com_dispatch_method(this, 0xd1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005", CenterPoint);
}

inline IDispatchPtr Sphere::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0xd2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline double Sphere::GetRadius ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0xd3, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline HRESULT Sphere::GetSphereData ( SAFEARRAY * * CenterPoint, double * Radius ) {
    return _com_dispatch_method(this, 0xd4, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005\x4005", CenterPoint, Radius);
}

inline enum GNTTypePropertyConstants Sphere::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    _com_dispatch_method(this, 0xd5, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

//
// dispinterface Torus wrapper method implementations
//

inline IDispatchPtr Torus::GetApplication ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0xba, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline HRESULT Torus::GetAxisVector ( SAFEARRAY * * AxisVector ) {
    return _com_dispatch_method(this, 0xbb, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005", AxisVector);
}

inline HRESULT Torus::GetCenterPoint ( SAFEARRAY * * CenterPoint ) {
    return _com_dispatch_method(this, 0xbc, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005", CenterPoint);
}

inline double Torus::GetMajorRadius ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0xbd, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline double Torus::GetMinorRadius ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0xbe, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Torus::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0xbf, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline HRESULT Torus::GetTorusData ( SAFEARRAY * * CenterPoint, SAFEARRAY * * AxisVector, double * MajorRadius, double * MinorRadius ) {
    return _com_dispatch_method(this, 0xc0, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005\x6005\x4005\x4005", CenterPoint, AxisVector, MajorRadius, MinorRadius);
}

inline enum GNTTypePropertyConstants Torus::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    _com_dispatch_method(this, 0xc1, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

//
// dispinterface MeshSurface wrapper method implementations
//

inline IDispatchPtr MeshSurface::GetApplication ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x258, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline HRESULT MeshSurface::GetTrianglePoints ( long * FacetCount, SAFEARRAY * * Points ) {
    return _com_dispatch_method(this, 0x25b, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4003\x6005", FacetCount, Points);
}

inline HRESULT MeshSurface::GetTriangleNormals ( long * FacetCount, SAFEARRAY * * Normals ) {
    return _com_dispatch_method(this, 0x25c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4003\x6005", FacetCount, Normals);
}

inline HRESULT MeshSurface::GetTriangleData ( long * FacetCount, SAFEARRAY * * Points, SAFEARRAY * * Normals ) {
    return _com_dispatch_method(this, 0x25d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4003\x6005\x6005", FacetCount, Points, Normals);
}

inline enum GNTTypePropertyConstants MeshSurface::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    _com_dispatch_method(this, 0x25a, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr MeshSurface::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x259, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

//
// dispinterface BSplineCurve wrapper method implementations
//

inline IDispatchPtr BSplineCurve::GetApplication ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x14b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline HRESULT BSplineCurve::GetBSplineData ( long NumPoles, long NumKnots, long NumWeights, SAFEARRAY * * Poles, SAFEARRAY * * Knots, SAFEARRAY * * Weights ) {
    return _com_dispatch_method(this, 0x14c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x6005\x6005\x6005", NumPoles, NumKnots, NumWeights, Poles, Knots, Weights);
}

inline HRESULT BSplineCurve::GetBSplineInfo ( long * Order, long * NumPoles, long * NumKnots, VARIANT_BOOL * Rational, VARIANT_BOOL * Closed, VARIANT_BOOL * Periodic, VARIANT_BOOL * Planar, SAFEARRAY * * PlaneVector ) {
    return _com_dispatch_method(this, 0x14d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4003\x4003\x4003\x400b\x400b\x400b\x400b\x6005", Order, NumPoles, NumKnots, Rational, Closed, Periodic, Planar, PlaneVector);
}

inline VARIANT_BOOL BSplineCurve::GetIsClosed ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x14e, DISPATCH_METHOD, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline long BSplineCurve::GetNumKnots ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x14f, DISPATCH_METHOD, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline long BSplineCurve::GetNumPoles ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x150, DISPATCH_METHOD, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline long BSplineCurve::GetOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x151, DISPATCH_METHOD, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr BSplineCurve::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x152, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline VARIANT_BOOL BSplineCurve::GetIsPeriodic ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x153, DISPATCH_METHOD, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline VARIANT_BOOL BSplineCurve::GetIsPlanar ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x154, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline VARIANT_BOOL BSplineCurve::GetIsRational ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x155, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline enum GNTTypePropertyConstants BSplineCurve::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    _com_dispatch_method(this, 0x156, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

//
// dispinterface Circle wrapper method implementations
//

inline IDispatchPtr Circle::GetApplication ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x159, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline HRESULT Circle::GetAxisVector ( SAFEARRAY * * AxisVector ) {
    return _com_dispatch_method(this, 0x15a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005", AxisVector);
}

inline HRESULT Circle::GetCenterPoint ( SAFEARRAY * * CenterPoint ) {
    return _com_dispatch_method(this, 0x15b, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005", CenterPoint);
}

inline HRESULT Circle::GetCircleData ( SAFEARRAY * * CenterPoint, SAFEARRAY * * AxisVector, double * Radius ) {
    return _com_dispatch_method(this, 0x15c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005\x6005\x4005", CenterPoint, AxisVector, Radius);
}

inline IDispatchPtr Circle::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x15d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline double Circle::GetRadius ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x15e, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline enum GNTTypePropertyConstants Circle::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    _com_dispatch_method(this, 0x15f, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

//
// dispinterface Ellipse wrapper method implementations
//

inline IDispatchPtr Ellipse::GetApplication ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x163, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline HRESULT Ellipse::GetAxisVector ( SAFEARRAY * * AxisVector ) {
    return _com_dispatch_method(this, 0x164, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005", AxisVector);
}

inline HRESULT Ellipse::GetCenterPoint ( SAFEARRAY * * CenterPoint ) {
    return _com_dispatch_method(this, 0x165, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005", CenterPoint);
}

inline HRESULT Ellipse::GetEllipseData ( SAFEARRAY * * CenterPoint, SAFEARRAY * * AxisVector, SAFEARRAY * * MajorAxis, double * MinorMajorRatio ) {
    return _com_dispatch_method(this, 0x166, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005\x6005\x6005\x4005", CenterPoint, AxisVector, MajorAxis, MinorMajorRatio);
}

inline HRESULT Ellipse::GetMajorAxis ( SAFEARRAY * * MajorAxis ) {
    return _com_dispatch_method(this, 0x167, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005", MajorAxis);
}

inline double Ellipse::GetMinorMajorRatio ( ) {
    double _result = 0;
    _com_dispatch_method(this, 0x168, DISPATCH_PROPERTYGET, VT_R8, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr Ellipse::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x169, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline enum GNTTypePropertyConstants Ellipse::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    _com_dispatch_method(this, 0x16a, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

//
// dispinterface Line wrapper method implementations
//

inline IDispatchPtr Line::GetApplication ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x16c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline HRESULT Line::GetLineData ( SAFEARRAY * * RootPoint, SAFEARRAY * * DirectionVector ) {
    return _com_dispatch_method(this, 0x16d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005\x6005", RootPoint, DirectionVector);
}

inline IDispatchPtr Line::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x16e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline HRESULT Line::GetRootPoint ( SAFEARRAY * * RootPoint ) {
    return _com_dispatch_method(this, 0x16f, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005", RootPoint);
}

inline enum GNTTypePropertyConstants Line::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    _com_dispatch_method(this, 0x170, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline HRESULT Line::GetVector ( SAFEARRAY * * Vector ) {
    return _com_dispatch_method(this, 0x171, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x6005", Vector);
}

//
// dispinterface PLine wrapper method implementations
//

inline IDispatchPtr PLine::GetApplication ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x26c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr PLine::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x26d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline enum GNTTypePropertyConstants PLine::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    _com_dispatch_method(this, 0x26e, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline HRESULT PLine::GetPLineData ( long * PointsCount, SAFEARRAY * * Points, VARIANT_BOOL * Closed, double * BaseParameter ) {
    return _com_dispatch_method(this, 0x26f, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4003\x6005\x400b\x4005", PointsCount, Points, Closed, BaseParameter);
}

inline HRESULT PLine::GetPoints ( long * PointsCount, SAFEARRAY * * Points ) {
    return _com_dispatch_method(this, 0x270, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4003\x6005", PointsCount, Points);
}

inline HRESULT PLine::GetClosed ( VARIANT_BOOL * Closed ) {
    return _com_dispatch_method(this, 0x271, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", Closed);
}

inline HRESULT PLine::GetBaseParameter ( double * BaseParameter ) {
    return _com_dispatch_method(this, 0x272, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4005", BaseParameter);
}

//
// dispinterface ParamBSplineCurve wrapper method implementations
//

inline IDispatchPtr ParamBSplineCurve::GetApplication ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x1f4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline HRESULT ParamBSplineCurve::GetBSpline2dData ( long NumPoles, long NumKnots, long NumWeights, SAFEARRAY * * Poles, SAFEARRAY * * Knots, SAFEARRAY * * Weights ) {
    return _com_dispatch_method(this, 0x1f5, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0003\x6005\x6005\x6005", NumPoles, NumKnots, NumWeights, Poles, Knots, Weights);
}

inline HRESULT ParamBSplineCurve::GetBSpline2dInfo ( long * Order, long * NumPoles, long * NumKnots, VARIANT_BOOL * Rational, VARIANT_BOOL * Closed, VARIANT_BOOL * Periodic ) {
    return _com_dispatch_method(this, 0x1f6, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x4003\x4003\x4003\x400b\x400b\x400b", Order, NumPoles, NumKnots, Rational, Closed, Periodic);
}

inline VARIANT_BOOL ParamBSplineCurve::GetIsClosed ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline IDispatchPtr ParamBSplineCurve::GetParent ( ) {
    IDispatch * _result = 0;
    _com_dispatch_method(this, 0x1f8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&_result, NULL);
    return IDispatchPtr(_result, false);
}

inline long ParamBSplineCurve::GetNumKnots ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x1f9, DISPATCH_METHOD, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline long ParamBSplineCurve::GetNumPoles ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x1fa, DISPATCH_METHOD, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline long ParamBSplineCurve::GetOrder ( ) {
    long _result = 0;
    _com_dispatch_method(this, 0x1fb, DISPATCH_METHOD, VT_I4, (void*)&_result, NULL);
    return _result;
}

inline VARIANT_BOOL ParamBSplineCurve::GetIsPeriodic ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x1fc, DISPATCH_METHOD, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline VARIANT_BOOL ParamBSplineCurve::GetIsRational ( ) {
    VARIANT_BOOL _result = 0;
    _com_dispatch_method(this, 0x1fd, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&_result, NULL);
    return _result;
}

inline enum GNTTypePropertyConstants ParamBSplineCurve::GetType ( ) {
    enum GNTTypePropertyConstants _result;
    _com_dispatch_method(this, 0x1fe, DISPATCH_PROPERTYGET, VT_I4, (void*)&_result, NULL);
    return _result;
}
