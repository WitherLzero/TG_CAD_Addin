// Created by Microsoft (R) C/C++ Compiler Version 14.32.31332.0 (1215a8e7).
//
// D:\visualstudio\project\TGCAD\TGCAD\x64\Debug\tggeometry.tlh
//
// C++ source equivalent of type library tggeometry.tlb
// compiler-generated file - DO NOT EDIT!

//
// Cross-referenced type libraries:
//
//

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace TGGeometry {

//
// Forward references and typedefs
//

struct __declspec(uuid("4d630362-ae8d-44b0-b560-b2583f2377e7"))
/* LIBID */ __TGGeometry;
struct __declspec(uuid("c32a4775-8c85-11d3-9737-0060973828b5"))
/* dispinterface */ CurveBody;
struct __declspec(uuid("c32a4770-8c85-11d3-9737-0060973828b5"))
/* interface */ _IDMDCurveBody;
struct __declspec(uuid("c32a4776-8c85-11d3-9737-0060973828b5"))
/* dispinterface */ CurvePaths;
struct __declspec(uuid("c32a4771-8c85-11d3-9737-0060973828b5"))
/* interface */ _IDMDCurvePaths;
struct __declspec(uuid("c32a4777-8c85-11d3-9737-0060973828b5"))
/* dispinterface */ CurvePath;
struct __declspec(uuid("c32a4772-8c85-11d3-9737-0060973828b5"))
/* interface */ _IDMDCurvePath;
struct __declspec(uuid("c32a4778-8c85-11d3-9737-0060973828b5"))
/* dispinterface */ Curves;
struct __declspec(uuid("c32a4773-8c85-11d3-9737-0060973828b5"))
/* interface */ _IDMDCurves;
struct __declspec(uuid("c32a4779-8c85-11d3-9737-0060973828b5"))
/* dispinterface */ Curve;
struct __declspec(uuid("c32a4774-8c85-11d3-9737-0060973828b5"))
/* interface */ _IDMDCurve;
enum GNTTypePropertyConstants;
struct __declspec(uuid("063b34cf-692a-43bd-863e-9db05d2ce382"))
/* dispinterface */ CurveVertices;
struct __declspec(uuid("946cd4f8-ae4e-4cb1-9153-cd3097ab5347"))
/* interface */ _ISEDCurveVertices;
struct __declspec(uuid("3b1d63f5-cae0-4674-9d49-7edd223e94ba"))
/* dispinterface */ CurveVertex;
struct __declspec(uuid("ad43aa19-68a3-4550-a7cf-dee36df9c731"))
/* interface */ _ISEDCurveVertex;
struct __declspec(uuid("09fca072-dfbf-11d0-a275-080036c5ed02"))
/* interface */ _IDMDBody;
enum FeatureTopologyQueryTypeConstants;
enum TopologyCollectionTypeConstants;
enum SmartCollectionTypeConstants;
enum WallThicknessDisplayResolution;
struct __declspec(uuid("09fca07a-dfbf-11d0-a275-080036c5ed02"))
/* interface */ _IDMDEdgeUse;
struct __declspec(uuid("09fca065-dfbf-11d0-a275-080036c5ed02"))
/* interface */ _IDMDShells;
struct __declspec(uuid("09fca060-dfbf-11d0-a275-080036c5ed02"))
/* interface */ _IDMDFaces;
struct __declspec(uuid("09fca067-dfbf-11d0-a275-080036c5ed02"))
/* interface */ _IDMDLoops;
struct __declspec(uuid("09fca076-dfbf-11d0-a275-080036c5ed02"))
/* interface */ _IDMDEdgeUses;
struct __declspec(uuid("09fca06b-dfbf-11d0-a275-080036c5ed02"))
/* interface */ _IDMDEdges;
struct __declspec(uuid("09fca06d-dfbf-11d0-a275-080036c5ed02"))
/* interface */ _IDMDVertices;
struct __declspec(uuid("09fca064-dfbf-11d0-a275-080036c5ed02"))
/* interface */ _IDMDCollection;
struct __declspec(uuid("09fca074-dfbf-11d0-a275-080036c5ed02"))
/* interface */ _IDMDEdge;
struct __declspec(uuid("09fca062-dfbf-11d0-a275-080036c5ed02"))
/* interface */ _IDMDFace;
struct __declspec(uuid("09fca078-dfbf-11d0-a275-080036c5ed02"))
/* interface */ _IDMDLoop;
struct __declspec(uuid("09fca06f-dfbf-11d0-a275-080036c5ed02"))
/* interface */ _IDMDShell;
struct __declspec(uuid("09fca07c-dfbf-11d0-a275-080036c5ed02"))
/* interface */ _IDMDVertex;
struct __declspec(uuid("5760c4d0-f6a8-11d0-bc68-0800360d1403"))
/* interface */ _IDMDBSplineSurface;
struct __declspec(uuid("f925aa80-f74f-11d0-bc6a-0800360d1403"))
/* interface */ _IDMDCone;
struct __declspec(uuid("f925aa82-f74f-11d0-bc6a-0800360d1403"))
/* interface */ _IDMDCylinder;
struct __declspec(uuid("3552a7f5-a011-41e2-a93f-151ce756db49"))
/* interface */ _IDMDMesh;
struct __declspec(uuid("8e2f94d0-eba2-11d0-bc5e-0800360d1403"))
/* interface */ _IDMDPlane;
struct __declspec(uuid("f925aa84-f74f-11d0-bc6a-0800360d1403"))
/* interface */ _IDMDSphere;
struct __declspec(uuid("f925aa86-f74f-11d0-bc6a-0800360d1403"))
/* interface */ _IDMDTorus;
struct __declspec(uuid("09fca07e-dfbf-11d0-a275-080036c5ed02"))
/* interface */ _IDMDBSplineCurve;
struct __declspec(uuid("09fca080-dfbf-11d0-a275-080036c5ed02"))
/* interface */ _IDMDCircle;
struct __declspec(uuid("09fca082-dfbf-11d0-a275-080036c5ed02"))
/* interface */ _IDMDEllipse;
struct __declspec(uuid("09fca084-dfbf-11d0-a275-080036c5ed02"))
/* interface */ _IDMDLine;
struct __declspec(uuid("b0576d44-665c-418a-b882-6ee8c696f7a3"))
/* interface */ _IDMDPLine;
struct __declspec(uuid("93ffce31-f84a-11d0-97bc-080036947803"))
/* interface */ _IDMDParamBSplineCurve;
struct SEWallThicknessAnalysisData;
struct __declspec(uuid("09fca073-dfbf-11d0-a275-080036c5ed02"))
/* dispinterface */ Body;
struct __declspec(uuid("09fca07b-dfbf-11d0-a275-080036c5ed02"))
/* dispinterface */ EdgeUse;
struct __declspec(uuid("09fca066-dfbf-11d0-a275-080036c5ed02"))
/* dispinterface */ Shells;
struct __declspec(uuid("09fca061-dfbf-11d0-a275-080036c5ed02"))
/* dispinterface */ Faces;
struct __declspec(uuid("09fca068-dfbf-11d0-a275-080036c5ed02"))
/* dispinterface */ Loops;
struct __declspec(uuid("09fca077-dfbf-11d0-a275-080036c5ed02"))
/* dispinterface */ EdgeUses;
struct __declspec(uuid("09fca06c-dfbf-11d0-a275-080036c5ed02"))
/* dispinterface */ Edges;
struct __declspec(uuid("09fca06e-dfbf-11d0-a275-080036c5ed02"))
/* dispinterface */ Vertices;
struct __declspec(uuid("09fca071-dfbf-11d0-a275-080036c5ed02"))
/* dispinterface */ _Collection;
struct __declspec(uuid("09fca075-dfbf-11d0-a275-080036c5ed02"))
/* dispinterface */ Edge;
struct __declspec(uuid("09fca063-dfbf-11d0-a275-080036c5ed02"))
/* dispinterface */ Face;
struct __declspec(uuid("09fca079-dfbf-11d0-a275-080036c5ed02"))
/* dispinterface */ Loop;
struct __declspec(uuid("09fca070-dfbf-11d0-a275-080036c5ed02"))
/* dispinterface */ Shell;
struct __declspec(uuid("09fca07d-dfbf-11d0-a275-080036c5ed02"))
/* dispinterface */ Vertex;
struct __declspec(uuid("5760c4d1-f6a8-11d0-bc68-0800360d1403"))
/* dispinterface */ BSplineSurface;
struct __declspec(uuid("f925aa81-f74f-11d0-bc6a-0800360d1403"))
/* dispinterface */ Cone;
struct __declspec(uuid("f925aa83-f74f-11d0-bc6a-0800360d1403"))
/* dispinterface */ Cylinder;
struct __declspec(uuid("8e2f94d1-eba2-11d0-bc5e-0800360d1403"))
/* dispinterface */ Plane;
struct __declspec(uuid("f925aa85-f74f-11d0-bc6a-0800360d1403"))
/* dispinterface */ Sphere;
struct __declspec(uuid("f925aa87-f74f-11d0-bc6a-0800360d1403"))
/* dispinterface */ Torus;
struct __declspec(uuid("84834777-9903-4a43-99ef-0b94302db6b2"))
/* dispinterface */ MeshSurface;
struct __declspec(uuid("09fca07f-dfbf-11d0-a275-080036c5ed02"))
/* dispinterface */ BSplineCurve;
struct __declspec(uuid("09fca081-dfbf-11d0-a275-080036c5ed02"))
/* dispinterface */ Circle;
struct __declspec(uuid("09fca083-dfbf-11d0-a275-080036c5ed02"))
/* dispinterface */ Ellipse;
struct __declspec(uuid("09fca085-dfbf-11d0-a275-080036c5ed02"))
/* dispinterface */ Line;
struct __declspec(uuid("19e66782-2e28-4cc9-8b45-fb565f1910f7"))
/* dispinterface */ PLine;
struct __declspec(uuid("93ffce32-f84a-11d0-97bc-080036947803"))
/* dispinterface */ ParamBSplineCurve;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(CurveBody, __uuidof(CurveBody));
_COM_SMARTPTR_TYPEDEF(CurvePaths, __uuidof(CurvePaths));
_COM_SMARTPTR_TYPEDEF(CurvePath, __uuidof(CurvePath));
_COM_SMARTPTR_TYPEDEF(_IDMDCurvePaths, __uuidof(_IDMDCurvePaths));
_COM_SMARTPTR_TYPEDEF(Curves, __uuidof(Curves));
_COM_SMARTPTR_TYPEDEF(Curve, __uuidof(Curve));
_COM_SMARTPTR_TYPEDEF(_IDMDCurves, __uuidof(_IDMDCurves));
_COM_SMARTPTR_TYPEDEF(_IDMDCurvePath, __uuidof(_IDMDCurvePath));
_COM_SMARTPTR_TYPEDEF(CurveVertices, __uuidof(CurveVertices));
_COM_SMARTPTR_TYPEDEF(_IDMDCurveBody, __uuidof(_IDMDCurveBody));
_COM_SMARTPTR_TYPEDEF(_IDMDCurve, __uuidof(_IDMDCurve));
_COM_SMARTPTR_TYPEDEF(CurveVertex, __uuidof(CurveVertex));
_COM_SMARTPTR_TYPEDEF(_ISEDCurveVertices, __uuidof(_ISEDCurveVertices));
_COM_SMARTPTR_TYPEDEF(_ISEDCurveVertex, __uuidof(_ISEDCurveVertex));
_COM_SMARTPTR_TYPEDEF(_IDMDBody, __uuidof(_IDMDBody));
_COM_SMARTPTR_TYPEDEF(_IDMDEdgeUse, __uuidof(_IDMDEdgeUse));
_COM_SMARTPTR_TYPEDEF(_IDMDShells, __uuidof(_IDMDShells));
_COM_SMARTPTR_TYPEDEF(_IDMDFaces, __uuidof(_IDMDFaces));
_COM_SMARTPTR_TYPEDEF(_IDMDLoops, __uuidof(_IDMDLoops));
_COM_SMARTPTR_TYPEDEF(_IDMDEdgeUses, __uuidof(_IDMDEdgeUses));
_COM_SMARTPTR_TYPEDEF(_IDMDEdges, __uuidof(_IDMDEdges));
_COM_SMARTPTR_TYPEDEF(_IDMDVertices, __uuidof(_IDMDVertices));
_COM_SMARTPTR_TYPEDEF(_IDMDCollection, __uuidof(_IDMDCollection));
_COM_SMARTPTR_TYPEDEF(_IDMDEdge, __uuidof(_IDMDEdge));
_COM_SMARTPTR_TYPEDEF(_IDMDFace, __uuidof(_IDMDFace));
_COM_SMARTPTR_TYPEDEF(_IDMDLoop, __uuidof(_IDMDLoop));
_COM_SMARTPTR_TYPEDEF(_IDMDShell, __uuidof(_IDMDShell));
_COM_SMARTPTR_TYPEDEF(_IDMDVertex, __uuidof(_IDMDVertex));
_COM_SMARTPTR_TYPEDEF(_IDMDBSplineSurface, __uuidof(_IDMDBSplineSurface));
_COM_SMARTPTR_TYPEDEF(_IDMDCone, __uuidof(_IDMDCone));
_COM_SMARTPTR_TYPEDEF(_IDMDCylinder, __uuidof(_IDMDCylinder));
_COM_SMARTPTR_TYPEDEF(_IDMDMesh, __uuidof(_IDMDMesh));
_COM_SMARTPTR_TYPEDEF(_IDMDPlane, __uuidof(_IDMDPlane));
_COM_SMARTPTR_TYPEDEF(_IDMDSphere, __uuidof(_IDMDSphere));
_COM_SMARTPTR_TYPEDEF(_IDMDTorus, __uuidof(_IDMDTorus));
_COM_SMARTPTR_TYPEDEF(_IDMDBSplineCurve, __uuidof(_IDMDBSplineCurve));
_COM_SMARTPTR_TYPEDEF(_IDMDCircle, __uuidof(_IDMDCircle));
_COM_SMARTPTR_TYPEDEF(_IDMDEllipse, __uuidof(_IDMDEllipse));
_COM_SMARTPTR_TYPEDEF(_IDMDLine, __uuidof(_IDMDLine));
_COM_SMARTPTR_TYPEDEF(_IDMDPLine, __uuidof(_IDMDPLine));
_COM_SMARTPTR_TYPEDEF(_IDMDParamBSplineCurve, __uuidof(_IDMDParamBSplineCurve));
_COM_SMARTPTR_TYPEDEF(Body, __uuidof(Body));
_COM_SMARTPTR_TYPEDEF(EdgeUse, __uuidof(EdgeUse));
_COM_SMARTPTR_TYPEDEF(Shells, __uuidof(Shells));
_COM_SMARTPTR_TYPEDEF(Faces, __uuidof(Faces));
_COM_SMARTPTR_TYPEDEF(Loops, __uuidof(Loops));
_COM_SMARTPTR_TYPEDEF(EdgeUses, __uuidof(EdgeUses));
_COM_SMARTPTR_TYPEDEF(Edges, __uuidof(Edges));
_COM_SMARTPTR_TYPEDEF(Vertices, __uuidof(Vertices));
_COM_SMARTPTR_TYPEDEF(_Collection, __uuidof(_Collection));
_COM_SMARTPTR_TYPEDEF(Edge, __uuidof(Edge));
_COM_SMARTPTR_TYPEDEF(Face, __uuidof(Face));
_COM_SMARTPTR_TYPEDEF(Loop, __uuidof(Loop));
_COM_SMARTPTR_TYPEDEF(Shell, __uuidof(Shell));
_COM_SMARTPTR_TYPEDEF(Vertex, __uuidof(Vertex));
_COM_SMARTPTR_TYPEDEF(BSplineSurface, __uuidof(BSplineSurface));
_COM_SMARTPTR_TYPEDEF(Cone, __uuidof(Cone));
_COM_SMARTPTR_TYPEDEF(Cylinder, __uuidof(Cylinder));
_COM_SMARTPTR_TYPEDEF(Plane, __uuidof(Plane));
_COM_SMARTPTR_TYPEDEF(Sphere, __uuidof(Sphere));
_COM_SMARTPTR_TYPEDEF(Torus, __uuidof(Torus));
_COM_SMARTPTR_TYPEDEF(MeshSurface, __uuidof(MeshSurface));
_COM_SMARTPTR_TYPEDEF(BSplineCurve, __uuidof(BSplineCurve));
_COM_SMARTPTR_TYPEDEF(Circle, __uuidof(Circle));
_COM_SMARTPTR_TYPEDEF(Ellipse, __uuidof(Ellipse));
_COM_SMARTPTR_TYPEDEF(Line, __uuidof(Line));
_COM_SMARTPTR_TYPEDEF(PLine, __uuidof(PLine));
_COM_SMARTPTR_TYPEDEF(ParamBSplineCurve, __uuidof(ParamBSplineCurve));

//
// Type library items
//

struct __declspec(uuid("c32a4775-8c85-11d3-9737-0060973828b5"))
CurveBody : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCurvePaths))
    CurvePathsPtr CurvePaths;
    __declspec(property(get=GetCurves))
    CurvesPtr Curves;
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetHasArea))
    VARIANT_BOOL HasArea;
    __declspec(property(get=GetArea))
    double Area;
    __declspec(property(get=GetGeometryForm))
    long GeometryForm;
    __declspec(property(get=GetUpdatesCounter))
    long UpdatesCounter;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;
    __declspec(property(get=GetCurveVertices))
    CurveVerticesPtr CurveVertices;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    CurvePathsPtr GetCurvePaths ( );
    CurvesPtr GetCurves ( );
    IDispatchPtr GetDocument ( );
    VARIANT_BOOL GetHasArea ( );
    HRESULT GetRange (
        SAFEARRAY * * MinRangePoint,
        SAFEARRAY * * MaxRangePoint );
    HRESULT GetExactRange (
        SAFEARRAY * * MinRangePoint,
        SAFEARRAY * * MaxRangePoint );
    double GetArea ( );
    long GetGeometryForm ( );
    HRESULT GetReferenceKey (
        SAFEARRAY * * ReferenceKey,
        VARIANT * KeySize = &vtMissing );
    long GetUpdatesCounter ( );
    enum GNTTypePropertyConstants GetType ( );
    CurveVerticesPtr GetCurveVertices ( );
};

struct __declspec(uuid("c32a4776-8c85-11d3-9737-0060973828b5"))
CurvePaths : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    CurvePathPtr Item (
        const _variant_t & index );
};

struct __declspec(uuid("c32a4777-8c85-11d3-9737-0060973828b5"))
CurvePath : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCurves))
    CurvesPtr Curves;
    __declspec(property(get=GetCurveBody))
    CurveBodyPtr CurveBody;
    __declspec(property(get=GetIsClosed))
    VARIANT_BOOL IsClosed;
    __declspec(property(get=GetIsVoid))
    VARIANT_BOOL IsVoid;
    __declspec(property(get=GetIsPlanar))
    VARIANT_BOOL IsPlanar;
    __declspec(property(get=GetIsPointInside))
    VARIANT_BOOL IsPointInside[];
    __declspec(property(get=GetArea))
    double Area;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    CurvesPtr GetCurves ( );
    CurveBodyPtr GetCurveBody ( );
    VARIANT_BOOL GetIsClosed ( );
    VARIANT_BOOL GetIsVoid ( );
    VARIANT_BOOL GetIsPlanar ( );
    VARIANT_BOOL GetIsPointInside (
        SAFEARRAY * * Point );
    HRESULT GetRange (
        SAFEARRAY * * MinRangePoint,
        SAFEARRAY * * MaxRangePoint );
    HRESULT GetExactRange (
        SAFEARRAY * * MinRangePoint,
        SAFEARRAY * * MaxRangePoint );
    double GetArea ( );
    enum GNTTypePropertyConstants GetType ( );
};

struct __declspec(uuid("c32a4771-8c85-11d3-9737-0060973828b5"))
_IDMDCurvePaths : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    CurvePathPtr Item (
        const _variant_t & index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppUnknown ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct CurvePath * * Item ) = 0;
};

struct __declspec(uuid("c32a4778-8c85-11d3-9737-0060973828b5"))
Curves : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    CurvePtr Item (
        const _variant_t & index );
};

struct __declspec(uuid("c32a4779-8c85-11d3-9737-0060973828b5"))
Curve : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCurvePath))
    CurvePathPtr CurvePath;
    __declspec(property(get=GetCurveBody))
    CurveBodyPtr CurveBody;
    __declspec(property(get=GetIsParamReversed))
    VARIANT_BOOL IsParamReversed;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;
    __declspec(property(get=GetContinuity))
    long Continuity;
    __declspec(property(get=GetGeometryForm))
    long GeometryForm;
    __declspec(property(get=GetUpdatesCounter))
    long UpdatesCounter;
    __declspec(property(get=GetGeometry))
    IDispatchPtr Geometry;
    __declspec(property(get=GetCurveVertices))
    CurveVerticesPtr CurveVertices;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    CurvePathPtr GetCurvePath ( );
    CurveBodyPtr GetCurveBody ( );
    VARIANT_BOOL GetIsParamReversed ( );
    enum GNTTypePropertyConstants GetType ( );
    HRESULT GetRange (
        SAFEARRAY * * MinRangePoint,
        SAFEARRAY * * MaxRangePoint );
    HRESULT GetExactRange (
        SAFEARRAY * * MinRangePoint,
        SAFEARRAY * * MaxRangePoint );
    HRESULT GetEndPoints (
        SAFEARRAY * * StartPoint,
        SAFEARRAY * * EndPoint );
    HRESULT GetParamExtents (
        double * MinParam,
        double * MaxParam );
    HRESULT GetParamAtPoint (
        long NumPoints,
        SAFEARRAY * * Points,
        SAFEARRAY * * GuessParams,
        SAFEARRAY * * MaxDeviations,
        SAFEARRAY * * Params,
        SAFEARRAY * * Flags );
    HRESULT GetPointAtParam (
        long NumParams,
        SAFEARRAY * * Params,
        SAFEARRAY * * Points );
    HRESULT GetTangent (
        long NumParams,
        SAFEARRAY * * Params,
        SAFEARRAY * * Tangents );
    HRESULT GetCurvature (
        long NumParams,
        SAFEARRAY * * Params,
        SAFEARRAY * * Directions,
        SAFEARRAY * * Curvatures );
    HRESULT GetDerivatives (
        long NumParams,
        SAFEARRAY * * Params,
        SAFEARRAY * * FirstDerv,
        SAFEARRAY * * SecondDerv,
        SAFEARRAY * * ThirdDerv );
    HRESULT GetParamAtLength (
        double FromParam,
        double Length,
        double * Param );
    HRESULT GetLengthAtParam (
        double FromParam,
        double ToParam,
        double * Length );
    long GetContinuity ( );
    HRESULT GetParamAnomaly (
        SAFEARRAY * * Periodicity,
        VARIANT_BOOL * Singular );
    long GetGeometryForm ( );
    HRESULT GetReferenceKey (
        SAFEARRAY * * ReferenceKey,
        VARIANT * KeySize = &vtMissing );
    long GetUpdatesCounter ( );
    IDispatchPtr GetGeometry ( );
    CurveVerticesPtr GetCurveVertices ( );
    HRESULT GetParamAtPointEx (
        long NumPoints,
        SAFEARRAY * * Points,
        SAFEARRAY * * Params,
        const _variant_t & GuessParams = vtMissing,
        VARIANT * MaxDeviations = &vtMissing,
        VARIANT * Flags = &vtMissing );
};

struct __declspec(uuid("c32a4773-8c85-11d3-9737-0060973828b5"))
_IDMDCurves : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    CurvePtr Item (
        const _variant_t & index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppUnknown ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct Curve * * Item ) = 0;
};

enum GNTTypePropertyConstants
{
    igBody = 167551091,
    igShell = 167551088,
    igFace = 167551075,
    igLoop = 167551097,
    igEdgeUse = 167551099,
    igEdge = 167551093,
    igVertex = 167551101,
    igBSplineSurface = 1465959633,
    igCylinder = -114972029,
    igCone = -114972031,
    igPlane = -1909484335,
    igMesh = -2071771273,
    igSphere = -114972027,
    igTorus = -114972025,
    igBSplineCurve = 167551103,
    igCircle = 167551105,
    igEllipse = 167551107,
    igLine = 167551109,
    igPLine = 434530178,
    igParamBSplineCurve = -1811952078,
    igCurveBody = -1020639371,
    igCurvePath = -1020639369,
    igCurve = -1020639367,
    igCurveVertex = -1020639365,
    igShells = 167551078,
    igFaces = 167551073,
    igLoops = 167551080,
    igEdgeUses = 167551095,
    igEdges = 167551084,
    igVertices = 167551086
};

struct __declspec(uuid("c32a4772-8c85-11d3-9737-0060973828b5"))
_IDMDCurvePath : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCurves))
    CurvesPtr Curves;
    __declspec(property(get=GetCurveBody))
    CurveBodyPtr CurveBody;
    __declspec(property(get=GetIsClosed))
    VARIANT_BOOL IsClosed;
    __declspec(property(get=GetIsVoid))
    VARIANT_BOOL IsVoid;
    __declspec(property(get=GetIsPlanar))
    VARIANT_BOOL IsPlanar;
    __declspec(property(get=GetIsPointInside))
    VARIANT_BOOL IsPointInside[];
    __declspec(property(get=GetArea))
    double Area;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    CurvesPtr GetCurves ( );
    CurveBodyPtr GetCurveBody ( );
    VARIANT_BOOL GetIsClosed ( );
    VARIANT_BOOL GetIsVoid ( );
    VARIANT_BOOL GetIsPlanar ( );
    VARIANT_BOOL GetIsPointInside (
        SAFEARRAY * * Point );
    HRESULT GetRange (
        SAFEARRAY * * MinRangePoint,
        SAFEARRAY * * MaxRangePoint );
    HRESULT GetExactRange (
        SAFEARRAY * * MinRangePoint,
        SAFEARRAY * * MaxRangePoint );
    double GetArea ( );
    enum GNTTypePropertyConstants GetType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Curves (
        /*[out,retval]*/ struct Curves * * Curves ) = 0;
      virtual HRESULT __stdcall get_CurveBody (
        /*[out,retval]*/ struct CurveBody * * CurveBody ) = 0;
      virtual HRESULT __stdcall get_IsClosed (
        /*[out,retval]*/ VARIANT_BOOL * Closed ) = 0;
      virtual HRESULT __stdcall get_IsVoid (
        /*[out,retval]*/ VARIANT_BOOL * Void ) = 0;
      virtual HRESULT __stdcall get_IsPlanar (
        /*[out,retval]*/ VARIANT_BOOL * Planar ) = 0;
      virtual HRESULT __stdcall get_IsPointInside (
        /*[in]*/ SAFEARRAY * * Point,
        /*[out,retval]*/ VARIANT_BOOL * PointInside ) = 0;
      virtual HRESULT __stdcall raw_GetRange (
        /*[in,out]*/ SAFEARRAY * * MinRangePoint,
        /*[in,out]*/ SAFEARRAY * * MaxRangePoint ) = 0;
      virtual HRESULT __stdcall raw_GetExactRange (
        /*[in,out]*/ SAFEARRAY * * MinRangePoint,
        /*[in,out]*/ SAFEARRAY * * MaxRangePoint ) = 0;
      virtual HRESULT __stdcall get_Area (
        /*[out,retval]*/ double * Area ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum GNTTypePropertyConstants * Type ) = 0;
};

struct __declspec(uuid("063b34cf-692a-43bd-863e-9db05d2ce382"))
CurveVertices : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    CurveVertexPtr Item (
        const _variant_t & index );
};

struct __declspec(uuid("c32a4770-8c85-11d3-9737-0060973828b5"))
_IDMDCurveBody : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCurvePaths))
    CurvePathsPtr CurvePaths;
    __declspec(property(get=GetCurves))
    CurvesPtr Curves;
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetHasArea))
    VARIANT_BOOL HasArea;
    __declspec(property(get=GetArea))
    double Area;
    __declspec(property(get=GetGeometryForm))
    long GeometryForm;
    __declspec(property(get=GetUpdatesCounter))
    long UpdatesCounter;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;
    __declspec(property(get=GetCurveVertices))
    CurveVerticesPtr CurveVertices;

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    CurvePathsPtr GetCurvePaths ( );
    CurvesPtr GetCurves ( );
    IDispatchPtr GetDocument ( );
    VARIANT_BOOL GetHasArea ( );
    HRESULT GetRange (
        SAFEARRAY * * MinRangePoint,
        SAFEARRAY * * MaxRangePoint );
    HRESULT GetExactRange (
        SAFEARRAY * * MinRangePoint,
        SAFEARRAY * * MaxRangePoint );
    double GetArea ( );
    long GetGeometryForm ( );
    HRESULT GetReferenceKey (
        SAFEARRAY * * ReferenceKey,
        VARIANT * KeySize );
    long GetUpdatesCounter ( );
    enum GNTTypePropertyConstants GetType ( );
    CurveVerticesPtr GetCurveVertices ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_CurvePaths (
        /*[out,retval]*/ struct CurvePaths * * CurvePaths ) = 0;
      virtual HRESULT __stdcall get_Curves (
        /*[out,retval]*/ struct Curves * * Curves ) = 0;
      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ IDispatch * * Document ) = 0;
      virtual HRESULT __stdcall get_HasArea (
        /*[out,retval]*/ VARIANT_BOOL * HasArea ) = 0;
      virtual HRESULT __stdcall raw_GetRange (
        /*[in,out]*/ SAFEARRAY * * MinRangePoint,
        /*[in,out]*/ SAFEARRAY * * MaxRangePoint ) = 0;
      virtual HRESULT __stdcall raw_GetExactRange (
        /*[in,out]*/ SAFEARRAY * * MinRangePoint,
        /*[in,out]*/ SAFEARRAY * * MaxRangePoint ) = 0;
      virtual HRESULT __stdcall get_Area (
        /*[out,retval]*/ double * Area ) = 0;
      virtual HRESULT __stdcall get_GeometryForm (
        /*[out,retval]*/ long * GeometryForm ) = 0;
      virtual HRESULT __stdcall raw_GetReferenceKey (
        /*[in,out]*/ SAFEARRAY * * ReferenceKey,
        /*[out]*/ VARIANT * KeySize ) = 0;
      virtual HRESULT __stdcall get_UpdatesCounter (
        /*[out,retval]*/ long * Counter ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum GNTTypePropertyConstants * Type ) = 0;
      virtual HRESULT __stdcall get_CurveVertices (
        /*[out,retval]*/ struct CurveVertices * * CurveVertices ) = 0;
};

struct __declspec(uuid("c32a4774-8c85-11d3-9737-0060973828b5"))
_IDMDCurve : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCurvePath))
    CurvePathPtr CurvePath;
    __declspec(property(get=GetCurveBody))
    CurveBodyPtr CurveBody;
    __declspec(property(get=GetIsParamReversed))
    VARIANT_BOOL IsParamReversed;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;
    __declspec(property(get=GetContinuity))
    long Continuity;
    __declspec(property(get=GetGeometryForm))
    long GeometryForm;
    __declspec(property(get=GetUpdatesCounter))
    long UpdatesCounter;
    __declspec(property(get=GetGeometry))
    IDispatchPtr Geometry;
    __declspec(property(get=GetCurveVertices))
    CurveVerticesPtr CurveVertices;

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    CurvePathPtr GetCurvePath ( );
    CurveBodyPtr GetCurveBody ( );
    VARIANT_BOOL GetIsParamReversed ( );
    enum GNTTypePropertyConstants GetType ( );
    HRESULT GetRange (
        SAFEARRAY * * MinRangePoint,
        SAFEARRAY * * MaxRangePoint );
    HRESULT GetExactRange (
        SAFEARRAY * * MinRangePoint,
        SAFEARRAY * * MaxRangePoint );
    HRESULT GetEndPoints (
        SAFEARRAY * * StartPoint,
        SAFEARRAY * * EndPoint );
    HRESULT GetParamExtents (
        double * MinParam,
        double * MaxParam );
    HRESULT GetParamAtPoint (
        long NumPoints,
        SAFEARRAY * * Points,
        SAFEARRAY * * GuessParams,
        SAFEARRAY * * MaxDeviations,
        SAFEARRAY * * Params,
        SAFEARRAY * * Flags );
    HRESULT GetPointAtParam (
        long NumParams,
        SAFEARRAY * * Params,
        SAFEARRAY * * Points );
    HRESULT GetTangent (
        long NumParams,
        SAFEARRAY * * Params,
        SAFEARRAY * * Tangents );
    HRESULT GetCurvature (
        long NumParams,
        SAFEARRAY * * Params,
        SAFEARRAY * * Directions,
        SAFEARRAY * * Curvatures );
    HRESULT GetDerivatives (
        long NumParams,
        SAFEARRAY * * Params,
        SAFEARRAY * * FirstDerv,
        SAFEARRAY * * SecondDerv,
        SAFEARRAY * * ThirdDerv );
    HRESULT GetParamAtLength (
        double FromParam,
        double Length,
        double * Param );
    HRESULT GetLengthAtParam (
        double FromParam,
        double ToParam,
        double * Length );
    long GetContinuity ( );
    HRESULT GetParamAnomaly (
        SAFEARRAY * * Periodicity,
        VARIANT_BOOL * Singular );
    long GetGeometryForm ( );
    HRESULT GetReferenceKey (
        SAFEARRAY * * ReferenceKey,
        VARIANT * KeySize );
    long GetUpdatesCounter ( );
    IDispatchPtr GetGeometry ( );
    CurveVerticesPtr GetCurveVertices ( );
    HRESULT GetParamAtPointEx (
        long NumPoints,
        SAFEARRAY * * Points,
        SAFEARRAY * * Params,
        const _variant_t & GuessParams,
        VARIANT * MaxDeviations,
        VARIANT * Flags );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_CurvePath (
        /*[out,retval]*/ struct CurvePath * * CurvePath ) = 0;
      virtual HRESULT __stdcall get_CurveBody (
        /*[out,retval]*/ struct CurveBody * * CurveBody ) = 0;
      virtual HRESULT __stdcall get_IsParamReversed (
        /*[out,retval]*/ VARIANT_BOOL * ParamReversed ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum GNTTypePropertyConstants * Type ) = 0;
      virtual HRESULT __stdcall raw_GetRange (
        /*[in,out]*/ SAFEARRAY * * MinRangePoint,
        /*[in,out]*/ SAFEARRAY * * MaxRangePoint ) = 0;
      virtual HRESULT __stdcall raw_GetExactRange (
        /*[in,out]*/ SAFEARRAY * * MinRangePoint,
        /*[in,out]*/ SAFEARRAY * * MaxRangePoint ) = 0;
      virtual HRESULT __stdcall raw_GetEndPoints (
        /*[in,out]*/ SAFEARRAY * * StartPoint,
        /*[in,out]*/ SAFEARRAY * * EndPoint ) = 0;
      virtual HRESULT __stdcall raw_GetParamExtents (
        /*[out]*/ double * MinParam,
        /*[out]*/ double * MaxParam ) = 0;
      virtual HRESULT __stdcall raw_GetParamAtPoint (
        /*[in]*/ long NumPoints,
        /*[in,out]*/ SAFEARRAY * * Points,
        /*[in,out]*/ SAFEARRAY * * GuessParams,
        /*[in,out]*/ SAFEARRAY * * MaxDeviations,
        /*[in,out]*/ SAFEARRAY * * Params,
        /*[in,out]*/ SAFEARRAY * * Flags ) = 0;
      virtual HRESULT __stdcall raw_GetPointAtParam (
        /*[in]*/ long NumParams,
        /*[in,out]*/ SAFEARRAY * * Params,
        /*[in,out]*/ SAFEARRAY * * Points ) = 0;
      virtual HRESULT __stdcall raw_GetTangent (
        /*[in]*/ long NumParams,
        /*[in,out]*/ SAFEARRAY * * Params,
        /*[in,out]*/ SAFEARRAY * * Tangents ) = 0;
      virtual HRESULT __stdcall raw_GetCurvature (
        /*[in]*/ long NumParams,
        /*[in,out]*/ SAFEARRAY * * Params,
        /*[in,out]*/ SAFEARRAY * * Directions,
        /*[in,out]*/ SAFEARRAY * * Curvatures ) = 0;
      virtual HRESULT __stdcall raw_GetDerivatives (
        /*[in]*/ long NumParams,
        /*[in,out]*/ SAFEARRAY * * Params,
        /*[in,out]*/ SAFEARRAY * * FirstDerv,
        /*[in,out]*/ SAFEARRAY * * SecondDerv,
        /*[in,out]*/ SAFEARRAY * * ThirdDerv ) = 0;
      virtual HRESULT __stdcall raw_GetParamAtLength (
        /*[in]*/ double FromParam,
        /*[in]*/ double Length,
        /*[out]*/ double * Param ) = 0;
      virtual HRESULT __stdcall raw_GetLengthAtParam (
        /*[in]*/ double FromParam,
        /*[in]*/ double ToParam,
        /*[out]*/ double * Length ) = 0;
      virtual HRESULT __stdcall get_Continuity (
        /*[out,retval]*/ long * Continuity ) = 0;
      virtual HRESULT __stdcall raw_GetParamAnomaly (
        /*[in,out]*/ SAFEARRAY * * Periodicity,
        /*[out]*/ VARIANT_BOOL * Singular ) = 0;
      virtual HRESULT __stdcall get_GeometryForm (
        /*[out,retval]*/ long * GeometryForm ) = 0;
      virtual HRESULT __stdcall raw_GetReferenceKey (
        /*[in,out]*/ SAFEARRAY * * ReferenceKey,
        /*[out]*/ VARIANT * KeySize ) = 0;
      virtual HRESULT __stdcall get_UpdatesCounter (
        /*[out,retval]*/ long * Counter ) = 0;
      virtual HRESULT __stdcall get_Geometry (
        /*[out,retval]*/ IDispatch * * Geometry ) = 0;
      virtual HRESULT __stdcall get_CurveVertices (
        /*[out,retval]*/ struct CurveVertices * * CurveVertices ) = 0;
      virtual HRESULT __stdcall raw_GetParamAtPointEx (
        /*[in]*/ long NumPoints,
        /*[in,out]*/ SAFEARRAY * * Points,
        /*[in,out]*/ SAFEARRAY * * Params,
        /*[in]*/ VARIANT GuessParams,
        /*[in,out]*/ VARIANT * MaxDeviations,
        /*[in,out]*/ VARIANT * Flags ) = 0;
};

struct __declspec(uuid("3b1d63f5-cae0-4674-9d49-7edd223e94ba"))
CurveVertex : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUpdatesCounter))
    long UpdatesCounter;
    __declspec(property(get=GetID))
    int ID;
    __declspec(property(get=GetTag))
    int Tag;
    __declspec(property(get=GetBody))
    IDispatchPtr Body;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetApplication ( );
    HRESULT GetPointData (
        SAFEARRAY * * Point );
    IDispatchPtr GetParent ( );
    HRESULT GetReferenceKey (
        SAFEARRAY * * ReferenceKey,
        VARIANT * KeySize = &vtMissing );
    enum GNTTypePropertyConstants GetType ( );
    long GetUpdatesCounter ( );
    int GetID ( );
    int GetTag ( );
    IDispatchPtr GetBody ( );
};

struct __declspec(uuid("946cd4f8-ae4e-4cb1-9153-cd3097ab5347"))
_ISEDCurveVertices : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    CurveVertexPtr Item (
        const _variant_t & index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppUnknown ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct CurveVertex * * Item ) = 0;
};

struct __declspec(uuid("ad43aa19-68a3-4550-a7cf-dee36df9c731"))
_ISEDCurveVertex : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetUpdatesCounter))
    long UpdatesCounter;
    __declspec(property(get=GetID))
    int ID;
    __declspec(property(get=GetTag))
    int Tag;
    __declspec(property(get=GetBody))
    IDispatchPtr Body;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    HRESULT GetPointData (
        SAFEARRAY * * Point );
    IDispatchPtr GetParent ( );
    HRESULT GetReferenceKey (
        SAFEARRAY * * ReferenceKey,
        VARIANT * KeySize );
    enum GNTTypePropertyConstants GetType ( );
    long GetUpdatesCounter ( );
    int GetID ( );
    int GetTag ( );
    IDispatchPtr GetBody ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * Application ) = 0;
      virtual HRESULT __stdcall raw_GetPointData (
        /*[in,out]*/ SAFEARRAY * * Point ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_GetReferenceKey (
        /*[in,out]*/ SAFEARRAY * * ReferenceKey,
        /*[out]*/ VARIANT * KeySize ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum GNTTypePropertyConstants * Type ) = 0;
      virtual HRESULT __stdcall get_UpdatesCounter (
        /*[out,retval]*/ long * Counter ) = 0;
      virtual HRESULT __stdcall get_ID (
        /*[out,retval]*/ int * VertexID ) = 0;
      virtual HRESULT __stdcall get_Tag (
        /*[out,retval]*/ int * VertexTag ) = 0;
      virtual HRESULT __stdcall get_Body (
        /*[out,retval]*/ IDispatch * * Body ) = 0;
};

enum FeatureTopologyQueryTypeConstants
{
    igQueryAll = 1,
    igQueryRoundable = 2,
    igQueryStraight = 3,
    igQueryEllipse = 4,
    igQuerySpline = 5,
    igQueryPlane = 6,
    igQueryCone = 7,
    igQueryTorus = 8,
    igQuerySphere = 9,
    igQueryCylinder = 10,
    igQueryRoundableInternal = 10000
};

enum TopologyCollectionTypeConstants
{
    seFaceCollection = 1,
    seEdgeCollection = 2,
    seVertexCollection = 3
};

enum SmartCollectionTypeConstants
{
    seRoundableEdgesAtVertex = 1,
    seRoundableSmoothEdgeChain = 2,
    seRoundableEdgesOfFace = 3,
    seRoundableEdgesOfLoop = 4,
    seRoundableEdgesOfFeature = 5,
    seRoundableConvexEdgesOfBody = 6,
    seRoundableConcaveEdgesOfBody = 7,
    seThinwallableFacesOfFeature = 8,
    seThinwallableSmoothFaceChain = 9,
    seDraftableSmoothFaceChain = 10,
    seDraftableFacesOfALoop = 11,
    seDraftableFacesOfBodyNormalToFaceOrPlane = 12,
    seBendFacesOfBody = 13,
    seBendFacesOfBodyWithBendCenterLineAttributes = 14
};

enum WallThicknessDisplayResolution
{
    DisplayResolutionCoarse = 0,
    DisplayResolutionStandard = 1,
    DisplayResolutionFine = 2
};

struct __declspec(uuid("09fca072-dfbf-11d0-a275-080036c5ed02"))
_IDMDBody : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetEdges))
    IDispatchPtr Edges[];
    __declspec(property(get=GetFaces))
    IDispatchPtr Faces[];
    __declspec(property(get=GetShells))
    IDispatchPtr Shells;
    __declspec(property(get=GetFacetCount))
    long FacetCount[];
    __declspec(property(get=GetVolume))
    double Volume;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;
    __declspec(property(get=GetGeometryForm))
    long GeometryForm;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetIsSolid))
    VARIANT_BOOL IsSolid;
    __declspec(property(get=GetFacesByRay))
    IDispatchPtr FacesByRay[][][][][][];
    __declspec(property(get=GetUpdatesCounter))
    long UpdatesCounter;
    __declspec(property(get=GetValid))
    VARIANT_BOOL Valid;
    __declspec(property(get=GetStyle,put=PutStyle))
    TGFramework::FaceStylePtr Style;
    __declspec(property(get=GetIsOverriddenBody))
    VARIANT_BOOL IsOverriddenBody;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetTag))
    int Tag;
    __declspec(property(get=GetVertices))
    IDispatchPtr Vertices;
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetDisplayName,put=PutDisplayName))
    _bstr_t DisplayName;
    __declspec(property(get=GetLoops))
    IDispatchPtr Loops;
    __declspec(property(get=GetRefID))
    int RefID;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    IDispatchPtr GetEdges (
        enum FeatureTopologyQueryTypeConstants EdgeType );
    IDispatchPtr GetFaces (
        enum FeatureTopologyQueryTypeConstants FaceType );
    IDispatchPtr GetFacesByRay (
        double Xorigin,
        double Yorigin,
        double Zorigin,
        double Xdir,
        double Ydir,
        double Zdir );
    IDispatchPtr GetShells ( );
    long GetFacetCount (
        double Tolerance );
    HRESULT GetFacetData (
        double Tolerance,
        long * FacetCount,
        SAFEARRAY * * Points,
        VARIANT * Normals,
        VARIANT * TextureCoords,
        VARIANT * StyleIDs,
        VARIANT * FaceIDs,
        const _variant_t & bHonourPrefs = vtMissing );
    HRESULT GetRange (
        SAFEARRAY * * MinRangePoint,
        SAFEARRAY * * MaxRangePoint );
    HRESULT GetExactRange (
        SAFEARRAY * * MinRangePoint,
        SAFEARRAY * * MaxRangePoint );
    double GetVolume ( );
    enum GNTTypePropertyConstants GetType ( );
    long GetGeometryForm ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetIsSolid ( );
    HRESULT ComputePhysicalProperties (
        double Density,
        double Accuracy,
        double * Volume,
        double * Area,
        double * Mass,
        SAFEARRAY * * CenterOfGravity,
        SAFEARRAY * * CenterOfVolume,
        SAFEARRAY * * GlobalMomentsOfInteria,
        SAFEARRAY * * PrincipalMomentsOfInteria,
        SAFEARRAY * * PrincipalAxes,
        SAFEARRAY * * RadiiOfGyration,
        double * RelativeAccuracyAchieved,
        int * Status );
    long GetUpdatesCounter ( );
    HRESULT GetReferenceKey (
        SAFEARRAY * * ReferenceKey,
        VARIANT * KeySize );
    IDispatchPtr CreateCollection (
        enum TopologyCollectionTypeConstants Type,
        const _variant_t & NumberOfObjects = vtMissing,
        const _variant_t & ObjectArray = vtMissing );
    IDispatchPtr CreateSmartCollection (
        IDispatch * SeedObject,
        enum SmartCollectionTypeConstants CollectionType,
        const _variant_t & AdditionalObject = vtMissing );
    VARIANT_BOOL GetValid ( );
    IDispatchPtr GetFaceByFaceID (
        int FaceID );
    TGFramework::FaceStylePtr GetStyle ( );
    void PutStyle (
        struct TGFramework::FaceStyle * Style );
    HRESULT SetFacesStyle (
        long NumberOfFaces,
        SAFEARRAY * * FacesArray,
        struct TGFramework::FaceStyle * Style );
    VARIANT_BOOL GetIsOverriddenBody ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL Visible );
    int GetTag ( );
    IDispatchPtr GetVertices ( );
    IDispatchPtr GetEntityByID (
        int EntityID );
    int GetIDFromEntity (
        IDispatch * Entity );
    int GetEntityType (
        IDispatch * Entity );
    IDispatchPtr GetLoops ( );
    HRESULT GetExtremePoint (
        double DirectionX,
        double DirectionY,
        double DirectionZ,
        double * ExtremeX,
        double * ExtremeY,
        double * ExtremeZ );
    HRESULT ClearOverrides ( );
    IDispatchPtr GetDocument ( );
    _bstr_t GetDisplayName ( );
    void PutDisplayName (
        _bstr_t pbsName );
    int GetRefID ( );
    HRESULT CalculateWallThickness (
        enum WallThicknessDisplayResolution resolution,
        double * pDUpVector,
        VARIANT * pvecThicknessData,
        int * piSize,
        SAFEARRAY * pdTransform );
    HRESULT GetRenderLineData (
        double chordTol,
        long * pointCount,
        SAFEARRAY * * Points,
        long * lineCount,
        SAFEARRAY * * pointIndices,
        SAFEARRAY * * edgeIDs );
    HRESULT GetFacetDataEx (
        double Tolerance,
        long * pointCount,
        SAFEARRAY * * Points,
        long * FacetCount,
        SAFEARRAY * * FacetPointIndices,
        VARIANT * NormalCount,
        VARIANT * Normals,
        VARIANT * FacetNormalIndices,
        VARIANT * TextureCoordsCount,
        VARIANT * TextureCoords,
        VARIANT * FacetTextureCoordsIndices,
        VARIANT * FacetStyleIDs,
        VARIANT * FacetFaceIDs,
        const _variant_t & bHonourPrefs = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * Application ) = 0;
      virtual HRESULT __stdcall get_Edges (
        /*[in]*/ enum FeatureTopologyQueryTypeConstants EdgeType,
        /*[out,retval]*/ IDispatch * * Edges ) = 0;
      virtual HRESULT __stdcall get_Faces (
        /*[in]*/ enum FeatureTopologyQueryTypeConstants FaceType,
        /*[out,retval]*/ IDispatch * * Faces ) = 0;
      virtual HRESULT __stdcall get_FacesByRay (
        /*[in]*/ double Xorigin,
        /*[in]*/ double Yorigin,
        /*[in]*/ double Zorigin,
        /*[in]*/ double Xdir,
        /*[in]*/ double Ydir,
        /*[in]*/ double Zdir,
        /*[out,retval]*/ IDispatch * * ppFeatureFaces ) = 0;
      virtual HRESULT __stdcall get_Shells (
        /*[out,retval]*/ IDispatch * * Shells ) = 0;
      virtual HRESULT __stdcall get_FacetCount (
        /*[in]*/ double Tolerance,
        /*[out,retval]*/ long * FacetCount ) = 0;
      virtual HRESULT __stdcall raw_GetFacetData (
        /*[in]*/ double Tolerance,
        /*[out]*/ long * FacetCount,
        /*[in,out]*/ SAFEARRAY * * Points,
        /*[out]*/ VARIANT * Normals,
        /*[out]*/ VARIANT * TextureCoords,
        /*[out]*/ VARIANT * StyleIDs,
        /*[out]*/ VARIANT * FaceIDs,
        /*[in]*/ VARIANT bHonourPrefs = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_GetRange (
        /*[in,out]*/ SAFEARRAY * * MinRangePoint,
        /*[in,out]*/ SAFEARRAY * * MaxRangePoint ) = 0;
      virtual HRESULT __stdcall raw_GetExactRange (
        /*[in,out]*/ SAFEARRAY * * MinRangePoint,
        /*[in,out]*/ SAFEARRAY * * MaxRangePoint ) = 0;
      virtual HRESULT __stdcall get_Volume (
        /*[out,retval]*/ double * Volume ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum GNTTypePropertyConstants * Type ) = 0;
      virtual HRESULT __stdcall get_GeometryForm (
        /*[out,retval]*/ long * GeometryForm ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_IsSolid (
        /*[out,retval]*/ VARIANT_BOOL * Solid ) = 0;
      virtual HRESULT __stdcall raw_ComputePhysicalProperties (
        /*[in]*/ double Density,
        /*[in]*/ double Accuracy,
        /*[out]*/ double * Volume,
        /*[out]*/ double * Area,
        /*[out]*/ double * Mass,
        /*[in,out]*/ SAFEARRAY * * CenterOfGravity,
        /*[in,out]*/ SAFEARRAY * * CenterOfVolume,
        /*[in,out]*/ SAFEARRAY * * GlobalMomentsOfInteria,
        /*[in,out]*/ SAFEARRAY * * PrincipalMomentsOfInteria,
        /*[in,out]*/ SAFEARRAY * * PrincipalAxes,
        /*[in,out]*/ SAFEARRAY * * RadiiOfGyration,
        /*[out]*/ double * RelativeAccuracyAchieved,
        /*[out]*/ int * Status ) = 0;
      virtual HRESULT __stdcall get_UpdatesCounter (
        /*[out,retval]*/ long * Counter ) = 0;
      virtual HRESULT __stdcall raw_GetReferenceKey (
        /*[in,out]*/ SAFEARRAY * * ReferenceKey,
        /*[out]*/ VARIANT * KeySize ) = 0;
      virtual HRESULT __stdcall raw_CreateCollection (
        /*[in]*/ enum TopologyCollectionTypeConstants Type,
        /*[in]*/ VARIANT NumberOfObjects,
        /*[in]*/ VARIANT ObjectArray,
        /*[out,retval]*/ IDispatch * * Collection ) = 0;
      virtual HRESULT __stdcall raw_CreateSmartCollection (
        /*[in]*/ IDispatch * SeedObject,
        /*[in]*/ enum SmartCollectionTypeConstants CollectionType,
        /*[in]*/ VARIANT AdditionalObject,
        /*[out,retval]*/ IDispatch * * SmartCollection ) = 0;
      virtual HRESULT __stdcall get_Valid (
        /*[out,retval]*/ VARIANT_BOOL * Valid ) = 0;
      virtual HRESULT __stdcall raw_GetFaceByFaceID (
        /*[in]*/ int FaceID,
        /*[out,retval]*/ IDispatch * * Face ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct TGFramework::FaceStyle * * Style ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ struct TGFramework::FaceStyle * Style ) = 0;
      virtual HRESULT __stdcall raw_SetFacesStyle (
        /*[in]*/ long NumberOfFaces,
        /*[in,out]*/ SAFEARRAY * * FacesArray,
        /*[in]*/ struct TGFramework::FaceStyle * Style ) = 0;
      virtual HRESULT __stdcall get_IsOverriddenBody (
        /*[out,retval]*/ VARIANT_BOOL * IsOverriddenBody ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
      virtual HRESULT __stdcall get_Tag (
        /*[out,retval]*/ int * BodyTag ) = 0;
      virtual HRESULT __stdcall get_Vertices (
        /*[out,retval]*/ IDispatch * * Vertices ) = 0;
      virtual HRESULT __stdcall raw_GetEntityByID (
        /*[in]*/ int EntityID,
        /*[out,retval]*/ IDispatch * * Entity ) = 0;
      virtual HRESULT __stdcall raw_GetIDFromEntity (
        /*[in]*/ IDispatch * Entity,
        /*[out,retval]*/ int * EntityID ) = 0;
      virtual HRESULT __stdcall raw_GetEntityType (
        /*[in]*/ IDispatch * Entity,
        /*[out,retval]*/ int * EntityClass ) = 0;
      virtual HRESULT __stdcall get_Loops (
        /*[out,retval]*/ IDispatch * * Loops ) = 0;
      virtual HRESULT __stdcall raw_GetExtremePoint (
        /*[in]*/ double DirectionX,
        /*[in]*/ double DirectionY,
        /*[in]*/ double DirectionZ,
        /*[out]*/ double * ExtremeX,
        /*[out]*/ double * ExtremeY,
        /*[out]*/ double * ExtremeZ ) = 0;
      virtual HRESULT __stdcall raw_ClearOverrides ( ) = 0;
      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ IDispatch * * doc ) = 0;
      virtual HRESULT __stdcall get_DisplayName (
        /*[out,retval]*/ BSTR * pbsName ) = 0;
      virtual HRESULT __stdcall put_DisplayName (
        /*[in]*/ BSTR pbsName ) = 0;
      virtual HRESULT __stdcall get_RefID (
        /*[out,retval]*/ int * BodyRefID ) = 0;
      virtual HRESULT __stdcall raw_CalculateWallThickness (
        /*[in]*/ enum WallThicknessDisplayResolution resolution,
        /*[out]*/ double * pDUpVector,
        /*[out]*/ VARIANT * pvecThicknessData,
        /*[out]*/ int * piSize,
        /*[in]*/ SAFEARRAY * pdTransform ) = 0;
      virtual HRESULT __stdcall raw_GetRenderLineData (
        /*[in]*/ double chordTol,
        /*[out]*/ long * pointCount,
        /*[out]*/ SAFEARRAY * * Points,
        /*[out]*/ long * lineCount,
        /*[out]*/ SAFEARRAY * * pointIndices,
        /*[out]*/ SAFEARRAY * * edgeIDs ) = 0;
      virtual HRESULT __stdcall raw_GetFacetDataEx (
        /*[in]*/ double Tolerance,
        /*[out]*/ long * pointCount,
        /*[in,out]*/ SAFEARRAY * * Points,
        /*[out]*/ long * FacetCount,
        /*[in,out]*/ SAFEARRAY * * FacetPointIndices,
        /*[out]*/ VARIANT * NormalCount,
        /*[out]*/ VARIANT * Normals,
        /*[out]*/ VARIANT * FacetNormalIndices,
        /*[out]*/ VARIANT * TextureCoordsCount,
        /*[out]*/ VARIANT * TextureCoords,
        /*[out]*/ VARIANT * FacetTextureCoordsIndices,
        /*[out]*/ VARIANT * FacetStyleIDs,
        /*[out]*/ VARIANT * FacetFaceIDs,
        /*[in]*/ VARIANT bHonourPrefs = vtMissing ) = 0;
};

struct __declspec(uuid("09fca07a-dfbf-11d0-a275-080036c5ed02"))
_IDMDEdgeUse : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetEdge))
    IDispatchPtr Edge;
    __declspec(property(get=GetIsOpposedToEdge))
    VARIANT_BOOL IsOpposedToEdge;
    __declspec(property(get=GetIsParamReversed))
    VARIANT_BOOL IsParamReversed;
    __declspec(property(get=GetLoop))
    IDispatchPtr Loop;
    __declspec(property(get=GetGeometry))
    IDispatchPtr Geometry;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPartner))
    IDispatchPtr Partner;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;
    __declspec(property(get=GetNext))
    IDispatchPtr Next;
    __declspec(property(get=GetPrevious))
    IDispatchPtr Previous;
    __declspec(property(get=GetIsClosed))
    VARIANT_BOOL IsClosed;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    IDispatchPtr GetEdge ( );
    VARIANT_BOOL GetIsOpposedToEdge ( );
    VARIANT_BOOL GetIsParamReversed ( );
    IDispatchPtr GetLoop ( );
    IDispatchPtr GetGeometry ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr GetPartner ( );
    enum GNTTypePropertyConstants GetType ( );
    VARIANT_BOOL GetIsClosed ( );
    IDispatchPtr GetNext ( );
    IDispatchPtr GetPrevious ( );
    HRESULT GetDerivatives (
        long NumParams,
        SAFEARRAY * * Params,
        SAFEARRAY * * FirstDerv,
        SAFEARRAY * * SecondDerv,
        SAFEARRAY * * ThirdDerv );
    HRESULT GetRange (
        SAFEARRAY * * MinRangePoint,
        SAFEARRAY * * MaxRangePoint );
    HRESULT GetExactRange (
        SAFEARRAY * * MinRangePoint,
        SAFEARRAY * * MaxRangePoint );
    HRESULT GetEndPoints (
        SAFEARRAY * * StartPoint,
        SAFEARRAY * * EndPoint );
    HRESULT GetParamAtPoint (
        long NumPoints,
        SAFEARRAY * * Points,
        SAFEARRAY * * GuessParams,
        SAFEARRAY * * MaxDeviations,
        SAFEARRAY * * Params,
        SAFEARRAY * * Flags );
    HRESULT GetParamExtents (
        double * MinParam,
        double * MaxParam );
    HRESULT GetPointAtParam (
        long NumParams,
        SAFEARRAY * * Params,
        SAFEARRAY * * Points );
    HRESULT GetTangent (
        long NumParams,
        SAFEARRAY * * Params,
        SAFEARRAY * * Tangents );
    HRESULT GetParamAtPointEx (
        long NumPoints,
        SAFEARRAY * * Points,
        SAFEARRAY * * Params,
        const _variant_t & GuessParams,
        VARIANT * MaxDeviations,
        VARIANT * Flags );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * Application ) = 0;
      virtual HRESULT __stdcall get_Edge (
        /*[out,retval]*/ IDispatch * * Edge ) = 0;
      virtual HRESULT __stdcall get_IsOpposedToEdge (
        /*[out,retval]*/ VARIANT_BOOL * IsOpposedToEdge ) = 0;
      virtual HRESULT __stdcall get_IsParamReversed (
        /*[out,retval]*/ VARIANT_BOOL * ParamReversed ) = 0;
      virtual HRESULT __stdcall get_Loop (
        /*[out,retval]*/ IDispatch * * Loop ) = 0;
      virtual HRESULT __stdcall get_Geometry (
        /*[out,retval]*/ IDispatch * * Geometry ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Partner (
        /*[out,retval]*/ IDispatch * * EdgeUse ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum GNTTypePropertyConstants * Type ) = 0;
      virtual HRESULT __stdcall get_IsClosed (
        /*[out,retval]*/ VARIANT_BOOL * Closed ) = 0;
      virtual HRESULT __stdcall get_Next (
        /*[out,retval]*/ IDispatch * * Edge ) = 0;
      virtual HRESULT __stdcall get_Previous (
        /*[out,retval]*/ IDispatch * * Edge ) = 0;
      virtual HRESULT __stdcall raw_GetDerivatives (
        /*[in]*/ long NumParams,
        /*[in,out]*/ SAFEARRAY * * Params,
        /*[in,out]*/ SAFEARRAY * * FirstDerv,
        /*[in,out]*/ SAFEARRAY * * SecondDerv,
        /*[in,out]*/ SAFEARRAY * * ThirdDerv ) = 0;
      virtual HRESULT __stdcall raw_GetRange (
        /*[in,out]*/ SAFEARRAY * * MinRangePoint,
        /*[in,out]*/ SAFEARRAY * * MaxRangePoint ) = 0;
      virtual HRESULT __stdcall raw_GetExactRange (
        /*[in,out]*/ SAFEARRAY * * MinRangePoint,
        /*[in,out]*/ SAFEARRAY * * MaxRangePoint ) = 0;
      virtual HRESULT __stdcall raw_GetEndPoints (
        /*[in,out]*/ SAFEARRAY * * StartPoint,
        /*[in,out]*/ SAFEARRAY * * EndPoint ) = 0;
      virtual HRESULT __stdcall raw_GetParamAtPoint (
        /*[in]*/ long NumPoints,
        /*[in,out]*/ SAFEARRAY * * Points,
        /*[in,out]*/ SAFEARRAY * * GuessParams,
        /*[in,out]*/ SAFEARRAY * * MaxDeviations,
        /*[in,out]*/ SAFEARRAY * * Params,
        /*[in,out]*/ SAFEARRAY * * Flags ) = 0;
      virtual HRESULT __stdcall raw_GetParamExtents (
        /*[out]*/ double * MinParam,
        /*[out]*/ double * MaxParam ) = 0;
      virtual HRESULT __stdcall raw_GetPointAtParam (
        /*[in]*/ long NumParams,
        /*[in,out]*/ SAFEARRAY * * Params,
        /*[in,out]*/ SAFEARRAY * * Points ) = 0;
      virtual HRESULT __stdcall raw_GetTangent (
        /*[in]*/ long NumParams,
        /*[in,out]*/ SAFEARRAY * * Params,
        /*[in,out]*/ SAFEARRAY * * Tangents ) = 0;
      virtual HRESULT __stdcall raw_GetParamAtPointEx (
        /*[in]*/ long NumPoints,
        /*[in,out]*/ SAFEARRAY * * Points,
        /*[in,out]*/ SAFEARRAY * * Params,
        /*[in]*/ VARIANT GuessParams,
        /*[in,out]*/ VARIANT * MaxDeviations,
        /*[in,out]*/ VARIANT * Flags ) = 0;
};

struct __declspec(uuid("09fca065-dfbf-11d0-a275-080036c5ed02"))
_IDMDShells : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IDispatchPtr Item (
        const _variant_t & index );
    enum GNTTypePropertyConstants GetType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppUnknown ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ IDispatch * * Item ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum GNTTypePropertyConstants * Type ) = 0;
};

struct __declspec(uuid("09fca060-dfbf-11d0-a275-080036c5ed02"))
_IDMDFaces : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetIsUserDefined))
    VARIANT_BOOL IsUserDefined;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IDispatchPtr Item (
        const _variant_t & index );
    HRESULT Add (
        IDispatch * Item );
    HRESULT Remove (
        IDispatch * Item );
    HRESULT RemoveAll ( );
    VARIANT_BOOL GetIsUserDefined ( );
    enum GNTTypePropertyConstants GetType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppUnknown ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ IDispatch * * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ IDispatch * Item ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ IDispatch * Item ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall get_IsUserDefined (
        /*[out,retval]*/ VARIANT_BOOL * UserDefined ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum GNTTypePropertyConstants * Type ) = 0;
};

struct __declspec(uuid("09fca067-dfbf-11d0-a275-080036c5ed02"))
_IDMDLoops : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IDispatchPtr Item (
        const _variant_t & index );
    enum GNTTypePropertyConstants GetType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppUnknown ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ IDispatch * * Item ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum GNTTypePropertyConstants * Type ) = 0;
};

struct __declspec(uuid("09fca076-dfbf-11d0-a275-080036c5ed02"))
_IDMDEdgeUses : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IDispatchPtr Item (
        const _variant_t & index );
    enum GNTTypePropertyConstants GetType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppUnknown ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ IDispatch * * Item ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum GNTTypePropertyConstants * Type ) = 0;
};

struct __declspec(uuid("09fca06b-dfbf-11d0-a275-080036c5ed02"))
_IDMDEdges : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetIsUserDefined))
    VARIANT_BOOL IsUserDefined;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IDispatchPtr Item (
        const _variant_t & index );
    HRESULT Add (
        IDispatch * Item );
    HRESULT Remove (
        IDispatch * Item );
    HRESULT RemoveAll ( );
    VARIANT_BOOL GetIsUserDefined ( );
    enum GNTTypePropertyConstants GetType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppUnknown ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ IDispatch * * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ IDispatch * Item ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ IDispatch * Item ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall get_IsUserDefined (
        /*[out,retval]*/ VARIANT_BOOL * UserDefined ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum GNTTypePropertyConstants * Type ) = 0;
};

struct __declspec(uuid("09fca06d-dfbf-11d0-a275-080036c5ed02"))
_IDMDVertices : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetIsUserDefined))
    VARIANT_BOOL IsUserDefined;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IDispatchPtr Item (
        const _variant_t & index );
    HRESULT Add (
        IDispatch * Item );
    HRESULT Remove (
        IDispatch * Item );
    HRESULT RemoveAll ( );
    VARIANT_BOOL GetIsUserDefined ( );
    enum GNTTypePropertyConstants GetType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppUnknown ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ IDispatch * * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ IDispatch * Item ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ IDispatch * Item ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall get_IsUserDefined (
        /*[out,retval]*/ VARIANT_BOOL * UserDefined ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum GNTTypePropertyConstants * Type ) = 0;
};

struct __declspec(uuid("09fca064-dfbf-11d0-a275-080036c5ed02"))
_IDMDCollection : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetIsUserDefined))
    VARIANT_BOOL IsUserDefined;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    IDispatchPtr Item (
        const _variant_t & index );
    HRESULT Add (
        IDispatch * Item );
    HRESULT Remove (
        IDispatch * Item );
    HRESULT RemoveAll ( );
    VARIANT_BOOL GetIsUserDefined ( );
    enum GNTTypePropertyConstants GetType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppUnknown ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ IDispatch * * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ IDispatch * Item ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ IDispatch * Item ) = 0;
      virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
      virtual HRESULT __stdcall get_IsUserDefined (
        /*[out,retval]*/ VARIANT_BOOL * UserDefined ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum GNTTypePropertyConstants * Type ) = 0;
};

struct __declspec(uuid("09fca074-dfbf-11d0-a275-080036c5ed02"))
_IDMDEdge : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetContinuity))
    long Continuity;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetGeometryForm))
    long GeometryForm;
    __declspec(property(get=GetEndVertex))
    IDispatchPtr EndVertex;
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetGeometry))
    IDispatchPtr Geometry;
    __declspec(property(get=GetIsParamReversed))
    VARIANT_BOOL IsParamReversed;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetStartVertex))
    IDispatchPtr StartVertex;
    __declspec(property(get=GetStrokeCount))
    long StrokeCount[];
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;
    __declspec(property(get=GetUpdatesCounter))
    long UpdatesCounter;
    __declspec(property(get=GetIsClosed))
    VARIANT_BOOL IsClosed;
    __declspec(property(get=GetID))
    int ID;
    __declspec(property(get=GetTag))
    int Tag;
    __declspec(property(get=GetBody))
    IDispatchPtr Body;
    __declspec(property(get=GetShells))
    IDispatchPtr Shells;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    HRESULT GetEdgeUses (
        long * NumEdgeUses,
        SAFEARRAY * * EdgeUses );
    IDispatchPtr GetEndVertex ( );
    HRESULT GetFaces (
        long * NumFaces,
        SAFEARRAY * * Faces );
    IDispatchPtr GetGeometry ( );
    VARIANT_BOOL GetIsParamReversed ( );
    VARIANT_BOOL GetIsClosed ( );
    IDispatchPtr GetParent ( );
    HRESULT GetReferenceKey (
        SAFEARRAY * * ReferenceKey,
        VARIANT * KeySize );
    IDispatchPtr GetStartVertex ( );
    long GetStrokeCount (
        double Tolerance );
    HRESULT GetStrokeData (
        double Tolerance,
        long * StrokeCount,
        SAFEARRAY * * Points,
        SAFEARRAY * * Params );
    enum GNTTypePropertyConstants GetType ( );
    long GetContinuity ( );
    HRESULT GetCurvature (
        long NumParams,
        SAFEARRAY * * Params,
        SAFEARRAY * * Directions,
        SAFEARRAY * * Curvatures );
    HRESULT GetDerivatives (
        long NumParams,
        SAFEARRAY * * Params,
        SAFEARRAY * * FirstDerv,
        SAFEARRAY * * SecondDerv,
        SAFEARRAY * * ThirdDerv );
    long GetGeometryForm ( );
    HRESULT GetRange (
        SAFEARRAY * * MinRangePoint,
        SAFEARRAY * * MaxRangePoint );
    HRESULT GetExactRange (
        SAFEARRAY * * MinRangePoint,
        SAFEARRAY * * MaxRangePoint );
    HRESULT GetEndPoints (
        SAFEARRAY * * StartPoint,
        SAFEARRAY * * EndPoint );
    HRESULT GetLengthAtParam (
        double FromParam,
        double ToParam,
        double * Length );
    HRESULT GetParamAnomaly (
        SAFEARRAY * * Periodicity,
        VARIANT_BOOL * Singular );
    HRESULT GetParamAtPoint (
        long NumPoints,
        SAFEARRAY * * Points,
        SAFEARRAY * * GuessParams,
        SAFEARRAY * * MaxDeviations,
        SAFEARRAY * * Params,
        SAFEARRAY * * Flags );
    HRESULT GetParamAtLength (
        double FromParam,
        double Length,
        double * Param );
    HRESULT GetParamExtents (
        double * MinParam,
        double * MaxParam );
    HRESULT GetPointAtParam (
        long NumParams,
        SAFEARRAY * * Params,
        SAFEARRAY * * Points );
    HRESULT GetTangent (
        long NumParams,
        SAFEARRAY * * Params,
        SAFEARRAY * * Tangents );
    long GetUpdatesCounter ( );
    int GetID ( );
    int GetTag ( );
    IDispatchPtr GetBody ( );
    IDispatchPtr GetShells ( );
    HRESULT GetParamAtPointEx (
        long NumPoints,
        SAFEARRAY * * Points,
        SAFEARRAY * * Params,
        const _variant_t & GuessParams,
        VARIANT * MaxDeviations,
        VARIANT * Flags );
    IDispatchPtr GetDocument ( );
    HRESULT GetRenderLineData (
        double chordTol,
        long * pointCount,
        SAFEARRAY * * Points,
        long * lineCount,
        SAFEARRAY * * pointIndices,
        SAFEARRAY * * edgeIDs );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * Application ) = 0;
      virtual HRESULT __stdcall raw_GetEdgeUses (
        /*[out]*/ long * NumEdgeUses,
        /*[in,out]*/ SAFEARRAY * * EdgeUses ) = 0;
      virtual HRESULT __stdcall get_EndVertex (
        /*[out,retval]*/ IDispatch * * EndVertex ) = 0;
      virtual HRESULT __stdcall raw_GetFaces (
        /*[out]*/ long * NumFaces,
        /*[in,out]*/ SAFEARRAY * * Faces ) = 0;
      virtual HRESULT __stdcall get_Geometry (
        /*[out,retval]*/ IDispatch * * Geometry ) = 0;
      virtual HRESULT __stdcall get_IsParamReversed (
        /*[out,retval]*/ VARIANT_BOOL * PaGetramReversed ) = 0;
      virtual HRESULT __stdcall get_IsClosed (
        /*[out,retval]*/ VARIANT_BOOL * Closed ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_GetReferenceKey (
        /*[in,out]*/ SAFEARRAY * * ReferenceKey,
        /*[out]*/ VARIANT * KeySize ) = 0;
      virtual HRESULT __stdcall get_StartVertex (
        /*[out,retval]*/ IDispatch * * StartVertex ) = 0;
      virtual HRESULT __stdcall get_StrokeCount (
        /*[in]*/ double Tolerance,
        /*[out,retval]*/ long * StrokeCount ) = 0;
      virtual HRESULT __stdcall raw_GetStrokeData (
        /*[in]*/ double Tolerance,
        /*[out]*/ long * StrokeCount,
        /*[in,out]*/ SAFEARRAY * * Points,
        /*[in,out]*/ SAFEARRAY * * Params ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum GNTTypePropertyConstants * Type ) = 0;
      virtual HRESULT __stdcall get_Continuity (
        /*[out,retval]*/ long * Continuity ) = 0;
      virtual HRESULT __stdcall raw_GetCurvature (
        /*[in]*/ long NumParams,
        /*[in,out]*/ SAFEARRAY * * Params,
        /*[in,out]*/ SAFEARRAY * * Directions,
        /*[in,out]*/ SAFEARRAY * * Curvatures ) = 0;
      virtual HRESULT __stdcall raw_GetDerivatives (
        /*[in]*/ long NumParams,
        /*[in,out]*/ SAFEARRAY * * Params,
        /*[in,out]*/ SAFEARRAY * * FirstDerv,
        /*[in,out]*/ SAFEARRAY * * SecondDerv,
        /*[in,out]*/ SAFEARRAY * * ThirdDerv ) = 0;
      virtual HRESULT __stdcall get_GeometryForm (
        /*[out,retval]*/ long * GeometryForm ) = 0;
      virtual HRESULT __stdcall raw_GetRange (
        /*[in,out]*/ SAFEARRAY * * MinRangePoint,
        /*[in,out]*/ SAFEARRAY * * MaxRangePoint ) = 0;
      virtual HRESULT __stdcall raw_GetExactRange (
        /*[in,out]*/ SAFEARRAY * * MinRangePoint,
        /*[in,out]*/ SAFEARRAY * * MaxRangePoint ) = 0;
      virtual HRESULT __stdcall raw_GetEndPoints (
        /*[in,out]*/ SAFEARRAY * * StartPoint,
        /*[in,out]*/ SAFEARRAY * * EndPoint ) = 0;
      virtual HRESULT __stdcall raw_GetLengthAtParam (
        /*[in]*/ double FromParam,
        /*[in]*/ double ToParam,
        /*[out]*/ double * Length ) = 0;
      virtual HRESULT __stdcall raw_GetParamAnomaly (
        /*[in,out]*/ SAFEARRAY * * Periodicity,
        /*[out]*/ VARIANT_BOOL * Singular ) = 0;
      virtual HRESULT __stdcall raw_GetParamAtPoint (
        /*[in]*/ long NumPoints,
        /*[in,out]*/ SAFEARRAY * * Points,
        /*[in,out]*/ SAFEARRAY * * GuessParams,
        /*[in,out]*/ SAFEARRAY * * MaxDeviations,
        /*[in,out]*/ SAFEARRAY * * Params,
        /*[in,out]*/ SAFEARRAY * * Flags ) = 0;
      virtual HRESULT __stdcall raw_GetParamAtLength (
        /*[in]*/ double FromParam,
        /*[in]*/ double Length,
        /*[out]*/ double * Param ) = 0;
      virtual HRESULT __stdcall raw_GetParamExtents (
        /*[out]*/ double * MinParam,
        /*[out]*/ double * MaxParam ) = 0;
      virtual HRESULT __stdcall raw_GetPointAtParam (
        /*[in]*/ long NumParams,
        /*[in,out]*/ SAFEARRAY * * Params,
        /*[in,out]*/ SAFEARRAY * * Points ) = 0;
      virtual HRESULT __stdcall raw_GetTangent (
        /*[in]*/ long NumParams,
        /*[in,out]*/ SAFEARRAY * * Params,
        /*[in,out]*/ SAFEARRAY * * Tangents ) = 0;
      virtual HRESULT __stdcall get_UpdatesCounter (
        /*[out,retval]*/ long * Counter ) = 0;
      virtual HRESULT __stdcall get_ID (
        /*[out,retval]*/ int * EdgeID ) = 0;
      virtual HRESULT __stdcall get_Tag (
        /*[out,retval]*/ int * EdgeTag ) = 0;
      virtual HRESULT __stdcall get_Body (
        /*[out,retval]*/ IDispatch * * Body ) = 0;
      virtual HRESULT __stdcall get_Shells (
        /*[out,retval]*/ IDispatch * * Shells ) = 0;
      virtual HRESULT __stdcall raw_GetParamAtPointEx (
        /*[in]*/ long NumPoints,
        /*[in,out]*/ SAFEARRAY * * Points,
        /*[in,out]*/ SAFEARRAY * * Params,
        /*[in]*/ VARIANT GuessParams,
        /*[in,out]*/ VARIANT * MaxDeviations,
        /*[in,out]*/ VARIANT * Flags ) = 0;
      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ IDispatch * * doc ) = 0;
      virtual HRESULT __stdcall raw_GetRenderLineData (
        /*[in]*/ double chordTol,
        /*[out]*/ long * pointCount,
        /*[out]*/ SAFEARRAY * * Points,
        /*[out]*/ long * lineCount,
        /*[out]*/ SAFEARRAY * * pointIndices,
        /*[out]*/ SAFEARRAY * * edgeIDs ) = 0;
};

struct __declspec(uuid("09fca062-dfbf-11d0-a275-080036c5ed02"))
_IDMDFace : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetArea))
    double Area;
    __declspec(property(get=GetGeometryForm))
    long GeometryForm;
    __declspec(property(get=GetID))
    int ID;
    __declspec(property(get=GetTag))
    int Tag;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetBody))
    IDispatchPtr Body;
    __declspec(property(get=GetEdges))
    IDispatchPtr Edges;
    __declspec(property(get=GetGeometry))
    IDispatchPtr Geometry;
    __declspec(property(get=GetIsParamReversed))
    VARIANT_BOOL IsParamReversed;
    __declspec(property(get=GetLoops))
    IDispatchPtr Loops;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetShell))
    IDispatchPtr Shell;
    __declspec(property(get=GetContinuity))
    long Continuity;
    __declspec(property(get=GetFacetCount))
    long FacetCount[];
    __declspec(property(get=GetFeatureIDsAndNames))
    _variant_t FeatureIDsAndNames;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;
    __declspec(property(get=GetVertices))
    IDispatchPtr Vertices;
    __declspec(property(get=GetUpdatesCounter))
    long UpdatesCounter;
    __declspec(property(get=GetStyle,put=PutStyle))
    TGFramework::FaceStylePtr Style;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    IDispatchPtr GetBody ( );
    IDispatchPtr GetEdges ( );
    IDispatchPtr GetGeometry ( );
    VARIANT_BOOL GetIsParamReversed ( );
    IDispatchPtr GetLoops ( );
    IDispatchPtr GetParent ( );
    HRESULT GetReferenceKey (
        SAFEARRAY * * ReferenceKey,
        VARIANT * KeySize );
    IDispatchPtr GetShell ( );
    long GetFacetCount (
        double Tolerance );
    HRESULT GetFacetData (
        double Tolerance,
        long * FacetCount,
        SAFEARRAY * * Points,
        VARIANT * Normals,
        VARIANT * TextureCoords );
    enum GNTTypePropertyConstants GetType ( );
    IDispatchPtr GetVertices ( );
    double GetArea ( );
    long GetGeometryForm ( );
    HRESULT GetRange (
        SAFEARRAY * * MinRangePoint,
        SAFEARRAY * * MaxRangePoint );
    HRESULT GetExactRange (
        SAFEARRAY * * MinRangePoint,
        SAFEARRAY * * MaxRangePoint );
    HRESULT GetDerivatives (
        long NumParams,
        SAFEARRAY * * Params,
        SAFEARRAY * * UPartials,
        SAFEARRAY * * VPartials,
        SAFEARRAY * * UUPartials,
        SAFEARRAY * * UVPartials,
        SAFEARRAY * * VVPartials,
        SAFEARRAY * * UUUPartials,
        SAFEARRAY * * VVVPartials );
    HRESULT GetNormal (
        long NumParams,
        SAFEARRAY * * Params,
        SAFEARRAY * * Normals );
    HRESULT GetParamAnomaly (
        SAFEARRAY * * PeriodicityU,
        SAFEARRAY * * PeriodicityV,
        long * EndSingularityU,
        SAFEARRAY * * SingularityU,
        long * EndSingularityV,
        SAFEARRAY * * SingularityV );
    HRESULT GetParamOnFace (
        long NumParams,
        SAFEARRAY * * Params,
        SAFEARRAY * * OnFace );
    HRESULT GetParamRange (
        SAFEARRAY * * MinParam,
        SAFEARRAY * * MaxParam );
    HRESULT GetPointAtParam (
        long NumParams,
        SAFEARRAY * * Params,
        SAFEARRAY * * Points );
    HRESULT GetParamAtPoint (
        long NumPoints,
        SAFEARRAY * * Points,
        SAFEARRAY * * GuessParams,
        SAFEARRAY * * MaxDeviations,
        SAFEARRAY * * Params,
        SAFEARRAY * * Flags );
    HRESULT GetTangents (
        long NumParams,
        SAFEARRAY * * Params,
        SAFEARRAY * * UTangents,
        SAFEARRAY * * VTangents );
    long GetContinuity ( );
    HRESULT GetCurvatures (
        long NumParams,
        SAFEARRAY * * Params,
        SAFEARRAY * * MaxTangents,
        SAFEARRAY * * MaxCurvatures,
        SAFEARRAY * * MinCurvatures );
    long GetUpdatesCounter ( );
    TGFramework::FaceStylePtr GetStyle ( );
    void PutStyle (
        struct TGFramework::FaceStyle * Style );
    HRESULT GetBendCenterLineAttributes (
        VARIANT_BOOL * BendAtributesExist,
        VARIANT * BendCenterLineEndPoints,
        VARIANT * AttrbuteVersion,
        VARIANT * BendRadius,
        VARIANT * BendAngle,
        VARIANT * BendSweepAngle,
        VARIANT * BendOrientation );
    HRESULT GetBendCenterLineAttributesEx (
        VARIANT_BOOL * BendAtributesExist,
        VARIANT * BendCenterLineEndPoints,
        VARIANT * AttrbuteVersion,
        VARIANT * BendRadius,
        VARIANT * BendAngle,
        VARIANT * BendSweepAngle,
        VARIANT * BendOrientation );
    int GetID ( );
    int GetTag ( );
    HRESULT GetParamAtPointEx (
        long NumPoints,
        SAFEARRAY * * Points,
        SAFEARRAY * * Params,
        const _variant_t & GuessParams,
        VARIANT * MaxDeviations,
        VARIANT * Flags );
    HRESULT GetRGBAVals (
        double * RVal,
        double * GVal,
        double * BVal,
        double * AVal );
    IDispatchPtr GetDocument ( );
    HRESULT GetRenderLineData (
        double chordTol,
        long * pointCount,
        SAFEARRAY * * Points,
        long * lineCount,
        SAFEARRAY * * pointIndices,
        SAFEARRAY * * edgeIDs );
    _variant_t GetFeatureIDsAndNames ( );
    HRESULT GetFacetDataEx (
        double Tolerance,
        long * pointCount,
        SAFEARRAY * * Points,
        long * FacetCount,
        SAFEARRAY * * FacetPointIndices,
        VARIANT * NormalCount,
        VARIANT * Normals,
        VARIANT * FacetNormalIndices,
        VARIANT * TextureCoordsCount,
        VARIANT * TextureCoords,
        VARIANT * FacetTextureCoordsIndices );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * Application ) = 0;
      virtual HRESULT __stdcall get_Body (
        /*[out,retval]*/ IDispatch * * Body ) = 0;
      virtual HRESULT __stdcall get_Edges (
        /*[out,retval]*/ IDispatch * * Edge ) = 0;
      virtual HRESULT __stdcall get_Geometry (
        /*[out,retval]*/ IDispatch * * Geometry ) = 0;
      virtual HRESULT __stdcall get_IsParamReversed (
        /*[out,retval]*/ VARIANT_BOOL * ParamReversed ) = 0;
      virtual HRESULT __stdcall get_Loops (
        /*[out,retval]*/ IDispatch * * Loops ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_GetReferenceKey (
        /*[in,out]*/ SAFEARRAY * * ReferenceKey,
        /*[out]*/ VARIANT * KeySize ) = 0;
      virtual HRESULT __stdcall get_Shell (
        /*[out,retval]*/ IDispatch * * Shell ) = 0;
      virtual HRESULT __stdcall get_FacetCount (
        /*[in]*/ double Tolerance,
        /*[out,retval]*/ long * FacetCount ) = 0;
      virtual HRESULT __stdcall raw_GetFacetData (
        /*[in]*/ double Tolerance,
        /*[out]*/ long * FacetCount,
        /*[in,out]*/ SAFEARRAY * * Points,
        /*[out]*/ VARIANT * Normals,
        /*[out]*/ VARIANT * TextureCoords ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum GNTTypePropertyConstants * Type ) = 0;
      virtual HRESULT __stdcall get_Vertices (
        /*[out,retval]*/ IDispatch * * Vertices ) = 0;
      virtual HRESULT __stdcall get_Area (
        /*[out,retval]*/ double * pArea ) = 0;
      virtual HRESULT __stdcall get_GeometryForm (
        /*[out,retval]*/ long * GeometryForm ) = 0;
      virtual HRESULT __stdcall raw_GetRange (
        /*[in,out]*/ SAFEARRAY * * MinRangePoint,
        /*[in,out]*/ SAFEARRAY * * MaxRangePoint ) = 0;
      virtual HRESULT __stdcall raw_GetExactRange (
        /*[in,out]*/ SAFEARRAY * * MinRangePoint,
        /*[in,out]*/ SAFEARRAY * * MaxRangePoint ) = 0;
      virtual HRESULT __stdcall raw_GetDerivatives (
        /*[in]*/ long NumParams,
        /*[in,out]*/ SAFEARRAY * * Params,
        /*[in,out]*/ SAFEARRAY * * UPartials,
        /*[in,out]*/ SAFEARRAY * * VPartials,
        /*[in,out]*/ SAFEARRAY * * UUPartials,
        /*[in,out]*/ SAFEARRAY * * UVPartials,
        /*[in,out]*/ SAFEARRAY * * VVPartials,
        /*[in,out]*/ SAFEARRAY * * UUUPartials,
        /*[in,out]*/ SAFEARRAY * * VVVPartials ) = 0;
      virtual HRESULT __stdcall raw_GetNormal (
        /*[in]*/ long NumParams,
        /*[in,out]*/ SAFEARRAY * * Params,
        /*[in,out]*/ SAFEARRAY * * Normals ) = 0;
      virtual HRESULT __stdcall raw_GetParamAnomaly (
        /*[in,out]*/ SAFEARRAY * * PeriodicityU,
        /*[in,out]*/ SAFEARRAY * * PeriodicityV,
        /*[out]*/ long * EndSingularityU,
        /*[in,out]*/ SAFEARRAY * * SingularityU,
        /*[out]*/ long * EndSingularityV,
        /*[in,out]*/ SAFEARRAY * * SingularityV ) = 0;
      virtual HRESULT __stdcall raw_GetParamOnFace (
        /*[in]*/ long NumParams,
        /*[in,out]*/ SAFEARRAY * * Params,
        /*[in,out]*/ SAFEARRAY * * OnFace ) = 0;
      virtual HRESULT __stdcall raw_GetParamRange (
        /*[in,out]*/ SAFEARRAY * * MinParam,
        /*[in,out]*/ SAFEARRAY * * MaxParam ) = 0;
      virtual HRESULT __stdcall raw_GetPointAtParam (
        /*[in]*/ long NumParams,
        /*[in,out]*/ SAFEARRAY * * Params,
        /*[in,out]*/ SAFEARRAY * * Points ) = 0;
      virtual HRESULT __stdcall raw_GetParamAtPoint (
        /*[in]*/ long NumPoints,
        /*[in,out]*/ SAFEARRAY * * Points,
        /*[in,out]*/ SAFEARRAY * * GuessParams,
        /*[in,out]*/ SAFEARRAY * * MaxDeviations,
        /*[in,out]*/ SAFEARRAY * * Params,
        /*[in,out]*/ SAFEARRAY * * Flags ) = 0;
      virtual HRESULT __stdcall raw_GetTangents (
        /*[in]*/ long NumParams,
        /*[in,out]*/ SAFEARRAY * * Params,
        /*[in,out]*/ SAFEARRAY * * UTangents,
        /*[in,out]*/ SAFEARRAY * * VTangents ) = 0;
      virtual HRESULT __stdcall get_Continuity (
        /*[out,retval]*/ long * Continuity ) = 0;
      virtual HRESULT __stdcall raw_GetCurvatures (
        /*[in]*/ long NumParams,
        /*[in,out]*/ SAFEARRAY * * Params,
        /*[in,out]*/ SAFEARRAY * * MaxTangents,
        /*[in,out]*/ SAFEARRAY * * MaxCurvatures,
        /*[in,out]*/ SAFEARRAY * * MinCurvatures ) = 0;
      virtual HRESULT __stdcall get_UpdatesCounter (
        /*[out,retval]*/ long * Counter ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct TGFramework::FaceStyle * * Style ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ struct TGFramework::FaceStyle * Style ) = 0;
      virtual HRESULT __stdcall raw_GetBendCenterLineAttributes (
        /*[out]*/ VARIANT_BOOL * BendAtributesExist,
        /*[out]*/ VARIANT * BendCenterLineEndPoints,
        /*[out]*/ VARIANT * AttrbuteVersion,
        /*[out]*/ VARIANT * BendRadius,
        /*[out]*/ VARIANT * BendAngle,
        /*[out]*/ VARIANT * BendSweepAngle,
        /*[out]*/ VARIANT * BendOrientation ) = 0;
      virtual HRESULT __stdcall raw_GetBendCenterLineAttributesEx (
        /*[out]*/ VARIANT_BOOL * BendAtributesExist,
        /*[out]*/ VARIANT * BendCenterLineEndPoints,
        /*[out]*/ VARIANT * AttrbuteVersion,
        /*[out]*/ VARIANT * BendRadius,
        /*[out]*/ VARIANT * BendAngle,
        /*[out]*/ VARIANT * BendSweepAngle,
        /*[out]*/ VARIANT * BendOrientation ) = 0;
      virtual HRESULT __stdcall get_ID (
        /*[out,retval]*/ int * FaceID ) = 0;
      virtual HRESULT __stdcall get_Tag (
        /*[out,retval]*/ int * FaceTag ) = 0;
      virtual HRESULT __stdcall raw_GetParamAtPointEx (
        /*[in]*/ long NumPoints,
        /*[in,out]*/ SAFEARRAY * * Points,
        /*[in,out]*/ SAFEARRAY * * Params,
        /*[in]*/ VARIANT GuessParams,
        /*[in,out]*/ VARIANT * MaxDeviations,
        /*[in,out]*/ VARIANT * Flags ) = 0;
      virtual HRESULT __stdcall raw_GetRGBAVals (
        /*[out]*/ double * RVal,
        /*[out]*/ double * GVal,
        /*[out]*/ double * BVal,
        /*[out]*/ double * AVal ) = 0;
      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ IDispatch * * doc ) = 0;
      virtual HRESULT __stdcall raw_GetRenderLineData (
        /*[in]*/ double chordTol,
        /*[out]*/ long * pointCount,
        /*[out]*/ SAFEARRAY * * Points,
        /*[out]*/ long * lineCount,
        /*[out]*/ SAFEARRAY * * pointIndices,
        /*[out]*/ SAFEARRAY * * edgeIDs ) = 0;
      virtual HRESULT __stdcall get_FeatureIDsAndNames (
        /*[out,retval]*/ VARIANT * pvarListOldAndNewItemIDRevsFileNames ) = 0;
      virtual HRESULT __stdcall raw_GetFacetDataEx (
        /*[in]*/ double Tolerance,
        /*[out]*/ long * pointCount,
        /*[in,out]*/ SAFEARRAY * * Points,
        /*[out]*/ long * FacetCount,
        /*[in,out]*/ SAFEARRAY * * FacetPointIndices,
        /*[out]*/ VARIANT * NormalCount,
        /*[out]*/ VARIANT * Normals,
        /*[out]*/ VARIANT * FacetNormalIndices,
        /*[out]*/ VARIANT * TextureCoordsCount,
        /*[out]*/ VARIANT * TextureCoords,
        /*[out]*/ VARIANT * FacetTextureCoordsIndices ) = 0;
};

struct __declspec(uuid("09fca078-dfbf-11d0-a275-080036c5ed02"))
_IDMDLoop : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetID))
    int ID;
    __declspec(property(get=GetTag))
    int Tag;
    __declspec(property(get=GetBody))
    IDispatchPtr Body;
    __declspec(property(get=GetVertices))
    IDispatchPtr Vertices;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetEdges))
    IDispatchPtr Edges;
    __declspec(property(get=GetEdgeUses))
    IDispatchPtr EdgeUses;
    __declspec(property(get=GetFace))
    IDispatchPtr Face;
    __declspec(property(get=GetIsOuterLoop))
    VARIANT_BOOL IsOuterLoop;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    IDispatchPtr GetEdges ( );
    IDispatchPtr GetEdgeUses ( );
    IDispatchPtr GetFace ( );
    VARIANT_BOOL GetIsOuterLoop ( );
    IDispatchPtr GetParent ( );
    HRESULT GetRange (
        SAFEARRAY * * MinRangePoint,
        SAFEARRAY * * MaxRangePoint );
    HRESULT GetExactRange (
        SAFEARRAY * * MinRangePoint,
        SAFEARRAY * * MaxRangePoint );
    enum GNTTypePropertyConstants GetType ( );
    int GetID ( );
    int GetTag ( );
    IDispatchPtr GetBody ( );
    IDispatchPtr GetVertices ( );
    IDispatchPtr GetDocument ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * Application ) = 0;
      virtual HRESULT __stdcall get_Edges (
        /*[out,retval]*/ IDispatch * * Edges ) = 0;
      virtual HRESULT __stdcall get_EdgeUses (
        /*[out,retval]*/ IDispatch * * EdgeUses ) = 0;
      virtual HRESULT __stdcall get_Face (
        /*[out,retval]*/ IDispatch * * Face ) = 0;
      virtual HRESULT __stdcall get_IsOuterLoop (
        /*[out,retval]*/ VARIANT_BOOL * IsOuterLoop ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_GetRange (
        /*[in,out]*/ SAFEARRAY * * MinRangePoint,
        /*[in,out]*/ SAFEARRAY * * MaxRangePoint ) = 0;
      virtual HRESULT __stdcall raw_GetExactRange (
        /*[in,out]*/ SAFEARRAY * * MinRangePoint,
        /*[in,out]*/ SAFEARRAY * * MaxRangePoint ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum GNTTypePropertyConstants * Type ) = 0;
      virtual HRESULT __stdcall get_ID (
        /*[out,retval]*/ int * LoopID ) = 0;
      virtual HRESULT __stdcall get_Tag (
        /*[out,retval]*/ int * LoopTag ) = 0;
      virtual HRESULT __stdcall get_Body (
        /*[out,retval]*/ IDispatch * * Body ) = 0;
      virtual HRESULT __stdcall get_Vertices (
        /*[out,retval]*/ IDispatch * * Vertices ) = 0;
      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ IDispatch * * doc ) = 0;
};

struct __declspec(uuid("09fca06f-dfbf-11d0-a275-080036c5ed02"))
_IDMDShell : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;
    __declspec(property(get=GetVolume))
    double Volume;
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetID))
    int ID;
    __declspec(property(get=GetTag))
    int Tag;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetBody))
    IDispatchPtr Body;
    __declspec(property(get=GetEdges))
    IDispatchPtr Edges;
    __declspec(property(get=GetFaces))
    IDispatchPtr Faces;
    __declspec(property(get=GetIsClosed))
    VARIANT_BOOL IsClosed;
    __declspec(property(get=GetIsPointInside))
    VARIANT_BOOL IsPointInside[];
    __declspec(property(get=GetIsVoid))
    VARIANT_BOOL IsVoid;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    IDispatchPtr GetBody ( );
    IDispatchPtr GetEdges ( );
    IDispatchPtr GetFaces ( );
    VARIANT_BOOL GetIsClosed ( );
    VARIANT_BOOL GetIsPointInside (
        SAFEARRAY * * Point );
    VARIANT_BOOL GetIsVoid ( );
    IDispatchPtr GetParent ( );
    HRESULT GetRange (
        SAFEARRAY * * MinRangePoint,
        SAFEARRAY * * MaxRangePoint );
    HRESULT GetExactRange (
        SAFEARRAY * * MinRangePoint,
        SAFEARRAY * * MaxRangePoint );
    enum GNTTypePropertyConstants GetType ( );
    double GetVolume ( );
    HRESULT GetNonStitchedEdges (
        long * NumEdgeCollections,
        SAFEARRAY * * EdgeCollections );
    int GetID ( );
    int GetTag ( );
    IDispatchPtr GetDocument ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * Application ) = 0;
      virtual HRESULT __stdcall get_Body (
        /*[out,retval]*/ IDispatch * * Body ) = 0;
      virtual HRESULT __stdcall get_Edges (
        /*[out,retval]*/ IDispatch * * Edge ) = 0;
      virtual HRESULT __stdcall get_Faces (
        /*[out,retval]*/ IDispatch * * Faces ) = 0;
      virtual HRESULT __stdcall get_IsClosed (
        /*[out,retval]*/ VARIANT_BOOL * Closed ) = 0;
      virtual HRESULT __stdcall get_IsPointInside (
        /*[in]*/ SAFEARRAY * * Point,
        /*[out,retval]*/ VARIANT_BOOL * PointInside ) = 0;
      virtual HRESULT __stdcall get_IsVoid (
        /*[out,retval]*/ VARIANT_BOOL * Void ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_GetRange (
        /*[in,out]*/ SAFEARRAY * * MinRangePoint,
        /*[in,out]*/ SAFEARRAY * * MaxRangePoint ) = 0;
      virtual HRESULT __stdcall raw_GetExactRange (
        /*[in,out]*/ SAFEARRAY * * MinRangePoint,
        /*[in,out]*/ SAFEARRAY * * MaxRangePoint ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum GNTTypePropertyConstants * Type ) = 0;
      virtual HRESULT __stdcall get_Volume (
        /*[out,retval]*/ double * Volume ) = 0;
      virtual HRESULT __stdcall raw_GetNonStitchedEdges (
        /*[out]*/ long * NumEdgeCollections,
        /*[in,out]*/ SAFEARRAY * * EdgeCollections ) = 0;
      virtual HRESULT __stdcall get_ID (
        /*[out,retval]*/ int * ShellID ) = 0;
      virtual HRESULT __stdcall get_Tag (
        /*[out,retval]*/ int * ShellTag ) = 0;
      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ IDispatch * * doc ) = 0;
};

struct __declspec(uuid("09fca07c-dfbf-11d0-a275-080036c5ed02"))
_IDMDVertex : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetUpdatesCounter))
    long UpdatesCounter;
    __declspec(property(get=GetID))
    int ID;
    __declspec(property(get=GetTag))
    int Tag;
    __declspec(property(get=GetBody))
    IDispatchPtr Body;
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetLoops))
    IDispatchPtr Loops;
    __declspec(property(get=GetShells))
    IDispatchPtr Shells;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetEdges))
    IDispatchPtr Edges;
    __declspec(property(get=GetFaces))
    IDispatchPtr Faces;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    IDispatchPtr GetEdges ( );
    IDispatchPtr GetFaces ( );
    HRESULT GetPointData (
        SAFEARRAY * * Point );
    IDispatchPtr GetParent ( );
    HRESULT GetReferenceKey (
        SAFEARRAY * * ReferenceKey,
        VARIANT * KeySize );
    enum GNTTypePropertyConstants GetType ( );
    long GetUpdatesCounter ( );
    int GetID ( );
    int GetTag ( );
    IDispatchPtr GetBody ( );
    IDispatchPtr GetLoops ( );
    IDispatchPtr GetShells ( );
    IDispatchPtr GetDocument ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * Application ) = 0;
      virtual HRESULT __stdcall get_Edges (
        /*[out,retval]*/ IDispatch * * Edges ) = 0;
      virtual HRESULT __stdcall get_Faces (
        /*[out,retval]*/ IDispatch * * Faces ) = 0;
      virtual HRESULT __stdcall raw_GetPointData (
        /*[in,out]*/ SAFEARRAY * * Point ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_GetReferenceKey (
        /*[in,out]*/ SAFEARRAY * * ReferenceKey,
        /*[out]*/ VARIANT * KeySize ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum GNTTypePropertyConstants * Type ) = 0;
      virtual HRESULT __stdcall get_UpdatesCounter (
        /*[out,retval]*/ long * Counter ) = 0;
      virtual HRESULT __stdcall get_ID (
        /*[out,retval]*/ int * VertexID ) = 0;
      virtual HRESULT __stdcall get_Tag (
        /*[out,retval]*/ int * VertexTag ) = 0;
      virtual HRESULT __stdcall get_Body (
        /*[out,retval]*/ IDispatch * * Body ) = 0;
      virtual HRESULT __stdcall get_Loops (
        /*[out,retval]*/ IDispatch * * Loops ) = 0;
      virtual HRESULT __stdcall get_Shells (
        /*[out,retval]*/ IDispatch * * Shells ) = 0;
      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ IDispatch * * doc ) = 0;
};

struct __declspec(uuid("5760c4d0-f6a8-11d0-bc68-0800360d1403"))
_IDMDBSplineSurface : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetIsPlanar))
    VARIANT_BOOL IsPlanar;
    __declspec(property(get=GetIsRational))
    VARIANT_BOOL IsRational;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    HRESULT GetBSplineInfo (
        SAFEARRAY * * Order,
        SAFEARRAY * * NumPoles,
        SAFEARRAY * * NumKnots,
        VARIANT_BOOL * Rational,
        SAFEARRAY * * Closed,
        SAFEARRAY * * Periodic,
        VARIANT_BOOL * Planar );
    HRESULT GetBSplineData (
        long NumPoles,
        long NumKnotsU,
        long NumKnotsV,
        long NumWeights,
        SAFEARRAY * * Poles,
        SAFEARRAY * * KnotsU,
        SAFEARRAY * * KnotsV,
        SAFEARRAY * * Weights );
    HRESULT GetNumKnots (
        SAFEARRAY * * NumKnots );
    HRESULT GetNumPoles (
        SAFEARRAY * * NumPoles );
    HRESULT GetOrder (
        SAFEARRAY * * Order );
    HRESULT GetIsPeriodic (
        SAFEARRAY * * Periodic );
    VARIANT_BOOL GetIsPlanar ( );
    VARIANT_BOOL GetIsRational ( );
    HRESULT GetIsClosed (
        SAFEARRAY * * Closed );
    enum GNTTypePropertyConstants GetType ( );
    IDispatchPtr GetParent ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * Application ) = 0;
      virtual HRESULT __stdcall raw_GetBSplineInfo (
        /*[in,out]*/ SAFEARRAY * * Order,
        /*[in,out]*/ SAFEARRAY * * NumPoles,
        /*[in,out]*/ SAFEARRAY * * NumKnots,
        /*[out]*/ VARIANT_BOOL * Rational,
        /*[in,out]*/ SAFEARRAY * * Closed,
        /*[in,out]*/ SAFEARRAY * * Periodic,
        /*[out]*/ VARIANT_BOOL * Planar ) = 0;
      virtual HRESULT __stdcall raw_GetBSplineData (
        /*[in]*/ long NumPoles,
        /*[in]*/ long NumKnotsU,
        /*[in]*/ long NumKnotsV,
        /*[in]*/ long NumWeights,
        /*[in,out]*/ SAFEARRAY * * Poles,
        /*[in,out]*/ SAFEARRAY * * KnotsU,
        /*[in,out]*/ SAFEARRAY * * KnotsV,
        /*[in,out]*/ SAFEARRAY * * Weights ) = 0;
      virtual HRESULT __stdcall raw_GetNumKnots (
        /*[in,out]*/ SAFEARRAY * * NumKnots ) = 0;
      virtual HRESULT __stdcall raw_GetNumPoles (
        /*[in,out]*/ SAFEARRAY * * NumPoles ) = 0;
      virtual HRESULT __stdcall raw_GetOrder (
        /*[in,out]*/ SAFEARRAY * * Order ) = 0;
      virtual HRESULT __stdcall raw_GetIsPeriodic (
        /*[in,out]*/ SAFEARRAY * * Periodic ) = 0;
      virtual HRESULT __stdcall get_IsPlanar (
        /*[out,retval]*/ VARIANT_BOOL * bPlanar ) = 0;
      virtual HRESULT __stdcall get_IsRational (
        /*[out,retval]*/ VARIANT_BOOL * bRational ) = 0;
      virtual HRESULT __stdcall raw_GetIsClosed (
        /*[in,out]*/ SAFEARRAY * * Closed ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum GNTTypePropertyConstants * Type ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
};

struct __declspec(uuid("f925aa80-f74f-11d0-bc6a-0800360d1403"))
_IDMDCone : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetExpanding))
    VARIANT_BOOL Expanding;
    __declspec(property(get=GetHalfAngle))
    double HalfAngle;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRadius))
    double Radius;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    HRESULT GetAxisVector (
        SAFEARRAY * * AxisVector );
    HRESULT GetBasePoint (
        SAFEARRAY * * BasePoint );
    HRESULT GetConeData (
        SAFEARRAY * * BasePoint,
        SAFEARRAY * * AxisVector,
        double * Radius,
        double * HalfAngle,
        VARIANT_BOOL * Expanding );
    VARIANT_BOOL GetExpanding ( );
    double GetHalfAngle ( );
    IDispatchPtr GetParent ( );
    double GetRadius ( );
    enum GNTTypePropertyConstants GetType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * Application ) = 0;
      virtual HRESULT __stdcall raw_GetAxisVector (
        /*[in,out]*/ SAFEARRAY * * AxisVector ) = 0;
      virtual HRESULT __stdcall raw_GetBasePoint (
        /*[in,out]*/ SAFEARRAY * * BasePoint ) = 0;
      virtual HRESULT __stdcall raw_GetConeData (
        /*[in,out]*/ SAFEARRAY * * BasePoint,
        /*[in,out]*/ SAFEARRAY * * AxisVector,
        /*[out]*/ double * Radius,
        /*[out]*/ double * HalfAngle,
        /*[out]*/ VARIANT_BOOL * Expanding ) = 0;
      virtual HRESULT __stdcall get_Expanding (
        /*[out,retval]*/ VARIANT_BOOL * Expanding ) = 0;
      virtual HRESULT __stdcall get_HalfAngle (
        /*[out,retval]*/ double * HalfAngle ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * Radius ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum GNTTypePropertyConstants * Type ) = 0;
};

struct __declspec(uuid("f925aa82-f74f-11d0-bc6a-0800360d1403"))
_IDMDCylinder : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRadius))
    double Radius;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    HRESULT GetAxisVector (
        SAFEARRAY * * AxisVect );
    HRESULT GetBasePoint (
        SAFEARRAY * * BasePoint );
    HRESULT GetCylinderData (
        SAFEARRAY * * BasePoint,
        SAFEARRAY * * AxisVector,
        double * Radius );
    enum GNTTypePropertyConstants GetType ( );
    IDispatchPtr GetParent ( );
    double GetRadius ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * Application ) = 0;
      virtual HRESULT __stdcall raw_GetAxisVector (
        /*[in,out]*/ SAFEARRAY * * AxisVect ) = 0;
      virtual HRESULT __stdcall raw_GetBasePoint (
        /*[in,out]*/ SAFEARRAY * * BasePoint ) = 0;
      virtual HRESULT __stdcall raw_GetCylinderData (
        /*[in,out]*/ SAFEARRAY * * BasePoint,
        /*[in,out]*/ SAFEARRAY * * AxisVector,
        /*[out]*/ double * Radius ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum GNTTypePropertyConstants * Type ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * Radius ) = 0;
};

struct __declspec(uuid("3552a7f5-a011-41e2-a93f-151ce756db49"))
_IDMDMesh : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    HRESULT GetTrianglePoints (
        long * FacetCount,
        SAFEARRAY * * Points );
    HRESULT GetTriangleNormals (
        long * FacetCount,
        SAFEARRAY * * Normals );
    HRESULT GetTriangleData (
        long * FacetCount,
        SAFEARRAY * * Points,
        SAFEARRAY * * Normals );
    enum GNTTypePropertyConstants GetType ( );
    IDispatchPtr GetParent ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * Application ) = 0;
      virtual HRESULT __stdcall raw_GetTrianglePoints (
        /*[out]*/ long * FacetCount,
        /*[in,out]*/ SAFEARRAY * * Points ) = 0;
      virtual HRESULT __stdcall raw_GetTriangleNormals (
        /*[out]*/ long * FacetCount,
        /*[in,out]*/ SAFEARRAY * * Normals ) = 0;
      virtual HRESULT __stdcall raw_GetTriangleData (
        /*[out]*/ long * FacetCount,
        /*[in,out]*/ SAFEARRAY * * Points,
        /*[in,out]*/ SAFEARRAY * * Normals ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum GNTTypePropertyConstants * Type ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
};

struct __declspec(uuid("8e2f94d0-eba2-11d0-bc5e-0800360d1403"))
_IDMDPlane : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    HRESULT GetNormalVector (
        SAFEARRAY * * NormalVector );
    HRESULT GetPlaneData (
        SAFEARRAY * * RootPoint,
        SAFEARRAY * * NormalVector );
    HRESULT GetRootPoint (
        SAFEARRAY * * RootPoint );
    enum GNTTypePropertyConstants GetType ( );
    IDispatchPtr GetParent ( );
    HRESULT GetPlaneProperties (
        double ReqRelAccy,
        double * Area,
        SAFEARRAY * * RootPoint,
        SAFEARRAY * * Moments,
        SAFEARRAY * * PrincipalAxes,
        double * RelAccyAchieved );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * Application ) = 0;
      virtual HRESULT __stdcall raw_GetNormalVector (
        /*[in,out]*/ SAFEARRAY * * NormalVector ) = 0;
      virtual HRESULT __stdcall raw_GetPlaneData (
        /*[in,out]*/ SAFEARRAY * * RootPoint,
        /*[in,out]*/ SAFEARRAY * * NormalVector ) = 0;
      virtual HRESULT __stdcall raw_GetRootPoint (
        /*[in,out]*/ SAFEARRAY * * RootPoint ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum GNTTypePropertyConstants * Type ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_GetPlaneProperties (
        /*[in]*/ double ReqRelAccy,
        /*[out]*/ double * Area,
        /*[in,out]*/ SAFEARRAY * * RootPoint,
        /*[in,out]*/ SAFEARRAY * * Moments,
        /*[in,out]*/ SAFEARRAY * * PrincipalAxes,
        /*[out]*/ double * RelAccyAchieved ) = 0;
};

struct __declspec(uuid("f925aa84-f74f-11d0-bc6a-0800360d1403"))
_IDMDSphere : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRadius))
    double Radius;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    HRESULT GetCenterPoint (
        SAFEARRAY * * CenterPoint );
    IDispatchPtr GetParent ( );
    double GetRadius ( );
    HRESULT GetSphereData (
        SAFEARRAY * * CenterPoint,
        double * Radius );
    enum GNTTypePropertyConstants GetType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * Application ) = 0;
      virtual HRESULT __stdcall raw_GetCenterPoint (
        /*[in,out]*/ SAFEARRAY * * CenterPoint ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * Radius ) = 0;
      virtual HRESULT __stdcall raw_GetSphereData (
        /*[in,out]*/ SAFEARRAY * * CenterPoint,
        /*[out]*/ double * Radius ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum GNTTypePropertyConstants * Type ) = 0;
};

struct __declspec(uuid("f925aa86-f74f-11d0-bc6a-0800360d1403"))
_IDMDTorus : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetMajorRadius))
    double MajorRadius;
    __declspec(property(get=GetMinorRadius))
    double MinorRadius;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    HRESULT GetAxisVector (
        SAFEARRAY * * AxisVector );
    HRESULT GetCenterPoint (
        SAFEARRAY * * CenterPoint );
    double GetMajorRadius ( );
    double GetMinorRadius ( );
    IDispatchPtr GetParent ( );
    HRESULT GetTorusData (
        SAFEARRAY * * CenterPoint,
        SAFEARRAY * * AxisVector,
        double * MajorRadius,
        double * MinorRadius );
    enum GNTTypePropertyConstants GetType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * Application ) = 0;
      virtual HRESULT __stdcall raw_GetAxisVector (
        /*[in,out]*/ SAFEARRAY * * AxisVector ) = 0;
      virtual HRESULT __stdcall raw_GetCenterPoint (
        /*[in,out]*/ SAFEARRAY * * CenterPoint ) = 0;
      virtual HRESULT __stdcall get_MajorRadius (
        /*[out,retval]*/ double * MajorRadius ) = 0;
      virtual HRESULT __stdcall get_MinorRadius (
        /*[out,retval]*/ double * MinorRadius ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_GetTorusData (
        /*[in,out]*/ SAFEARRAY * * CenterPoint,
        /*[in,out]*/ SAFEARRAY * * AxisVector,
        /*[out]*/ double * MajorRadius,
        /*[out]*/ double * MinorRadius ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum GNTTypePropertyConstants * Type ) = 0;
};

struct __declspec(uuid("09fca07e-dfbf-11d0-a275-080036c5ed02"))
_IDMDBSplineCurve : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetIsPlanar))
    VARIANT_BOOL IsPlanar;
    __declspec(property(get=GetIsRational))
    VARIANT_BOOL IsRational;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    HRESULT GetBSplineData (
        long NumPoles,
        long NumKnots,
        long NumWeights,
        SAFEARRAY * * Poles,
        SAFEARRAY * * Knots,
        SAFEARRAY * * Weights );
    HRESULT GetBSplineInfo (
        long * Order,
        long * NumPoles,
        long * NumKnots,
        VARIANT_BOOL * Rational,
        VARIANT_BOOL * Closed,
        VARIANT_BOOL * Periodic,
        VARIANT_BOOL * Planar,
        SAFEARRAY * * PlaneVector );
    VARIANT_BOOL GetIsClosed ( );
    long GetNumKnots ( );
    long GetNumPoles ( );
    long GetOrder ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetIsPeriodic ( );
    VARIANT_BOOL GetIsPlanar ( );
    VARIANT_BOOL GetIsRational ( );
    enum GNTTypePropertyConstants GetType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * Application ) = 0;
      virtual HRESULT __stdcall raw_GetBSplineData (
        /*[in]*/ long NumPoles,
        /*[in]*/ long NumKnots,
        /*[in]*/ long NumWeights,
        /*[in,out]*/ SAFEARRAY * * Poles,
        /*[in,out]*/ SAFEARRAY * * Knots,
        /*[in,out]*/ SAFEARRAY * * Weights ) = 0;
      virtual HRESULT __stdcall raw_GetBSplineInfo (
        /*[out]*/ long * Order,
        /*[out]*/ long * NumPoles,
        /*[out]*/ long * NumKnots,
        /*[out]*/ VARIANT_BOOL * Rational,
        /*[out]*/ VARIANT_BOOL * Closed,
        /*[out]*/ VARIANT_BOOL * Periodic,
        /*[out]*/ VARIANT_BOOL * Planar,
        /*[in,out]*/ SAFEARRAY * * PlaneVector ) = 0;
      virtual HRESULT __stdcall raw_GetIsClosed (
        /*[out,retval]*/ VARIANT_BOOL * Closed ) = 0;
      virtual HRESULT __stdcall raw_GetNumKnots (
        /*[out,retval]*/ long * NumKnots ) = 0;
      virtual HRESULT __stdcall raw_GetNumPoles (
        /*[out,retval]*/ long * NumPoles ) = 0;
      virtual HRESULT __stdcall raw_GetOrder (
        /*[out,retval]*/ long * Order ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_GetIsPeriodic (
        /*[out,retval]*/ VARIANT_BOOL * Periodic ) = 0;
      virtual HRESULT __stdcall get_IsPlanar (
        /*[out,retval]*/ VARIANT_BOOL * Planar ) = 0;
      virtual HRESULT __stdcall get_IsRational (
        /*[out,retval]*/ VARIANT_BOOL * Rational ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum GNTTypePropertyConstants * Type ) = 0;
};

struct __declspec(uuid("09fca080-dfbf-11d0-a275-080036c5ed02"))
_IDMDCircle : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRadius))
    double Radius;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    HRESULT GetAxisVector (
        SAFEARRAY * * AxisVector );
    HRESULT GetCenterPoint (
        SAFEARRAY * * CenterPoint );
    HRESULT GetCircleData (
        SAFEARRAY * * CenterPoint,
        SAFEARRAY * * AxisVector,
        double * Radius );
    IDispatchPtr GetParent ( );
    double GetRadius ( );
    enum GNTTypePropertyConstants GetType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * Application ) = 0;
      virtual HRESULT __stdcall raw_GetAxisVector (
        /*[in,out]*/ SAFEARRAY * * AxisVector ) = 0;
      virtual HRESULT __stdcall raw_GetCenterPoint (
        /*[in,out]*/ SAFEARRAY * * CenterPoint ) = 0;
      virtual HRESULT __stdcall raw_GetCircleData (
        /*[in,out]*/ SAFEARRAY * * CenterPoint,
        /*[in,out]*/ SAFEARRAY * * AxisVector,
        /*[out]*/ double * Radius ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * Radius ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum GNTTypePropertyConstants * Type ) = 0;
};

struct __declspec(uuid("09fca082-dfbf-11d0-a275-080036c5ed02"))
_IDMDEllipse : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetMinorMajorRatio))
    double MinorMajorRatio;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    HRESULT GetAxisVector (
        SAFEARRAY * * AxisVector );
    HRESULT GetCenterPoint (
        SAFEARRAY * * CenterPoint );
    HRESULT GetEllipseData (
        SAFEARRAY * * CenterPoint,
        SAFEARRAY * * AxisVector,
        SAFEARRAY * * MajorAxis,
        double * MinorMajorRatio );
    HRESULT GetMajorAxis (
        SAFEARRAY * * MajorAxis );
    double GetMinorMajorRatio ( );
    IDispatchPtr GetParent ( );
    enum GNTTypePropertyConstants GetType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * Application ) = 0;
      virtual HRESULT __stdcall raw_GetAxisVector (
        /*[in,out]*/ SAFEARRAY * * AxisVector ) = 0;
      virtual HRESULT __stdcall raw_GetCenterPoint (
        /*[in,out]*/ SAFEARRAY * * CenterPoint ) = 0;
      virtual HRESULT __stdcall raw_GetEllipseData (
        /*[in,out]*/ SAFEARRAY * * CenterPoint,
        /*[in,out]*/ SAFEARRAY * * AxisVector,
        /*[in,out]*/ SAFEARRAY * * MajorAxis,
        /*[out]*/ double * MinorMajorRatio ) = 0;
      virtual HRESULT __stdcall raw_GetMajorAxis (
        /*[in,out]*/ SAFEARRAY * * MajorAxis ) = 0;
      virtual HRESULT __stdcall get_MinorMajorRatio (
        /*[out,retval]*/ double * MinorMajorRatio ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum GNTTypePropertyConstants * Type ) = 0;
};

struct __declspec(uuid("09fca084-dfbf-11d0-a275-080036c5ed02"))
_IDMDLine : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    HRESULT GetLineData (
        SAFEARRAY * * RootPoint,
        SAFEARRAY * * DirectionVector );
    IDispatchPtr GetParent ( );
    HRESULT GetRootPoint (
        SAFEARRAY * * RootPoint );
    enum GNTTypePropertyConstants GetType ( );
    HRESULT GetVector (
        SAFEARRAY * * Vector );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * Application ) = 0;
      virtual HRESULT __stdcall raw_GetLineData (
        /*[in,out]*/ SAFEARRAY * * RootPoint,
        /*[in,out]*/ SAFEARRAY * * DirectionVector ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_GetRootPoint (
        /*[in,out]*/ SAFEARRAY * * RootPoint ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum GNTTypePropertyConstants * Type ) = 0;
      virtual HRESULT __stdcall raw_GetVector (
        /*[in,out]*/ SAFEARRAY * * Vector ) = 0;
};

struct __declspec(uuid("b0576d44-665c-418a-b882-6ee8c696f7a3"))
_IDMDPLine : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum GNTTypePropertyConstants GetType ( );
    HRESULT GetPLineData (
        long * PointsCount,
        SAFEARRAY * * Points,
        VARIANT_BOOL * Closed,
        double * BaseParameter );
    HRESULT GetPoints (
        long * PointsCount,
        SAFEARRAY * * Points );
    HRESULT GetClosed (
        VARIANT_BOOL * Closed );
    HRESULT GetBaseParameter (
        double * BaseParameter );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum GNTTypePropertyConstants * Type ) = 0;
      virtual HRESULT __stdcall raw_GetPLineData (
        /*[out]*/ long * PointsCount,
        /*[in,out]*/ SAFEARRAY * * Points,
        /*[out]*/ VARIANT_BOOL * Closed,
        /*[out]*/ double * BaseParameter ) = 0;
      virtual HRESULT __stdcall raw_GetPoints (
        /*[out]*/ long * PointsCount,
        /*[in,out]*/ SAFEARRAY * * Points ) = 0;
      virtual HRESULT __stdcall raw_GetClosed (
        /*[out]*/ VARIANT_BOOL * Closed ) = 0;
      virtual HRESULT __stdcall raw_GetBaseParameter (
        /*[out]*/ double * BaseParameter ) = 0;
};

struct __declspec(uuid("93ffce31-f84a-11d0-97bc-080036947803"))
_IDMDParamBSplineCurve : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetIsRational))
    VARIANT_BOOL IsRational;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    HRESULT GetBSpline2dData (
        long NumPoles,
        long NumKnots,
        long NumWeights,
        SAFEARRAY * * Poles,
        SAFEARRAY * * Knots,
        SAFEARRAY * * Weights );
    HRESULT GetBSpline2dInfo (
        long * Order,
        long * NumPoles,
        long * NumKnots,
        VARIANT_BOOL * Rational,
        VARIANT_BOOL * Closed,
        VARIANT_BOOL * Periodic );
    VARIANT_BOOL GetIsClosed ( );
    IDispatchPtr GetParent ( );
    long GetNumKnots ( );
    long GetNumPoles ( );
    long GetOrder ( );
    VARIANT_BOOL GetIsPeriodic ( );
    VARIANT_BOOL GetIsRational ( );
    enum GNTTypePropertyConstants GetType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * Application ) = 0;
      virtual HRESULT __stdcall raw_GetBSpline2dData (
        /*[in]*/ long NumPoles,
        /*[in]*/ long NumKnots,
        /*[in]*/ long NumWeights,
        /*[in,out]*/ SAFEARRAY * * Poles,
        /*[in,out]*/ SAFEARRAY * * Knots,
        /*[in,out]*/ SAFEARRAY * * Weights ) = 0;
      virtual HRESULT __stdcall raw_GetBSpline2dInfo (
        /*[out]*/ long * Order,
        /*[out]*/ long * NumPoles,
        /*[out]*/ long * NumKnots,
        /*[out]*/ VARIANT_BOOL * Rational,
        /*[out]*/ VARIANT_BOOL * Closed,
        /*[out]*/ VARIANT_BOOL * Periodic ) = 0;
      virtual HRESULT __stdcall raw_GetIsClosed (
        /*[out,retval]*/ VARIANT_BOOL * Closed ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_GetNumKnots (
        /*[out,retval]*/ long * NumKnots ) = 0;
      virtual HRESULT __stdcall raw_GetNumPoles (
        /*[out,retval]*/ long * NumPoles ) = 0;
      virtual HRESULT __stdcall raw_GetOrder (
        /*[out,retval]*/ long * Order ) = 0;
      virtual HRESULT __stdcall raw_GetIsPeriodic (
        /*[out,retval]*/ VARIANT_BOOL * Periodic ) = 0;
      virtual HRESULT __stdcall get_IsRational (
        /*[out,retval]*/ VARIANT_BOOL * Rational ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum GNTTypePropertyConstants * Type ) = 0;
};

#pragma pack(push, 8)

struct __declspec(uuid("49b70d69-d088-4453-a05a-ea7789e76864"))
SEWallThicknessAnalysisData
{
    double pDCoordOne[3];
    double pDCoordTwo[3];
    double pDCoordThree[3];
    double pDNormalOne[3];
    double pDNormalTwo[3];
    double pDNormalThree[3];
    double pDThicknessData[3];
    int nElemId;
    int nNodeId[3];
    VARIANT_BOOL bNormalPerVertex;
};

#pragma pack(pop)

struct __declspec(uuid("09fca073-dfbf-11d0-a275-080036c5ed02"))
Body : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetEdges))
    IDispatchPtr Edges[];
    __declspec(property(get=GetFaces))
    IDispatchPtr Faces[];
    __declspec(property(get=GetShells))
    IDispatchPtr Shells;
    __declspec(property(get=GetFacetCount))
    long FacetCount[];
    __declspec(property(get=GetVolume))
    double Volume;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;
    __declspec(property(get=GetGeometryForm))
    long GeometryForm;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetIsSolid))
    VARIANT_BOOL IsSolid;
    __declspec(property(get=GetFacesByRay))
    IDispatchPtr FacesByRay[][][][][][];
    __declspec(property(get=GetUpdatesCounter))
    long UpdatesCounter;
    __declspec(property(get=GetValid))
    VARIANT_BOOL Valid;
    __declspec(property(get=GetStyle,put=PutStyle))
    TGFramework::FaceStylePtr Style;
    __declspec(property(get=GetIsOverriddenBody))
    VARIANT_BOOL IsOverriddenBody;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetTag))
    int Tag;
    __declspec(property(get=GetVertices))
    IDispatchPtr Vertices;
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetDisplayName,put=PutDisplayName))
    _bstr_t DisplayName;
    __declspec(property(get=GetLoops))
    IDispatchPtr Loops;
    __declspec(property(get=GetRefID))
    int RefID;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetApplication ( );
    IDispatchPtr GetEdges (
        enum FeatureTopologyQueryTypeConstants EdgeType );
    IDispatchPtr GetFaces (
        enum FeatureTopologyQueryTypeConstants FaceType );
    IDispatchPtr GetFacesByRay (
        double Xorigin,
        double Yorigin,
        double Zorigin,
        double Xdir,
        double Ydir,
        double Zdir );
    IDispatchPtr GetShells ( );
    long GetFacetCount (
        double Tolerance );
    HRESULT GetFacetData (
        double Tolerance,
        long * FacetCount,
        SAFEARRAY * * Points,
        VARIANT * Normals = &vtMissing,
        VARIANT * TextureCoords = &vtMissing,
        VARIANT * StyleIDs = &vtMissing,
        VARIANT * FaceIDs = &vtMissing,
        const _variant_t & bHonourPrefs = vtMissing );
    HRESULT GetRange (
        SAFEARRAY * * MinRangePoint,
        SAFEARRAY * * MaxRangePoint );
    HRESULT GetExactRange (
        SAFEARRAY * * MinRangePoint,
        SAFEARRAY * * MaxRangePoint );
    double GetVolume ( );
    enum GNTTypePropertyConstants GetType ( );
    long GetGeometryForm ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetIsSolid ( );
    HRESULT ComputePhysicalProperties (
        double Density,
        double Accuracy,
        double * Volume,
        double * Area,
        double * Mass,
        SAFEARRAY * * CenterOfGravity,
        SAFEARRAY * * CenterOfVolume,
        SAFEARRAY * * GlobalMomentsOfInteria,
        SAFEARRAY * * PrincipalMomentsOfInteria,
        SAFEARRAY * * PrincipalAxes,
        SAFEARRAY * * RadiiOfGyration,
        double * RelativeAccuracyAchieved,
        int * Status );
    long GetUpdatesCounter ( );
    HRESULT GetReferenceKey (
        SAFEARRAY * * ReferenceKey,
        VARIANT * KeySize = &vtMissing );
    IDispatchPtr CreateCollection (
        enum TopologyCollectionTypeConstants Type,
        const _variant_t & NumberOfObjects = vtMissing,
        const _variant_t & ObjectArray = vtMissing );
    IDispatchPtr CreateSmartCollection (
        IDispatch * SeedObject,
        enum SmartCollectionTypeConstants CollectionType,
        const _variant_t & AdditionalObject = vtMissing );
    VARIANT_BOOL GetValid ( );
    IDispatchPtr GetFaceByFaceID (
        int FaceID );
    TGFramework::FaceStylePtr GetStyle ( );
    void PutStyle (
        struct TGFramework::FaceStyle * _arg1 );
    HRESULT SetFacesStyle (
        long NumberOfFaces,
        SAFEARRAY * * FacesArray,
        struct TGFramework::FaceStyle * Style );
    VARIANT_BOOL GetIsOverriddenBody ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    int GetTag ( );
    IDispatchPtr GetVertices ( );
    IDispatchPtr GetEntityByID (
        int EntityID );
    int GetIDFromEntity (
        IDispatch * Entity );
    int GetEntityType (
        IDispatch * Entity );
    IDispatchPtr GetLoops ( );
    HRESULT GetExtremePoint (
        double DirectionX,
        double DirectionY,
        double DirectionZ,
        double * ExtremeX,
        double * ExtremeY,
        double * ExtremeZ );
    HRESULT ClearOverrides ( );
    IDispatchPtr GetDocument ( );
    _bstr_t GetDisplayName ( );
    void PutDisplayName (
        _bstr_t _arg1 );
    int GetRefID ( );
    HRESULT CalculateWallThickness (
        enum WallThicknessDisplayResolution resolution,
        double * pDUpVector,
        VARIANT * pvecThicknessData,
        int * piSize,
        SAFEARRAY * pdTransform );
    HRESULT GetRenderLineData (
        double chordTol,
        long * pointCount,
        SAFEARRAY * * Points,
        long * lineCount,
        SAFEARRAY * * pointIndices,
        SAFEARRAY * * edgeIDs );
    HRESULT GetFacetDataEx (
        double Tolerance,
        long * pointCount,
        SAFEARRAY * * Points,
        long * FacetCount,
        SAFEARRAY * * FacetPointIndices,
        VARIANT * NormalCount = &vtMissing,
        VARIANT * Normals = &vtMissing,
        VARIANT * FacetNormalIndices = &vtMissing,
        VARIANT * TextureCoordsCount = &vtMissing,
        VARIANT * TextureCoords = &vtMissing,
        VARIANT * FacetTextureCoordsIndices = &vtMissing,
        VARIANT * FacetStyleIDs = &vtMissing,
        VARIANT * FacetFaceIDs = &vtMissing,
        const _variant_t & bHonourPrefs = vtMissing );
};

struct __declspec(uuid("09fca07b-dfbf-11d0-a275-080036c5ed02"))
EdgeUse : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetEdge))
    IDispatchPtr Edge;
    __declspec(property(get=GetIsOpposedToEdge))
    VARIANT_BOOL IsOpposedToEdge;
    __declspec(property(get=GetIsParamReversed))
    VARIANT_BOOL IsParamReversed;
    __declspec(property(get=GetLoop))
    IDispatchPtr Loop;
    __declspec(property(get=GetGeometry))
    IDispatchPtr Geometry;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPartner))
    IDispatchPtr Partner;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;
    __declspec(property(get=GetNext))
    IDispatchPtr Next;
    __declspec(property(get=GetPrevious))
    IDispatchPtr Previous;
    __declspec(property(get=GetIsClosed))
    VARIANT_BOOL IsClosed;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetApplication ( );
    IDispatchPtr GetEdge ( );
    VARIANT_BOOL GetIsOpposedToEdge ( );
    VARIANT_BOOL GetIsParamReversed ( );
    IDispatchPtr GetLoop ( );
    IDispatchPtr GetGeometry ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr GetPartner ( );
    enum GNTTypePropertyConstants GetType ( );
    VARIANT_BOOL GetIsClosed ( );
    IDispatchPtr GetNext ( );
    IDispatchPtr GetPrevious ( );
    HRESULT GetDerivatives (
        long NumParams,
        SAFEARRAY * * Params,
        SAFEARRAY * * FirstDerv,
        SAFEARRAY * * SecondDerv,
        SAFEARRAY * * ThirdDerv );
    HRESULT GetRange (
        SAFEARRAY * * MinRangePoint,
        SAFEARRAY * * MaxRangePoint );
    HRESULT GetExactRange (
        SAFEARRAY * * MinRangePoint,
        SAFEARRAY * * MaxRangePoint );
    HRESULT GetEndPoints (
        SAFEARRAY * * StartPoint,
        SAFEARRAY * * EndPoint );
    HRESULT GetParamAtPoint (
        long NumPoints,
        SAFEARRAY * * Points,
        SAFEARRAY * * GuessParams,
        SAFEARRAY * * MaxDeviations,
        SAFEARRAY * * Params,
        SAFEARRAY * * Flags );
    HRESULT GetParamExtents (
        double * MinParam,
        double * MaxParam );
    HRESULT GetPointAtParam (
        long NumParams,
        SAFEARRAY * * Params,
        SAFEARRAY * * Points );
    HRESULT GetTangent (
        long NumParams,
        SAFEARRAY * * Params,
        SAFEARRAY * * Tangents );
    HRESULT GetParamAtPointEx (
        long NumPoints,
        SAFEARRAY * * Points,
        SAFEARRAY * * Params,
        const _variant_t & GuessParams = vtMissing,
        VARIANT * MaxDeviations = &vtMissing,
        VARIANT * Flags = &vtMissing );
};

struct __declspec(uuid("09fca066-dfbf-11d0-a275-080036c5ed02"))
Shells : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    IDispatchPtr Item (
        const _variant_t & index );
    enum GNTTypePropertyConstants GetType ( );
};

struct __declspec(uuid("09fca061-dfbf-11d0-a275-080036c5ed02"))
Faces : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;
    __declspec(property(get=GetIsUserDefined))
    VARIANT_BOOL IsUserDefined;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    IDispatchPtr Item (
        const _variant_t & index );
    HRESULT Add (
        IDispatch * Item );
    HRESULT Remove (
        IDispatch * Item );
    HRESULT RemoveAll ( );
    VARIANT_BOOL GetIsUserDefined ( );
    enum GNTTypePropertyConstants GetType ( );
};

struct __declspec(uuid("09fca068-dfbf-11d0-a275-080036c5ed02"))
Loops : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    IDispatchPtr Item (
        const _variant_t & index );
    enum GNTTypePropertyConstants GetType ( );
};

struct __declspec(uuid("09fca077-dfbf-11d0-a275-080036c5ed02"))
EdgeUses : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    IDispatchPtr Item (
        const _variant_t & index );
    enum GNTTypePropertyConstants GetType ( );
};

struct __declspec(uuid("09fca06c-dfbf-11d0-a275-080036c5ed02"))
Edges : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;
    __declspec(property(get=GetIsUserDefined))
    VARIANT_BOOL IsUserDefined;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    IDispatchPtr Item (
        const _variant_t & index );
    HRESULT Add (
        IDispatch * Item );
    HRESULT Remove (
        IDispatch * Item );
    HRESULT RemoveAll ( );
    VARIANT_BOOL GetIsUserDefined ( );
    enum GNTTypePropertyConstants GetType ( );
};

struct __declspec(uuid("09fca06e-dfbf-11d0-a275-080036c5ed02"))
Vertices : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;
    __declspec(property(get=GetIsUserDefined))
    VARIANT_BOOL IsUserDefined;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    IDispatchPtr Item (
        const _variant_t & index );
    HRESULT Add (
        IDispatch * Item );
    HRESULT Remove (
        IDispatch * Item );
    HRESULT RemoveAll ( );
    VARIANT_BOOL GetIsUserDefined ( );
    enum GNTTypePropertyConstants GetType ( );
};

struct __declspec(uuid("09fca071-dfbf-11d0-a275-080036c5ed02"))
_Collection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;
    __declspec(property(get=GetIsUserDefined))
    VARIANT_BOOL IsUserDefined;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    IDispatchPtr Item (
        const _variant_t & index );
    HRESULT Add (
        IDispatch * Item );
    HRESULT Remove (
        IDispatch * Item );
    HRESULT RemoveAll ( );
    VARIANT_BOOL GetIsUserDefined ( );
    enum GNTTypePropertyConstants GetType ( );
};

struct __declspec(uuid("09fca075-dfbf-11d0-a275-080036c5ed02"))
Edge : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetContinuity))
    long Continuity;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetGeometryForm))
    long GeometryForm;
    __declspec(property(get=GetEndVertex))
    IDispatchPtr EndVertex;
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetGeometry))
    IDispatchPtr Geometry;
    __declspec(property(get=GetIsParamReversed))
    VARIANT_BOOL IsParamReversed;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetStartVertex))
    IDispatchPtr StartVertex;
    __declspec(property(get=GetStrokeCount))
    long StrokeCount[];
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;
    __declspec(property(get=GetUpdatesCounter))
    long UpdatesCounter;
    __declspec(property(get=GetIsClosed))
    VARIANT_BOOL IsClosed;
    __declspec(property(get=GetID))
    int ID;
    __declspec(property(get=GetTag))
    int Tag;
    __declspec(property(get=GetBody))
    IDispatchPtr Body;
    __declspec(property(get=GetShells))
    IDispatchPtr Shells;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetApplication ( );
    HRESULT GetEdgeUses (
        long * NumEdgeUses,
        SAFEARRAY * * EdgeUses );
    IDispatchPtr GetEndVertex ( );
    HRESULT GetFaces (
        long * NumFaces,
        SAFEARRAY * * Faces );
    IDispatchPtr GetGeometry ( );
    VARIANT_BOOL GetIsParamReversed ( );
    VARIANT_BOOL GetIsClosed ( );
    IDispatchPtr GetParent ( );
    HRESULT GetReferenceKey (
        SAFEARRAY * * ReferenceKey,
        VARIANT * KeySize = &vtMissing );
    IDispatchPtr GetStartVertex ( );
    long GetStrokeCount (
        double Tolerance );
    HRESULT GetStrokeData (
        double Tolerance,
        long * StrokeCount,
        SAFEARRAY * * Points,
        SAFEARRAY * * Params );
    enum GNTTypePropertyConstants GetType ( );
    long GetContinuity ( );
    HRESULT GetCurvature (
        long NumParams,
        SAFEARRAY * * Params,
        SAFEARRAY * * Directions,
        SAFEARRAY * * Curvatures );
    HRESULT GetDerivatives (
        long NumParams,
        SAFEARRAY * * Params,
        SAFEARRAY * * FirstDerv,
        SAFEARRAY * * SecondDerv,
        SAFEARRAY * * ThirdDerv );
    long GetGeometryForm ( );
    HRESULT GetRange (
        SAFEARRAY * * MinRangePoint,
        SAFEARRAY * * MaxRangePoint );
    HRESULT GetExactRange (
        SAFEARRAY * * MinRangePoint,
        SAFEARRAY * * MaxRangePoint );
    HRESULT GetEndPoints (
        SAFEARRAY * * StartPoint,
        SAFEARRAY * * EndPoint );
    HRESULT GetLengthAtParam (
        double FromParam,
        double ToParam,
        double * Length );
    HRESULT GetParamAnomaly (
        SAFEARRAY * * Periodicity,
        VARIANT_BOOL * Singular );
    HRESULT GetParamAtPoint (
        long NumPoints,
        SAFEARRAY * * Points,
        SAFEARRAY * * GuessParams,
        SAFEARRAY * * MaxDeviations,
        SAFEARRAY * * Params,
        SAFEARRAY * * Flags );
    HRESULT GetParamAtLength (
        double FromParam,
        double Length,
        double * Param );
    HRESULT GetParamExtents (
        double * MinParam,
        double * MaxParam );
    HRESULT GetPointAtParam (
        long NumParams,
        SAFEARRAY * * Params,
        SAFEARRAY * * Points );
    HRESULT GetTangent (
        long NumParams,
        SAFEARRAY * * Params,
        SAFEARRAY * * Tangents );
    long GetUpdatesCounter ( );
    int GetID ( );
    int GetTag ( );
    IDispatchPtr GetBody ( );
    IDispatchPtr GetShells ( );
    HRESULT GetParamAtPointEx (
        long NumPoints,
        SAFEARRAY * * Points,
        SAFEARRAY * * Params,
        const _variant_t & GuessParams = vtMissing,
        VARIANT * MaxDeviations = &vtMissing,
        VARIANT * Flags = &vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT GetRenderLineData (
        double chordTol,
        long * pointCount,
        SAFEARRAY * * Points,
        long * lineCount,
        SAFEARRAY * * pointIndices,
        SAFEARRAY * * edgeIDs );
};

struct __declspec(uuid("09fca063-dfbf-11d0-a275-080036c5ed02"))
Face : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetArea))
    double Area;
    __declspec(property(get=GetGeometryForm))
    long GeometryForm;
    __declspec(property(get=GetID))
    int ID;
    __declspec(property(get=GetTag))
    int Tag;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetBody))
    IDispatchPtr Body;
    __declspec(property(get=GetEdges))
    IDispatchPtr Edges;
    __declspec(property(get=GetGeometry))
    IDispatchPtr Geometry;
    __declspec(property(get=GetIsParamReversed))
    VARIANT_BOOL IsParamReversed;
    __declspec(property(get=GetLoops))
    IDispatchPtr Loops;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetShell))
    IDispatchPtr Shell;
    __declspec(property(get=GetContinuity))
    long Continuity;
    __declspec(property(get=GetFacetCount))
    long FacetCount[];
    __declspec(property(get=GetFeatureIDsAndNames))
    _variant_t FeatureIDsAndNames;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;
    __declspec(property(get=GetVertices))
    IDispatchPtr Vertices;
    __declspec(property(get=GetUpdatesCounter))
    long UpdatesCounter;
    __declspec(property(get=GetStyle,put=PutStyle))
    TGFramework::FaceStylePtr Style;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetApplication ( );
    IDispatchPtr GetBody ( );
    IDispatchPtr GetEdges ( );
    IDispatchPtr GetGeometry ( );
    VARIANT_BOOL GetIsParamReversed ( );
    IDispatchPtr GetLoops ( );
    IDispatchPtr GetParent ( );
    HRESULT GetReferenceKey (
        SAFEARRAY * * ReferenceKey,
        VARIANT * KeySize = &vtMissing );
    IDispatchPtr GetShell ( );
    long GetFacetCount (
        double Tolerance );
    HRESULT GetFacetData (
        double Tolerance,
        long * FacetCount,
        SAFEARRAY * * Points,
        VARIANT * Normals = &vtMissing,
        VARIANT * TextureCoords = &vtMissing );
    enum GNTTypePropertyConstants GetType ( );
    IDispatchPtr GetVertices ( );
    double GetArea ( );
    long GetGeometryForm ( );
    HRESULT GetRange (
        SAFEARRAY * * MinRangePoint,
        SAFEARRAY * * MaxRangePoint );
    HRESULT GetExactRange (
        SAFEARRAY * * MinRangePoint,
        SAFEARRAY * * MaxRangePoint );
    HRESULT GetDerivatives (
        long NumParams,
        SAFEARRAY * * Params,
        SAFEARRAY * * UPartials,
        SAFEARRAY * * VPartials,
        SAFEARRAY * * UUPartials,
        SAFEARRAY * * UVPartials,
        SAFEARRAY * * VVPartials,
        SAFEARRAY * * UUUPartials,
        SAFEARRAY * * VVVPartials );
    HRESULT GetNormal (
        long NumParams,
        SAFEARRAY * * Params,
        SAFEARRAY * * Normals );
    HRESULT GetParamAnomaly (
        SAFEARRAY * * PeriodicityU,
        SAFEARRAY * * PeriodicityV,
        long * EndSingularityU,
        SAFEARRAY * * SingularityU,
        long * EndSingularityV,
        SAFEARRAY * * SingularityV );
    HRESULT GetParamOnFace (
        long NumParams,
        SAFEARRAY * * Params,
        SAFEARRAY * * OnFace );
    HRESULT GetParamRange (
        SAFEARRAY * * MinParam,
        SAFEARRAY * * MaxParam );
    HRESULT GetPointAtParam (
        long NumParams,
        SAFEARRAY * * Params,
        SAFEARRAY * * Points );
    HRESULT GetParamAtPoint (
        long NumPoints,
        SAFEARRAY * * Points,
        SAFEARRAY * * GuessParams,
        SAFEARRAY * * MaxDeviations,
        SAFEARRAY * * Params,
        SAFEARRAY * * Flags );
    HRESULT GetTangents (
        long NumParams,
        SAFEARRAY * * Params,
        SAFEARRAY * * UTangents,
        SAFEARRAY * * VTangents );
    long GetContinuity ( );
    HRESULT GetCurvatures (
        long NumParams,
        SAFEARRAY * * Params,
        SAFEARRAY * * MaxTangents,
        SAFEARRAY * * MaxCurvatures,
        SAFEARRAY * * MinCurvatures );
    long GetUpdatesCounter ( );
    TGFramework::FaceStylePtr GetStyle ( );
    void PutStyle (
        struct TGFramework::FaceStyle * _arg1 );
    HRESULT GetBendCenterLineAttributes (
        VARIANT_BOOL * BendAtributesExist,
        VARIANT * BendCenterLineEndPoints = &vtMissing,
        VARIANT * AttrbuteVersion = &vtMissing,
        VARIANT * BendRadius = &vtMissing,
        VARIANT * BendAngle = &vtMissing,
        VARIANT * BendSweepAngle = &vtMissing,
        VARIANT * BendOrientation = &vtMissing );
    HRESULT GetBendCenterLineAttributesEx (
        VARIANT_BOOL * BendAtributesExist,
        VARIANT * BendCenterLineEndPoints = &vtMissing,
        VARIANT * AttrbuteVersion = &vtMissing,
        VARIANT * BendRadius = &vtMissing,
        VARIANT * BendAngle = &vtMissing,
        VARIANT * BendSweepAngle = &vtMissing,
        VARIANT * BendOrientation = &vtMissing );
    int GetID ( );
    int GetTag ( );
    HRESULT GetParamAtPointEx (
        long NumPoints,
        SAFEARRAY * * Points,
        SAFEARRAY * * Params,
        const _variant_t & GuessParams = vtMissing,
        VARIANT * MaxDeviations = &vtMissing,
        VARIANT * Flags = &vtMissing );
    HRESULT GetRGBAVals (
        double * RVal,
        double * GVal,
        double * BVal,
        double * AVal );
    IDispatchPtr GetDocument ( );
    HRESULT GetRenderLineData (
        double chordTol,
        long * pointCount,
        SAFEARRAY * * Points,
        long * lineCount,
        SAFEARRAY * * pointIndices,
        SAFEARRAY * * edgeIDs );
    _variant_t GetFeatureIDsAndNames ( );
    HRESULT GetFacetDataEx (
        double Tolerance,
        long * pointCount,
        SAFEARRAY * * Points,
        long * FacetCount,
        SAFEARRAY * * FacetPointIndices,
        VARIANT * NormalCount = &vtMissing,
        VARIANT * Normals = &vtMissing,
        VARIANT * FacetNormalIndices = &vtMissing,
        VARIANT * TextureCoordsCount = &vtMissing,
        VARIANT * TextureCoords = &vtMissing,
        VARIANT * FacetTextureCoordsIndices = &vtMissing );
};

struct __declspec(uuid("09fca079-dfbf-11d0-a275-080036c5ed02"))
Loop : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetID))
    int ID;
    __declspec(property(get=GetTag))
    int Tag;
    __declspec(property(get=GetBody))
    IDispatchPtr Body;
    __declspec(property(get=GetVertices))
    IDispatchPtr Vertices;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetEdges))
    IDispatchPtr Edges;
    __declspec(property(get=GetEdgeUses))
    IDispatchPtr EdgeUses;
    __declspec(property(get=GetFace))
    IDispatchPtr Face;
    __declspec(property(get=GetIsOuterLoop))
    VARIANT_BOOL IsOuterLoop;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetApplication ( );
    IDispatchPtr GetEdges ( );
    IDispatchPtr GetEdgeUses ( );
    IDispatchPtr GetFace ( );
    VARIANT_BOOL GetIsOuterLoop ( );
    IDispatchPtr GetParent ( );
    HRESULT GetRange (
        SAFEARRAY * * MinRangePoint,
        SAFEARRAY * * MaxRangePoint );
    HRESULT GetExactRange (
        SAFEARRAY * * MinRangePoint,
        SAFEARRAY * * MaxRangePoint );
    enum GNTTypePropertyConstants GetType ( );
    int GetID ( );
    int GetTag ( );
    IDispatchPtr GetBody ( );
    IDispatchPtr GetVertices ( );
    IDispatchPtr GetDocument ( );
};

struct __declspec(uuid("09fca070-dfbf-11d0-a275-080036c5ed02"))
Shell : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;
    __declspec(property(get=GetVolume))
    double Volume;
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetID))
    int ID;
    __declspec(property(get=GetTag))
    int Tag;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetBody))
    IDispatchPtr Body;
    __declspec(property(get=GetEdges))
    IDispatchPtr Edges;
    __declspec(property(get=GetFaces))
    IDispatchPtr Faces;
    __declspec(property(get=GetIsClosed))
    VARIANT_BOOL IsClosed;
    __declspec(property(get=GetIsPointInside))
    VARIANT_BOOL IsPointInside[];
    __declspec(property(get=GetIsVoid))
    VARIANT_BOOL IsVoid;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetApplication ( );
    IDispatchPtr GetBody ( );
    IDispatchPtr GetEdges ( );
    IDispatchPtr GetFaces ( );
    VARIANT_BOOL GetIsClosed ( );
    VARIANT_BOOL GetIsPointInside (
        SAFEARRAY * * Point );
    VARIANT_BOOL GetIsVoid ( );
    IDispatchPtr GetParent ( );
    HRESULT GetRange (
        SAFEARRAY * * MinRangePoint,
        SAFEARRAY * * MaxRangePoint );
    HRESULT GetExactRange (
        SAFEARRAY * * MinRangePoint,
        SAFEARRAY * * MaxRangePoint );
    enum GNTTypePropertyConstants GetType ( );
    double GetVolume ( );
    HRESULT GetNonStitchedEdges (
        long * NumEdgeCollections,
        SAFEARRAY * * EdgeCollections );
    int GetID ( );
    int GetTag ( );
    IDispatchPtr GetDocument ( );
};

struct __declspec(uuid("09fca07d-dfbf-11d0-a275-080036c5ed02"))
Vertex : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUpdatesCounter))
    long UpdatesCounter;
    __declspec(property(get=GetID))
    int ID;
    __declspec(property(get=GetTag))
    int Tag;
    __declspec(property(get=GetBody))
    IDispatchPtr Body;
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetLoops))
    IDispatchPtr Loops;
    __declspec(property(get=GetShells))
    IDispatchPtr Shells;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetEdges))
    IDispatchPtr Edges;
    __declspec(property(get=GetFaces))
    IDispatchPtr Faces;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetApplication ( );
    IDispatchPtr GetEdges ( );
    IDispatchPtr GetFaces ( );
    HRESULT GetPointData (
        SAFEARRAY * * Point );
    IDispatchPtr GetParent ( );
    HRESULT GetReferenceKey (
        SAFEARRAY * * ReferenceKey,
        VARIANT * KeySize = &vtMissing );
    enum GNTTypePropertyConstants GetType ( );
    long GetUpdatesCounter ( );
    int GetID ( );
    int GetTag ( );
    IDispatchPtr GetBody ( );
    IDispatchPtr GetLoops ( );
    IDispatchPtr GetShells ( );
    IDispatchPtr GetDocument ( );
};

struct __declspec(uuid("5760c4d1-f6a8-11d0-bc68-0800360d1403"))
BSplineSurface : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetIsPlanar))
    VARIANT_BOOL IsPlanar;
    __declspec(property(get=GetIsRational))
    VARIANT_BOOL IsRational;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetApplication ( );
    HRESULT GetBSplineInfo (
        SAFEARRAY * * Order,
        SAFEARRAY * * NumPoles,
        SAFEARRAY * * NumKnots,
        VARIANT_BOOL * Rational,
        SAFEARRAY * * Closed,
        SAFEARRAY * * Periodic,
        VARIANT_BOOL * Planar );
    HRESULT GetBSplineData (
        long NumPoles,
        long NumKnotsU,
        long NumKnotsV,
        long NumWeights,
        SAFEARRAY * * Poles,
        SAFEARRAY * * KnotsU,
        SAFEARRAY * * KnotsV,
        SAFEARRAY * * Weights );
    HRESULT GetNumKnots (
        SAFEARRAY * * NumKnots );
    HRESULT GetNumPoles (
        SAFEARRAY * * NumPoles );
    HRESULT GetOrder (
        SAFEARRAY * * Order );
    HRESULT GetIsPeriodic (
        SAFEARRAY * * Periodic );
    VARIANT_BOOL GetIsPlanar ( );
    VARIANT_BOOL GetIsRational ( );
    HRESULT GetIsClosed (
        SAFEARRAY * * Closed );
    enum GNTTypePropertyConstants GetType ( );
    IDispatchPtr GetParent ( );
};

struct __declspec(uuid("f925aa81-f74f-11d0-bc6a-0800360d1403"))
Cone : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetExpanding))
    VARIANT_BOOL Expanding;
    __declspec(property(get=GetHalfAngle))
    double HalfAngle;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRadius))
    double Radius;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetApplication ( );
    HRESULT GetAxisVector (
        SAFEARRAY * * AxisVector );
    HRESULT GetBasePoint (
        SAFEARRAY * * BasePoint );
    HRESULT GetConeData (
        SAFEARRAY * * BasePoint,
        SAFEARRAY * * AxisVector,
        double * Radius,
        double * HalfAngle,
        VARIANT_BOOL * Expanding );
    VARIANT_BOOL GetExpanding ( );
    double GetHalfAngle ( );
    IDispatchPtr GetParent ( );
    double GetRadius ( );
    enum GNTTypePropertyConstants GetType ( );
};

struct __declspec(uuid("f925aa83-f74f-11d0-bc6a-0800360d1403"))
Cylinder : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRadius))
    double Radius;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetApplication ( );
    HRESULT GetAxisVector (
        SAFEARRAY * * AxisVect );
    HRESULT GetBasePoint (
        SAFEARRAY * * BasePoint );
    HRESULT GetCylinderData (
        SAFEARRAY * * BasePoint,
        SAFEARRAY * * AxisVector,
        double * Radius );
    enum GNTTypePropertyConstants GetType ( );
    IDispatchPtr GetParent ( );
    double GetRadius ( );
};

struct __declspec(uuid("8e2f94d1-eba2-11d0-bc5e-0800360d1403"))
Plane : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetApplication ( );
    HRESULT GetNormalVector (
        SAFEARRAY * * NormalVector );
    HRESULT GetPlaneData (
        SAFEARRAY * * RootPoint,
        SAFEARRAY * * NormalVector );
    HRESULT GetRootPoint (
        SAFEARRAY * * RootPoint );
    enum GNTTypePropertyConstants GetType ( );
    IDispatchPtr GetParent ( );
    HRESULT GetPlaneProperties (
        double ReqRelAccy,
        double * Area,
        SAFEARRAY * * RootPoint,
        SAFEARRAY * * Moments,
        SAFEARRAY * * PrincipalAxes,
        double * RelAccyAchieved );
};

struct __declspec(uuid("f925aa85-f74f-11d0-bc6a-0800360d1403"))
Sphere : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRadius))
    double Radius;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetApplication ( );
    HRESULT GetCenterPoint (
        SAFEARRAY * * CenterPoint );
    IDispatchPtr GetParent ( );
    double GetRadius ( );
    HRESULT GetSphereData (
        SAFEARRAY * * CenterPoint,
        double * Radius );
    enum GNTTypePropertyConstants GetType ( );
};

struct __declspec(uuid("f925aa87-f74f-11d0-bc6a-0800360d1403"))
Torus : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetMajorRadius))
    double MajorRadius;
    __declspec(property(get=GetMinorRadius))
    double MinorRadius;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetApplication ( );
    HRESULT GetAxisVector (
        SAFEARRAY * * AxisVector );
    HRESULT GetCenterPoint (
        SAFEARRAY * * CenterPoint );
    double GetMajorRadius ( );
    double GetMinorRadius ( );
    IDispatchPtr GetParent ( );
    HRESULT GetTorusData (
        SAFEARRAY * * CenterPoint,
        SAFEARRAY * * AxisVector,
        double * MajorRadius,
        double * MinorRadius );
    enum GNTTypePropertyConstants GetType ( );
};

struct __declspec(uuid("84834777-9903-4a43-99ef-0b94302db6b2"))
MeshSurface : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetApplication ( );
    HRESULT GetTrianglePoints (
        long * FacetCount,
        SAFEARRAY * * Points );
    HRESULT GetTriangleNormals (
        long * FacetCount,
        SAFEARRAY * * Normals );
    HRESULT GetTriangleData (
        long * FacetCount,
        SAFEARRAY * * Points,
        SAFEARRAY * * Normals );
    enum GNTTypePropertyConstants GetType ( );
    IDispatchPtr GetParent ( );
};

struct __declspec(uuid("09fca07f-dfbf-11d0-a275-080036c5ed02"))
BSplineCurve : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetIsPlanar))
    VARIANT_BOOL IsPlanar;
    __declspec(property(get=GetIsRational))
    VARIANT_BOOL IsRational;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetApplication ( );
    HRESULT GetBSplineData (
        long NumPoles,
        long NumKnots,
        long NumWeights,
        SAFEARRAY * * Poles,
        SAFEARRAY * * Knots,
        SAFEARRAY * * Weights );
    HRESULT GetBSplineInfo (
        long * Order,
        long * NumPoles,
        long * NumKnots,
        VARIANT_BOOL * Rational,
        VARIANT_BOOL * Closed,
        VARIANT_BOOL * Periodic,
        VARIANT_BOOL * Planar,
        SAFEARRAY * * PlaneVector );
    VARIANT_BOOL GetIsClosed ( );
    long GetNumKnots ( );
    long GetNumPoles ( );
    long GetOrder ( );
    IDispatchPtr GetParent ( );
    VARIANT_BOOL GetIsPeriodic ( );
    VARIANT_BOOL GetIsPlanar ( );
    VARIANT_BOOL GetIsRational ( );
    enum GNTTypePropertyConstants GetType ( );
};

struct __declspec(uuid("09fca081-dfbf-11d0-a275-080036c5ed02"))
Circle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRadius))
    double Radius;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetApplication ( );
    HRESULT GetAxisVector (
        SAFEARRAY * * AxisVector );
    HRESULT GetCenterPoint (
        SAFEARRAY * * CenterPoint );
    HRESULT GetCircleData (
        SAFEARRAY * * CenterPoint,
        SAFEARRAY * * AxisVector,
        double * Radius );
    IDispatchPtr GetParent ( );
    double GetRadius ( );
    enum GNTTypePropertyConstants GetType ( );
};

struct __declspec(uuid("09fca083-dfbf-11d0-a275-080036c5ed02"))
Ellipse : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetMinorMajorRatio))
    double MinorMajorRatio;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetApplication ( );
    HRESULT GetAxisVector (
        SAFEARRAY * * AxisVector );
    HRESULT GetCenterPoint (
        SAFEARRAY * * CenterPoint );
    HRESULT GetEllipseData (
        SAFEARRAY * * CenterPoint,
        SAFEARRAY * * AxisVector,
        SAFEARRAY * * MajorAxis,
        double * MinorMajorRatio );
    HRESULT GetMajorAxis (
        SAFEARRAY * * MajorAxis );
    double GetMinorMajorRatio ( );
    IDispatchPtr GetParent ( );
    enum GNTTypePropertyConstants GetType ( );
};

struct __declspec(uuid("09fca085-dfbf-11d0-a275-080036c5ed02"))
Line : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetApplication ( );
    HRESULT GetLineData (
        SAFEARRAY * * RootPoint,
        SAFEARRAY * * DirectionVector );
    IDispatchPtr GetParent ( );
    HRESULT GetRootPoint (
        SAFEARRAY * * RootPoint );
    enum GNTTypePropertyConstants GetType ( );
    HRESULT GetVector (
        SAFEARRAY * * Vector );
};

struct __declspec(uuid("19e66782-2e28-4cc9-8b45-fb565f1910f7"))
PLine : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    enum GNTTypePropertyConstants GetType ( );
    HRESULT GetPLineData (
        long * PointsCount,
        SAFEARRAY * * Points,
        VARIANT_BOOL * Closed,
        double * BaseParameter );
    HRESULT GetPoints (
        long * PointsCount,
        SAFEARRAY * * Points );
    HRESULT GetClosed (
        VARIANT_BOOL * Closed );
    HRESULT GetBaseParameter (
        double * BaseParameter );
};

struct __declspec(uuid("93ffce32-f84a-11d0-97bc-080036947803"))
ParamBSplineCurve : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetIsRational))
    VARIANT_BOOL IsRational;
    __declspec(property(get=GetType))
    enum GNTTypePropertyConstants Type;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetApplication ( );
    HRESULT GetBSpline2dData (
        long NumPoles,
        long NumKnots,
        long NumWeights,
        SAFEARRAY * * Poles,
        SAFEARRAY * * Knots,
        SAFEARRAY * * Weights );
    HRESULT GetBSpline2dInfo (
        long * Order,
        long * NumPoles,
        long * NumKnots,
        VARIANT_BOOL * Rational,
        VARIANT_BOOL * Closed,
        VARIANT_BOOL * Periodic );
    VARIANT_BOOL GetIsClosed ( );
    IDispatchPtr GetParent ( );
    long GetNumKnots ( );
    long GetNumPoles ( );
    long GetOrder ( );
    VARIANT_BOOL GetIsPeriodic ( );
    VARIANT_BOOL GetIsRational ( );
    enum GNTTypePropertyConstants GetType ( );
};

//
// Wrapper method implementations
//

#include "D:\visualstudio\project\TGCAD\TGCAD\x64\Debug\tggeometry.tli"

} // namespace TGGeometry

#pragma pack(pop)
