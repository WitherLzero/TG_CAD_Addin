// Created by Microsoft (R) C/C++ Compiler Version 14.32.31332.0 (61642b20).
//
// D:\visualstudio\project\TGCAD\TGCAD\x64\Debug\tgfwksupp.tlh
//
// C++ source equivalent of type library tgfwksupp.tlb
// compiler-generated file - DO NOT EDIT!

//
// Cross-referenced type libraries:
//
//

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace TGFrameworkSupport {

//
// Forward references and typedefs
//

struct __declspec(uuid("cd568442-6d66-45b9-be0d-e6f4ee9cdcc0"))
/* LIBID */ __TGFrameworkSupport;
struct __declspec(uuid("1cb73366-a62a-11ce-b05b-08003601dd4b"))
/* interface */ _IRelation2dAuto;
struct __declspec(uuid("1cb73368-a62a-11ce-b05b-08003601dd4b"))
/* interface */ _IRelations2dAuto;
struct __declspec(uuid("1cb73367-a62a-11ce-b05b-08003601dd4b"))
/* dispinterface */ Relation2d;
struct __declspec(uuid("0ad0e8a2-9cf6-11ce-8d65-08003601bb4e"))
/* interface */ _IBackDropAuto;
enum GridTypeConstants;
enum DynamicGridSpacingConstants;
struct __declspec(uuid("d2818a20-5881-11ce-956a-08003601dfe5"))
/* interface */ _IDrawingObjectsAuto;
struct __declspec(uuid("c1430b81-ce5d-11ce-9472-0800361c0602"))
/* interface */ _IGroupAuto;
struct __declspec(uuid("630df5a0-2211-11ce-9b15-08003601cedf"))
/* dispinterface */ Dimensions;
struct __declspec(uuid("c13be7f6-e3bd-11d2-bed4-080036b4d502"))
/* interface */ _IDimensionsAuto;
struct __declspec(uuid("3f12b760-2211-11ce-9b15-08003601cedf"))
/* dispinterface */ Dimension;
struct __declspec(uuid("79518374-e3bc-11d2-bed4-080036b4d502"))
/* interface */ _IDimensionAuto;
struct __declspec(uuid("743442b0-31e0-11ce-93f4-080036373002"))
/* dispinterface */ DimStyle;
struct __declspec(uuid("a1315ee0-31e0-11ce-93f4-080036373002"))
/* interface */ _IDimStyleAuto;
enum DimLinearUnitConstants;
enum DimRoundOffTypeConstants;
enum DimDelimiterTypeConstants;
enum DimDecimalRoundOffTypeConstants;
enum DimFractionRoundOffTypeConstants;
enum DimAngularUnitConstants;
enum DimDMSRoundOffTypeConstants;
enum DimTextFontStyleConstants;
enum DimTextOrientationConstants;
enum DimTextPositionConstants;
enum DimLimitTextArrangmentConstants;
enum DimNTSTypeConstants;
enum DimTermTypeConstants;
enum DimTermDisplayTypeConstants;
enum DimDatumTermTypeConstants;
enum DimCommonOriginTypeConstants;
enum DimCoordTextPositionConstants;
enum DimSymbolPositionConstants;
enum DimScaleModeConstants;
enum DimProjDisplayTypeConstants;
enum DimProjTolZonePositionConstants;
enum DimViewCuttingPlaneDisplayTypeConstants;
enum DimViewPlaneDisplayTypeConstants;
enum DimOffsetLeaderTypeConstants;
enum DimRoundUpTypeConstants;
enum DimStyleSymbolFontConstants;
enum DimStyleDatumFrameShapeConstants;
enum DimStyleSecondaryUnitSeparatorConstants;
enum DimHoleShaftSeparatorTypeConstants;
enum TextVerticalAlignmentConstants;
enum DimToleranceTextHorizontalAlignOptionsConstants;
enum DimDatumTargetTermTypeConstants;
enum DimPinSymbolTermTypeConstants;
enum DimDualUnitPositionConstants;
enum TextHorizontalAlignmentConstants;
enum DimStackFractionTypeConstants;
enum DimStackFractionSizeConstants;
enum DimTypeConstants;
enum DimBreakPositionConstants;
enum DimProjArcConstants;
enum DimDispTypeConstants;
enum DimStatusConstants;
enum DimGroupMemberTypeConstants;
enum DimChamferModeConstants;
enum DimAxisModeConstants;
struct __declspec(uuid("47cac844-8004-4807-81a9-f76ddeeee1f1"))
/* dispinterface */ DisplayData;
struct __declspec(uuid("64b50358-a599-4974-b363-f615a35dde40"))
/* interface */ _IDisplayDataAuto;
enum SubfixAlignmentConstants;
enum PMIEditDirectionConstants;
enum DimReattachStatusConstants;
struct __declspec(uuid("b2210830-2917-11ce-9b15-08003601cedf"))
/* dispinterface */ DimensionStyle;
struct __declspec(uuid("8971aa30-2917-11ce-9b15-08003601cedf"))
/* interface */ _IDimensionStyleAuto;
enum DimViewCaptionLocationConstants;
enum DimViewCPLCaptionLocationConstants;
enum DimAngularCoordnateOrientationConstants;
struct __declspec(uuid("8d73e634-9deb-4e69-bfc4-5fedc46e78ce"))
/* dispinterface */ DimInitData;
struct __declspec(uuid("91245770-1f18-44bf-84a4-d4999e9d4712"))
/* interface */ _IDimInitDataAuto;
struct __declspec(uuid("3f6e35b0-9044-11ce-93f4-080036373002"))
/* dispinterface */ Leaders;
struct __declspec(uuid("299e9e90-9044-11ce-93f4-080036373002"))
/* interface */ _ILeadersAuto;
struct __declspec(uuid("e2131930-9043-11ce-93f4-080036373002"))
/* dispinterface */ Leader;
struct __declspec(uuid("c4425ba0-9043-11ce-93f4-080036373002"))
/* interface */ _ILeaderAuto;
struct __declspec(uuid("d943a5eb-d2ed-4ff8-8325-f7394eac4831"))
/* dispinterface */ AnnotInitData;
struct __declspec(uuid("7cf1c8b0-abe3-4a74-8a3e-d76912f45633"))
/* interface */ _IAnnotInitDataAuto;
struct __declspec(uuid("4a603c18-e750-11ce-bb40-080036776c02"))
/* dispinterface */ Balloons;
struct __declspec(uuid("4a603c16-e750-11ce-bb40-080036776c02"))
/* interface */ _IBalloonsAuto;
struct __declspec(uuid("4a603c12-e750-11ce-bb40-080036776c02"))
/* dispinterface */ Balloon;
struct __declspec(uuid("4a603c10-e750-11ce-bb40-080036776c02"))
/* interface */ _IBalloonAuto;
enum DimBalloonTypeConstants;
enum DimBalloonDirTypeConstants;
enum DimCalloutTextWidthModeConstants;
enum TextJustificationConstants;
enum DimCalloutLeaderTextConnectionPointConstants;
enum DimCalloutBalloonBreaklineDirectionConstants;
enum ReferencedObjectTypeConstants;
enum TGBalloonReattachStatusConstants;
struct __declspec(uuid("92486641-ec57-11cd-bb2e-08003601bda9"))
/* dispinterface */ Lines2d;
struct __declspec(uuid("148aba30-ec57-11cd-bb2e-08003601bda9"))
/* interface */ _ILines2dAuto;
struct __declspec(uuid("77169d81-ec58-11cd-bb2e-08003601bda9"))
/* dispinterface */ Line2d;
struct __declspec(uuid("a98fe580-ec57-11cd-bb2e-08003601bda9"))
/* interface */ _ILine2dAuto;
struct __declspec(uuid("d175e580-19f0-11cf-9947-08003601b103"))
/* dispinterface */ GeometryStyle2d;
struct __declspec(uuid("be6feaf0-19f0-11cf-9947-08003601b103"))
/* interface */ _IGeometryStyle2dAuto;
struct __declspec(uuid("02e44221-2e53-11cf-9c34-08003601e3b7"))
/* dispinterface */ Relationships2d;
struct __declspec(uuid("02e44220-2e53-11cf-9c34-08003601e3b7"))
/* interface */ _IRelationships2dAuto;
struct __declspec(uuid("931f20a0-06ad-11ce-976e-08003601e26d"))
/* dispinterface */ ChamferGeometry2d;
struct __declspec(uuid("87cc5df0-06ad-11ce-976e-08003601e26d"))
/* interface */ _IChamferGeometry2dAuto;
struct __declspec(uuid("6c00fd10-0513-11ce-976e-08003601e26d"))
/* dispinterface */ Circles2d;
struct __declspec(uuid("5635fb80-0513-11ce-976e-08003601e26d"))
/* interface */ _ICircles2dAuto;
struct __declspec(uuid("923f5f60-0513-11ce-976e-08003601e26d"))
/* dispinterface */ Circle2d;
struct __declspec(uuid("85d063d0-0513-11ce-976e-08003601e26d"))
/* interface */ _ICircle2dAuto;
struct __declspec(uuid("dc912d30-0056-11ce-976e-08003601e26d"))
/* dispinterface */ Arcs2d;
struct __declspec(uuid("c52b1e30-0056-11ce-976e-08003601e26d"))
/* interface */ _IArcs2dAuto;
struct __declspec(uuid("032213a0-0057-11ce-976e-08003601e26d"))
/* dispinterface */ Arc2d;
struct __declspec(uuid("f748d870-0056-11ce-976e-08003601e26d"))
/* interface */ _IArc2dAuto;
struct __declspec(uuid("117dc430-06ac-11ce-976e-08003601e26d"))
/* dispinterface */ FilletGeometry2d;
struct __declspec(uuid("06947170-06ac-11ce-976e-08003601e26d"))
/* interface */ _IFilletGeom2dAuto;
enum Geom2dOrientationConstants;
struct __declspec(uuid("12cda270-fb0d-11cd-976e-08003601e26d"))
/* dispinterface */ Ellipses2d;
struct __declspec(uuid("0314ae90-fb0d-11cd-976e-08003601e26d"))
/* interface */ _IEllipses2dAuto;
struct __declspec(uuid("41876a30-fb0d-11cd-976e-08003601e26d"))
/* dispinterface */ Ellipse2d;
struct __declspec(uuid("33899ab0-fb0d-11cd-976e-08003601e26d"))
/* interface */ _IEllipse2dAuto;
struct __declspec(uuid("3d73a7a0-06a9-11ce-976e-08003601e26d"))
/* dispinterface */ BSplineCurves2d;
struct __declspec(uuid("2b32cc40-06a9-11ce-976e-08003601e26d"))
/* interface */ _IBspCurves2dAuto;
struct __declspec(uuid("787328e0-06a9-11ce-976e-08003601e26d"))
/* dispinterface */ BSplineCurve2d;
struct __declspec(uuid("6ab895a0-06a9-11ce-976e-08003601e26d"))
/* interface */ _IBspCurve2dAuto;
enum Geom2dFormConstants;
enum Geom2dScopeConstants;
struct __declspec(uuid("e25b3400-06b0-11ce-976e-08003601e26d"))
/* dispinterface */ Points2d;
struct __declspec(uuid("d667fea0-06b0-11ce-976e-08003601e26d"))
/* interface */ _IPoints2dAuto;
struct __declspec(uuid("03884020-06b1-11ce-976e-08003601e26d"))
/* dispinterface */ Point2d;
struct __declspec(uuid("f8528600-06b0-11ce-976e-08003601e26d"))
/* interface */ _IPoint2dAuto;
struct __declspec(uuid("aa921170-1d6d-11ce-976e-08003601e26d"))
/* dispinterface */ EllipticalArcs2d;
struct __declspec(uuid("9a52a510-1d6d-11ce-976e-08003601e26d"))
/* interface */ _IEllipArcs2dAuto;
struct __declspec(uuid("9102d890-1d6d-11ce-976e-08003601e26d"))
/* dispinterface */ EllipticalArc2d;
struct __declspec(uuid("81c8b940-1d6d-11ce-976e-08003601e26d"))
/* interface */ _IEllipArc2dAuto;
struct __declspec(uuid("ef0154a0-53e5-11ce-bd99-08003671f901"))
/* dispinterface */ Curves2d;
struct __declspec(uuid("2bdde515-531f-11ce-bd99-08003671f901"))
/* interface */ _ICurves2dAuto;
struct __declspec(uuid("2bdde510-531f-11ce-bd99-08003671f901"))
/* dispinterface */ Curve2d;
struct __declspec(uuid("ef0154a1-53e5-11ce-bd99-08003671f901"))
/* interface */ _ICurve2dAuto;
enum CurveFitTypeConstants;
struct __declspec(uuid("34dc85d0-3ea7-11ce-b0b9-08003601ebe2"))
/* dispinterface */ LineStrings2d;
struct __declspec(uuid("f27325b0-3ea6-11ce-b0b9-08003601ebe2"))
/* interface */ _ILineStrings2dAuto;
struct __declspec(uuid("bed45830-3ea6-11ce-b0b9-08003601ebe2"))
/* dispinterface */ LineString2d;
struct __declspec(uuid("37bcecb0-3ea6-11ce-b0b9-08003601ebe2"))
/* interface */ _ILineString2dAuto;
struct __declspec(uuid("2bd8e8d0-912b-11ce-976e-08003601e26d"))
/* dispinterface */ ComplexStrings2d;
struct __declspec(uuid("fc2177f0-912a-11ce-976e-08003601e26d"))
/* interface */ _IComplexStrings2dAuto;
struct __declspec(uuid("e8e47aa0-912a-11ce-976e-08003601e26d"))
/* dispinterface */ ComplexString2d;
struct __declspec(uuid("bb147e90-912a-11ce-976e-08003601e26d"))
/* interface */ _IComplexString2dAuto;
struct __declspec(uuid("e9505190-5881-11ce-956a-08003601dfe5"))
/* dispinterface */ DrawingObjects;
struct __declspec(uuid("94c958b2-cee5-11ce-a9af-08003601b487"))
/* dispinterface */ Boundaries2d;
struct __declspec(uuid("94c958b1-cee5-11ce-a9af-08003601b487"))
/* interface */ _IBoundaries2dAuto;
struct __declspec(uuid("94c958b0-cee5-11ce-a9af-08003601b487"))
/* dispinterface */ Boundary2d;
struct __declspec(uuid("2c488083-ce6a-11ce-a9af-08003601b487"))
/* interface */ _IBoundary2dAuto;
struct __declspec(uuid("f8cacde0-2420-11cf-b44e-08003601e84c"))
/* dispinterface */ BoundaryStyle2d;
struct __declspec(uuid("e12182a0-2420-11cf-b44e-08003601e84c"))
/* interface */ _IBoundaryStyle2dAuto;
struct __declspec(uuid("6d967500-1ae2-11cf-b445-08003601e84c"))
/* dispinterface */ BoundingObjects2d;
struct __declspec(uuid("56a48840-1ae2-11cf-b445-08003601e84c"))
/* interface */ _IBoundingObjects2dAuto;
enum Boundary2dStateConstants;
struct __declspec(uuid("047cb8b0-ab10-11ce-a8b9-080036373002"))
/* dispinterface */ TextBoxes;
struct __declspec(uuid("53735360-98d6-11ce-93f4-080036373002"))
/* interface */ _ITextBoxesAuto;
struct __declspec(uuid("429065f0-98d6-11ce-93f4-080036373002"))
/* dispinterface */ TextBox;
struct __declspec(uuid("18caebd0-98d6-11ce-93f4-080036373002"))
/* interface */ _ITextBoxAuto;
struct __declspec(uuid("02a24700-98e7-11ce-93f4-080036373002"))
/* dispinterface */ TextEdit;
struct __declspec(uuid("f23ca6f0-98e6-11ce-93f4-080036373002"))
/* interface */ _ITextEditAuto;
enum TextTabTypeConstants;
enum TextSelectConstants;
enum TextSpecialIndentTypeConstants;
enum TextLineSpacingTypeConstants;
enum TextFractionTypeConstants;
enum TextFractionAlignConstants;
enum TextFractionSizeConstants;
enum TextBulletTypeConstants;
enum TextNumberTypeConstants;
enum TextNumberFormatConstants;
enum TextNumberJustificationConstants;
enum TextBorderTypeConstants;
enum TextFlowDirectionConstants;
enum TextFlowOrientationConstants;
enum TextPlacementTypeConstants;
enum TextControlTypeConstants;
struct __declspec(uuid("9b06d914-10cb-424b-91c7-dc74cb616ddf"))
/* dispinterface */ TextProfiles;
struct __declspec(uuid("2558042d-153f-441d-a35b-95098c202ea0"))
/* interface */ _ITextProfilesAuto;
struct __declspec(uuid("98a9be78-fffd-47d8-82eb-d0bc228e2a38"))
/* dispinterface */ TextProfile;
struct __declspec(uuid("d57d3aa1-7785-499e-afc1-be9ddb7666c5"))
/* interface */ _ITextProfileAuto;
enum AnchorPointLocationConstants;
struct __declspec(uuid("a25db0c0-9bf8-11ce-967b-080036776c02"))
/* dispinterface */ DatumFrames;
struct __declspec(uuid("8b4a25e0-9bf8-11ce-967b-080036776c02"))
/* interface */ _IDatumFramesAuto;
struct __declspec(uuid("6c433540-9bf8-11ce-967b-080036776c02"))
/* dispinterface */ DatumFrame;
struct __declspec(uuid("56f3f9e0-9bf8-11ce-967b-080036776c02"))
/* interface */ _IDatumFrameAuto;
struct __declspec(uuid("2ebb2a95-c806-11ce-bb17-080036776c02"))
/* dispinterface */ FeatureControlFrames;
struct __declspec(uuid("2ebb2a94-c806-11ce-bb17-080036776c02"))
/* interface */ _IFeatureControlFramesAuto;
struct __declspec(uuid("2ebb2a92-c806-11ce-bb17-080036776c02"))
/* dispinterface */ FeatureControlFrame;
struct __declspec(uuid("2ebb2a90-c806-11ce-bb17-080036776c02"))
/* interface */ _IFeatureControlFrameAuto;
enum DimFCFOrientationConstants;
enum DimFCFLeaderTextConnectionPointConstants;
struct __declspec(uuid("b3cec7e1-34a4-11cf-848f-080036373002"))
/* dispinterface */ FeatureControlFrameDataSet;
struct __declspec(uuid("b3cec7e0-34a4-11cf-848f-080036373002"))
/* interface */ _IFeatureControlFrameDataSetAuto;
struct __declspec(uuid("92e76925-d3a0-11ce-bb2a-080036776c02"))
/* dispinterface */ SurfaceFinishSymbols;
struct __declspec(uuid("92e76924-d3a0-11ce-bb2a-080036776c02"))
/* interface */ _ISurfaceFinishSymbolsAuto;
struct __declspec(uuid("92e76922-d3a0-11ce-bb2a-080036776c02"))
/* dispinterface */ SurfaceFinishSymbol;
struct __declspec(uuid("92e76920-d3a0-11ce-bb2a-080036776c02"))
/* interface */ _ISurfaceFinishSymbolAuto;
enum DimSurfTextureSymTypeConstants;
enum DimSurfTextureLaySymTypeConstants;
struct __declspec(uuid("b3cec7e4-34a4-11cf-848f-080036373002"))
/* dispinterface */ SurfaceFinishSymbolDataSet;
struct __declspec(uuid("b3cec7e3-34a4-11cf-848f-080036373002"))
/* interface */ _ISurfaceFinishSymbolDataSetAuto;
struct __declspec(uuid("1690dd48-e132-11ce-bb3b-080036776c02"))
/* dispinterface */ WeldSymbols;
struct __declspec(uuid("1690dd47-e132-11ce-bb3b-080036776c02"))
/* interface */ _IWeldSymbolsAuto;
struct __declspec(uuid("1690dd42-e132-11ce-bb3b-080036776c02"))
/* dispinterface */ WeldSymbol;
struct __declspec(uuid("1690dd40-e132-11ce-bb3b-080036776c02"))
/* interface */ _IWeldSymbolAuto;
enum DimWeldTailTypeConstants;
enum DimWeldDashLineTypeConstants;
enum DimWeldTreatmentTypeConstants;
enum DimWeldTypeConstants;
enum DimWeldModifierConstants;
enum WeldSymbolFlagDirectionConstants;
struct __declspec(uuid("b3cec7e7-34a4-11cf-848f-080036373002"))
/* dispinterface */ WeldSymbolDataSet;
struct __declspec(uuid("b3cec7e6-34a4-11cf-848f-080036373002"))
/* interface */ _IWeldSymbolDataSetAuto;
struct __declspec(uuid("5c585ab1-f199-11ce-a93b-080036373002"))
/* dispinterface */ CenterMarks;
struct __declspec(uuid("7d915054-f4a6-11ce-a941-080036373002"))
/* interface */ _ICenterMarksAuto;
struct __declspec(uuid("7d915053-f4a6-11ce-a941-080036373002"))
/* dispinterface */ CenterMark;
struct __declspec(uuid("7d915052-f4a6-11ce-a941-080036373002"))
/* interface */ _ICenterMarkAuto;
struct __declspec(uuid("5c585ab3-f199-11ce-a93b-080036373002"))
/* dispinterface */ CenterLines;
struct __declspec(uuid("7d915051-f4a6-11ce-a941-080036373002"))
/* interface */ _ICenterLinesAuto;
struct __declspec(uuid("7d915050-f4a6-11ce-a941-080036373002"))
/* dispinterface */ CenterLine;
struct __declspec(uuid("18b97b40-f44b-11ce-a93f-080036373002"))
/* interface */ _ICenterLineAuto;
enum DimCenterlineTypeConstants;
struct __declspec(uuid("011c6470-c7ce-11ce-bb17-080036776c02"))
/* dispinterface */ DatumTargets;
struct __declspec(uuid("ceb9ae05-c716-11ce-bb15-080036776c02"))
/* interface */ _IDatumTargetsAuto;
struct __declspec(uuid("ceb9ae00-c716-11ce-bb15-080036776c02"))
/* dispinterface */ DatumTarget;
struct __declspec(uuid("c033ded0-c716-11ce-bb15-080036776c02"))
/* interface */ _IDatumTargetAuto;
enum DimDatumTargetLeaderTypeConstants;
enum DimDatumTargetTypeConstants;
struct __declspec(uuid("6464b554-63e0-4508-9592-8050936502b6"))
/* dispinterface */ PinSymbols;
struct __declspec(uuid("57b05cf9-ec6c-45ba-bcfa-0b89ab322490"))
/* interface */ _IPinSymbolsAuto;
struct __declspec(uuid("34377e14-91ee-41cd-a0d3-168b1038da0c"))
/* dispinterface */ PinSymbol;
struct __declspec(uuid("81468c62-04a9-4aa2-89ed-ad5befe43152"))
/* interface */ _IPinSymbolAuto;
struct __declspec(uuid("8d2252b7-4c0e-11d0-9b73-080036a8d302"))
/* dispinterface */ DatumPoints;
struct __declspec(uuid("36bd16a0-dbfe-11d0-8422-080036c7ce02"))
/* interface */ _IDatumPointsAuto;
struct __declspec(uuid("36bd1697-dbfe-11d0-8422-080036c7ce02"))
/* dispinterface */ DatumPoint;
struct __declspec(uuid("36bd1693-dbfe-11d0-8422-080036c7ce02"))
/* interface */ _IDatumPointAuto;
enum DimDatumPointTypeConstants;
struct __declspec(uuid("e7b545e0-0533-444d-a941-45b763aafdda"))
/* dispinterface */ CornerAnnotations;
struct __declspec(uuid("15afb5e7-22cc-11d2-89ad-080036a8d302"))
/* interface */ _ICornerAnnotationsAuto;
struct __declspec(uuid("7fb02fb0-e049-4fed-8702-99b7b5d5bd5f"))
/* dispinterface */ CornerAnnotation;
struct __declspec(uuid("15afb5e5-22cc-11d2-89ad-080036a8d302"))
/* interface */ _ICornerAnnotationAuto;
struct __declspec(uuid("9e54f91c-2a33-40f7-b1fa-0287623eb25c"))
/* dispinterface */ BoltHoleCircles;
struct __declspec(uuid("cc40ece8-1cae-4e2c-b2a6-af96492d5976"))
/* interface */ _IBoltHoleCirclesAuto;
struct __declspec(uuid("de9693b0-7bab-468d-9b0c-b94fb78dd4ae"))
/* dispinterface */ BoltHoleCircle;
struct __declspec(uuid("6b88349e-9cf7-463c-b2ad-fb51684dfc89"))
/* interface */ _IBoltHoleCircleAuto;
enum HandleType;
struct __declspec(uuid("48dcb1f1-1896-4ba7-8380-9a59ba2a8cdb"))
/* dispinterface */ Connectors;
struct __declspec(uuid("d34be97b-22d4-4978-8ccc-e01d224256bd"))
/* interface */ _IConnectorsAuto;
struct __declspec(uuid("9c470e2f-5274-4b46-8d2a-5deb082d8cfc"))
/* dispinterface */ Connector;
struct __declspec(uuid("85fb6108-6777-472d-b3e2-1796702a7265"))
/* interface */ _IConnectorAuto;
enum ConnectorTypeConstants;
struct __declspec(uuid("c1430b85-ce5d-11ce-9472-0800361c0602"))
/* dispinterface */ Groups;
struct __declspec(uuid("c1430b84-ce5d-11ce-9472-0800361c0602"))
/* interface */ _IGroupsAuto;
struct __declspec(uuid("c1430b82-ce5d-11ce-9472-0800361c0602"))
/* dispinterface */ Group;
enum LayoutElementTypeConstants;
struct __declspec(uuid("a294acc6-83e3-11d3-b018-00c04f79bea1"))
/* interface */ _IGroupStyleAuto;
struct __declspec(uuid("29ac15a0-31d7-11ce-93f4-080036373002"))
/* interface */ _IDimensionStylesAuto;
struct __declspec(uuid("b3cec7e9-34a4-11cf-848f-080036373002"))
/* interface */ _IFeatureControlFrameDataSetsAuto;
struct __declspec(uuid("b3cec7f1-34a4-11cf-848f-080036373002"))
/* interface */ _IWeldSymbolDataSetsAuto;
struct __declspec(uuid("b3cec7ea-34a4-11cf-848f-080036373002"))
/* interface */ _ISurfaceFinishSymbolDataSetsAuto;
struct __declspec(uuid("d1a617b0-3953-11ce-bb8e-08003601bb4e"))
/* interface */ _IFrameAuto;
enum FrameShapeConstants;
struct __declspec(uuid("cf0b6980-39ee-11ce-bb8e-08003601bb4e"))
/* interface */ _ISmartFrame2dDefaultsAuto;
enum UpdateOptionConstants;
struct __declspec(uuid("f4f646e0-7c23-11ce-a80e-08003601dada"))
/* interface */ _ISmartFrame2dAuto;
struct __declspec(uuid("e1b49e10-3953-11ce-bb8e-08003601bb4e"))
/* dispinterface */ Frame;
struct __declspec(uuid("0d6dd130-37ad-11ce-bb8e-08003601bb4e"))
/* dispinterface */ SmartFrame2dStyle;
struct __declspec(uuid("fa81d0d0-37ac-11ce-bb8e-08003601bb4e"))
/* interface */ _ISmartFrame2dStyleAuto;
struct __declspec(uuid("de812120-39ee-11ce-bb8e-08003601bb4e"))
/* dispinterface */ SmartFrame2dDefaults;
enum PlacementMethodConstants;
enum SizeModeConstants;
enum DisplayTypeConstants;
struct __declspec(uuid("e8be6f90-7c24-11ce-a80e-08003601dada"))
/* interface */ _ISmartFrames2dAuto;
struct __declspec(uuid("3c315550-7c28-11ce-a80e-08003601dada"))
/* dispinterface */ SmartFrame2d;
struct __declspec(uuid("cb525fa0-37ac-11ce-bb8e-08003601bb4e"))
/* interface */ _ISmartFrame2dStylesAuto;
struct __declspec(uuid("8d842ba1-e9f0-11ce-9dfd-08003601e012"))
/* interface */ _IVFSetAuto;
struct __declspec(uuid("e52d3d25-4df9-11d2-a478-080036ecf202"))
/* interface */ _IRectangularPattern2dAuto;
enum StaggerTypeConstants;
enum PatternOffsetTypeConstants;
struct __declspec(uuid("e52d3d27-4df9-11d2-a478-080036ecf202"))
/* interface */ _IRectangularPatterns2dAuto;
struct __declspec(uuid("7f943b1a-4eb5-11d2-a479-080036ecf202"))
/* dispinterface */ RectangularPattern2d;
struct __declspec(uuid("7f943b17-4eb5-11d2-a479-080036ecf202"))
/* interface */ _ICircularPattern2dAuto;
struct __declspec(uuid("7f943b15-4eb5-11d2-a479-080036ecf202"))
/* interface */ _ICircularPatterns2dAuto;
struct __declspec(uuid("7f943b1c-4eb5-11d2-a479-080036ecf202"))
/* dispinterface */ CircularPattern2d;
struct __declspec(uuid("fb1c412f-146d-4622-a78e-0e16f837c7bf"))
/* interface */ _IImage2dAuto;
struct __declspec(uuid("fe4ae384-0ad7-42fc-9558-d84d16785227"))
/* interface */ _IImages2dAuto;
struct __declspec(uuid("e854d8e3-d4da-4d87-a1e8-e1e2d98526eb"))
/* dispinterface */ Image2d;
struct __declspec(uuid("cde7b4af-ffb5-4a92-983d-dd4b22b6ff12"))
/* interface */ _IComponentImage2dAuto;
struct __declspec(uuid("4a0696e7-9834-46e1-870e-e3e0d6bf3fec"))
/* interface */ _IComponentImages2dAuto;
struct __declspec(uuid("c1fd7afa-3e80-40c0-9500-8353ee551dd2"))
/* dispinterface */ ComponentImage2d;
enum ComponentImageCreationModeConstants;
struct __declspec(uuid("1077a3cc-af95-41f8-b36e-ffb2200df3bb"))
/* interface */ _IAreaPropertiesAuto;
struct __declspec(uuid("41eed004-4aba-454a-a0f8-d42a83eac34f"))
/* interface */ _IAreaPropertiesCollectionAuto;
struct __declspec(uuid("29331bfd-b0f6-4648-b0b6-31a1ea34ef89"))
/* dispinterface */ AreaProperties;
struct __declspec(uuid("9f3867b6-b438-42d6-aaaa-3b4f04c37c04"))
/* interface */ _IPMIAuto;
struct __declspec(uuid("5ebc8f67-ea49-4015-927e-3e4596774a79"))
/* interface */ _IGostWeldSymbolAuto;
enum DimGostWeldPermanentJointTypeConstants;
enum DimGostWeldTerminatorTypeConstants;
struct __declspec(uuid("da6e00b5-56cc-40b5-aff2-c9717f1649a3"))
/* interface */ _IGostWeldSymbolsAuto;
struct __declspec(uuid("1d0f4998-d931-45a9-9f9c-bd18ebcd8d27"))
/* dispinterface */ GostWeldSymbol;
struct __declspec(uuid("5ebc8f23-ea49-4015-927e-3e4596774a79"))
/* interface */ _ISymbolicPMIAuto;
struct __declspec(uuid("da6e00b3-56cc-40b5-aff2-c9717f1649a3"))
/* interface */ _ISymbolicPMIGroupAuto;
struct __declspec(uuid("1cb73369-a62a-11ce-b05b-08003601dd4b"))
/* dispinterface */ Relations2d;
struct __declspec(uuid("0ad0e8a3-9cf6-11ce-8d65-08003601bb4e"))
/* dispinterface */ BackDrop;
struct __declspec(uuid("be6feaf2-19f0-11cf-9947-08003601b103"))
/* dispinterface */ GroupStyle;
struct __declspec(uuid("ea07bc80-31d6-11ce-93f4-080036373002"))
/* dispinterface */ DimensionStyles;
struct __declspec(uuid("bd37a85d-c0f1-4a6f-813e-637808e64bd9"))
/* dispinterface */ DrawingViewStyle;
struct __declspec(uuid("952bbd2b-ca79-44be-b7d7-c6a3879f7fa1"))
/* interface */ _IDrawingViewStyleAuto;
enum DrawingViewCaptionTypeConstants;
enum DrawingViewAnnotationTypeConstants;
enum DrawingViewCaptionTextAlignment;
enum DrawingViewStyleSheetNumberLocationConstants;
enum CuttingPlaneLineDisplayStyleConstants;
struct __declspec(uuid("7ebc92e6-1f97-4c0c-9ec5-cade8ff85290"))
/* dispinterface */ DrawingViewStyles;
struct __declspec(uuid("f260967e-584c-4b64-8a9b-93c41f89e15a"))
/* interface */ _IDrawingViewStylesAuto;
struct __declspec(uuid("b3cec7ee-34a4-11cf-848f-080036373002"))
/* dispinterface */ FeatureControlFrameDataSets;
struct __declspec(uuid("b3cec7f0-34a4-11cf-848f-080036373002"))
/* dispinterface */ WeldSymbolDataSets;
struct __declspec(uuid("b3cec7ef-34a4-11cf-848f-080036373002"))
/* dispinterface */ SurfaceFinishSymbolDataSets;
struct __declspec(uuid("4edeaf00-7c28-11ce-a80e-08003601dada"))
/* dispinterface */ SmartFrames2d;
struct __declspec(uuid("e1c88630-37ac-11ce-bb8e-08003601bb4e"))
/* dispinterface */ SmartFrame2dStyles;
struct __declspec(uuid("8d842ba2-e9f0-11ce-9dfd-08003601e012"))
/* dispinterface */ VFSet;
struct __declspec(uuid("bc9f13a1-5702-4102-85ce-060ab77642c0"))
/* dispinterface */ AnnotAlignmentShape;
struct __declspec(uuid("43400792-9c6b-44d5-8aa9-c69a1e25010e"))
/* interface */ _IAnnotAlignmentShapeAuto;
enum DimItemNumDirConstants;
struct __declspec(uuid("f07f9ba5-dcdb-463d-92d3-259778e7734e"))
/* dispinterface */ AnnotAlignmentShapes;
struct __declspec(uuid("0a531efa-8663-48c1-92ad-103b32f66d28"))
/* interface */ _IAnnotAlignmentShapesAuto;
struct __declspec(uuid("a627e691-8d0c-4583-96b2-05e883f3dda7"))
/* dispinterface */ TechnicalRequirement;
struct __declspec(uuid("8238ceae-a19c-4efd-91e3-e120dd090a65"))
/* interface */ _ITechnicalRequirementAuto;
struct __declspec(uuid("207de73e-967e-489d-904e-64eddd8d1d1f"))
/* dispinterface */ TechnicalRequirements;
struct __declspec(uuid("9f5e46e5-363c-4336-ba0b-842fad5adfb0"))
/* interface */ _ITechnicalRequirementsAuto;
struct __declspec(uuid("69548f7b-81ff-434c-8a6b-58f5967491b8"))
/* dispinterface */ PMIModelViews;
struct __declspec(uuid("11f657fd-847a-4c91-8ed8-ea934fb11b69"))
/* interface */ _IPMIModelViewsAuto;
struct __declspec(uuid("14fc1a6e-80bc-49fa-8b69-b2021b224327"))
/* dispinterface */ PMIModelView;
struct __declspec(uuid("19282a63-3382-41a6-a63d-44896175d7c9"))
/* interface */ _IPMIModelViewAuto;
enum PMIRenderModeConstants;
enum PMIModelViewStandardOrientationConstants;
struct __declspec(uuid("7f943b1b-4eb5-11d2-a479-080036ecf202"))
/* dispinterface */ RectangularPatterns2d;
struct __declspec(uuid("7f943b1d-4eb5-11d2-a479-080036ecf202"))
/* dispinterface */ CircularPatterns2d;
struct __declspec(uuid("a60552c7-6df6-4383-a86a-962215700b28"))
/* dispinterface */ Images2d;
struct __declspec(uuid("d03f8c5e-2688-4d4e-bfc0-7a9d2e241c08"))
/* dispinterface */ ComponentImages2d;
struct __declspec(uuid("3028fb09-dc90-43e3-a533-ea6b07c0b557"))
/* dispinterface */ AreaPropertiesCollection;
struct __declspec(uuid("5d187e80-7676-402a-ba0e-5e335a191541"))
/* dispinterface */ PMI;
struct __declspec(uuid("1d0f4888-d931-45a9-9f9c-bd18ebcd8d27"))
/* dispinterface */ SymbolicPMI;
struct __declspec(uuid("82fa3333-215a-4b78-97be-072efe7c14be"))
/* dispinterface */ SymbolicPMIGroup;
struct __declspec(uuid("82fa3d95-215a-4b78-97be-072efe7c14be"))
/* dispinterface */ GostWeldSymbols;
struct __declspec(uuid("dbf79d2d-2501-498c-a16a-c05df0cd4d38"))
/* dispinterface */ TableStyle;
struct __declspec(uuid("d96a47f2-0ffe-4e61-840c-211e0856e53c"))
/* interface */ _ITableStyleAuto;
enum TableStyleLineTypeConstants;
struct __declspec(uuid("677e1d05-a823-489f-a329-2cbf77cd3ca5"))
/* dispinterface */ TableStyles;
struct __declspec(uuid("6e79cecb-5eaf-4740-ba9b-9e5f1ca93b6b"))
/* interface */ _ITableStylesAuto;
struct __declspec(uuid("44c165a7-cac7-40d9-83ac-f8e7ad0d0b9d"))
/* dispinterface */ Conic2d;
struct __declspec(uuid("a2e52a76-bd0d-4ebe-9c06-3413abd23aed"))
/* interface */ _IConic2dAuto;
struct __declspec(uuid("0db65788-1a71-43ea-8867-8b18b8ff7909"))
/* dispinterface */ Conics2d;
struct __declspec(uuid("66ab0bce-da30-4d8f-af34-f08c5bf03b69"))
/* interface */ _IConics2dAuto;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(_IRelation2dAuto, __uuidof(_IRelation2dAuto));
_COM_SMARTPTR_TYPEDEF(Relation2d, __uuidof(Relation2d));
_COM_SMARTPTR_TYPEDEF(_IRelations2dAuto, __uuidof(_IRelations2dAuto));
_COM_SMARTPTR_TYPEDEF(_IBackDropAuto, __uuidof(_IBackDropAuto));
_COM_SMARTPTR_TYPEDEF(_IDrawingObjectsAuto, __uuidof(_IDrawingObjectsAuto));
_COM_SMARTPTR_TYPEDEF(Dimensions, __uuidof(Dimensions));
_COM_SMARTPTR_TYPEDEF(Dimension, __uuidof(Dimension));
_COM_SMARTPTR_TYPEDEF(DimStyle, __uuidof(DimStyle));
_COM_SMARTPTR_TYPEDEF(_IDimStyleAuto, __uuidof(_IDimStyleAuto));
_COM_SMARTPTR_TYPEDEF(DisplayData, __uuidof(DisplayData));
_COM_SMARTPTR_TYPEDEF(_IDisplayDataAuto, __uuidof(_IDisplayDataAuto));
_COM_SMARTPTR_TYPEDEF(_IDimensionAuto, __uuidof(_IDimensionAuto));
_COM_SMARTPTR_TYPEDEF(DimensionStyle, __uuidof(DimensionStyle));
_COM_SMARTPTR_TYPEDEF(_IDimensionStyleAuto, __uuidof(_IDimensionStyleAuto));
_COM_SMARTPTR_TYPEDEF(DimInitData, __uuidof(DimInitData));
_COM_SMARTPTR_TYPEDEF(_IDimensionsAuto, __uuidof(_IDimensionsAuto));
_COM_SMARTPTR_TYPEDEF(_IDimInitDataAuto, __uuidof(_IDimInitDataAuto));
_COM_SMARTPTR_TYPEDEF(Leaders, __uuidof(Leaders));
_COM_SMARTPTR_TYPEDEF(Leader, __uuidof(Leader));
_COM_SMARTPTR_TYPEDEF(_ILeaderAuto, __uuidof(_ILeaderAuto));
_COM_SMARTPTR_TYPEDEF(AnnotInitData, __uuidof(AnnotInitData));
_COM_SMARTPTR_TYPEDEF(_ILeadersAuto, __uuidof(_ILeadersAuto));
_COM_SMARTPTR_TYPEDEF(_IAnnotInitDataAuto, __uuidof(_IAnnotInitDataAuto));
_COM_SMARTPTR_TYPEDEF(Balloons, __uuidof(Balloons));
_COM_SMARTPTR_TYPEDEF(Balloon, __uuidof(Balloon));
_COM_SMARTPTR_TYPEDEF(_IBalloonsAuto, __uuidof(_IBalloonsAuto));
_COM_SMARTPTR_TYPEDEF(_IBalloonAuto, __uuidof(_IBalloonAuto));
_COM_SMARTPTR_TYPEDEF(Lines2d, __uuidof(Lines2d));
_COM_SMARTPTR_TYPEDEF(Line2d, __uuidof(Line2d));
_COM_SMARTPTR_TYPEDEF(_ILines2dAuto, __uuidof(_ILines2dAuto));
_COM_SMARTPTR_TYPEDEF(GeometryStyle2d, __uuidof(GeometryStyle2d));
_COM_SMARTPTR_TYPEDEF(_IGeometryStyle2dAuto, __uuidof(_IGeometryStyle2dAuto));
_COM_SMARTPTR_TYPEDEF(Relationships2d, __uuidof(Relationships2d));
_COM_SMARTPTR_TYPEDEF(_IRelationships2dAuto, __uuidof(_IRelationships2dAuto));
_COM_SMARTPTR_TYPEDEF(ChamferGeometry2d, __uuidof(ChamferGeometry2d));
_COM_SMARTPTR_TYPEDEF(_ILine2dAuto, __uuidof(_ILine2dAuto));
_COM_SMARTPTR_TYPEDEF(_IChamferGeometry2dAuto, __uuidof(_IChamferGeometry2dAuto));
_COM_SMARTPTR_TYPEDEF(Circles2d, __uuidof(Circles2d));
_COM_SMARTPTR_TYPEDEF(Circle2d, __uuidof(Circle2d));
_COM_SMARTPTR_TYPEDEF(_ICircles2dAuto, __uuidof(_ICircles2dAuto));
_COM_SMARTPTR_TYPEDEF(_ICircle2dAuto, __uuidof(_ICircle2dAuto));
_COM_SMARTPTR_TYPEDEF(Arcs2d, __uuidof(Arcs2d));
_COM_SMARTPTR_TYPEDEF(Arc2d, __uuidof(Arc2d));
_COM_SMARTPTR_TYPEDEF(_IArcs2dAuto, __uuidof(_IArcs2dAuto));
_COM_SMARTPTR_TYPEDEF(FilletGeometry2d, __uuidof(FilletGeometry2d));
_COM_SMARTPTR_TYPEDEF(_IFilletGeom2dAuto, __uuidof(_IFilletGeom2dAuto));
_COM_SMARTPTR_TYPEDEF(_IArc2dAuto, __uuidof(_IArc2dAuto));
_COM_SMARTPTR_TYPEDEF(Ellipses2d, __uuidof(Ellipses2d));
_COM_SMARTPTR_TYPEDEF(Ellipse2d, __uuidof(Ellipse2d));
_COM_SMARTPTR_TYPEDEF(_IEllipses2dAuto, __uuidof(_IEllipses2dAuto));
_COM_SMARTPTR_TYPEDEF(_IEllipse2dAuto, __uuidof(_IEllipse2dAuto));
_COM_SMARTPTR_TYPEDEF(BSplineCurves2d, __uuidof(BSplineCurves2d));
_COM_SMARTPTR_TYPEDEF(BSplineCurve2d, __uuidof(BSplineCurve2d));
_COM_SMARTPTR_TYPEDEF(_IBspCurves2dAuto, __uuidof(_IBspCurves2dAuto));
_COM_SMARTPTR_TYPEDEF(_IBspCurve2dAuto, __uuidof(_IBspCurve2dAuto));
_COM_SMARTPTR_TYPEDEF(Points2d, __uuidof(Points2d));
_COM_SMARTPTR_TYPEDEF(Point2d, __uuidof(Point2d));
_COM_SMARTPTR_TYPEDEF(_IPoints2dAuto, __uuidof(_IPoints2dAuto));
_COM_SMARTPTR_TYPEDEF(_IPoint2dAuto, __uuidof(_IPoint2dAuto));
_COM_SMARTPTR_TYPEDEF(EllipticalArcs2d, __uuidof(EllipticalArcs2d));
_COM_SMARTPTR_TYPEDEF(EllipticalArc2d, __uuidof(EllipticalArc2d));
_COM_SMARTPTR_TYPEDEF(_IEllipArcs2dAuto, __uuidof(_IEllipArcs2dAuto));
_COM_SMARTPTR_TYPEDEF(_IEllipArc2dAuto, __uuidof(_IEllipArc2dAuto));
_COM_SMARTPTR_TYPEDEF(Curves2d, __uuidof(Curves2d));
_COM_SMARTPTR_TYPEDEF(Curve2d, __uuidof(Curve2d));
_COM_SMARTPTR_TYPEDEF(_ICurves2dAuto, __uuidof(_ICurves2dAuto));
_COM_SMARTPTR_TYPEDEF(_ICurve2dAuto, __uuidof(_ICurve2dAuto));
_COM_SMARTPTR_TYPEDEF(LineStrings2d, __uuidof(LineStrings2d));
_COM_SMARTPTR_TYPEDEF(LineString2d, __uuidof(LineString2d));
_COM_SMARTPTR_TYPEDEF(_ILineStrings2dAuto, __uuidof(_ILineStrings2dAuto));
_COM_SMARTPTR_TYPEDEF(_ILineString2dAuto, __uuidof(_ILineString2dAuto));
_COM_SMARTPTR_TYPEDEF(ComplexStrings2d, __uuidof(ComplexStrings2d));
_COM_SMARTPTR_TYPEDEF(ComplexString2d, __uuidof(ComplexString2d));
_COM_SMARTPTR_TYPEDEF(_IComplexStrings2dAuto, __uuidof(_IComplexStrings2dAuto));
_COM_SMARTPTR_TYPEDEF(DrawingObjects, __uuidof(DrawingObjects));
_COM_SMARTPTR_TYPEDEF(_IComplexString2dAuto, __uuidof(_IComplexString2dAuto));
_COM_SMARTPTR_TYPEDEF(Boundaries2d, __uuidof(Boundaries2d));
_COM_SMARTPTR_TYPEDEF(Boundary2d, __uuidof(Boundary2d));
_COM_SMARTPTR_TYPEDEF(_IBoundaries2dAuto, __uuidof(_IBoundaries2dAuto));
_COM_SMARTPTR_TYPEDEF(BoundaryStyle2d, __uuidof(BoundaryStyle2d));
_COM_SMARTPTR_TYPEDEF(_IBoundaryStyle2dAuto, __uuidof(_IBoundaryStyle2dAuto));
_COM_SMARTPTR_TYPEDEF(BoundingObjects2d, __uuidof(BoundingObjects2d));
_COM_SMARTPTR_TYPEDEF(_IBoundingObjects2dAuto, __uuidof(_IBoundingObjects2dAuto));
_COM_SMARTPTR_TYPEDEF(_IBoundary2dAuto, __uuidof(_IBoundary2dAuto));
_COM_SMARTPTR_TYPEDEF(TextBoxes, __uuidof(TextBoxes));
_COM_SMARTPTR_TYPEDEF(TextBox, __uuidof(TextBox));
_COM_SMARTPTR_TYPEDEF(_ITextBoxesAuto, __uuidof(_ITextBoxesAuto));
_COM_SMARTPTR_TYPEDEF(TextEdit, __uuidof(TextEdit));
_COM_SMARTPTR_TYPEDEF(_ITextEditAuto, __uuidof(_ITextEditAuto));
_COM_SMARTPTR_TYPEDEF(_ITextBoxAuto, __uuidof(_ITextBoxAuto));
_COM_SMARTPTR_TYPEDEF(TextProfiles, __uuidof(TextProfiles));
_COM_SMARTPTR_TYPEDEF(TextProfile, __uuidof(TextProfile));
_COM_SMARTPTR_TYPEDEF(_ITextProfilesAuto, __uuidof(_ITextProfilesAuto));
_COM_SMARTPTR_TYPEDEF(_ITextProfileAuto, __uuidof(_ITextProfileAuto));
_COM_SMARTPTR_TYPEDEF(DatumFrames, __uuidof(DatumFrames));
_COM_SMARTPTR_TYPEDEF(DatumFrame, __uuidof(DatumFrame));
_COM_SMARTPTR_TYPEDEF(_IDatumFramesAuto, __uuidof(_IDatumFramesAuto));
_COM_SMARTPTR_TYPEDEF(_IDatumFrameAuto, __uuidof(_IDatumFrameAuto));
_COM_SMARTPTR_TYPEDEF(FeatureControlFrames, __uuidof(FeatureControlFrames));
_COM_SMARTPTR_TYPEDEF(FeatureControlFrame, __uuidof(FeatureControlFrame));
_COM_SMARTPTR_TYPEDEF(_IFeatureControlFrameAuto, __uuidof(_IFeatureControlFrameAuto));
_COM_SMARTPTR_TYPEDEF(FeatureControlFrameDataSet, __uuidof(FeatureControlFrameDataSet));
_COM_SMARTPTR_TYPEDEF(_IFeatureControlFramesAuto, __uuidof(_IFeatureControlFramesAuto));
_COM_SMARTPTR_TYPEDEF(_IFeatureControlFrameDataSetAuto, __uuidof(_IFeatureControlFrameDataSetAuto));
_COM_SMARTPTR_TYPEDEF(SurfaceFinishSymbols, __uuidof(SurfaceFinishSymbols));
_COM_SMARTPTR_TYPEDEF(SurfaceFinishSymbol, __uuidof(SurfaceFinishSymbol));
_COM_SMARTPTR_TYPEDEF(_ISurfaceFinishSymbolAuto, __uuidof(_ISurfaceFinishSymbolAuto));
_COM_SMARTPTR_TYPEDEF(SurfaceFinishSymbolDataSet, __uuidof(SurfaceFinishSymbolDataSet));
_COM_SMARTPTR_TYPEDEF(_ISurfaceFinishSymbolsAuto, __uuidof(_ISurfaceFinishSymbolsAuto));
_COM_SMARTPTR_TYPEDEF(_ISurfaceFinishSymbolDataSetAuto, __uuidof(_ISurfaceFinishSymbolDataSetAuto));
_COM_SMARTPTR_TYPEDEF(WeldSymbols, __uuidof(WeldSymbols));
_COM_SMARTPTR_TYPEDEF(WeldSymbol, __uuidof(WeldSymbol));
_COM_SMARTPTR_TYPEDEF(_IWeldSymbolAuto, __uuidof(_IWeldSymbolAuto));
_COM_SMARTPTR_TYPEDEF(WeldSymbolDataSet, __uuidof(WeldSymbolDataSet));
_COM_SMARTPTR_TYPEDEF(_IWeldSymbolsAuto, __uuidof(_IWeldSymbolsAuto));
_COM_SMARTPTR_TYPEDEF(_IWeldSymbolDataSetAuto, __uuidof(_IWeldSymbolDataSetAuto));
_COM_SMARTPTR_TYPEDEF(CenterMarks, __uuidof(CenterMarks));
_COM_SMARTPTR_TYPEDEF(CenterMark, __uuidof(CenterMark));
_COM_SMARTPTR_TYPEDEF(_ICenterMarksAuto, __uuidof(_ICenterMarksAuto));
_COM_SMARTPTR_TYPEDEF(_ICenterMarkAuto, __uuidof(_ICenterMarkAuto));
_COM_SMARTPTR_TYPEDEF(CenterLines, __uuidof(CenterLines));
_COM_SMARTPTR_TYPEDEF(CenterLine, __uuidof(CenterLine));
_COM_SMARTPTR_TYPEDEF(_ICenterLinesAuto, __uuidof(_ICenterLinesAuto));
_COM_SMARTPTR_TYPEDEF(_ICenterLineAuto, __uuidof(_ICenterLineAuto));
_COM_SMARTPTR_TYPEDEF(DatumTargets, __uuidof(DatumTargets));
_COM_SMARTPTR_TYPEDEF(DatumTarget, __uuidof(DatumTarget));
_COM_SMARTPTR_TYPEDEF(_IDatumTargetsAuto, __uuidof(_IDatumTargetsAuto));
_COM_SMARTPTR_TYPEDEF(_IDatumTargetAuto, __uuidof(_IDatumTargetAuto));
_COM_SMARTPTR_TYPEDEF(PinSymbols, __uuidof(PinSymbols));
_COM_SMARTPTR_TYPEDEF(PinSymbol, __uuidof(PinSymbol));
_COM_SMARTPTR_TYPEDEF(_IPinSymbolsAuto, __uuidof(_IPinSymbolsAuto));
_COM_SMARTPTR_TYPEDEF(_IPinSymbolAuto, __uuidof(_IPinSymbolAuto));
_COM_SMARTPTR_TYPEDEF(DatumPoints, __uuidof(DatumPoints));
_COM_SMARTPTR_TYPEDEF(DatumPoint, __uuidof(DatumPoint));
_COM_SMARTPTR_TYPEDEF(_IDatumPointsAuto, __uuidof(_IDatumPointsAuto));
_COM_SMARTPTR_TYPEDEF(_IDatumPointAuto, __uuidof(_IDatumPointAuto));
_COM_SMARTPTR_TYPEDEF(CornerAnnotations, __uuidof(CornerAnnotations));
_COM_SMARTPTR_TYPEDEF(CornerAnnotation, __uuidof(CornerAnnotation));
_COM_SMARTPTR_TYPEDEF(_ICornerAnnotationsAuto, __uuidof(_ICornerAnnotationsAuto));
_COM_SMARTPTR_TYPEDEF(_ICornerAnnotationAuto, __uuidof(_ICornerAnnotationAuto));
_COM_SMARTPTR_TYPEDEF(BoltHoleCircles, __uuidof(BoltHoleCircles));
_COM_SMARTPTR_TYPEDEF(BoltHoleCircle, __uuidof(BoltHoleCircle));
_COM_SMARTPTR_TYPEDEF(_IBoltHoleCirclesAuto, __uuidof(_IBoltHoleCirclesAuto));
_COM_SMARTPTR_TYPEDEF(_IBoltHoleCircleAuto, __uuidof(_IBoltHoleCircleAuto));
_COM_SMARTPTR_TYPEDEF(Connectors, __uuidof(Connectors));
_COM_SMARTPTR_TYPEDEF(Connector, __uuidof(Connector));
_COM_SMARTPTR_TYPEDEF(_IConnectorsAuto, __uuidof(_IConnectorsAuto));
_COM_SMARTPTR_TYPEDEF(_IConnectorAuto, __uuidof(_IConnectorAuto));
_COM_SMARTPTR_TYPEDEF(Groups, __uuidof(Groups));
_COM_SMARTPTR_TYPEDEF(Group, __uuidof(Group));
_COM_SMARTPTR_TYPEDEF(_IGroupsAuto, __uuidof(_IGroupsAuto));
_COM_SMARTPTR_TYPEDEF(_IGroupAuto, __uuidof(_IGroupAuto));
_COM_SMARTPTR_TYPEDEF(_IGroupStyleAuto, __uuidof(_IGroupStyleAuto));
_COM_SMARTPTR_TYPEDEF(_IDimensionStylesAuto, __uuidof(_IDimensionStylesAuto));
_COM_SMARTPTR_TYPEDEF(_IFeatureControlFrameDataSetsAuto, __uuidof(_IFeatureControlFrameDataSetsAuto));
_COM_SMARTPTR_TYPEDEF(_IWeldSymbolDataSetsAuto, __uuidof(_IWeldSymbolDataSetsAuto));
_COM_SMARTPTR_TYPEDEF(_ISurfaceFinishSymbolDataSetsAuto, __uuidof(_ISurfaceFinishSymbolDataSetsAuto));
_COM_SMARTPTR_TYPEDEF(_IFrameAuto, __uuidof(_IFrameAuto));
_COM_SMARTPTR_TYPEDEF(_ISmartFrame2dDefaultsAuto, __uuidof(_ISmartFrame2dDefaultsAuto));
_COM_SMARTPTR_TYPEDEF(Frame, __uuidof(Frame));
_COM_SMARTPTR_TYPEDEF(SmartFrame2dStyle, __uuidof(SmartFrame2dStyle));
_COM_SMARTPTR_TYPEDEF(SmartFrame2dDefaults, __uuidof(SmartFrame2dDefaults));
_COM_SMARTPTR_TYPEDEF(_ISmartFrame2dStyleAuto, __uuidof(_ISmartFrame2dStyleAuto));
_COM_SMARTPTR_TYPEDEF(_ISmartFrame2dAuto, __uuidof(_ISmartFrame2dAuto));
_COM_SMARTPTR_TYPEDEF(SmartFrame2d, __uuidof(SmartFrame2d));
_COM_SMARTPTR_TYPEDEF(_ISmartFrames2dAuto, __uuidof(_ISmartFrames2dAuto));
_COM_SMARTPTR_TYPEDEF(_ISmartFrame2dStylesAuto, __uuidof(_ISmartFrame2dStylesAuto));
_COM_SMARTPTR_TYPEDEF(_IVFSetAuto, __uuidof(_IVFSetAuto));
_COM_SMARTPTR_TYPEDEF(_IRectangularPattern2dAuto, __uuidof(_IRectangularPattern2dAuto));
_COM_SMARTPTR_TYPEDEF(RectangularPattern2d, __uuidof(RectangularPattern2d));
_COM_SMARTPTR_TYPEDEF(_IRectangularPatterns2dAuto, __uuidof(_IRectangularPatterns2dAuto));
_COM_SMARTPTR_TYPEDEF(_ICircularPattern2dAuto, __uuidof(_ICircularPattern2dAuto));
_COM_SMARTPTR_TYPEDEF(CircularPattern2d, __uuidof(CircularPattern2d));
_COM_SMARTPTR_TYPEDEF(_ICircularPatterns2dAuto, __uuidof(_ICircularPatterns2dAuto));
_COM_SMARTPTR_TYPEDEF(_IImage2dAuto, __uuidof(_IImage2dAuto));
_COM_SMARTPTR_TYPEDEF(Image2d, __uuidof(Image2d));
_COM_SMARTPTR_TYPEDEF(_IImages2dAuto, __uuidof(_IImages2dAuto));
_COM_SMARTPTR_TYPEDEF(_IComponentImage2dAuto, __uuidof(_IComponentImage2dAuto));
_COM_SMARTPTR_TYPEDEF(ComponentImage2d, __uuidof(ComponentImage2d));
_COM_SMARTPTR_TYPEDEF(_IComponentImages2dAuto, __uuidof(_IComponentImages2dAuto));
_COM_SMARTPTR_TYPEDEF(_IAreaPropertiesAuto, __uuidof(_IAreaPropertiesAuto));
_COM_SMARTPTR_TYPEDEF(AreaProperties, __uuidof(AreaProperties));
_COM_SMARTPTR_TYPEDEF(_IAreaPropertiesCollectionAuto, __uuidof(_IAreaPropertiesCollectionAuto));
_COM_SMARTPTR_TYPEDEF(_IPMIAuto, __uuidof(_IPMIAuto));
_COM_SMARTPTR_TYPEDEF(_IGostWeldSymbolAuto, __uuidof(_IGostWeldSymbolAuto));
_COM_SMARTPTR_TYPEDEF(GostWeldSymbol, __uuidof(GostWeldSymbol));
_COM_SMARTPTR_TYPEDEF(_IGostWeldSymbolsAuto, __uuidof(_IGostWeldSymbolsAuto));
_COM_SMARTPTR_TYPEDEF(_ISymbolicPMIAuto, __uuidof(_ISymbolicPMIAuto));
_COM_SMARTPTR_TYPEDEF(_ISymbolicPMIGroupAuto, __uuidof(_ISymbolicPMIGroupAuto));
_COM_SMARTPTR_TYPEDEF(Relations2d, __uuidof(Relations2d));
_COM_SMARTPTR_TYPEDEF(BackDrop, __uuidof(BackDrop));
_COM_SMARTPTR_TYPEDEF(GroupStyle, __uuidof(GroupStyle));
_COM_SMARTPTR_TYPEDEF(DimensionStyles, __uuidof(DimensionStyles));
_COM_SMARTPTR_TYPEDEF(DrawingViewStyle, __uuidof(DrawingViewStyle));
_COM_SMARTPTR_TYPEDEF(_IDrawingViewStyleAuto, __uuidof(_IDrawingViewStyleAuto));
_COM_SMARTPTR_TYPEDEF(DrawingViewStyles, __uuidof(DrawingViewStyles));
_COM_SMARTPTR_TYPEDEF(_IDrawingViewStylesAuto, __uuidof(_IDrawingViewStylesAuto));
_COM_SMARTPTR_TYPEDEF(FeatureControlFrameDataSets, __uuidof(FeatureControlFrameDataSets));
_COM_SMARTPTR_TYPEDEF(WeldSymbolDataSets, __uuidof(WeldSymbolDataSets));
_COM_SMARTPTR_TYPEDEF(SurfaceFinishSymbolDataSets, __uuidof(SurfaceFinishSymbolDataSets));
_COM_SMARTPTR_TYPEDEF(SmartFrames2d, __uuidof(SmartFrames2d));
_COM_SMARTPTR_TYPEDEF(SmartFrame2dStyles, __uuidof(SmartFrame2dStyles));
_COM_SMARTPTR_TYPEDEF(VFSet, __uuidof(VFSet));
_COM_SMARTPTR_TYPEDEF(AnnotAlignmentShape, __uuidof(AnnotAlignmentShape));
_COM_SMARTPTR_TYPEDEF(_IAnnotAlignmentShapeAuto, __uuidof(_IAnnotAlignmentShapeAuto));
_COM_SMARTPTR_TYPEDEF(AnnotAlignmentShapes, __uuidof(AnnotAlignmentShapes));
_COM_SMARTPTR_TYPEDEF(_IAnnotAlignmentShapesAuto, __uuidof(_IAnnotAlignmentShapesAuto));
_COM_SMARTPTR_TYPEDEF(TechnicalRequirement, __uuidof(TechnicalRequirement));
_COM_SMARTPTR_TYPEDEF(_ITechnicalRequirementAuto, __uuidof(_ITechnicalRequirementAuto));
_COM_SMARTPTR_TYPEDEF(TechnicalRequirements, __uuidof(TechnicalRequirements));
_COM_SMARTPTR_TYPEDEF(_ITechnicalRequirementsAuto, __uuidof(_ITechnicalRequirementsAuto));
_COM_SMARTPTR_TYPEDEF(PMIModelViews, __uuidof(PMIModelViews));
_COM_SMARTPTR_TYPEDEF(PMIModelView, __uuidof(PMIModelView));
_COM_SMARTPTR_TYPEDEF(_IPMIModelViewAuto, __uuidof(_IPMIModelViewAuto));
_COM_SMARTPTR_TYPEDEF(_IPMIModelViewsAuto, __uuidof(_IPMIModelViewsAuto));
_COM_SMARTPTR_TYPEDEF(RectangularPatterns2d, __uuidof(RectangularPatterns2d));
_COM_SMARTPTR_TYPEDEF(CircularPatterns2d, __uuidof(CircularPatterns2d));
_COM_SMARTPTR_TYPEDEF(Images2d, __uuidof(Images2d));
_COM_SMARTPTR_TYPEDEF(ComponentImages2d, __uuidof(ComponentImages2d));
_COM_SMARTPTR_TYPEDEF(AreaPropertiesCollection, __uuidof(AreaPropertiesCollection));
_COM_SMARTPTR_TYPEDEF(PMI, __uuidof(PMI));
_COM_SMARTPTR_TYPEDEF(SymbolicPMI, __uuidof(SymbolicPMI));
_COM_SMARTPTR_TYPEDEF(SymbolicPMIGroup, __uuidof(SymbolicPMIGroup));
_COM_SMARTPTR_TYPEDEF(GostWeldSymbols, __uuidof(GostWeldSymbols));
_COM_SMARTPTR_TYPEDEF(TableStyle, __uuidof(TableStyle));
_COM_SMARTPTR_TYPEDEF(_ITableStyleAuto, __uuidof(_ITableStyleAuto));
_COM_SMARTPTR_TYPEDEF(TableStyles, __uuidof(TableStyles));
_COM_SMARTPTR_TYPEDEF(_ITableStylesAuto, __uuidof(_ITableStylesAuto));
_COM_SMARTPTR_TYPEDEF(Conic2d, __uuidof(Conic2d));
_COM_SMARTPTR_TYPEDEF(_IConic2dAuto, __uuidof(_IConic2dAuto));
_COM_SMARTPTR_TYPEDEF(Conics2d, __uuidof(Conics2d));
_COM_SMARTPTR_TYPEDEF(_IConics2dAuto, __uuidof(_IConics2dAuto));

//
// Type library items
//

struct __declspec(uuid("1cb73366-a62a-11ce-b05b-08003601dd4b"))
_IRelation2dAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[][];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse,
        long Lcid = 0 );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Delete ( );
    HRESULT Select ( );
    HRESULT GetRelatedObjectCount (
        long * Count );
    HRESULT GetRelatedObject (
        long Index,
        IDispatch * * GraphicObject,
        long * Keypoint_Index );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[in]*/ VARIANT Recurse,
        /*[in,lcid]*/ long Lcid,
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * Type ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * ZOrder ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[in]*/ VARIANT Recurse,
        /*[out,retval]*/ BSTR * Key ) = 0;
      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ IDispatch * * Document ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall raw_GetRelatedObjectCount (
        /*[out]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_GetRelatedObject (
        /*[in]*/ long Index,
        /*[out]*/ IDispatch * * GraphicObject,
        /*[out]*/ long * Keypoint_Index ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
};

struct __declspec(uuid("1cb73367-a62a-11ce-b05b-08003601dd4b"))
Relation2d : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Delete ( );
    HRESULT Select ( );
    HRESULT GetRelatedObjectCount (
        long * Count );
    HRESULT GetRelatedObject (
        long Index,
        IDispatch * * GraphicObject,
        long * Keypoint_Index );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
};

struct __declspec(uuid("1cb73368-a62a-11ce-b05b-08003601dd4b"))
_IRelations2dAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    Relation2dPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    Relation2dPtr AddHorizontalAlign (
        IDispatch * Object1,
        long Index1,
        IDispatch * Object2,
        long Index2,
        const _variant_t & guaranteed_ok = vtMissing );
    Relation2dPtr AddVerticalAlign (
        IDispatch * Object1,
        long Index1,
        IDispatch * Object2,
        long Index2,
        const _variant_t & guaranteed_ok = vtMissing );
    Relation2dPtr AddConcentric (
        IDispatch * Object1,
        IDispatch * Object2,
        const _variant_t & guaranteed_ok = vtMissing );
    Relation2dPtr AddFix (
        IDispatch * Object,
        const _variant_t & guaranteed_ok = vtMissing );
    Relation2dPtr AddKeypointFix (
        IDispatch * Object,
        long Index,
        const _variant_t & guaranteed_ok = vtMissing );
    Relation2dPtr AddHorizontal (
        IDispatch * Object,
        const _variant_t & guaranteed_ok = vtMissing );
    Relation2dPtr AddVertical (
        IDispatch * Object,
        const _variant_t & guaranteed_ok = vtMissing );
    Relation2dPtr AddParallel (
        IDispatch * Object1,
        IDispatch * Object2,
        const _variant_t & guaranteed_ok = vtMissing );
    Relation2dPtr AddPerpendicular (
        IDispatch * Object1,
        IDispatch * Object2,
        const _variant_t & guaranteed_ok = vtMissing );
    Relation2dPtr AddTangent (
        IDispatch * Object1,
        IDispatch * Object2,
        const _variant_t & guaranteed_ok = vtMissing );
    Relation2dPtr AddEqualDirection (
        IDispatch * Object1,
        long Index1,
        IDispatch * Object2,
        long Index2,
        const _variant_t & guaranteed_ok = vtMissing );
    Relation2dPtr AddTangentEqualCurvature (
        IDispatch * Object1,
        long Index1,
        IDispatch * Object2,
        long Index2,
        const _variant_t & guaranteed_ok = vtMissing );
    Relation2dPtr AddEqualDirectionEqualCurvature (
        IDispatch * Object1,
        long Index1,
        IDispatch * Object2,
        long Index2,
        const _variant_t & guaranteed_ok = vtMissing );
    Relation2dPtr AddTangentBetweenCompoundCurves (
        long NumberElements1,
        SAFEARRAY * * Elements1,
        long NumberElements2,
        SAFEARRAY * * Elements2,
        const _variant_t & guaranteed_ok = vtMissing );
    Relation2dPtr AddIntersection (
        IDispatch * Object1,
        long Index,
        IDispatch * Object2,
        IDispatch * Object3,
        const _variant_t & guaranteed_ok = vtMissing );
    Relation2dPtr AddPointOn (
        IDispatch * Object1,
        long Index,
        IDispatch * Object2,
        const _variant_t & guaranteed_ok = vtMissing );
    Relation2dPtr AddPointOnCompoundCurve (
        IDispatch * Object1,
        long Index,
        long NumberElements,
        SAFEARRAY * * Elements,
        const _variant_t & guaranteed_ok = vtMissing );
    Relation2dPtr AddKeypoint (
        IDispatch * Object1,
        long Index1,
        IDispatch * Object2,
        long Index2,
        const _variant_t & guaranteed_ok = vtMissing );
    Relation2dPtr AddSymmetric (
        IDispatch * pLine,
        IDispatch * Object2,
        IDispatch * Object3,
        const _variant_t & guaranteed_ok = vtMissing );
    Relation2dPtr AddEqual (
        IDispatch * Object1,
        IDispatch * Object2,
        const _variant_t & guaranteed_ok = vtMissing );
    Relation2dPtr AddSet (
        long NumberElements,
        SAFEARRAY * * Elements );
    Relation2dPtr AddColinear (
        IDispatch * Object1,
        IDispatch * Object2,
        const _variant_t & guaranteed_ok = vtMissing );
    Relation2dPtr AddFillet (
        IDispatch * Object1,
        long Index1,
        IDispatch * Arc,
        long arc_index,
        IDispatch * Object2,
        long Index2,
        const _variant_t & guaranteed_ok = vtMissing );
    Relation2dPtr AddLink (
        IDispatch * Object1,
        IDispatch * Object2,
        const _variant_t & guaranteed_ok = vtMissing );
    Relation2dPtr AddChamfer (
        IDispatch * Object1,
        long Index1,
        IDispatch * Line,
        long line_index,
        IDispatch * Object2,
        long Index2,
        const _variant_t & guaranteed_ok = vtMissing );
    HRESULT AddAutoConstraints (
        double dist_tol,
        double angle_tol,
        long NumElements,
        SAFEARRAY * * Elements,
        long NumCnstrTypes,
        SAFEARRAY * * CnstrTypes,
        long * NumCnstrs,
        SAFEARRAY * * Cnstrs,
        const _variant_t & varXOriginUnk,
        const _variant_t & varYOriginUnk,
        const _variant_t & Xdim_pos_x,
        const _variant_t & Xdim_pos_y,
        const _variant_t & Ydim_pos_x,
        const _variant_t & Ydim_pos_y,
        const _variant_t & DimPlacementOptions,
        const _variant_t & LinearDimOptions,
        VARIANT_BOOL PlaceRadiusDimOnCircle,
        VARIANT_BOOL PlaceRadiusDimOnArc,
        VARIANT_BOOL PlaceDistanceDimFromCircleCenter );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Relation2d * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pEnum ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_AddHorizontalAlign (
        /*[in]*/ IDispatch * Object1,
        /*[in]*/ long Index1,
        /*[in]*/ IDispatch * Object2,
        /*[in]*/ long Index2,
        /*[in]*/ VARIANT guaranteed_ok,
        /*[out,retval]*/ struct Relation2d * * pCnstr ) = 0;
      virtual HRESULT __stdcall raw_AddVerticalAlign (
        /*[in]*/ IDispatch * Object1,
        /*[in]*/ long Index1,
        /*[in]*/ IDispatch * Object2,
        /*[in]*/ long Index2,
        /*[in]*/ VARIANT guaranteed_ok,
        /*[out,retval]*/ struct Relation2d * * pCnstr ) = 0;
      virtual HRESULT __stdcall raw_AddConcentric (
        /*[in]*/ IDispatch * Object1,
        /*[in]*/ IDispatch * Object2,
        /*[in]*/ VARIANT guaranteed_ok,
        /*[out,retval]*/ struct Relation2d * * pCnstr ) = 0;
      virtual HRESULT __stdcall raw_AddFix (
        /*[in]*/ IDispatch * Object,
        /*[in]*/ VARIANT guaranteed_ok,
        /*[out,retval]*/ struct Relation2d * * pCnstr ) = 0;
      virtual HRESULT __stdcall raw_AddKeypointFix (
        /*[in]*/ IDispatch * Object,
        /*[in]*/ long Index,
        /*[in]*/ VARIANT guaranteed_ok,
        /*[out,retval]*/ struct Relation2d * * pCnstr ) = 0;
      virtual HRESULT __stdcall raw_AddHorizontal (
        /*[in]*/ IDispatch * Object,
        /*[in]*/ VARIANT guaranteed_ok,
        /*[out,retval]*/ struct Relation2d * * pCnstr ) = 0;
      virtual HRESULT __stdcall raw_AddVertical (
        /*[in]*/ IDispatch * Object,
        /*[in]*/ VARIANT guaranteed_ok,
        /*[out,retval]*/ struct Relation2d * * pCnstr ) = 0;
      virtual HRESULT __stdcall raw_AddParallel (
        /*[in]*/ IDispatch * Object1,
        /*[in]*/ IDispatch * Object2,
        /*[in]*/ VARIANT guaranteed_ok,
        /*[out,retval]*/ struct Relation2d * * pCnstr ) = 0;
      virtual HRESULT __stdcall raw_AddPerpendicular (
        /*[in]*/ IDispatch * Object1,
        /*[in]*/ IDispatch * Object2,
        /*[in]*/ VARIANT guaranteed_ok,
        /*[out,retval]*/ struct Relation2d * * pCnstr ) = 0;
      virtual HRESULT __stdcall raw_AddTangent (
        /*[in]*/ IDispatch * Object1,
        /*[in]*/ IDispatch * Object2,
        /*[in]*/ VARIANT guaranteed_ok,
        /*[out,retval]*/ struct Relation2d * * pCnstr ) = 0;
      virtual HRESULT __stdcall raw_AddEqualDirection (
        /*[in]*/ IDispatch * Object1,
        /*[in]*/ long Index1,
        /*[in]*/ IDispatch * Object2,
        /*[in]*/ long Index2,
        /*[in]*/ VARIANT guaranteed_ok,
        /*[out,retval]*/ struct Relation2d * * pCnstr ) = 0;
      virtual HRESULT __stdcall raw_AddTangentEqualCurvature (
        /*[in]*/ IDispatch * Object1,
        /*[in]*/ long Index1,
        /*[in]*/ IDispatch * Object2,
        /*[in]*/ long Index2,
        /*[in]*/ VARIANT guaranteed_ok,
        /*[out,retval]*/ struct Relation2d * * pCnstr ) = 0;
      virtual HRESULT __stdcall raw_AddEqualDirectionEqualCurvature (
        /*[in]*/ IDispatch * Object1,
        /*[in]*/ long Index1,
        /*[in]*/ IDispatch * Object2,
        /*[in]*/ long Index2,
        /*[in]*/ VARIANT guaranteed_ok,
        /*[out,retval]*/ struct Relation2d * * pCnstr ) = 0;
      virtual HRESULT __stdcall raw_AddTangentBetweenCompoundCurves (
        /*[in]*/ long NumberElements1,
        /*[in]*/ SAFEARRAY * * Elements1,
        /*[in]*/ long NumberElements2,
        /*[in]*/ SAFEARRAY * * Elements2,
        /*[in]*/ VARIANT guaranteed_ok,
        /*[out,retval]*/ struct Relation2d * * pCnstr ) = 0;
      virtual HRESULT __stdcall raw_AddIntersection (
        /*[in]*/ IDispatch * Object1,
        /*[in]*/ long Index,
        /*[in]*/ IDispatch * Object2,
        /*[in]*/ IDispatch * Object3,
        /*[in]*/ VARIANT guaranteed_ok,
        /*[out,retval]*/ struct Relation2d * * pCnstr ) = 0;
      virtual HRESULT __stdcall raw_AddPointOn (
        /*[in]*/ IDispatch * Object1,
        /*[in]*/ long Index,
        /*[in]*/ IDispatch * Object2,
        /*[in]*/ VARIANT guaranteed_ok,
        /*[out,retval]*/ struct Relation2d * * pCnstr ) = 0;
      virtual HRESULT __stdcall raw_AddPointOnCompoundCurve (
        /*[in]*/ IDispatch * Object1,
        /*[in]*/ long Index,
        /*[in]*/ long NumberElements,
        /*[in]*/ SAFEARRAY * * Elements,
        /*[in]*/ VARIANT guaranteed_ok,
        /*[out,retval]*/ struct Relation2d * * pCnstr ) = 0;
      virtual HRESULT __stdcall raw_AddKeypoint (
        /*[in]*/ IDispatch * Object1,
        /*[in]*/ long Index1,
        /*[in]*/ IDispatch * Object2,
        /*[in]*/ long Index2,
        /*[in]*/ VARIANT guaranteed_ok,
        /*[out,retval]*/ struct Relation2d * * pCnstr ) = 0;
      virtual HRESULT __stdcall raw_AddSymmetric (
        /*[in]*/ IDispatch * pLine,
        /*[in]*/ IDispatch * Object2,
        /*[in]*/ IDispatch * Object3,
        /*[in]*/ VARIANT guaranteed_ok,
        /*[out,retval]*/ struct Relation2d * * pCnstr ) = 0;
      virtual HRESULT __stdcall raw_AddEqual (
        /*[in]*/ IDispatch * Object1,
        /*[in]*/ IDispatch * Object2,
        /*[in]*/ VARIANT guaranteed_ok,
        /*[out,retval]*/ struct Relation2d * * pCnstr ) = 0;
      virtual HRESULT __stdcall raw_AddSet (
        /*[in]*/ long NumberElements,
        /*[in]*/ SAFEARRAY * * Elements,
        /*[out,retval]*/ struct Relation2d * * pCnstr ) = 0;
      virtual HRESULT __stdcall raw_AddColinear (
        /*[in]*/ IDispatch * Object1,
        /*[in]*/ IDispatch * Object2,
        /*[in]*/ VARIANT guaranteed_ok,
        /*[out,retval]*/ struct Relation2d * * pCnstr ) = 0;
      virtual HRESULT __stdcall raw_AddFillet (
        /*[in]*/ IDispatch * Object1,
        /*[in]*/ long Index1,
        /*[in]*/ IDispatch * Arc,
        /*[in]*/ long arc_index,
        /*[in]*/ IDispatch * Object2,
        /*[in]*/ long Index2,
        /*[in]*/ VARIANT guaranteed_ok,
        /*[out,retval]*/ struct Relation2d * * pCnstr ) = 0;
      virtual HRESULT __stdcall raw_AddLink (
        /*[in]*/ IDispatch * Object1,
        /*[in]*/ IDispatch * Object2,
        /*[in]*/ VARIANT guaranteed_ok,
        /*[out,retval]*/ struct Relation2d * * pCnstr ) = 0;
      virtual HRESULT __stdcall raw_AddChamfer (
        /*[in]*/ IDispatch * Object1,
        /*[in]*/ long Index1,
        /*[in]*/ IDispatch * Line,
        /*[in]*/ long line_index,
        /*[in]*/ IDispatch * Object2,
        /*[in]*/ long Index2,
        /*[in]*/ VARIANT guaranteed_ok,
        /*[out,retval]*/ struct Relation2d * * pCnstr ) = 0;
      virtual HRESULT __stdcall raw_AddAutoConstraints (
        /*[in]*/ double dist_tol,
        /*[in]*/ double angle_tol,
        /*[in]*/ long NumElements,
        /*[in]*/ SAFEARRAY * * Elements,
        /*[in]*/ long NumCnstrTypes,
        /*[in]*/ SAFEARRAY * * CnstrTypes,
        /*[out]*/ long * NumCnstrs,
        /*[in,out]*/ SAFEARRAY * * Cnstrs,
        /*[in]*/ VARIANT varXOriginUnk,
        /*[in]*/ VARIANT varYOriginUnk,
        /*[in]*/ VARIANT Xdim_pos_x,
        /*[in]*/ VARIANT Xdim_pos_y,
        /*[in]*/ VARIANT Ydim_pos_x,
        /*[in]*/ VARIANT Ydim_pos_y,
        /*[in]*/ VARIANT DimPlacementOptions,
        /*[in]*/ VARIANT LinearDimOptions,
        /*[in]*/ VARIANT_BOOL PlaceRadiusDimOnCircle,
        /*[in]*/ VARIANT_BOOL PlaceRadiusDimOnArc,
        /*[in]*/ VARIANT_BOOL PlaceDistanceDimFromCircleCenter ) = 0;
};

enum GridTypeConstants
{
    igGridDynamic = 0,
    igGridStatic = 1
};

enum DynamicGridSpacingConstants
{
    igDynamicGridFine = 0,
    igDynamicGridNormal = 1,
    igDynamicGridCoarse = 2
};

struct __declspec(uuid("0ad0e8a2-9cf6-11ce-8d65-08003601bb4e"))
_IBackDropAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetMarginColor,put=PutMarginColor))
    long MarginColor;
    __declspec(property(get=GetMarginDisplay,put=PutMarginDisplay))
    VARIANT_BOOL MarginDisplay;
    __declspec(property(get=GetGridColor,put=PutGridColor))
    long GridColor;
    __declspec(property(get=GetGridType,put=PutGridType))
    enum GridTypeConstants GridType;
    __declspec(property(get=GetDynamicGridSpacing,put=PutDynamicGridSpacing))
    enum DynamicGridSpacingConstants DynamicGridSpacing;
    __declspec(property(get=GetStaticGridSpacing,put=PutStaticGridSpacing))
    double StaticGridSpacing;
    __declspec(property(get=GetGridDisplay,put=PutGridDisplay))
    VARIANT_BOOL GridDisplay;
    __declspec(property(get=GetUseCustomSheetColor,put=PutUseCustomSheetColor))
    VARIANT_BOOL UseCustomSheetColor;
    __declspec(property(get=GetCustomSheetColor,put=PutCustomSheetColor))
    long CustomSheetColor;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    long GetMarginColor ( );
    void PutMarginColor (
        long Color );
    void PutMarginDisplay (
        VARIANT_BOOL Visible );
    VARIANT_BOOL GetMarginDisplay ( );
    long GetGridColor ( );
    void PutGridColor (
        long Color );
    enum GridTypeConstants GetGridType ( );
    void PutGridType (
        enum GridTypeConstants Type );
    void PutDynamicGridSpacing (
        enum DynamicGridSpacingConstants spacing );
    enum DynamicGridSpacingConstants GetDynamicGridSpacing ( );
    double GetStaticGridSpacing ( );
    void PutStaticGridSpacing (
        double spacing );
    VARIANT_BOOL GetGridDisplay ( );
    void PutGridDisplay (
        VARIANT_BOOL Visible );
    void PutUseCustomSheetColor (
        VARIANT_BOOL UseCustom );
    VARIANT_BOOL GetUseCustomSheetColor ( );
    long GetCustomSheetColor ( );
    void PutCustomSheetColor (
        long Color );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_MarginColor (
        /*[out,retval]*/ long * Color ) = 0;
      virtual HRESULT __stdcall put_MarginColor (
        /*[in]*/ long Color ) = 0;
      virtual HRESULT __stdcall put_MarginDisplay (
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
      virtual HRESULT __stdcall get_MarginDisplay (
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall get_GridColor (
        /*[out,retval]*/ long * Color ) = 0;
      virtual HRESULT __stdcall put_GridColor (
        /*[in]*/ long Color ) = 0;
      virtual HRESULT __stdcall get_GridType (
        /*[out,retval]*/ enum GridTypeConstants * Type ) = 0;
      virtual HRESULT __stdcall put_GridType (
        /*[in]*/ enum GridTypeConstants Type ) = 0;
      virtual HRESULT __stdcall put_DynamicGridSpacing (
        /*[in]*/ enum DynamicGridSpacingConstants spacing ) = 0;
      virtual HRESULT __stdcall get_DynamicGridSpacing (
        /*[out,retval]*/ enum DynamicGridSpacingConstants * spacing ) = 0;
      virtual HRESULT __stdcall get_StaticGridSpacing (
        /*[out,retval]*/ double * spacing ) = 0;
      virtual HRESULT __stdcall put_StaticGridSpacing (
        /*[in]*/ double spacing ) = 0;
      virtual HRESULT __stdcall get_GridDisplay (
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall put_GridDisplay (
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
      virtual HRESULT __stdcall put_UseCustomSheetColor (
        /*[in]*/ VARIANT_BOOL UseCustom ) = 0;
      virtual HRESULT __stdcall get_UseCustomSheetColor (
        /*[out,retval]*/ VARIANT_BOOL * UseCustom ) = 0;
      virtual HRESULT __stdcall get_CustomSheetColor (
        /*[out,retval]*/ long * Color ) = 0;
      virtual HRESULT __stdcall put_CustomSheetColor (
        /*[in]*/ long Color ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
};

struct __declspec(uuid("d2818a20-5881-11ce-956a-08003601dfe5"))
_IDrawingObjectsAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * pItem ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Unknown ) = 0;
};

struct __declspec(uuid("630df5a0-2211-11ce-9b15-08003601cedf"))
Dimensions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetConstraint,put=PutConstraint))
    VARIANT_BOOL Constraint;
    __declspec(property(get=GetAxisMode,put=PutAxisMode))
    enum DimAxisModeConstants AxisMode;
    __declspec(property(get=GetAngleCompliment,put=PutAngleCompliment))
    VARIANT_BOOL AngleCompliment;
    __declspec(property(get=GetPlane,put=PutPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetStyle,put=PutStyle))
    DimensionStylePtr Style;
    __declspec(property(get=GetAxis,put=PutAxis))
    IDispatchPtr Axis;
    __declspec(property(get=GetDimInitData))
    DimInitDataPtr DimInitData;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    DimensionPtr Item (
        const _variant_t & Index );
    void PutConstraint (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetConstraint ( );
    void PutAxisMode (
        enum DimAxisModeConstants _arg1 );
    enum DimAxisModeConstants GetAxisMode ( );
    void PutAngleCompliment (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetAngleCompliment ( );
    void PutPlane (
        IDispatch * _arg1 );
    IDispatchPtr GetPlane ( );
    void PutStyle (
        struct DimensionStyle * _arg1 );
    DimensionStylePtr GetStyle ( );
    void PutAxis (
        IDispatch * _arg1 );
    IDispatchPtr GetAxis ( );
    DimensionPtr AddLength (
        IDispatch * Object );
    DimensionPtr AddAngle (
        IDispatch * Object );
    DimensionPtr AddRadius (
        IDispatch * Object );
    DimensionPtr AddRadialDiameter (
        IDispatch * Object );
    DimensionPtr AddCircularDiameter (
        IDispatch * Object );
    DimensionPtr AddSymmetricalDiameter (
        IDispatch * Object1,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint1,
        IDispatch * Object2,
        double x2,
        double y2,
        double z2,
        VARIANT_BOOL keyPoint2 );
    DimensionPtr AddDistanceBetweenObjects (
        IDispatch * Object1,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint1,
        IDispatch * Object2,
        double x2,
        double y2,
        double z2,
        VARIANT_BOOL keyPoint2 );
    DimensionPtr AddDistanceObjectToIntersection (
        IDispatch * Object1,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint1,
        IDispatch * Object21,
        double x21,
        double y21,
        double z21,
        IDispatch * Object22,
        double x22,
        double y22,
        double z22 );
    DimensionPtr AddDistanceIntersectionToObject (
        IDispatch * Object11,
        double x11,
        double y11,
        double z11,
        IDispatch * Object12,
        double x12,
        double y12,
        double z12,
        IDispatch * Object2,
        double x2,
        double y2,
        double z2,
        VARIANT_BOOL keyPoint2 );
    DimensionPtr AddDistanceIntersectionToIntersection (
        IDispatch * Object11,
        double x11,
        double y11,
        double z11,
        IDispatch * Object12,
        double x12,
        double y12,
        double z12,
        IDispatch * Object21,
        double x21,
        double y21,
        double z21,
        IDispatch * Object22,
        double x22,
        double y22,
        double z22 );
    DimensionPtr AddAngleBetweenObjects (
        IDispatch * ele1,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint1,
        IDispatch * ele2,
        double x2,
        double y2,
        double z2,
        VARIANT_BOOL keyPoint2 );
    DimensionPtr AddAngleBetween3Objects (
        IDispatch * ele1,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint1,
        IDispatch * ele2,
        double x2,
        double y2,
        double z2,
        VARIANT_BOOL keyPoint2,
        IDispatch * ele3,
        double x3,
        double y3,
        double z3,
        VARIANT_BOOL keyPoint3 );
    DimensionPtr AddCoordinateOrigin (
        IDispatch * Object,
        double x,
        double y,
        double z,
        VARIANT_BOOL keyPoint );
    DimensionPtr AddCoordinate (
        IDispatch * Obj1,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint1,
        IDispatch * Obj2,
        double x2,
        double y2,
        double z2,
        VARIANT_BOOL keyPoint2 );
    HRESULT ClearPlane ( );
    HRESULT ClearStyle ( );
    HRESULT ClearAxis ( );
    DimensionPtr AddChamfer (
        IDispatch * Object1,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint1,
        IDispatch * Object2,
        double x2,
        double y2,
        double z2,
        VARIANT_BOOL keyPoint2,
        enum DimChamferModeConstants valChamferMode );
    DimensionPtr AddAngularCoordinateOrigin (
        IDispatch * Obj1,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint1,
        IDispatch * Obj2,
        double x2,
        double y2,
        double z2,
        VARIANT_BOOL keyPoint2,
        double x3,
        double y3,
        double z3 );
    DimensionPtr AddAngularCoordinate (
        IDispatch * Obj1,
        IDispatch * Obj2,
        double x2,
        double y2,
        double z2,
        VARIANT_BOOL keyPoint2,
        double x3,
        double y3,
        double z3,
        enum DimAngularCoordnateOrientationConstants valAngCoordMode );
    DimensionPtr AddCoordinateOriginEx (
        IDispatch * Object,
        double x,
        double y,
        double z,
        VARIANT_BOOL keyPoint1,
        double x3,
        double y3,
        double z3 );
    DimensionPtr AddCoordinateEx (
        IDispatch * Obj1,
        IDispatch * Obj2,
        double x2,
        double y2,
        double z2,
        VARIANT_BOOL keyPoint2,
        double x3,
        double y3,
        double z3 );
    DimensionPtr AddDistanceBetweenObjectsEX (
        IDispatch * Object1,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint1,
        VARIANT_BOOL bTangent1,
        IDispatch * Object2,
        double x2,
        double y2,
        double z2,
        VARIANT_BOOL keyPoint2,
        VARIANT_BOOL bTangent2 );
    DimInitDataPtr GetDimInitData ( );
    DimensionPtr AddDimension (
        struct DimInitData * DimInitData );
};

struct __declspec(uuid("3f12b760-2211-11ce-9b15-08003601cedf"))
Dimension : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    double Value;
    __declspec(property(get=GetSuffixDisplayedText))
    _bstr_t SuffixDisplayedText;
    __declspec(property(get=GetStyle,put=PutStyle))
    DimStylePtr Style;
    __declspec(property(get=GetDimensionType))
    enum DimTypeConstants DimensionType;
    __declspec(property(get=GetConstraint,put=PutConstraint))
    VARIANT_BOOL Constraint;
    __declspec(property(get=GetSubfixDisplayedText))
    _bstr_t SubfixDisplayedText;
    __declspec(property(get=GetLeader))
    VARIANT_BOOL Leader;
    __declspec(property(get=GetJogged,put=PutJogged))
    VARIANT_BOOL Jogged;
    __declspec(property(get=GetTerminatorPosition,put=PutTerminatorPosition))
    VARIANT_BOOL TerminatorPosition;
    __declspec(property(get=GetOffsetLeader))
    VARIANT_BOOL OffsetLeader;
    __declspec(property(get=GetBreakPosition,put=PutBreakPosition))
    enum DimBreakPositionConstants BreakPosition;
    __declspec(property(get=GetBreakDistance,put=PutBreakDistance))
    double BreakDistance;
    __declspec(property(get=GetMeasurementAxis,put=PutMeasurementAxis))
    VARIANT_BOOL MeasurementAxis;
    __declspec(property(get=GetMeasurementAxisDirection,put=PutMeasurementAxisDirection))
    VARIANT_BOOL MeasurementAxisDirection;
    __declspec(property(get=GetProjectionLineDirection,put=PutProjectionLineDirection))
    VARIANT_BOOL ProjectionLineDirection;
    __declspec(property(get=GetProjectionArc,put=PutProjectionArc))
    enum DimProjArcConstants ProjectionArc;
    __declspec(property(get=GetOriginLineDirection,put=PutOriginLineDirection))
    VARIANT_BOOL OriginLineDirection;
    __declspec(property(get=GetMeasureLineDirection,put=PutMeasureLineDirection))
    VARIANT_BOOL MeasureLineDirection;
    __declspec(property(get=GetAngleClockwise,put=PutAngleClockwise))
    VARIANT_BOOL AngleClockwise;
    __declspec(property(get=GetTrackDistance,put=PutTrackDistance))
    double TrackDistance;
    __declspec(property(get=GetLeaderDistance,put=PutLeaderDistance))
    double LeaderDistance;
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetTextScale,put=PutTextScale))
    double TextScale;
    __declspec(property(get=GetPrefixString,put=PutPrefixString))
    _bstr_t PrefixString;
    __declspec(property(get=GetSuffixString,put=PutSuffixString))
    _bstr_t SuffixString;
    __declspec(property(get=GetSubfixString,put=PutSubfixString))
    _bstr_t SubfixString;
    __declspec(property(get=GetSuperfixString,put=PutSuperfixString))
    _bstr_t SuperfixString;
    __declspec(property(get=GetOverrideString,put=PutOverrideString))
    _bstr_t OverrideString;
    __declspec(property(get=GetSecondValue,put=PutSecondValue))
    double SecondValue;
    __declspec(property(get=GetOverrideChamferAngleString,put=PutOverrideChamferAngleString))
    _bstr_t OverrideChamferAngleString;
    __declspec(property(get=GetChamferDimensionMode))
    enum DimChamferModeConstants ChamferDimensionMode;
    __declspec(property(get=GetPrimaryUpperTolerance,put=PutPrimaryUpperTolerance))
    _bstr_t PrimaryUpperTolerance;
    __declspec(property(get=GetPrimaryLowerTolerance,put=PutPrimaryLowerTolerance))
    _bstr_t PrimaryLowerTolerance;
    __declspec(property(get=GetPrimaryToleranceSymbol,put=PutPrimaryToleranceSymbol))
    _bstr_t PrimaryToleranceSymbol;
    __declspec(property(get=GetSecondaryUpperTolerance,put=PutSecondaryUpperTolerance))
    _bstr_t SecondaryUpperTolerance;
    __declspec(property(get=GetSecondaryLowerTolerance,put=PutSecondaryLowerTolerance))
    _bstr_t SecondaryLowerTolerance;
    __declspec(property(get=GetSecondaryToleranceSymbol,put=PutSecondaryToleranceSymbol))
    _bstr_t SecondaryToleranceSymbol;
    __declspec(property(get=GetDisplayType,put=PutDisplayType))
    enum DimDispTypeConstants DisplayType;
    __declspec(property(get=GetVariableTableName,put=PutVariableTableName))
    _bstr_t VariableTableName;
    __declspec(property(get=GetDisplayByName,put=PutDisplayByName))
    VARIANT_BOOL DisplayByName;
    __declspec(property(get=GetTrackAngle,put=PutTrackAngle))
    double TrackAngle;
    __declspec(property(get=GetAngleCompliment,put=PutAngleCompliment))
    VARIANT_BOOL AngleCompliment;
    __declspec(property(get=GetMeasurementAxisEx,put=PutMeasurementAxisEx))
    enum DimAxisModeConstants MeasurementAxisEx;
    __declspec(property(get=GetProjectionLineAngle1))
    double ProjectionLineAngle1;
    __declspec(property(get=GetPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetAxis,put=PutAxis))
    IDispatchPtr Axis;
    __declspec(property(get=GetProjectionLineAngle2))
    double ProjectionLineAngle2;
    __declspec(property(get=GetDisplayHalf,put=PutDisplayHalf))
    VARIANT_BOOL DisplayHalf;
    __declspec(property(get=GetInspection,put=PutInspection))
    VARIANT_BOOL Inspection;
    __declspec(property(get=GetPrefixInside,put=PutPrefixInside))
    VARIANT_BOOL PrefixInside;
    __declspec(property(get=GetStatusOfDimension))
    enum DimStatusConstants StatusOfDimension;
    __declspec(property(get=GetGroupMemberType))
    enum DimGroupMemberTypeConstants GroupMemberType;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetDisplayName))
    _bstr_t DisplayName;
    __declspec(property(get=GetSystemName))
    _bstr_t SystemName;
    __declspec(property(get=GetExpose,put=PutExpose))
    long Expose;
    __declspec(property(get=GetExposeName,put=PutExposeName))
    _bstr_t ExposeName;
    __declspec(property(get=GetSubfixString2,put=PutSubfixString2))
    _bstr_t SubfixString2;
    __declspec(property(get=GetSubfixAlignment,put=PutSubfixAlignment))
    enum SubfixAlignmentConstants SubfixAlignment;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetSubfix2DisplayedText))
    _bstr_t Subfix2DisplayedText;
    __declspec(property(get=GetRadialExtensionDistance,put=PutRadialExtensionDistance))
    double RadialExtensionDistance;
    __declspec(property(get=GetTrue3DSketchDimension,put=PutTrue3DSketchDimension))
    VARIANT_BOOL True3DSketchDimension;
    __declspec(property(get=GetUnitsType,put=PutUnitsType))
    int UnitsType;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEnablePrefix,put=PutEnablePrefix))
    VARIANT_BOOL EnablePrefix;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetAbsoluteTrackDistance))
    double AbsoluteTrackDistance;
    __declspec(property(get=GetPMIPlane))
    IDispatchPtr PMIPlane;
    __declspec(property(get=GetPMITrackDistance,put=PutPMITrackDistance))
    double PMITrackDistance;
    __declspec(property(get=GetUseStandardLimitAndFitTolerance,put=PutUseStandardLimitAndFitTolerance))
    VARIANT_BOOL UseStandardLimitAndFitTolerance;
    __declspec(property(get=GetHoleClassString,put=PutHoleClassString))
    _bstr_t HoleClassString;
    __declspec(property(get=GetShaftClassString,put=PutShaftClassString))
    _bstr_t ShaftClassString;
    __declspec(property(get=GetInhibitZeroToleranceDisplay,put=PutInhibitZeroToleranceDisplay))
    VARIANT_BOOL InhibitZeroToleranceDisplay;
    __declspec(property(get=GetHidePMI,put=PutHidePMI))
    VARIANT_BOOL HidePMI;
    __declspec(property(get=GetPrefixDisplayedText))
    _bstr_t PrefixDisplayedText;
    __declspec(property(get=GetSuperfixDisplayedText))
    _bstr_t SuperfixDisplayedText;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    void PutValue (
        double _arg1 );
    double GetValue ( );
    DimStylePtr GetStyle ( );
    enum DimTypeConstants GetDimensionType ( );
    void PutConstraint (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetConstraint ( );
    VARIANT_BOOL GetLeader ( );
    void PutJogged (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetJogged ( );
    void PutTerminatorPosition (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetTerminatorPosition ( );
    VARIANT_BOOL GetOffsetLeader ( );
    void PutBreakPosition (
        enum DimBreakPositionConstants _arg1 );
    enum DimBreakPositionConstants GetBreakPosition ( );
    void PutBreakDistance (
        double _arg1 );
    double GetBreakDistance ( );
    void PutMeasurementAxis (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetMeasurementAxis ( );
    void PutMeasurementAxisDirection (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetMeasurementAxisDirection ( );
    void PutProjectionLineDirection (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetProjectionLineDirection ( );
    void PutProjectionArc (
        enum DimProjArcConstants _arg1 );
    enum DimProjArcConstants GetProjectionArc ( );
    void PutOriginLineDirection (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetOriginLineDirection ( );
    void PutMeasureLineDirection (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetMeasureLineDirection ( );
    void PutAngleClockwise (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetAngleClockwise ( );
    void PutTrackDistance (
        double _arg1 );
    double GetTrackDistance ( );
    void PutLeaderDistance (
        double _arg1 );
    double GetLeaderDistance ( );
    void PutPrefixString (
        _bstr_t _arg1 );
    _bstr_t GetPrefixString ( );
    void PutSuffixString (
        _bstr_t _arg1 );
    _bstr_t GetSuffixString ( );
    void PutSubfixString (
        _bstr_t _arg1 );
    _bstr_t GetSubfixString ( );
    void PutSuperfixString (
        _bstr_t _arg1 );
    _bstr_t GetSuperfixString ( );
    void PutOverrideString (
        _bstr_t _arg1 );
    _bstr_t GetOverrideString ( );
    void PutPrimaryUpperTolerance (
        _bstr_t _arg1 );
    _bstr_t GetPrimaryUpperTolerance ( );
    void PutPrimaryLowerTolerance (
        _bstr_t _arg1 );
    _bstr_t GetPrimaryLowerTolerance ( );
    void PutPrimaryToleranceSymbol (
        _bstr_t _arg1 );
    _bstr_t GetPrimaryToleranceSymbol ( );
    void PutSecondaryUpperTolerance (
        _bstr_t _arg1 );
    _bstr_t GetSecondaryUpperTolerance ( );
    void PutSecondaryLowerTolerance (
        _bstr_t _arg1 );
    _bstr_t GetSecondaryLowerTolerance ( );
    void PutSecondaryToleranceSymbol (
        _bstr_t _arg1 );
    _bstr_t GetSecondaryToleranceSymbol ( );
    void PutDisplayType (
        enum DimDispTypeConstants _arg1 );
    enum DimDispTypeConstants GetDisplayType ( );
    void PutTrackAngle (
        double _arg1 );
    double GetTrackAngle ( );
    void PutTextScale (
        double _arg1 );
    double GetTextScale ( );
    void PutAngleCompliment (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetAngleCompliment ( );
    void PutDisplayHalf (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayHalf ( );
    void PutDisplayByName (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayByName ( );
    void PutInspection (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetInspection ( );
    HRESULT SetJogPoint1Distance (
        double Value );
    HRESULT GetJogPoint1Distance (
        double * Value );
    HRESULT SetJogPoint2 (
        double x,
        double y );
    HRESULT GetJogPoint2 (
        double * x,
        double * y );
    HRESULT SetJogPoint3Distance (
        double Value );
    HRESULT GetJogPoint3Distance (
        double * Value );
    HRESULT SetTextOffsets (
        double x,
        double y );
    HRESULT GetTextOffsets (
        double * x,
        double * y );
    HRESULT GetRelatedCount (
        long * Count );
    HRESULT GetRelated (
        long Index,
        IDispatch * * GraphicObject,
        double * x,
        double * y,
        double * z,
        VARIANT_BOOL * keyPoint );
    IDispatchPtr GetPlane ( );
    IDispatchPtr GetAxis ( );
    void PutAxis (
        IDispatch * _arg1 );
    void PutPrefixInside (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetPrefixInside ( );
    enum DimStatusConstants GetStatusOfDimension ( );
    enum DimGroupMemberTypeConstants GetGroupMemberType ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    void PutSecondValue (
        double _arg1 );
    double GetSecondValue ( );
    void PutOverrideChamferAngleString (
        _bstr_t _arg1 );
    _bstr_t GetOverrideChamferAngleString ( );
    enum DimChamferModeConstants GetChamferDimensionMode ( );
    void PutVariableTableName (
        _bstr_t _arg1 );
    _bstr_t GetVariableTableName ( );
    void PutMeasurementAxisEx (
        enum DimAxisModeConstants _arg1 );
    enum DimAxisModeConstants GetMeasurementAxisEx ( );
    double GetProjectionLineAngle1 ( );
    double GetProjectionLineAngle2 ( );
    void PutFormula (
        _bstr_t _arg1 );
    _bstr_t GetFormula ( );
    DisplayDataPtr GetDisplayData ( );
    _bstr_t GetDisplayName ( );
    _bstr_t GetSystemName ( );
    void PutExpose (
        long _arg1 );
    long GetExpose ( );
    void PutExposeName (
        _bstr_t _arg1 );
    _bstr_t GetExposeName ( );
    void PutSubfixString2 (
        _bstr_t _arg1 );
    _bstr_t GetSubfixString2 ( );
    void PutSubfixAlignment (
        enum SubfixAlignmentConstants _arg1 );
    enum SubfixAlignmentConstants GetSubfixAlignment ( );
    HRESULT AddProjectionLineBreaks ( );
    HRESULT ClearProjectionLineBreaks ( );
    long GetBreakingDimensionsCount ( );
    void PutLayer (
        _bstr_t _arg1 );
    _bstr_t GetLayer ( );
    double GetAbsoluteTrackDistance ( );
    IDispatchPtr GetPMIPlane ( );
    double GetPMITrackDistance ( );
    void PutPMITrackDistance (
        double _arg1 );
    void PutUseStandardLimitAndFitTolerance (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetUseStandardLimitAndFitTolerance ( );
    void PutHoleClassString (
        _bstr_t _arg1 );
    _bstr_t GetHoleClassString ( );
    void PutShaftClassString (
        _bstr_t _arg1 );
    _bstr_t GetShaftClassString ( );
    void PutInhibitZeroToleranceDisplay (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetInhibitZeroToleranceDisplay ( );
    HRESULT SetPMIEditDirection (
        enum PMIEditDirectionConstants editDirectionConst );
    void PutHidePMI (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHidePMI ( );
    _bstr_t GetPrefixDisplayedText ( );
    _bstr_t GetSuperfixDisplayedText ( );
    _bstr_t GetSuffixDisplayedText ( );
    _bstr_t GetSubfixDisplayedText ( );
    _bstr_t GetSubfix2DisplayedText ( );
    void PutStyle (
        struct DimStyle * _arg1 );
    void PutRadialExtensionDistance (
        double _arg1 );
    double GetRadialExtensionDistance ( );
    HRESULT GetDiscreteValues (
        int * pnumDiscreteValues,
        SAFEARRAY * * DiscreteValues );
    HRESULT SetDiscreteValues (
        int numDiscreteValues,
        SAFEARRAY * * DiscreteValues );
    HRESULT GetMultipleJogPoints (
        int * numJogPoints,
        double * initialYOffset,
        SAFEARRAY * * XOffsets,
        SAFEARRAY * * YOffsets,
        SAFEARRAY * * DistBet2Jogs );
    HRESULT SetMultipleJogPoints (
        int numJogPoints,
        double initialYOffset,
        SAFEARRAY * * XOffsets,
        SAFEARRAY * * YOffsets,
        SAFEARRAY * * DistBet2Jogs );
    _bstr_t GetComment ( );
    HRESULT SetComment (
        _bstr_t Comment );
    enum DimStatusConstants UpdateStatus ( );
    HRESULT RemoveFromAlignmentSet ( );
    HRESULT BreakAlignmentSet ( );
    void PutTrue3DSketchDimension (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetTrue3DSketchDimension ( );
    enum DimReattachStatusConstants ReattachToDrawingView (
        IDispatch * DrawingView );
    HRESULT GetValueDiscreteValues (
        SAFEARRAY * * DiscreteValues );
    HRESULT SetValueDiscreteValues (
        SAFEARRAY * * DiscreteValues );
    HRESULT AddDiscreteValue (
        double DiscreteValue );
    HRESULT RemoveDiscreteValue (
        double DiscreteValue );
    HRESULT SetValueRangeValues (
        double LowValue,
        int Condition,
        double HighValue );
    HRESULT GetValueRangeValues (
        double * LowValue,
        int * Condition,
        double * HighValue );
    void PutUnitsType (
        int _arg1 );
    int GetUnitsType ( );
    HRESULT GetValueRangeHighValue (
        double * pdHighValue );
    HRESULT SetValueRangeHighValue (
        double dHighValue );
    HRESULT GetValueRangeLowValue (
        double * pdHighValue );
    HRESULT SetValueRangeLowValue (
        double dHighValue );
    HRESULT ClearLimitsOrDiscreteValues ( );
    double GetValueOutOfRange ( );
    VARIANT_BOOL GetIsReadOnly ( );
    HRESULT GetValueEx (
        double * pdValue,
        enum TGFramework::seUnitsTypeConstants seUnitsType );
    HRESULT SetValueEx (
        double dValue,
        enum TGFramework::seUnitsTypeConstants seUnitsType );
    void PutEnablePrefix (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetEnablePrefix ( );
    HRESULT AutoScaleSketch (
        double dValue,
        VARIANT_BOOL * Value );
    HRESULT SetValueAndUpdateCache (
        double dValue,
        enum TGFramework::seUnitsTypeConstants seUnitsType );
    HRESULT ConvertCDiameterToRDiameter (
        enum DimTypeConstants Type );
};

struct __declspec(uuid("743442b0-31e0-11ce-93f4-080036373002"))
DimStyle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetPrimaryUnits,put=PutPrimaryUnits))
    enum DimLinearUnitConstants PrimaryUnits;
    __declspec(property(get=GetRoundOffType,put=PutRoundOffType))
    enum DimRoundOffTypeConstants RoundOffType;
    __declspec(property(get=GetDelimiter,put=PutDelimiter))
    enum DimDelimiterTypeConstants Delimiter;
    __declspec(property(get=GetPrimaryDecimalRoundOff,put=PutPrimaryDecimalRoundOff))
    enum DimDecimalRoundOffTypeConstants PrimaryDecimalRoundOff;
    __declspec(property(get=GetPrimaryFractionRoundOff,put=PutPrimaryFractionRoundOff))
    enum DimFractionRoundOffTypeConstants PrimaryFractionRoundOff;
    __declspec(property(get=GetAngularUnits,put=PutAngularUnits))
    enum DimAngularUnitConstants AngularUnits;
    __declspec(property(get=GetAngularDMSRoundOff,put=PutAngularDMSRoundOff))
    enum DimDMSRoundOffTypeConstants AngularDMSRoundOff;
    __declspec(property(get=GetAngularDecimalRoundOff,put=PutAngularDecimalRoundOff))
    enum DimDecimalRoundOffTypeConstants AngularDecimalRoundOff;
    __declspec(property(get=GetAngularFractionRoundOff,put=PutAngularFractionRoundOff))
    enum DimFractionRoundOffTypeConstants AngularFractionRoundOff;
    __declspec(property(get=GetPrimaryLeadingZeros,put=PutPrimaryLeadingZeros))
    VARIANT_BOOL PrimaryLeadingZeros;
    __declspec(property(get=GetPrimaryTrailingZeros,put=PutPrimaryTrailingZeros))
    VARIANT_BOOL PrimaryTrailingZeros;
    __declspec(property(get=GetPrimaryUnitLabel,put=PutPrimaryUnitLabel))
    _bstr_t PrimaryUnitLabel;
    __declspec(property(get=GetPrimarySubunitsLabel,put=PutPrimarySubunitsLabel))
    _bstr_t PrimarySubunitsLabel;
    __declspec(property(get=GetMaximumSubunits,put=PutMaximumSubunits))
    int MaximumSubunits;
    __declspec(property(get=GetDualDisplay,put=PutDualDisplay))
    VARIANT_BOOL DualDisplay;
    __declspec(property(get=GetSecondaryUnits,put=PutSecondaryUnits))
    enum DimLinearUnitConstants SecondaryUnits;
    __declspec(property(get=GetSecondaryUnitRoundOff,put=PutSecondaryUnitRoundOff))
    enum DimRoundOffTypeConstants SecondaryUnitRoundOff;
    __declspec(property(get=GetSecondaryDecimalRoundOff,put=PutSecondaryDecimalRoundOff))
    enum DimDecimalRoundOffTypeConstants SecondaryDecimalRoundOff;
    __declspec(property(get=GetSecondaryFractionRoundOff,put=PutSecondaryFractionRoundOff))
    enum DimFractionRoundOffTypeConstants SecondaryFractionRoundOff;
    __declspec(property(get=GetSecondaryLeadingZeros,put=PutSecondaryLeadingZeros))
    VARIANT_BOOL SecondaryLeadingZeros;
    __declspec(property(get=GetSecondaryTrailingZeros,put=PutSecondaryTrailingZeros))
    VARIANT_BOOL SecondaryTrailingZeros;
    __declspec(property(get=GetSecondaryUnitLabel,put=PutSecondaryUnitLabel))
    _bstr_t SecondaryUnitLabel;
    __declspec(property(get=GetSecondarySubunitsLabel,put=PutSecondarySubunitsLabel))
    _bstr_t SecondarySubunitsLabel;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetRatio,put=PutRatio))
    double Ratio;
    __declspec(property(get=GetTextWeight,put=PutTextWeight))
    double TextWeight;
    __declspec(property(get=GetFont,put=PutFont))
    _bstr_t Font;
    __declspec(property(get=GetFontStyle,put=PutFontStyle))
    enum DimTextFontStyleConstants FontStyle;
    __declspec(property(get=GetTextOrientation,put=PutTextOrientation))
    enum DimTextOrientationConstants TextOrientation;
    __declspec(property(get=GetTextPosition,put=PutTextPosition))
    enum DimTextPositionConstants TextPosition;
    __declspec(property(get=GetCoordinateTextPosition,put=PutCoordinateTextPosition))
    enum DimCoordTextPositionConstants CoordinateTextPosition;
    __declspec(property(get=GetLimitTextArrangement,put=PutLimitTextArrangement))
    enum DimLimitTextArrangmentConstants LimitTextArrangement;
    __declspec(property(get=GetToleranceHeightRatio,put=PutToleranceHeightRatio))
    double ToleranceHeightRatio;
    __declspec(property(get=GetToleranceWeight,put=PutToleranceWeight))
    double ToleranceWeight;
    __declspec(property(get=GetTextClearanceGap,put=PutTextClearanceGap))
    double TextClearanceGap;
    __declspec(property(get=GetDualModeVerticalGap,put=PutDualModeVerticalGap))
    double DualModeVerticalGap;
    __declspec(property(get=GetPinSymbolTerminatorType,put=PutPinSymbolTerminatorType))
    enum DimPinSymbolTermTypeConstants PinSymbolTerminatorType;
    __declspec(property(get=GetLineSpacing,put=PutLineSpacing))
    double LineSpacing;
    __declspec(property(get=GetAboveGap,put=PutAboveGap))
    double AboveGap;
    __declspec(property(get=GetHorizontalToleranceGap,put=PutHorizontalToleranceGap))
    double HorizontalToleranceGap;
    __declspec(property(get=GetVerticalToleranceGap,put=PutVerticalToleranceGap))
    double VerticalToleranceGap;
    __declspec(property(get=GetVerticalLimitsGap,put=PutVerticalLimitsGap))
    double VerticalLimitsGap;
    __declspec(property(get=GetHorizontalBoxGap,put=PutHorizontalBoxGap))
    double HorizontalBoxGap;
    __declspec(property(get=GetVerticalBoxGap,put=PutVerticalBoxGap))
    double VerticalBoxGap;
    __declspec(property(get=GetPrefixSuffixGap,put=PutPrefixSuffixGap))
    double PrefixSuffixGap;
    __declspec(property(get=GetSymbolGap,put=PutSymbolGap))
    double SymbolGap;
    __declspec(property(get=GetNTSSymbol,put=PutNTSSymbol))
    enum DimNTSTypeConstants NTSSymbol;
    __declspec(property(get=GetTerminatorType,put=PutTerminatorType))
    enum DimTermTypeConstants TerminatorType;
    __declspec(property(get=GetTerminatorDisplay,put=PutTerminatorDisplay))
    enum DimTermDisplayTypeConstants TerminatorDisplay;
    __declspec(property(get=GetOriginTerminatorType,put=PutOriginTerminatorType))
    enum DimTermTypeConstants OriginTerminatorType;
    __declspec(property(get=GetFreeSpaceTerminatorType,put=PutFreeSpaceTerminatorType))
    enum DimTermTypeConstants FreeSpaceTerminatorType;
    __declspec(property(get=GetDatumTerminatorType,put=PutDatumTerminatorType))
    enum DimDatumTermTypeConstants DatumTerminatorType;
    __declspec(property(get=GetTerminatorSize,put=PutTerminatorSize))
    double TerminatorSize;
    __declspec(property(get=GetTerminatorInsideLimit,put=PutTerminatorInsideLimit))
    double TerminatorInsideLimit;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    double LineWidth;
    __declspec(property(get=GetProjectionExtensionGap,put=PutProjectionExtensionGap))
    double ProjectionExtensionGap;
    __declspec(property(get=GetProjectionOffsetGap,put=PutProjectionOffsetGap))
    double ProjectionOffsetGap;
    __declspec(property(get=GetProjectionOffsetGapAlignment,put=PutProjectionOffsetGapAlignment))
    VARIANT_BOOL ProjectionOffsetGapAlignment;
    __declspec(property(get=GetProjectionAngle,put=PutProjectionAngle))
    double ProjectionAngle;
    __declspec(property(get=GetLineConnect,put=PutLineConnect))
    VARIANT_BOOL LineConnect;
    __declspec(property(get=GetStackPitch,put=PutStackPitch))
    double StackPitch;
    __declspec(property(get=GetLeaderLineLength,put=PutLeaderLineLength))
    double LeaderLineLength;
    __declspec(property(get=GetProjectionLineDisplay,put=PutProjectionLineDisplay))
    enum DimProjDisplayTypeConstants ProjectionLineDisplay;
    __declspec(property(get=GetAutoCenterProjectionLine,put=PutAutoCenterProjectionLine))
    VARIANT_BOOL AutoCenterProjectionLine;
    __declspec(property(get=GetCoordinateAutoJog,put=PutCoordinateAutoJog))
    VARIANT_BOOL CoordinateAutoJog;
    __declspec(property(get=GetCoordinateStackPitch,put=PutCoordinateStackPitch))
    double CoordinateStackPitch;
    __declspec(property(get=GetCommonOrigin,put=PutCommonOrigin))
    enum DimCommonOriginTypeConstants CommonOrigin;
    __declspec(property(get=GetSymbolPosition,put=PutSymbolPosition))
    enum DimSymbolPositionConstants SymbolPosition;
    __declspec(property(get=GetAutoSuppressDiameter,put=PutAutoSuppressDiameter))
    VARIANT_BOOL AutoSuppressDiameter;
    __declspec(property(get=GetDimensionScaleMode,put=PutDimensionScaleMode))
    enum DimScaleModeConstants DimensionScaleMode;
    __declspec(property(get=GetDimensionScale,put=PutDimensionScale))
    double DimensionScale;
    __declspec(property(get=GetDrivingColor,put=PutDrivingColor))
    long DrivingColor;
    __declspec(property(get=GetDrivenColor,put=PutDrivenColor))
    long DrivenColor;
    __declspec(property(get=GetErrorColor,put=PutErrorColor))
    long ErrorColor;
    __declspec(property(get=GetMaximumViewAngle,put=PutMaximumViewAngle))
    double MaximumViewAngle;
    __declspec(property(get=GetProjectionToleranceZonePosition,put=PutProjectionToleranceZonePosition))
    enum DimProjTolZonePositionConstants ProjectionToleranceZonePosition;
    __declspec(property(get=GetDatumFrameDashes,put=PutDatumFrameDashes))
    VARIANT_BOOL DatumFrameDashes;
    __declspec(property(get=GetViewTextRatio,put=PutViewTextRatio))
    double ViewTextRatio;
    __declspec(property(get=GetViewTerminatorRatio,put=PutViewTerminatorRatio))
    double ViewTerminatorRatio;
    __declspec(property(get=GetViewLineWidth,put=PutViewLineWidth))
    double ViewLineWidth;
    __declspec(property(get=GetViewLineType,put=PutViewLineType))
    _bstr_t ViewLineType;
    __declspec(property(get=GetViewCuttingPlaneLineDisplay,put=PutViewCuttingPlaneLineDisplay))
    enum DimViewCuttingPlaneDisplayTypeConstants ViewCuttingPlaneLineDisplay;
    __declspec(property(get=GetViewPlaneLineDisplay,put=PutViewPlaneLineDisplay))
    enum DimViewPlaneDisplayTypeConstants ViewPlaneLineDisplay;
    __declspec(property(get=GetSecondaryToleranceEquivalent,put=PutSecondaryToleranceEquivalent))
    VARIANT_BOOL SecondaryToleranceEquivalent;
    __declspec(property(get=GetOffsetLeaderType,put=PutOffsetLeaderType))
    enum DimOffsetLeaderTypeConstants OffsetLeaderType;
    __declspec(property(get=GetCenterLineType,put=PutCenterLineType))
    _bstr_t CenterLineType;
    __declspec(property(get=GetRoundUp,put=PutRoundUp))
    enum DimRoundUpTypeConstants RoundUp;
    __declspec(property(get=GetSecondaryLinearRoundOffType,put=PutSecondaryLinearRoundOffType))
    enum DimRoundOffTypeConstants SecondaryLinearRoundOffType;
    __declspec(property(get=GetAngularRoundOffType,put=PutAngularRoundOffType))
    enum DimRoundOffTypeConstants AngularRoundOffType;
    __declspec(property(get=GetCenterMarkExtension,put=PutCenterMarkExtension))
    double CenterMarkExtension;
    __declspec(property(get=GetChamferUse45DegreeCharacter,put=PutChamferUse45DegreeCharacter))
    VARIANT_BOOL ChamferUse45DegreeCharacter;
    __declspec(property(get=GetSmartDepthHoleThru,put=PutSmartDepthHoleThru))
    _bstr_t SmartDepthHoleThru;
    __declspec(property(get=GetSmartDepthHoleFinite,put=PutSmartDepthHoleFinite))
    _bstr_t SmartDepthHoleFinite;
    __declspec(property(get=GetSmartDepthThreadThru,put=PutSmartDepthThreadThru))
    _bstr_t SmartDepthThreadThru;
    __declspec(property(get=GetSmartDepthThreadFinite,put=PutSmartDepthThreadFinite))
    _bstr_t SmartDepthThreadFinite;
    __declspec(property(get=GetLowerCaseMultiplicationSymbol,put=PutLowerCaseMultiplicationSymbol))
    VARIANT_BOOL LowerCaseMultiplicationSymbol;
    __declspec(property(get=GetCenterMarkSize,put=PutCenterMarkSize))
    double CenterMarkSize;
    __declspec(property(get=GetAutoPhase,put=PutAutoPhase))
    VARIANT_BOOL AutoPhase;
    __declspec(property(get=GetHoleCalloutSimple,put=PutHoleCalloutSimple))
    _bstr_t HoleCalloutSimple;
    __declspec(property(get=GetHoleCalloutCounterbore,put=PutHoleCalloutCounterbore))
    _bstr_t HoleCalloutCounterbore;
    __declspec(property(get=GetHoleCalloutCountersink,put=PutHoleCalloutCountersink))
    _bstr_t HoleCalloutCountersink;
    __declspec(property(get=GetHoleCalloutSimpleThreaded,put=PutHoleCalloutSimpleThreaded))
    _bstr_t HoleCalloutSimpleThreaded;
    __declspec(property(get=GetHoleCalloutCounterboreThreaded,put=PutHoleCalloutCounterboreThreaded))
    _bstr_t HoleCalloutCounterboreThreaded;
    __declspec(property(get=GetHoleCalloutCountersinkThreaded,put=PutHoleCalloutCountersinkThreaded))
    _bstr_t HoleCalloutCountersinkThreaded;
    __declspec(property(get=GetApplyBreakLineGap,put=PutApplyBreakLineGap))
    VARIANT_BOOL ApplyBreakLineGap;
    __declspec(property(get=GetTextAutoFillBackground,put=PutTextAutoFillBackground))
    VARIANT_BOOL TextAutoFillBackground;
    __declspec(property(get=GetPulledOutTextOrientation,put=PutPulledOutTextOrientation))
    enum DimTextOrientationConstants PulledOutTextOrientation;
    __declspec(property(get=GetPulledOutTextPosition,put=PutPulledOutTextPosition))
    enum DimTextPositionConstants PulledOutTextPosition;
    __declspec(property(get=GetOverridePulledOutText,put=PutOverridePulledOutText))
    VARIANT_BOOL OverridePulledOutText;
    __declspec(property(get=GetViewLineArrowOffset,put=PutViewLineArrowOffset))
    double ViewLineArrowOffset;
    __declspec(property(get=GetViewThickLineLength,put=PutViewThickLineLength))
    double ViewThickLineLength;
    __declspec(property(get=GetOrigTerminatorSize,put=PutOrigTerminatorSize))
    double OrigTerminatorSize;
    __declspec(property(get=GetConnectorLineType,put=PutConnectorLineType))
    _bstr_t ConnectorLineType;
    __declspec(property(get=GetConnectorColor,put=PutConnectorColor))
    long ConnectorColor;
    __declspec(property(get=GetConnectorWidth,put=PutConnectorWidth))
    double ConnectorWidth;
    __declspec(property(get=GetFractionSeparator,put=PutFractionSeparator))
    _bstr_t FractionSeparator;
    __declspec(property(get=GetHeightPMI,put=PutHeightPMI))
    double HeightPMI;
    __declspec(property(get=GetProjectionBreakGap,put=PutProjectionBreakGap))
    double ProjectionBreakGap;
    __declspec(property(get=GetSecondaryDelimiter,put=PutSecondaryDelimiter))
    enum DimDelimiterTypeConstants SecondaryDelimiter;
    __declspec(property(get=GetMatchPrimaryDelimiter,put=PutMatchPrimaryDelimiter))
    VARIANT_BOOL MatchPrimaryDelimiter;
    __declspec(property(get=GetInhibitZeroToleranceDisplay,put=PutInhibitZeroToleranceDisplay))
    VARIANT_BOOL InhibitZeroToleranceDisplay;
    __declspec(property(get=GetAllAroundMultiplier,put=PutAllAroundMultiplier))
    double AllAroundMultiplier;
    __declspec(property(get=GetPulledOutText2Orientation,put=PutPulledOutText2Orientation))
    enum DimTextOrientationConstants PulledOutText2Orientation;
    __declspec(property(get=GetPulledOutText2Position,put=PutPulledOutText2Position))
    enum DimTextPositionConstants PulledOutText2Position;
    __declspec(property(get=GetOverridePulledOutText2,put=PutOverridePulledOutText2))
    VARIANT_BOOL OverridePulledOutText2;
    __declspec(property(get=GetDisplayDegreeSymbolOnNumericTolerance,put=PutDisplayDegreeSymbolOnNumericTolerance))
    VARIANT_BOOL DisplayDegreeSymbolOnNumericTolerance;
    __declspec(property(get=GetZeroInchesForFTIN,put=PutZeroInchesForFTIN))
    VARIANT_BOOL ZeroInchesForFTIN;
    __declspec(property(get=GetSymbolFont,put=PutSymbolFont))
    enum DimStyleSymbolFontConstants SymbolFont;
    __declspec(property(get=GetDatumTerminatorGap,put=PutDatumTerminatorGap))
    double DatumTerminatorGap;
    __declspec(property(get=GetDatumFrameShape,put=PutDatumFrameShape))
    enum DimStyleDatumFrameShapeConstants DatumFrameShape;
    __declspec(property(get=GetDisplayCoordinateOriginText,put=PutDisplayCoordinateOriginText))
    VARIANT_BOOL DisplayCoordinateOriginText;
    __declspec(property(get=GetPlacePrefixInsideBasicDimensionBox,put=PutPlacePrefixInsideBasicDimensionBox))
    VARIANT_BOOL PlacePrefixInsideBasicDimensionBox;
    __declspec(property(get=GetSecondaryUnitSeparator,put=PutSecondaryUnitSeparator))
    enum DimStyleSecondaryUnitSeparatorConstants SecondaryUnitSeparator;
    __declspec(property(get=GetWeldSymbolLineWidth,put=PutWeldSymbolLineWidth))
    double WeldSymbolLineWidth;
    __declspec(property(get=GetThreeSidedSymbolOffsetGap,put=PutThreeSidedSymbolOffsetGap))
    double ThreeSidedSymbolOffsetGap;
    __declspec(property(get=GetHoleShaftToleranceSeparatorType,put=PutHoleShaftToleranceSeparatorType))
    enum DimHoleShaftSeparatorTypeConstants HoleShaftToleranceSeparatorType;
    __declspec(property(get=GetToleranceTextVerticalAlignment,put=PutToleranceTextVerticalAlignment))
    enum TextVerticalAlignmentConstants ToleranceTextVerticalAlignment;
    __declspec(property(get=GetToleranceTextHorizontalAlignment,put=PutToleranceTextHorizontalAlignment))
    enum DimToleranceTextHorizontalAlignOptionsConstants ToleranceTextHorizontalAlignment;
    __declspec(property(get=GetUseTextSizeForCombinedTolValueDisplay,put=PutUseTextSizeForCombinedTolValueDisplay))
    VARIANT_BOOL UseTextSizeForCombinedTolValueDisplay;
    __declspec(property(get=GetDatumFrameLineTermThickness,put=PutDatumFrameLineTermThickness))
    double DatumFrameLineTermThickness;
    __declspec(property(get=GetDatumTargetTerminatorType,put=PutDatumTargetTerminatorType))
    enum DimDatumTargetTermTypeConstants DatumTargetTerminatorType;
    __declspec(property(get=GetPrimaryLinearToleranceUnits,put=PutPrimaryLinearToleranceUnits))
    enum DimLinearUnitConstants PrimaryLinearToleranceUnits;
    __declspec(property(get=GetPrimaryLinearToleranceRoundOffType,put=PutPrimaryLinearToleranceRoundOffType))
    enum DimRoundOffTypeConstants PrimaryLinearToleranceRoundOffType;
    __declspec(property(get=GetPrimaryLinearToleranceDecimalRoundOff,put=PutPrimaryLinearToleranceDecimalRoundOff))
    enum DimDecimalRoundOffTypeConstants PrimaryLinearToleranceDecimalRoundOff;
    __declspec(property(get=GetPrimaryLinearToleranceFractionRoundOff,put=PutPrimaryLinearToleranceFractionRoundOff))
    enum DimFractionRoundOffTypeConstants PrimaryLinearToleranceFractionRoundOff;
    __declspec(property(get=GetPrimaryLinearToleranceUnitLabel,put=PutPrimaryLinearToleranceUnitLabel))
    _bstr_t PrimaryLinearToleranceUnitLabel;
    __declspec(property(get=GetPrimaryLinearToleranceSubunitsLabel,put=PutPrimaryLinearToleranceSubunitsLabel))
    _bstr_t PrimaryLinearToleranceSubunitsLabel;
    __declspec(property(get=GetPrimaryLinearToleranceMaximumSubunits,put=PutPrimaryLinearToleranceMaximumSubunits))
    int PrimaryLinearToleranceMaximumSubunits;
    __declspec(property(get=GetPrimaryLinearToleranceFractionSeparator,put=PutPrimaryLinearToleranceFractionSeparator))
    _bstr_t PrimaryLinearToleranceFractionSeparator;
    __declspec(property(get=GetAngularToleranceUnits,put=PutAngularToleranceUnits))
    enum DimAngularUnitConstants AngularToleranceUnits;
    __declspec(property(get=GetAngularToleranceRoundOffType,put=PutAngularToleranceRoundOffType))
    enum DimRoundOffTypeConstants AngularToleranceRoundOffType;
    __declspec(property(get=GetAngularToleranceDMSRoundOff,put=PutAngularToleranceDMSRoundOff))
    enum DimDMSRoundOffTypeConstants AngularToleranceDMSRoundOff;
    __declspec(property(get=GetAngularToleranceDecimalRoundOff,put=PutAngularToleranceDecimalRoundOff))
    enum DimDecimalRoundOffTypeConstants AngularToleranceDecimalRoundOff;
    __declspec(property(get=GetAngularToleranceFractionRoundOff,put=PutAngularToleranceFractionRoundOff))
    enum DimFractionRoundOffTypeConstants AngularToleranceFractionRoundOff;
    __declspec(property(get=GetSecondaryLinearToleranceUnits,put=PutSecondaryLinearToleranceUnits))
    enum DimLinearUnitConstants SecondaryLinearToleranceUnits;
    __declspec(property(get=GetSecondaryLinearToleranceRoundOffType,put=PutSecondaryLinearToleranceRoundOffType))
    enum DimRoundOffTypeConstants SecondaryLinearToleranceRoundOffType;
    __declspec(property(get=GetSecondaryLinearToleranceDecimalRoundOff,put=PutSecondaryLinearToleranceDecimalRoundOff))
    enum DimDecimalRoundOffTypeConstants SecondaryLinearToleranceDecimalRoundOff;
    __declspec(property(get=GetSecondaryLinearToleranceFractionRoundOff,put=PutSecondaryLinearToleranceFractionRoundOff))
    enum DimFractionRoundOffTypeConstants SecondaryLinearToleranceFractionRoundOff;
    __declspec(property(get=GetSecondaryLinearToleranceUnitLabel,put=PutSecondaryLinearToleranceUnitLabel))
    _bstr_t SecondaryLinearToleranceUnitLabel;
    __declspec(property(get=GetSecondaryLinearToleranceSubunitsLabel,put=PutSecondaryLinearToleranceSubunitsLabel))
    _bstr_t SecondaryLinearToleranceSubunitsLabel;
    __declspec(property(get=GetSecondaryLinearToleranceMaximumSubunits,put=PutSecondaryLinearToleranceMaximumSubunits))
    int SecondaryLinearToleranceMaximumSubunits;
    __declspec(property(get=GetSecondaryLinearToleranceFractionSeparator,put=PutSecondaryLinearToleranceFractionSeparator))
    _bstr_t SecondaryLinearToleranceFractionSeparator;
    __declspec(property(get=GetSecondaryLinearFractionSeparator,put=PutSecondaryLinearFractionSeparator))
    _bstr_t SecondaryLinearFractionSeparator;
    __declspec(property(get=GetDualUnitPosition,put=PutDualUnitPosition))
    enum DimDualUnitPositionConstants DualUnitPosition;
    __declspec(property(get=GetDualUnitJustification,put=PutDualUnitJustification))
    enum TextHorizontalAlignmentConstants DualUnitJustification;
    __declspec(property(get=GetSmartDepthSlotThru,put=PutSmartDepthSlotThru))
    _bstr_t SmartDepthSlotThru;
    __declspec(property(get=GetSmartDepthSlotFinite,put=PutSmartDepthSlotFinite))
    _bstr_t SmartDepthSlotFinite;
    __declspec(property(get=GetSlotCalloutSimple,put=PutSlotCalloutSimple))
    _bstr_t SlotCalloutSimple;
    __declspec(property(get=GetSlotCalloutCounterbore,put=PutSlotCalloutCounterbore))
    _bstr_t SlotCalloutCounterbore;
    __declspec(property(get=GetCoordinateTextOrientation,put=PutCoordinateTextOrientation))
    enum DimTextOrientationConstants CoordinateTextOrientation;
    __declspec(property(get=GetEnableAutoJogForCoordinate,put=PutEnableAutoJogForCoordinate))
    VARIANT_BOOL EnableAutoJogForCoordinate;
    __declspec(property(get=GetAllowNegativeValueForCoordinate,put=PutAllowNegativeValueForCoordinate))
    VARIANT_BOOL AllowNegativeValueForCoordinate;
    __declspec(property(get=GetAllowOriginValueChangeForCoordinate,put=PutAllowOriginValueChangeForCoordinate))
    VARIANT_BOOL AllowOriginValueChangeForCoordinate;
    __declspec(property(get=GetShowOriginLineForCoordinate,put=PutShowOriginLineForCoordinate))
    VARIANT_BOOL ShowOriginLineForCoordinate;
    __declspec(property(get=GetOverlineExtension,put=PutOverlineExtension))
    double OverlineExtension;
    __declspec(property(get=GetSuppressSymmetricDiameterSymbol,put=PutSuppressSymmetricDiameterSymbol))
    VARIANT_BOOL SuppressSymmetricDiameterSymbol;
    __declspec(property(get=GetUnderlineSymbolAndPrefix,put=PutUnderlineSymbolAndPrefix))
    VARIANT_BOOL UnderlineSymbolAndPrefix;
    __declspec(property(get=GetInitialStackPitch,put=PutInitialStackPitch))
    double InitialStackPitch;
    __declspec(property(get=GetHoleCalloutCounterdrill,put=PutHoleCalloutCounterdrill))
    _bstr_t HoleCalloutCounterdrill;
    __declspec(property(get=GetHoleCalloutCounterdrillThreaded,put=PutHoleCalloutCounterdrillThreaded))
    _bstr_t HoleCalloutCounterdrillThreaded;
    __declspec(property(get=GetPrimaryStackFraction,put=PutPrimaryStackFraction))
    enum DimStackFractionTypeConstants PrimaryStackFraction;
    __declspec(property(get=GetSecondaryStackFraction,put=PutSecondaryStackFraction))
    enum DimStackFractionTypeConstants SecondaryStackFraction;
    __declspec(property(get=GetPrimaryStackFractionSize,put=PutPrimaryStackFractionSize))
    enum DimStackFractionSizeConstants PrimaryStackFractionSize;
    __declspec(property(get=GetSecondaryStackFractionSize,put=PutSecondaryStackFractionSize))
    enum DimStackFractionSizeConstants SecondaryStackFractionSize;
    __declspec(property(get=GetProjectionLineDisplayForIntersectionPoint,put=PutProjectionLineDisplayForIntersectionPoint))
    enum DimProjDisplayTypeConstants ProjectionLineDisplayForIntersectionPoint;
    __declspec(property(get=GetShowHideReferenceGeometry,put=PutShowHideReferenceGeometry))
    VARIANT_BOOL ShowHideReferenceGeometry;
    __declspec(property(get=GetEnableAngularJog,put=PutEnableAngularJog))
    VARIANT_BOOL EnableAngularJog;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetName ( );
    void PutPrimaryUnits (
        enum DimLinearUnitConstants _arg1 );
    enum DimLinearUnitConstants GetPrimaryUnits ( );
    void PutRoundOffType (
        enum DimRoundOffTypeConstants _arg1 );
    enum DimRoundOffTypeConstants GetRoundOffType ( );
    void PutDelimiter (
        enum DimDelimiterTypeConstants _arg1 );
    enum DimDelimiterTypeConstants GetDelimiter ( );
    void PutPrimaryDecimalRoundOff (
        enum DimDecimalRoundOffTypeConstants _arg1 );
    enum DimDecimalRoundOffTypeConstants GetPrimaryDecimalRoundOff ( );
    void PutPrimaryFractionRoundOff (
        enum DimFractionRoundOffTypeConstants _arg1 );
    enum DimFractionRoundOffTypeConstants GetPrimaryFractionRoundOff ( );
    void PutAngularUnits (
        enum DimAngularUnitConstants _arg1 );
    enum DimAngularUnitConstants GetAngularUnits ( );
    void PutAngularDMSRoundOff (
        enum DimDMSRoundOffTypeConstants _arg1 );
    enum DimDMSRoundOffTypeConstants GetAngularDMSRoundOff ( );
    void PutAngularDecimalRoundOff (
        enum DimDecimalRoundOffTypeConstants _arg1 );
    enum DimDecimalRoundOffTypeConstants GetAngularDecimalRoundOff ( );
    void PutAngularFractionRoundOff (
        enum DimFractionRoundOffTypeConstants _arg1 );
    enum DimFractionRoundOffTypeConstants GetAngularFractionRoundOff ( );
    void PutPrimaryLeadingZeros (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetPrimaryLeadingZeros ( );
    void PutPrimaryTrailingZeros (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetPrimaryTrailingZeros ( );
    void PutPrimaryUnitLabel (
        _bstr_t _arg1 );
    _bstr_t GetPrimaryUnitLabel ( );
    void PutPrimarySubunitsLabel (
        _bstr_t _arg1 );
    _bstr_t GetPrimarySubunitsLabel ( );
    void PutMaximumSubunits (
        int _arg1 );
    int GetMaximumSubunits ( );
    void PutDualDisplay (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDualDisplay ( );
    void PutSecondaryUnits (
        enum DimLinearUnitConstants _arg1 );
    enum DimLinearUnitConstants GetSecondaryUnits ( );
    void PutSecondaryUnitRoundOff (
        enum DimRoundOffTypeConstants _arg1 );
    enum DimRoundOffTypeConstants GetSecondaryUnitRoundOff ( );
    void PutSecondaryDecimalRoundOff (
        enum DimDecimalRoundOffTypeConstants _arg1 );
    enum DimDecimalRoundOffTypeConstants GetSecondaryDecimalRoundOff ( );
    void PutSecondaryFractionRoundOff (
        enum DimFractionRoundOffTypeConstants _arg1 );
    enum DimFractionRoundOffTypeConstants GetSecondaryFractionRoundOff ( );
    void PutSecondaryLeadingZeros (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetSecondaryLeadingZeros ( );
    void PutSecondaryTrailingZeros (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetSecondaryTrailingZeros ( );
    void PutSecondaryUnitLabel (
        _bstr_t _arg1 );
    _bstr_t GetSecondaryUnitLabel ( );
    void PutSecondarySubunitsLabel (
        _bstr_t _arg1 );
    _bstr_t GetSecondarySubunitsLabel ( );
    void PutHeight (
        double _arg1 );
    double GetHeight ( );
    void PutRatio (
        double _arg1 );
    double GetRatio ( );
    void PutTextWeight (
        double _arg1 );
    double GetTextWeight ( );
    void PutFont (
        _bstr_t _arg1 );
    _bstr_t GetFont ( );
    void PutFontStyle (
        enum DimTextFontStyleConstants _arg1 );
    enum DimTextFontStyleConstants GetFontStyle ( );
    void PutTextOrientation (
        enum DimTextOrientationConstants _arg1 );
    enum DimTextOrientationConstants GetTextOrientation ( );
    void PutTextPosition (
        enum DimTextPositionConstants _arg1 );
    enum DimTextPositionConstants GetTextPosition ( );
    void PutLimitTextArrangement (
        enum DimLimitTextArrangmentConstants _arg1 );
    enum DimLimitTextArrangmentConstants GetLimitTextArrangement ( );
    void PutToleranceHeightRatio (
        double _arg1 );
    double GetToleranceHeightRatio ( );
    void PutToleranceWeight (
        double _arg1 );
    double GetToleranceWeight ( );
    void PutNTSSymbol (
        enum DimNTSTypeConstants _arg1 );
    enum DimNTSTypeConstants GetNTSSymbol ( );
    void PutTerminatorType (
        enum DimTermTypeConstants _arg1 );
    enum DimTermTypeConstants GetTerminatorType ( );
    void PutTerminatorDisplay (
        enum DimTermDisplayTypeConstants _arg1 );
    enum DimTermDisplayTypeConstants GetTerminatorDisplay ( );
    void PutOriginTerminatorType (
        enum DimTermTypeConstants _arg1 );
    enum DimTermTypeConstants GetOriginTerminatorType ( );
    void PutFreeSpaceTerminatorType (
        enum DimTermTypeConstants _arg1 );
    enum DimTermTypeConstants GetFreeSpaceTerminatorType ( );
    void PutDatumTerminatorType (
        enum DimDatumTermTypeConstants _arg1 );
    enum DimDatumTermTypeConstants GetDatumTerminatorType ( );
    void PutTerminatorSize (
        double _arg1 );
    double GetTerminatorSize ( );
    void PutTerminatorInsideLimit (
        double _arg1 );
    double GetTerminatorInsideLimit ( );
    void PutLineWidth (
        double _arg1 );
    double GetLineWidth ( );
    void PutProjectionExtensionGap (
        double _arg1 );
    double GetProjectionExtensionGap ( );
    void PutProjectionOffsetGap (
        double _arg1 );
    double GetProjectionOffsetGap ( );
    void PutProjectionOffsetGapAlignment (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetProjectionOffsetGapAlignment ( );
    void PutProjectionAngle (
        double _arg1 );
    double GetProjectionAngle ( );
    void PutLineConnect (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetLineConnect ( );
    void PutStackPitch (
        double _arg1 );
    double GetStackPitch ( );
    void PutLeaderLineLength (
        double _arg1 );
    double GetLeaderLineLength ( );
    void PutCoordinateAutoJog (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetCoordinateAutoJog ( );
    void PutCoordinateStackPitch (
        double _arg1 );
    double GetCoordinateStackPitch ( );
    void PutCommonOrigin (
        enum DimCommonOriginTypeConstants _arg1 );
    enum DimCommonOriginTypeConstants GetCommonOrigin ( );
    void PutCoordinateTextPosition (
        enum DimCoordTextPositionConstants _arg1 );
    enum DimCoordTextPositionConstants GetCoordinateTextPosition ( );
    void PutSymbolPosition (
        enum DimSymbolPositionConstants _arg1 );
    enum DimSymbolPositionConstants GetSymbolPosition ( );
    void PutAutoSuppressDiameter (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetAutoSuppressDiameter ( );
    void PutDimensionScaleMode (
        enum DimScaleModeConstants _arg1 );
    enum DimScaleModeConstants GetDimensionScaleMode ( );
    void PutDimensionScale (
        double _arg1 );
    double GetDimensionScale ( );
    void PutErrorColor (
        long _arg1 );
    long GetErrorColor ( );
    void PutDrivingColor (
        long _arg1 );
    long GetDrivingColor ( );
    void PutDrivenColor (
        long _arg1 );
    long GetDrivenColor ( );
    void PutAutoCenterProjectionLine (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetAutoCenterProjectionLine ( );
    void PutProjectionLineDisplay (
        enum DimProjDisplayTypeConstants _arg1 );
    enum DimProjDisplayTypeConstants GetProjectionLineDisplay ( );
    void PutProjectionLineDisplayForIntersectionPoint (
        enum DimProjDisplayTypeConstants _arg1 );
    enum DimProjDisplayTypeConstants GetProjectionLineDisplayForIntersectionPoint ( );
    void PutTextClearanceGap (
        double _arg1 );
    double GetTextClearanceGap ( );
    void PutDualModeVerticalGap (
        double _arg1 );
    double GetDualModeVerticalGap ( );
    void PutLineSpacing (
        double _arg1 );
    double GetLineSpacing ( );
    void PutAboveGap (
        double _arg1 );
    double GetAboveGap ( );
    void PutHorizontalToleranceGap (
        double _arg1 );
    double GetHorizontalToleranceGap ( );
    void PutVerticalToleranceGap (
        double _arg1 );
    double GetVerticalToleranceGap ( );
    void PutVerticalLimitsGap (
        double _arg1 );
    double GetVerticalLimitsGap ( );
    void PutHorizontalBoxGap (
        double _arg1 );
    double GetHorizontalBoxGap ( );
    void PutVerticalBoxGap (
        double _arg1 );
    double GetVerticalBoxGap ( );
    void PutPrefixSuffixGap (
        double _arg1 );
    double GetPrefixSuffixGap ( );
    void PutSymbolGap (
        double _arg1 );
    double GetSymbolGap ( );
    void PutMaximumViewAngle (
        double _arg1 );
    double GetMaximumViewAngle ( );
    void PutProjectionToleranceZonePosition (
        enum DimProjTolZonePositionConstants _arg1 );
    enum DimProjTolZonePositionConstants GetProjectionToleranceZonePosition ( );
    void PutDatumFrameDashes (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDatumFrameDashes ( );
    void PutViewTextRatio (
        double _arg1 );
    double GetViewTextRatio ( );
    void PutViewTerminatorRatio (
        double _arg1 );
    double GetViewTerminatorRatio ( );
    void PutViewLineWidth (
        double _arg1 );
    double GetViewLineWidth ( );
    void PutViewLineType (
        _bstr_t _arg1 );
    _bstr_t GetViewLineType ( );
    void PutViewCuttingPlaneLineDisplay (
        enum DimViewCuttingPlaneDisplayTypeConstants _arg1 );
    enum DimViewCuttingPlaneDisplayTypeConstants GetViewCuttingPlaneLineDisplay ( );
    void PutViewPlaneLineDisplay (
        enum DimViewPlaneDisplayTypeConstants _arg1 );
    enum DimViewPlaneDisplayTypeConstants GetViewPlaneLineDisplay ( );
    void PutOffsetLeaderType (
        enum DimOffsetLeaderTypeConstants _arg1 );
    enum DimOffsetLeaderTypeConstants GetOffsetLeaderType ( );
    void PutSecondaryToleranceEquivalent (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetSecondaryToleranceEquivalent ( );
    void PutCenterLineType (
        _bstr_t _arg1 );
    _bstr_t GetCenterLineType ( );
    void PutCenterMarkSize (
        double _arg1 );
    double GetCenterMarkSize ( );
    void PutAutoPhase (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetAutoPhase ( );
    HRESULT UseActiveStyle ( );
    void PutRoundUp (
        enum DimRoundUpTypeConstants _arg1 );
    enum DimRoundUpTypeConstants GetRoundUp ( );
    void PutSecondaryLinearRoundOffType (
        enum DimRoundOffTypeConstants _arg1 );
    enum DimRoundOffTypeConstants GetSecondaryLinearRoundOffType ( );
    void PutAngularRoundOffType (
        enum DimRoundOffTypeConstants _arg1 );
    enum DimRoundOffTypeConstants GetAngularRoundOffType ( );
    void PutCenterMarkExtension (
        double _arg1 );
    double GetCenterMarkExtension ( );
    void PutChamferUse45DegreeCharacter (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetChamferUse45DegreeCharacter ( );
    void PutSmartDepthHoleThru (
        _bstr_t _arg1 );
    _bstr_t GetSmartDepthHoleThru ( );
    void PutSmartDepthHoleFinite (
        _bstr_t _arg1 );
    _bstr_t GetSmartDepthHoleFinite ( );
    void PutSmartDepthThreadThru (
        _bstr_t _arg1 );
    _bstr_t GetSmartDepthThreadThru ( );
    void PutSmartDepthThreadFinite (
        _bstr_t _arg1 );
    _bstr_t GetSmartDepthThreadFinite ( );
    void PutLowerCaseMultiplicationSymbol (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetLowerCaseMultiplicationSymbol ( );
    void PutHoleCalloutSimple (
        _bstr_t _arg1 );
    _bstr_t GetHoleCalloutSimple ( );
    void PutHoleCalloutCounterbore (
        _bstr_t _arg1 );
    _bstr_t GetHoleCalloutCounterbore ( );
    void PutHoleCalloutCountersink (
        _bstr_t _arg1 );
    _bstr_t GetHoleCalloutCountersink ( );
    void PutHoleCalloutSimpleThreaded (
        _bstr_t _arg1 );
    _bstr_t GetHoleCalloutSimpleThreaded ( );
    void PutHoleCalloutCounterboreThreaded (
        _bstr_t _arg1 );
    _bstr_t GetHoleCalloutCounterboreThreaded ( );
    void PutHoleCalloutCountersinkThreaded (
        _bstr_t _arg1 );
    _bstr_t GetHoleCalloutCountersinkThreaded ( );
    void PutApplyBreakLineGap (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetApplyBreakLineGap ( );
    void PutTextAutoFillBackground (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetTextAutoFillBackground ( );
    void PutPulledOutTextOrientation (
        enum DimTextOrientationConstants _arg1 );
    enum DimTextOrientationConstants GetPulledOutTextOrientation ( );
    void PutPulledOutTextPosition (
        enum DimTextPositionConstants _arg1 );
    enum DimTextPositionConstants GetPulledOutTextPosition ( );
    void PutOverridePulledOutText (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetOverridePulledOutText ( );
    void PutViewLineArrowOffset (
        double _arg1 );
    double GetViewLineArrowOffset ( );
    void PutViewThickLineLength (
        double _arg1 );
    double GetViewThickLineLength ( );
    void PutOrigTerminatorSize (
        double _arg1 );
    double GetOrigTerminatorSize ( );
    void PutConnectorLineType (
        _bstr_t _arg1 );
    _bstr_t GetConnectorLineType ( );
    void PutConnectorColor (
        long _arg1 );
    long GetConnectorColor ( );
    void PutConnectorWidth (
        double _arg1 );
    double GetConnectorWidth ( );
    void PutFractionSeparator (
        _bstr_t _arg1 );
    _bstr_t GetFractionSeparator ( );
    void PutHeightPMI (
        double _arg1 );
    double GetHeightPMI ( );
    void PutProjectionBreakGap (
        double _arg1 );
    double GetProjectionBreakGap ( );
    void PutSecondaryDelimiter (
        enum DimDelimiterTypeConstants _arg1 );
    enum DimDelimiterTypeConstants GetSecondaryDelimiter ( );
    void PutMatchPrimaryDelimiter (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetMatchPrimaryDelimiter ( );
    void PutInhibitZeroToleranceDisplay (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetInhibitZeroToleranceDisplay ( );
    void PutAllAroundMultiplier (
        double _arg1 );
    double GetAllAroundMultiplier ( );
    void PutOverridePulledOutText2 (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetOverridePulledOutText2 ( );
    void PutPulledOutText2Orientation (
        enum DimTextOrientationConstants _arg1 );
    enum DimTextOrientationConstants GetPulledOutText2Orientation ( );
    void PutPulledOutText2Position (
        enum DimTextPositionConstants _arg1 );
    enum DimTextPositionConstants GetPulledOutText2Position ( );
    void PutDisplayDegreeSymbolOnNumericTolerance (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayDegreeSymbolOnNumericTolerance ( );
    void PutZeroInchesForFTIN (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetZeroInchesForFTIN ( );
    void PutSymbolFont (
        enum DimStyleSymbolFontConstants _arg1 );
    enum DimStyleSymbolFontConstants GetSymbolFont ( );
    void PutDatumTerminatorGap (
        double _arg1 );
    double GetDatumTerminatorGap ( );
    void PutDatumFrameShape (
        enum DimStyleDatumFrameShapeConstants _arg1 );
    enum DimStyleDatumFrameShapeConstants GetDatumFrameShape ( );
    void PutDisplayCoordinateOriginText (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayCoordinateOriginText ( );
    void PutPlacePrefixInsideBasicDimensionBox (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetPlacePrefixInsideBasicDimensionBox ( );
    void PutSecondaryUnitSeparator (
        enum DimStyleSecondaryUnitSeparatorConstants _arg1 );
    enum DimStyleSecondaryUnitSeparatorConstants GetSecondaryUnitSeparator ( );
    void PutWeldSymbolLineWidth (
        double _arg1 );
    double GetWeldSymbolLineWidth ( );
    void PutThreeSidedSymbolOffsetGap (
        double _arg1 );
    double GetThreeSidedSymbolOffsetGap ( );
    void PutHoleShaftToleranceSeparatorType (
        enum DimHoleShaftSeparatorTypeConstants _arg1 );
    enum DimHoleShaftSeparatorTypeConstants GetHoleShaftToleranceSeparatorType ( );
    void PutToleranceTextVerticalAlignment (
        enum TextVerticalAlignmentConstants _arg1 );
    enum TextVerticalAlignmentConstants GetToleranceTextVerticalAlignment ( );
    void PutToleranceTextHorizontalAlignment (
        enum DimToleranceTextHorizontalAlignOptionsConstants _arg1 );
    enum DimToleranceTextHorizontalAlignOptionsConstants GetToleranceTextHorizontalAlignment ( );
    void PutUseTextSizeForCombinedTolValueDisplay (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetUseTextSizeForCombinedTolValueDisplay ( );
    void PutDatumFrameLineTermThickness (
        double _arg1 );
    double GetDatumFrameLineTermThickness ( );
    void PutDatumTargetTerminatorType (
        enum DimDatumTargetTermTypeConstants _arg1 );
    enum DimDatumTargetTermTypeConstants GetDatumTargetTerminatorType ( );
    void PutPinSymbolTerminatorType (
        enum DimPinSymbolTermTypeConstants _arg1 );
    enum DimPinSymbolTermTypeConstants GetPinSymbolTerminatorType ( );
    void PutPrimaryLinearToleranceUnits (
        enum DimLinearUnitConstants _arg1 );
    enum DimLinearUnitConstants GetPrimaryLinearToleranceUnits ( );
    void PutPrimaryLinearToleranceRoundOffType (
        enum DimRoundOffTypeConstants _arg1 );
    enum DimRoundOffTypeConstants GetPrimaryLinearToleranceRoundOffType ( );
    void PutPrimaryLinearToleranceDecimalRoundOff (
        enum DimDecimalRoundOffTypeConstants _arg1 );
    enum DimDecimalRoundOffTypeConstants GetPrimaryLinearToleranceDecimalRoundOff ( );
    void PutPrimaryLinearToleranceFractionRoundOff (
        enum DimFractionRoundOffTypeConstants _arg1 );
    enum DimFractionRoundOffTypeConstants GetPrimaryLinearToleranceFractionRoundOff ( );
    void PutPrimaryLinearToleranceUnitLabel (
        _bstr_t _arg1 );
    _bstr_t GetPrimaryLinearToleranceUnitLabel ( );
    void PutPrimaryLinearToleranceSubunitsLabel (
        _bstr_t _arg1 );
    _bstr_t GetPrimaryLinearToleranceSubunitsLabel ( );
    void PutPrimaryLinearToleranceMaximumSubunits (
        int _arg1 );
    int GetPrimaryLinearToleranceMaximumSubunits ( );
    void PutPrimaryLinearToleranceFractionSeparator (
        _bstr_t _arg1 );
    _bstr_t GetPrimaryLinearToleranceFractionSeparator ( );
    void PutAngularToleranceUnits (
        enum DimAngularUnitConstants _arg1 );
    enum DimAngularUnitConstants GetAngularToleranceUnits ( );
    void PutAngularToleranceRoundOffType (
        enum DimRoundOffTypeConstants _arg1 );
    enum DimRoundOffTypeConstants GetAngularToleranceRoundOffType ( );
    void PutAngularToleranceDMSRoundOff (
        enum DimDMSRoundOffTypeConstants _arg1 );
    enum DimDMSRoundOffTypeConstants GetAngularToleranceDMSRoundOff ( );
    void PutAngularToleranceDecimalRoundOff (
        enum DimDecimalRoundOffTypeConstants _arg1 );
    enum DimDecimalRoundOffTypeConstants GetAngularToleranceDecimalRoundOff ( );
    void PutAngularToleranceFractionRoundOff (
        enum DimFractionRoundOffTypeConstants _arg1 );
    enum DimFractionRoundOffTypeConstants GetAngularToleranceFractionRoundOff ( );
    void PutSecondaryLinearToleranceUnits (
        enum DimLinearUnitConstants _arg1 );
    enum DimLinearUnitConstants GetSecondaryLinearToleranceUnits ( );
    void PutSecondaryLinearToleranceRoundOffType (
        enum DimRoundOffTypeConstants _arg1 );
    enum DimRoundOffTypeConstants GetSecondaryLinearToleranceRoundOffType ( );
    void PutSecondaryLinearToleranceDecimalRoundOff (
        enum DimDecimalRoundOffTypeConstants _arg1 );
    enum DimDecimalRoundOffTypeConstants GetSecondaryLinearToleranceDecimalRoundOff ( );
    void PutSecondaryLinearToleranceFractionRoundOff (
        enum DimFractionRoundOffTypeConstants _arg1 );
    enum DimFractionRoundOffTypeConstants GetSecondaryLinearToleranceFractionRoundOff ( );
    void PutSecondaryLinearToleranceUnitLabel (
        _bstr_t _arg1 );
    _bstr_t GetSecondaryLinearToleranceUnitLabel ( );
    void PutSecondaryLinearToleranceSubunitsLabel (
        _bstr_t _arg1 );
    _bstr_t GetSecondaryLinearToleranceSubunitsLabel ( );
    void PutSecondaryLinearToleranceMaximumSubunits (
        int _arg1 );
    int GetSecondaryLinearToleranceMaximumSubunits ( );
    void PutSecondaryLinearToleranceFractionSeparator (
        _bstr_t _arg1 );
    _bstr_t GetSecondaryLinearToleranceFractionSeparator ( );
    void PutSecondaryLinearFractionSeparator (
        _bstr_t _arg1 );
    _bstr_t GetSecondaryLinearFractionSeparator ( );
    void PutDualUnitPosition (
        enum DimDualUnitPositionConstants _arg1 );
    enum DimDualUnitPositionConstants GetDualUnitPosition ( );
    void PutDualUnitJustification (
        enum TextHorizontalAlignmentConstants _arg1 );
    enum TextHorizontalAlignmentConstants GetDualUnitJustification ( );
    void PutSmartDepthSlotThru (
        _bstr_t _arg1 );
    _bstr_t GetSmartDepthSlotThru ( );
    void PutSmartDepthSlotFinite (
        _bstr_t _arg1 );
    _bstr_t GetSmartDepthSlotFinite ( );
    void PutSlotCalloutSimple (
        _bstr_t _arg1 );
    _bstr_t GetSlotCalloutSimple ( );
    void PutSlotCalloutCounterbore (
        _bstr_t _arg1 );
    _bstr_t GetSlotCalloutCounterbore ( );
    void PutCoordinateTextOrientation (
        enum DimTextOrientationConstants _arg1 );
    enum DimTextOrientationConstants GetCoordinateTextOrientation ( );
    void PutEnableAutoJogForCoordinate (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetEnableAutoJogForCoordinate ( );
    void PutAllowNegativeValueForCoordinate (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetAllowNegativeValueForCoordinate ( );
    void PutAllowOriginValueChangeForCoordinate (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetAllowOriginValueChangeForCoordinate ( );
    void PutShowOriginLineForCoordinate (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowOriginLineForCoordinate ( );
    void PutOverlineExtension (
        double _arg1 );
    double GetOverlineExtension ( );
    void PutSuppressSymmetricDiameterSymbol (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetSuppressSymmetricDiameterSymbol ( );
    void PutUnderlineSymbolAndPrefix (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetUnderlineSymbolAndPrefix ( );
    void PutInitialStackPitch (
        double _arg1 );
    double GetInitialStackPitch ( );
    void PutHoleCalloutCounterdrill (
        _bstr_t _arg1 );
    _bstr_t GetHoleCalloutCounterdrill ( );
    void PutHoleCalloutCounterdrillThreaded (
        _bstr_t _arg1 );
    _bstr_t GetHoleCalloutCounterdrillThreaded ( );
    void PutPrimaryStackFraction (
        enum DimStackFractionTypeConstants _arg1 );
    enum DimStackFractionTypeConstants GetPrimaryStackFraction ( );
    void PutSecondaryStackFraction (
        enum DimStackFractionTypeConstants _arg1 );
    enum DimStackFractionTypeConstants GetSecondaryStackFraction ( );
    void PutPrimaryStackFractionSize (
        enum DimStackFractionSizeConstants _arg1 );
    enum DimStackFractionSizeConstants GetPrimaryStackFractionSize ( );
    void PutSecondaryStackFractionSize (
        enum DimStackFractionSizeConstants _arg1 );
    enum DimStackFractionSizeConstants GetSecondaryStackFractionSize ( );
    void PutShowHideReferenceGeometry (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowHideReferenceGeometry ( );
    void PutEnableAngularJog (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetEnableAngularJog ( );
};

enum DimLinearUnitConstants
{
    igDimStyleLinearFtIn = 1,
    igDimStyleLinearMeters = 2,
    igDimStyleLinearMM = 3,
    igDimStyleLinearCM = 4,
    igDimStyleLinearInches = 5,
    igDimStyleLinearFeet = 6
};

enum DimRoundOffTypeConstants
{
    igDimStyleDecimal = 1,
    igDimStyleFraction = 2
};

enum DimDelimiterTypeConstants
{
    igDimStyleDelimiterDot = 1,
    igDimStyleDelimiterComma = 2,
    igDimStyleDelimiterSpace = 3
};

enum DimDecimalRoundOffTypeConstants
{
    igDimStyleDecimal10 = 1,
    igDimStyleDecimal1 = 2,
    igDimStyleDecimal_1 = 3,
    igDimStyleDecimal_2 = 4,
    igDimStyleDecimal_3 = 5,
    igDimStyleDecimal_4 = 6,
    igDimStyleDecimal_5 = 7,
    igDimStyleDecimal_6 = 8,
    igDimStyleDecimal_7 = 9
};

enum DimFractionRoundOffTypeConstants
{
    igDimStyleFraction_1 = 1,
    igDimStyleFraction_2 = 2,
    igDimStyleFraction_4 = 3,
    igDimStyleFraction_8 = 4,
    igDimStyleFraction_16 = 5,
    igDimStyleFraction_32 = 6,
    igDimStyleFraction_64 = 7
};

enum DimAngularUnitConstants
{
    igDimStyleAngularDegMinSec = 1,
    igDimStyleAngularRadians = 2,
    igDimStyleAngularDegrees = 3
};

enum DimDMSRoundOffTypeConstants
{
    igDimStyleAngular10Degree = 1,
    igDimStyleAngular1Degree = 2,
    igDimStyleAngular10Minute = 3,
    igDimStyleAngular1Minute = 4,
    igDimStyleAngular10Second = 5,
    igDimStyleAngular1Second = 6
};

enum DimTextFontStyleConstants
{
    igDimStyleFontNormal = 1,
    igDimStyleFontBold = 2,
    igDimStyleFontItalic = 3,
    igDimStyleFontItalicBold = 4
};

enum DimTextOrientationConstants
{
    igDimStyleTextHorizontal = 1,
    igDimStyleTextVertical = 2,
    igDimStyleTextParallel = 3,
    igDimStyleTextPerpendicular = 4
};

enum DimTextPositionConstants
{
    igDimStyleTextAbove = 1,
    igDimStyleTextEmbedded = 2
};

enum DimLimitTextArrangmentConstants
{
    igDimStyleLimitTextHorizontal = 1,
    igDimStyleLimitTextVertical = 2
};

enum DimNTSTypeConstants
{
    igDimStyleNTSNone = 1,
    igDimStyleNTSUnderline = 2,
    igDimStyleNTSZigzag = 3
};

enum DimTermTypeConstants
{
    igDimStyleTermHollow = 1,
    igDimStyleTermFilled = 2,
    igDimStyleTermOpen = 3,
    igDimStyleTermSlash = 4,
    igDimStyleTermBackSlash = 5,
    igDimStyleTermBlank = 6,
    igDimStyleTermDot = 7,
    igDimStyleTermCircle = 8,
    igDimStyleTermUserDefined = 9,
    igDimStyleTermAnchor = 10,
    igDimStyleTermToolPoint = 11,
    igDimStyleTermLine = 12,
    igDimStyleTermAnchorHollow = 13,
    igDimStyleTermDoubleArrowHollow = 14,
    igDimStyleTermDoubleArrowFilled = 15,
    igDimStyleTermDoubleArrowOpen = 16
};

enum DimTermDisplayTypeConstants
{
    igDimStyleTermNone = 0,
    igDimStyleTermOrig = 1,
    igDimStyleTermMeas = 2,
    igDimStyleTermBoth = 3
};

enum DimDatumTermTypeConstants
{
    igDimStyleDatumTermNormal = 1,
    igDimStyleDatumTermAnchor = 2,
    igDimStyleDatumTermLine = 3,
    igDimStyleDatumTermAnchorHollow = 4
};

enum DimCommonOriginTypeConstants
{
    igDimStyleCommonOrigNone = 6,
    igDimStyleCommonOrigDot = 7,
    igDimStyleCommonOrigCircle = 8
};

enum DimCoordTextPositionConstants
{
    igDimStyleCoordTextAbove = 1,
    igDimStyleCoordTextInLine = 2
};

enum DimSymbolPositionConstants
{
    igDimStyleSymbolNone = 1,
    igDimStyleSymbolBefore = 2,
    igDimStyleSymbolAfter = 3
};

enum DimScaleModeConstants
{
    igDimStyleScaleManual = 0,
    igDimStyleScaleAutomatic = 1
};

enum DimProjDisplayTypeConstants
{
    igDimStyleProjLineNone = 0,
    igDimStyleProjLineOrig = 1,
    igDimStyleProjLineMeas = 2,
    igDimStyleProjLineBoth = 3
};

enum DimProjTolZonePositionConstants
{
    igDimStyleProjTolZoneInLine = 1,
    igDimStyleProjTolZoneBelow = 2
};

enum DimViewCuttingPlaneDisplayTypeConstants
{
    igDimViewCuttingPlaneLineDisplayTo = 1,
    igDimViewCuttingPlaneLineDisplayFrom = 2
};

enum DimViewPlaneDisplayTypeConstants
{
    igDimViewPlaneLineDisplaySingle = 1,
    igDimViewPlaneLineDisplayDouble = 2
};

enum DimOffsetLeaderTypeConstants
{
    igDimStyleOffsetLeaderLine = 1
};

enum DimRoundUpTypeConstants
{
    igDimStyleRoundUpAll = 1,
    igDimStyleRoundUpOdd = 2
};

enum DimStyleSymbolFontConstants
{
    igDimStyleSymbolFontANSI = 1,
    igDimStyleSymbolFontISO = 2
};

enum DimStyleDatumFrameShapeConstants
{
    igDimStyleDatumFrameShapeRectangle = 1,
    igDimStyleDatumFrameShapeCircle = 2
};

enum DimStyleSecondaryUnitSeparatorConstants
{
    igDimStyleSecondaryUnitSeparatorNothing = 0,
    igDimStyleSecondaryUnitSeparatorParenthesis = 1,
    igDimStyleSecondaryUnitSeparatorBrackets = 2
};

enum DimHoleShaftSeparatorTypeConstants
{
    igDimStyleShowHoleShaftSeparatorTypeAsSlash = 1,
    igDimStyleShowHoleShaftSeparatorTypeAsSeparator = 2,
    igDimStyleShowHoleShaftSeparatorTypeAsSpace = 3
};

enum TextVerticalAlignmentConstants
{
    igTextVtAlignTop = 0,
    igTextHzAlignVCenter = 1,
    igTextHzAlignBottom = 8
};

enum DimToleranceTextHorizontalAlignOptionsConstants
{
    igDimStyleToleranceTextHorizontalAlignBySign = 1,
    igDimStyleToleranceTextHorizontalAlignByDecimalPoint = 2
};

enum DimDatumTargetTermTypeConstants
{
    igDimStyleDatumTargetTermHollow = 1,
    igDimStyleDatumTargetTermFilled = 2,
    igDimStyleDatumTargetTermOpen = 3,
    igDimStyleDatumTargetTermBlank = 4
};

enum DimPinSymbolTermTypeConstants
{
    igDimStylePinSymbolTermHollow = 1,
    igDimStylePinSymbolTermFilled = 2,
    igDimStylePinSymbolTermOpen = 3,
    igDimStylePinSymbolTermBlank = 4
};

enum DimDualUnitPositionConstants
{
    igDimStyleDualUnitPositionAsBelowPrimary = 1,
    igDimStyleDualUnitPositionAsBesidePrimary = 2
};

enum TextHorizontalAlignmentConstants
{
    igTextHzAlignLeft = 0,
    igTextHzAlignCenter = 1,
    igTextHzAlignRight = 2,
    igTextHzAlignIndent = 3,
    igTextHzAlignJustify = 16
};

enum DimStackFractionTypeConstants
{
    igDimStyleFractionStacked = 1,
    igDimStyleFractionSkewed = 2,
    igDimStyleFractionLinear = 3
};

enum DimStackFractionSizeConstants
{
    igDimStyleFractSize50 = 1,
    igDimStyleFractSize60 = 2,
    igDimStyleFractSize66 = 3,
    igDimStyleFractSize70 = 4,
    igDimStyleFractSize75 = 5,
    igDimStyleFractSize80 = 6,
    igDimStyleFractSize90 = 7,
    igDimStyleFractSize100 = 8
};

struct __declspec(uuid("a1315ee0-31e0-11ce-93f4-080036373002"))
_IDimStyleAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetPrimaryUnits,put=PutPrimaryUnits))
    enum DimLinearUnitConstants PrimaryUnits;
    __declspec(property(get=GetRoundOffType,put=PutRoundOffType))
    enum DimRoundOffTypeConstants RoundOffType;
    __declspec(property(get=GetDelimiter,put=PutDelimiter))
    enum DimDelimiterTypeConstants Delimiter;
    __declspec(property(get=GetPrimaryDecimalRoundOff,put=PutPrimaryDecimalRoundOff))
    enum DimDecimalRoundOffTypeConstants PrimaryDecimalRoundOff;
    __declspec(property(get=GetPrimaryFractionRoundOff,put=PutPrimaryFractionRoundOff))
    enum DimFractionRoundOffTypeConstants PrimaryFractionRoundOff;
    __declspec(property(get=GetAngularUnits,put=PutAngularUnits))
    enum DimAngularUnitConstants AngularUnits;
    __declspec(property(get=GetAngularDMSRoundOff,put=PutAngularDMSRoundOff))
    enum DimDMSRoundOffTypeConstants AngularDMSRoundOff;
    __declspec(property(get=GetAngularDecimalRoundOff,put=PutAngularDecimalRoundOff))
    enum DimDecimalRoundOffTypeConstants AngularDecimalRoundOff;
    __declspec(property(get=GetAngularFractionRoundOff,put=PutAngularFractionRoundOff))
    enum DimFractionRoundOffTypeConstants AngularFractionRoundOff;
    __declspec(property(get=GetPrimaryLeadingZeros,put=PutPrimaryLeadingZeros))
    VARIANT_BOOL PrimaryLeadingZeros;
    __declspec(property(get=GetPrimaryTrailingZeros,put=PutPrimaryTrailingZeros))
    VARIANT_BOOL PrimaryTrailingZeros;
    __declspec(property(get=GetPrimaryUnitLabel,put=PutPrimaryUnitLabel))
    _bstr_t PrimaryUnitLabel;
    __declspec(property(get=GetPrimarySubunitsLabel,put=PutPrimarySubunitsLabel))
    _bstr_t PrimarySubunitsLabel;
    __declspec(property(get=GetMaximumSubunits,put=PutMaximumSubunits))
    int MaximumSubunits;
    __declspec(property(get=GetDualDisplay,put=PutDualDisplay))
    VARIANT_BOOL DualDisplay;
    __declspec(property(get=GetSecondaryUnits,put=PutSecondaryUnits))
    enum DimLinearUnitConstants SecondaryUnits;
    __declspec(property(get=GetSecondaryUnitRoundOff,put=PutSecondaryUnitRoundOff))
    enum DimRoundOffTypeConstants SecondaryUnitRoundOff;
    __declspec(property(get=GetSecondaryDecimalRoundOff,put=PutSecondaryDecimalRoundOff))
    enum DimDecimalRoundOffTypeConstants SecondaryDecimalRoundOff;
    __declspec(property(get=GetSecondaryFractionRoundOff,put=PutSecondaryFractionRoundOff))
    enum DimFractionRoundOffTypeConstants SecondaryFractionRoundOff;
    __declspec(property(get=GetSecondaryLeadingZeros,put=PutSecondaryLeadingZeros))
    VARIANT_BOOL SecondaryLeadingZeros;
    __declspec(property(get=GetSecondaryTrailingZeros,put=PutSecondaryTrailingZeros))
    VARIANT_BOOL SecondaryTrailingZeros;
    __declspec(property(get=GetSecondaryUnitLabel,put=PutSecondaryUnitLabel))
    _bstr_t SecondaryUnitLabel;
    __declspec(property(get=GetSecondarySubunitsLabel,put=PutSecondarySubunitsLabel))
    _bstr_t SecondarySubunitsLabel;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetRatio,put=PutRatio))
    double Ratio;
    __declspec(property(get=GetTextWeight,put=PutTextWeight))
    double TextWeight;
    __declspec(property(get=GetFont,put=PutFont))
    _bstr_t Font;
    __declspec(property(get=GetFontStyle,put=PutFontStyle))
    enum DimTextFontStyleConstants FontStyle;
    __declspec(property(get=GetTextOrientation,put=PutTextOrientation))
    enum DimTextOrientationConstants TextOrientation;
    __declspec(property(get=GetTextPosition,put=PutTextPosition))
    enum DimTextPositionConstants TextPosition;
    __declspec(property(get=GetCoordinateTextPosition,put=PutCoordinateTextPosition))
    enum DimCoordTextPositionConstants CoordinateTextPosition;
    __declspec(property(get=GetLimitTextArrangement,put=PutLimitTextArrangement))
    enum DimLimitTextArrangmentConstants LimitTextArrangement;
    __declspec(property(get=GetToleranceHeightRatio,put=PutToleranceHeightRatio))
    double ToleranceHeightRatio;
    __declspec(property(get=GetToleranceWeight,put=PutToleranceWeight))
    double ToleranceWeight;
    __declspec(property(get=GetTextClearanceGap,put=PutTextClearanceGap))
    double TextClearanceGap;
    __declspec(property(get=GetDualModeVerticalGap,put=PutDualModeVerticalGap))
    double DualModeVerticalGap;
    __declspec(property(get=GetCharacterPitch,put=PutCharacterPitch))
    double CharacterPitch;
    __declspec(property(get=GetLineSpacing,put=PutLineSpacing))
    double LineSpacing;
    __declspec(property(get=GetAboveGap,put=PutAboveGap))
    double AboveGap;
    __declspec(property(get=GetHorizontalToleranceGap,put=PutHorizontalToleranceGap))
    double HorizontalToleranceGap;
    __declspec(property(get=GetVerticalToleranceGap,put=PutVerticalToleranceGap))
    double VerticalToleranceGap;
    __declspec(property(get=GetVerticalLimitsGap,put=PutVerticalLimitsGap))
    double VerticalLimitsGap;
    __declspec(property(get=GetHorizontalBoxGap,put=PutHorizontalBoxGap))
    double HorizontalBoxGap;
    __declspec(property(get=GetVerticalBoxGap,put=PutVerticalBoxGap))
    double VerticalBoxGap;
    __declspec(property(get=GetPrefixSuffixGap,put=PutPrefixSuffixGap))
    double PrefixSuffixGap;
    __declspec(property(get=GetSymbolGap,put=PutSymbolGap))
    double SymbolGap;
    __declspec(property(get=GetNTSSymbol,put=PutNTSSymbol))
    enum DimNTSTypeConstants NTSSymbol;
    __declspec(property(get=GetTerminatorType,put=PutTerminatorType))
    enum DimTermTypeConstants TerminatorType;
    __declspec(property(get=GetTerminatorDisplay,put=PutTerminatorDisplay))
    enum DimTermDisplayTypeConstants TerminatorDisplay;
    __declspec(property(get=GetOriginTerminatorType,put=PutOriginTerminatorType))
    enum DimTermTypeConstants OriginTerminatorType;
    __declspec(property(get=GetFreeSpaceTerminatorType,put=PutFreeSpaceTerminatorType))
    enum DimTermTypeConstants FreeSpaceTerminatorType;
    __declspec(property(get=GetDatumTerminatorType,put=PutDatumTerminatorType))
    enum DimDatumTermTypeConstants DatumTerminatorType;
    __declspec(property(get=GetTerminatorSize,put=PutTerminatorSize))
    double TerminatorSize;
    __declspec(property(get=GetTerminatorInsideLimit,put=PutTerminatorInsideLimit))
    double TerminatorInsideLimit;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    double LineWidth;
    __declspec(property(get=GetProjectionExtensionGap,put=PutProjectionExtensionGap))
    double ProjectionExtensionGap;
    __declspec(property(get=GetProjectionOffsetGap,put=PutProjectionOffsetGap))
    double ProjectionOffsetGap;
    __declspec(property(get=GetProjectionOffsetGapAlignment,put=PutProjectionOffsetGapAlignment))
    VARIANT_BOOL ProjectionOffsetGapAlignment;
    __declspec(property(get=GetProjectionAngle,put=PutProjectionAngle))
    double ProjectionAngle;
    __declspec(property(get=GetLineConnect,put=PutLineConnect))
    VARIANT_BOOL LineConnect;
    __declspec(property(get=GetStackPitch,put=PutStackPitch))
    double StackPitch;
    __declspec(property(get=GetLeaderLineLength,put=PutLeaderLineLength))
    double LeaderLineLength;
    __declspec(property(get=GetProjectionLineDisplay,put=PutProjectionLineDisplay))
    enum DimProjDisplayTypeConstants ProjectionLineDisplay;
    __declspec(property(get=GetAutoCenterLine,put=PutAutoCenterLine))
    VARIANT_BOOL AutoCenterLine;
    __declspec(property(get=GetAutoCenterProjectionLine,put=PutAutoCenterProjectionLine))
    VARIANT_BOOL AutoCenterProjectionLine;
    __declspec(property(get=GetCoordinateAutoJog,put=PutCoordinateAutoJog))
    VARIANT_BOOL CoordinateAutoJog;
    __declspec(property(get=GetCoordinateStackPitch,put=PutCoordinateStackPitch))
    double CoordinateStackPitch;
    __declspec(property(get=GetCommonOrigin,put=PutCommonOrigin))
    enum DimCommonOriginTypeConstants CommonOrigin;
    __declspec(property(get=GetSymbolPosition,put=PutSymbolPosition))
    enum DimSymbolPositionConstants SymbolPosition;
    __declspec(property(get=GetAutoSuppressDiameter,put=PutAutoSuppressDiameter))
    VARIANT_BOOL AutoSuppressDiameter;
    __declspec(property(get=GetDimensionScaleMode,put=PutDimensionScaleMode))
    enum DimScaleModeConstants DimensionScaleMode;
    __declspec(property(get=GetDimensionScale,put=PutDimensionScale))
    double DimensionScale;
    __declspec(property(get=GetDrivingColor,put=PutDrivingColor))
    long DrivingColor;
    __declspec(property(get=GetDrivenColor,put=PutDrivenColor))
    long DrivenColor;
    __declspec(property(get=GetErrorColor,put=PutErrorColor))
    long ErrorColor;
    __declspec(property(get=GetMaximumViewAngle,put=PutMaximumViewAngle))
    double MaximumViewAngle;
    __declspec(property(get=GetProjectionToleranceZonePosition,put=PutProjectionToleranceZonePosition))
    enum DimProjTolZonePositionConstants ProjectionToleranceZonePosition;
    __declspec(property(get=GetDatumFrameDashes,put=PutDatumFrameDashes))
    VARIANT_BOOL DatumFrameDashes;
    __declspec(property(get=GetViewTextRatio,put=PutViewTextRatio))
    double ViewTextRatio;
    __declspec(property(get=GetViewTerminatorRatio,put=PutViewTerminatorRatio))
    double ViewTerminatorRatio;
    __declspec(property(get=GetViewLineWidth,put=PutViewLineWidth))
    double ViewLineWidth;
    __declspec(property(get=GetViewLineType,put=PutViewLineType))
    _bstr_t ViewLineType;
    __declspec(property(get=GetViewCuttingPlaneLineDisplay,put=PutViewCuttingPlaneLineDisplay))
    enum DimViewCuttingPlaneDisplayTypeConstants ViewCuttingPlaneLineDisplay;
    __declspec(property(get=GetViewPlaneLineDisplay,put=PutViewPlaneLineDisplay))
    enum DimViewPlaneDisplayTypeConstants ViewPlaneLineDisplay;
    __declspec(property(get=GetSecondaryToleranceEquivalent,put=PutSecondaryToleranceEquivalent))
    VARIANT_BOOL SecondaryToleranceEquivalent;
    __declspec(property(get=GetOffsetLeaderType,put=PutOffsetLeaderType))
    enum DimOffsetLeaderTypeConstants OffsetLeaderType;
    __declspec(property(get=GetCenterLineType,put=PutCenterLineType))
    _bstr_t CenterLineType;
    __declspec(property(get=GetRoundUp,put=PutRoundUp))
    enum DimRoundUpTypeConstants RoundUp;
    __declspec(property(get=GetSecondaryLinearRoundOffType,put=PutSecondaryLinearRoundOffType))
    enum DimRoundOffTypeConstants SecondaryLinearRoundOffType;
    __declspec(property(get=GetAngularRoundOffType,put=PutAngularRoundOffType))
    enum DimRoundOffTypeConstants AngularRoundOffType;
    __declspec(property(get=GetCenterMarkExtension,put=PutCenterMarkExtension))
    double CenterMarkExtension;
    __declspec(property(get=GetChamferUse45DegreeCharacter,put=PutChamferUse45DegreeCharacter))
    VARIANT_BOOL ChamferUse45DegreeCharacter;
    __declspec(property(get=GetSmartDepthHoleThru,put=PutSmartDepthHoleThru))
    _bstr_t SmartDepthHoleThru;
    __declspec(property(get=GetSmartDepthHoleFinite,put=PutSmartDepthHoleFinite))
    _bstr_t SmartDepthHoleFinite;
    __declspec(property(get=GetSmartDepthThreadThru,put=PutSmartDepthThreadThru))
    _bstr_t SmartDepthThreadThru;
    __declspec(property(get=GetSmartDepthThreadFinite,put=PutSmartDepthThreadFinite))
    _bstr_t SmartDepthThreadFinite;
    __declspec(property(get=GetLowerCaseMultiplicationSymbol,put=PutLowerCaseMultiplicationSymbol))
    VARIANT_BOOL LowerCaseMultiplicationSymbol;
    __declspec(property(get=GetPinSymbolTerminatorType,put=PutPinSymbolTerminatorType))
    enum DimPinSymbolTermTypeConstants PinSymbolTerminatorType;
    __declspec(property(get=GetCenterMarkSize,put=PutCenterMarkSize))
    double CenterMarkSize;
    __declspec(property(get=GetAutoPhase,put=PutAutoPhase))
    VARIANT_BOOL AutoPhase;
    __declspec(property(get=GetHoleCalloutSimple,put=PutHoleCalloutSimple))
    _bstr_t HoleCalloutSimple;
    __declspec(property(get=GetHoleCalloutCounterbore,put=PutHoleCalloutCounterbore))
    _bstr_t HoleCalloutCounterbore;
    __declspec(property(get=GetHoleCalloutCountersink,put=PutHoleCalloutCountersink))
    _bstr_t HoleCalloutCountersink;
    __declspec(property(get=GetHoleCalloutSimpleThreaded,put=PutHoleCalloutSimpleThreaded))
    _bstr_t HoleCalloutSimpleThreaded;
    __declspec(property(get=GetHoleCalloutCounterboreThreaded,put=PutHoleCalloutCounterboreThreaded))
    _bstr_t HoleCalloutCounterboreThreaded;
    __declspec(property(get=GetHoleCalloutCountersinkThreaded,put=PutHoleCalloutCountersinkThreaded))
    _bstr_t HoleCalloutCountersinkThreaded;
    __declspec(property(get=GetApplyBreakLineGap,put=PutApplyBreakLineGap))
    VARIANT_BOOL ApplyBreakLineGap;
    __declspec(property(get=GetTextAutoFillBackground,put=PutTextAutoFillBackground))
    VARIANT_BOOL TextAutoFillBackground;
    __declspec(property(get=GetPulledOutTextOrientation,put=PutPulledOutTextOrientation))
    enum DimTextOrientationConstants PulledOutTextOrientation;
    __declspec(property(get=GetPulledOutTextPosition,put=PutPulledOutTextPosition))
    enum DimTextPositionConstants PulledOutTextPosition;
    __declspec(property(get=GetOverridePulledOutText,put=PutOverridePulledOutText))
    VARIANT_BOOL OverridePulledOutText;
    __declspec(property(get=GetViewLineArrowOffset,put=PutViewLineArrowOffset))
    double ViewLineArrowOffset;
    __declspec(property(get=GetViewThickLineLength,put=PutViewThickLineLength))
    double ViewThickLineLength;
    __declspec(property(get=GetOrigTerminatorSize,put=PutOrigTerminatorSize))
    double OrigTerminatorSize;
    __declspec(property(get=GetConnectorLineType,put=PutConnectorLineType))
    _bstr_t ConnectorLineType;
    __declspec(property(get=GetConnectorColor,put=PutConnectorColor))
    long ConnectorColor;
    __declspec(property(get=GetConnectorWidth,put=PutConnectorWidth))
    double ConnectorWidth;
    __declspec(property(get=GetFractionSeparator,put=PutFractionSeparator))
    _bstr_t FractionSeparator;
    __declspec(property(get=GetHeightPMI,put=PutHeightPMI))
    double HeightPMI;
    __declspec(property(get=GetProjectionBreakGap,put=PutProjectionBreakGap))
    double ProjectionBreakGap;
    __declspec(property(get=GetSecondaryDelimiter,put=PutSecondaryDelimiter))
    enum DimDelimiterTypeConstants SecondaryDelimiter;
    __declspec(property(get=GetMatchPrimaryDelimiter,put=PutMatchPrimaryDelimiter))
    VARIANT_BOOL MatchPrimaryDelimiter;
    __declspec(property(get=GetInhibitZeroToleranceDisplay,put=PutInhibitZeroToleranceDisplay))
    VARIANT_BOOL InhibitZeroToleranceDisplay;
    __declspec(property(get=GetAllAroundMultiplier,put=PutAllAroundMultiplier))
    double AllAroundMultiplier;
    __declspec(property(get=GetPulledOutText2Orientation,put=PutPulledOutText2Orientation))
    enum DimTextOrientationConstants PulledOutText2Orientation;
    __declspec(property(get=GetPulledOutText2Position,put=PutPulledOutText2Position))
    enum DimTextPositionConstants PulledOutText2Position;
    __declspec(property(get=GetOverridePulledOutText2,put=PutOverridePulledOutText2))
    VARIANT_BOOL OverridePulledOutText2;
    __declspec(property(get=GetDisplayDegreeSymbolOnNumericTolerance,put=PutDisplayDegreeSymbolOnNumericTolerance))
    VARIANT_BOOL DisplayDegreeSymbolOnNumericTolerance;
    __declspec(property(get=GetZeroInchesForFTIN,put=PutZeroInchesForFTIN))
    VARIANT_BOOL ZeroInchesForFTIN;
    __declspec(property(get=GetSymbolFont,put=PutSymbolFont))
    enum DimStyleSymbolFontConstants SymbolFont;
    __declspec(property(get=GetDatumTerminatorGap,put=PutDatumTerminatorGap))
    double DatumTerminatorGap;
    __declspec(property(get=GetDatumFrameShape,put=PutDatumFrameShape))
    enum DimStyleDatumFrameShapeConstants DatumFrameShape;
    __declspec(property(get=GetDisplayCoordinateOriginText,put=PutDisplayCoordinateOriginText))
    VARIANT_BOOL DisplayCoordinateOriginText;
    __declspec(property(get=GetPlacePrefixInsideBasicDimensionBox,put=PutPlacePrefixInsideBasicDimensionBox))
    VARIANT_BOOL PlacePrefixInsideBasicDimensionBox;
    __declspec(property(get=GetSecondaryUnitSeparator,put=PutSecondaryUnitSeparator))
    enum DimStyleSecondaryUnitSeparatorConstants SecondaryUnitSeparator;
    __declspec(property(get=GetWeldSymbolLineWidth,put=PutWeldSymbolLineWidth))
    double WeldSymbolLineWidth;
    __declspec(property(get=GetThreeSidedSymbolOffsetGap,put=PutThreeSidedSymbolOffsetGap))
    double ThreeSidedSymbolOffsetGap;
    __declspec(property(get=GetHoleShaftToleranceSeparatorType,put=PutHoleShaftToleranceSeparatorType))
    enum DimHoleShaftSeparatorTypeConstants HoleShaftToleranceSeparatorType;
    __declspec(property(get=GetToleranceTextVerticalAlignment,put=PutToleranceTextVerticalAlignment))
    enum TextVerticalAlignmentConstants ToleranceTextVerticalAlignment;
    __declspec(property(get=GetToleranceTextHorizontalAlignment,put=PutToleranceTextHorizontalAlignment))
    enum DimToleranceTextHorizontalAlignOptionsConstants ToleranceTextHorizontalAlignment;
    __declspec(property(get=GetUseTextSizeForCombinedTolValueDisplay,put=PutUseTextSizeForCombinedTolValueDisplay))
    VARIANT_BOOL UseTextSizeForCombinedTolValueDisplay;
    __declspec(property(get=GetDatumFrameLineTermThickness,put=PutDatumFrameLineTermThickness))
    double DatumFrameLineTermThickness;
    __declspec(property(get=GetDatumTargetTerminatorType,put=PutDatumTargetTerminatorType))
    enum DimDatumTargetTermTypeConstants DatumTargetTerminatorType;
    __declspec(property(get=GetPrimaryLinearToleranceUnits,put=PutPrimaryLinearToleranceUnits))
    enum DimLinearUnitConstants PrimaryLinearToleranceUnits;
    __declspec(property(get=GetPrimaryLinearToleranceRoundOffType,put=PutPrimaryLinearToleranceRoundOffType))
    enum DimRoundOffTypeConstants PrimaryLinearToleranceRoundOffType;
    __declspec(property(get=GetPrimaryLinearToleranceDecimalRoundOff,put=PutPrimaryLinearToleranceDecimalRoundOff))
    enum DimDecimalRoundOffTypeConstants PrimaryLinearToleranceDecimalRoundOff;
    __declspec(property(get=GetPrimaryLinearToleranceFractionRoundOff,put=PutPrimaryLinearToleranceFractionRoundOff))
    enum DimFractionRoundOffTypeConstants PrimaryLinearToleranceFractionRoundOff;
    __declspec(property(get=GetPrimaryLinearToleranceUnitLabel,put=PutPrimaryLinearToleranceUnitLabel))
    _bstr_t PrimaryLinearToleranceUnitLabel;
    __declspec(property(get=GetPrimaryLinearToleranceSubunitsLabel,put=PutPrimaryLinearToleranceSubunitsLabel))
    _bstr_t PrimaryLinearToleranceSubunitsLabel;
    __declspec(property(get=GetPrimaryLinearToleranceMaximumSubunits,put=PutPrimaryLinearToleranceMaximumSubunits))
    int PrimaryLinearToleranceMaximumSubunits;
    __declspec(property(get=GetPrimaryLinearToleranceFractionSeparator,put=PutPrimaryLinearToleranceFractionSeparator))
    _bstr_t PrimaryLinearToleranceFractionSeparator;
    __declspec(property(get=GetAngularToleranceUnits,put=PutAngularToleranceUnits))
    enum DimAngularUnitConstants AngularToleranceUnits;
    __declspec(property(get=GetAngularToleranceRoundOffType,put=PutAngularToleranceRoundOffType))
    enum DimRoundOffTypeConstants AngularToleranceRoundOffType;
    __declspec(property(get=GetAngularToleranceDMSRoundOff,put=PutAngularToleranceDMSRoundOff))
    enum DimDMSRoundOffTypeConstants AngularToleranceDMSRoundOff;
    __declspec(property(get=GetAngularToleranceDecimalRoundOff,put=PutAngularToleranceDecimalRoundOff))
    enum DimDecimalRoundOffTypeConstants AngularToleranceDecimalRoundOff;
    __declspec(property(get=GetAngularToleranceFractionRoundOff,put=PutAngularToleranceFractionRoundOff))
    enum DimFractionRoundOffTypeConstants AngularToleranceFractionRoundOff;
    __declspec(property(get=GetSecondaryLinearToleranceUnits,put=PutSecondaryLinearToleranceUnits))
    enum DimLinearUnitConstants SecondaryLinearToleranceUnits;
    __declspec(property(get=GetSecondaryLinearToleranceRoundOffType,put=PutSecondaryLinearToleranceRoundOffType))
    enum DimRoundOffTypeConstants SecondaryLinearToleranceRoundOffType;
    __declspec(property(get=GetSecondaryLinearToleranceDecimalRoundOff,put=PutSecondaryLinearToleranceDecimalRoundOff))
    enum DimDecimalRoundOffTypeConstants SecondaryLinearToleranceDecimalRoundOff;
    __declspec(property(get=GetSecondaryLinearToleranceFractionRoundOff,put=PutSecondaryLinearToleranceFractionRoundOff))
    enum DimFractionRoundOffTypeConstants SecondaryLinearToleranceFractionRoundOff;
    __declspec(property(get=GetSecondaryLinearToleranceUnitLabel,put=PutSecondaryLinearToleranceUnitLabel))
    _bstr_t SecondaryLinearToleranceUnitLabel;
    __declspec(property(get=GetSecondaryLinearToleranceSubunitsLabel,put=PutSecondaryLinearToleranceSubunitsLabel))
    _bstr_t SecondaryLinearToleranceSubunitsLabel;
    __declspec(property(get=GetSecondaryLinearToleranceMaximumSubunits,put=PutSecondaryLinearToleranceMaximumSubunits))
    int SecondaryLinearToleranceMaximumSubunits;
    __declspec(property(get=GetSecondaryLinearToleranceFractionSeparator,put=PutSecondaryLinearToleranceFractionSeparator))
    _bstr_t SecondaryLinearToleranceFractionSeparator;
    __declspec(property(get=GetSecondaryLinearFractionSeparator,put=PutSecondaryLinearFractionSeparator))
    _bstr_t SecondaryLinearFractionSeparator;
    __declspec(property(get=GetDualUnitPosition,put=PutDualUnitPosition))
    enum DimDualUnitPositionConstants DualUnitPosition;
    __declspec(property(get=GetDualUnitJustification,put=PutDualUnitJustification))
    enum TextHorizontalAlignmentConstants DualUnitJustification;
    __declspec(property(get=GetSmartDepthSlotThru,put=PutSmartDepthSlotThru))
    _bstr_t SmartDepthSlotThru;
    __declspec(property(get=GetSmartDepthSlotFinite,put=PutSmartDepthSlotFinite))
    _bstr_t SmartDepthSlotFinite;
    __declspec(property(get=GetSlotCalloutSimple,put=PutSlotCalloutSimple))
    _bstr_t SlotCalloutSimple;
    __declspec(property(get=GetSlotCalloutCounterbore,put=PutSlotCalloutCounterbore))
    _bstr_t SlotCalloutCounterbore;
    __declspec(property(get=GetCoordinateTextOrientation,put=PutCoordinateTextOrientation))
    enum DimTextOrientationConstants CoordinateTextOrientation;
    __declspec(property(get=GetEnableAutoJogForCoordinate,put=PutEnableAutoJogForCoordinate))
    VARIANT_BOOL EnableAutoJogForCoordinate;
    __declspec(property(get=GetAllowNegativeValueForCoordinate,put=PutAllowNegativeValueForCoordinate))
    VARIANT_BOOL AllowNegativeValueForCoordinate;
    __declspec(property(get=GetAllowOriginValueChangeForCoordinate,put=PutAllowOriginValueChangeForCoordinate))
    VARIANT_BOOL AllowOriginValueChangeForCoordinate;
    __declspec(property(get=GetShowOriginLineForCoordinate,put=PutShowOriginLineForCoordinate))
    VARIANT_BOOL ShowOriginLineForCoordinate;
    __declspec(property(get=GetOverlineExtension,put=PutOverlineExtension))
    double OverlineExtension;
    __declspec(property(get=GetSuppressSymmetricDiameterSymbol,put=PutSuppressSymmetricDiameterSymbol))
    VARIANT_BOOL SuppressSymmetricDiameterSymbol;
    __declspec(property(get=GetUnderlineSymbolAndPrefix,put=PutUnderlineSymbolAndPrefix))
    VARIANT_BOOL UnderlineSymbolAndPrefix;
    __declspec(property(get=GetInitialStackPitch,put=PutInitialStackPitch))
    double InitialStackPitch;
    __declspec(property(get=GetHoleCalloutCounterdrill,put=PutHoleCalloutCounterdrill))
    _bstr_t HoleCalloutCounterdrill;
    __declspec(property(get=GetHoleCalloutCounterdrillThreaded,put=PutHoleCalloutCounterdrillThreaded))
    _bstr_t HoleCalloutCounterdrillThreaded;
    __declspec(property(get=GetPrimaryStackFraction,put=PutPrimaryStackFraction))
    enum DimStackFractionTypeConstants PrimaryStackFraction;
    __declspec(property(get=GetSecondaryStackFraction,put=PutSecondaryStackFraction))
    enum DimStackFractionTypeConstants SecondaryStackFraction;
    __declspec(property(get=GetPrimaryStackFractionSize,put=PutPrimaryStackFractionSize))
    enum DimStackFractionSizeConstants PrimaryStackFractionSize;
    __declspec(property(get=GetSecondaryStackFractionSize,put=PutSecondaryStackFractionSize))
    enum DimStackFractionSizeConstants SecondaryStackFractionSize;
    __declspec(property(get=GetProjectionLineDisplayForIntersectionPoint,put=PutProjectionLineDisplayForIntersectionPoint))
    enum DimProjDisplayTypeConstants ProjectionLineDisplayForIntersectionPoint;
    __declspec(property(get=GetShowHideReferenceGeometry,put=PutShowHideReferenceGeometry))
    VARIANT_BOOL ShowHideReferenceGeometry;
    __declspec(property(get=GetEnableAngularJog,put=PutEnableAngularJog))
    VARIANT_BOOL EnableAngularJog;

    //
    // Wrapper methods for error-handling
    //

    void PutName (
        _bstr_t Name );
    _bstr_t GetName ( );
    void PutPrimaryUnits (
        enum DimLinearUnitConstants val );
    enum DimLinearUnitConstants GetPrimaryUnits ( );
    void PutRoundOffType (
        enum DimRoundOffTypeConstants val );
    enum DimRoundOffTypeConstants GetRoundOffType ( );
    void PutDelimiter (
        enum DimDelimiterTypeConstants val );
    enum DimDelimiterTypeConstants GetDelimiter ( );
    void PutPrimaryDecimalRoundOff (
        enum DimDecimalRoundOffTypeConstants val );
    enum DimDecimalRoundOffTypeConstants GetPrimaryDecimalRoundOff ( );
    void PutPrimaryFractionRoundOff (
        enum DimFractionRoundOffTypeConstants val );
    enum DimFractionRoundOffTypeConstants GetPrimaryFractionRoundOff ( );
    void PutAngularUnits (
        enum DimAngularUnitConstants val );
    enum DimAngularUnitConstants GetAngularUnits ( );
    void PutAngularDMSRoundOff (
        enum DimDMSRoundOffTypeConstants val );
    enum DimDMSRoundOffTypeConstants GetAngularDMSRoundOff ( );
    void PutAngularDecimalRoundOff (
        enum DimDecimalRoundOffTypeConstants val );
    enum DimDecimalRoundOffTypeConstants GetAngularDecimalRoundOff ( );
    void PutAngularFractionRoundOff (
        enum DimFractionRoundOffTypeConstants val );
    enum DimFractionRoundOffTypeConstants GetAngularFractionRoundOff ( );
    void PutPrimaryLeadingZeros (
        VARIANT_BOOL val );
    VARIANT_BOOL GetPrimaryLeadingZeros ( );
    void PutPrimaryTrailingZeros (
        VARIANT_BOOL val );
    VARIANT_BOOL GetPrimaryTrailingZeros ( );
    void PutPrimaryUnitLabel (
        _bstr_t val );
    _bstr_t GetPrimaryUnitLabel ( );
    void PutPrimarySubunitsLabel (
        _bstr_t val );
    _bstr_t GetPrimarySubunitsLabel ( );
    void PutMaximumSubunits (
        int val );
    int GetMaximumSubunits ( );
    void PutDualDisplay (
        VARIANT_BOOL val );
    VARIANT_BOOL GetDualDisplay ( );
    void PutSecondaryUnits (
        enum DimLinearUnitConstants val );
    enum DimLinearUnitConstants GetSecondaryUnits ( );
    void PutSecondaryUnitRoundOff (
        enum DimRoundOffTypeConstants val );
    enum DimRoundOffTypeConstants GetSecondaryUnitRoundOff ( );
    void PutSecondaryDecimalRoundOff (
        enum DimDecimalRoundOffTypeConstants val );
    enum DimDecimalRoundOffTypeConstants GetSecondaryDecimalRoundOff ( );
    void PutSecondaryFractionRoundOff (
        enum DimFractionRoundOffTypeConstants val );
    enum DimFractionRoundOffTypeConstants GetSecondaryFractionRoundOff ( );
    void PutSecondaryLeadingZeros (
        VARIANT_BOOL val );
    VARIANT_BOOL GetSecondaryLeadingZeros ( );
    void PutSecondaryTrailingZeros (
        VARIANT_BOOL val );
    VARIANT_BOOL GetSecondaryTrailingZeros ( );
    void PutSecondaryUnitLabel (
        _bstr_t val );
    _bstr_t GetSecondaryUnitLabel ( );
    void PutSecondarySubunitsLabel (
        _bstr_t val );
    _bstr_t GetSecondarySubunitsLabel ( );
    void PutHeight (
        double val );
    double GetHeight ( );
    void PutRatio (
        double val );
    double GetRatio ( );
    void PutTextWeight (
        double val );
    double GetTextWeight ( );
    void PutFont (
        _bstr_t val );
    _bstr_t GetFont ( );
    void PutFontStyle (
        enum DimTextFontStyleConstants val );
    enum DimTextFontStyleConstants GetFontStyle ( );
    void PutTextOrientation (
        enum DimTextOrientationConstants val );
    enum DimTextOrientationConstants GetTextOrientation ( );
    void PutTextPosition (
        enum DimTextPositionConstants val );
    enum DimTextPositionConstants GetTextPosition ( );
    void PutLimitTextArrangement (
        enum DimLimitTextArrangmentConstants val );
    enum DimLimitTextArrangmentConstants GetLimitTextArrangement ( );
    void PutToleranceHeightRatio (
        double val );
    double GetToleranceHeightRatio ( );
    void PutToleranceWeight (
        double val );
    double GetToleranceWeight ( );
    void PutNTSSymbol (
        enum DimNTSTypeConstants val );
    enum DimNTSTypeConstants GetNTSSymbol ( );
    void PutTerminatorType (
        enum DimTermTypeConstants val );
    enum DimTermTypeConstants GetTerminatorType ( );
    void PutTerminatorDisplay (
        enum DimTermDisplayTypeConstants val );
    enum DimTermDisplayTypeConstants GetTerminatorDisplay ( );
    void PutOriginTerminatorType (
        enum DimTermTypeConstants val );
    enum DimTermTypeConstants GetOriginTerminatorType ( );
    void PutFreeSpaceTerminatorType (
        enum DimTermTypeConstants val );
    enum DimTermTypeConstants GetFreeSpaceTerminatorType ( );
    void PutDatumTerminatorType (
        enum DimDatumTermTypeConstants val );
    enum DimDatumTermTypeConstants GetDatumTerminatorType ( );
    void PutTerminatorSize (
        double val );
    double GetTerminatorSize ( );
    void PutTerminatorInsideLimit (
        double val );
    double GetTerminatorInsideLimit ( );
    void PutLineWidth (
        double val );
    double GetLineWidth ( );
    void PutProjectionExtensionGap (
        double val );
    double GetProjectionExtensionGap ( );
    void PutProjectionOffsetGap (
        double val );
    double GetProjectionOffsetGap ( );
    void PutProjectionOffsetGapAlignment (
        VARIANT_BOOL val );
    VARIANT_BOOL GetProjectionOffsetGapAlignment ( );
    void PutProjectionAngle (
        double val );
    double GetProjectionAngle ( );
    void PutLineConnect (
        VARIANT_BOOL val );
    VARIANT_BOOL GetLineConnect ( );
    void PutStackPitch (
        double val );
    double GetStackPitch ( );
    void PutLeaderLineLength (
        double val );
    double GetLeaderLineLength ( );
    void PutCoordinateAutoJog (
        VARIANT_BOOL val );
    VARIANT_BOOL GetCoordinateAutoJog ( );
    void PutCoordinateStackPitch (
        double val );
    double GetCoordinateStackPitch ( );
    void PutCommonOrigin (
        enum DimCommonOriginTypeConstants val );
    enum DimCommonOriginTypeConstants GetCommonOrigin ( );
    void PutCoordinateTextPosition (
        enum DimCoordTextPositionConstants val );
    enum DimCoordTextPositionConstants GetCoordinateTextPosition ( );
    void PutSymbolPosition (
        enum DimSymbolPositionConstants val );
    enum DimSymbolPositionConstants GetSymbolPosition ( );
    void PutAutoSuppressDiameter (
        VARIANT_BOOL val );
    VARIANT_BOOL GetAutoSuppressDiameter ( );
    void PutDimensionScaleMode (
        enum DimScaleModeConstants val );
    enum DimScaleModeConstants GetDimensionScaleMode ( );
    void PutDimensionScale (
        double val );
    double GetDimensionScale ( );
    void PutErrorColor (
        long val );
    long GetErrorColor ( );
    void PutDrivingColor (
        long val );
    long GetDrivingColor ( );
    void PutDrivenColor (
        long val );
    long GetDrivenColor ( );
    void PutAutoCenterLine (
        VARIANT_BOOL val );
    VARIANT_BOOL GetAutoCenterLine ( );
    void PutAutoCenterProjectionLine (
        VARIANT_BOOL val );
    VARIANT_BOOL GetAutoCenterProjectionLine ( );
    void PutProjectionLineDisplay (
        enum DimProjDisplayTypeConstants val );
    enum DimProjDisplayTypeConstants GetProjectionLineDisplay ( );
    void PutProjectionLineDisplayForIntersectionPoint (
        enum DimProjDisplayTypeConstants val );
    enum DimProjDisplayTypeConstants GetProjectionLineDisplayForIntersectionPoint ( );
    void PutTextClearanceGap (
        double val );
    double GetTextClearanceGap ( );
    void PutDualModeVerticalGap (
        double val );
    double GetDualModeVerticalGap ( );
    void PutCharacterPitch (
        double val );
    double GetCharacterPitch ( );
    void PutLineSpacing (
        double val );
    double GetLineSpacing ( );
    void PutAboveGap (
        double val );
    double GetAboveGap ( );
    void PutHorizontalToleranceGap (
        double val );
    double GetHorizontalToleranceGap ( );
    void PutVerticalToleranceGap (
        double val );
    double GetVerticalToleranceGap ( );
    void PutVerticalLimitsGap (
        double val );
    double GetVerticalLimitsGap ( );
    void PutHorizontalBoxGap (
        double val );
    double GetHorizontalBoxGap ( );
    void PutVerticalBoxGap (
        double val );
    double GetVerticalBoxGap ( );
    void PutPrefixSuffixGap (
        double val );
    double GetPrefixSuffixGap ( );
    void PutSymbolGap (
        double val );
    double GetSymbolGap ( );
    void PutMaximumViewAngle (
        double val );
    double GetMaximumViewAngle ( );
    void PutProjectionToleranceZonePosition (
        enum DimProjTolZonePositionConstants val );
    enum DimProjTolZonePositionConstants GetProjectionToleranceZonePosition ( );
    void PutDatumFrameDashes (
        VARIANT_BOOL val );
    VARIANT_BOOL GetDatumFrameDashes ( );
    void PutViewTextRatio (
        double val );
    double GetViewTextRatio ( );
    void PutViewTerminatorRatio (
        double val );
    double GetViewTerminatorRatio ( );
    void PutViewLineWidth (
        double val );
    double GetViewLineWidth ( );
    void PutViewLineType (
        _bstr_t val );
    _bstr_t GetViewLineType ( );
    void PutViewCuttingPlaneLineDisplay (
        enum DimViewCuttingPlaneDisplayTypeConstants val );
    enum DimViewCuttingPlaneDisplayTypeConstants GetViewCuttingPlaneLineDisplay ( );
    void PutViewPlaneLineDisplay (
        enum DimViewPlaneDisplayTypeConstants val );
    enum DimViewPlaneDisplayTypeConstants GetViewPlaneLineDisplay ( );
    void PutOffsetLeaderType (
        enum DimOffsetLeaderTypeConstants val );
    enum DimOffsetLeaderTypeConstants GetOffsetLeaderType ( );
    void PutSecondaryToleranceEquivalent (
        VARIANT_BOOL val );
    VARIANT_BOOL GetSecondaryToleranceEquivalent ( );
    void PutCenterLineType (
        _bstr_t val );
    _bstr_t GetCenterLineType ( );
    void PutCenterMarkSize (
        double val );
    double GetCenterMarkSize ( );
    void PutAutoPhase (
        VARIANT_BOOL val );
    VARIANT_BOOL GetAutoPhase ( );
    HRESULT UseActiveStyle ( );
    void PutRoundUp (
        enum DimRoundUpTypeConstants val );
    enum DimRoundUpTypeConstants GetRoundUp ( );
    void PutSecondaryLinearRoundOffType (
        enum DimRoundOffTypeConstants val );
    enum DimRoundOffTypeConstants GetSecondaryLinearRoundOffType ( );
    void PutAngularRoundOffType (
        enum DimRoundOffTypeConstants val );
    enum DimRoundOffTypeConstants GetAngularRoundOffType ( );
    void PutCenterMarkExtension (
        double val );
    double GetCenterMarkExtension ( );
    void PutChamferUse45DegreeCharacter (
        VARIANT_BOOL val );
    VARIANT_BOOL GetChamferUse45DegreeCharacter ( );
    void PutSmartDepthHoleThru (
        _bstr_t val );
    _bstr_t GetSmartDepthHoleThru ( );
    void PutSmartDepthHoleFinite (
        _bstr_t val );
    _bstr_t GetSmartDepthHoleFinite ( );
    void PutSmartDepthThreadThru (
        _bstr_t val );
    _bstr_t GetSmartDepthThreadThru ( );
    void PutSmartDepthThreadFinite (
        _bstr_t val );
    _bstr_t GetSmartDepthThreadFinite ( );
    void PutLowerCaseMultiplicationSymbol (
        VARIANT_BOOL val );
    VARIANT_BOOL GetLowerCaseMultiplicationSymbol ( );
    void PutHoleCalloutSimple (
        _bstr_t val );
    _bstr_t GetHoleCalloutSimple ( );
    void PutHoleCalloutCounterbore (
        _bstr_t val );
    _bstr_t GetHoleCalloutCounterbore ( );
    void PutHoleCalloutCountersink (
        _bstr_t val );
    _bstr_t GetHoleCalloutCountersink ( );
    void PutHoleCalloutSimpleThreaded (
        _bstr_t val );
    _bstr_t GetHoleCalloutSimpleThreaded ( );
    void PutHoleCalloutCounterboreThreaded (
        _bstr_t val );
    _bstr_t GetHoleCalloutCounterboreThreaded ( );
    void PutHoleCalloutCountersinkThreaded (
        _bstr_t val );
    _bstr_t GetHoleCalloutCountersinkThreaded ( );
    void PutApplyBreakLineGap (
        VARIANT_BOOL val );
    VARIANT_BOOL GetApplyBreakLineGap ( );
    void PutTextAutoFillBackground (
        VARIANT_BOOL val );
    VARIANT_BOOL GetTextAutoFillBackground ( );
    void PutPulledOutTextOrientation (
        enum DimTextOrientationConstants val );
    enum DimTextOrientationConstants GetPulledOutTextOrientation ( );
    void PutPulledOutTextPosition (
        enum DimTextPositionConstants val );
    enum DimTextPositionConstants GetPulledOutTextPosition ( );
    void PutOverridePulledOutText (
        VARIANT_BOOL val );
    VARIANT_BOOL GetOverridePulledOutText ( );
    void PutViewLineArrowOffset (
        double val );
    double GetViewLineArrowOffset ( );
    void PutViewThickLineLength (
        double val );
    double GetViewThickLineLength ( );
    void PutOrigTerminatorSize (
        double val );
    double GetOrigTerminatorSize ( );
    void PutConnectorLineType (
        _bstr_t val );
    _bstr_t GetConnectorLineType ( );
    void PutConnectorColor (
        long val );
    long GetConnectorColor ( );
    void PutConnectorWidth (
        double val );
    double GetConnectorWidth ( );
    void PutFractionSeparator (
        _bstr_t val );
    _bstr_t GetFractionSeparator ( );
    void PutHeightPMI (
        double val );
    double GetHeightPMI ( );
    void PutProjectionBreakGap (
        double val );
    double GetProjectionBreakGap ( );
    void PutSecondaryDelimiter (
        enum DimDelimiterTypeConstants val );
    enum DimDelimiterTypeConstants GetSecondaryDelimiter ( );
    void PutMatchPrimaryDelimiter (
        VARIANT_BOOL val );
    VARIANT_BOOL GetMatchPrimaryDelimiter ( );
    void PutInhibitZeroToleranceDisplay (
        VARIANT_BOOL val );
    VARIANT_BOOL GetInhibitZeroToleranceDisplay ( );
    void PutAllAroundMultiplier (
        double val );
    double GetAllAroundMultiplier ( );
    void PutOverridePulledOutText2 (
        VARIANT_BOOL val );
    VARIANT_BOOL GetOverridePulledOutText2 ( );
    void PutPulledOutText2Orientation (
        enum DimTextOrientationConstants val );
    enum DimTextOrientationConstants GetPulledOutText2Orientation ( );
    void PutPulledOutText2Position (
        enum DimTextPositionConstants val );
    enum DimTextPositionConstants GetPulledOutText2Position ( );
    void PutDisplayDegreeSymbolOnNumericTolerance (
        VARIANT_BOOL val );
    VARIANT_BOOL GetDisplayDegreeSymbolOnNumericTolerance ( );
    void PutZeroInchesForFTIN (
        VARIANT_BOOL val );
    VARIANT_BOOL GetZeroInchesForFTIN ( );
    void PutSymbolFont (
        enum DimStyleSymbolFontConstants val );
    enum DimStyleSymbolFontConstants GetSymbolFont ( );
    void PutDatumTerminatorGap (
        double val );
    double GetDatumTerminatorGap ( );
    void PutDatumFrameShape (
        enum DimStyleDatumFrameShapeConstants val );
    enum DimStyleDatumFrameShapeConstants GetDatumFrameShape ( );
    void PutDisplayCoordinateOriginText (
        VARIANT_BOOL val );
    VARIANT_BOOL GetDisplayCoordinateOriginText ( );
    void PutPlacePrefixInsideBasicDimensionBox (
        VARIANT_BOOL val );
    VARIANT_BOOL GetPlacePrefixInsideBasicDimensionBox ( );
    void PutSecondaryUnitSeparator (
        enum DimStyleSecondaryUnitSeparatorConstants val );
    enum DimStyleSecondaryUnitSeparatorConstants GetSecondaryUnitSeparator ( );
    void PutWeldSymbolLineWidth (
        double val );
    double GetWeldSymbolLineWidth ( );
    void PutThreeSidedSymbolOffsetGap (
        double val );
    double GetThreeSidedSymbolOffsetGap ( );
    void PutHoleShaftToleranceSeparatorType (
        enum DimHoleShaftSeparatorTypeConstants val );
    enum DimHoleShaftSeparatorTypeConstants GetHoleShaftToleranceSeparatorType ( );
    void PutToleranceTextVerticalAlignment (
        enum TextVerticalAlignmentConstants val );
    enum TextVerticalAlignmentConstants GetToleranceTextVerticalAlignment ( );
    void PutToleranceTextHorizontalAlignment (
        enum DimToleranceTextHorizontalAlignOptionsConstants val );
    enum DimToleranceTextHorizontalAlignOptionsConstants GetToleranceTextHorizontalAlignment ( );
    void PutUseTextSizeForCombinedTolValueDisplay (
        VARIANT_BOOL val );
    VARIANT_BOOL GetUseTextSizeForCombinedTolValueDisplay ( );
    void PutDatumFrameLineTermThickness (
        double pdDatumFrameLineTermThickness );
    double GetDatumFrameLineTermThickness ( );
    void PutDatumTargetTerminatorType (
        enum DimDatumTargetTermTypeConstants val );
    enum DimDatumTargetTermTypeConstants GetDatumTargetTerminatorType ( );
    void PutPinSymbolTerminatorType (
        enum DimPinSymbolTermTypeConstants val );
    enum DimPinSymbolTermTypeConstants GetPinSymbolTerminatorType ( );
    void PutPrimaryLinearToleranceUnits (
        enum DimLinearUnitConstants val );
    enum DimLinearUnitConstants GetPrimaryLinearToleranceUnits ( );
    void PutPrimaryLinearToleranceRoundOffType (
        enum DimRoundOffTypeConstants val );
    enum DimRoundOffTypeConstants GetPrimaryLinearToleranceRoundOffType ( );
    void PutPrimaryLinearToleranceDecimalRoundOff (
        enum DimDecimalRoundOffTypeConstants val );
    enum DimDecimalRoundOffTypeConstants GetPrimaryLinearToleranceDecimalRoundOff ( );
    void PutPrimaryLinearToleranceFractionRoundOff (
        enum DimFractionRoundOffTypeConstants val );
    enum DimFractionRoundOffTypeConstants GetPrimaryLinearToleranceFractionRoundOff ( );
    void PutPrimaryLinearToleranceUnitLabel (
        _bstr_t val );
    _bstr_t GetPrimaryLinearToleranceUnitLabel ( );
    void PutPrimaryLinearToleranceSubunitsLabel (
        _bstr_t val );
    _bstr_t GetPrimaryLinearToleranceSubunitsLabel ( );
    void PutPrimaryLinearToleranceMaximumSubunits (
        int val );
    int GetPrimaryLinearToleranceMaximumSubunits ( );
    void PutPrimaryLinearToleranceFractionSeparator (
        _bstr_t val );
    _bstr_t GetPrimaryLinearToleranceFractionSeparator ( );
    void PutAngularToleranceUnits (
        enum DimAngularUnitConstants val );
    enum DimAngularUnitConstants GetAngularToleranceUnits ( );
    void PutAngularToleranceRoundOffType (
        enum DimRoundOffTypeConstants val );
    enum DimRoundOffTypeConstants GetAngularToleranceRoundOffType ( );
    void PutAngularToleranceDMSRoundOff (
        enum DimDMSRoundOffTypeConstants val );
    enum DimDMSRoundOffTypeConstants GetAngularToleranceDMSRoundOff ( );
    void PutAngularToleranceDecimalRoundOff (
        enum DimDecimalRoundOffTypeConstants val );
    enum DimDecimalRoundOffTypeConstants GetAngularToleranceDecimalRoundOff ( );
    void PutAngularToleranceFractionRoundOff (
        enum DimFractionRoundOffTypeConstants val );
    enum DimFractionRoundOffTypeConstants GetAngularToleranceFractionRoundOff ( );
    void PutSecondaryLinearToleranceUnits (
        enum DimLinearUnitConstants val );
    enum DimLinearUnitConstants GetSecondaryLinearToleranceUnits ( );
    void PutSecondaryLinearToleranceRoundOffType (
        enum DimRoundOffTypeConstants val );
    enum DimRoundOffTypeConstants GetSecondaryLinearToleranceRoundOffType ( );
    void PutSecondaryLinearToleranceDecimalRoundOff (
        enum DimDecimalRoundOffTypeConstants val );
    enum DimDecimalRoundOffTypeConstants GetSecondaryLinearToleranceDecimalRoundOff ( );
    void PutSecondaryLinearToleranceFractionRoundOff (
        enum DimFractionRoundOffTypeConstants val );
    enum DimFractionRoundOffTypeConstants GetSecondaryLinearToleranceFractionRoundOff ( );
    void PutSecondaryLinearToleranceUnitLabel (
        _bstr_t val );
    _bstr_t GetSecondaryLinearToleranceUnitLabel ( );
    void PutSecondaryLinearToleranceSubunitsLabel (
        _bstr_t val );
    _bstr_t GetSecondaryLinearToleranceSubunitsLabel ( );
    void PutSecondaryLinearToleranceMaximumSubunits (
        int val );
    int GetSecondaryLinearToleranceMaximumSubunits ( );
    void PutSecondaryLinearToleranceFractionSeparator (
        _bstr_t val );
    _bstr_t GetSecondaryLinearToleranceFractionSeparator ( );
    void PutSecondaryLinearFractionSeparator (
        _bstr_t val );
    _bstr_t GetSecondaryLinearFractionSeparator ( );
    void PutDualUnitPosition (
        enum DimDualUnitPositionConstants val );
    enum DimDualUnitPositionConstants GetDualUnitPosition ( );
    void PutDualUnitJustification (
        enum TextHorizontalAlignmentConstants val );
    enum TextHorizontalAlignmentConstants GetDualUnitJustification ( );
    void PutSmartDepthSlotThru (
        _bstr_t val );
    _bstr_t GetSmartDepthSlotThru ( );
    void PutSmartDepthSlotFinite (
        _bstr_t val );
    _bstr_t GetSmartDepthSlotFinite ( );
    void PutSlotCalloutSimple (
        _bstr_t val );
    _bstr_t GetSlotCalloutSimple ( );
    void PutSlotCalloutCounterbore (
        _bstr_t val );
    _bstr_t GetSlotCalloutCounterbore ( );
    void PutCoordinateTextOrientation (
        enum DimTextOrientationConstants val );
    enum DimTextOrientationConstants GetCoordinateTextOrientation ( );
    void PutEnableAutoJogForCoordinate (
        VARIANT_BOOL val );
    VARIANT_BOOL GetEnableAutoJogForCoordinate ( );
    void PutAllowNegativeValueForCoordinate (
        VARIANT_BOOL val );
    VARIANT_BOOL GetAllowNegativeValueForCoordinate ( );
    void PutAllowOriginValueChangeForCoordinate (
        VARIANT_BOOL val );
    VARIANT_BOOL GetAllowOriginValueChangeForCoordinate ( );
    void PutShowOriginLineForCoordinate (
        VARIANT_BOOL val );
    VARIANT_BOOL GetShowOriginLineForCoordinate ( );
    void PutOverlineExtension (
        double val );
    double GetOverlineExtension ( );
    void PutSuppressSymmetricDiameterSymbol (
        VARIANT_BOOL val );
    VARIANT_BOOL GetSuppressSymmetricDiameterSymbol ( );
    void PutUnderlineSymbolAndPrefix (
        VARIANT_BOOL val );
    VARIANT_BOOL GetUnderlineSymbolAndPrefix ( );
    void PutInitialStackPitch (
        double val );
    double GetInitialStackPitch ( );
    void PutHoleCalloutCounterdrill (
        _bstr_t val );
    _bstr_t GetHoleCalloutCounterdrill ( );
    void PutHoleCalloutCounterdrillThreaded (
        _bstr_t val );
    _bstr_t GetHoleCalloutCounterdrillThreaded ( );
    void PutPrimaryStackFraction (
        enum DimStackFractionTypeConstants val );
    enum DimStackFractionTypeConstants GetPrimaryStackFraction ( );
    void PutSecondaryStackFraction (
        enum DimStackFractionTypeConstants val );
    enum DimStackFractionTypeConstants GetSecondaryStackFraction ( );
    void PutPrimaryStackFractionSize (
        enum DimStackFractionSizeConstants val );
    enum DimStackFractionSizeConstants GetPrimaryStackFractionSize ( );
    void PutSecondaryStackFractionSize (
        enum DimStackFractionSizeConstants val );
    enum DimStackFractionSizeConstants GetSecondaryStackFractionSize ( );
    void PutShowHideReferenceGeometry (
        VARIANT_BOOL val );
    VARIANT_BOOL GetShowHideReferenceGeometry ( );
    void PutEnableAngularJog (
        VARIANT_BOOL val );
    VARIANT_BOOL GetEnableAngularJog ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_PrimaryUnits (
        /*[in]*/ enum DimLinearUnitConstants val ) = 0;
      virtual HRESULT __stdcall get_PrimaryUnits (
        /*[out,retval]*/ enum DimLinearUnitConstants * val ) = 0;
      virtual HRESULT __stdcall put_RoundOffType (
        /*[in]*/ enum DimRoundOffTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_RoundOffType (
        /*[out,retval]*/ enum DimRoundOffTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_Delimiter (
        /*[in]*/ enum DimDelimiterTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_Delimiter (
        /*[out,retval]*/ enum DimDelimiterTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_PrimaryDecimalRoundOff (
        /*[in]*/ enum DimDecimalRoundOffTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_PrimaryDecimalRoundOff (
        /*[out,retval]*/ enum DimDecimalRoundOffTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_PrimaryFractionRoundOff (
        /*[in]*/ enum DimFractionRoundOffTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_PrimaryFractionRoundOff (
        /*[out,retval]*/ enum DimFractionRoundOffTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_AngularUnits (
        /*[in]*/ enum DimAngularUnitConstants val ) = 0;
      virtual HRESULT __stdcall get_AngularUnits (
        /*[out,retval]*/ enum DimAngularUnitConstants * val ) = 0;
      virtual HRESULT __stdcall put_AngularDMSRoundOff (
        /*[in]*/ enum DimDMSRoundOffTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_AngularDMSRoundOff (
        /*[out,retval]*/ enum DimDMSRoundOffTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_AngularDecimalRoundOff (
        /*[in]*/ enum DimDecimalRoundOffTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_AngularDecimalRoundOff (
        /*[out,retval]*/ enum DimDecimalRoundOffTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_AngularFractionRoundOff (
        /*[in]*/ enum DimFractionRoundOffTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_AngularFractionRoundOff (
        /*[out,retval]*/ enum DimFractionRoundOffTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_PrimaryLeadingZeros (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_PrimaryLeadingZeros (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_PrimaryTrailingZeros (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_PrimaryTrailingZeros (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_PrimaryUnitLabel (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_PrimaryUnitLabel (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_PrimarySubunitsLabel (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_PrimarySubunitsLabel (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_MaximumSubunits (
        /*[in]*/ int val ) = 0;
      virtual HRESULT __stdcall get_MaximumSubunits (
        /*[out,retval]*/ int * val ) = 0;
      virtual HRESULT __stdcall put_DualDisplay (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_DualDisplay (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryUnits (
        /*[in]*/ enum DimLinearUnitConstants val ) = 0;
      virtual HRESULT __stdcall get_SecondaryUnits (
        /*[out,retval]*/ enum DimLinearUnitConstants * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryUnitRoundOff (
        /*[in]*/ enum DimRoundOffTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_SecondaryUnitRoundOff (
        /*[out,retval]*/ enum DimRoundOffTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryDecimalRoundOff (
        /*[in]*/ enum DimDecimalRoundOffTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_SecondaryDecimalRoundOff (
        /*[out,retval]*/ enum DimDecimalRoundOffTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryFractionRoundOff (
        /*[in]*/ enum DimFractionRoundOffTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_SecondaryFractionRoundOff (
        /*[out,retval]*/ enum DimFractionRoundOffTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryLeadingZeros (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_SecondaryLeadingZeros (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryTrailingZeros (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_SecondaryTrailingZeros (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryUnitLabel (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_SecondaryUnitLabel (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_SecondarySubunitsLabel (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_SecondarySubunitsLabel (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_Ratio (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_Ratio (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_TextWeight (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_TextWeight (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_Font (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_FontStyle (
        /*[in]*/ enum DimTextFontStyleConstants val ) = 0;
      virtual HRESULT __stdcall get_FontStyle (
        /*[out,retval]*/ enum DimTextFontStyleConstants * val ) = 0;
      virtual HRESULT __stdcall put_TextOrientation (
        /*[in]*/ enum DimTextOrientationConstants val ) = 0;
      virtual HRESULT __stdcall get_TextOrientation (
        /*[out,retval]*/ enum DimTextOrientationConstants * val ) = 0;
      virtual HRESULT __stdcall put_TextPosition (
        /*[in]*/ enum DimTextPositionConstants val ) = 0;
      virtual HRESULT __stdcall get_TextPosition (
        /*[out,retval]*/ enum DimTextPositionConstants * val ) = 0;
      virtual HRESULT __stdcall put_LimitTextArrangement (
        /*[in]*/ enum DimLimitTextArrangmentConstants val ) = 0;
      virtual HRESULT __stdcall get_LimitTextArrangement (
        /*[out,retval]*/ enum DimLimitTextArrangmentConstants * val ) = 0;
      virtual HRESULT __stdcall put_ToleranceHeightRatio (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_ToleranceHeightRatio (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_ToleranceWeight (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_ToleranceWeight (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_NTSSymbol (
        /*[in]*/ enum DimNTSTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_NTSSymbol (
        /*[out,retval]*/ enum DimNTSTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_TerminatorType (
        /*[in]*/ enum DimTermTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_TerminatorType (
        /*[out,retval]*/ enum DimTermTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_TerminatorDisplay (
        /*[in]*/ enum DimTermDisplayTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_TerminatorDisplay (
        /*[out,retval]*/ enum DimTermDisplayTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_OriginTerminatorType (
        /*[in]*/ enum DimTermTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_OriginTerminatorType (
        /*[out,retval]*/ enum DimTermTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_FreeSpaceTerminatorType (
        /*[in]*/ enum DimTermTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_FreeSpaceTerminatorType (
        /*[out,retval]*/ enum DimTermTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_DatumTerminatorType (
        /*[in]*/ enum DimDatumTermTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_DatumTerminatorType (
        /*[out,retval]*/ enum DimDatumTermTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_TerminatorSize (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_TerminatorSize (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_TerminatorInsideLimit (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_TerminatorInsideLimit (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_ProjectionExtensionGap (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_ProjectionExtensionGap (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_ProjectionOffsetGap (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_ProjectionOffsetGap (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_ProjectionOffsetGapAlignment (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_ProjectionOffsetGapAlignment (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ProjectionAngle (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_ProjectionAngle (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_LineConnect (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_LineConnect (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_StackPitch (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_StackPitch (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_LeaderLineLength (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_LeaderLineLength (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_CoordinateAutoJog (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_CoordinateAutoJog (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_CoordinateStackPitch (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_CoordinateStackPitch (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_CommonOrigin (
        /*[in]*/ enum DimCommonOriginTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_CommonOrigin (
        /*[out,retval]*/ enum DimCommonOriginTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_CoordinateTextPosition (
        /*[in]*/ enum DimCoordTextPositionConstants val ) = 0;
      virtual HRESULT __stdcall get_CoordinateTextPosition (
        /*[out,retval]*/ enum DimCoordTextPositionConstants * val ) = 0;
      virtual HRESULT __stdcall put_SymbolPosition (
        /*[in]*/ enum DimSymbolPositionConstants val ) = 0;
      virtual HRESULT __stdcall get_SymbolPosition (
        /*[out,retval]*/ enum DimSymbolPositionConstants * val ) = 0;
      virtual HRESULT __stdcall put_AutoSuppressDiameter (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_AutoSuppressDiameter (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_DimensionScaleMode (
        /*[in]*/ enum DimScaleModeConstants val ) = 0;
      virtual HRESULT __stdcall get_DimensionScaleMode (
        /*[out,retval]*/ enum DimScaleModeConstants * val ) = 0;
      virtual HRESULT __stdcall put_DimensionScale (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_DimensionScale (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_ErrorColor (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_ErrorColor (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_DrivingColor (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_DrivingColor (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_DrivenColor (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_DrivenColor (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_AutoCenterLine (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_AutoCenterLine (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_AutoCenterProjectionLine (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_AutoCenterProjectionLine (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ProjectionLineDisplay (
        /*[in]*/ enum DimProjDisplayTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_ProjectionLineDisplay (
        /*[out,retval]*/ enum DimProjDisplayTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_ProjectionLineDisplayForIntersectionPoint (
        /*[in]*/ enum DimProjDisplayTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_ProjectionLineDisplayForIntersectionPoint (
        /*[out,retval]*/ enum DimProjDisplayTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_TextClearanceGap (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_TextClearanceGap (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_DualModeVerticalGap (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_DualModeVerticalGap (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_CharacterPitch (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_CharacterPitch (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_LineSpacing (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_LineSpacing (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_AboveGap (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_AboveGap (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_HorizontalToleranceGap (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_HorizontalToleranceGap (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_VerticalToleranceGap (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_VerticalToleranceGap (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_VerticalLimitsGap (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_VerticalLimitsGap (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_HorizontalBoxGap (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_HorizontalBoxGap (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_VerticalBoxGap (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_VerticalBoxGap (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_PrefixSuffixGap (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_PrefixSuffixGap (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_SymbolGap (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_SymbolGap (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_MaximumViewAngle (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_MaximumViewAngle (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_ProjectionToleranceZonePosition (
        /*[in]*/ enum DimProjTolZonePositionConstants val ) = 0;
      virtual HRESULT __stdcall get_ProjectionToleranceZonePosition (
        /*[out,retval]*/ enum DimProjTolZonePositionConstants * val ) = 0;
      virtual HRESULT __stdcall put_DatumFrameDashes (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_DatumFrameDashes (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ViewTextRatio (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_ViewTextRatio (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_ViewTerminatorRatio (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_ViewTerminatorRatio (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_ViewLineWidth (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_ViewLineWidth (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_ViewLineType (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_ViewLineType (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_ViewCuttingPlaneLineDisplay (
        /*[in]*/ enum DimViewCuttingPlaneDisplayTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_ViewCuttingPlaneLineDisplay (
        /*[out,retval]*/ enum DimViewCuttingPlaneDisplayTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_ViewPlaneLineDisplay (
        /*[in]*/ enum DimViewPlaneDisplayTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_ViewPlaneLineDisplay (
        /*[out,retval]*/ enum DimViewPlaneDisplayTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_OffsetLeaderType (
        /*[in]*/ enum DimOffsetLeaderTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_OffsetLeaderType (
        /*[out,retval]*/ enum DimOffsetLeaderTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryToleranceEquivalent (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_SecondaryToleranceEquivalent (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_CenterLineType (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_CenterLineType (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_CenterMarkSize (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_CenterMarkSize (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_AutoPhase (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_AutoPhase (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_UseActiveStyle ( ) = 0;
      virtual HRESULT __stdcall put_RoundUp (
        /*[in]*/ enum DimRoundUpTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_RoundUp (
        /*[out,retval]*/ enum DimRoundUpTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryLinearRoundOffType (
        /*[in]*/ enum DimRoundOffTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_SecondaryLinearRoundOffType (
        /*[out,retval]*/ enum DimRoundOffTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_AngularRoundOffType (
        /*[in]*/ enum DimRoundOffTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_AngularRoundOffType (
        /*[out,retval]*/ enum DimRoundOffTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_CenterMarkExtension (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_CenterMarkExtension (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_ChamferUse45DegreeCharacter (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_ChamferUse45DegreeCharacter (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_SmartDepthHoleThru (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_SmartDepthHoleThru (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_SmartDepthHoleFinite (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_SmartDepthHoleFinite (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_SmartDepthThreadThru (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_SmartDepthThreadThru (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_SmartDepthThreadFinite (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_SmartDepthThreadFinite (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_LowerCaseMultiplicationSymbol (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_LowerCaseMultiplicationSymbol (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_HoleCalloutSimple (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_HoleCalloutSimple (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_HoleCalloutCounterbore (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_HoleCalloutCounterbore (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_HoleCalloutCountersink (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_HoleCalloutCountersink (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_HoleCalloutSimpleThreaded (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_HoleCalloutSimpleThreaded (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_HoleCalloutCounterboreThreaded (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_HoleCalloutCounterboreThreaded (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_HoleCalloutCountersinkThreaded (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_HoleCalloutCountersinkThreaded (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_ApplyBreakLineGap (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_ApplyBreakLineGap (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_TextAutoFillBackground (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_TextAutoFillBackground (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_PulledOutTextOrientation (
        /*[in]*/ enum DimTextOrientationConstants val ) = 0;
      virtual HRESULT __stdcall get_PulledOutTextOrientation (
        /*[out,retval]*/ enum DimTextOrientationConstants * val ) = 0;
      virtual HRESULT __stdcall put_PulledOutTextPosition (
        /*[in]*/ enum DimTextPositionConstants val ) = 0;
      virtual HRESULT __stdcall get_PulledOutTextPosition (
        /*[out,retval]*/ enum DimTextPositionConstants * val ) = 0;
      virtual HRESULT __stdcall put_OverridePulledOutText (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_OverridePulledOutText (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ViewLineArrowOffset (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_ViewLineArrowOffset (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_ViewThickLineLength (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_ViewThickLineLength (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_OrigTerminatorSize (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_OrigTerminatorSize (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_ConnectorLineType (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_ConnectorLineType (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_ConnectorColor (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_ConnectorColor (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_ConnectorWidth (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_ConnectorWidth (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_FractionSeparator (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_FractionSeparator (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_HeightPMI (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_HeightPMI (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_ProjectionBreakGap (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_ProjectionBreakGap (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryDelimiter (
        /*[in]*/ enum DimDelimiterTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_SecondaryDelimiter (
        /*[out,retval]*/ enum DimDelimiterTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_MatchPrimaryDelimiter (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_MatchPrimaryDelimiter (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_InhibitZeroToleranceDisplay (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_InhibitZeroToleranceDisplay (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_AllAroundMultiplier (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_AllAroundMultiplier (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_OverridePulledOutText2 (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_OverridePulledOutText2 (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_PulledOutText2Orientation (
        /*[in]*/ enum DimTextOrientationConstants val ) = 0;
      virtual HRESULT __stdcall get_PulledOutText2Orientation (
        /*[out,retval]*/ enum DimTextOrientationConstants * val ) = 0;
      virtual HRESULT __stdcall put_PulledOutText2Position (
        /*[in]*/ enum DimTextPositionConstants val ) = 0;
      virtual HRESULT __stdcall get_PulledOutText2Position (
        /*[out,retval]*/ enum DimTextPositionConstants * val ) = 0;
      virtual HRESULT __stdcall put_DisplayDegreeSymbolOnNumericTolerance (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_DisplayDegreeSymbolOnNumericTolerance (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ZeroInchesForFTIN (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_ZeroInchesForFTIN (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_SymbolFont (
        /*[in]*/ enum DimStyleSymbolFontConstants val ) = 0;
      virtual HRESULT __stdcall get_SymbolFont (
        /*[out,retval]*/ enum DimStyleSymbolFontConstants * val ) = 0;
      virtual HRESULT __stdcall put_DatumTerminatorGap (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_DatumTerminatorGap (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_DatumFrameShape (
        /*[in]*/ enum DimStyleDatumFrameShapeConstants val ) = 0;
      virtual HRESULT __stdcall get_DatumFrameShape (
        /*[out,retval]*/ enum DimStyleDatumFrameShapeConstants * val ) = 0;
      virtual HRESULT __stdcall put_DisplayCoordinateOriginText (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_DisplayCoordinateOriginText (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_PlacePrefixInsideBasicDimensionBox (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_PlacePrefixInsideBasicDimensionBox (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryUnitSeparator (
        /*[in]*/ enum DimStyleSecondaryUnitSeparatorConstants val ) = 0;
      virtual HRESULT __stdcall get_SecondaryUnitSeparator (
        /*[out,retval]*/ enum DimStyleSecondaryUnitSeparatorConstants * val ) = 0;
      virtual HRESULT __stdcall put_WeldSymbolLineWidth (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_WeldSymbolLineWidth (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_ThreeSidedSymbolOffsetGap (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_ThreeSidedSymbolOffsetGap (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_HoleShaftToleranceSeparatorType (
        /*[in]*/ enum DimHoleShaftSeparatorTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_HoleShaftToleranceSeparatorType (
        /*[out,retval]*/ enum DimHoleShaftSeparatorTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_ToleranceTextVerticalAlignment (
        /*[in]*/ enum TextVerticalAlignmentConstants val ) = 0;
      virtual HRESULT __stdcall get_ToleranceTextVerticalAlignment (
        /*[out,retval]*/ enum TextVerticalAlignmentConstants * val ) = 0;
      virtual HRESULT __stdcall put_ToleranceTextHorizontalAlignment (
        /*[in]*/ enum DimToleranceTextHorizontalAlignOptionsConstants val ) = 0;
      virtual HRESULT __stdcall get_ToleranceTextHorizontalAlignment (
        /*[out,retval]*/ enum DimToleranceTextHorizontalAlignOptionsConstants * val ) = 0;
      virtual HRESULT __stdcall put_UseTextSizeForCombinedTolValueDisplay (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_UseTextSizeForCombinedTolValueDisplay (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_DatumFrameLineTermThickness (
        /*[in]*/ double pdDatumFrameLineTermThickness ) = 0;
      virtual HRESULT __stdcall get_DatumFrameLineTermThickness (
        /*[out,retval]*/ double * pdDatumFrameLineTermThickness ) = 0;
      virtual HRESULT __stdcall put_DatumTargetTerminatorType (
        /*[in]*/ enum DimDatumTargetTermTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_DatumTargetTerminatorType (
        /*[out,retval]*/ enum DimDatumTargetTermTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_PinSymbolTerminatorType (
        /*[in]*/ enum DimPinSymbolTermTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_PinSymbolTerminatorType (
        /*[out,retval]*/ enum DimPinSymbolTermTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_PrimaryLinearToleranceUnits (
        /*[in]*/ enum DimLinearUnitConstants val ) = 0;
      virtual HRESULT __stdcall get_PrimaryLinearToleranceUnits (
        /*[out,retval]*/ enum DimLinearUnitConstants * val ) = 0;
      virtual HRESULT __stdcall put_PrimaryLinearToleranceRoundOffType (
        /*[in]*/ enum DimRoundOffTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_PrimaryLinearToleranceRoundOffType (
        /*[out,retval]*/ enum DimRoundOffTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_PrimaryLinearToleranceDecimalRoundOff (
        /*[in]*/ enum DimDecimalRoundOffTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_PrimaryLinearToleranceDecimalRoundOff (
        /*[out,retval]*/ enum DimDecimalRoundOffTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_PrimaryLinearToleranceFractionRoundOff (
        /*[in]*/ enum DimFractionRoundOffTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_PrimaryLinearToleranceFractionRoundOff (
        /*[out,retval]*/ enum DimFractionRoundOffTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_PrimaryLinearToleranceUnitLabel (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_PrimaryLinearToleranceUnitLabel (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_PrimaryLinearToleranceSubunitsLabel (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_PrimaryLinearToleranceSubunitsLabel (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_PrimaryLinearToleranceMaximumSubunits (
        /*[in]*/ int val ) = 0;
      virtual HRESULT __stdcall get_PrimaryLinearToleranceMaximumSubunits (
        /*[out,retval]*/ int * val ) = 0;
      virtual HRESULT __stdcall put_PrimaryLinearToleranceFractionSeparator (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_PrimaryLinearToleranceFractionSeparator (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_AngularToleranceUnits (
        /*[in]*/ enum DimAngularUnitConstants val ) = 0;
      virtual HRESULT __stdcall get_AngularToleranceUnits (
        /*[out,retval]*/ enum DimAngularUnitConstants * val ) = 0;
      virtual HRESULT __stdcall put_AngularToleranceRoundOffType (
        /*[in]*/ enum DimRoundOffTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_AngularToleranceRoundOffType (
        /*[out,retval]*/ enum DimRoundOffTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_AngularToleranceDMSRoundOff (
        /*[in]*/ enum DimDMSRoundOffTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_AngularToleranceDMSRoundOff (
        /*[out,retval]*/ enum DimDMSRoundOffTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_AngularToleranceDecimalRoundOff (
        /*[in]*/ enum DimDecimalRoundOffTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_AngularToleranceDecimalRoundOff (
        /*[out,retval]*/ enum DimDecimalRoundOffTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_AngularToleranceFractionRoundOff (
        /*[in]*/ enum DimFractionRoundOffTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_AngularToleranceFractionRoundOff (
        /*[out,retval]*/ enum DimFractionRoundOffTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryLinearToleranceUnits (
        /*[in]*/ enum DimLinearUnitConstants val ) = 0;
      virtual HRESULT __stdcall get_SecondaryLinearToleranceUnits (
        /*[out,retval]*/ enum DimLinearUnitConstants * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryLinearToleranceRoundOffType (
        /*[in]*/ enum DimRoundOffTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_SecondaryLinearToleranceRoundOffType (
        /*[out,retval]*/ enum DimRoundOffTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryLinearToleranceDecimalRoundOff (
        /*[in]*/ enum DimDecimalRoundOffTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_SecondaryLinearToleranceDecimalRoundOff (
        /*[out,retval]*/ enum DimDecimalRoundOffTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryLinearToleranceFractionRoundOff (
        /*[in]*/ enum DimFractionRoundOffTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_SecondaryLinearToleranceFractionRoundOff (
        /*[out,retval]*/ enum DimFractionRoundOffTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryLinearToleranceUnitLabel (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_SecondaryLinearToleranceUnitLabel (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryLinearToleranceSubunitsLabel (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_SecondaryLinearToleranceSubunitsLabel (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryLinearToleranceMaximumSubunits (
        /*[in]*/ int val ) = 0;
      virtual HRESULT __stdcall get_SecondaryLinearToleranceMaximumSubunits (
        /*[out,retval]*/ int * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryLinearToleranceFractionSeparator (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_SecondaryLinearToleranceFractionSeparator (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryLinearFractionSeparator (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_SecondaryLinearFractionSeparator (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_DualUnitPosition (
        /*[in]*/ enum DimDualUnitPositionConstants val ) = 0;
      virtual HRESULT __stdcall get_DualUnitPosition (
        /*[out,retval]*/ enum DimDualUnitPositionConstants * val ) = 0;
      virtual HRESULT __stdcall put_DualUnitJustification (
        /*[in]*/ enum TextHorizontalAlignmentConstants val ) = 0;
      virtual HRESULT __stdcall get_DualUnitJustification (
        /*[out,retval]*/ enum TextHorizontalAlignmentConstants * val ) = 0;
      virtual HRESULT __stdcall put_SmartDepthSlotThru (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_SmartDepthSlotThru (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_SmartDepthSlotFinite (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_SmartDepthSlotFinite (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_SlotCalloutSimple (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_SlotCalloutSimple (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_SlotCalloutCounterbore (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_SlotCalloutCounterbore (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_CoordinateTextOrientation (
        /*[in]*/ enum DimTextOrientationConstants val ) = 0;
      virtual HRESULT __stdcall get_CoordinateTextOrientation (
        /*[out,retval]*/ enum DimTextOrientationConstants * val ) = 0;
      virtual HRESULT __stdcall put_EnableAutoJogForCoordinate (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_EnableAutoJogForCoordinate (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_AllowNegativeValueForCoordinate (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_AllowNegativeValueForCoordinate (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_AllowOriginValueChangeForCoordinate (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_AllowOriginValueChangeForCoordinate (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ShowOriginLineForCoordinate (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_ShowOriginLineForCoordinate (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_OverlineExtension (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_OverlineExtension (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_SuppressSymmetricDiameterSymbol (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_SuppressSymmetricDiameterSymbol (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_UnderlineSymbolAndPrefix (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_UnderlineSymbolAndPrefix (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_InitialStackPitch (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_InitialStackPitch (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_HoleCalloutCounterdrill (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_HoleCalloutCounterdrill (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_HoleCalloutCounterdrillThreaded (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_HoleCalloutCounterdrillThreaded (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_PrimaryStackFraction (
        /*[in]*/ enum DimStackFractionTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_PrimaryStackFraction (
        /*[out,retval]*/ enum DimStackFractionTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryStackFraction (
        /*[in]*/ enum DimStackFractionTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_SecondaryStackFraction (
        /*[out,retval]*/ enum DimStackFractionTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_PrimaryStackFractionSize (
        /*[in]*/ enum DimStackFractionSizeConstants val ) = 0;
      virtual HRESULT __stdcall get_PrimaryStackFractionSize (
        /*[out,retval]*/ enum DimStackFractionSizeConstants * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryStackFractionSize (
        /*[in]*/ enum DimStackFractionSizeConstants val ) = 0;
      virtual HRESULT __stdcall get_SecondaryStackFractionSize (
        /*[out,retval]*/ enum DimStackFractionSizeConstants * val ) = 0;
      virtual HRESULT __stdcall put_ShowHideReferenceGeometry (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_ShowHideReferenceGeometry (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_EnableAngularJog (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_EnableAngularJog (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
};

enum DimTypeConstants
{
    igDimTypeLinear = 1,
    igDimTypeRadial = 2,
    igDimTypeAngular = 3,
    igDimTypeRDiameter = 4,
    igDimTypeCDiameter = 5,
    igDimTypeArcLength = 6,
    igDimTypeArcAngle = 7,
    igDimTypeCoordinate = 8,
    igDimTypeSDiameter = 9,
    igDimTypeChamfer = 10,
    igDimTypeAngularCoordinate = 11,
    igDimTypeCurveLength = 12
};

enum DimBreakPositionConstants
{
    igDimBreakRight = 1,
    igDimBreakCenter = 2,
    igDimBreakLeft = 3,
    igDimBreakAltCenter = 4
};

enum DimProjArcConstants
{
    igDimProjArcNone = 1,
    igDimProjArcStart = 2,
    igDimProjArcEnd = 3
};

enum DimDispTypeConstants
{
    igDimDisplayTypeNominal = 1,
    igDimDisplayTypeTolerance = 2,
    igDimDisplayTypeClassfit = 3,
    igDimDisplayTypeLimits = 4,
    igDimDisplayTypeBasic = 5,
    igDimDisplayTypeReference = 6,
    igDimDisplayTypeBlank = 8,
    igDimDisplayTypeClassPlusMinus = 9,
    igDimDisplayTypeHoleShaft = 10,
    igDimDisplayTypeFitWithLimits = 11,
    igDimDisplayTypeHoleCallout = 12,
    igDimDisplayTypeHoleShaftTolOnly = 13,
    igDimDisplayTypeHoleShaftWithTol = 14,
    igDimDisplayTypeUnitTolerance = 15
};

enum DimStatusConstants
{
    seDimStatusDetached = 1,
    seDimStatusError = 2,
    seDimStatusDriving = 3,
    seDimStatusDriven = 4,
    seOneEndDetached = 5,
    seNonDrivablePMI = 6
};

enum DimGroupMemberTypeConstants
{
    seDimNotAGroupMember = 1,
    seDimStackGroupMember = 2,
    seDimChainGroupMember = 3,
    seDimCoordinateGroupMember = 4
};

enum DimChamferModeConstants
{
    igDimChamferModeAlongAxis = 0,
    igDimChamferModePerpendicular = 1,
    igDimChamferModeParallel = 2,
    igDimChamferModeNotApplicable = 3
};

enum DimAxisModeConstants
{
    igDimAxisModeDefault = 1,
    igDimAxisModeImplied = 2,
    igDimAxisModeExplicit = 3,
    igDimAxisModeCoordinate = 4
};

struct __declspec(uuid("47cac844-8004-4807-81a9-f76ddeeee1f1"))
DisplayData : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetLineCount ( );
    HRESULT GetLineAtIndex (
        long Index,
        double * StartX,
        double * StartY,
        double * StartZ,
        double * EndX,
        double * EndY,
        double * EndZ );
    long GetArcCount ( );
    HRESULT GetArcAtIndex (
        long Index,
        double * StartX,
        double * StartY,
        double * StartZ,
        double * MidX,
        double * MidY,
        double * MidZ,
        double * EndX,
        double * EndY,
        double * EndZ );
    long GetTerminatorCount ( );
    HRESULT GetTerminatorAtIndex (
        long Index,
        enum DimTermTypeConstants * TermType,
        VARIANT_BOOL * IsFilled,
        double * OriginX,
        double * OriginY,
        double * OriginZ,
        double * Point1X,
        double * Point1Y,
        double * Point1Z,
        double * Point2X,
        double * Point2Y,
        double * Point2Z,
        double * Radius );
    long GetTextCount ( );
    HRESULT GetTextAtIndex (
        long Index,
        BSTR * TextString,
        double * OriginX,
        double * OriginY,
        double * OriginZ,
        double * X_DirX,
        double * X_DirY,
        double * X_DirZ,
        double * Z_DirX,
        double * Z_DirY,
        double * Z_DirZ );
    HRESULT GetTextAndFontAtIndex (
        long Index,
        BSTR * TextString,
        BSTR * FontName,
        double * OriginX,
        double * OriginY,
        double * OriginZ,
        double * X_DirX,
        double * X_DirY,
        double * X_DirZ,
        double * Z_DirX,
        double * Z_DirY,
        double * Z_DirZ );
    long GetEllipseCount ( );
    HRESULT GetEllipseAtIndex (
        long Index,
        double * CenterX,
        double * CenterY,
        double * CenterZ,
        double * MajorX,
        double * MajorY,
        double * MajorZ,
        double * MinorX,
        double * MinorY,
        double * MinorZ );
    long GetLinestringCount ( );
    long GetLinestringSizeAtIndex (
        long Index );
    HRESULT GetLinestringAtIndex (
        long Index,
        long * nLinestrSize,
        SAFEARRAY * * Vertices );
    HRESULT GetTextAtIndexEx (
        long Index,
        BSTR * TextString,
        double * OriginX,
        double * OriginY,
        double * OriginZ,
        double * X_DirX,
        double * X_DirY,
        double * X_DirZ,
        double * Z_DirX,
        double * Z_DirY,
        double * Z_DirZ );
    HRESULT GetTextAndFontAtIndexEx (
        long Index,
        BSTR * TextString,
        BSTR * FontName,
        double * OriginX,
        double * OriginY,
        double * OriginZ,
        double * X_DirX,
        double * X_DirY,
        double * X_DirZ,
        double * Z_DirX,
        double * Z_DirY,
        double * Z_DirZ );
    long GetTextCountEx ( );
};

struct __declspec(uuid("64b50358-a599-4974-b363-f615a35dde40"))
_IDisplayDataAuto : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    long GetLineCount ( );
    HRESULT GetLineAtIndex (
        long Index,
        double * StartX,
        double * StartY,
        double * StartZ,
        double * EndX,
        double * EndY,
        double * EndZ );
    long GetArcCount ( );
    HRESULT GetArcAtIndex (
        long Index,
        double * StartX,
        double * StartY,
        double * StartZ,
        double * MidX,
        double * MidY,
        double * MidZ,
        double * EndX,
        double * EndY,
        double * EndZ );
    long GetTerminatorCount ( );
    HRESULT GetTerminatorAtIndex (
        long Index,
        enum DimTermTypeConstants * TermType,
        VARIANT_BOOL * IsFilled,
        double * OriginX,
        double * OriginY,
        double * OriginZ,
        double * Point1X,
        double * Point1Y,
        double * Point1Z,
        double * Point2X,
        double * Point2Y,
        double * Point2Z,
        double * Radius );
    long GetTextCount ( );
    HRESULT GetTextAtIndex (
        long Index,
        BSTR * TextString,
        double * OriginX,
        double * OriginY,
        double * OriginZ,
        double * X_DirX,
        double * X_DirY,
        double * X_DirZ,
        double * Z_DirX,
        double * Z_DirY,
        double * Z_DirZ );
    HRESULT GetTextAndFontAtIndex (
        long Index,
        BSTR * TextString,
        BSTR * FontName,
        double * OriginX,
        double * OriginY,
        double * OriginZ,
        double * X_DirX,
        double * X_DirY,
        double * X_DirZ,
        double * Z_DirX,
        double * Z_DirY,
        double * Z_DirZ );
    long GetEllipseCount ( );
    HRESULT GetEllipseAtIndex (
        long Index,
        double * CenterX,
        double * CenterY,
        double * CenterZ,
        double * MajorX,
        double * MajorY,
        double * MajorZ,
        double * MinorX,
        double * MinorY,
        double * MinorZ );
    long GetLinestringCount ( );
    long GetLinestringSizeAtIndex (
        long Index );
    HRESULT GetLinestringAtIndex (
        long Index,
        long * nLinestrSize,
        SAFEARRAY * * Vertices );
    HRESULT GetTextAtIndexEx (
        long Index,
        BSTR * TextString,
        double * OriginX,
        double * OriginY,
        double * OriginZ,
        double * X_DirX,
        double * X_DirY,
        double * X_DirZ,
        double * Z_DirX,
        double * Z_DirY,
        double * Z_DirZ );
    HRESULT GetTextAndFontAtIndexEx (
        long Index,
        BSTR * TextString,
        BSTR * FontName,
        double * OriginX,
        double * OriginY,
        double * OriginZ,
        double * X_DirX,
        double * X_DirY,
        double * X_DirZ,
        double * Z_DirX,
        double * Z_DirY,
        double * Z_DirZ );
    long GetTextCountEx ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetLineCount (
        /*[out,retval]*/ long * nLineCount ) = 0;
      virtual HRESULT __stdcall raw_GetLineAtIndex (
        /*[in]*/ long Index,
        /*[out]*/ double * StartX,
        /*[out]*/ double * StartY,
        /*[out]*/ double * StartZ,
        /*[out]*/ double * EndX,
        /*[out]*/ double * EndY,
        /*[out]*/ double * EndZ ) = 0;
      virtual HRESULT __stdcall raw_GetArcCount (
        /*[out,retval]*/ long * nArcCount ) = 0;
      virtual HRESULT __stdcall raw_GetArcAtIndex (
        /*[in]*/ long Index,
        /*[out]*/ double * StartX,
        /*[out]*/ double * StartY,
        /*[out]*/ double * StartZ,
        /*[out]*/ double * MidX,
        /*[out]*/ double * MidY,
        /*[out]*/ double * MidZ,
        /*[out]*/ double * EndX,
        /*[out]*/ double * EndY,
        /*[out]*/ double * EndZ ) = 0;
      virtual HRESULT __stdcall raw_GetTerminatorCount (
        /*[out,retval]*/ long * nTermCount ) = 0;
      virtual HRESULT __stdcall raw_GetTerminatorAtIndex (
        /*[in]*/ long Index,
        /*[out]*/ enum DimTermTypeConstants * TermType,
        /*[out]*/ VARIANT_BOOL * IsFilled,
        /*[out]*/ double * OriginX,
        /*[out]*/ double * OriginY,
        /*[out]*/ double * OriginZ,
        /*[out]*/ double * Point1X,
        /*[out]*/ double * Point1Y,
        /*[out]*/ double * Point1Z,
        /*[out]*/ double * Point2X,
        /*[out]*/ double * Point2Y,
        /*[out]*/ double * Point2Z,
        /*[out]*/ double * Radius ) = 0;
      virtual HRESULT __stdcall raw_GetTextCount (
        /*[out,retval]*/ long * nTextCount ) = 0;
      virtual HRESULT __stdcall raw_GetTextAtIndex (
        /*[in]*/ long Index,
        /*[out]*/ BSTR * TextString,
        /*[out]*/ double * OriginX,
        /*[out]*/ double * OriginY,
        /*[out]*/ double * OriginZ,
        /*[out]*/ double * X_DirX,
        /*[out]*/ double * X_DirY,
        /*[out]*/ double * X_DirZ,
        /*[out]*/ double * Z_DirX,
        /*[out]*/ double * Z_DirY,
        /*[out]*/ double * Z_DirZ ) = 0;
      virtual HRESULT __stdcall raw_GetTextAndFontAtIndex (
        /*[in]*/ long Index,
        /*[out]*/ BSTR * TextString,
        /*[out]*/ BSTR * FontName,
        /*[out]*/ double * OriginX,
        /*[out]*/ double * OriginY,
        /*[out]*/ double * OriginZ,
        /*[out]*/ double * X_DirX,
        /*[out]*/ double * X_DirY,
        /*[out]*/ double * X_DirZ,
        /*[out]*/ double * Z_DirX,
        /*[out]*/ double * Z_DirY,
        /*[out]*/ double * Z_DirZ ) = 0;
      virtual HRESULT __stdcall raw_GetEllipseCount (
        /*[out,retval]*/ long * nEllipseCount ) = 0;
      virtual HRESULT __stdcall raw_GetEllipseAtIndex (
        /*[in]*/ long Index,
        /*[out]*/ double * CenterX,
        /*[out]*/ double * CenterY,
        /*[out]*/ double * CenterZ,
        /*[out]*/ double * MajorX,
        /*[out]*/ double * MajorY,
        /*[out]*/ double * MajorZ,
        /*[out]*/ double * MinorX,
        /*[out]*/ double * MinorY,
        /*[out]*/ double * MinorZ ) = 0;
      virtual HRESULT __stdcall raw_GetLinestringCount (
        /*[out,retval]*/ long * nLinestrCount ) = 0;
      virtual HRESULT __stdcall raw_GetLinestringSizeAtIndex (
        /*[in]*/ long Index,
        /*[out,retval]*/ long * nLinestrSize ) = 0;
      virtual HRESULT __stdcall raw_GetLinestringAtIndex (
        /*[in]*/ long Index,
        /*[out]*/ long * nLinestrSize,
        /*[in,out]*/ SAFEARRAY * * Vertices ) = 0;
      virtual HRESULT __stdcall raw_GetTextAtIndexEx (
        /*[in]*/ long Index,
        /*[out]*/ BSTR * TextString,
        /*[out]*/ double * OriginX,
        /*[out]*/ double * OriginY,
        /*[out]*/ double * OriginZ,
        /*[out]*/ double * X_DirX,
        /*[out]*/ double * X_DirY,
        /*[out]*/ double * X_DirZ,
        /*[out]*/ double * Z_DirX,
        /*[out]*/ double * Z_DirY,
        /*[out]*/ double * Z_DirZ ) = 0;
      virtual HRESULT __stdcall raw_GetTextAndFontAtIndexEx (
        /*[in]*/ long Index,
        /*[out]*/ BSTR * TextString,
        /*[out]*/ BSTR * FontName,
        /*[out]*/ double * OriginX,
        /*[out]*/ double * OriginY,
        /*[out]*/ double * OriginZ,
        /*[out]*/ double * X_DirX,
        /*[out]*/ double * X_DirY,
        /*[out]*/ double * X_DirZ,
        /*[out]*/ double * Z_DirX,
        /*[out]*/ double * Z_DirY,
        /*[out]*/ double * Z_DirZ ) = 0;
      virtual HRESULT __stdcall raw_GetTextCountEx (
        /*[out,retval]*/ long * nTextCount ) = 0;
};

enum SubfixAlignmentConstants
{
    seSubfixAlignLeft = 0,
    seSubfixAlignCenter = 1,
    seSubfixAlignRight = 2
};

enum PMIEditDirectionConstants
{
    seMoveOriginParent = 1,
    seMoveMeasureParent = 2,
    seMoveParentsSymmetrically = 3
};

enum DimReattachStatusConstants
{
    igDimReattachSucceeded = 0,
    igDimReattachFailed = 1
};

struct __declspec(uuid("79518374-e3bc-11d2-bed4-080036b4d502"))
_IDimensionAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    double Value;
    __declspec(property(get=GetSuffixDisplayedText))
    _bstr_t SuffixDisplayedText;
    __declspec(property(get=GetStyle,put=PutStyle))
    DimStylePtr Style;
    __declspec(property(get=GetDimensionType))
    enum DimTypeConstants DimensionType;
    __declspec(property(get=GetConstraint,put=PutConstraint))
    VARIANT_BOOL Constraint;
    __declspec(property(get=GetSubfixDisplayedText))
    _bstr_t SubfixDisplayedText;
    __declspec(property(get=GetLeader))
    VARIANT_BOOL Leader;
    __declspec(property(get=GetJogged,put=PutJogged))
    VARIANT_BOOL Jogged;
    __declspec(property(get=GetTerminatorPosition,put=PutTerminatorPosition))
    VARIANT_BOOL TerminatorPosition;
    __declspec(property(get=GetOffsetLeader))
    VARIANT_BOOL OffsetLeader;
    __declspec(property(get=GetBreakPosition,put=PutBreakPosition))
    enum DimBreakPositionConstants BreakPosition;
    __declspec(property(get=GetBreakDistance,put=PutBreakDistance))
    double BreakDistance;
    __declspec(property(get=GetMeasurementAxis,put=PutMeasurementAxis))
    VARIANT_BOOL MeasurementAxis;
    __declspec(property(get=GetMeasurementAxisDirection,put=PutMeasurementAxisDirection))
    VARIANT_BOOL MeasurementAxisDirection;
    __declspec(property(get=GetProjectionLineDirection,put=PutProjectionLineDirection))
    VARIANT_BOOL ProjectionLineDirection;
    __declspec(property(get=GetProjectionArc,put=PutProjectionArc))
    enum DimProjArcConstants ProjectionArc;
    __declspec(property(get=GetOriginLineDirection,put=PutOriginLineDirection))
    VARIANT_BOOL OriginLineDirection;
    __declspec(property(get=GetMeasureLineDirection,put=PutMeasureLineDirection))
    VARIANT_BOOL MeasureLineDirection;
    __declspec(property(get=GetAngleClockwise,put=PutAngleClockwise))
    VARIANT_BOOL AngleClockwise;
    __declspec(property(get=GetTrackDistance,put=PutTrackDistance))
    double TrackDistance;
    __declspec(property(get=GetLeaderDistance,put=PutLeaderDistance))
    double LeaderDistance;
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetTextScale,put=PutTextScale))
    double TextScale;
    __declspec(property(get=GetPrefixString,put=PutPrefixString))
    _bstr_t PrefixString;
    __declspec(property(get=GetSuffixString,put=PutSuffixString))
    _bstr_t SuffixString;
    __declspec(property(get=GetSubfixString,put=PutSubfixString))
    _bstr_t SubfixString;
    __declspec(property(get=GetSuperfixString,put=PutSuperfixString))
    _bstr_t SuperfixString;
    __declspec(property(get=GetOverrideString,put=PutOverrideString))
    _bstr_t OverrideString;
    __declspec(property(get=GetSecondValue,put=PutSecondValue))
    double SecondValue;
    __declspec(property(get=GetOverrideChamferAngleString,put=PutOverrideChamferAngleString))
    _bstr_t OverrideChamferAngleString;
    __declspec(property(get=GetChamferDimensionMode))
    enum DimChamferModeConstants ChamferDimensionMode;
    __declspec(property(get=GetPrimaryUpperTolerance,put=PutPrimaryUpperTolerance))
    _bstr_t PrimaryUpperTolerance;
    __declspec(property(get=GetPrimaryLowerTolerance,put=PutPrimaryLowerTolerance))
    _bstr_t PrimaryLowerTolerance;
    __declspec(property(get=GetPrimaryToleranceSymbol,put=PutPrimaryToleranceSymbol))
    _bstr_t PrimaryToleranceSymbol;
    __declspec(property(get=GetSecondaryUpperTolerance,put=PutSecondaryUpperTolerance))
    _bstr_t SecondaryUpperTolerance;
    __declspec(property(get=GetSecondaryLowerTolerance,put=PutSecondaryLowerTolerance))
    _bstr_t SecondaryLowerTolerance;
    __declspec(property(get=GetSecondaryToleranceSymbol,put=PutSecondaryToleranceSymbol))
    _bstr_t SecondaryToleranceSymbol;
    __declspec(property(get=GetDisplayType,put=PutDisplayType))
    enum DimDispTypeConstants DisplayType;
    __declspec(property(get=GetVariableTableName,put=PutVariableTableName))
    _bstr_t VariableTableName;
    __declspec(property(get=GetDisplayByName,put=PutDisplayByName))
    VARIANT_BOOL DisplayByName;
    __declspec(property(get=GetTrackAngle,put=PutTrackAngle))
    double TrackAngle;
    __declspec(property(get=GetAngleCompliment,put=PutAngleCompliment))
    VARIANT_BOOL AngleCompliment;
    __declspec(property(get=GetMeasurementAxisEx,put=PutMeasurementAxisEx))
    enum DimAxisModeConstants MeasurementAxisEx;
    __declspec(property(get=GetProjectionLineAngle1))
    double ProjectionLineAngle1;
    __declspec(property(get=GetPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetAxis,put=PutAxis))
    IDispatchPtr Axis;
    __declspec(property(get=GetProjectionLineAngle2))
    double ProjectionLineAngle2;
    __declspec(property(get=GetDisplayHalf,put=PutDisplayHalf))
    VARIANT_BOOL DisplayHalf;
    __declspec(property(get=GetInspection,put=PutInspection))
    VARIANT_BOOL Inspection;
    __declspec(property(get=GetPrefixInside,put=PutPrefixInside))
    VARIANT_BOOL PrefixInside;
    __declspec(property(get=GetStatusOfDimension))
    enum DimStatusConstants StatusOfDimension;
    __declspec(property(get=GetGroupMemberType))
    enum DimGroupMemberTypeConstants GroupMemberType;
    __declspec(property(get=GetFormula,put=PutFormula))
    _bstr_t Formula;
    __declspec(property(get=GetDisplayName))
    _bstr_t DisplayName;
    __declspec(property(get=GetSystemName))
    _bstr_t SystemName;
    __declspec(property(get=GetExpose,put=PutExpose))
    long Expose;
    __declspec(property(get=GetExposeName,put=PutExposeName))
    _bstr_t ExposeName;
    __declspec(property(get=GetSubfixString2,put=PutSubfixString2))
    _bstr_t SubfixString2;
    __declspec(property(get=GetSubfixAlignment,put=PutSubfixAlignment))
    enum SubfixAlignmentConstants SubfixAlignment;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[][];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetSubfix2DisplayedText))
    _bstr_t Subfix2DisplayedText;
    __declspec(property(get=GetRadialExtensionDistance,put=PutRadialExtensionDistance))
    double RadialExtensionDistance;
    __declspec(property(get=GetTrue3DSketchDimension,put=PutTrue3DSketchDimension))
    VARIANT_BOOL True3DSketchDimension;
    __declspec(property(get=GetUnitsType,put=PutUnitsType))
    int UnitsType;
    __declspec(property(get=GetIsReadOnly))
    VARIANT_BOOL IsReadOnly;
    __declspec(property(get=GetEnablePrefix,put=PutEnablePrefix))
    VARIANT_BOOL EnablePrefix;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetAbsoluteTrackDistance))
    double AbsoluteTrackDistance;
    __declspec(property(get=GetPMIPlane))
    IDispatchPtr PMIPlane;
    __declspec(property(get=GetPMITrackDistance,put=PutPMITrackDistance))
    double PMITrackDistance;
    __declspec(property(get=GetUseStandardLimitAndFitTolerance,put=PutUseStandardLimitAndFitTolerance))
    VARIANT_BOOL UseStandardLimitAndFitTolerance;
    __declspec(property(get=GetHoleClassString,put=PutHoleClassString))
    _bstr_t HoleClassString;
    __declspec(property(get=GetShaftClassString,put=PutShaftClassString))
    _bstr_t ShaftClassString;
    __declspec(property(get=GetInhibitZeroToleranceDisplay,put=PutInhibitZeroToleranceDisplay))
    VARIANT_BOOL InhibitZeroToleranceDisplay;
    __declspec(property(get=GetHidePMI,put=PutHidePMI))
    VARIANT_BOOL HidePMI;
    __declspec(property(get=GetPrefixDisplayedText))
    _bstr_t PrefixDisplayedText;
    __declspec(property(get=GetSuperfixDisplayedText))
    _bstr_t SuperfixDisplayedText;

    //
    // Wrapper methods for error-handling
    //

    void PutValue (
        double Value );
    double GetValue ( );
    DimStylePtr GetStyle ( );
    enum DimTypeConstants GetDimensionType ( );
    void PutConstraint (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetConstraint ( );
    VARIANT_BOOL GetLeader ( );
    void PutJogged (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetJogged ( );
    void PutTerminatorPosition (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetTerminatorPosition ( );
    VARIANT_BOOL GetOffsetLeader ( );
    void PutBreakPosition (
        enum DimBreakPositionConstants Value );
    enum DimBreakPositionConstants GetBreakPosition ( );
    void PutBreakDistance (
        double Value );
    double GetBreakDistance ( );
    void PutMeasurementAxis (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetMeasurementAxis ( );
    void PutMeasurementAxisDirection (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetMeasurementAxisDirection ( );
    void PutProjectionLineDirection (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetProjectionLineDirection ( );
    void PutProjectionArc (
        enum DimProjArcConstants Value );
    enum DimProjArcConstants GetProjectionArc ( );
    void PutOriginLineDirection (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetOriginLineDirection ( );
    void PutMeasureLineDirection (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetMeasureLineDirection ( );
    void PutAngleClockwise (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetAngleClockwise ( );
    void PutTrackDistance (
        double Value );
    double GetTrackDistance ( );
    void PutLeaderDistance (
        double Value );
    double GetLeaderDistance ( );
    void PutPrefixString (
        _bstr_t val );
    _bstr_t GetPrefixString ( );
    void PutSuffixString (
        _bstr_t val );
    _bstr_t GetSuffixString ( );
    void PutSubfixString (
        _bstr_t val );
    _bstr_t GetSubfixString ( );
    void PutSuperfixString (
        _bstr_t val );
    _bstr_t GetSuperfixString ( );
    void PutOverrideString (
        _bstr_t val );
    _bstr_t GetOverrideString ( );
    void PutPrimaryUpperTolerance (
        _bstr_t val );
    _bstr_t GetPrimaryUpperTolerance ( );
    void PutPrimaryLowerTolerance (
        _bstr_t val );
    _bstr_t GetPrimaryLowerTolerance ( );
    void PutPrimaryToleranceSymbol (
        _bstr_t val );
    _bstr_t GetPrimaryToleranceSymbol ( );
    void PutSecondaryUpperTolerance (
        _bstr_t val );
    _bstr_t GetSecondaryUpperTolerance ( );
    void PutSecondaryLowerTolerance (
        _bstr_t val );
    _bstr_t GetSecondaryLowerTolerance ( );
    void PutSecondaryToleranceSymbol (
        _bstr_t val );
    _bstr_t GetSecondaryToleranceSymbol ( );
    void PutDisplayType (
        enum DimDispTypeConstants val );
    enum DimDispTypeConstants GetDisplayType ( );
    void PutTrackAngle (
        double val );
    double GetTrackAngle ( );
    void PutTextScale (
        double val );
    double GetTextScale ( );
    void PutAngleCompliment (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetAngleCompliment ( );
    void PutDisplayHalf (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetDisplayHalf ( );
    void PutDisplayByName (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetDisplayByName ( );
    void PutInspection (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetInspection ( );
    HRESULT SetJogPoint1Distance (
        double Value );
    HRESULT GetJogPoint1Distance (
        double * Value );
    HRESULT SetJogPoint2 (
        double x,
        double y );
    HRESULT GetJogPoint2 (
        double * x,
        double * y );
    HRESULT SetJogPoint3Distance (
        double Value );
    HRESULT GetJogPoint3Distance (
        double * Value );
    HRESULT SetTextOffsets (
        double x,
        double y );
    HRESULT GetTextOffsets (
        double * x,
        double * y );
    HRESULT GetRelatedCount (
        long * Count );
    HRESULT GetRelated (
        long Index,
        IDispatch * * GraphicObject,
        double * x,
        double * y,
        double * z,
        VARIANT_BOOL * keyPoint );
    IDispatchPtr GetPlane ( );
    IDispatchPtr GetAxis ( );
    void PutAxis (
        IDispatch * Axis );
    void PutPrefixInside (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetPrefixInside ( );
    enum DimStatusConstants GetStatusOfDimension ( );
    enum DimGroupMemberTypeConstants GetGroupMemberType ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse,
        long Lcid = 0 );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    void PutSecondValue (
        double Value );
    double GetSecondValue ( );
    void PutOverrideChamferAngleString (
        _bstr_t val );
    _bstr_t GetOverrideChamferAngleString ( );
    enum DimChamferModeConstants GetChamferDimensionMode ( );
    void PutVariableTableName (
        _bstr_t VTableName );
    _bstr_t GetVariableTableName ( );
    void PutMeasurementAxisEx (
        enum DimAxisModeConstants Value );
    enum DimAxisModeConstants GetMeasurementAxisEx ( );
    double GetProjectionLineAngle1 ( );
    double GetProjectionLineAngle2 ( );
    void PutFormula (
        _bstr_t pFormula );
    _bstr_t GetFormula ( );
    DisplayDataPtr GetDisplayData ( );
    _bstr_t GetDisplayName ( );
    _bstr_t GetSystemName ( );
    void PutExpose (
        long pbExpose );
    long GetExpose ( );
    void PutExposeName (
        _bstr_t pbsName );
    _bstr_t GetExposeName ( );
    void PutSubfixString2 (
        _bstr_t val );
    _bstr_t GetSubfixString2 ( );
    void PutSubfixAlignment (
        enum SubfixAlignmentConstants Value );
    enum SubfixAlignmentConstants GetSubfixAlignment ( );
    HRESULT AddProjectionLineBreaks ( );
    HRESULT ClearProjectionLineBreaks ( );
    long GetBreakingDimensionsCount ( );
    void PutLayer (
        _bstr_t Layer );
    _bstr_t GetLayer ( );
    double GetAbsoluteTrackDistance ( );
    IDispatchPtr GetPMIPlane ( );
    double GetPMITrackDistance ( );
    void PutPMITrackDistance (
        double pdPMITrackDistance );
    void PutUseStandardLimitAndFitTolerance (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetUseStandardLimitAndFitTolerance ( );
    void PutHoleClassString (
        _bstr_t Value );
    _bstr_t GetHoleClassString ( );
    void PutShaftClassString (
        _bstr_t Value );
    _bstr_t GetShaftClassString ( );
    void PutInhibitZeroToleranceDisplay (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetInhibitZeroToleranceDisplay ( );
    HRESULT SetPMIEditDirection (
        enum PMIEditDirectionConstants editDirectionConst );
    void PutHidePMI (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetHidePMI ( );
    _bstr_t GetPrefixDisplayedText ( );
    _bstr_t GetSuperfixDisplayedText ( );
    _bstr_t GetSuffixDisplayedText ( );
    _bstr_t GetSubfixDisplayedText ( );
    _bstr_t GetSubfix2DisplayedText ( );
    void PutStyle (
        struct DimStyle * pStyle );
    void PutRadialExtensionDistance (
        double pdRadialExtensionDistance );
    double GetRadialExtensionDistance ( );
    HRESULT GetDiscreteValues (
        int * pnumDiscreteValues,
        SAFEARRAY * * DiscreteValues );
    HRESULT SetDiscreteValues (
        int numDiscreteValues,
        SAFEARRAY * * DiscreteValues );
    HRESULT GetMultipleJogPoints (
        int * numJogPoints,
        double * initialYOffset,
        SAFEARRAY * * XOffsets,
        SAFEARRAY * * YOffsets,
        SAFEARRAY * * DistBet2Jogs );
    HRESULT SetMultipleJogPoints (
        int numJogPoints,
        double initialYOffset,
        SAFEARRAY * * XOffsets,
        SAFEARRAY * * YOffsets,
        SAFEARRAY * * DistBet2Jogs );
    _bstr_t GetComment ( );
    HRESULT SetComment (
        _bstr_t Comment );
    enum DimStatusConstants UpdateStatus ( );
    HRESULT RemoveFromAlignmentSet ( );
    HRESULT BreakAlignmentSet ( );
    void PutTrue3DSketchDimension (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetTrue3DSketchDimension ( );
    enum DimReattachStatusConstants ReattachToDrawingView (
        IDispatch * DrawingView );
    HRESULT GetValueDiscreteValues (
        SAFEARRAY * * DiscreteValues );
    HRESULT SetValueDiscreteValues (
        SAFEARRAY * * DiscreteValues );
    HRESULT AddDiscreteValue (
        double DiscreteValue );
    HRESULT RemoveDiscreteValue (
        double DiscreteValue );
    HRESULT SetValueRangeValues (
        double LowValue,
        int Condition,
        double HighValue );
    HRESULT GetValueRangeValues (
        double * LowValue,
        int * Condition,
        double * HighValue );
    void PutUnitsType (
        int pUnitType );
    int GetUnitsType ( );
    HRESULT GetValueRangeHighValue (
        double * pdHighValue );
    HRESULT SetValueRangeHighValue (
        double dHighValue );
    HRESULT GetValueRangeLowValue (
        double * pdHighValue );
    HRESULT SetValueRangeLowValue (
        double dHighValue );
    HRESULT ClearLimitsOrDiscreteValues ( );
    double GetValueOutOfRange ( );
    VARIANT_BOOL GetIsReadOnly ( );
    HRESULT GetValueEx (
        double * pdValue,
        enum TGFramework::seUnitsTypeConstants seUnitsType );
    HRESULT SetValueEx (
        double dValue,
        enum TGFramework::seUnitsTypeConstants seUnitsType );
    void PutEnablePrefix (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetEnablePrefix ( );
    HRESULT AutoScaleSketch (
        double dValue,
        VARIANT_BOOL * Value );
    HRESULT SetValueAndUpdateCache (
        double dValue,
        enum TGFramework::seUnitsTypeConstants seUnitsType );
    HRESULT ConvertCDiameterToRDiameter (
        enum DimTypeConstants Type );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Value (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct DimStyle * * pStyle ) = 0;
      virtual HRESULT __stdcall get_DimensionType (
        /*[out,retval]*/ enum DimTypeConstants * Type ) = 0;
      virtual HRESULT __stdcall put_Constraint (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Constraint (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_Leader (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Jogged (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Jogged (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_TerminatorPosition (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_TerminatorPosition (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_OffsetLeader (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_BreakPosition (
        /*[in]*/ enum DimBreakPositionConstants Value ) = 0;
      virtual HRESULT __stdcall get_BreakPosition (
        /*[out,retval]*/ enum DimBreakPositionConstants * Value ) = 0;
      virtual HRESULT __stdcall put_BreakDistance (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_BreakDistance (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_MeasurementAxis (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_MeasurementAxis (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_MeasurementAxisDirection (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_MeasurementAxisDirection (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ProjectionLineDirection (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ProjectionLineDirection (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ProjectionArc (
        /*[in]*/ enum DimProjArcConstants Value ) = 0;
      virtual HRESULT __stdcall get_ProjectionArc (
        /*[out,retval]*/ enum DimProjArcConstants * Value ) = 0;
      virtual HRESULT __stdcall put_OriginLineDirection (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_OriginLineDirection (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_MeasureLineDirection (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_MeasureLineDirection (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AngleClockwise (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_AngleClockwise (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_TrackDistance (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_TrackDistance (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_LeaderDistance (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_LeaderDistance (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_PrefixString (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_PrefixString (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_SuffixString (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_SuffixString (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_SubfixString (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_SubfixString (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_SuperfixString (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_SuperfixString (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_OverrideString (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_OverrideString (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_PrimaryUpperTolerance (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_PrimaryUpperTolerance (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_PrimaryLowerTolerance (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_PrimaryLowerTolerance (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_PrimaryToleranceSymbol (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_PrimaryToleranceSymbol (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryUpperTolerance (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_SecondaryUpperTolerance (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryLowerTolerance (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_SecondaryLowerTolerance (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryToleranceSymbol (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_SecondaryToleranceSymbol (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_DisplayType (
        /*[in]*/ enum DimDispTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_DisplayType (
        /*[out,retval]*/ enum DimDispTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_TrackAngle (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_TrackAngle (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_TextScale (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_TextScale (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_AngleCompliment (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_AngleCompliment (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_DisplayHalf (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_DisplayHalf (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_DisplayByName (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_DisplayByName (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Inspection (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Inspection (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_SetJogPoint1Distance (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall raw_GetJogPoint1Distance (
        /*[out]*/ double * Value ) = 0;
      virtual HRESULT __stdcall raw_SetJogPoint2 (
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_GetJogPoint2 (
        /*[out]*/ double * x,
        /*[out]*/ double * y ) = 0;
      virtual HRESULT __stdcall raw_SetJogPoint3Distance (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall raw_GetJogPoint3Distance (
        /*[out]*/ double * Value ) = 0;
      virtual HRESULT __stdcall raw_SetTextOffsets (
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_GetTextOffsets (
        /*[out]*/ double * x,
        /*[out]*/ double * y ) = 0;
      virtual HRESULT __stdcall raw_GetRelatedCount (
        /*[out]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_GetRelated (
        /*[in]*/ long Index,
        /*[out]*/ IDispatch * * GraphicObject,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ VARIANT_BOOL * keyPoint ) = 0;
      virtual HRESULT __stdcall get_Plane (
        /*[out,retval]*/ IDispatch * * Plane ) = 0;
      virtual HRESULT __stdcall get_Axis (
        /*[out,retval]*/ IDispatch * * Axis ) = 0;
      virtual HRESULT __stdcall put_Axis (
        /*[in]*/ IDispatch * Axis ) = 0;
      virtual HRESULT __stdcall put_PrefixInside (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_PrefixInside (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_StatusOfDimension (
        /*[out,retval]*/ enum DimStatusConstants * Value ) = 0;
      virtual HRESULT __stdcall get_GroupMemberType (
        /*[out,retval]*/ enum DimGroupMemberTypeConstants * Value ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[in]*/ VARIANT Recurse,
        /*[in,lcid]*/ long Lcid,
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * Type ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * ZOrder ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[in]*/ VARIANT Recurse,
        /*[out,retval]*/ BSTR * Key ) = 0;
      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ IDispatch * * Document ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ double XFrom,
        /*[in]*/ double YFrom,
        /*[in]*/ double XTo,
        /*[in]*/ double YTo ) = 0;
      virtual HRESULT __stdcall raw_Scale (
        /*[in]*/ double Factor ) = 0;
      virtual HRESULT __stdcall raw_Rotate (
        /*[in]*/ double Angle,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[out]*/ double * XMinimum,
        /*[out]*/ double * YMinimum,
        /*[out]*/ double * XMaximum,
        /*[out]*/ double * YMaximum ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ VARIANT XDistance,
        /*[in]*/ VARIANT YDistance,
        /*[out,retval]*/ IDispatch * * NewObject ) = 0;
      virtual HRESULT __stdcall raw_Mirror (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ VARIANT BooleanCopyFlag,
        /*[out,retval]*/ IDispatch * * Object ) = 0;
      virtual HRESULT __stdcall raw_BringToFront ( ) = 0;
      virtual HRESULT __stdcall raw_BringForward ( ) = 0;
      virtual HRESULT __stdcall raw_SendToBack ( ) = 0;
      virtual HRESULT __stdcall raw_SendBackward ( ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall get_KeyPointCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_GetKeyPoint (
        /*[in]*/ long Index,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ enum TGFramework::KeyPointType * KeypointType,
        /*[out]*/ long * HandleType ) = 0;
      virtual HRESULT __stdcall raw_SetKeyPoint (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
      virtual HRESULT __stdcall put_SecondValue (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_SecondValue (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_OverrideChamferAngleString (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_OverrideChamferAngleString (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_ChamferDimensionMode (
        /*[out,retval]*/ enum DimChamferModeConstants * Type ) = 0;
      virtual HRESULT __stdcall put_VariableTableName (
        /*[in]*/ BSTR VTableName ) = 0;
      virtual HRESULT __stdcall get_VariableTableName (
        /*[out,retval]*/ BSTR * VTableName ) = 0;
      virtual HRESULT __stdcall put_MeasurementAxisEx (
        /*[in]*/ enum DimAxisModeConstants Value ) = 0;
      virtual HRESULT __stdcall get_MeasurementAxisEx (
        /*[out,retval]*/ enum DimAxisModeConstants * Value ) = 0;
      virtual HRESULT __stdcall get_ProjectionLineAngle1 (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall get_ProjectionLineAngle2 (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_Formula (
        /*[in]*/ BSTR pFormula ) = 0;
      virtual HRESULT __stdcall get_Formula (
        /*[out,retval]*/ BSTR * pFormula ) = 0;
      virtual HRESULT __stdcall raw_GetDisplayData (
        /*[out,retval]*/ struct DisplayData * * pDisplayData ) = 0;
      virtual HRESULT __stdcall get_DisplayName (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall get_SystemName (
        /*[out,retval]*/ BSTR * pName ) = 0;
      virtual HRESULT __stdcall put_Expose (
        /*[in]*/ long pbExpose ) = 0;
      virtual HRESULT __stdcall get_Expose (
        /*[out,retval]*/ long * pbExpose ) = 0;
      virtual HRESULT __stdcall put_ExposeName (
        /*[in]*/ BSTR pbsName ) = 0;
      virtual HRESULT __stdcall get_ExposeName (
        /*[out,retval]*/ BSTR * pbsName ) = 0;
      virtual HRESULT __stdcall put_SubfixString2 (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_SubfixString2 (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_SubfixAlignment (
        /*[in]*/ enum SubfixAlignmentConstants Value ) = 0;
      virtual HRESULT __stdcall get_SubfixAlignment (
        /*[out,retval]*/ enum SubfixAlignmentConstants * Value ) = 0;
      virtual HRESULT __stdcall raw_AddProjectionLineBreaks ( ) = 0;
      virtual HRESULT __stdcall raw_ClearProjectionLineBreaks ( ) = 0;
      virtual HRESULT __stdcall raw_GetBreakingDimensionsCount (
        /*[out,retval]*/ long * pnBreakingDimCount ) = 0;
      virtual HRESULT __stdcall put_Layer (
        /*[in]*/ BSTR Layer ) = 0;
      virtual HRESULT __stdcall get_Layer (
        /*[out,retval]*/ BSTR * Layer ) = 0;
      virtual HRESULT __stdcall get_AbsoluteTrackDistance (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall get_PMIPlane (
        /*[out,retval]*/ IDispatch * * pPMIPlane ) = 0;
      virtual HRESULT __stdcall get_PMITrackDistance (
        /*[out,retval]*/ double * pdPMITrackDistance ) = 0;
      virtual HRESULT __stdcall put_PMITrackDistance (
        /*[in]*/ double pdPMITrackDistance ) = 0;
      virtual HRESULT __stdcall put_UseStandardLimitAndFitTolerance (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_UseStandardLimitAndFitTolerance (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_HoleClassString (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_HoleClassString (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_ShaftClassString (
        /*[in]*/ BSTR Value ) = 0;
      virtual HRESULT __stdcall get_ShaftClassString (
        /*[out,retval]*/ BSTR * Value ) = 0;
      virtual HRESULT __stdcall put_InhibitZeroToleranceDisplay (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_InhibitZeroToleranceDisplay (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_SetPMIEditDirection (
        /*[in]*/ enum PMIEditDirectionConstants editDirectionConst ) = 0;
      virtual HRESULT __stdcall put_HidePMI (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_HidePMI (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_PrefixDisplayedText (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_SuperfixDisplayedText (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_SuffixDisplayedText (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_SubfixDisplayedText (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_Subfix2DisplayedText (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ struct DimStyle * pStyle ) = 0;
      virtual HRESULT __stdcall put_RadialExtensionDistance (
        /*[in]*/ double pdRadialExtensionDistance ) = 0;
      virtual HRESULT __stdcall get_RadialExtensionDistance (
        /*[out,retval]*/ double * pdRadialExtensionDistance ) = 0;
      virtual HRESULT __stdcall raw_GetDiscreteValues (
        /*[out]*/ int * pnumDiscreteValues,
        /*[out]*/ SAFEARRAY * * DiscreteValues ) = 0;
      virtual HRESULT __stdcall raw_SetDiscreteValues (
        /*[in]*/ int numDiscreteValues,
        /*[in]*/ SAFEARRAY * * DiscreteValues ) = 0;
      virtual HRESULT __stdcall raw_GetMultipleJogPoints (
        /*[out]*/ int * numJogPoints,
        /*[out]*/ double * initialYOffset,
        /*[out]*/ SAFEARRAY * * XOffsets,
        /*[out]*/ SAFEARRAY * * YOffsets,
        /*[out]*/ SAFEARRAY * * DistBet2Jogs ) = 0;
      virtual HRESULT __stdcall raw_SetMultipleJogPoints (
        /*[in]*/ int numJogPoints,
        /*[in]*/ double initialYOffset,
        /*[in]*/ SAFEARRAY * * XOffsets,
        /*[in]*/ SAFEARRAY * * YOffsets,
        /*[in]*/ SAFEARRAY * * DistBet2Jogs ) = 0;
      virtual HRESULT __stdcall raw_GetComment (
        /*[out,retval]*/ BSTR * Comment ) = 0;
      virtual HRESULT __stdcall raw_SetComment (
        /*[in]*/ BSTR Comment ) = 0;
      virtual HRESULT __stdcall raw_UpdateStatus (
        /*[out,retval]*/ enum DimStatusConstants * Value ) = 0;
      virtual HRESULT __stdcall raw_RemoveFromAlignmentSet ( ) = 0;
      virtual HRESULT __stdcall raw_BreakAlignmentSet ( ) = 0;
      virtual HRESULT __stdcall put_True3DSketchDimension (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_True3DSketchDimension (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_ReattachToDrawingView (
        /*[in]*/ IDispatch * DrawingView,
        /*[out,retval]*/ enum DimReattachStatusConstants * Value ) = 0;
      virtual HRESULT __stdcall raw_GetValueDiscreteValues (
        /*[out]*/ SAFEARRAY * * DiscreteValues ) = 0;
      virtual HRESULT __stdcall raw_SetValueDiscreteValues (
        /*[in]*/ SAFEARRAY * * DiscreteValues ) = 0;
      virtual HRESULT __stdcall raw_AddDiscreteValue (
        /*[in]*/ double DiscreteValue ) = 0;
      virtual HRESULT __stdcall raw_RemoveDiscreteValue (
        /*[in]*/ double DiscreteValue ) = 0;
      virtual HRESULT __stdcall raw_SetValueRangeValues (
        /*[in]*/ double LowValue,
        /*[in]*/ int Condition,
        /*[in]*/ double HighValue ) = 0;
      virtual HRESULT __stdcall raw_GetValueRangeValues (
        /*[out]*/ double * LowValue,
        /*[out]*/ int * Condition,
        /*[out]*/ double * HighValue ) = 0;
      virtual HRESULT __stdcall put_UnitsType (
        /*[in]*/ int pUnitType ) = 0;
      virtual HRESULT __stdcall get_UnitsType (
        /*[out,retval]*/ int * pUnitType ) = 0;
      virtual HRESULT __stdcall raw_GetValueRangeHighValue (
        /*[out]*/ double * pdHighValue ) = 0;
      virtual HRESULT __stdcall raw_SetValueRangeHighValue (
        /*[in]*/ double dHighValue ) = 0;
      virtual HRESULT __stdcall raw_GetValueRangeLowValue (
        /*[out]*/ double * pdHighValue ) = 0;
      virtual HRESULT __stdcall raw_SetValueRangeLowValue (
        /*[in]*/ double dHighValue ) = 0;
      virtual HRESULT __stdcall raw_ClearLimitsOrDiscreteValues ( ) = 0;
      virtual HRESULT __stdcall raw_GetValueOutOfRange (
        /*[out,retval]*/ double * ValueOutOfRange ) = 0;
      virtual HRESULT __stdcall get_IsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * pbIsReadOnly ) = 0;
      virtual HRESULT __stdcall raw_GetValueEx (
        /*[out]*/ double * pdValue,
        /*[in]*/ enum TGFramework::seUnitsTypeConstants seUnitsType ) = 0;
      virtual HRESULT __stdcall raw_SetValueEx (
        /*[in]*/ double dValue,
        /*[in]*/ enum TGFramework::seUnitsTypeConstants seUnitsType ) = 0;
      virtual HRESULT __stdcall put_EnablePrefix (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_EnablePrefix (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_AutoScaleSketch (
        /*[in]*/ double dValue,
        /*[out]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_SetValueAndUpdateCache (
        /*[in]*/ double dValue,
        /*[in]*/ enum TGFramework::seUnitsTypeConstants seUnitsType ) = 0;
      virtual HRESULT __stdcall raw_ConvertCDiameterToRDiameter (
        /*[in]*/ enum DimTypeConstants Type ) = 0;
};

struct __declspec(uuid("b2210830-2917-11ce-9b15-08003601cedf"))
DimensionStyle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetPrimaryUnits,put=PutPrimaryUnits))
    enum DimLinearUnitConstants PrimaryUnits;
    __declspec(property(get=GetRoundOffType,put=PutRoundOffType))
    enum DimRoundOffTypeConstants RoundOffType;
    __declspec(property(get=GetDelimiter,put=PutDelimiter))
    enum DimDelimiterTypeConstants Delimiter;
    __declspec(property(get=GetPrimaryDecimalRoundOff,put=PutPrimaryDecimalRoundOff))
    enum DimDecimalRoundOffTypeConstants PrimaryDecimalRoundOff;
    __declspec(property(get=GetPrimaryFractionRoundOff,put=PutPrimaryFractionRoundOff))
    enum DimFractionRoundOffTypeConstants PrimaryFractionRoundOff;
    __declspec(property(get=GetAngularUnits,put=PutAngularUnits))
    enum DimAngularUnitConstants AngularUnits;
    __declspec(property(get=GetAngularDMSRoundOff,put=PutAngularDMSRoundOff))
    enum DimDMSRoundOffTypeConstants AngularDMSRoundOff;
    __declspec(property(get=GetAngularDecimalRoundOff,put=PutAngularDecimalRoundOff))
    enum DimDecimalRoundOffTypeConstants AngularDecimalRoundOff;
    __declspec(property(get=GetAngularFractionRoundOff,put=PutAngularFractionRoundOff))
    enum DimFractionRoundOffTypeConstants AngularFractionRoundOff;
    __declspec(property(get=GetPrimaryLeadingZeros,put=PutPrimaryLeadingZeros))
    VARIANT_BOOL PrimaryLeadingZeros;
    __declspec(property(get=GetPrimaryTrailingZeros,put=PutPrimaryTrailingZeros))
    VARIANT_BOOL PrimaryTrailingZeros;
    __declspec(property(get=GetPrimaryUnitLabel,put=PutPrimaryUnitLabel))
    _bstr_t PrimaryUnitLabel;
    __declspec(property(get=GetPrimarySubunitsLabel,put=PutPrimarySubunitsLabel))
    _bstr_t PrimarySubunitsLabel;
    __declspec(property(get=GetMaximumSubunits,put=PutMaximumSubunits))
    int MaximumSubunits;
    __declspec(property(get=GetDualDisplay,put=PutDualDisplay))
    VARIANT_BOOL DualDisplay;
    __declspec(property(get=GetSecondaryUnits,put=PutSecondaryUnits))
    enum DimLinearUnitConstants SecondaryUnits;
    __declspec(property(get=GetSecondaryUnitRoundOff,put=PutSecondaryUnitRoundOff))
    enum DimRoundOffTypeConstants SecondaryUnitRoundOff;
    __declspec(property(get=GetSecondaryDecimalRoundOff,put=PutSecondaryDecimalRoundOff))
    enum DimDecimalRoundOffTypeConstants SecondaryDecimalRoundOff;
    __declspec(property(get=GetSecondaryFractionRoundOff,put=PutSecondaryFractionRoundOff))
    enum DimFractionRoundOffTypeConstants SecondaryFractionRoundOff;
    __declspec(property(get=GetSecondaryLeadingZeros,put=PutSecondaryLeadingZeros))
    VARIANT_BOOL SecondaryLeadingZeros;
    __declspec(property(get=GetSecondaryTrailingZeros,put=PutSecondaryTrailingZeros))
    VARIANT_BOOL SecondaryTrailingZeros;
    __declspec(property(get=GetSecondaryUnitLabel,put=PutSecondaryUnitLabel))
    _bstr_t SecondaryUnitLabel;
    __declspec(property(get=GetSecondarySubunitsLabel,put=PutSecondarySubunitsLabel))
    _bstr_t SecondarySubunitsLabel;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetRatio,put=PutRatio))
    double Ratio;
    __declspec(property(get=GetTextWeight,put=PutTextWeight))
    double TextWeight;
    __declspec(property(get=GetFont,put=PutFont))
    _bstr_t Font;
    __declspec(property(get=GetFontStyle,put=PutFontStyle))
    enum DimTextFontStyleConstants FontStyle;
    __declspec(property(get=GetTextOrientation,put=PutTextOrientation))
    enum DimTextOrientationConstants TextOrientation;
    __declspec(property(get=GetTextPosition,put=PutTextPosition))
    enum DimTextPositionConstants TextPosition;
    __declspec(property(get=GetCoordinateTextPosition,put=PutCoordinateTextPosition))
    enum DimCoordTextPositionConstants CoordinateTextPosition;
    __declspec(property(get=GetLimitTextArrangement,put=PutLimitTextArrangement))
    enum DimLimitTextArrangmentConstants LimitTextArrangement;
    __declspec(property(get=GetToleranceHeightRatio,put=PutToleranceHeightRatio))
    double ToleranceHeightRatio;
    __declspec(property(get=GetToleranceWeight,put=PutToleranceWeight))
    double ToleranceWeight;
    __declspec(property(get=GetTextClearanceGap,put=PutTextClearanceGap))
    double TextClearanceGap;
    __declspec(property(get=GetDualModeVerticalGap,put=PutDualModeVerticalGap))
    double DualModeVerticalGap;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetLineSpacing,put=PutLineSpacing))
    double LineSpacing;
    __declspec(property(get=GetAboveGap,put=PutAboveGap))
    double AboveGap;
    __declspec(property(get=GetHorizontalToleranceGap,put=PutHorizontalToleranceGap))
    double HorizontalToleranceGap;
    __declspec(property(get=GetVerticalToleranceGap,put=PutVerticalToleranceGap))
    double VerticalToleranceGap;
    __declspec(property(get=GetVerticalLimitsGap,put=PutVerticalLimitsGap))
    double VerticalLimitsGap;
    __declspec(property(get=GetHorizontalBoxGap,put=PutHorizontalBoxGap))
    double HorizontalBoxGap;
    __declspec(property(get=GetVerticalBoxGap,put=PutVerticalBoxGap))
    double VerticalBoxGap;
    __declspec(property(get=GetPrefixSuffixGap,put=PutPrefixSuffixGap))
    double PrefixSuffixGap;
    __declspec(property(get=GetSymbolGap,put=PutSymbolGap))
    double SymbolGap;
    __declspec(property(get=GetNTSSymbol,put=PutNTSSymbol))
    enum DimNTSTypeConstants NTSSymbol;
    __declspec(property(get=GetTerminatorType,put=PutTerminatorType))
    enum DimTermTypeConstants TerminatorType;
    __declspec(property(get=GetTerminatorDisplay,put=PutTerminatorDisplay))
    enum DimTermDisplayTypeConstants TerminatorDisplay;
    __declspec(property(get=GetOriginTerminatorType,put=PutOriginTerminatorType))
    enum DimTermTypeConstants OriginTerminatorType;
    __declspec(property(get=GetFreeSpaceTerminatorType,put=PutFreeSpaceTerminatorType))
    enum DimTermTypeConstants FreeSpaceTerminatorType;
    __declspec(property(get=GetDatumTerminatorType,put=PutDatumTerminatorType))
    enum DimDatumTermTypeConstants DatumTerminatorType;
    __declspec(property(get=GetTerminatorSize,put=PutTerminatorSize))
    double TerminatorSize;
    __declspec(property(get=GetTerminatorInsideLimit,put=PutTerminatorInsideLimit))
    double TerminatorInsideLimit;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    double LineWidth;
    __declspec(property(get=GetProjectionExtensionGap,put=PutProjectionExtensionGap))
    double ProjectionExtensionGap;
    __declspec(property(get=GetProjectionOffsetGap,put=PutProjectionOffsetGap))
    double ProjectionOffsetGap;
    __declspec(property(get=GetProjectionOffsetGapAlignment,put=PutProjectionOffsetGapAlignment))
    VARIANT_BOOL ProjectionOffsetGapAlignment;
    __declspec(property(get=GetProjectionAngle,put=PutProjectionAngle))
    double ProjectionAngle;
    __declspec(property(get=GetLineConnect,put=PutLineConnect))
    VARIANT_BOOL LineConnect;
    __declspec(property(get=GetStackPitch,put=PutStackPitch))
    double StackPitch;
    __declspec(property(get=GetLeaderLineLength,put=PutLeaderLineLength))
    double LeaderLineLength;
    __declspec(property(get=GetProjectionLineDisplay,put=PutProjectionLineDisplay))
    enum DimProjDisplayTypeConstants ProjectionLineDisplay;
    __declspec(property(get=GetViewCaptionLocation,put=PutViewCaptionLocation))
    enum DimViewCaptionLocationConstants ViewCaptionLocation;
    __declspec(property(get=GetAutoCenterProjectionLine,put=PutAutoCenterProjectionLine))
    VARIANT_BOOL AutoCenterProjectionLine;
    __declspec(property(get=GetCoordinateAutoJog,put=PutCoordinateAutoJog))
    VARIANT_BOOL CoordinateAutoJog;
    __declspec(property(get=GetCoordinateStackPitch,put=PutCoordinateStackPitch))
    double CoordinateStackPitch;
    __declspec(property(get=GetCommonOrigin,put=PutCommonOrigin))
    enum DimCommonOriginTypeConstants CommonOrigin;
    __declspec(property(get=GetSymbolPosition,put=PutSymbolPosition))
    enum DimSymbolPositionConstants SymbolPosition;
    __declspec(property(get=GetAutoSuppressDiameter,put=PutAutoSuppressDiameter))
    VARIANT_BOOL AutoSuppressDiameter;
    __declspec(property(get=GetDimensionScaleMode,put=PutDimensionScaleMode))
    enum DimScaleModeConstants DimensionScaleMode;
    __declspec(property(get=GetDimensionScale,put=PutDimensionScale))
    double DimensionScale;
    __declspec(property(get=GetDrivingColor,put=PutDrivingColor))
    long DrivingColor;
    __declspec(property(get=GetDrivenColor,put=PutDrivenColor))
    long DrivenColor;
    __declspec(property(get=GetErrorColor,put=PutErrorColor))
    long ErrorColor;
    __declspec(property(get=GetMaximumViewAngle,put=PutMaximumViewAngle))
    double MaximumViewAngle;
    __declspec(property(get=GetProjectionToleranceZonePosition,put=PutProjectionToleranceZonePosition))
    enum DimProjTolZonePositionConstants ProjectionToleranceZonePosition;
    __declspec(property(get=GetDatumFrameDashes,put=PutDatumFrameDashes))
    VARIANT_BOOL DatumFrameDashes;
    __declspec(property(get=GetViewTextRatio,put=PutViewTextRatio))
    double ViewTextRatio;
    __declspec(property(get=GetViewTerminatorRatio,put=PutViewTerminatorRatio))
    double ViewTerminatorRatio;
    __declspec(property(get=GetViewLineWidth,put=PutViewLineWidth))
    double ViewLineWidth;
    __declspec(property(get=GetViewLineType,put=PutViewLineType))
    _bstr_t ViewLineType;
    __declspec(property(get=GetViewCuttingPlaneLineDisplay,put=PutViewCuttingPlaneLineDisplay))
    enum DimViewCuttingPlaneDisplayTypeConstants ViewCuttingPlaneLineDisplay;
    __declspec(property(get=GetViewPlaneLineDisplay,put=PutViewPlaneLineDisplay))
    enum DimViewPlaneDisplayTypeConstants ViewPlaneLineDisplay;
    __declspec(property(get=GetSecondaryToleranceEquivalent,put=PutSecondaryToleranceEquivalent))
    VARIANT_BOOL SecondaryToleranceEquivalent;
    __declspec(property(get=GetOffsetLeaderType,put=PutOffsetLeaderType))
    enum DimOffsetLeaderTypeConstants OffsetLeaderType;
    __declspec(property(get=GetCenterLineType,put=PutCenterLineType))
    _bstr_t CenterLineType;
    __declspec(property(get=GetRoundUp,put=PutRoundUp))
    enum DimRoundUpTypeConstants RoundUp;
    __declspec(property(get=GetSecondaryLinearRoundOffType,put=PutSecondaryLinearRoundOffType))
    enum DimRoundOffTypeConstants SecondaryLinearRoundOffType;
    __declspec(property(get=GetAngularRoundOffType,put=PutAngularRoundOffType))
    enum DimRoundOffTypeConstants AngularRoundOffType;
    __declspec(property(get=GetCenterMarkExtension,put=PutCenterMarkExtension))
    double CenterMarkExtension;
    __declspec(property(get=GetChamferUse45DegreeCharacter,put=PutChamferUse45DegreeCharacter))
    VARIANT_BOOL ChamferUse45DegreeCharacter;
    __declspec(property(get=GetSmartDepthHoleThru,put=PutSmartDepthHoleThru))
    _bstr_t SmartDepthHoleThru;
    __declspec(property(get=GetSmartDepthHoleFinite,put=PutSmartDepthHoleFinite))
    _bstr_t SmartDepthHoleFinite;
    __declspec(property(get=GetSmartDepthThreadThru,put=PutSmartDepthThreadThru))
    _bstr_t SmartDepthThreadThru;
    __declspec(property(get=GetSmartDepthThreadFinite,put=PutSmartDepthThreadFinite))
    _bstr_t SmartDepthThreadFinite;
    __declspec(property(get=GetViewCPLCaptionLocation,put=PutViewCPLCaptionLocation))
    enum DimViewCPLCaptionLocationConstants ViewCPLCaptionLocation;
    __declspec(property(get=GetViewSuffixAsPrefix,put=PutViewSuffixAsPrefix))
    VARIANT_BOOL ViewSuffixAsPrefix;
    __declspec(property(get=GetViewThinTerminator,put=PutViewThinTerminator))
    VARIANT_BOOL ViewThinTerminator;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetParent,put=PutParent))
    _bstr_t Parent;
    __declspec(property(get=GetCenterMarkSize,put=PutCenterMarkSize))
    double CenterMarkSize;
    __declspec(property(get=GetAutoPhase,put=PutAutoPhase))
    VARIANT_BOOL AutoPhase;
    __declspec(property(get=GetViewVPLCaptionAtEnd,put=PutViewVPLCaptionAtEnd))
    VARIANT_BOOL ViewVPLCaptionAtEnd;
    __declspec(property(get=GetLowerCaseMultiplicationSymbol,put=PutLowerCaseMultiplicationSymbol))
    VARIANT_BOOL LowerCaseMultiplicationSymbol;
    __declspec(property(get=GetApplyBreakLineGap,put=PutApplyBreakLineGap))
    VARIANT_BOOL ApplyBreakLineGap;
    __declspec(property(get=GetTextAutoFillBackground,put=PutTextAutoFillBackground))
    VARIANT_BOOL TextAutoFillBackground;
    __declspec(property(get=GetPulledOutTextOrientation,put=PutPulledOutTextOrientation))
    enum DimTextOrientationConstants PulledOutTextOrientation;
    __declspec(property(get=GetPulledOutTextPosition,put=PutPulledOutTextPosition))
    enum DimTextPositionConstants PulledOutTextPosition;
    __declspec(property(get=GetOverridePulledOutText,put=PutOverridePulledOutText))
    VARIANT_BOOL OverridePulledOutText;
    __declspec(property(get=GetViewLineArrowOffset,put=PutViewLineArrowOffset))
    double ViewLineArrowOffset;
    __declspec(property(get=GetViewThickLineLength,put=PutViewThickLineLength))
    double ViewThickLineLength;
    __declspec(property(get=GetOrigTerminatorSize,put=PutOrigTerminatorSize))
    double OrigTerminatorSize;
    __declspec(property(get=GetConnectorLineType,put=PutConnectorLineType))
    _bstr_t ConnectorLineType;
    __declspec(property(get=GetConnectorColor,put=PutConnectorColor))
    long ConnectorColor;
    __declspec(property(get=GetConnectorWidth,put=PutConnectorWidth))
    double ConnectorWidth;
    __declspec(property(get=GetFractionSeparator,put=PutFractionSeparator))
    _bstr_t FractionSeparator;
    __declspec(property(get=GetHeightPMI,put=PutHeightPMI))
    double HeightPMI;
    __declspec(property(get=GetProjectionBreakGap,put=PutProjectionBreakGap))
    double ProjectionBreakGap;
    __declspec(property(get=GetSecondaryDelimiter,put=PutSecondaryDelimiter))
    enum DimDelimiterTypeConstants SecondaryDelimiter;
    __declspec(property(get=GetMatchPrimaryDelimiter,put=PutMatchPrimaryDelimiter))
    VARIANT_BOOL MatchPrimaryDelimiter;
    __declspec(property(get=GetInhibitZeroToleranceDisplay,put=PutInhibitZeroToleranceDisplay))
    VARIANT_BOOL InhibitZeroToleranceDisplay;
    __declspec(property(get=GetAllAroundMultiplier,put=PutAllAroundMultiplier))
    double AllAroundMultiplier;
    __declspec(property(get=GetPulledOutText2Orientation,put=PutPulledOutText2Orientation))
    enum DimTextOrientationConstants PulledOutText2Orientation;
    __declspec(property(get=GetPulledOutText2Position,put=PutPulledOutText2Position))
    enum DimTextPositionConstants PulledOutText2Position;
    __declspec(property(get=GetOverridePulledOutText2,put=PutOverridePulledOutText2))
    VARIANT_BOOL OverridePulledOutText2;
    __declspec(property(get=GetDisplayDegreeSymbolOnNumericTolerance,put=PutDisplayDegreeSymbolOnNumericTolerance))
    VARIANT_BOOL DisplayDegreeSymbolOnNumericTolerance;
    __declspec(property(get=GetZeroInchesForFTIN,put=PutZeroInchesForFTIN))
    VARIANT_BOOL ZeroInchesForFTIN;
    __declspec(property(get=GetSymbolFont,put=PutSymbolFont))
    enum DimStyleSymbolFontConstants SymbolFont;
    __declspec(property(get=GetCalloutTextAspectRatio,put=PutCalloutTextAspectRatio))
    double CalloutTextAspectRatio;
    __declspec(property(get=GetDatumTerminatorGap,put=PutDatumTerminatorGap))
    double DatumTerminatorGap;
    __declspec(property(get=GetDatumFrameShape,put=PutDatumFrameShape))
    enum DimStyleDatumFrameShapeConstants DatumFrameShape;
    __declspec(property(get=GetDisplayCoordinateOriginText,put=PutDisplayCoordinateOriginText))
    VARIANT_BOOL DisplayCoordinateOriginText;
    __declspec(property(get=GetProjectionLineDisplayForIntersectionPoint,put=PutProjectionLineDisplayForIntersectionPoint))
    enum DimProjDisplayTypeConstants ProjectionLineDisplayForIntersectionPoint;
    __declspec(property(get=GetPlacePrefixInsideBasicDimensionBox,put=PutPlacePrefixInsideBasicDimensionBox))
    VARIANT_BOOL PlacePrefixInsideBasicDimensionBox;
    __declspec(property(get=GetSecondaryUnitSeparator,put=PutSecondaryUnitSeparator))
    enum DimStyleSecondaryUnitSeparatorConstants SecondaryUnitSeparator;
    __declspec(property(get=GetWeldSymbolLineWidth,put=PutWeldSymbolLineWidth))
    double WeldSymbolLineWidth;
    __declspec(property(get=GetThreeSidedSymbolOffsetGap,put=PutThreeSidedSymbolOffsetGap))
    double ThreeSidedSymbolOffsetGap;
    __declspec(property(get=GetHoleShaftToleranceSeparatorType,put=PutHoleShaftToleranceSeparatorType))
    enum DimHoleShaftSeparatorTypeConstants HoleShaftToleranceSeparatorType;
    __declspec(property(get=GetToleranceTextVerticalAlignment,put=PutToleranceTextVerticalAlignment))
    enum TextVerticalAlignmentConstants ToleranceTextVerticalAlignment;
    __declspec(property(get=GetToleranceTextHorizontalAlignment,put=PutToleranceTextHorizontalAlignment))
    enum DimToleranceTextHorizontalAlignOptionsConstants ToleranceTextHorizontalAlignment;
    __declspec(property(get=GetUseTextSizeForCombinedTolValueDisplay,put=PutUseTextSizeForCombinedTolValueDisplay))
    VARIANT_BOOL UseTextSizeForCombinedTolValueDisplay;
    __declspec(property(get=GetDatumFrameLineTermThickness,put=PutDatumFrameLineTermThickness))
    double DatumFrameLineTermThickness;
    __declspec(property(get=GetDatumTargetTerminatorType,put=PutDatumTargetTerminatorType))
    enum DimDatumTargetTermTypeConstants DatumTargetTerminatorType;
    __declspec(property(get=GetPinSymbolTerminatorType,put=PutPinSymbolTerminatorType))
    enum DimPinSymbolTermTypeConstants PinSymbolTerminatorType;
    __declspec(property(get=GetPrimaryLinearToleranceUnits,put=PutPrimaryLinearToleranceUnits))
    enum DimLinearUnitConstants PrimaryLinearToleranceUnits;
    __declspec(property(get=GetPrimaryLinearToleranceRoundOffType,put=PutPrimaryLinearToleranceRoundOffType))
    enum DimRoundOffTypeConstants PrimaryLinearToleranceRoundOffType;
    __declspec(property(get=GetPrimaryLinearToleranceDecimalRoundOff,put=PutPrimaryLinearToleranceDecimalRoundOff))
    enum DimDecimalRoundOffTypeConstants PrimaryLinearToleranceDecimalRoundOff;
    __declspec(property(get=GetPrimaryLinearToleranceFractionRoundOff,put=PutPrimaryLinearToleranceFractionRoundOff))
    enum DimFractionRoundOffTypeConstants PrimaryLinearToleranceFractionRoundOff;
    __declspec(property(get=GetPrimaryLinearToleranceUnitLabel,put=PutPrimaryLinearToleranceUnitLabel))
    _bstr_t PrimaryLinearToleranceUnitLabel;
    __declspec(property(get=GetPrimaryLinearToleranceSubunitsLabel,put=PutPrimaryLinearToleranceSubunitsLabel))
    _bstr_t PrimaryLinearToleranceSubunitsLabel;
    __declspec(property(get=GetPrimaryLinearToleranceMaximumSubunits,put=PutPrimaryLinearToleranceMaximumSubunits))
    int PrimaryLinearToleranceMaximumSubunits;
    __declspec(property(get=GetPrimaryLinearToleranceFractionSeparator,put=PutPrimaryLinearToleranceFractionSeparator))
    _bstr_t PrimaryLinearToleranceFractionSeparator;
    __declspec(property(get=GetAngularToleranceUnits,put=PutAngularToleranceUnits))
    enum DimAngularUnitConstants AngularToleranceUnits;
    __declspec(property(get=GetAngularToleranceRoundOffType,put=PutAngularToleranceRoundOffType))
    enum DimRoundOffTypeConstants AngularToleranceRoundOffType;
    __declspec(property(get=GetAngularToleranceDMSRoundOff,put=PutAngularToleranceDMSRoundOff))
    enum DimDMSRoundOffTypeConstants AngularToleranceDMSRoundOff;
    __declspec(property(get=GetAngularToleranceDecimalRoundOff,put=PutAngularToleranceDecimalRoundOff))
    enum DimDecimalRoundOffTypeConstants AngularToleranceDecimalRoundOff;
    __declspec(property(get=GetAngularToleranceFractionRoundOff,put=PutAngularToleranceFractionRoundOff))
    enum DimFractionRoundOffTypeConstants AngularToleranceFractionRoundOff;
    __declspec(property(get=GetSecondaryLinearToleranceUnits,put=PutSecondaryLinearToleranceUnits))
    enum DimLinearUnitConstants SecondaryLinearToleranceUnits;
    __declspec(property(get=GetSecondaryLinearToleranceRoundOffType,put=PutSecondaryLinearToleranceRoundOffType))
    enum DimRoundOffTypeConstants SecondaryLinearToleranceRoundOffType;
    __declspec(property(get=GetSecondaryLinearToleranceDecimalRoundOff,put=PutSecondaryLinearToleranceDecimalRoundOff))
    enum DimDecimalRoundOffTypeConstants SecondaryLinearToleranceDecimalRoundOff;
    __declspec(property(get=GetSecondaryLinearToleranceFractionRoundOff,put=PutSecondaryLinearToleranceFractionRoundOff))
    enum DimFractionRoundOffTypeConstants SecondaryLinearToleranceFractionRoundOff;
    __declspec(property(get=GetSecondaryLinearToleranceUnitLabel,put=PutSecondaryLinearToleranceUnitLabel))
    _bstr_t SecondaryLinearToleranceUnitLabel;
    __declspec(property(get=GetSecondaryLinearToleranceSubunitsLabel,put=PutSecondaryLinearToleranceSubunitsLabel))
    _bstr_t SecondaryLinearToleranceSubunitsLabel;
    __declspec(property(get=GetSecondaryLinearToleranceMaximumSubunits,put=PutSecondaryLinearToleranceMaximumSubunits))
    int SecondaryLinearToleranceMaximumSubunits;
    __declspec(property(get=GetSecondaryLinearToleranceFractionSeparator,put=PutSecondaryLinearToleranceFractionSeparator))
    _bstr_t SecondaryLinearToleranceFractionSeparator;
    __declspec(property(get=GetSecondaryLinearFractionSeparator,put=PutSecondaryLinearFractionSeparator))
    _bstr_t SecondaryLinearFractionSeparator;
    __declspec(property(get=GetDualUnitPosition,put=PutDualUnitPosition))
    enum DimDualUnitPositionConstants DualUnitPosition;
    __declspec(property(get=GetDualUnitJustification,put=PutDualUnitJustification))
    enum TextHorizontalAlignmentConstants DualUnitJustification;
    __declspec(property(get=GetSmartDepthSlotThru,put=PutSmartDepthSlotThru))
    _bstr_t SmartDepthSlotThru;
    __declspec(property(get=GetSmartDepthSlotFinite,put=PutSmartDepthSlotFinite))
    _bstr_t SmartDepthSlotFinite;
    __declspec(property(get=GetSlotCalloutSimple,put=PutSlotCalloutSimple))
    _bstr_t SlotCalloutSimple;
    __declspec(property(get=GetSlotCalloutCounterbore,put=PutSlotCalloutCounterbore))
    _bstr_t SlotCalloutCounterbore;
    __declspec(property(get=GetCoordinateTextOrientation,put=PutCoordinateTextOrientation))
    enum DimTextOrientationConstants CoordinateTextOrientation;
    __declspec(property(get=GetEnableAutoJogForCoordinate,put=PutEnableAutoJogForCoordinate))
    VARIANT_BOOL EnableAutoJogForCoordinate;
    __declspec(property(get=GetAllowNegativeValueForCoordinate,put=PutAllowNegativeValueForCoordinate))
    VARIANT_BOOL AllowNegativeValueForCoordinate;
    __declspec(property(get=GetAllowOriginValueChangeForCoordinate,put=PutAllowOriginValueChangeForCoordinate))
    VARIANT_BOOL AllowOriginValueChangeForCoordinate;
    __declspec(property(get=GetShowOriginLineForCoordinate,put=PutShowOriginLineForCoordinate))
    VARIANT_BOOL ShowOriginLineForCoordinate;
    __declspec(property(get=GetOverlineExtension,put=PutOverlineExtension))
    double OverlineExtension;
    __declspec(property(get=GetSuppressSymmetricDiameterSymbol,put=PutSuppressSymmetricDiameterSymbol))
    VARIANT_BOOL SuppressSymmetricDiameterSymbol;
    __declspec(property(get=GetUnderlineSymbolAndPrefix,put=PutUnderlineSymbolAndPrefix))
    VARIANT_BOOL UnderlineSymbolAndPrefix;
    __declspec(property(get=GetInitialStackPitch,put=PutInitialStackPitch))
    double InitialStackPitch;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetHoleCalloutCounterdrill,put=PutHoleCalloutCounterdrill))
    _bstr_t HoleCalloutCounterdrill;
    __declspec(property(get=GetHoleCalloutCounterdrillThreaded,put=PutHoleCalloutCounterdrillThreaded))
    _bstr_t HoleCalloutCounterdrillThreaded;
    __declspec(property(get=GetPrimaryStackFraction,put=PutPrimaryStackFraction))
    enum DimStackFractionTypeConstants PrimaryStackFraction;
    __declspec(property(get=GetSecondaryStackFraction,put=PutSecondaryStackFraction))
    enum DimStackFractionTypeConstants SecondaryStackFraction;
    __declspec(property(get=GetPrimaryStackFractionSize,put=PutPrimaryStackFractionSize))
    enum DimStackFractionSizeConstants PrimaryStackFractionSize;
    __declspec(property(get=GetSecondaryStackFractionSize,put=PutSecondaryStackFractionSize))
    enum DimStackFractionSizeConstants SecondaryStackFractionSize;
    __declspec(property(get=GetShowHideReferenceGeometry,put=PutShowHideReferenceGeometry))
    VARIANT_BOOL ShowHideReferenceGeometry;
    __declspec(property(get=GetEnableAngularJog,put=PutEnableAngularJog))
    VARIANT_BOOL EnableAngularJog;
    __declspec(property(get=GetHoleCalloutSimple,put=PutHoleCalloutSimple))
    _bstr_t HoleCalloutSimple;
    __declspec(property(get=GetHoleCalloutCounterbore,put=PutHoleCalloutCounterbore))
    _bstr_t HoleCalloutCounterbore;
    __declspec(property(get=GetHoleCalloutCountersink,put=PutHoleCalloutCountersink))
    _bstr_t HoleCalloutCountersink;
    __declspec(property(get=GetHoleCalloutSimpleThreaded,put=PutHoleCalloutSimpleThreaded))
    _bstr_t HoleCalloutSimpleThreaded;
    __declspec(property(get=GetHoleCalloutCounterboreThreaded,put=PutHoleCalloutCounterboreThreaded))
    _bstr_t HoleCalloutCounterboreThreaded;
    __declspec(property(get=GetHoleCalloutCountersinkThreaded,put=PutHoleCalloutCountersinkThreaded))
    _bstr_t HoleCalloutCountersinkThreaded;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetName ( );
    void PutPrimaryUnits (
        enum DimLinearUnitConstants _arg1 );
    enum DimLinearUnitConstants GetPrimaryUnits ( );
    void PutRoundOffType (
        enum DimRoundOffTypeConstants _arg1 );
    enum DimRoundOffTypeConstants GetRoundOffType ( );
    void PutDelimiter (
        enum DimDelimiterTypeConstants _arg1 );
    enum DimDelimiterTypeConstants GetDelimiter ( );
    void PutPrimaryDecimalRoundOff (
        enum DimDecimalRoundOffTypeConstants _arg1 );
    enum DimDecimalRoundOffTypeConstants GetPrimaryDecimalRoundOff ( );
    void PutPrimaryFractionRoundOff (
        enum DimFractionRoundOffTypeConstants _arg1 );
    enum DimFractionRoundOffTypeConstants GetPrimaryFractionRoundOff ( );
    void PutAngularUnits (
        enum DimAngularUnitConstants _arg1 );
    enum DimAngularUnitConstants GetAngularUnits ( );
    void PutAngularDMSRoundOff (
        enum DimDMSRoundOffTypeConstants _arg1 );
    enum DimDMSRoundOffTypeConstants GetAngularDMSRoundOff ( );
    void PutAngularDecimalRoundOff (
        enum DimDecimalRoundOffTypeConstants _arg1 );
    enum DimDecimalRoundOffTypeConstants GetAngularDecimalRoundOff ( );
    void PutAngularFractionRoundOff (
        enum DimFractionRoundOffTypeConstants _arg1 );
    enum DimFractionRoundOffTypeConstants GetAngularFractionRoundOff ( );
    void PutPrimaryLeadingZeros (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetPrimaryLeadingZeros ( );
    void PutPrimaryTrailingZeros (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetPrimaryTrailingZeros ( );
    void PutPrimaryUnitLabel (
        _bstr_t _arg1 );
    _bstr_t GetPrimaryUnitLabel ( );
    void PutPrimarySubunitsLabel (
        _bstr_t _arg1 );
    _bstr_t GetPrimarySubunitsLabel ( );
    void PutMaximumSubunits (
        int _arg1 );
    int GetMaximumSubunits ( );
    void PutDualDisplay (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDualDisplay ( );
    void PutSecondaryUnits (
        enum DimLinearUnitConstants _arg1 );
    enum DimLinearUnitConstants GetSecondaryUnits ( );
    void PutSecondaryUnitRoundOff (
        enum DimRoundOffTypeConstants _arg1 );
    enum DimRoundOffTypeConstants GetSecondaryUnitRoundOff ( );
    void PutSecondaryDecimalRoundOff (
        enum DimDecimalRoundOffTypeConstants _arg1 );
    enum DimDecimalRoundOffTypeConstants GetSecondaryDecimalRoundOff ( );
    void PutSecondaryFractionRoundOff (
        enum DimFractionRoundOffTypeConstants _arg1 );
    enum DimFractionRoundOffTypeConstants GetSecondaryFractionRoundOff ( );
    void PutSecondaryLeadingZeros (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetSecondaryLeadingZeros ( );
    void PutSecondaryTrailingZeros (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetSecondaryTrailingZeros ( );
    void PutSecondaryUnitLabel (
        _bstr_t _arg1 );
    _bstr_t GetSecondaryUnitLabel ( );
    void PutSecondarySubunitsLabel (
        _bstr_t _arg1 );
    _bstr_t GetSecondarySubunitsLabel ( );
    void PutHeight (
        double _arg1 );
    double GetHeight ( );
    void PutRatio (
        double _arg1 );
    double GetRatio ( );
    void PutTextWeight (
        double _arg1 );
    double GetTextWeight ( );
    void PutFont (
        _bstr_t _arg1 );
    _bstr_t GetFont ( );
    void PutFontStyle (
        enum DimTextFontStyleConstants _arg1 );
    enum DimTextFontStyleConstants GetFontStyle ( );
    void PutTextOrientation (
        enum DimTextOrientationConstants _arg1 );
    enum DimTextOrientationConstants GetTextOrientation ( );
    void PutTextPosition (
        enum DimTextPositionConstants _arg1 );
    enum DimTextPositionConstants GetTextPosition ( );
    void PutLimitTextArrangement (
        enum DimLimitTextArrangmentConstants _arg1 );
    enum DimLimitTextArrangmentConstants GetLimitTextArrangement ( );
    void PutToleranceHeightRatio (
        double _arg1 );
    double GetToleranceHeightRatio ( );
    void PutToleranceWeight (
        double _arg1 );
    double GetToleranceWeight ( );
    void PutNTSSymbol (
        enum DimNTSTypeConstants _arg1 );
    enum DimNTSTypeConstants GetNTSSymbol ( );
    void PutTerminatorType (
        enum DimTermTypeConstants _arg1 );
    enum DimTermTypeConstants GetTerminatorType ( );
    void PutTerminatorDisplay (
        enum DimTermDisplayTypeConstants _arg1 );
    enum DimTermDisplayTypeConstants GetTerminatorDisplay ( );
    void PutOriginTerminatorType (
        enum DimTermTypeConstants _arg1 );
    enum DimTermTypeConstants GetOriginTerminatorType ( );
    void PutFreeSpaceTerminatorType (
        enum DimTermTypeConstants _arg1 );
    enum DimTermTypeConstants GetFreeSpaceTerminatorType ( );
    void PutDatumTerminatorType (
        enum DimDatumTermTypeConstants _arg1 );
    enum DimDatumTermTypeConstants GetDatumTerminatorType ( );
    void PutTerminatorSize (
        double _arg1 );
    double GetTerminatorSize ( );
    void PutTerminatorInsideLimit (
        double _arg1 );
    double GetTerminatorInsideLimit ( );
    void PutLineWidth (
        double _arg1 );
    double GetLineWidth ( );
    void PutProjectionExtensionGap (
        double _arg1 );
    double GetProjectionExtensionGap ( );
    void PutProjectionOffsetGap (
        double _arg1 );
    double GetProjectionOffsetGap ( );
    void PutProjectionOffsetGapAlignment (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetProjectionOffsetGapAlignment ( );
    void PutProjectionAngle (
        double _arg1 );
    double GetProjectionAngle ( );
    void PutLineConnect (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetLineConnect ( );
    void PutStackPitch (
        double _arg1 );
    double GetStackPitch ( );
    void PutLeaderLineLength (
        double _arg1 );
    double GetLeaderLineLength ( );
    void PutCoordinateAutoJog (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetCoordinateAutoJog ( );
    void PutCoordinateStackPitch (
        double _arg1 );
    double GetCoordinateStackPitch ( );
    void PutCommonOrigin (
        enum DimCommonOriginTypeConstants _arg1 );
    enum DimCommonOriginTypeConstants GetCommonOrigin ( );
    void PutCoordinateTextPosition (
        enum DimCoordTextPositionConstants _arg1 );
    enum DimCoordTextPositionConstants GetCoordinateTextPosition ( );
    void PutSymbolPosition (
        enum DimSymbolPositionConstants _arg1 );
    enum DimSymbolPositionConstants GetSymbolPosition ( );
    void PutAutoSuppressDiameter (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetAutoSuppressDiameter ( );
    void PutDimensionScaleMode (
        enum DimScaleModeConstants _arg1 );
    enum DimScaleModeConstants GetDimensionScaleMode ( );
    void PutDimensionScale (
        double _arg1 );
    double GetDimensionScale ( );
    void PutErrorColor (
        long _arg1 );
    long GetErrorColor ( );
    void PutDrivingColor (
        long _arg1 );
    long GetDrivingColor ( );
    void PutDrivenColor (
        long _arg1 );
    long GetDrivenColor ( );
    void PutAutoCenterProjectionLine (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetAutoCenterProjectionLine ( );
    void PutProjectionLineDisplay (
        enum DimProjDisplayTypeConstants _arg1 );
    enum DimProjDisplayTypeConstants GetProjectionLineDisplay ( );
    void PutProjectionLineDisplayForIntersectionPoint (
        enum DimProjDisplayTypeConstants _arg1 );
    enum DimProjDisplayTypeConstants GetProjectionLineDisplayForIntersectionPoint ( );
    void PutTextClearanceGap (
        double _arg1 );
    double GetTextClearanceGap ( );
    void PutDualModeVerticalGap (
        double _arg1 );
    double GetDualModeVerticalGap ( );
    void PutLineSpacing (
        double _arg1 );
    double GetLineSpacing ( );
    void PutAboveGap (
        double _arg1 );
    double GetAboveGap ( );
    void PutHorizontalToleranceGap (
        double _arg1 );
    double GetHorizontalToleranceGap ( );
    void PutVerticalToleranceGap (
        double _arg1 );
    double GetVerticalToleranceGap ( );
    void PutVerticalLimitsGap (
        double _arg1 );
    double GetVerticalLimitsGap ( );
    void PutHorizontalBoxGap (
        double _arg1 );
    double GetHorizontalBoxGap ( );
    void PutVerticalBoxGap (
        double _arg1 );
    double GetVerticalBoxGap ( );
    void PutPrefixSuffixGap (
        double _arg1 );
    double GetPrefixSuffixGap ( );
    void PutSymbolGap (
        double _arg1 );
    double GetSymbolGap ( );
    void PutMaximumViewAngle (
        double _arg1 );
    double GetMaximumViewAngle ( );
    void PutProjectionToleranceZonePosition (
        enum DimProjTolZonePositionConstants _arg1 );
    enum DimProjTolZonePositionConstants GetProjectionToleranceZonePosition ( );
    void PutDatumFrameDashes (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDatumFrameDashes ( );
    void PutViewTextRatio (
        double _arg1 );
    double GetViewTextRatio ( );
    void PutViewTerminatorRatio (
        double _arg1 );
    double GetViewTerminatorRatio ( );
    void PutViewLineWidth (
        double _arg1 );
    double GetViewLineWidth ( );
    void PutViewLineType (
        _bstr_t _arg1 );
    _bstr_t GetViewLineType ( );
    void PutViewCuttingPlaneLineDisplay (
        enum DimViewCuttingPlaneDisplayTypeConstants _arg1 );
    enum DimViewCuttingPlaneDisplayTypeConstants GetViewCuttingPlaneLineDisplay ( );
    void PutViewPlaneLineDisplay (
        enum DimViewPlaneDisplayTypeConstants _arg1 );
    enum DimViewPlaneDisplayTypeConstants GetViewPlaneLineDisplay ( );
    void PutViewCaptionLocation (
        enum DimViewCaptionLocationConstants _arg1 );
    enum DimViewCaptionLocationConstants GetViewCaptionLocation ( );
    void PutViewCPLCaptionLocation (
        enum DimViewCPLCaptionLocationConstants _arg1 );
    enum DimViewCPLCaptionLocationConstants GetViewCPLCaptionLocation ( );
    void PutViewSuffixAsPrefix (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetViewSuffixAsPrefix ( );
    void PutViewThinTerminator (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetViewThinTerminator ( );
    void PutViewVPLCaptionAtEnd (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetViewVPLCaptionAtEnd ( );
    void PutOffsetLeaderType (
        enum DimOffsetLeaderTypeConstants _arg1 );
    enum DimOffsetLeaderTypeConstants GetOffsetLeaderType ( );
    void PutSecondaryToleranceEquivalent (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetSecondaryToleranceEquivalent ( );
    void PutCenterLineType (
        _bstr_t _arg1 );
    _bstr_t GetCenterLineType ( );
    _bstr_t GetDescription ( );
    void PutParent (
        _bstr_t _arg1 );
    _bstr_t GetParent ( );
    void PutCenterMarkSize (
        double _arg1 );
    double GetCenterMarkSize ( );
    void PutAutoPhase (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetAutoPhase ( );
    void PutRoundUp (
        enum DimRoundUpTypeConstants _arg1 );
    enum DimRoundUpTypeConstants GetRoundUp ( );
    void PutSecondaryLinearRoundOffType (
        enum DimRoundOffTypeConstants _arg1 );
    enum DimRoundOffTypeConstants GetSecondaryLinearRoundOffType ( );
    void PutAngularRoundOffType (
        enum DimRoundOffTypeConstants _arg1 );
    enum DimRoundOffTypeConstants GetAngularRoundOffType ( );
    void PutCenterMarkExtension (
        double _arg1 );
    double GetCenterMarkExtension ( );
    void PutChamferUse45DegreeCharacter (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetChamferUse45DegreeCharacter ( );
    void PutSmartDepthHoleThru (
        _bstr_t _arg1 );
    _bstr_t GetSmartDepthHoleThru ( );
    void PutSmartDepthHoleFinite (
        _bstr_t _arg1 );
    _bstr_t GetSmartDepthHoleFinite ( );
    void PutSmartDepthThreadThru (
        _bstr_t _arg1 );
    _bstr_t GetSmartDepthThreadThru ( );
    void PutSmartDepthThreadFinite (
        _bstr_t _arg1 );
    _bstr_t GetSmartDepthThreadFinite ( );
    void PutLowerCaseMultiplicationSymbol (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetLowerCaseMultiplicationSymbol ( );
    void PutHoleCalloutSimple (
        _bstr_t _arg1 );
    _bstr_t GetHoleCalloutSimple ( );
    void PutHoleCalloutCounterbore (
        _bstr_t _arg1 );
    _bstr_t GetHoleCalloutCounterbore ( );
    void PutHoleCalloutCountersink (
        _bstr_t _arg1 );
    _bstr_t GetHoleCalloutCountersink ( );
    void PutHoleCalloutSimpleThreaded (
        _bstr_t _arg1 );
    _bstr_t GetHoleCalloutSimpleThreaded ( );
    void PutHoleCalloutCounterboreThreaded (
        _bstr_t _arg1 );
    _bstr_t GetHoleCalloutCounterboreThreaded ( );
    void PutHoleCalloutCountersinkThreaded (
        _bstr_t _arg1 );
    _bstr_t GetHoleCalloutCountersinkThreaded ( );
    void PutApplyBreakLineGap (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetApplyBreakLineGap ( );
    void PutTextAutoFillBackground (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetTextAutoFillBackground ( );
    void PutPulledOutTextOrientation (
        enum DimTextOrientationConstants _arg1 );
    enum DimTextOrientationConstants GetPulledOutTextOrientation ( );
    void PutPulledOutTextPosition (
        enum DimTextPositionConstants _arg1 );
    enum DimTextPositionConstants GetPulledOutTextPosition ( );
    void PutOverridePulledOutText (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetOverridePulledOutText ( );
    void PutViewLineArrowOffset (
        double _arg1 );
    double GetViewLineArrowOffset ( );
    void PutViewThickLineLength (
        double _arg1 );
    double GetViewThickLineLength ( );
    void PutOrigTerminatorSize (
        double _arg1 );
    double GetOrigTerminatorSize ( );
    void PutConnectorLineType (
        _bstr_t _arg1 );
    _bstr_t GetConnectorLineType ( );
    void PutConnectorColor (
        long _arg1 );
    long GetConnectorColor ( );
    void PutConnectorWidth (
        double _arg1 );
    double GetConnectorWidth ( );
    void PutFractionSeparator (
        _bstr_t _arg1 );
    _bstr_t GetFractionSeparator ( );
    void PutHeightPMI (
        double _arg1 );
    double GetHeightPMI ( );
    void PutProjectionBreakGap (
        double _arg1 );
    double GetProjectionBreakGap ( );
    void PutSecondaryDelimiter (
        enum DimDelimiterTypeConstants _arg1 );
    enum DimDelimiterTypeConstants GetSecondaryDelimiter ( );
    void PutMatchPrimaryDelimiter (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetMatchPrimaryDelimiter ( );
    void PutInhibitZeroToleranceDisplay (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetInhibitZeroToleranceDisplay ( );
    void PutAllAroundMultiplier (
        double _arg1 );
    double GetAllAroundMultiplier ( );
    void PutOverridePulledOutText2 (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetOverridePulledOutText2 ( );
    void PutPulledOutText2Orientation (
        enum DimTextOrientationConstants _arg1 );
    enum DimTextOrientationConstants GetPulledOutText2Orientation ( );
    void PutPulledOutText2Position (
        enum DimTextPositionConstants _arg1 );
    enum DimTextPositionConstants GetPulledOutText2Position ( );
    void PutDisplayDegreeSymbolOnNumericTolerance (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayDegreeSymbolOnNumericTolerance ( );
    void PutZeroInchesForFTIN (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetZeroInchesForFTIN ( );
    void PutSymbolFont (
        enum DimStyleSymbolFontConstants _arg1 );
    enum DimStyleSymbolFontConstants GetSymbolFont ( );
    void PutCalloutTextAspectRatio (
        double _arg1 );
    double GetCalloutTextAspectRatio ( );
    void PutDatumTerminatorGap (
        double _arg1 );
    double GetDatumTerminatorGap ( );
    void PutDatumFrameShape (
        enum DimStyleDatumFrameShapeConstants _arg1 );
    enum DimStyleDatumFrameShapeConstants GetDatumFrameShape ( );
    void PutDisplayCoordinateOriginText (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayCoordinateOriginText ( );
    void PutPlacePrefixInsideBasicDimensionBox (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetPlacePrefixInsideBasicDimensionBox ( );
    void PutSecondaryUnitSeparator (
        enum DimStyleSecondaryUnitSeparatorConstants _arg1 );
    enum DimStyleSecondaryUnitSeparatorConstants GetSecondaryUnitSeparator ( );
    void PutWeldSymbolLineWidth (
        double _arg1 );
    double GetWeldSymbolLineWidth ( );
    void PutThreeSidedSymbolOffsetGap (
        double _arg1 );
    double GetThreeSidedSymbolOffsetGap ( );
    void PutHoleShaftToleranceSeparatorType (
        enum DimHoleShaftSeparatorTypeConstants _arg1 );
    enum DimHoleShaftSeparatorTypeConstants GetHoleShaftToleranceSeparatorType ( );
    void PutToleranceTextVerticalAlignment (
        enum TextVerticalAlignmentConstants _arg1 );
    enum TextVerticalAlignmentConstants GetToleranceTextVerticalAlignment ( );
    void PutToleranceTextHorizontalAlignment (
        enum DimToleranceTextHorizontalAlignOptionsConstants _arg1 );
    enum DimToleranceTextHorizontalAlignOptionsConstants GetToleranceTextHorizontalAlignment ( );
    void PutUseTextSizeForCombinedTolValueDisplay (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetUseTextSizeForCombinedTolValueDisplay ( );
    void PutDatumFrameLineTermThickness (
        double _arg1 );
    double GetDatumFrameLineTermThickness ( );
    void PutDatumTargetTerminatorType (
        enum DimDatumTargetTermTypeConstants _arg1 );
    enum DimDatumTargetTermTypeConstants GetDatumTargetTerminatorType ( );
    void PutPinSymbolTerminatorType (
        enum DimPinSymbolTermTypeConstants _arg1 );
    enum DimPinSymbolTermTypeConstants GetPinSymbolTerminatorType ( );
    void PutPrimaryLinearToleranceUnits (
        enum DimLinearUnitConstants _arg1 );
    enum DimLinearUnitConstants GetPrimaryLinearToleranceUnits ( );
    void PutPrimaryLinearToleranceRoundOffType (
        enum DimRoundOffTypeConstants _arg1 );
    enum DimRoundOffTypeConstants GetPrimaryLinearToleranceRoundOffType ( );
    void PutPrimaryLinearToleranceDecimalRoundOff (
        enum DimDecimalRoundOffTypeConstants _arg1 );
    enum DimDecimalRoundOffTypeConstants GetPrimaryLinearToleranceDecimalRoundOff ( );
    void PutPrimaryLinearToleranceFractionRoundOff (
        enum DimFractionRoundOffTypeConstants _arg1 );
    enum DimFractionRoundOffTypeConstants GetPrimaryLinearToleranceFractionRoundOff ( );
    void PutPrimaryLinearToleranceUnitLabel (
        _bstr_t _arg1 );
    _bstr_t GetPrimaryLinearToleranceUnitLabel ( );
    void PutPrimaryLinearToleranceSubunitsLabel (
        _bstr_t _arg1 );
    _bstr_t GetPrimaryLinearToleranceSubunitsLabel ( );
    void PutPrimaryLinearToleranceMaximumSubunits (
        int _arg1 );
    int GetPrimaryLinearToleranceMaximumSubunits ( );
    void PutPrimaryLinearToleranceFractionSeparator (
        _bstr_t _arg1 );
    _bstr_t GetPrimaryLinearToleranceFractionSeparator ( );
    void PutAngularToleranceUnits (
        enum DimAngularUnitConstants _arg1 );
    enum DimAngularUnitConstants GetAngularToleranceUnits ( );
    void PutAngularToleranceRoundOffType (
        enum DimRoundOffTypeConstants _arg1 );
    enum DimRoundOffTypeConstants GetAngularToleranceRoundOffType ( );
    void PutAngularToleranceDMSRoundOff (
        enum DimDMSRoundOffTypeConstants _arg1 );
    enum DimDMSRoundOffTypeConstants GetAngularToleranceDMSRoundOff ( );
    void PutAngularToleranceDecimalRoundOff (
        enum DimDecimalRoundOffTypeConstants _arg1 );
    enum DimDecimalRoundOffTypeConstants GetAngularToleranceDecimalRoundOff ( );
    void PutAngularToleranceFractionRoundOff (
        enum DimFractionRoundOffTypeConstants _arg1 );
    enum DimFractionRoundOffTypeConstants GetAngularToleranceFractionRoundOff ( );
    void PutSecondaryLinearToleranceUnits (
        enum DimLinearUnitConstants _arg1 );
    enum DimLinearUnitConstants GetSecondaryLinearToleranceUnits ( );
    void PutSecondaryLinearToleranceRoundOffType (
        enum DimRoundOffTypeConstants _arg1 );
    enum DimRoundOffTypeConstants GetSecondaryLinearToleranceRoundOffType ( );
    void PutSecondaryLinearToleranceDecimalRoundOff (
        enum DimDecimalRoundOffTypeConstants _arg1 );
    enum DimDecimalRoundOffTypeConstants GetSecondaryLinearToleranceDecimalRoundOff ( );
    void PutSecondaryLinearToleranceFractionRoundOff (
        enum DimFractionRoundOffTypeConstants _arg1 );
    enum DimFractionRoundOffTypeConstants GetSecondaryLinearToleranceFractionRoundOff ( );
    void PutSecondaryLinearToleranceUnitLabel (
        _bstr_t _arg1 );
    _bstr_t GetSecondaryLinearToleranceUnitLabel ( );
    void PutSecondaryLinearToleranceSubunitsLabel (
        _bstr_t _arg1 );
    _bstr_t GetSecondaryLinearToleranceSubunitsLabel ( );
    void PutSecondaryLinearToleranceMaximumSubunits (
        int _arg1 );
    int GetSecondaryLinearToleranceMaximumSubunits ( );
    void PutSecondaryLinearToleranceFractionSeparator (
        _bstr_t _arg1 );
    _bstr_t GetSecondaryLinearToleranceFractionSeparator ( );
    void PutSecondaryLinearFractionSeparator (
        _bstr_t _arg1 );
    _bstr_t GetSecondaryLinearFractionSeparator ( );
    void PutDualUnitPosition (
        enum DimDualUnitPositionConstants _arg1 );
    enum DimDualUnitPositionConstants GetDualUnitPosition ( );
    void PutDualUnitJustification (
        enum TextHorizontalAlignmentConstants _arg1 );
    enum TextHorizontalAlignmentConstants GetDualUnitJustification ( );
    void PutSmartDepthSlotThru (
        _bstr_t _arg1 );
    _bstr_t GetSmartDepthSlotThru ( );
    void PutSmartDepthSlotFinite (
        _bstr_t _arg1 );
    _bstr_t GetSmartDepthSlotFinite ( );
    void PutSlotCalloutSimple (
        _bstr_t _arg1 );
    _bstr_t GetSlotCalloutSimple ( );
    void PutSlotCalloutCounterbore (
        _bstr_t _arg1 );
    _bstr_t GetSlotCalloutCounterbore ( );
    void PutCoordinateTextOrientation (
        enum DimTextOrientationConstants _arg1 );
    enum DimTextOrientationConstants GetCoordinateTextOrientation ( );
    void PutEnableAutoJogForCoordinate (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetEnableAutoJogForCoordinate ( );
    void PutAllowNegativeValueForCoordinate (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetAllowNegativeValueForCoordinate ( );
    void PutAllowOriginValueChangeForCoordinate (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetAllowOriginValueChangeForCoordinate ( );
    void PutShowOriginLineForCoordinate (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowOriginLineForCoordinate ( );
    void PutOverlineExtension (
        double _arg1 );
    double GetOverlineExtension ( );
    void PutSuppressSymmetricDiameterSymbol (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetSuppressSymmetricDiameterSymbol ( );
    void PutUnderlineSymbolAndPrefix (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetUnderlineSymbolAndPrefix ( );
    void PutInitialStackPitch (
        double _arg1 );
    double GetInitialStackPitch ( );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    void PutHoleCalloutCounterdrill (
        _bstr_t _arg1 );
    _bstr_t GetHoleCalloutCounterdrill ( );
    void PutHoleCalloutCounterdrillThreaded (
        _bstr_t _arg1 );
    _bstr_t GetHoleCalloutCounterdrillThreaded ( );
    void PutPrimaryStackFraction (
        enum DimStackFractionTypeConstants _arg1 );
    enum DimStackFractionTypeConstants GetPrimaryStackFraction ( );
    void PutSecondaryStackFraction (
        enum DimStackFractionTypeConstants _arg1 );
    enum DimStackFractionTypeConstants GetSecondaryStackFraction ( );
    void PutPrimaryStackFractionSize (
        enum DimStackFractionSizeConstants _arg1 );
    enum DimStackFractionSizeConstants GetPrimaryStackFractionSize ( );
    void PutSecondaryStackFractionSize (
        enum DimStackFractionSizeConstants _arg1 );
    enum DimStackFractionSizeConstants GetSecondaryStackFractionSize ( );
    void PutShowHideReferenceGeometry (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowHideReferenceGeometry ( );
    void PutEnableAngularJog (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetEnableAngularJog ( );
};

enum DimViewCaptionLocationConstants
{
    igDimViewCaptionLocationTop = 1,
    igDimViewCaptionLocationBottom = 2
};

enum DimViewCPLCaptionLocationConstants
{
    igDimViewCPLCaptionLocationFrom = 1,
    igDimViewCPLCaptionLocationOn = 2,
    igDimViewCPLCaptionLocationTo = 3,
    igDimViewCPLCaptionLocationOutsideOpenEnd = 4
};

struct __declspec(uuid("8971aa30-2917-11ce-9b15-08003601cedf"))
_IDimensionStyleAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetPrimaryUnits,put=PutPrimaryUnits))
    enum DimLinearUnitConstants PrimaryUnits;
    __declspec(property(get=GetRoundOffType,put=PutRoundOffType))
    enum DimRoundOffTypeConstants RoundOffType;
    __declspec(property(get=GetDelimiter,put=PutDelimiter))
    enum DimDelimiterTypeConstants Delimiter;
    __declspec(property(get=GetPrimaryDecimalRoundOff,put=PutPrimaryDecimalRoundOff))
    enum DimDecimalRoundOffTypeConstants PrimaryDecimalRoundOff;
    __declspec(property(get=GetPrimaryFractionRoundOff,put=PutPrimaryFractionRoundOff))
    enum DimFractionRoundOffTypeConstants PrimaryFractionRoundOff;
    __declspec(property(get=GetAngularUnits,put=PutAngularUnits))
    enum DimAngularUnitConstants AngularUnits;
    __declspec(property(get=GetAngularDMSRoundOff,put=PutAngularDMSRoundOff))
    enum DimDMSRoundOffTypeConstants AngularDMSRoundOff;
    __declspec(property(get=GetAngularDecimalRoundOff,put=PutAngularDecimalRoundOff))
    enum DimDecimalRoundOffTypeConstants AngularDecimalRoundOff;
    __declspec(property(get=GetAngularFractionRoundOff,put=PutAngularFractionRoundOff))
    enum DimFractionRoundOffTypeConstants AngularFractionRoundOff;
    __declspec(property(get=GetPrimaryLeadingZeros,put=PutPrimaryLeadingZeros))
    VARIANT_BOOL PrimaryLeadingZeros;
    __declspec(property(get=GetPrimaryTrailingZeros,put=PutPrimaryTrailingZeros))
    VARIANT_BOOL PrimaryTrailingZeros;
    __declspec(property(get=GetPrimaryUnitLabel,put=PutPrimaryUnitLabel))
    _bstr_t PrimaryUnitLabel;
    __declspec(property(get=GetPrimarySubunitsLabel,put=PutPrimarySubunitsLabel))
    _bstr_t PrimarySubunitsLabel;
    __declspec(property(get=GetMaximumSubunits,put=PutMaximumSubunits))
    int MaximumSubunits;
    __declspec(property(get=GetDualDisplay,put=PutDualDisplay))
    VARIANT_BOOL DualDisplay;
    __declspec(property(get=GetSecondaryUnits,put=PutSecondaryUnits))
    enum DimLinearUnitConstants SecondaryUnits;
    __declspec(property(get=GetSecondaryUnitRoundOff,put=PutSecondaryUnitRoundOff))
    enum DimRoundOffTypeConstants SecondaryUnitRoundOff;
    __declspec(property(get=GetSecondaryDecimalRoundOff,put=PutSecondaryDecimalRoundOff))
    enum DimDecimalRoundOffTypeConstants SecondaryDecimalRoundOff;
    __declspec(property(get=GetSecondaryFractionRoundOff,put=PutSecondaryFractionRoundOff))
    enum DimFractionRoundOffTypeConstants SecondaryFractionRoundOff;
    __declspec(property(get=GetSecondaryLeadingZeros,put=PutSecondaryLeadingZeros))
    VARIANT_BOOL SecondaryLeadingZeros;
    __declspec(property(get=GetSecondaryTrailingZeros,put=PutSecondaryTrailingZeros))
    VARIANT_BOOL SecondaryTrailingZeros;
    __declspec(property(get=GetSecondaryUnitLabel,put=PutSecondaryUnitLabel))
    _bstr_t SecondaryUnitLabel;
    __declspec(property(get=GetSecondarySubunitsLabel,put=PutSecondarySubunitsLabel))
    _bstr_t SecondarySubunitsLabel;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetRatio,put=PutRatio))
    double Ratio;
    __declspec(property(get=GetTextWeight,put=PutTextWeight))
    double TextWeight;
    __declspec(property(get=GetFont,put=PutFont))
    _bstr_t Font;
    __declspec(property(get=GetFontStyle,put=PutFontStyle))
    enum DimTextFontStyleConstants FontStyle;
    __declspec(property(get=GetTextOrientation,put=PutTextOrientation))
    enum DimTextOrientationConstants TextOrientation;
    __declspec(property(get=GetTextPosition,put=PutTextPosition))
    enum DimTextPositionConstants TextPosition;
    __declspec(property(get=GetCoordinateTextPosition,put=PutCoordinateTextPosition))
    enum DimCoordTextPositionConstants CoordinateTextPosition;
    __declspec(property(get=GetLimitTextArrangement,put=PutLimitTextArrangement))
    enum DimLimitTextArrangmentConstants LimitTextArrangement;
    __declspec(property(get=GetToleranceHeightRatio,put=PutToleranceHeightRatio))
    double ToleranceHeightRatio;
    __declspec(property(get=GetToleranceWeight,put=PutToleranceWeight))
    double ToleranceWeight;
    __declspec(property(get=GetTextClearanceGap,put=PutTextClearanceGap))
    double TextClearanceGap;
    __declspec(property(get=GetDualModeVerticalGap,put=PutDualModeVerticalGap))
    double DualModeVerticalGap;
    __declspec(property(get=GetCharacterPitch,put=PutCharacterPitch))
    double CharacterPitch;
    __declspec(property(get=GetLineSpacing,put=PutLineSpacing))
    double LineSpacing;
    __declspec(property(get=GetAboveGap,put=PutAboveGap))
    double AboveGap;
    __declspec(property(get=GetHorizontalToleranceGap,put=PutHorizontalToleranceGap))
    double HorizontalToleranceGap;
    __declspec(property(get=GetVerticalToleranceGap,put=PutVerticalToleranceGap))
    double VerticalToleranceGap;
    __declspec(property(get=GetVerticalLimitsGap,put=PutVerticalLimitsGap))
    double VerticalLimitsGap;
    __declspec(property(get=GetHorizontalBoxGap,put=PutHorizontalBoxGap))
    double HorizontalBoxGap;
    __declspec(property(get=GetVerticalBoxGap,put=PutVerticalBoxGap))
    double VerticalBoxGap;
    __declspec(property(get=GetPrefixSuffixGap,put=PutPrefixSuffixGap))
    double PrefixSuffixGap;
    __declspec(property(get=GetSymbolGap,put=PutSymbolGap))
    double SymbolGap;
    __declspec(property(get=GetNTSSymbol,put=PutNTSSymbol))
    enum DimNTSTypeConstants NTSSymbol;
    __declspec(property(get=GetTerminatorType,put=PutTerminatorType))
    enum DimTermTypeConstants TerminatorType;
    __declspec(property(get=GetTerminatorDisplay,put=PutTerminatorDisplay))
    enum DimTermDisplayTypeConstants TerminatorDisplay;
    __declspec(property(get=GetOriginTerminatorType,put=PutOriginTerminatorType))
    enum DimTermTypeConstants OriginTerminatorType;
    __declspec(property(get=GetFreeSpaceTerminatorType,put=PutFreeSpaceTerminatorType))
    enum DimTermTypeConstants FreeSpaceTerminatorType;
    __declspec(property(get=GetDatumTerminatorType,put=PutDatumTerminatorType))
    enum DimDatumTermTypeConstants DatumTerminatorType;
    __declspec(property(get=GetTerminatorSize,put=PutTerminatorSize))
    double TerminatorSize;
    __declspec(property(get=GetTerminatorInsideLimit,put=PutTerminatorInsideLimit))
    double TerminatorInsideLimit;
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    double LineWidth;
    __declspec(property(get=GetProjectionExtensionGap,put=PutProjectionExtensionGap))
    double ProjectionExtensionGap;
    __declspec(property(get=GetProjectionOffsetGap,put=PutProjectionOffsetGap))
    double ProjectionOffsetGap;
    __declspec(property(get=GetProjectionOffsetGapAlignment,put=PutProjectionOffsetGapAlignment))
    VARIANT_BOOL ProjectionOffsetGapAlignment;
    __declspec(property(get=GetProjectionAngle,put=PutProjectionAngle))
    double ProjectionAngle;
    __declspec(property(get=GetLineConnect,put=PutLineConnect))
    VARIANT_BOOL LineConnect;
    __declspec(property(get=GetStackPitch,put=PutStackPitch))
    double StackPitch;
    __declspec(property(get=GetLeaderLineLength,put=PutLeaderLineLength))
    double LeaderLineLength;
    __declspec(property(get=GetProjectionLineDisplay,put=PutProjectionLineDisplay))
    enum DimProjDisplayTypeConstants ProjectionLineDisplay;
    __declspec(property(get=GetAutoCenterLine,put=PutAutoCenterLine))
    VARIANT_BOOL AutoCenterLine;
    __declspec(property(get=GetAutoCenterProjectionLine,put=PutAutoCenterProjectionLine))
    VARIANT_BOOL AutoCenterProjectionLine;
    __declspec(property(get=GetCoordinateAutoJog,put=PutCoordinateAutoJog))
    VARIANT_BOOL CoordinateAutoJog;
    __declspec(property(get=GetCoordinateStackPitch,put=PutCoordinateStackPitch))
    double CoordinateStackPitch;
    __declspec(property(get=GetCommonOrigin,put=PutCommonOrigin))
    enum DimCommonOriginTypeConstants CommonOrigin;
    __declspec(property(get=GetSymbolPosition,put=PutSymbolPosition))
    enum DimSymbolPositionConstants SymbolPosition;
    __declspec(property(get=GetAutoSuppressDiameter,put=PutAutoSuppressDiameter))
    VARIANT_BOOL AutoSuppressDiameter;
    __declspec(property(get=GetDimensionScaleMode,put=PutDimensionScaleMode))
    enum DimScaleModeConstants DimensionScaleMode;
    __declspec(property(get=GetDimensionScale,put=PutDimensionScale))
    double DimensionScale;
    __declspec(property(get=GetDrivingColor,put=PutDrivingColor))
    long DrivingColor;
    __declspec(property(get=GetDrivenColor,put=PutDrivenColor))
    long DrivenColor;
    __declspec(property(get=GetErrorColor,put=PutErrorColor))
    long ErrorColor;
    __declspec(property(get=GetMaximumViewAngle,put=PutMaximumViewAngle))
    double MaximumViewAngle;
    __declspec(property(get=GetProjectionToleranceZonePosition,put=PutProjectionToleranceZonePosition))
    enum DimProjTolZonePositionConstants ProjectionToleranceZonePosition;
    __declspec(property(get=GetDatumFrameDashes,put=PutDatumFrameDashes))
    VARIANT_BOOL DatumFrameDashes;
    __declspec(property(get=GetViewTextRatio,put=PutViewTextRatio))
    double ViewTextRatio;
    __declspec(property(get=GetViewTerminatorRatio,put=PutViewTerminatorRatio))
    double ViewTerminatorRatio;
    __declspec(property(get=GetViewLineWidth,put=PutViewLineWidth))
    double ViewLineWidth;
    __declspec(property(get=GetViewLineType,put=PutViewLineType))
    _bstr_t ViewLineType;
    __declspec(property(get=GetViewCuttingPlaneLineDisplay,put=PutViewCuttingPlaneLineDisplay))
    enum DimViewCuttingPlaneDisplayTypeConstants ViewCuttingPlaneLineDisplay;
    __declspec(property(get=GetViewPlaneLineDisplay,put=PutViewPlaneLineDisplay))
    enum DimViewPlaneDisplayTypeConstants ViewPlaneLineDisplay;
    __declspec(property(get=GetSecondaryToleranceEquivalent,put=PutSecondaryToleranceEquivalent))
    VARIANT_BOOL SecondaryToleranceEquivalent;
    __declspec(property(get=GetOffsetLeaderType,put=PutOffsetLeaderType))
    enum DimOffsetLeaderTypeConstants OffsetLeaderType;
    __declspec(property(get=GetCenterLineType,put=PutCenterLineType))
    _bstr_t CenterLineType;
    __declspec(property(get=GetRoundUp,put=PutRoundUp))
    enum DimRoundUpTypeConstants RoundUp;
    __declspec(property(get=GetSecondaryLinearRoundOffType,put=PutSecondaryLinearRoundOffType))
    enum DimRoundOffTypeConstants SecondaryLinearRoundOffType;
    __declspec(property(get=GetAngularRoundOffType,put=PutAngularRoundOffType))
    enum DimRoundOffTypeConstants AngularRoundOffType;
    __declspec(property(get=GetCenterMarkExtension,put=PutCenterMarkExtension))
    double CenterMarkExtension;
    __declspec(property(get=GetChamferUse45DegreeCharacter,put=PutChamferUse45DegreeCharacter))
    VARIANT_BOOL ChamferUse45DegreeCharacter;
    __declspec(property(get=GetSmartDepthHoleThru,put=PutSmartDepthHoleThru))
    _bstr_t SmartDepthHoleThru;
    __declspec(property(get=GetSmartDepthHoleFinite,put=PutSmartDepthHoleFinite))
    _bstr_t SmartDepthHoleFinite;
    __declspec(property(get=GetSmartDepthThreadThru,put=PutSmartDepthThreadThru))
    _bstr_t SmartDepthThreadThru;
    __declspec(property(get=GetSmartDepthThreadFinite,put=PutSmartDepthThreadFinite))
    _bstr_t SmartDepthThreadFinite;
    __declspec(property(get=GetViewCaptionLocation,put=PutViewCaptionLocation))
    enum DimViewCaptionLocationConstants ViewCaptionLocation;
    __declspec(property(get=GetViewCPLCaptionLocation,put=PutViewCPLCaptionLocation))
    enum DimViewCPLCaptionLocationConstants ViewCPLCaptionLocation;
    __declspec(property(get=GetViewSuffixAsPrefix,put=PutViewSuffixAsPrefix))
    VARIANT_BOOL ViewSuffixAsPrefix;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetParent,put=PutParent))
    _bstr_t Parent;
    __declspec(property(get=GetCenterMarkSize,put=PutCenterMarkSize))
    double CenterMarkSize;
    __declspec(property(get=GetAutoPhase,put=PutAutoPhase))
    VARIANT_BOOL AutoPhase;
    __declspec(property(get=GetViewThinTerminator,put=PutViewThinTerminator))
    VARIANT_BOOL ViewThinTerminator;
    __declspec(property(get=GetViewVPLCaptionAtEnd,put=PutViewVPLCaptionAtEnd))
    VARIANT_BOOL ViewVPLCaptionAtEnd;
    __declspec(property(get=GetLowerCaseMultiplicationSymbol,put=PutLowerCaseMultiplicationSymbol))
    VARIANT_BOOL LowerCaseMultiplicationSymbol;
    __declspec(property(get=GetApplyBreakLineGap,put=PutApplyBreakLineGap))
    VARIANT_BOOL ApplyBreakLineGap;
    __declspec(property(get=GetTextAutoFillBackground,put=PutTextAutoFillBackground))
    VARIANT_BOOL TextAutoFillBackground;
    __declspec(property(get=GetPulledOutTextOrientation,put=PutPulledOutTextOrientation))
    enum DimTextOrientationConstants PulledOutTextOrientation;
    __declspec(property(get=GetPulledOutTextPosition,put=PutPulledOutTextPosition))
    enum DimTextPositionConstants PulledOutTextPosition;
    __declspec(property(get=GetOverridePulledOutText,put=PutOverridePulledOutText))
    VARIANT_BOOL OverridePulledOutText;
    __declspec(property(get=GetViewLineArrowOffset,put=PutViewLineArrowOffset))
    double ViewLineArrowOffset;
    __declspec(property(get=GetViewThickLineLength,put=PutViewThickLineLength))
    double ViewThickLineLength;
    __declspec(property(get=GetOrigTerminatorSize,put=PutOrigTerminatorSize))
    double OrigTerminatorSize;
    __declspec(property(get=GetConnectorLineType,put=PutConnectorLineType))
    _bstr_t ConnectorLineType;
    __declspec(property(get=GetConnectorColor,put=PutConnectorColor))
    long ConnectorColor;
    __declspec(property(get=GetConnectorWidth,put=PutConnectorWidth))
    double ConnectorWidth;
    __declspec(property(get=GetFractionSeparator,put=PutFractionSeparator))
    _bstr_t FractionSeparator;
    __declspec(property(get=GetHeightPMI,put=PutHeightPMI))
    double HeightPMI;
    __declspec(property(get=GetProjectionBreakGap,put=PutProjectionBreakGap))
    double ProjectionBreakGap;
    __declspec(property(get=GetSecondaryDelimiter,put=PutSecondaryDelimiter))
    enum DimDelimiterTypeConstants SecondaryDelimiter;
    __declspec(property(get=GetMatchPrimaryDelimiter,put=PutMatchPrimaryDelimiter))
    VARIANT_BOOL MatchPrimaryDelimiter;
    __declspec(property(get=GetInhibitZeroToleranceDisplay,put=PutInhibitZeroToleranceDisplay))
    VARIANT_BOOL InhibitZeroToleranceDisplay;
    __declspec(property(get=GetAllAroundMultiplier,put=PutAllAroundMultiplier))
    double AllAroundMultiplier;
    __declspec(property(get=GetOverridePulledOutText2,put=PutOverridePulledOutText2))
    VARIANT_BOOL OverridePulledOutText2;
    __declspec(property(get=GetPulledOutText2Orientation,put=PutPulledOutText2Orientation))
    enum DimTextOrientationConstants PulledOutText2Orientation;
    __declspec(property(get=GetPulledOutText2Position,put=PutPulledOutText2Position))
    enum DimTextPositionConstants PulledOutText2Position;
    __declspec(property(get=GetDisplayDegreeSymbolOnNumericTolerance,put=PutDisplayDegreeSymbolOnNumericTolerance))
    VARIANT_BOOL DisplayDegreeSymbolOnNumericTolerance;
    __declspec(property(get=GetZeroInchesForFTIN,put=PutZeroInchesForFTIN))
    VARIANT_BOOL ZeroInchesForFTIN;
    __declspec(property(get=GetSymbolFont,put=PutSymbolFont))
    enum DimStyleSymbolFontConstants SymbolFont;
    __declspec(property(get=GetCalloutTextAspectRatio,put=PutCalloutTextAspectRatio))
    double CalloutTextAspectRatio;
    __declspec(property(get=GetDatumTerminatorGap,put=PutDatumTerminatorGap))
    double DatumTerminatorGap;
    __declspec(property(get=GetDatumFrameShape,put=PutDatumFrameShape))
    enum DimStyleDatumFrameShapeConstants DatumFrameShape;
    __declspec(property(get=GetProjectionLineDisplayForIntersectionPoint,put=PutProjectionLineDisplayForIntersectionPoint))
    enum DimProjDisplayTypeConstants ProjectionLineDisplayForIntersectionPoint;
    __declspec(property(get=GetDisplayCoordinateOriginText,put=PutDisplayCoordinateOriginText))
    VARIANT_BOOL DisplayCoordinateOriginText;
    __declspec(property(get=GetPlacePrefixInsideBasicDimensionBox,put=PutPlacePrefixInsideBasicDimensionBox))
    VARIANT_BOOL PlacePrefixInsideBasicDimensionBox;
    __declspec(property(get=GetSecondaryUnitSeparator,put=PutSecondaryUnitSeparator))
    enum DimStyleSecondaryUnitSeparatorConstants SecondaryUnitSeparator;
    __declspec(property(get=GetWeldSymbolLineWidth,put=PutWeldSymbolLineWidth))
    double WeldSymbolLineWidth;
    __declspec(property(get=GetThreeSidedSymbolOffsetGap,put=PutThreeSidedSymbolOffsetGap))
    double ThreeSidedSymbolOffsetGap;
    __declspec(property(get=GetHoleShaftToleranceSeparatorType,put=PutHoleShaftToleranceSeparatorType))
    enum DimHoleShaftSeparatorTypeConstants HoleShaftToleranceSeparatorType;
    __declspec(property(get=GetToleranceTextVerticalAlignment,put=PutToleranceTextVerticalAlignment))
    enum TextVerticalAlignmentConstants ToleranceTextVerticalAlignment;
    __declspec(property(get=GetToleranceTextHorizontalAlignment,put=PutToleranceTextHorizontalAlignment))
    enum DimToleranceTextHorizontalAlignOptionsConstants ToleranceTextHorizontalAlignment;
    __declspec(property(get=GetUseTextSizeForCombinedTolValueDisplay,put=PutUseTextSizeForCombinedTolValueDisplay))
    VARIANT_BOOL UseTextSizeForCombinedTolValueDisplay;
    __declspec(property(get=GetDatumFrameLineTermThickness,put=PutDatumFrameLineTermThickness))
    double DatumFrameLineTermThickness;
    __declspec(property(get=GetDatumTargetTerminatorType,put=PutDatumTargetTerminatorType))
    enum DimDatumTargetTermTypeConstants DatumTargetTerminatorType;
    __declspec(property(get=GetPinSymbolTerminatorType,put=PutPinSymbolTerminatorType))
    enum DimPinSymbolTermTypeConstants PinSymbolTerminatorType;
    __declspec(property(get=GetPrimaryLinearToleranceUnits,put=PutPrimaryLinearToleranceUnits))
    enum DimLinearUnitConstants PrimaryLinearToleranceUnits;
    __declspec(property(get=GetPrimaryLinearToleranceRoundOffType,put=PutPrimaryLinearToleranceRoundOffType))
    enum DimRoundOffTypeConstants PrimaryLinearToleranceRoundOffType;
    __declspec(property(get=GetPrimaryLinearToleranceDecimalRoundOff,put=PutPrimaryLinearToleranceDecimalRoundOff))
    enum DimDecimalRoundOffTypeConstants PrimaryLinearToleranceDecimalRoundOff;
    __declspec(property(get=GetPrimaryLinearToleranceFractionRoundOff,put=PutPrimaryLinearToleranceFractionRoundOff))
    enum DimFractionRoundOffTypeConstants PrimaryLinearToleranceFractionRoundOff;
    __declspec(property(get=GetPrimaryLinearToleranceUnitLabel,put=PutPrimaryLinearToleranceUnitLabel))
    _bstr_t PrimaryLinearToleranceUnitLabel;
    __declspec(property(get=GetPrimaryLinearToleranceSubunitsLabel,put=PutPrimaryLinearToleranceSubunitsLabel))
    _bstr_t PrimaryLinearToleranceSubunitsLabel;
    __declspec(property(get=GetPrimaryLinearToleranceMaximumSubunits,put=PutPrimaryLinearToleranceMaximumSubunits))
    int PrimaryLinearToleranceMaximumSubunits;
    __declspec(property(get=GetPrimaryLinearToleranceFractionSeparator,put=PutPrimaryLinearToleranceFractionSeparator))
    _bstr_t PrimaryLinearToleranceFractionSeparator;
    __declspec(property(get=GetAngularToleranceUnits,put=PutAngularToleranceUnits))
    enum DimAngularUnitConstants AngularToleranceUnits;
    __declspec(property(get=GetAngularToleranceRoundOffType,put=PutAngularToleranceRoundOffType))
    enum DimRoundOffTypeConstants AngularToleranceRoundOffType;
    __declspec(property(get=GetAngularToleranceDMSRoundOff,put=PutAngularToleranceDMSRoundOff))
    enum DimDMSRoundOffTypeConstants AngularToleranceDMSRoundOff;
    __declspec(property(get=GetAngularToleranceDecimalRoundOff,put=PutAngularToleranceDecimalRoundOff))
    enum DimDecimalRoundOffTypeConstants AngularToleranceDecimalRoundOff;
    __declspec(property(get=GetAngularToleranceFractionRoundOff,put=PutAngularToleranceFractionRoundOff))
    enum DimFractionRoundOffTypeConstants AngularToleranceFractionRoundOff;
    __declspec(property(get=GetSecondaryLinearToleranceUnits,put=PutSecondaryLinearToleranceUnits))
    enum DimLinearUnitConstants SecondaryLinearToleranceUnits;
    __declspec(property(get=GetSecondaryLinearToleranceRoundOffType,put=PutSecondaryLinearToleranceRoundOffType))
    enum DimRoundOffTypeConstants SecondaryLinearToleranceRoundOffType;
    __declspec(property(get=GetSecondaryLinearToleranceDecimalRoundOff,put=PutSecondaryLinearToleranceDecimalRoundOff))
    enum DimDecimalRoundOffTypeConstants SecondaryLinearToleranceDecimalRoundOff;
    __declspec(property(get=GetSecondaryLinearToleranceFractionRoundOff,put=PutSecondaryLinearToleranceFractionRoundOff))
    enum DimFractionRoundOffTypeConstants SecondaryLinearToleranceFractionRoundOff;
    __declspec(property(get=GetSecondaryLinearToleranceUnitLabel,put=PutSecondaryLinearToleranceUnitLabel))
    _bstr_t SecondaryLinearToleranceUnitLabel;
    __declspec(property(get=GetSecondaryLinearToleranceSubunitsLabel,put=PutSecondaryLinearToleranceSubunitsLabel))
    _bstr_t SecondaryLinearToleranceSubunitsLabel;
    __declspec(property(get=GetSecondaryLinearToleranceMaximumSubunits,put=PutSecondaryLinearToleranceMaximumSubunits))
    int SecondaryLinearToleranceMaximumSubunits;
    __declspec(property(get=GetSecondaryLinearToleranceFractionSeparator,put=PutSecondaryLinearToleranceFractionSeparator))
    _bstr_t SecondaryLinearToleranceFractionSeparator;
    __declspec(property(get=GetSecondaryLinearFractionSeparator,put=PutSecondaryLinearFractionSeparator))
    _bstr_t SecondaryLinearFractionSeparator;
    __declspec(property(get=GetDualUnitPosition,put=PutDualUnitPosition))
    enum DimDualUnitPositionConstants DualUnitPosition;
    __declspec(property(get=GetDualUnitJustification,put=PutDualUnitJustification))
    enum TextHorizontalAlignmentConstants DualUnitJustification;
    __declspec(property(get=GetSmartDepthSlotThru,put=PutSmartDepthSlotThru))
    _bstr_t SmartDepthSlotThru;
    __declspec(property(get=GetSmartDepthSlotFinite,put=PutSmartDepthSlotFinite))
    _bstr_t SmartDepthSlotFinite;
    __declspec(property(get=GetSlotCalloutSimple,put=PutSlotCalloutSimple))
    _bstr_t SlotCalloutSimple;
    __declspec(property(get=GetSlotCalloutCounterbore,put=PutSlotCalloutCounterbore))
    _bstr_t SlotCalloutCounterbore;
    __declspec(property(get=GetCoordinateTextOrientation,put=PutCoordinateTextOrientation))
    enum DimTextOrientationConstants CoordinateTextOrientation;
    __declspec(property(get=GetEnableAutoJogForCoordinate,put=PutEnableAutoJogForCoordinate))
    VARIANT_BOOL EnableAutoJogForCoordinate;
    __declspec(property(get=GetAllowNegativeValueForCoordinate,put=PutAllowNegativeValueForCoordinate))
    VARIANT_BOOL AllowNegativeValueForCoordinate;
    __declspec(property(get=GetAllowOriginValueChangeForCoordinate,put=PutAllowOriginValueChangeForCoordinate))
    VARIANT_BOOL AllowOriginValueChangeForCoordinate;
    __declspec(property(get=GetShowOriginLineForCoordinate,put=PutShowOriginLineForCoordinate))
    VARIANT_BOOL ShowOriginLineForCoordinate;
    __declspec(property(get=GetOverlineExtension,put=PutOverlineExtension))
    double OverlineExtension;
    __declspec(property(get=GetSuppressSymmetricDiameterSymbol,put=PutSuppressSymmetricDiameterSymbol))
    VARIANT_BOOL SuppressSymmetricDiameterSymbol;
    __declspec(property(get=GetUnderlineSymbolAndPrefix,put=PutUnderlineSymbolAndPrefix))
    VARIANT_BOOL UnderlineSymbolAndPrefix;
    __declspec(property(get=GetInitialStackPitch,put=PutInitialStackPitch))
    double InitialStackPitch;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetHoleCalloutCounterdrill,put=PutHoleCalloutCounterdrill))
    _bstr_t HoleCalloutCounterdrill;
    __declspec(property(get=GetHoleCalloutCounterdrillThreaded,put=PutHoleCalloutCounterdrillThreaded))
    _bstr_t HoleCalloutCounterdrillThreaded;
    __declspec(property(get=GetPrimaryStackFraction,put=PutPrimaryStackFraction))
    enum DimStackFractionTypeConstants PrimaryStackFraction;
    __declspec(property(get=GetSecondaryStackFraction,put=PutSecondaryStackFraction))
    enum DimStackFractionTypeConstants SecondaryStackFraction;
    __declspec(property(get=GetPrimaryStackFractionSize,put=PutPrimaryStackFractionSize))
    enum DimStackFractionSizeConstants PrimaryStackFractionSize;
    __declspec(property(get=GetSecondaryStackFractionSize,put=PutSecondaryStackFractionSize))
    enum DimStackFractionSizeConstants SecondaryStackFractionSize;
    __declspec(property(get=GetShowHideReferenceGeometry,put=PutShowHideReferenceGeometry))
    VARIANT_BOOL ShowHideReferenceGeometry;
    __declspec(property(get=GetEnableAngularJog,put=PutEnableAngularJog))
    VARIANT_BOOL EnableAngularJog;
    __declspec(property(get=GetHoleCalloutSimple,put=PutHoleCalloutSimple))
    _bstr_t HoleCalloutSimple;
    __declspec(property(get=GetHoleCalloutCounterbore,put=PutHoleCalloutCounterbore))
    _bstr_t HoleCalloutCounterbore;
    __declspec(property(get=GetHoleCalloutCountersink,put=PutHoleCalloutCountersink))
    _bstr_t HoleCalloutCountersink;
    __declspec(property(get=GetHoleCalloutSimpleThreaded,put=PutHoleCalloutSimpleThreaded))
    _bstr_t HoleCalloutSimpleThreaded;
    __declspec(property(get=GetHoleCalloutCounterboreThreaded,put=PutHoleCalloutCounterboreThreaded))
    _bstr_t HoleCalloutCounterboreThreaded;
    __declspec(property(get=GetHoleCalloutCountersinkThreaded,put=PutHoleCalloutCountersinkThreaded))
    _bstr_t HoleCalloutCountersinkThreaded;

    //
    // Wrapper methods for error-handling
    //

    void PutName (
        _bstr_t Name );
    _bstr_t GetName ( );
    void PutPrimaryUnits (
        enum DimLinearUnitConstants val );
    enum DimLinearUnitConstants GetPrimaryUnits ( );
    void PutRoundOffType (
        enum DimRoundOffTypeConstants val );
    enum DimRoundOffTypeConstants GetRoundOffType ( );
    void PutDelimiter (
        enum DimDelimiterTypeConstants val );
    enum DimDelimiterTypeConstants GetDelimiter ( );
    void PutPrimaryDecimalRoundOff (
        enum DimDecimalRoundOffTypeConstants val );
    enum DimDecimalRoundOffTypeConstants GetPrimaryDecimalRoundOff ( );
    void PutPrimaryFractionRoundOff (
        enum DimFractionRoundOffTypeConstants val );
    enum DimFractionRoundOffTypeConstants GetPrimaryFractionRoundOff ( );
    void PutAngularUnits (
        enum DimAngularUnitConstants val );
    enum DimAngularUnitConstants GetAngularUnits ( );
    void PutAngularDMSRoundOff (
        enum DimDMSRoundOffTypeConstants val );
    enum DimDMSRoundOffTypeConstants GetAngularDMSRoundOff ( );
    void PutAngularDecimalRoundOff (
        enum DimDecimalRoundOffTypeConstants val );
    enum DimDecimalRoundOffTypeConstants GetAngularDecimalRoundOff ( );
    void PutAngularFractionRoundOff (
        enum DimFractionRoundOffTypeConstants val );
    enum DimFractionRoundOffTypeConstants GetAngularFractionRoundOff ( );
    void PutPrimaryLeadingZeros (
        VARIANT_BOOL val );
    VARIANT_BOOL GetPrimaryLeadingZeros ( );
    void PutPrimaryTrailingZeros (
        VARIANT_BOOL val );
    VARIANT_BOOL GetPrimaryTrailingZeros ( );
    void PutPrimaryUnitLabel (
        _bstr_t val );
    _bstr_t GetPrimaryUnitLabel ( );
    void PutPrimarySubunitsLabel (
        _bstr_t val );
    _bstr_t GetPrimarySubunitsLabel ( );
    void PutMaximumSubunits (
        int val );
    int GetMaximumSubunits ( );
    void PutDualDisplay (
        VARIANT_BOOL val );
    VARIANT_BOOL GetDualDisplay ( );
    void PutSecondaryUnits (
        enum DimLinearUnitConstants val );
    enum DimLinearUnitConstants GetSecondaryUnits ( );
    void PutSecondaryUnitRoundOff (
        enum DimRoundOffTypeConstants val );
    enum DimRoundOffTypeConstants GetSecondaryUnitRoundOff ( );
    void PutSecondaryDecimalRoundOff (
        enum DimDecimalRoundOffTypeConstants val );
    enum DimDecimalRoundOffTypeConstants GetSecondaryDecimalRoundOff ( );
    void PutSecondaryFractionRoundOff (
        enum DimFractionRoundOffTypeConstants val );
    enum DimFractionRoundOffTypeConstants GetSecondaryFractionRoundOff ( );
    void PutSecondaryLeadingZeros (
        VARIANT_BOOL val );
    VARIANT_BOOL GetSecondaryLeadingZeros ( );
    void PutSecondaryTrailingZeros (
        VARIANT_BOOL val );
    VARIANT_BOOL GetSecondaryTrailingZeros ( );
    void PutSecondaryUnitLabel (
        _bstr_t val );
    _bstr_t GetSecondaryUnitLabel ( );
    void PutSecondarySubunitsLabel (
        _bstr_t val );
    _bstr_t GetSecondarySubunitsLabel ( );
    void PutHeight (
        double val );
    double GetHeight ( );
    void PutRatio (
        double val );
    double GetRatio ( );
    void PutTextWeight (
        double val );
    double GetTextWeight ( );
    void PutFont (
        _bstr_t val );
    _bstr_t GetFont ( );
    void PutFontStyle (
        enum DimTextFontStyleConstants val );
    enum DimTextFontStyleConstants GetFontStyle ( );
    void PutTextOrientation (
        enum DimTextOrientationConstants val );
    enum DimTextOrientationConstants GetTextOrientation ( );
    void PutTextPosition (
        enum DimTextPositionConstants val );
    enum DimTextPositionConstants GetTextPosition ( );
    void PutLimitTextArrangement (
        enum DimLimitTextArrangmentConstants val );
    enum DimLimitTextArrangmentConstants GetLimitTextArrangement ( );
    void PutToleranceHeightRatio (
        double val );
    double GetToleranceHeightRatio ( );
    void PutToleranceWeight (
        double val );
    double GetToleranceWeight ( );
    void PutNTSSymbol (
        enum DimNTSTypeConstants val );
    enum DimNTSTypeConstants GetNTSSymbol ( );
    void PutTerminatorType (
        enum DimTermTypeConstants val );
    enum DimTermTypeConstants GetTerminatorType ( );
    void PutTerminatorDisplay (
        enum DimTermDisplayTypeConstants val );
    enum DimTermDisplayTypeConstants GetTerminatorDisplay ( );
    void PutOriginTerminatorType (
        enum DimTermTypeConstants val );
    enum DimTermTypeConstants GetOriginTerminatorType ( );
    void PutFreeSpaceTerminatorType (
        enum DimTermTypeConstants val );
    enum DimTermTypeConstants GetFreeSpaceTerminatorType ( );
    void PutDatumTerminatorType (
        enum DimDatumTermTypeConstants val );
    enum DimDatumTermTypeConstants GetDatumTerminatorType ( );
    void PutTerminatorSize (
        double val );
    double GetTerminatorSize ( );
    void PutTerminatorInsideLimit (
        double val );
    double GetTerminatorInsideLimit ( );
    void PutLineWidth (
        double val );
    double GetLineWidth ( );
    void PutProjectionExtensionGap (
        double val );
    double GetProjectionExtensionGap ( );
    void PutProjectionOffsetGap (
        double val );
    double GetProjectionOffsetGap ( );
    void PutProjectionOffsetGapAlignment (
        VARIANT_BOOL val );
    VARIANT_BOOL GetProjectionOffsetGapAlignment ( );
    void PutProjectionAngle (
        double val );
    double GetProjectionAngle ( );
    void PutLineConnect (
        VARIANT_BOOL val );
    VARIANT_BOOL GetLineConnect ( );
    void PutStackPitch (
        double val );
    double GetStackPitch ( );
    void PutLeaderLineLength (
        double val );
    double GetLeaderLineLength ( );
    void PutCoordinateAutoJog (
        VARIANT_BOOL val );
    VARIANT_BOOL GetCoordinateAutoJog ( );
    void PutCoordinateStackPitch (
        double val );
    double GetCoordinateStackPitch ( );
    void PutCommonOrigin (
        enum DimCommonOriginTypeConstants val );
    enum DimCommonOriginTypeConstants GetCommonOrigin ( );
    void PutCoordinateTextPosition (
        enum DimCoordTextPositionConstants val );
    enum DimCoordTextPositionConstants GetCoordinateTextPosition ( );
    void PutSymbolPosition (
        enum DimSymbolPositionConstants val );
    enum DimSymbolPositionConstants GetSymbolPosition ( );
    void PutAutoSuppressDiameter (
        VARIANT_BOOL val );
    VARIANT_BOOL GetAutoSuppressDiameter ( );
    void PutDimensionScaleMode (
        enum DimScaleModeConstants val );
    enum DimScaleModeConstants GetDimensionScaleMode ( );
    void PutDimensionScale (
        double val );
    double GetDimensionScale ( );
    void PutErrorColor (
        long val );
    long GetErrorColor ( );
    void PutDrivingColor (
        long val );
    long GetDrivingColor ( );
    void PutDrivenColor (
        long val );
    long GetDrivenColor ( );
    void PutAutoCenterLine (
        VARIANT_BOOL val );
    VARIANT_BOOL GetAutoCenterLine ( );
    void PutAutoCenterProjectionLine (
        VARIANT_BOOL val );
    VARIANT_BOOL GetAutoCenterProjectionLine ( );
    void PutProjectionLineDisplay (
        enum DimProjDisplayTypeConstants val );
    enum DimProjDisplayTypeConstants GetProjectionLineDisplay ( );
    void PutProjectionLineDisplayForIntersectionPoint (
        enum DimProjDisplayTypeConstants val );
    enum DimProjDisplayTypeConstants GetProjectionLineDisplayForIntersectionPoint ( );
    void PutTextClearanceGap (
        double val );
    double GetTextClearanceGap ( );
    void PutDualModeVerticalGap (
        double val );
    double GetDualModeVerticalGap ( );
    void PutCharacterPitch (
        double val );
    double GetCharacterPitch ( );
    void PutLineSpacing (
        double val );
    double GetLineSpacing ( );
    void PutAboveGap (
        double val );
    double GetAboveGap ( );
    void PutHorizontalToleranceGap (
        double val );
    double GetHorizontalToleranceGap ( );
    void PutVerticalToleranceGap (
        double val );
    double GetVerticalToleranceGap ( );
    void PutVerticalLimitsGap (
        double val );
    double GetVerticalLimitsGap ( );
    void PutHorizontalBoxGap (
        double val );
    double GetHorizontalBoxGap ( );
    void PutVerticalBoxGap (
        double val );
    double GetVerticalBoxGap ( );
    void PutPrefixSuffixGap (
        double val );
    double GetPrefixSuffixGap ( );
    void PutSymbolGap (
        double val );
    double GetSymbolGap ( );
    void PutMaximumViewAngle (
        double val );
    double GetMaximumViewAngle ( );
    void PutProjectionToleranceZonePosition (
        enum DimProjTolZonePositionConstants val );
    enum DimProjTolZonePositionConstants GetProjectionToleranceZonePosition ( );
    void PutDatumFrameDashes (
        VARIANT_BOOL val );
    VARIANT_BOOL GetDatumFrameDashes ( );
    void PutViewTextRatio (
        double val );
    double GetViewTextRatio ( );
    void PutViewTerminatorRatio (
        double val );
    double GetViewTerminatorRatio ( );
    void PutViewLineWidth (
        double val );
    double GetViewLineWidth ( );
    void PutViewLineType (
        _bstr_t val );
    _bstr_t GetViewLineType ( );
    void PutViewCuttingPlaneLineDisplay (
        enum DimViewCuttingPlaneDisplayTypeConstants val );
    enum DimViewCuttingPlaneDisplayTypeConstants GetViewCuttingPlaneLineDisplay ( );
    void PutViewPlaneLineDisplay (
        enum DimViewPlaneDisplayTypeConstants val );
    enum DimViewPlaneDisplayTypeConstants GetViewPlaneLineDisplay ( );
    void PutViewCaptionLocation (
        enum DimViewCaptionLocationConstants val );
    enum DimViewCaptionLocationConstants GetViewCaptionLocation ( );
    void PutViewCPLCaptionLocation (
        enum DimViewCPLCaptionLocationConstants val );
    enum DimViewCPLCaptionLocationConstants GetViewCPLCaptionLocation ( );
    void PutViewSuffixAsPrefix (
        VARIANT_BOOL val );
    VARIANT_BOOL GetViewSuffixAsPrefix ( );
    void PutViewThinTerminator (
        VARIANT_BOOL val );
    VARIANT_BOOL GetViewThinTerminator ( );
    void PutViewVPLCaptionAtEnd (
        VARIANT_BOOL val );
    VARIANT_BOOL GetViewVPLCaptionAtEnd ( );
    void PutOffsetLeaderType (
        enum DimOffsetLeaderTypeConstants val );
    enum DimOffsetLeaderTypeConstants GetOffsetLeaderType ( );
    void PutSecondaryToleranceEquivalent (
        VARIANT_BOOL val );
    VARIANT_BOOL GetSecondaryToleranceEquivalent ( );
    void PutCenterLineType (
        _bstr_t val );
    _bstr_t GetCenterLineType ( );
    _bstr_t GetDescription ( );
    void PutParent (
        _bstr_t Name );
    _bstr_t GetParent ( );
    void PutCenterMarkSize (
        double val );
    double GetCenterMarkSize ( );
    void PutAutoPhase (
        VARIANT_BOOL val );
    VARIANT_BOOL GetAutoPhase ( );
    void PutRoundUp (
        enum DimRoundUpTypeConstants val );
    enum DimRoundUpTypeConstants GetRoundUp ( );
    void PutSecondaryLinearRoundOffType (
        enum DimRoundOffTypeConstants val );
    enum DimRoundOffTypeConstants GetSecondaryLinearRoundOffType ( );
    void PutAngularRoundOffType (
        enum DimRoundOffTypeConstants val );
    enum DimRoundOffTypeConstants GetAngularRoundOffType ( );
    void PutCenterMarkExtension (
        double val );
    double GetCenterMarkExtension ( );
    void PutChamferUse45DegreeCharacter (
        VARIANT_BOOL val );
    VARIANT_BOOL GetChamferUse45DegreeCharacter ( );
    void PutSmartDepthHoleThru (
        _bstr_t val );
    _bstr_t GetSmartDepthHoleThru ( );
    void PutSmartDepthHoleFinite (
        _bstr_t val );
    _bstr_t GetSmartDepthHoleFinite ( );
    void PutSmartDepthThreadThru (
        _bstr_t val );
    _bstr_t GetSmartDepthThreadThru ( );
    void PutSmartDepthThreadFinite (
        _bstr_t val );
    _bstr_t GetSmartDepthThreadFinite ( );
    void PutLowerCaseMultiplicationSymbol (
        VARIANT_BOOL val );
    VARIANT_BOOL GetLowerCaseMultiplicationSymbol ( );
    void PutHoleCalloutSimple (
        _bstr_t val );
    _bstr_t GetHoleCalloutSimple ( );
    void PutHoleCalloutCounterbore (
        _bstr_t val );
    _bstr_t GetHoleCalloutCounterbore ( );
    void PutHoleCalloutCountersink (
        _bstr_t val );
    _bstr_t GetHoleCalloutCountersink ( );
    void PutHoleCalloutSimpleThreaded (
        _bstr_t val );
    _bstr_t GetHoleCalloutSimpleThreaded ( );
    void PutHoleCalloutCounterboreThreaded (
        _bstr_t val );
    _bstr_t GetHoleCalloutCounterboreThreaded ( );
    void PutHoleCalloutCountersinkThreaded (
        _bstr_t val );
    _bstr_t GetHoleCalloutCountersinkThreaded ( );
    void PutApplyBreakLineGap (
        VARIANT_BOOL val );
    VARIANT_BOOL GetApplyBreakLineGap ( );
    void PutTextAutoFillBackground (
        VARIANT_BOOL val );
    VARIANT_BOOL GetTextAutoFillBackground ( );
    void PutPulledOutTextOrientation (
        enum DimTextOrientationConstants val );
    enum DimTextOrientationConstants GetPulledOutTextOrientation ( );
    void PutPulledOutTextPosition (
        enum DimTextPositionConstants val );
    enum DimTextPositionConstants GetPulledOutTextPosition ( );
    void PutOverridePulledOutText (
        VARIANT_BOOL val );
    VARIANT_BOOL GetOverridePulledOutText ( );
    void PutViewLineArrowOffset (
        double val );
    double GetViewLineArrowOffset ( );
    void PutViewThickLineLength (
        double val );
    double GetViewThickLineLength ( );
    void PutOrigTerminatorSize (
        double val );
    double GetOrigTerminatorSize ( );
    void PutConnectorLineType (
        _bstr_t val );
    _bstr_t GetConnectorLineType ( );
    void PutConnectorColor (
        long val );
    long GetConnectorColor ( );
    void PutConnectorWidth (
        double val );
    double GetConnectorWidth ( );
    void PutFractionSeparator (
        _bstr_t val );
    _bstr_t GetFractionSeparator ( );
    void PutHeightPMI (
        double val );
    double GetHeightPMI ( );
    void PutProjectionBreakGap (
        double val );
    double GetProjectionBreakGap ( );
    void PutSecondaryDelimiter (
        enum DimDelimiterTypeConstants val );
    enum DimDelimiterTypeConstants GetSecondaryDelimiter ( );
    void PutMatchPrimaryDelimiter (
        VARIANT_BOOL val );
    VARIANT_BOOL GetMatchPrimaryDelimiter ( );
    void PutInhibitZeroToleranceDisplay (
        VARIANT_BOOL val );
    VARIANT_BOOL GetInhibitZeroToleranceDisplay ( );
    void PutAllAroundMultiplier (
        double val );
    double GetAllAroundMultiplier ( );
    void PutOverridePulledOutText2 (
        VARIANT_BOOL val );
    VARIANT_BOOL GetOverridePulledOutText2 ( );
    void PutPulledOutText2Orientation (
        enum DimTextOrientationConstants val );
    enum DimTextOrientationConstants GetPulledOutText2Orientation ( );
    void PutPulledOutText2Position (
        enum DimTextPositionConstants val );
    enum DimTextPositionConstants GetPulledOutText2Position ( );
    void PutDisplayDegreeSymbolOnNumericTolerance (
        VARIANT_BOOL val );
    VARIANT_BOOL GetDisplayDegreeSymbolOnNumericTolerance ( );
    void PutZeroInchesForFTIN (
        VARIANT_BOOL val );
    VARIANT_BOOL GetZeroInchesForFTIN ( );
    void PutSymbolFont (
        enum DimStyleSymbolFontConstants val );
    enum DimStyleSymbolFontConstants GetSymbolFont ( );
    void PutCalloutTextAspectRatio (
        double val );
    double GetCalloutTextAspectRatio ( );
    void PutDatumTerminatorGap (
        double val );
    double GetDatumTerminatorGap ( );
    void PutDatumFrameShape (
        enum DimStyleDatumFrameShapeConstants val );
    enum DimStyleDatumFrameShapeConstants GetDatumFrameShape ( );
    void PutDisplayCoordinateOriginText (
        VARIANT_BOOL val );
    VARIANT_BOOL GetDisplayCoordinateOriginText ( );
    void PutPlacePrefixInsideBasicDimensionBox (
        VARIANT_BOOL val );
    VARIANT_BOOL GetPlacePrefixInsideBasicDimensionBox ( );
    void PutSecondaryUnitSeparator (
        enum DimStyleSecondaryUnitSeparatorConstants val );
    enum DimStyleSecondaryUnitSeparatorConstants GetSecondaryUnitSeparator ( );
    void PutWeldSymbolLineWidth (
        double val );
    double GetWeldSymbolLineWidth ( );
    void PutThreeSidedSymbolOffsetGap (
        double val );
    double GetThreeSidedSymbolOffsetGap ( );
    void PutHoleShaftToleranceSeparatorType (
        enum DimHoleShaftSeparatorTypeConstants val );
    enum DimHoleShaftSeparatorTypeConstants GetHoleShaftToleranceSeparatorType ( );
    void PutToleranceTextVerticalAlignment (
        enum TextVerticalAlignmentConstants val );
    enum TextVerticalAlignmentConstants GetToleranceTextVerticalAlignment ( );
    void PutToleranceTextHorizontalAlignment (
        enum DimToleranceTextHorizontalAlignOptionsConstants val );
    enum DimToleranceTextHorizontalAlignOptionsConstants GetToleranceTextHorizontalAlignment ( );
    void PutUseTextSizeForCombinedTolValueDisplay (
        VARIANT_BOOL val );
    VARIANT_BOOL GetUseTextSizeForCombinedTolValueDisplay ( );
    void PutDatumFrameLineTermThickness (
        double val );
    double GetDatumFrameLineTermThickness ( );
    void PutDatumTargetTerminatorType (
        enum DimDatumTargetTermTypeConstants val );
    enum DimDatumTargetTermTypeConstants GetDatumTargetTerminatorType ( );
    void PutPinSymbolTerminatorType (
        enum DimPinSymbolTermTypeConstants val );
    enum DimPinSymbolTermTypeConstants GetPinSymbolTerminatorType ( );
    void PutPrimaryLinearToleranceUnits (
        enum DimLinearUnitConstants val );
    enum DimLinearUnitConstants GetPrimaryLinearToleranceUnits ( );
    void PutPrimaryLinearToleranceRoundOffType (
        enum DimRoundOffTypeConstants val );
    enum DimRoundOffTypeConstants GetPrimaryLinearToleranceRoundOffType ( );
    void PutPrimaryLinearToleranceDecimalRoundOff (
        enum DimDecimalRoundOffTypeConstants val );
    enum DimDecimalRoundOffTypeConstants GetPrimaryLinearToleranceDecimalRoundOff ( );
    void PutPrimaryLinearToleranceFractionRoundOff (
        enum DimFractionRoundOffTypeConstants val );
    enum DimFractionRoundOffTypeConstants GetPrimaryLinearToleranceFractionRoundOff ( );
    void PutPrimaryLinearToleranceUnitLabel (
        _bstr_t val );
    _bstr_t GetPrimaryLinearToleranceUnitLabel ( );
    void PutPrimaryLinearToleranceSubunitsLabel (
        _bstr_t val );
    _bstr_t GetPrimaryLinearToleranceSubunitsLabel ( );
    void PutPrimaryLinearToleranceMaximumSubunits (
        int val );
    int GetPrimaryLinearToleranceMaximumSubunits ( );
    void PutPrimaryLinearToleranceFractionSeparator (
        _bstr_t val );
    _bstr_t GetPrimaryLinearToleranceFractionSeparator ( );
    void PutAngularToleranceUnits (
        enum DimAngularUnitConstants val );
    enum DimAngularUnitConstants GetAngularToleranceUnits ( );
    void PutAngularToleranceRoundOffType (
        enum DimRoundOffTypeConstants val );
    enum DimRoundOffTypeConstants GetAngularToleranceRoundOffType ( );
    void PutAngularToleranceDMSRoundOff (
        enum DimDMSRoundOffTypeConstants val );
    enum DimDMSRoundOffTypeConstants GetAngularToleranceDMSRoundOff ( );
    void PutAngularToleranceDecimalRoundOff (
        enum DimDecimalRoundOffTypeConstants val );
    enum DimDecimalRoundOffTypeConstants GetAngularToleranceDecimalRoundOff ( );
    void PutAngularToleranceFractionRoundOff (
        enum DimFractionRoundOffTypeConstants val );
    enum DimFractionRoundOffTypeConstants GetAngularToleranceFractionRoundOff ( );
    void PutSecondaryLinearToleranceUnits (
        enum DimLinearUnitConstants val );
    enum DimLinearUnitConstants GetSecondaryLinearToleranceUnits ( );
    void PutSecondaryLinearToleranceRoundOffType (
        enum DimRoundOffTypeConstants val );
    enum DimRoundOffTypeConstants GetSecondaryLinearToleranceRoundOffType ( );
    void PutSecondaryLinearToleranceDecimalRoundOff (
        enum DimDecimalRoundOffTypeConstants val );
    enum DimDecimalRoundOffTypeConstants GetSecondaryLinearToleranceDecimalRoundOff ( );
    void PutSecondaryLinearToleranceFractionRoundOff (
        enum DimFractionRoundOffTypeConstants val );
    enum DimFractionRoundOffTypeConstants GetSecondaryLinearToleranceFractionRoundOff ( );
    void PutSecondaryLinearToleranceUnitLabel (
        _bstr_t val );
    _bstr_t GetSecondaryLinearToleranceUnitLabel ( );
    void PutSecondaryLinearToleranceSubunitsLabel (
        _bstr_t val );
    _bstr_t GetSecondaryLinearToleranceSubunitsLabel ( );
    void PutSecondaryLinearToleranceMaximumSubunits (
        int val );
    int GetSecondaryLinearToleranceMaximumSubunits ( );
    void PutSecondaryLinearToleranceFractionSeparator (
        _bstr_t val );
    _bstr_t GetSecondaryLinearToleranceFractionSeparator ( );
    void PutSecondaryLinearFractionSeparator (
        _bstr_t val );
    _bstr_t GetSecondaryLinearFractionSeparator ( );
    void PutDualUnitPosition (
        enum DimDualUnitPositionConstants val );
    enum DimDualUnitPositionConstants GetDualUnitPosition ( );
    void PutDualUnitJustification (
        enum TextHorizontalAlignmentConstants val );
    enum TextHorizontalAlignmentConstants GetDualUnitJustification ( );
    void PutSmartDepthSlotThru (
        _bstr_t val );
    _bstr_t GetSmartDepthSlotThru ( );
    void PutSmartDepthSlotFinite (
        _bstr_t val );
    _bstr_t GetSmartDepthSlotFinite ( );
    void PutSlotCalloutSimple (
        _bstr_t val );
    _bstr_t GetSlotCalloutSimple ( );
    void PutSlotCalloutCounterbore (
        _bstr_t val );
    _bstr_t GetSlotCalloutCounterbore ( );
    void PutCoordinateTextOrientation (
        enum DimTextOrientationConstants val );
    enum DimTextOrientationConstants GetCoordinateTextOrientation ( );
    void PutEnableAutoJogForCoordinate (
        VARIANT_BOOL val );
    VARIANT_BOOL GetEnableAutoJogForCoordinate ( );
    void PutAllowNegativeValueForCoordinate (
        VARIANT_BOOL val );
    VARIANT_BOOL GetAllowNegativeValueForCoordinate ( );
    void PutAllowOriginValueChangeForCoordinate (
        VARIANT_BOOL val );
    VARIANT_BOOL GetAllowOriginValueChangeForCoordinate ( );
    void PutShowOriginLineForCoordinate (
        VARIANT_BOOL val );
    VARIANT_BOOL GetShowOriginLineForCoordinate ( );
    void PutOverlineExtension (
        double val );
    double GetOverlineExtension ( );
    void PutSuppressSymmetricDiameterSymbol (
        VARIANT_BOOL val );
    VARIANT_BOOL GetSuppressSymmetricDiameterSymbol ( );
    void PutUnderlineSymbolAndPrefix (
        VARIANT_BOOL val );
    VARIANT_BOOL GetUnderlineSymbolAndPrefix ( );
    void PutInitialStackPitch (
        double val );
    double GetInitialStackPitch ( );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    void PutHoleCalloutCounterdrill (
        _bstr_t val );
    _bstr_t GetHoleCalloutCounterdrill ( );
    void PutHoleCalloutCounterdrillThreaded (
        _bstr_t val );
    _bstr_t GetHoleCalloutCounterdrillThreaded ( );
    void PutPrimaryStackFraction (
        enum DimStackFractionTypeConstants val );
    enum DimStackFractionTypeConstants GetPrimaryStackFraction ( );
    void PutSecondaryStackFraction (
        enum DimStackFractionTypeConstants val );
    enum DimStackFractionTypeConstants GetSecondaryStackFraction ( );
    void PutPrimaryStackFractionSize (
        enum DimStackFractionSizeConstants val );
    enum DimStackFractionSizeConstants GetPrimaryStackFractionSize ( );
    void PutSecondaryStackFractionSize (
        enum DimStackFractionSizeConstants val );
    enum DimStackFractionSizeConstants GetSecondaryStackFractionSize ( );
    void PutShowHideReferenceGeometry (
        VARIANT_BOOL val );
    VARIANT_BOOL GetShowHideReferenceGeometry ( );
    void PutEnableAngularJog (
        VARIANT_BOOL val );
    VARIANT_BOOL GetEnableAngularJog ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_PrimaryUnits (
        /*[in]*/ enum DimLinearUnitConstants val ) = 0;
      virtual HRESULT __stdcall get_PrimaryUnits (
        /*[out,retval]*/ enum DimLinearUnitConstants * val ) = 0;
      virtual HRESULT __stdcall put_RoundOffType (
        /*[in]*/ enum DimRoundOffTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_RoundOffType (
        /*[out,retval]*/ enum DimRoundOffTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_Delimiter (
        /*[in]*/ enum DimDelimiterTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_Delimiter (
        /*[out,retval]*/ enum DimDelimiterTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_PrimaryDecimalRoundOff (
        /*[in]*/ enum DimDecimalRoundOffTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_PrimaryDecimalRoundOff (
        /*[out,retval]*/ enum DimDecimalRoundOffTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_PrimaryFractionRoundOff (
        /*[in]*/ enum DimFractionRoundOffTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_PrimaryFractionRoundOff (
        /*[out,retval]*/ enum DimFractionRoundOffTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_AngularUnits (
        /*[in]*/ enum DimAngularUnitConstants val ) = 0;
      virtual HRESULT __stdcall get_AngularUnits (
        /*[out,retval]*/ enum DimAngularUnitConstants * val ) = 0;
      virtual HRESULT __stdcall put_AngularDMSRoundOff (
        /*[in]*/ enum DimDMSRoundOffTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_AngularDMSRoundOff (
        /*[out,retval]*/ enum DimDMSRoundOffTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_AngularDecimalRoundOff (
        /*[in]*/ enum DimDecimalRoundOffTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_AngularDecimalRoundOff (
        /*[out,retval]*/ enum DimDecimalRoundOffTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_AngularFractionRoundOff (
        /*[in]*/ enum DimFractionRoundOffTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_AngularFractionRoundOff (
        /*[out,retval]*/ enum DimFractionRoundOffTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_PrimaryLeadingZeros (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_PrimaryLeadingZeros (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_PrimaryTrailingZeros (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_PrimaryTrailingZeros (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_PrimaryUnitLabel (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_PrimaryUnitLabel (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_PrimarySubunitsLabel (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_PrimarySubunitsLabel (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_MaximumSubunits (
        /*[in]*/ int val ) = 0;
      virtual HRESULT __stdcall get_MaximumSubunits (
        /*[out,retval]*/ int * val ) = 0;
      virtual HRESULT __stdcall put_DualDisplay (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_DualDisplay (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryUnits (
        /*[in]*/ enum DimLinearUnitConstants val ) = 0;
      virtual HRESULT __stdcall get_SecondaryUnits (
        /*[out,retval]*/ enum DimLinearUnitConstants * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryUnitRoundOff (
        /*[in]*/ enum DimRoundOffTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_SecondaryUnitRoundOff (
        /*[out,retval]*/ enum DimRoundOffTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryDecimalRoundOff (
        /*[in]*/ enum DimDecimalRoundOffTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_SecondaryDecimalRoundOff (
        /*[out,retval]*/ enum DimDecimalRoundOffTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryFractionRoundOff (
        /*[in]*/ enum DimFractionRoundOffTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_SecondaryFractionRoundOff (
        /*[out,retval]*/ enum DimFractionRoundOffTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryLeadingZeros (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_SecondaryLeadingZeros (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryTrailingZeros (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_SecondaryTrailingZeros (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryUnitLabel (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_SecondaryUnitLabel (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_SecondarySubunitsLabel (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_SecondarySubunitsLabel (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_Ratio (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_Ratio (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_TextWeight (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_TextWeight (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_Font (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_FontStyle (
        /*[in]*/ enum DimTextFontStyleConstants val ) = 0;
      virtual HRESULT __stdcall get_FontStyle (
        /*[out,retval]*/ enum DimTextFontStyleConstants * val ) = 0;
      virtual HRESULT __stdcall put_TextOrientation (
        /*[in]*/ enum DimTextOrientationConstants val ) = 0;
      virtual HRESULT __stdcall get_TextOrientation (
        /*[out,retval]*/ enum DimTextOrientationConstants * val ) = 0;
      virtual HRESULT __stdcall put_TextPosition (
        /*[in]*/ enum DimTextPositionConstants val ) = 0;
      virtual HRESULT __stdcall get_TextPosition (
        /*[out,retval]*/ enum DimTextPositionConstants * val ) = 0;
      virtual HRESULT __stdcall put_LimitTextArrangement (
        /*[in]*/ enum DimLimitTextArrangmentConstants val ) = 0;
      virtual HRESULT __stdcall get_LimitTextArrangement (
        /*[out,retval]*/ enum DimLimitTextArrangmentConstants * val ) = 0;
      virtual HRESULT __stdcall put_ToleranceHeightRatio (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_ToleranceHeightRatio (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_ToleranceWeight (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_ToleranceWeight (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_NTSSymbol (
        /*[in]*/ enum DimNTSTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_NTSSymbol (
        /*[out,retval]*/ enum DimNTSTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_TerminatorType (
        /*[in]*/ enum DimTermTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_TerminatorType (
        /*[out,retval]*/ enum DimTermTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_TerminatorDisplay (
        /*[in]*/ enum DimTermDisplayTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_TerminatorDisplay (
        /*[out,retval]*/ enum DimTermDisplayTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_OriginTerminatorType (
        /*[in]*/ enum DimTermTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_OriginTerminatorType (
        /*[out,retval]*/ enum DimTermTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_FreeSpaceTerminatorType (
        /*[in]*/ enum DimTermTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_FreeSpaceTerminatorType (
        /*[out,retval]*/ enum DimTermTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_DatumTerminatorType (
        /*[in]*/ enum DimDatumTermTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_DatumTerminatorType (
        /*[out,retval]*/ enum DimDatumTermTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_TerminatorSize (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_TerminatorSize (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_TerminatorInsideLimit (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_TerminatorInsideLimit (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_ProjectionExtensionGap (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_ProjectionExtensionGap (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_ProjectionOffsetGap (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_ProjectionOffsetGap (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_ProjectionOffsetGapAlignment (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_ProjectionOffsetGapAlignment (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ProjectionAngle (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_ProjectionAngle (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_LineConnect (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_LineConnect (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_StackPitch (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_StackPitch (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_LeaderLineLength (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_LeaderLineLength (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_CoordinateAutoJog (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_CoordinateAutoJog (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_CoordinateStackPitch (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_CoordinateStackPitch (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_CommonOrigin (
        /*[in]*/ enum DimCommonOriginTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_CommonOrigin (
        /*[out,retval]*/ enum DimCommonOriginTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_CoordinateTextPosition (
        /*[in]*/ enum DimCoordTextPositionConstants val ) = 0;
      virtual HRESULT __stdcall get_CoordinateTextPosition (
        /*[out,retval]*/ enum DimCoordTextPositionConstants * val ) = 0;
      virtual HRESULT __stdcall put_SymbolPosition (
        /*[in]*/ enum DimSymbolPositionConstants val ) = 0;
      virtual HRESULT __stdcall get_SymbolPosition (
        /*[out,retval]*/ enum DimSymbolPositionConstants * val ) = 0;
      virtual HRESULT __stdcall put_AutoSuppressDiameter (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_AutoSuppressDiameter (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_DimensionScaleMode (
        /*[in]*/ enum DimScaleModeConstants val ) = 0;
      virtual HRESULT __stdcall get_DimensionScaleMode (
        /*[out,retval]*/ enum DimScaleModeConstants * val ) = 0;
      virtual HRESULT __stdcall put_DimensionScale (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_DimensionScale (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_ErrorColor (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_ErrorColor (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_DrivingColor (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_DrivingColor (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_DrivenColor (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_DrivenColor (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_AutoCenterLine (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_AutoCenterLine (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_AutoCenterProjectionLine (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_AutoCenterProjectionLine (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ProjectionLineDisplay (
        /*[in]*/ enum DimProjDisplayTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_ProjectionLineDisplay (
        /*[out,retval]*/ enum DimProjDisplayTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_ProjectionLineDisplayForIntersectionPoint (
        /*[in]*/ enum DimProjDisplayTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_ProjectionLineDisplayForIntersectionPoint (
        /*[out,retval]*/ enum DimProjDisplayTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_TextClearanceGap (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_TextClearanceGap (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_DualModeVerticalGap (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_DualModeVerticalGap (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_CharacterPitch (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_CharacterPitch (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_LineSpacing (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_LineSpacing (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_AboveGap (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_AboveGap (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_HorizontalToleranceGap (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_HorizontalToleranceGap (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_VerticalToleranceGap (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_VerticalToleranceGap (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_VerticalLimitsGap (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_VerticalLimitsGap (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_HorizontalBoxGap (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_HorizontalBoxGap (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_VerticalBoxGap (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_VerticalBoxGap (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_PrefixSuffixGap (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_PrefixSuffixGap (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_SymbolGap (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_SymbolGap (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_MaximumViewAngle (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_MaximumViewAngle (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_ProjectionToleranceZonePosition (
        /*[in]*/ enum DimProjTolZonePositionConstants val ) = 0;
      virtual HRESULT __stdcall get_ProjectionToleranceZonePosition (
        /*[out,retval]*/ enum DimProjTolZonePositionConstants * val ) = 0;
      virtual HRESULT __stdcall put_DatumFrameDashes (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_DatumFrameDashes (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ViewTextRatio (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_ViewTextRatio (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_ViewTerminatorRatio (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_ViewTerminatorRatio (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_ViewLineWidth (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_ViewLineWidth (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_ViewLineType (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_ViewLineType (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_ViewCuttingPlaneLineDisplay (
        /*[in]*/ enum DimViewCuttingPlaneDisplayTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_ViewCuttingPlaneLineDisplay (
        /*[out,retval]*/ enum DimViewCuttingPlaneDisplayTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_ViewPlaneLineDisplay (
        /*[in]*/ enum DimViewPlaneDisplayTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_ViewPlaneLineDisplay (
        /*[out,retval]*/ enum DimViewPlaneDisplayTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_ViewCaptionLocation (
        /*[in]*/ enum DimViewCaptionLocationConstants val ) = 0;
      virtual HRESULT __stdcall get_ViewCaptionLocation (
        /*[out,retval]*/ enum DimViewCaptionLocationConstants * val ) = 0;
      virtual HRESULT __stdcall put_ViewCPLCaptionLocation (
        /*[in]*/ enum DimViewCPLCaptionLocationConstants val ) = 0;
      virtual HRESULT __stdcall get_ViewCPLCaptionLocation (
        /*[out,retval]*/ enum DimViewCPLCaptionLocationConstants * val ) = 0;
      virtual HRESULT __stdcall put_ViewSuffixAsPrefix (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_ViewSuffixAsPrefix (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ViewThinTerminator (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_ViewThinTerminator (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ViewVPLCaptionAtEnd (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_ViewVPLCaptionAtEnd (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_OffsetLeaderType (
        /*[in]*/ enum DimOffsetLeaderTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_OffsetLeaderType (
        /*[out,retval]*/ enum DimOffsetLeaderTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryToleranceEquivalent (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_SecondaryToleranceEquivalent (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_CenterLineType (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_CenterLineType (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * Description ) = 0;
      virtual HRESULT __stdcall put_Parent (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_CenterMarkSize (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_CenterMarkSize (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_AutoPhase (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_AutoPhase (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_RoundUp (
        /*[in]*/ enum DimRoundUpTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_RoundUp (
        /*[out,retval]*/ enum DimRoundUpTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryLinearRoundOffType (
        /*[in]*/ enum DimRoundOffTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_SecondaryLinearRoundOffType (
        /*[out,retval]*/ enum DimRoundOffTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_AngularRoundOffType (
        /*[in]*/ enum DimRoundOffTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_AngularRoundOffType (
        /*[out,retval]*/ enum DimRoundOffTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_CenterMarkExtension (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_CenterMarkExtension (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_ChamferUse45DegreeCharacter (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_ChamferUse45DegreeCharacter (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_SmartDepthHoleThru (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_SmartDepthHoleThru (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_SmartDepthHoleFinite (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_SmartDepthHoleFinite (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_SmartDepthThreadThru (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_SmartDepthThreadThru (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_SmartDepthThreadFinite (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_SmartDepthThreadFinite (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_LowerCaseMultiplicationSymbol (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_LowerCaseMultiplicationSymbol (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_HoleCalloutSimple (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_HoleCalloutSimple (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_HoleCalloutCounterbore (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_HoleCalloutCounterbore (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_HoleCalloutCountersink (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_HoleCalloutCountersink (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_HoleCalloutSimpleThreaded (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_HoleCalloutSimpleThreaded (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_HoleCalloutCounterboreThreaded (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_HoleCalloutCounterboreThreaded (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_HoleCalloutCountersinkThreaded (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_HoleCalloutCountersinkThreaded (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_ApplyBreakLineGap (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_ApplyBreakLineGap (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_TextAutoFillBackground (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_TextAutoFillBackground (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_PulledOutTextOrientation (
        /*[in]*/ enum DimTextOrientationConstants val ) = 0;
      virtual HRESULT __stdcall get_PulledOutTextOrientation (
        /*[out,retval]*/ enum DimTextOrientationConstants * val ) = 0;
      virtual HRESULT __stdcall put_PulledOutTextPosition (
        /*[in]*/ enum DimTextPositionConstants val ) = 0;
      virtual HRESULT __stdcall get_PulledOutTextPosition (
        /*[out,retval]*/ enum DimTextPositionConstants * val ) = 0;
      virtual HRESULT __stdcall put_OverridePulledOutText (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_OverridePulledOutText (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ViewLineArrowOffset (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_ViewLineArrowOffset (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_ViewThickLineLength (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_ViewThickLineLength (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_OrigTerminatorSize (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_OrigTerminatorSize (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_ConnectorLineType (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_ConnectorLineType (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_ConnectorColor (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_ConnectorColor (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_ConnectorWidth (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_ConnectorWidth (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_FractionSeparator (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_FractionSeparator (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_HeightPMI (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_HeightPMI (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_ProjectionBreakGap (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_ProjectionBreakGap (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryDelimiter (
        /*[in]*/ enum DimDelimiterTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_SecondaryDelimiter (
        /*[out,retval]*/ enum DimDelimiterTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_MatchPrimaryDelimiter (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_MatchPrimaryDelimiter (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_InhibitZeroToleranceDisplay (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_InhibitZeroToleranceDisplay (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_AllAroundMultiplier (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_AllAroundMultiplier (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_OverridePulledOutText2 (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_OverridePulledOutText2 (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_PulledOutText2Orientation (
        /*[in]*/ enum DimTextOrientationConstants val ) = 0;
      virtual HRESULT __stdcall get_PulledOutText2Orientation (
        /*[out,retval]*/ enum DimTextOrientationConstants * val ) = 0;
      virtual HRESULT __stdcall put_PulledOutText2Position (
        /*[in]*/ enum DimTextPositionConstants val ) = 0;
      virtual HRESULT __stdcall get_PulledOutText2Position (
        /*[out,retval]*/ enum DimTextPositionConstants * val ) = 0;
      virtual HRESULT __stdcall put_DisplayDegreeSymbolOnNumericTolerance (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_DisplayDegreeSymbolOnNumericTolerance (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ZeroInchesForFTIN (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_ZeroInchesForFTIN (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_SymbolFont (
        /*[in]*/ enum DimStyleSymbolFontConstants val ) = 0;
      virtual HRESULT __stdcall get_SymbolFont (
        /*[out,retval]*/ enum DimStyleSymbolFontConstants * val ) = 0;
      virtual HRESULT __stdcall put_CalloutTextAspectRatio (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_CalloutTextAspectRatio (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_DatumTerminatorGap (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_DatumTerminatorGap (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_DatumFrameShape (
        /*[in]*/ enum DimStyleDatumFrameShapeConstants val ) = 0;
      virtual HRESULT __stdcall get_DatumFrameShape (
        /*[out,retval]*/ enum DimStyleDatumFrameShapeConstants * val ) = 0;
      virtual HRESULT __stdcall put_DisplayCoordinateOriginText (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_DisplayCoordinateOriginText (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_PlacePrefixInsideBasicDimensionBox (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_PlacePrefixInsideBasicDimensionBox (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryUnitSeparator (
        /*[in]*/ enum DimStyleSecondaryUnitSeparatorConstants val ) = 0;
      virtual HRESULT __stdcall get_SecondaryUnitSeparator (
        /*[out,retval]*/ enum DimStyleSecondaryUnitSeparatorConstants * val ) = 0;
      virtual HRESULT __stdcall put_WeldSymbolLineWidth (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_WeldSymbolLineWidth (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_ThreeSidedSymbolOffsetGap (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_ThreeSidedSymbolOffsetGap (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_HoleShaftToleranceSeparatorType (
        /*[in]*/ enum DimHoleShaftSeparatorTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_HoleShaftToleranceSeparatorType (
        /*[out,retval]*/ enum DimHoleShaftSeparatorTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_ToleranceTextVerticalAlignment (
        /*[in]*/ enum TextVerticalAlignmentConstants val ) = 0;
      virtual HRESULT __stdcall get_ToleranceTextVerticalAlignment (
        /*[out,retval]*/ enum TextVerticalAlignmentConstants * val ) = 0;
      virtual HRESULT __stdcall put_ToleranceTextHorizontalAlignment (
        /*[in]*/ enum DimToleranceTextHorizontalAlignOptionsConstants val ) = 0;
      virtual HRESULT __stdcall get_ToleranceTextHorizontalAlignment (
        /*[out,retval]*/ enum DimToleranceTextHorizontalAlignOptionsConstants * val ) = 0;
      virtual HRESULT __stdcall put_UseTextSizeForCombinedTolValueDisplay (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_UseTextSizeForCombinedTolValueDisplay (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_DatumFrameLineTermThickness (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_DatumFrameLineTermThickness (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_DatumTargetTerminatorType (
        /*[in]*/ enum DimDatumTargetTermTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_DatumTargetTerminatorType (
        /*[out,retval]*/ enum DimDatumTargetTermTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_PinSymbolTerminatorType (
        /*[in]*/ enum DimPinSymbolTermTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_PinSymbolTerminatorType (
        /*[out,retval]*/ enum DimPinSymbolTermTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_PrimaryLinearToleranceUnits (
        /*[in]*/ enum DimLinearUnitConstants val ) = 0;
      virtual HRESULT __stdcall get_PrimaryLinearToleranceUnits (
        /*[out,retval]*/ enum DimLinearUnitConstants * val ) = 0;
      virtual HRESULT __stdcall put_PrimaryLinearToleranceRoundOffType (
        /*[in]*/ enum DimRoundOffTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_PrimaryLinearToleranceRoundOffType (
        /*[out,retval]*/ enum DimRoundOffTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_PrimaryLinearToleranceDecimalRoundOff (
        /*[in]*/ enum DimDecimalRoundOffTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_PrimaryLinearToleranceDecimalRoundOff (
        /*[out,retval]*/ enum DimDecimalRoundOffTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_PrimaryLinearToleranceFractionRoundOff (
        /*[in]*/ enum DimFractionRoundOffTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_PrimaryLinearToleranceFractionRoundOff (
        /*[out,retval]*/ enum DimFractionRoundOffTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_PrimaryLinearToleranceUnitLabel (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_PrimaryLinearToleranceUnitLabel (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_PrimaryLinearToleranceSubunitsLabel (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_PrimaryLinearToleranceSubunitsLabel (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_PrimaryLinearToleranceMaximumSubunits (
        /*[in]*/ int val ) = 0;
      virtual HRESULT __stdcall get_PrimaryLinearToleranceMaximumSubunits (
        /*[out,retval]*/ int * val ) = 0;
      virtual HRESULT __stdcall put_PrimaryLinearToleranceFractionSeparator (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_PrimaryLinearToleranceFractionSeparator (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_AngularToleranceUnits (
        /*[in]*/ enum DimAngularUnitConstants val ) = 0;
      virtual HRESULT __stdcall get_AngularToleranceUnits (
        /*[out,retval]*/ enum DimAngularUnitConstants * val ) = 0;
      virtual HRESULT __stdcall put_AngularToleranceRoundOffType (
        /*[in]*/ enum DimRoundOffTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_AngularToleranceRoundOffType (
        /*[out,retval]*/ enum DimRoundOffTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_AngularToleranceDMSRoundOff (
        /*[in]*/ enum DimDMSRoundOffTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_AngularToleranceDMSRoundOff (
        /*[out,retval]*/ enum DimDMSRoundOffTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_AngularToleranceDecimalRoundOff (
        /*[in]*/ enum DimDecimalRoundOffTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_AngularToleranceDecimalRoundOff (
        /*[out,retval]*/ enum DimDecimalRoundOffTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_AngularToleranceFractionRoundOff (
        /*[in]*/ enum DimFractionRoundOffTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_AngularToleranceFractionRoundOff (
        /*[out,retval]*/ enum DimFractionRoundOffTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryLinearToleranceUnits (
        /*[in]*/ enum DimLinearUnitConstants val ) = 0;
      virtual HRESULT __stdcall get_SecondaryLinearToleranceUnits (
        /*[out,retval]*/ enum DimLinearUnitConstants * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryLinearToleranceRoundOffType (
        /*[in]*/ enum DimRoundOffTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_SecondaryLinearToleranceRoundOffType (
        /*[out,retval]*/ enum DimRoundOffTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryLinearToleranceDecimalRoundOff (
        /*[in]*/ enum DimDecimalRoundOffTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_SecondaryLinearToleranceDecimalRoundOff (
        /*[out,retval]*/ enum DimDecimalRoundOffTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryLinearToleranceFractionRoundOff (
        /*[in]*/ enum DimFractionRoundOffTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_SecondaryLinearToleranceFractionRoundOff (
        /*[out,retval]*/ enum DimFractionRoundOffTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryLinearToleranceUnitLabel (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_SecondaryLinearToleranceUnitLabel (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryLinearToleranceSubunitsLabel (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_SecondaryLinearToleranceSubunitsLabel (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryLinearToleranceMaximumSubunits (
        /*[in]*/ int val ) = 0;
      virtual HRESULT __stdcall get_SecondaryLinearToleranceMaximumSubunits (
        /*[out,retval]*/ int * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryLinearToleranceFractionSeparator (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_SecondaryLinearToleranceFractionSeparator (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryLinearFractionSeparator (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_SecondaryLinearFractionSeparator (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_DualUnitPosition (
        /*[in]*/ enum DimDualUnitPositionConstants val ) = 0;
      virtual HRESULT __stdcall get_DualUnitPosition (
        /*[out,retval]*/ enum DimDualUnitPositionConstants * val ) = 0;
      virtual HRESULT __stdcall put_DualUnitJustification (
        /*[in]*/ enum TextHorizontalAlignmentConstants val ) = 0;
      virtual HRESULT __stdcall get_DualUnitJustification (
        /*[out,retval]*/ enum TextHorizontalAlignmentConstants * val ) = 0;
      virtual HRESULT __stdcall put_SmartDepthSlotThru (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_SmartDepthSlotThru (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_SmartDepthSlotFinite (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_SmartDepthSlotFinite (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_SlotCalloutSimple (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_SlotCalloutSimple (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_SlotCalloutCounterbore (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_SlotCalloutCounterbore (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_CoordinateTextOrientation (
        /*[in]*/ enum DimTextOrientationConstants val ) = 0;
      virtual HRESULT __stdcall get_CoordinateTextOrientation (
        /*[out,retval]*/ enum DimTextOrientationConstants * val ) = 0;
      virtual HRESULT __stdcall put_EnableAutoJogForCoordinate (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_EnableAutoJogForCoordinate (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_AllowNegativeValueForCoordinate (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_AllowNegativeValueForCoordinate (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_AllowOriginValueChangeForCoordinate (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_AllowOriginValueChangeForCoordinate (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ShowOriginLineForCoordinate (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_ShowOriginLineForCoordinate (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_OverlineExtension (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_OverlineExtension (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_SuppressSymmetricDiameterSymbol (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_SuppressSymmetricDiameterSymbol (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_UnderlineSymbolAndPrefix (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_UnderlineSymbolAndPrefix (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_InitialStackPitch (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_InitialStackPitch (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
      virtual HRESULT __stdcall put_HoleCalloutCounterdrill (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_HoleCalloutCounterdrill (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_HoleCalloutCounterdrillThreaded (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_HoleCalloutCounterdrillThreaded (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_PrimaryStackFraction (
        /*[in]*/ enum DimStackFractionTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_PrimaryStackFraction (
        /*[out,retval]*/ enum DimStackFractionTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryStackFraction (
        /*[in]*/ enum DimStackFractionTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_SecondaryStackFraction (
        /*[out,retval]*/ enum DimStackFractionTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_PrimaryStackFractionSize (
        /*[in]*/ enum DimStackFractionSizeConstants val ) = 0;
      virtual HRESULT __stdcall get_PrimaryStackFractionSize (
        /*[out,retval]*/ enum DimStackFractionSizeConstants * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryStackFractionSize (
        /*[in]*/ enum DimStackFractionSizeConstants val ) = 0;
      virtual HRESULT __stdcall get_SecondaryStackFractionSize (
        /*[out,retval]*/ enum DimStackFractionSizeConstants * val ) = 0;
      virtual HRESULT __stdcall put_ShowHideReferenceGeometry (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_ShowHideReferenceGeometry (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_EnableAngularJog (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_EnableAngularJog (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
};

enum DimAngularCoordnateOrientationConstants
{
    igDimAngCoordOrientClockwise = 0,
    igDimAngCoordOrientCounterClockwise = 1
};

struct __declspec(uuid("8d73e634-9deb-4e69-bfc4-5fedc46e78ce"))
DimInitData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    HRESULT SetType (
        enum DimTypeConstants DimensionType );
    HRESULT SetAxisMode (
        enum DimAxisModeConstants AxisMode );
    HRESULT SetChamferAxisMode (
        enum DimChamferModeConstants chamferAxisMode );
    HRESULT SetNumberOfParents (
        int numberOfParents );
    HRESULT SetParentByIndex (
        int Index,
        IDispatch * Object,
        VARIANT_BOOL IsKeyPoint,
        VARIANT_BOOL IsIntersection,
        VARIANT_BOOL IsTangentPoint,
        VARIANT_BOOL UseVirtualVertex,
        double x,
        double y,
        double z );
    HRESULT ClearParents ( );
    HRESULT ClearCreationData ( );
    HRESULT SetAxis (
        IDispatch * Axis );
    HRESULT ClearAxis ( );
    HRESULT SetPlane (
        IDispatch * Plane );
    HRESULT ClearPlane ( );
    HRESULT SetAngularCoordinateCounterClockwise (
        VARIANT_BOOL bCounterClockWise );
    HRESULT SetDimPositionMode (
        VARIANT_BOOL bPositionDim );
    HRESULT SetDimPosition (
        double x,
        double y,
        double z );
    HRESULT SetAngularCoordOrigin (
        VARIANT_BOOL bIsOriginDim );
    HRESULT SetTrue3DSketchDimension (
        VARIANT_BOOL bTrueDim );
    HRESULT SetNormalDiameterMode (
        VARIANT_BOOL bNormalDiameterDim );
};

struct __declspec(uuid("c13be7f6-e3bd-11d2-bed4-080036b4d502"))
_IDimensionsAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetConstraint,put=PutConstraint))
    VARIANT_BOOL Constraint;
    __declspec(property(get=GetAxisMode,put=PutAxisMode))
    enum DimAxisModeConstants AxisMode;
    __declspec(property(get=GetAngleCompliment,put=PutAngleCompliment))
    VARIANT_BOOL AngleCompliment;
    __declspec(property(get=GetPlane,put=PutPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetStyle,put=PutStyle))
    DimensionStylePtr Style;
    __declspec(property(get=GetAxis,put=PutAxis))
    IDispatchPtr Axis;
    __declspec(property(get=GetDimInitData))
    DimInitDataPtr DimInitData;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    DimensionPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    void PutConstraint (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetConstraint ( );
    void PutAxisMode (
        enum DimAxisModeConstants Value );
    enum DimAxisModeConstants GetAxisMode ( );
    void PutAngleCompliment (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetAngleCompliment ( );
    void PutPlane (
        IDispatch * Plane );
    IDispatchPtr GetPlane ( );
    void PutStyle (
        struct DimensionStyle * Style );
    DimensionStylePtr GetStyle ( );
    void PutAxis (
        IDispatch * Axis );
    IDispatchPtr GetAxis ( );
    DimensionPtr AddLength (
        IDispatch * Object );
    DimensionPtr AddAngle (
        IDispatch * Object );
    DimensionPtr AddRadius (
        IDispatch * Object );
    DimensionPtr AddRadialDiameter (
        IDispatch * Object );
    DimensionPtr AddCircularDiameter (
        IDispatch * Object );
    DimensionPtr AddSymmetricalDiameter (
        IDispatch * Object1,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint1,
        IDispatch * Object2,
        double x2,
        double y2,
        double z2,
        VARIANT_BOOL keyPoint2 );
    DimensionPtr AddDistanceBetweenObjects (
        IDispatch * Object1,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint1,
        IDispatch * Object2,
        double x2,
        double y2,
        double z2,
        VARIANT_BOOL keyPoint2 );
    DimensionPtr AddDistanceObjectToIntersection (
        IDispatch * Object1,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint1,
        IDispatch * Object21,
        double x21,
        double y21,
        double z21,
        IDispatch * Object22,
        double x22,
        double y22,
        double z22 );
    DimensionPtr AddDistanceIntersectionToObject (
        IDispatch * Object11,
        double x11,
        double y11,
        double z11,
        IDispatch * Object12,
        double x12,
        double y12,
        double z12,
        IDispatch * Object2,
        double x2,
        double y2,
        double z2,
        VARIANT_BOOL keyPoint2 );
    DimensionPtr AddDistanceIntersectionToIntersection (
        IDispatch * Object11,
        double x11,
        double y11,
        double z11,
        IDispatch * Object12,
        double x12,
        double y12,
        double z12,
        IDispatch * Object21,
        double x21,
        double y21,
        double z21,
        IDispatch * Object22,
        double x22,
        double y22,
        double z22 );
    DimensionPtr AddAngleBetweenObjects (
        IDispatch * ele1,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint1,
        IDispatch * ele2,
        double x2,
        double y2,
        double z2,
        VARIANT_BOOL keyPoint2 );
    DimensionPtr AddAngleBetween3Objects (
        IDispatch * ele1,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint1,
        IDispatch * ele2,
        double x2,
        double y2,
        double z2,
        VARIANT_BOOL keyPoint2,
        IDispatch * ele3,
        double x3,
        double y3,
        double z3,
        VARIANT_BOOL keyPoint3 );
    DimensionPtr AddCoordinateOrigin (
        IDispatch * Object,
        double x,
        double y,
        double z,
        VARIANT_BOOL keyPoint );
    DimensionPtr AddCoordinate (
        IDispatch * Obj1,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint1,
        IDispatch * Obj2,
        double x2,
        double y2,
        double z2,
        VARIANT_BOOL keyPoint2 );
    HRESULT ClearPlane ( );
    HRESULT ClearStyle ( );
    HRESULT ClearAxis ( );
    DimensionPtr AddChamfer (
        IDispatch * Object1,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint1,
        IDispatch * Object2,
        double x2,
        double y2,
        double z2,
        VARIANT_BOOL keyPoint2,
        enum DimChamferModeConstants valChamferMode );
    DimensionPtr AddAngularCoordinateOrigin (
        IDispatch * Obj1,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint1,
        IDispatch * Obj2,
        double x2,
        double y2,
        double z2,
        VARIANT_BOOL keyPoint2,
        double x3,
        double y3,
        double z3 );
    DimensionPtr AddAngularCoordinate (
        IDispatch * Obj1,
        IDispatch * Obj2,
        double x2,
        double y2,
        double z2,
        VARIANT_BOOL keyPoint2,
        double x3,
        double y3,
        double z3,
        enum DimAngularCoordnateOrientationConstants valAngCoordMode );
    DimensionPtr AddCoordinateOriginEx (
        IDispatch * Object,
        double x,
        double y,
        double z,
        VARIANT_BOOL keyPoint1,
        double x3,
        double y3,
        double z3 );
    DimensionPtr AddCoordinateEx (
        IDispatch * Obj1,
        IDispatch * Obj2,
        double x2,
        double y2,
        double z2,
        VARIANT_BOOL keyPoint2,
        double x3,
        double y3,
        double z3 );
    DimensionPtr AddDistanceBetweenObjectsEX (
        IDispatch * Object1,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint1,
        VARIANT_BOOL bTangent1,
        IDispatch * Object2,
        double x2,
        double y2,
        double z2,
        VARIANT_BOOL keyPoint2,
        VARIANT_BOOL bTangent2 );
    DimInitDataPtr GetDimInitData ( );
    DimensionPtr AddDimension (
        struct DimInitData * DimInitData );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * pApp ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * pParent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Dimension * * pItem ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pEnum ) = 0;
      virtual HRESULT __stdcall put_Constraint (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Constraint (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_AxisMode (
        /*[in]*/ enum DimAxisModeConstants Value ) = 0;
      virtual HRESULT __stdcall get_AxisMode (
        /*[out,retval]*/ enum DimAxisModeConstants * Value ) = 0;
      virtual HRESULT __stdcall put_AngleCompliment (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_AngleCompliment (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Plane (
        /*[in]*/ IDispatch * Plane ) = 0;
      virtual HRESULT __stdcall get_Plane (
        /*[out,retval]*/ IDispatch * * Plane ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ struct DimensionStyle * Style ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct DimensionStyle * * Style ) = 0;
      virtual HRESULT __stdcall put_Axis (
        /*[in]*/ IDispatch * Axis ) = 0;
      virtual HRESULT __stdcall get_Axis (
        /*[out,retval]*/ IDispatch * * Axis ) = 0;
      virtual HRESULT __stdcall raw_AddLength (
        /*[in]*/ IDispatch * Object,
        /*[out,retval]*/ struct Dimension * * DimObj ) = 0;
      virtual HRESULT __stdcall raw_AddAngle (
        /*[in]*/ IDispatch * Object,
        /*[out,retval]*/ struct Dimension * * DimObj ) = 0;
      virtual HRESULT __stdcall raw_AddRadius (
        /*[in]*/ IDispatch * Object,
        /*[out,retval]*/ struct Dimension * * DimObj ) = 0;
      virtual HRESULT __stdcall raw_AddRadialDiameter (
        /*[in]*/ IDispatch * Object,
        /*[out,retval]*/ struct Dimension * * DimObj ) = 0;
      virtual HRESULT __stdcall raw_AddCircularDiameter (
        /*[in]*/ IDispatch * Object,
        /*[out,retval]*/ struct Dimension * * DimObj ) = 0;
      virtual HRESULT __stdcall raw_AddSymmetricalDiameter (
        /*[in]*/ IDispatch * Object1,
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double z1,
        /*[in]*/ VARIANT_BOOL keyPoint1,
        /*[in]*/ IDispatch * Object2,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ double z2,
        /*[in]*/ VARIANT_BOOL keyPoint2,
        /*[out,retval]*/ struct Dimension * * DimObj ) = 0;
      virtual HRESULT __stdcall raw_AddDistanceBetweenObjects (
        /*[in]*/ IDispatch * Object1,
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double z1,
        /*[in]*/ VARIANT_BOOL keyPoint1,
        /*[in]*/ IDispatch * Object2,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ double z2,
        /*[in]*/ VARIANT_BOOL keyPoint2,
        /*[out,retval]*/ struct Dimension * * DimObj ) = 0;
      virtual HRESULT __stdcall raw_AddDistanceObjectToIntersection (
        /*[in]*/ IDispatch * Object1,
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double z1,
        /*[in]*/ VARIANT_BOOL keyPoint1,
        /*[in]*/ IDispatch * Object21,
        /*[in]*/ double x21,
        /*[in]*/ double y21,
        /*[in]*/ double z21,
        /*[in]*/ IDispatch * Object22,
        /*[in]*/ double x22,
        /*[in]*/ double y22,
        /*[in]*/ double z22,
        /*[out,retval]*/ struct Dimension * * DimObj ) = 0;
      virtual HRESULT __stdcall raw_AddDistanceIntersectionToObject (
        /*[in]*/ IDispatch * Object11,
        /*[in]*/ double x11,
        /*[in]*/ double y11,
        /*[in]*/ double z11,
        /*[in]*/ IDispatch * Object12,
        /*[in]*/ double x12,
        /*[in]*/ double y12,
        /*[in]*/ double z12,
        /*[in]*/ IDispatch * Object2,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ double z2,
        /*[in]*/ VARIANT_BOOL keyPoint2,
        /*[out,retval]*/ struct Dimension * * DimObj ) = 0;
      virtual HRESULT __stdcall raw_AddDistanceIntersectionToIntersection (
        /*[in]*/ IDispatch * Object11,
        /*[in]*/ double x11,
        /*[in]*/ double y11,
        /*[in]*/ double z11,
        /*[in]*/ IDispatch * Object12,
        /*[in]*/ double x12,
        /*[in]*/ double y12,
        /*[in]*/ double z12,
        /*[in]*/ IDispatch * Object21,
        /*[in]*/ double x21,
        /*[in]*/ double y21,
        /*[in]*/ double z21,
        /*[in]*/ IDispatch * Object22,
        /*[in]*/ double x22,
        /*[in]*/ double y22,
        /*[in]*/ double z22,
        /*[out,retval]*/ struct Dimension * * DimObj ) = 0;
      virtual HRESULT __stdcall raw_AddAngleBetweenObjects (
        /*[in]*/ IDispatch * ele1,
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double z1,
        /*[in]*/ VARIANT_BOOL keyPoint1,
        /*[in]*/ IDispatch * ele2,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ double z2,
        /*[in]*/ VARIANT_BOOL keyPoint2,
        /*[out,retval]*/ struct Dimension * * DimObj ) = 0;
      virtual HRESULT __stdcall raw_AddAngleBetween3Objects (
        /*[in]*/ IDispatch * ele1,
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double z1,
        /*[in]*/ VARIANT_BOOL keyPoint1,
        /*[in]*/ IDispatch * ele2,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ double z2,
        /*[in]*/ VARIANT_BOOL keyPoint2,
        /*[in]*/ IDispatch * ele3,
        /*[in]*/ double x3,
        /*[in]*/ double y3,
        /*[in]*/ double z3,
        /*[in]*/ VARIANT_BOOL keyPoint3,
        /*[out,retval]*/ struct Dimension * * DimObj ) = 0;
      virtual HRESULT __stdcall raw_AddCoordinateOrigin (
        /*[in]*/ IDispatch * Object,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z,
        /*[in]*/ VARIANT_BOOL keyPoint,
        /*[out,retval]*/ struct Dimension * * DimObj ) = 0;
      virtual HRESULT __stdcall raw_AddCoordinate (
        /*[in]*/ IDispatch * Obj1,
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double z1,
        /*[in]*/ VARIANT_BOOL keyPoint1,
        /*[in]*/ IDispatch * Obj2,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ double z2,
        /*[in]*/ VARIANT_BOOL keyPoint2,
        /*[out,retval]*/ struct Dimension * * DimObj ) = 0;
      virtual HRESULT __stdcall raw_ClearPlane ( ) = 0;
      virtual HRESULT __stdcall raw_ClearStyle ( ) = 0;
      virtual HRESULT __stdcall raw_ClearAxis ( ) = 0;
      virtual HRESULT __stdcall raw_AddChamfer (
        /*[in]*/ IDispatch * Object1,
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double z1,
        /*[in]*/ VARIANT_BOOL keyPoint1,
        /*[in]*/ IDispatch * Object2,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ double z2,
        /*[in]*/ VARIANT_BOOL keyPoint2,
        /*[in]*/ enum DimChamferModeConstants valChamferMode,
        /*[out,retval]*/ struct Dimension * * DimObj ) = 0;
      virtual HRESULT __stdcall raw_AddAngularCoordinateOrigin (
        /*[in]*/ IDispatch * Obj1,
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double z1,
        /*[in]*/ VARIANT_BOOL keyPoint1,
        /*[in]*/ IDispatch * Obj2,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ double z2,
        /*[in]*/ VARIANT_BOOL keyPoint2,
        /*[in]*/ double x3,
        /*[in]*/ double y3,
        /*[in]*/ double z3,
        /*[out,retval]*/ struct Dimension * * DimObj ) = 0;
      virtual HRESULT __stdcall raw_AddAngularCoordinate (
        /*[in]*/ IDispatch * Obj1,
        /*[in]*/ IDispatch * Obj2,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ double z2,
        /*[in]*/ VARIANT_BOOL keyPoint2,
        /*[in]*/ double x3,
        /*[in]*/ double y3,
        /*[in]*/ double z3,
        /*[in]*/ enum DimAngularCoordnateOrientationConstants valAngCoordMode,
        /*[out,retval]*/ struct Dimension * * DimObj ) = 0;
      virtual HRESULT __stdcall raw_AddCoordinateOriginEx (
        /*[in]*/ IDispatch * Object,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z,
        /*[in]*/ VARIANT_BOOL keyPoint1,
        /*[in]*/ double x3,
        /*[in]*/ double y3,
        /*[in]*/ double z3,
        /*[out,retval]*/ struct Dimension * * DimObj ) = 0;
      virtual HRESULT __stdcall raw_AddCoordinateEx (
        /*[in]*/ IDispatch * Obj1,
        /*[in]*/ IDispatch * Obj2,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ double z2,
        /*[in]*/ VARIANT_BOOL keyPoint2,
        /*[in]*/ double x3,
        /*[in]*/ double y3,
        /*[in]*/ double z3,
        /*[out,retval]*/ struct Dimension * * DimObj ) = 0;
      virtual HRESULT __stdcall raw_AddDistanceBetweenObjectsEX (
        /*[in]*/ IDispatch * Object1,
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double z1,
        /*[in]*/ VARIANT_BOOL keyPoint1,
        /*[in]*/ VARIANT_BOOL bTangent1,
        /*[in]*/ IDispatch * Object2,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ double z2,
        /*[in]*/ VARIANT_BOOL keyPoint2,
        /*[in]*/ VARIANT_BOOL bTangent2,
        /*[out,retval]*/ struct Dimension * * DimObj ) = 0;
      virtual HRESULT __stdcall get_DimInitData (
        /*[out,retval]*/ struct DimInitData * * DimInitData ) = 0;
      virtual HRESULT __stdcall raw_AddDimension (
        /*[in]*/ struct DimInitData * DimInitData,
        /*[out,retval]*/ struct Dimension * * DimObj ) = 0;
};

struct __declspec(uuid("91245770-1f18-44bf-84a4-d4999e9d4712"))
_IDimInitDataAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    HRESULT SetType (
        enum DimTypeConstants DimensionType );
    HRESULT SetAxisMode (
        enum DimAxisModeConstants AxisMode );
    HRESULT SetChamferAxisMode (
        enum DimChamferModeConstants chamferAxisMode );
    HRESULT SetNumberOfParents (
        int numberOfParents );
    HRESULT SetParentByIndex (
        int Index,
        IDispatch * Object,
        VARIANT_BOOL IsKeyPoint,
        VARIANT_BOOL IsIntersection,
        VARIANT_BOOL IsTangentPoint,
        VARIANT_BOOL UseVirtualVertex,
        double x,
        double y,
        double z );
    HRESULT ClearParents ( );
    HRESULT ClearCreationData ( );
    HRESULT SetAxis (
        IDispatch * Axis );
    HRESULT ClearAxis ( );
    HRESULT SetPlane (
        IDispatch * Plane );
    HRESULT ClearPlane ( );
    HRESULT SetAngularCoordinateCounterClockwise (
        VARIANT_BOOL bCounterClockWise );
    HRESULT SetDimPositionMode (
        VARIANT_BOOL bPositionDim );
    HRESULT SetDimPosition (
        double x,
        double y,
        double z );
    HRESULT SetAngularCoordOrigin (
        VARIANT_BOOL bIsOriginDim );
    HRESULT SetTrue3DSketchDimension (
        VARIANT_BOOL bTrueDim );
    HRESULT SetNormalDiameterMode (
        VARIANT_BOOL bNormalDiameterDim );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * App ) = 0;
      virtual HRESULT __stdcall raw_SetType (
        /*[in]*/ enum DimTypeConstants DimensionType ) = 0;
      virtual HRESULT __stdcall raw_SetAxisMode (
        /*[in]*/ enum DimAxisModeConstants AxisMode ) = 0;
      virtual HRESULT __stdcall raw_SetChamferAxisMode (
        /*[in]*/ enum DimChamferModeConstants chamferAxisMode ) = 0;
      virtual HRESULT __stdcall raw_SetNumberOfParents (
        /*[in]*/ int numberOfParents ) = 0;
      virtual HRESULT __stdcall raw_SetParentByIndex (
        /*[in]*/ int Index,
        /*[in]*/ IDispatch * Object,
        /*[in]*/ VARIANT_BOOL IsKeyPoint,
        /*[in]*/ VARIANT_BOOL IsIntersection,
        /*[in]*/ VARIANT_BOOL IsTangentPoint,
        /*[in]*/ VARIANT_BOOL UseVirtualVertex,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_ClearParents ( ) = 0;
      virtual HRESULT __stdcall raw_ClearCreationData ( ) = 0;
      virtual HRESULT __stdcall raw_SetAxis (
        /*[in]*/ IDispatch * Axis ) = 0;
      virtual HRESULT __stdcall raw_ClearAxis ( ) = 0;
      virtual HRESULT __stdcall raw_SetPlane (
        /*[in]*/ IDispatch * Plane ) = 0;
      virtual HRESULT __stdcall raw_ClearPlane ( ) = 0;
      virtual HRESULT __stdcall raw_SetAngularCoordinateCounterClockwise (
        /*[in]*/ VARIANT_BOOL bCounterClockWise ) = 0;
      virtual HRESULT __stdcall raw_SetDimPositionMode (
        /*[in]*/ VARIANT_BOOL bPositionDim ) = 0;
      virtual HRESULT __stdcall raw_SetDimPosition (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_SetAngularCoordOrigin (
        /*[in]*/ VARIANT_BOOL bIsOriginDim ) = 0;
      virtual HRESULT __stdcall raw_SetTrue3DSketchDimension (
        /*[in]*/ VARIANT_BOOL bTrueDim ) = 0;
      virtual HRESULT __stdcall raw_SetNormalDiameterMode (
        /*[in]*/ VARIANT_BOOL bNormalDiameterDim ) = 0;
};

struct __declspec(uuid("3f6e35b0-9044-11ce-93f4-080036373002"))
Leaders : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetPlane,put=PutPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetStyle,put=PutStyle))
    DimensionStylePtr Style;
    __declspec(property(get=GetAnnotInitData))
    AnnotInitDataPtr AnnotInitData;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    LeaderPtr Item (
        const _variant_t & Index );
    void PutPlane (
        IDispatch * _arg1 );
    IDispatchPtr GetPlane ( );
    void PutStyle (
        struct DimensionStyle * _arg1 );
    DimensionStylePtr GetStyle ( );
    LeaderPtr Add (
        double x1,
        double y1,
        double z1,
        double x2,
        double y2,
        double z2 );
    LeaderPtr AddByConnect (
        IDispatch * ConnectObject,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint,
        double x2,
        double y2,
        double z2 );
    LeaderPtr AddByTerminator (
        IDispatch * TerminatorObject,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint1,
        double x2,
        double y2,
        double z2 );
    LeaderPtr AddByTerminatorConnect (
        IDispatch * TerminatorObject,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint1,
        IDispatch * ConnectObject,
        double x2,
        double y2,
        double z2,
        VARIANT_BOOL keyPoint2 );
    HRESULT ClearPlane ( );
    HRESULT ClearStyle ( );
    AnnotInitDataPtr GetAnnotInitData ( );
    LeaderPtr AddLeader (
        struct AnnotInitData * AnnotInitData,
        double x,
        double y,
        double z );
};

struct __declspec(uuid("e2131930-9043-11ce-93f4-080036373002"))
Leader : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStyle))
    DimStylePtr Style;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetVertexCount))
    long VertexCount;
    __declspec(property(get=GetBreakLineDistance,put=PutBreakLineDistance))
    double BreakLineDistance;
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetBreakLine,put=PutBreakLine))
    VARIANT_BOOL BreakLine;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetBreakLineDirection,put=PutBreakLineDirection))
    VARIANT_BOOL BreakLineDirection;
    __declspec(property(get=GetLeader,put=PutLeader))
    VARIANT_BOOL _Leader;
    __declspec(property(get=GetPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetPMIPlane))
    IDispatchPtr PMIPlane;
    __declspec(property(get=GetPMITrackDistance,put=PutPMITrackDistance))
    double PMITrackDistance;
    __declspec(property(get=GetHidePMI,put=PutHidePMI))
    VARIANT_BOOL HidePMI;
    __declspec(property(get=GetVerticalBreakLine,put=PutVerticalBreakLine))
    VARIANT_BOOL VerticalBreakLine;
    __declspec(property(get=GetPMIName,put=PutPMIName))
    _bstr_t PMIName;
    __declspec(property(get=GetIsTerminatorAttachedToEntity))
    VARIANT_BOOL IsTerminatorAttachedToEntity;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    DimStylePtr GetStyle ( );
    HRESULT SetTerminator (
        IDispatch * TerminatorObj,
        double x,
        double y,
        double z,
        VARIANT_BOOL keyPoint );
    HRESULT GetTerminator (
        IDispatch * * TerminatorObj,
        double * x,
        double * y,
        double * z,
        VARIANT_BOOL * keyPoint );
    HRESULT SetFreeSpacePoint (
        double x,
        double y,
        double z );
    HRESULT GetFreeSpacePoint (
        double * x,
        double * y,
        double * z );
    HRESULT SetConnect (
        IDispatch * ConnectObject,
        double x,
        double y,
        double z,
        VARIANT_BOOL keyPoint );
    HRESULT GetConnect (
        IDispatch * * ConnectObj,
        double * x,
        double * y,
        double * z,
        VARIANT_BOOL * keyPoint );
    HRESULT SetConnectPoint (
        double x,
        double y,
        double z );
    HRESULT GetConnectPoint (
        double * x,
        double * y,
        double * z );
    IDispatchPtr GetPlane ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    double GetBreakLineDistance ( );
    void PutBreakLineDistance (
        double _arg1 );
    VARIANT_BOOL GetBreakLine ( );
    void PutBreakLine (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetBreakLineDirection ( );
    void PutBreakLineDirection (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetLeader ( );
    void PutLeader (
        VARIANT_BOOL _arg1 );
    long GetVertexCount ( );
    HRESULT GetVertices (
        long * VertexCount,
        SAFEARRAY * * Vertices );
    HRESULT SetVertices (
        long VertexCount,
        SAFEARRAY * * Vertices );
    HRESULT GetVertex (
        long Index,
        double * x,
        double * y,
        double * z );
    HRESULT SetVertex (
        long Index,
        double x,
        double y,
        double z );
    HRESULT InsertVertex (
        long Index,
        double x,
        double y,
        double z );
    HRESULT AddVertex (
        double x,
        double y,
        double z );
    HRESULT RemoveVertex (
        long Index );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    void PutLayer (
        _bstr_t _arg1 );
    _bstr_t GetLayer ( );
    IDispatchPtr GetPMIPlane ( );
    double GetPMITrackDistance ( );
    void PutPMITrackDistance (
        double _arg1 );
    void PutHidePMI (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHidePMI ( );
    void PutVerticalBreakLine (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetVerticalBreakLine ( );
    DisplayDataPtr GetDisplayData ( );
    HRESULT PromoteToCurrentVersion ( );
    void PutPMIName (
        _bstr_t _arg1 );
    _bstr_t GetPMIName ( );
    HRESULT TransformToModelCoordinates (
        double InputX,
        double InputY,
        double InputZ,
        double * ModelX,
        double * ModelY,
        double * ModelZ );
    VARIANT_BOOL GetIsTerminatorAttachedToEntity ( );
    HRESULT GetReferencedGeometry (
        SAFEARRAY * * ReferencedGeometries );
    HRESULT SetReferencedGeometry (
        SAFEARRAY * * ReferencedGeometries );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
};

struct __declspec(uuid("c4425ba0-9043-11ce-93f4-080036373002"))
_ILeaderAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetStyle))
    DimStylePtr Style;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetVertexCount))
    long VertexCount;
    __declspec(property(get=GetBreakLineDistance,put=PutBreakLineDistance))
    double BreakLineDistance;
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[][];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetBreakLine,put=PutBreakLine))
    VARIANT_BOOL BreakLine;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetBreakLineDirection,put=PutBreakLineDirection))
    VARIANT_BOOL BreakLineDirection;
    __declspec(property(get=GetLeader,put=PutLeader))
    VARIANT_BOOL Leader;
    __declspec(property(get=GetPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetPMIPlane))
    IDispatchPtr PMIPlane;
    __declspec(property(get=GetPMITrackDistance,put=PutPMITrackDistance))
    double PMITrackDistance;
    __declspec(property(get=GetHidePMI,put=PutHidePMI))
    VARIANT_BOOL HidePMI;
    __declspec(property(get=GetVerticalBreakLine,put=PutVerticalBreakLine))
    VARIANT_BOOL VerticalBreakLine;
    __declspec(property(get=GetPMIName,put=PutPMIName))
    _bstr_t PMIName;
    __declspec(property(get=GetIsTerminatorAttachedToEntity))
    VARIANT_BOOL IsTerminatorAttachedToEntity;

    //
    // Wrapper methods for error-handling
    //

    DimStylePtr GetStyle ( );
    HRESULT SetTerminator (
        IDispatch * TerminatorObj,
        double x,
        double y,
        double z,
        VARIANT_BOOL keyPoint );
    HRESULT GetTerminator (
        IDispatch * * TerminatorObj,
        double * x,
        double * y,
        double * z,
        VARIANT_BOOL * keyPoint );
    HRESULT SetFreeSpacePoint (
        double x,
        double y,
        double z );
    HRESULT GetFreeSpacePoint (
        double * x,
        double * y,
        double * z );
    HRESULT SetConnect (
        IDispatch * ConnectObject,
        double x,
        double y,
        double z,
        VARIANT_BOOL keyPoint );
    HRESULT GetConnect (
        IDispatch * * ConnectObj,
        double * x,
        double * y,
        double * z,
        VARIANT_BOOL * keyPoint );
    HRESULT SetConnectPoint (
        double x,
        double y,
        double z );
    HRESULT GetConnectPoint (
        double * x,
        double * y,
        double * z );
    IDispatchPtr GetPlane ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse,
        long Lcid = 0 );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    double GetBreakLineDistance ( );
    void PutBreakLineDistance (
        double Distance );
    VARIANT_BOOL GetBreakLine ( );
    void PutBreakLine (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetBreakLineDirection ( );
    void PutBreakLineDirection (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetLeader ( );
    void PutLeader (
        VARIANT_BOOL Flag );
    long GetVertexCount ( );
    HRESULT GetVertices (
        long * VertexCount,
        SAFEARRAY * * Vertices );
    HRESULT SetVertices (
        long VertexCount,
        SAFEARRAY * * Vertices );
    HRESULT GetVertex (
        long Index,
        double * x,
        double * y,
        double * z );
    HRESULT SetVertex (
        long Index,
        double x,
        double y,
        double z );
    HRESULT InsertVertex (
        long Index,
        double x,
        double y,
        double z );
    HRESULT AddVertex (
        double x,
        double y,
        double z );
    HRESULT RemoveVertex (
        long Index );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    void PutLayer (
        _bstr_t Layer );
    _bstr_t GetLayer ( );
    IDispatchPtr GetPMIPlane ( );
    double GetPMITrackDistance ( );
    void PutPMITrackDistance (
        double pdPMITrackDistance );
    void PutHidePMI (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetHidePMI ( );
    void PutVerticalBreakLine (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetVerticalBreakLine ( );
    DisplayDataPtr GetDisplayData ( );
    HRESULT PromoteToCurrentVersion ( );
    void PutPMIName (
        _bstr_t Text );
    _bstr_t GetPMIName ( );
    HRESULT TransformToModelCoordinates (
        double InputX,
        double InputY,
        double InputZ,
        double * ModelX,
        double * ModelY,
        double * ModelZ );
    VARIANT_BOOL GetIsTerminatorAttachedToEntity ( );
    HRESULT GetReferencedGeometry (
        SAFEARRAY * * ReferencedGeometries );
    HRESULT SetReferencedGeometry (
        SAFEARRAY * * ReferencedGeometries );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct DimStyle * * Style ) = 0;
      virtual HRESULT __stdcall raw_SetTerminator (
        /*[in]*/ IDispatch * TerminatorObj,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z,
        /*[in]*/ VARIANT_BOOL keyPoint ) = 0;
      virtual HRESULT __stdcall raw_GetTerminator (
        /*[out]*/ IDispatch * * TerminatorObj,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ VARIANT_BOOL * keyPoint ) = 0;
      virtual HRESULT __stdcall raw_SetFreeSpacePoint (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_GetFreeSpacePoint (
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z ) = 0;
      virtual HRESULT __stdcall raw_SetConnect (
        /*[in]*/ IDispatch * ConnectObject,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z,
        /*[in]*/ VARIANT_BOOL keyPoint ) = 0;
      virtual HRESULT __stdcall raw_GetConnect (
        /*[out]*/ IDispatch * * ConnectObj,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ VARIANT_BOOL * keyPoint ) = 0;
      virtual HRESULT __stdcall raw_SetConnectPoint (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_GetConnectPoint (
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z ) = 0;
      virtual HRESULT __stdcall get_Plane (
        /*[out,retval]*/ IDispatch * * Plane ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[in]*/ VARIANT Recurse,
        /*[in,lcid]*/ long Lcid,
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * Type ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * ZOrder ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[in]*/ VARIANT Recurse,
        /*[out,retval]*/ BSTR * Key ) = 0;
      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ IDispatch * * Document ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ double XFrom,
        /*[in]*/ double YFrom,
        /*[in]*/ double XTo,
        /*[in]*/ double YTo ) = 0;
      virtual HRESULT __stdcall raw_Scale (
        /*[in]*/ double Factor ) = 0;
      virtual HRESULT __stdcall raw_Rotate (
        /*[in]*/ double Angle,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[out]*/ double * XMinimum,
        /*[out]*/ double * YMinimum,
        /*[out]*/ double * XMaximum,
        /*[out]*/ double * YMaximum ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ VARIANT XDistance,
        /*[in]*/ VARIANT YDistance,
        /*[out,retval]*/ IDispatch * * NewObject ) = 0;
      virtual HRESULT __stdcall raw_Mirror (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ VARIANT BooleanCopyFlag,
        /*[out,retval]*/ IDispatch * * Object ) = 0;
      virtual HRESULT __stdcall raw_BringToFront ( ) = 0;
      virtual HRESULT __stdcall raw_BringForward ( ) = 0;
      virtual HRESULT __stdcall raw_SendToBack ( ) = 0;
      virtual HRESULT __stdcall raw_SendBackward ( ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall get_BreakLineDistance (
        /*[out,retval]*/ double * Distance ) = 0;
      virtual HRESULT __stdcall put_BreakLineDistance (
        /*[in]*/ double Distance ) = 0;
      virtual HRESULT __stdcall get_BreakLine (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_BreakLine (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_BreakLineDirection (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_BreakLineDirection (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_Leader (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_Leader (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_VertexCount (
        /*[out,retval]*/ long * VertexCount ) = 0;
      virtual HRESULT __stdcall raw_GetVertices (
        /*[out]*/ long * VertexCount,
        /*[in,out]*/ SAFEARRAY * * Vertices ) = 0;
      virtual HRESULT __stdcall raw_SetVertices (
        /*[in]*/ long VertexCount,
        /*[in]*/ SAFEARRAY * * Vertices ) = 0;
      virtual HRESULT __stdcall raw_GetVertex (
        /*[in]*/ long Index,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[in]*/ double * z ) = 0;
      virtual HRESULT __stdcall raw_SetVertex (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_InsertVertex (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_AddVertex (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_RemoveVertex (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall get_KeyPointCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_GetKeyPoint (
        /*[in]*/ long Index,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ enum TGFramework::KeyPointType * KeypointType,
        /*[out]*/ long * HandleType ) = 0;
      virtual HRESULT __stdcall raw_SetKeyPoint (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall put_Layer (
        /*[in]*/ BSTR Layer ) = 0;
      virtual HRESULT __stdcall get_Layer (
        /*[out,retval]*/ BSTR * Layer ) = 0;
      virtual HRESULT __stdcall get_PMIPlane (
        /*[out,retval]*/ IDispatch * * pPMIPlane ) = 0;
      virtual HRESULT __stdcall get_PMITrackDistance (
        /*[out,retval]*/ double * pdPMITrackDistance ) = 0;
      virtual HRESULT __stdcall put_PMITrackDistance (
        /*[in]*/ double pdPMITrackDistance ) = 0;
      virtual HRESULT __stdcall put_HidePMI (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_HidePMI (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_VerticalBreakLine (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_VerticalBreakLine (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_GetDisplayData (
        /*[out,retval]*/ struct DisplayData * * pDisplayData ) = 0;
      virtual HRESULT __stdcall raw_PromoteToCurrentVersion ( ) = 0;
      virtual HRESULT __stdcall put_PMIName (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_PMIName (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall raw_TransformToModelCoordinates (
        /*[in]*/ double InputX,
        /*[in]*/ double InputY,
        /*[in]*/ double InputZ,
        /*[out]*/ double * ModelX,
        /*[out]*/ double * ModelY,
        /*[out]*/ double * ModelZ ) = 0;
      virtual HRESULT __stdcall get_IsTerminatorAttachedToEntity (
        /*[out,retval]*/ VARIANT_BOOL * bIsAttached ) = 0;
      virtual HRESULT __stdcall raw_GetReferencedGeometry (
        /*[out]*/ SAFEARRAY * * ReferencedGeometries ) = 0;
      virtual HRESULT __stdcall raw_SetReferencedGeometry (
        /*[in]*/ SAFEARRAY * * ReferencedGeometries ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
};

struct __declspec(uuid("d943a5eb-d2ed-4ff8-8325-f7394eac4831"))
AnnotInitData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    HRESULT SetTerminatorElement (
        IDispatch * Object,
        VARIANT_BOOL IsKeyPoint,
        VARIANT_BOOL UseVirtualEdge,
        double x,
        double y,
        double z );
    HRESULT ClearTerminatorElement ( );
    HRESULT SetConnectElement (
        IDispatch * Object,
        VARIANT_BOOL IsKeyPoint,
        VARIANT_BOOL UseVirtualEdge,
        double x,
        double y,
        double z );
    HRESULT ClearConnectElement ( );
    HRESULT ClearCreationData ( );
    HRESULT SetPlane (
        IDispatch * Plane );
    HRESULT ClearPlane ( );
    HRESULT SetTerminatorElementEx (
        IDispatch * Object,
        VARIANT_BOOL IsKeyPoint,
        double x,
        double y,
        double z );
    HRESULT SetConnectElementEx (
        IDispatch * Object,
        VARIANT_BOOL IsKeyPoint,
        double x,
        double y,
        double z );
    HRESULT SetFirstElement (
        IDispatch * Object,
        VARIANT_BOOL IsKeyPoint,
        double x,
        double y,
        double z );
    HRESULT ClearFirstElement ( );
    HRESULT SetSecondElement (
        IDispatch * Object,
        VARIANT_BOOL IsKeyPoint,
        double x,
        double y,
        double z );
    HRESULT ClearSecondElement ( );
    HRESULT SetThirdElement (
        IDispatch * Object,
        VARIANT_BOOL IsKeyPoint,
        double x,
        double y,
        double z );
    HRESULT ClearThirdElement ( );
};

struct __declspec(uuid("299e9e90-9044-11ce-93f4-080036373002"))
_ILeadersAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetPlane,put=PutPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetStyle,put=PutStyle))
    DimensionStylePtr Style;
    __declspec(property(get=GetAnnotInitData))
    AnnotInitDataPtr AnnotInitData;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    LeaderPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    void PutPlane (
        IDispatch * Plane );
    IDispatchPtr GetPlane ( );
    void PutStyle (
        struct DimensionStyle * Style );
    DimensionStylePtr GetStyle ( );
    LeaderPtr Add (
        double x1,
        double y1,
        double z1,
        double x2,
        double y2,
        double z2 );
    LeaderPtr AddByConnect (
        IDispatch * ConnectObject,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint,
        double x2,
        double y2,
        double z2 );
    LeaderPtr AddByTerminator (
        IDispatch * TerminatorObject,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint1,
        double x2,
        double y2,
        double z2 );
    LeaderPtr AddByTerminatorConnect (
        IDispatch * TerminatorObject,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint1,
        IDispatch * ConnectObject,
        double x2,
        double y2,
        double z2,
        VARIANT_BOOL keyPoint2 );
    HRESULT ClearPlane ( );
    HRESULT ClearStyle ( );
    AnnotInitDataPtr GetAnnotInitData ( );
    LeaderPtr AddLeader (
        struct AnnotInitData * AnnotInitData,
        double x,
        double y,
        double z );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * App ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Leader * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Enum ) = 0;
      virtual HRESULT __stdcall put_Plane (
        /*[in]*/ IDispatch * Plane ) = 0;
      virtual HRESULT __stdcall get_Plane (
        /*[out,retval]*/ IDispatch * * Plane ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ struct DimensionStyle * Style ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct DimensionStyle * * Style ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double z1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ double z2,
        /*[out,retval]*/ struct Leader * * Obj ) = 0;
      virtual HRESULT __stdcall raw_AddByConnect (
        /*[in]*/ IDispatch * ConnectObject,
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double z1,
        /*[in]*/ VARIANT_BOOL keyPoint,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ double z2,
        /*[out,retval]*/ struct Leader * * Obj ) = 0;
      virtual HRESULT __stdcall raw_AddByTerminator (
        /*[in]*/ IDispatch * TerminatorObject,
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double z1,
        /*[in]*/ VARIANT_BOOL keyPoint1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ double z2,
        /*[out,retval]*/ struct Leader * * Obj ) = 0;
      virtual HRESULT __stdcall raw_AddByTerminatorConnect (
        /*[in]*/ IDispatch * TerminatorObject,
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double z1,
        /*[in]*/ VARIANT_BOOL keyPoint1,
        /*[in]*/ IDispatch * ConnectObject,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ double z2,
        /*[in]*/ VARIANT_BOOL keyPoint2,
        /*[out,retval]*/ struct Leader * * Obj ) = 0;
      virtual HRESULT __stdcall raw_ClearPlane ( ) = 0;
      virtual HRESULT __stdcall raw_ClearStyle ( ) = 0;
      virtual HRESULT __stdcall get_AnnotInitData (
        /*[out,retval]*/ struct AnnotInitData * * AnnotInitData ) = 0;
      virtual HRESULT __stdcall raw_AddLeader (
        /*[in]*/ struct AnnotInitData * AnnotInitData,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z,
        /*[out,retval]*/ struct Leader * * Obj ) = 0;
};

struct __declspec(uuid("7cf1c8b0-abe3-4a74-8a3e-d76912f45633"))
_IAnnotInitDataAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    HRESULT SetTerminatorElement (
        IDispatch * Object,
        VARIANT_BOOL IsKeyPoint,
        VARIANT_BOOL UseVirtualEdge,
        double x,
        double y,
        double z );
    HRESULT ClearTerminatorElement ( );
    HRESULT SetConnectElement (
        IDispatch * Object,
        VARIANT_BOOL IsKeyPoint,
        VARIANT_BOOL UseVirtualEdge,
        double x,
        double y,
        double z );
    HRESULT ClearConnectElement ( );
    HRESULT ClearCreationData ( );
    HRESULT SetPlane (
        IDispatch * Plane );
    HRESULT ClearPlane ( );
    HRESULT SetTerminatorElementEx (
        IDispatch * Object,
        VARIANT_BOOL IsKeyPoint,
        double x,
        double y,
        double z );
    HRESULT SetConnectElementEx (
        IDispatch * Object,
        VARIANT_BOOL IsKeyPoint,
        double x,
        double y,
        double z );
    HRESULT SetFirstElement (
        IDispatch * Object,
        VARIANT_BOOL IsKeyPoint,
        double x,
        double y,
        double z );
    HRESULT ClearFirstElement ( );
    HRESULT SetSecondElement (
        IDispatch * Object,
        VARIANT_BOOL IsKeyPoint,
        double x,
        double y,
        double z );
    HRESULT ClearSecondElement ( );
    HRESULT SetThirdElement (
        IDispatch * Object,
        VARIANT_BOOL IsKeyPoint,
        double x,
        double y,
        double z );
    HRESULT ClearThirdElement ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * App ) = 0;
      virtual HRESULT __stdcall raw_SetTerminatorElement (
        /*[in]*/ IDispatch * Object,
        /*[in]*/ VARIANT_BOOL IsKeyPoint,
        /*[in]*/ VARIANT_BOOL UseVirtualEdge,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_ClearTerminatorElement ( ) = 0;
      virtual HRESULT __stdcall raw_SetConnectElement (
        /*[in]*/ IDispatch * Object,
        /*[in]*/ VARIANT_BOOL IsKeyPoint,
        /*[in]*/ VARIANT_BOOL UseVirtualEdge,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_ClearConnectElement ( ) = 0;
      virtual HRESULT __stdcall raw_ClearCreationData ( ) = 0;
      virtual HRESULT __stdcall raw_SetPlane (
        /*[in]*/ IDispatch * Plane ) = 0;
      virtual HRESULT __stdcall raw_ClearPlane ( ) = 0;
      virtual HRESULT __stdcall raw_SetTerminatorElementEx (
        /*[in]*/ IDispatch * Object,
        /*[in]*/ VARIANT_BOOL IsKeyPoint,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_SetConnectElementEx (
        /*[in]*/ IDispatch * Object,
        /*[in]*/ VARIANT_BOOL IsKeyPoint,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_SetFirstElement (
        /*[in]*/ IDispatch * Object,
        /*[in]*/ VARIANT_BOOL IsKeyPoint,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_ClearFirstElement ( ) = 0;
      virtual HRESULT __stdcall raw_SetSecondElement (
        /*[in]*/ IDispatch * Object,
        /*[in]*/ VARIANT_BOOL IsKeyPoint,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_ClearSecondElement ( ) = 0;
      virtual HRESULT __stdcall raw_SetThirdElement (
        /*[in]*/ IDispatch * Object,
        /*[in]*/ VARIANT_BOOL IsKeyPoint,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_ClearThirdElement ( ) = 0;
};

struct __declspec(uuid("4a603c18-e750-11ce-bb40-080036776c02"))
Balloons : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetPlane,put=PutPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetStyle,put=PutStyle))
    DimensionStylePtr Style;
    __declspec(property(get=GetAnnotInitData))
    AnnotInitDataPtr AnnotInitData;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    BalloonPtr Item (
        const _variant_t & Index );
    void PutPlane (
        IDispatch * _arg1 );
    IDispatchPtr GetPlane ( );
    void PutStyle (
        struct DimensionStyle * _arg1 );
    DimensionStylePtr GetStyle ( );
    BalloonPtr Add (
        double x1,
        double y1,
        double z1 );
    BalloonPtr AddByTerminator (
        IDispatch * TerminatorObject,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint1 );
    HRESULT ClearPlane ( );
    HRESULT ClearStyle ( );
    AnnotInitDataPtr GetAnnotInitData ( );
    BalloonPtr AddBalloon (
        struct AnnotInitData * AnnotInitData );
};

struct __declspec(uuid("4a603c12-e750-11ce-bb40-080036776c02"))
Balloon : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStyle))
    DimStylePtr Style;
    __declspec(property(get=GetBalloonType,put=PutBalloonType))
    enum DimBalloonTypeConstants BalloonType;
    __declspec(property(get=GetBalloonSides,put=PutBalloonSides))
    int BalloonSides;
    __declspec(property(get=GetBalloonDirection,put=PutBalloonDirection))
    enum DimBalloonDirTypeConstants BalloonDirection;
    __declspec(property(get=GetBalloonSize,put=PutBalloonSize))
    double BalloonSize;
    __declspec(property(get=GetBalloonText,put=PutBalloonText))
    _bstr_t BalloonText;
    __declspec(property(get=GetDisplayByItemNumber,put=PutDisplayByItemNumber))
    VARIANT_BOOL DisplayByItemNumber;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetCallout,put=PutCallout))
    long Callout;
    __declspec(property(get=GetBalloonTextLower,put=PutBalloonTextLower))
    _bstr_t BalloonTextLower;
    __declspec(property(get=GetBalloonTextPrefix,put=PutBalloonTextPrefix))
    _bstr_t BalloonTextPrefix;
    __declspec(property(get=GetBalloonTextSuffix,put=PutBalloonTextSuffix))
    _bstr_t BalloonTextSuffix;
    __declspec(property(get=GetLinkToPartsList,put=PutLinkToPartsList))
    VARIANT_BOOL LinkToPartsList;
    __declspec(property(get=GetDisplayItemCount,put=PutDisplayItemCount))
    VARIANT_BOOL DisplayItemCount;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetBalloonDisplayedText))
    _bstr_t BalloonDisplayedText;
    __declspec(property(get=GetBalloonDisplayedTextLower))
    _bstr_t BalloonDisplayedTextLower;
    __declspec(property(get=GetBalloonDisplayedTextPrefix))
    _bstr_t BalloonDisplayedTextPrefix;
    __declspec(property(get=GetBalloonDisplayedTextSuffix))
    _bstr_t BalloonDisplayedTextSuffix;
    __declspec(property(get=GetPMIPlane))
    IDispatchPtr PMIPlane;
    __declspec(property(get=GetPMITrackDistance,put=PutPMITrackDistance))
    double PMITrackDistance;
    __declspec(property(get=GetCalloutAllAround,put=PutCalloutAllAround))
    VARIANT_BOOL CalloutAllAround;
    __declspec(property(get=GetHidePMI,put=PutHidePMI))
    VARIANT_BOOL HidePMI;
    __declspec(property(get=GetCalloutAllOver,put=PutCalloutAllOver))
    VARIANT_BOOL CalloutAllOver;
    __declspec(property(get=GetCalloutBorder,put=PutCalloutBorder))
    VARIANT_BOOL CalloutBorder;
    __declspec(property(get=GetCalloutBorderHorizontalGap,put=PutCalloutBorderHorizontalGap))
    double CalloutBorderHorizontalGap;
    __declspec(property(get=GetCalloutBorderVerticalGap,put=PutCalloutBorderVerticalGap))
    double CalloutBorderVerticalGap;
    __declspec(property(get=GetCalloutTextWidth,put=PutCalloutTextWidth))
    double CalloutTextWidth;
    __declspec(property(get=GetCalloutTextAspectRatio,put=PutCalloutTextAspectRatio))
    double CalloutTextAspectRatio;
    __declspec(property(get=GetCalloutTextWidthMode,put=PutCalloutTextWidthMode))
    enum DimCalloutTextWidthModeConstants CalloutTextWidthMode;
    __declspec(property(get=GetCalloutHorizontalAlignment,put=PutCalloutHorizontalAlignment))
    enum TextJustificationConstants CalloutHorizontalAlignment;
    __declspec(property(get=GetCalloutLeaderTextConnectionPoint,put=PutCalloutLeaderTextConnectionPoint))
    enum DimCalloutLeaderTextConnectionPointConstants CalloutLeaderTextConnectionPoint;
    __declspec(property(get=GetBalloonLeaderTextConnectionPoint,put=PutBalloonLeaderTextConnectionPoint))
    int BalloonLeaderTextConnectionPoint;
    __declspec(property(get=GetCalloutBalloonBreaklineDirection,put=PutCalloutBalloonBreaklineDirection))
    enum DimCalloutBalloonBreaklineDirectionConstants CalloutBalloonBreaklineDirection;
    __declspec(property(get=GetFSBalloonOverridePrefixText,put=PutFSBalloonOverridePrefixText))
    _bstr_t FSBalloonOverridePrefixText;
    __declspec(property(get=GetFSBalloonOverrideSuffixText,put=PutFSBalloonOverrideSuffixText))
    _bstr_t FSBalloonOverrideSuffixText;
    __declspec(property(get=GetCalloutParallel,put=PutCalloutParallel))
    VARIANT_BOOL CalloutParallel;
    __declspec(property(get=GetPMIName,put=PutPMIName))
    _bstr_t PMIName;
    __declspec(property(get=GetIsTerminatorAttachedToEntity))
    VARIANT_BOOL IsTerminatorAttachedToEntity;
    __declspec(property(get=GetLinkToFOAPartsList,put=PutLinkToFOAPartsList))
    VARIANT_BOOL LinkToFOAPartsList;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetVertexCount))
    long VertexCount;
    __declspec(property(get=GetBreakLineDistance,put=PutBreakLineDistance))
    double BreakLineDistance;
    __declspec(property(get=GetBreakLine,put=PutBreakLine))
    VARIANT_BOOL BreakLine;
    __declspec(property(get=GetBreakLineDirection,put=PutBreakLineDirection))
    VARIANT_BOOL BreakLineDirection;
    __declspec(property(get=GetLeader,put=PutLeader))
    VARIANT_BOOL Leader;
    __declspec(property(get=GetRotationAngle,put=PutRotationAngle))
    double RotationAngle;
    __declspec(property(get=GetTextScale,put=PutTextScale))
    double TextScale;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    DimStylePtr GetStyle ( );
    void PutBalloonType (
        enum DimBalloonTypeConstants _arg1 );
    enum DimBalloonTypeConstants GetBalloonType ( );
    void PutBalloonSides (
        int _arg1 );
    int GetBalloonSides ( );
    void PutBalloonDirection (
        enum DimBalloonDirTypeConstants _arg1 );
    enum DimBalloonDirTypeConstants GetBalloonDirection ( );
    void PutBalloonSize (
        double _arg1 );
    double GetBalloonSize ( );
    void PutBalloonText (
        _bstr_t _arg1 );
    _bstr_t GetBalloonText ( );
    void PutDisplayByItemNumber (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayByItemNumber ( );
    HRESULT SetTerminator (
        IDispatch * TerminatorObj,
        double x,
        double y,
        double z,
        VARIANT_BOOL keyPoint );
    HRESULT GetTerminator (
        IDispatch * * TerminatorObj,
        double * x,
        double * y,
        double * z,
        VARIANT_BOOL * keyPoint );
    HRESULT SetFreeSpacePoint (
        double x,
        double y,
        double z );
    HRESULT GetFreeSpacePoint (
        double * x,
        double * y,
        double * z );
    IDispatchPtr GetPlane ( );
    HRESULT SetItemNumber (
        long ulItemNumber );
    HRESULT GetItemNumber (
        long * pulItemNumber );
    void PutCallout (
        long _arg1 );
    long GetCallout ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    double GetBreakLineDistance ( );
    void PutBreakLineDistance (
        double _arg1 );
    VARIANT_BOOL GetBreakLine ( );
    void PutBreakLine (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetBreakLineDirection ( );
    void PutBreakLineDirection (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetLeader ( );
    void PutLeader (
        VARIANT_BOOL _arg1 );
    long GetVertexCount ( );
    HRESULT GetVertices (
        long * VertexCount,
        SAFEARRAY * * Vertices );
    HRESULT SetVertices (
        long VertexCount,
        SAFEARRAY * * Vertices );
    HRESULT GetVertex (
        long Index,
        double * x,
        double * y,
        double * z );
    HRESULT SetVertex (
        long Index,
        double x,
        double y,
        double z );
    HRESULT InsertVertex (
        long Index,
        double x,
        double y,
        double z );
    HRESULT AddVertex (
        double x,
        double y,
        double z );
    HRESULT RemoveVertex (
        long Index );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    void PutBalloonTextLower (
        _bstr_t _arg1 );
    _bstr_t GetBalloonTextLower ( );
    void PutBalloonTextPrefix (
        _bstr_t _arg1 );
    _bstr_t GetBalloonTextPrefix ( );
    void PutBalloonTextSuffix (
        _bstr_t _arg1 );
    _bstr_t GetBalloonTextSuffix ( );
    void PutLinkToPartsList (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetLinkToPartsList ( );
    void PutDisplayItemCount (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDisplayItemCount ( );
    double GetRotationAngle ( );
    void PutRotationAngle (
        double _arg1 );
    double GetTextScale ( );
    void PutTextScale (
        double _arg1 );
    void PutLayer (
        _bstr_t _arg1 );
    _bstr_t GetLayer ( );
    _bstr_t GetBalloonDisplayedText ( );
    _bstr_t GetBalloonDisplayedTextLower ( );
    _bstr_t GetBalloonDisplayedTextPrefix ( );
    _bstr_t GetBalloonDisplayedTextSuffix ( );
    IDispatchPtr GetPMIPlane ( );
    double GetPMITrackDistance ( );
    void PutPMITrackDistance (
        double _arg1 );
    void PutCalloutAllAround (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetCalloutAllAround ( );
    void PutHidePMI (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHidePMI ( );
    HRESULT AddFSStackBalloon (
        enum DimBalloonDirTypeConstants Direction );
    HRESULT RemoveFSStackBalloon ( );
    HRESULT BalloonHorizontalAlignment (
        enum TextHorizontalAlignmentConstants Alignment );
    void PutCalloutAllOver (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetCalloutAllOver ( );
    void PutCalloutBorder (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetCalloutBorder ( );
    void PutCalloutBorderHorizontalGap (
        double _arg1 );
    double GetCalloutBorderHorizontalGap ( );
    void PutCalloutBorderVerticalGap (
        double _arg1 );
    double GetCalloutBorderVerticalGap ( );
    void PutCalloutTextWidth (
        double _arg1 );
    double GetCalloutTextWidth ( );
    void PutCalloutTextAspectRatio (
        double _arg1 );
    double GetCalloutTextAspectRatio ( );
    void PutCalloutTextWidthMode (
        enum DimCalloutTextWidthModeConstants _arg1 );
    enum DimCalloutTextWidthModeConstants GetCalloutTextWidthMode ( );
    void PutCalloutHorizontalAlignment (
        enum TextJustificationConstants _arg1 );
    enum TextJustificationConstants GetCalloutHorizontalAlignment ( );
    DisplayDataPtr GetDisplayData ( );
    void PutCalloutLeaderTextConnectionPoint (
        enum DimCalloutLeaderTextConnectionPointConstants _arg1 );
    enum DimCalloutLeaderTextConnectionPointConstants GetCalloutLeaderTextConnectionPoint ( );
    void PutBalloonLeaderTextConnectionPoint (
        int _arg1 );
    int GetBalloonLeaderTextConnectionPoint ( );
    void PutCalloutBalloonBreaklineDirection (
        enum DimCalloutBalloonBreaklineDirectionConstants _arg1 );
    enum DimCalloutBalloonBreaklineDirectionConstants GetCalloutBalloonBreaklineDirection ( );
    void PutFSBalloonOverridePrefixText (
        _bstr_t _arg1 );
    _bstr_t GetFSBalloonOverridePrefixText ( );
    void PutFSBalloonOverrideSuffixText (
        _bstr_t _arg1 );
    _bstr_t GetFSBalloonOverrideSuffixText ( );
    HRESULT FSBalloonClearOverrides ( );
    HRESULT PromoteToCurrentVersion ( );
    HRESULT SetAlignmentShape (
        IDispatch * AlignmentShapeObj,
        double x,
        double y );
    HRESULT GetAlignmentShape (
        IDispatch * * AlignmentShapeObj,
        double * x,
        double * y );
    void PutCalloutParallel (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetCalloutParallel ( );
    void PutPMIName (
        _bstr_t _arg1 );
    _bstr_t GetPMIName ( );
    HRESULT TransformToModelCoordinates (
        double InputX,
        double InputY,
        double InputZ,
        double * ModelX,
        double * ModelY,
        double * ModelZ );
    VARIANT_BOOL GetIsTerminatorAttachedToEntity ( );
    HRESULT GetReferencedGeometry (
        SAFEARRAY * * ReferencedGeometries );
    HRESULT SetReferencedGeometry (
        SAFEARRAY * * ReferencedGeometries );
    void PutLinkToFOAPartsList (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetLinkToFOAPartsList ( );
    HRESULT GetReferencedObjectInfo (
        SAFEARRAY * * ReferencedObjects,
        SAFEARRAY * * ReferencedObjectTypes );
    enum TGBalloonReattachStatusConstants TGReattachToDrawingView (
        IDispatch * DrawingView );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
};

struct __declspec(uuid("4a603c16-e750-11ce-bb40-080036776c02"))
_IBalloonsAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetPlane,put=PutPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetStyle,put=PutStyle))
    DimensionStylePtr Style;
    __declspec(property(get=GetAnnotInitData))
    AnnotInitDataPtr AnnotInitData;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    BalloonPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    void PutPlane (
        IDispatch * Plane );
    IDispatchPtr GetPlane ( );
    void PutStyle (
        struct DimensionStyle * Style );
    DimensionStylePtr GetStyle ( );
    BalloonPtr Add (
        double x1,
        double y1,
        double z1 );
    BalloonPtr AddByTerminator (
        IDispatch * TerminatorObject,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint1 );
    HRESULT ClearPlane ( );
    HRESULT ClearStyle ( );
    AnnotInitDataPtr GetAnnotInitData ( );
    BalloonPtr AddBalloon (
        struct AnnotInitData * AnnotInitData );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * App ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Balloon * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Enum ) = 0;
      virtual HRESULT __stdcall put_Plane (
        /*[in]*/ IDispatch * Plane ) = 0;
      virtual HRESULT __stdcall get_Plane (
        /*[out,retval]*/ IDispatch * * Plane ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ struct DimensionStyle * Style ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct DimensionStyle * * Style ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double z1,
        /*[out,retval]*/ struct Balloon * * Obj ) = 0;
      virtual HRESULT __stdcall raw_AddByTerminator (
        /*[in]*/ IDispatch * TerminatorObject,
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double z1,
        /*[in]*/ VARIANT_BOOL keyPoint1,
        /*[out,retval]*/ struct Balloon * * Obj ) = 0;
      virtual HRESULT __stdcall raw_ClearPlane ( ) = 0;
      virtual HRESULT __stdcall raw_ClearStyle ( ) = 0;
      virtual HRESULT __stdcall get_AnnotInitData (
        /*[out,retval]*/ struct AnnotInitData * * AnnotInitData ) = 0;
      virtual HRESULT __stdcall raw_AddBalloon (
        /*[in]*/ struct AnnotInitData * AnnotInitData,
        /*[out,retval]*/ struct Balloon * * Obj ) = 0;
};

enum DimBalloonTypeConstants
{
    igDimBalloonNone = 0,
    igDimBalloonCircle = 1,
    igDimBalloonNSided = 2,
    igDimBalloonSquare = 3,
    igDimBalloonSquareRotated = 4,
    igDimBalloonHexHorizontal = 5,
    igDimBalloonHexVertical = 6,
    igDimBalloonTriangle = 7,
    igDimBalloonTriangleRight = 8,
    igDimBalloonTriangleLeft = 9,
    igDimBalloonOval = 10,
    igDimBalloonRectangle = 11,
    igDimBalloonLowerLine = 18,
    igDimBalloonRectangleMatchTextWidth = 19
};

enum DimBalloonDirTypeConstants
{
    igDimBalloonDirectionLeft = 1,
    igDimBalloonDirectionRight = 2,
    igDimBalloonDirectionTop = 3,
    igDimBalloonDirectionBottom = 4
};

enum DimCalloutTextWidthModeConstants
{
    igDimCalloutFitToContent = 1,
    igDimCalloutFixedAutoAspectRatio = 2,
    igDimCalloutFixedWrapText = 3
};

enum TextJustificationConstants
{
    igTextJustifyTop = 0,
    igTextJustifyLeft = 0,
    igTextJustifyCenter = 1,
    igTextJustifyRight = 2,
    igTextJustifyVCenter = 4,
    igTextJustifyBottom = 8,
    igTextJustifyCap = 16,
    igTextJustifyBase = 32
};

enum DimCalloutLeaderTextConnectionPointConstants
{
    igDimCalloutLeaderTextConnectionPointDefaultLeft = 0,
    igDimCalloutLeaderTextConnectionPointTopLeft = 1,
    igDimCalloutLeaderTextConnectionPointTopCenter = 2,
    igDimCalloutLeaderTextConnectionPointTopRight = 3,
    igDimCalloutLeaderTextConnectionPointDefaultRight = 4,
    igDimCalloutLeaderTextConnectionPointCenterRight = 5,
    igDimCalloutLeaderTextConnectionPointBottomRight = 6,
    igDimCalloutLeaderTextConnectionPointBottomCenter = 7,
    igDimCalloutLeaderTextConnectionPointBottomLeft = 8,
    igDimCalloutLeaderTextConnectionPointCenterLeft = 9
};

enum DimCalloutBalloonBreaklineDirectionConstants
{
    igDimCalloutBalloonBreaklineDirectionWest = 0,
    igDimCalloutBalloonBreaklineDirectionNorth = 1,
    igDimCalloutBalloonBreaklineDirectionEast = 2,
    igDimCalloutBalloonBreaklineDirectionSouth = 3
};

enum ReferencedObjectTypeConstants
{
    igReferencedObjectTypeNone = 0,
    igReferencedObjectTypeCallout = 1,
    igReferencedObjectTypeBalloon = 2,
    igReferencedObjectTypeDatumFrame = 3,
    igReferencedObjectTypeDatumTarget = 4,
    igReferencedObjectTypeDrawingView = 5,
    igReferencedObjectTypeGostWeld = 6,
    igReferencedObjectTypeAuxiliaryViewPlain = 7,
    igReferencedObjectTypeDatilEnvelope = 8,
    igReferencedObjectTypeCuttingPlain = 9,
    igReferencedObjectTypeTechnicalRequirement = 10,
    igReferencedObjectTypePinSymbol = 11
};

enum TGBalloonReattachStatusConstants
{
    TGBalloonReattachSucceeded = 0,
    TGBalloonReattachFailed = 1
};

struct __declspec(uuid("4a603c10-e750-11ce-bb40-080036776c02"))
_IBalloonAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetStyle))
    DimStylePtr Style;
    __declspec(property(get=GetBalloonType,put=PutBalloonType))
    enum DimBalloonTypeConstants BalloonType;
    __declspec(property(get=GetBalloonSides,put=PutBalloonSides))
    int BalloonSides;
    __declspec(property(get=GetBalloonDirection,put=PutBalloonDirection))
    enum DimBalloonDirTypeConstants BalloonDirection;
    __declspec(property(get=GetBalloonSize,put=PutBalloonSize))
    double BalloonSize;
    __declspec(property(get=GetBalloonText,put=PutBalloonText))
    _bstr_t BalloonText;
    __declspec(property(get=GetDisplayByItemNumber,put=PutDisplayByItemNumber))
    VARIANT_BOOL DisplayByItemNumber;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[][];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetCallout,put=PutCallout))
    long Callout;
    __declspec(property(get=GetBalloonTextLower,put=PutBalloonTextLower))
    _bstr_t BalloonTextLower;
    __declspec(property(get=GetBalloonTextPrefix,put=PutBalloonTextPrefix))
    _bstr_t BalloonTextPrefix;
    __declspec(property(get=GetBalloonTextSuffix,put=PutBalloonTextSuffix))
    _bstr_t BalloonTextSuffix;
    __declspec(property(get=GetLinkToPartsList,put=PutLinkToPartsList))
    VARIANT_BOOL LinkToPartsList;
    __declspec(property(get=GetDisplayItemCount,put=PutDisplayItemCount))
    VARIANT_BOOL DisplayItemCount;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetBalloonDisplayedText))
    _bstr_t BalloonDisplayedText;
    __declspec(property(get=GetBalloonDisplayedTextLower))
    _bstr_t BalloonDisplayedTextLower;
    __declspec(property(get=GetBalloonDisplayedTextPrefix))
    _bstr_t BalloonDisplayedTextPrefix;
    __declspec(property(get=GetBalloonDisplayedTextSuffix))
    _bstr_t BalloonDisplayedTextSuffix;
    __declspec(property(get=GetPMIPlane))
    IDispatchPtr PMIPlane;
    __declspec(property(get=GetPMITrackDistance,put=PutPMITrackDistance))
    double PMITrackDistance;
    __declspec(property(get=GetCalloutAllAround,put=PutCalloutAllAround))
    VARIANT_BOOL CalloutAllAround;
    __declspec(property(get=GetHidePMI,put=PutHidePMI))
    VARIANT_BOOL HidePMI;
    __declspec(property(get=GetCalloutAllOver,put=PutCalloutAllOver))
    VARIANT_BOOL CalloutAllOver;
    __declspec(property(get=GetCalloutBorder,put=PutCalloutBorder))
    VARIANT_BOOL CalloutBorder;
    __declspec(property(get=GetCalloutBorderHorizontalGap,put=PutCalloutBorderHorizontalGap))
    double CalloutBorderHorizontalGap;
    __declspec(property(get=GetCalloutBorderVerticalGap,put=PutCalloutBorderVerticalGap))
    double CalloutBorderVerticalGap;
    __declspec(property(get=GetCalloutTextWidth,put=PutCalloutTextWidth))
    double CalloutTextWidth;
    __declspec(property(get=GetCalloutTextAspectRatio,put=PutCalloutTextAspectRatio))
    double CalloutTextAspectRatio;
    __declspec(property(get=GetCalloutTextWidthMode,put=PutCalloutTextWidthMode))
    enum DimCalloutTextWidthModeConstants CalloutTextWidthMode;
    __declspec(property(get=GetCalloutHorizontalAlignment,put=PutCalloutHorizontalAlignment))
    enum TextJustificationConstants CalloutHorizontalAlignment;
    __declspec(property(get=GetCalloutLeaderTextConnectionPoint,put=PutCalloutLeaderTextConnectionPoint))
    enum DimCalloutLeaderTextConnectionPointConstants CalloutLeaderTextConnectionPoint;
    __declspec(property(get=GetBalloonLeaderTextConnectionPoint,put=PutBalloonLeaderTextConnectionPoint))
    int BalloonLeaderTextConnectionPoint;
    __declspec(property(get=GetCalloutBalloonBreaklineDirection,put=PutCalloutBalloonBreaklineDirection))
    enum DimCalloutBalloonBreaklineDirectionConstants CalloutBalloonBreaklineDirection;
    __declspec(property(get=GetFSBalloonOverridePrefixText,put=PutFSBalloonOverridePrefixText))
    _bstr_t FSBalloonOverridePrefixText;
    __declspec(property(get=GetFSBalloonOverrideSuffixText,put=PutFSBalloonOverrideSuffixText))
    _bstr_t FSBalloonOverrideSuffixText;
    __declspec(property(get=GetCalloutParallel,put=PutCalloutParallel))
    VARIANT_BOOL CalloutParallel;
    __declspec(property(get=GetPMIName,put=PutPMIName))
    _bstr_t PMIName;
    __declspec(property(get=GetIsTerminatorAttachedToEntity))
    VARIANT_BOOL IsTerminatorAttachedToEntity;
    __declspec(property(get=GetLinkToFOAPartsList,put=PutLinkToFOAPartsList))
    VARIANT_BOOL LinkToFOAPartsList;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetVertexCount))
    long VertexCount;
    __declspec(property(get=GetBreakLineDistance,put=PutBreakLineDistance))
    double BreakLineDistance;
    __declspec(property(get=GetBreakLine,put=PutBreakLine))
    VARIANT_BOOL BreakLine;
    __declspec(property(get=GetBreakLineDirection,put=PutBreakLineDirection))
    VARIANT_BOOL BreakLineDirection;
    __declspec(property(get=GetLeader,put=PutLeader))
    VARIANT_BOOL Leader;
    __declspec(property(get=GetRotationAngle,put=PutRotationAngle))
    double RotationAngle;
    __declspec(property(get=GetTextScale,put=PutTextScale))
    double TextScale;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;

    //
    // Wrapper methods for error-handling
    //

    DimStylePtr GetStyle ( );
    void PutBalloonType (
        enum DimBalloonTypeConstants Type );
    enum DimBalloonTypeConstants GetBalloonType ( );
    void PutBalloonSides (
        int Sides );
    int GetBalloonSides ( );
    void PutBalloonDirection (
        enum DimBalloonDirTypeConstants Direction );
    enum DimBalloonDirTypeConstants GetBalloonDirection ( );
    void PutBalloonSize (
        double Size );
    double GetBalloonSize ( );
    void PutBalloonText (
        _bstr_t Text );
    _bstr_t GetBalloonText ( );
    void PutDisplayByItemNumber (
        VARIANT_BOOL pbDisplayByItemNumber );
    VARIANT_BOOL GetDisplayByItemNumber ( );
    HRESULT SetTerminator (
        IDispatch * TerminatorObj,
        double x,
        double y,
        double z,
        VARIANT_BOOL keyPoint );
    HRESULT GetTerminator (
        IDispatch * * TerminatorObj,
        double * x,
        double * y,
        double * z,
        VARIANT_BOOL * keyPoint );
    HRESULT SetFreeSpacePoint (
        double x,
        double y,
        double z );
    HRESULT GetFreeSpacePoint (
        double * x,
        double * y,
        double * z );
    IDispatchPtr GetPlane ( );
    HRESULT SetItemNumber (
        long ulItemNumber );
    HRESULT GetItemNumber (
        long * pulItemNumber );
    void PutCallout (
        long pbCallout );
    long GetCallout ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse,
        long Lcid = 0 );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    double GetBreakLineDistance ( );
    void PutBreakLineDistance (
        double Distance );
    VARIANT_BOOL GetBreakLine ( );
    void PutBreakLine (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetBreakLineDirection ( );
    void PutBreakLineDirection (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetLeader ( );
    void PutLeader (
        VARIANT_BOOL Flag );
    long GetVertexCount ( );
    HRESULT GetVertices (
        long * VertexCount,
        SAFEARRAY * * Vertices );
    HRESULT SetVertices (
        long VertexCount,
        SAFEARRAY * * Vertices );
    HRESULT GetVertex (
        long Index,
        double * x,
        double * y,
        double * z );
    HRESULT SetVertex (
        long Index,
        double x,
        double y,
        double z );
    HRESULT InsertVertex (
        long Index,
        double x,
        double y,
        double z );
    HRESULT AddVertex (
        double x,
        double y,
        double z );
    HRESULT RemoveVertex (
        long Index );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    void PutBalloonTextLower (
        _bstr_t Text );
    _bstr_t GetBalloonTextLower ( );
    void PutBalloonTextPrefix (
        _bstr_t Text );
    _bstr_t GetBalloonTextPrefix ( );
    void PutBalloonTextSuffix (
        _bstr_t Text );
    _bstr_t GetBalloonTextSuffix ( );
    void PutLinkToPartsList (
        VARIANT_BOOL pbLinkToPartsList );
    VARIANT_BOOL GetLinkToPartsList ( );
    void PutDisplayItemCount (
        VARIANT_BOOL pbDisplayItemCount );
    VARIANT_BOOL GetDisplayItemCount ( );
    double GetRotationAngle ( );
    void PutRotationAngle (
        double pdAngle );
    double GetTextScale ( );
    void PutTextScale (
        double pdAngle );
    void PutLayer (
        _bstr_t Layer );
    _bstr_t GetLayer ( );
    _bstr_t GetBalloonDisplayedText ( );
    _bstr_t GetBalloonDisplayedTextLower ( );
    _bstr_t GetBalloonDisplayedTextPrefix ( );
    _bstr_t GetBalloonDisplayedTextSuffix ( );
    IDispatchPtr GetPMIPlane ( );
    double GetPMITrackDistance ( );
    void PutPMITrackDistance (
        double pdPMITrackDistance );
    void PutCalloutAllAround (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetCalloutAllAround ( );
    void PutHidePMI (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetHidePMI ( );
    HRESULT AddFSStackBalloon (
        enum DimBalloonDirTypeConstants Direction );
    HRESULT RemoveFSStackBalloon ( );
    HRESULT BalloonHorizontalAlignment (
        enum TextHorizontalAlignmentConstants Alignment );
    void PutCalloutAllOver (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetCalloutAllOver ( );
    void PutCalloutBorder (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetCalloutBorder ( );
    void PutCalloutBorderHorizontalGap (
        double Flag );
    double GetCalloutBorderHorizontalGap ( );
    void PutCalloutBorderVerticalGap (
        double Flag );
    double GetCalloutBorderVerticalGap ( );
    void PutCalloutTextWidth (
        double Flag );
    double GetCalloutTextWidth ( );
    void PutCalloutTextAspectRatio (
        double Flag );
    double GetCalloutTextAspectRatio ( );
    void PutCalloutTextWidthMode (
        enum DimCalloutTextWidthModeConstants WidthMode );
    enum DimCalloutTextWidthModeConstants GetCalloutTextWidthMode ( );
    void PutCalloutHorizontalAlignment (
        enum TextJustificationConstants Type );
    enum TextJustificationConstants GetCalloutHorizontalAlignment ( );
    DisplayDataPtr GetDisplayData ( );
    void PutCalloutLeaderTextConnectionPoint (
        enum DimCalloutLeaderTextConnectionPointConstants piIndex );
    enum DimCalloutLeaderTextConnectionPointConstants GetCalloutLeaderTextConnectionPoint ( );
    void PutBalloonLeaderTextConnectionPoint (
        int piIndex );
    int GetBalloonLeaderTextConnectionPoint ( );
    void PutCalloutBalloonBreaklineDirection (
        enum DimCalloutBalloonBreaklineDirectionConstants piIndex );
    enum DimCalloutBalloonBreaklineDirectionConstants GetCalloutBalloonBreaklineDirection ( );
    void PutFSBalloonOverridePrefixText (
        _bstr_t Text );
    _bstr_t GetFSBalloonOverridePrefixText ( );
    void PutFSBalloonOverrideSuffixText (
        _bstr_t Text );
    _bstr_t GetFSBalloonOverrideSuffixText ( );
    HRESULT FSBalloonClearOverrides ( );
    HRESULT PromoteToCurrentVersion ( );
    HRESULT SetAlignmentShape (
        IDispatch * AlignmentShapeObj,
        double x,
        double y );
    HRESULT GetAlignmentShape (
        IDispatch * * AlignmentShapeObj,
        double * x,
        double * y );
    void PutCalloutParallel (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetCalloutParallel ( );
    void PutPMIName (
        _bstr_t Text );
    _bstr_t GetPMIName ( );
    HRESULT TransformToModelCoordinates (
        double InputX,
        double InputY,
        double InputZ,
        double * ModelX,
        double * ModelY,
        double * ModelZ );
    VARIANT_BOOL GetIsTerminatorAttachedToEntity ( );
    HRESULT GetReferencedGeometry (
        SAFEARRAY * * ReferencedGeometries );
    HRESULT SetReferencedGeometry (
        SAFEARRAY * * ReferencedGeometries );
    void PutLinkToFOAPartsList (
        VARIANT_BOOL pvbLinkToFOAPartsList );
    VARIANT_BOOL GetLinkToFOAPartsList ( );
    HRESULT GetReferencedObjectInfo (
        SAFEARRAY * * ReferencedObjects,
        SAFEARRAY * * ReferencedObjectTypes );
    enum TGBalloonReattachStatusConstants TGReattachToDrawingView (
        IDispatch * DrawingView );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct DimStyle * * Style ) = 0;
      virtual HRESULT __stdcall put_BalloonType (
        /*[in]*/ enum DimBalloonTypeConstants Type ) = 0;
      virtual HRESULT __stdcall get_BalloonType (
        /*[out,retval]*/ enum DimBalloonTypeConstants * Type ) = 0;
      virtual HRESULT __stdcall put_BalloonSides (
        /*[in]*/ int Sides ) = 0;
      virtual HRESULT __stdcall get_BalloonSides (
        /*[out,retval]*/ int * Sides ) = 0;
      virtual HRESULT __stdcall put_BalloonDirection (
        /*[in]*/ enum DimBalloonDirTypeConstants Direction ) = 0;
      virtual HRESULT __stdcall get_BalloonDirection (
        /*[out,retval]*/ enum DimBalloonDirTypeConstants * Direction ) = 0;
      virtual HRESULT __stdcall put_BalloonSize (
        /*[in]*/ double Size ) = 0;
      virtual HRESULT __stdcall get_BalloonSize (
        /*[out,retval]*/ double * Size ) = 0;
      virtual HRESULT __stdcall put_BalloonText (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_BalloonText (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_DisplayByItemNumber (
        /*[in]*/ VARIANT_BOOL pbDisplayByItemNumber ) = 0;
      virtual HRESULT __stdcall get_DisplayByItemNumber (
        /*[out,retval]*/ VARIANT_BOOL * pbDisplayByItemNumber ) = 0;
      virtual HRESULT __stdcall raw_SetTerminator (
        /*[in]*/ IDispatch * TerminatorObj,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z,
        /*[in]*/ VARIANT_BOOL keyPoint ) = 0;
      virtual HRESULT __stdcall raw_GetTerminator (
        /*[out]*/ IDispatch * * TerminatorObj,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ VARIANT_BOOL * keyPoint ) = 0;
      virtual HRESULT __stdcall raw_SetFreeSpacePoint (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_GetFreeSpacePoint (
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z ) = 0;
      virtual HRESULT __stdcall get_Plane (
        /*[out,retval]*/ IDispatch * * Plane ) = 0;
      virtual HRESULT __stdcall raw_SetItemNumber (
        /*[in]*/ long ulItemNumber ) = 0;
      virtual HRESULT __stdcall raw_GetItemNumber (
        /*[out]*/ long * pulItemNumber ) = 0;
      virtual HRESULT __stdcall put_Callout (
        /*[in]*/ long pbCallout ) = 0;
      virtual HRESULT __stdcall get_Callout (
        /*[out,retval]*/ long * pbCallout ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[in]*/ VARIANT Recurse,
        /*[in,lcid]*/ long Lcid,
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * Type ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * ZOrder ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[in]*/ VARIANT Recurse,
        /*[out,retval]*/ BSTR * Key ) = 0;
      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ IDispatch * * Document ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ double XFrom,
        /*[in]*/ double YFrom,
        /*[in]*/ double XTo,
        /*[in]*/ double YTo ) = 0;
      virtual HRESULT __stdcall raw_Scale (
        /*[in]*/ double Factor ) = 0;
      virtual HRESULT __stdcall raw_Rotate (
        /*[in]*/ double Angle,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[out]*/ double * XMinimum,
        /*[out]*/ double * YMinimum,
        /*[out]*/ double * XMaximum,
        /*[out]*/ double * YMaximum ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ VARIANT XDistance,
        /*[in]*/ VARIANT YDistance,
        /*[out,retval]*/ IDispatch * * NewObject ) = 0;
      virtual HRESULT __stdcall raw_Mirror (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ VARIANT BooleanCopyFlag,
        /*[out,retval]*/ IDispatch * * Object ) = 0;
      virtual HRESULT __stdcall raw_BringToFront ( ) = 0;
      virtual HRESULT __stdcall raw_BringForward ( ) = 0;
      virtual HRESULT __stdcall raw_SendToBack ( ) = 0;
      virtual HRESULT __stdcall raw_SendBackward ( ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall get_BreakLineDistance (
        /*[out,retval]*/ double * Distance ) = 0;
      virtual HRESULT __stdcall put_BreakLineDistance (
        /*[in]*/ double Distance ) = 0;
      virtual HRESULT __stdcall get_BreakLine (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_BreakLine (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_BreakLineDirection (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_BreakLineDirection (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_Leader (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_Leader (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_VertexCount (
        /*[out,retval]*/ long * VertexCount ) = 0;
      virtual HRESULT __stdcall raw_GetVertices (
        /*[out]*/ long * VertexCount,
        /*[in,out]*/ SAFEARRAY * * Vertices ) = 0;
      virtual HRESULT __stdcall raw_SetVertices (
        /*[in]*/ long VertexCount,
        /*[in]*/ SAFEARRAY * * Vertices ) = 0;
      virtual HRESULT __stdcall raw_GetVertex (
        /*[in]*/ long Index,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[in]*/ double * z ) = 0;
      virtual HRESULT __stdcall raw_SetVertex (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_InsertVertex (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_AddVertex (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_RemoveVertex (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall get_KeyPointCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_GetKeyPoint (
        /*[in]*/ long Index,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ enum TGFramework::KeyPointType * KeypointType,
        /*[out]*/ long * HandleType ) = 0;
      virtual HRESULT __stdcall raw_SetKeyPoint (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall put_BalloonTextLower (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_BalloonTextLower (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_BalloonTextPrefix (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_BalloonTextPrefix (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_BalloonTextSuffix (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_BalloonTextSuffix (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_LinkToPartsList (
        /*[in]*/ VARIANT_BOOL pbLinkToPartsList ) = 0;
      virtual HRESULT __stdcall get_LinkToPartsList (
        /*[out,retval]*/ VARIANT_BOOL * pbLinkToPartsList ) = 0;
      virtual HRESULT __stdcall put_DisplayItemCount (
        /*[in]*/ VARIANT_BOOL pbDisplayItemCount ) = 0;
      virtual HRESULT __stdcall get_DisplayItemCount (
        /*[out,retval]*/ VARIANT_BOOL * pbDisplayItemCount ) = 0;
      virtual HRESULT __stdcall get_RotationAngle (
        /*[out,retval]*/ double * pdAngle ) = 0;
      virtual HRESULT __stdcall put_RotationAngle (
        /*[in]*/ double pdAngle ) = 0;
      virtual HRESULT __stdcall get_TextScale (
        /*[out,retval]*/ double * pdAngle ) = 0;
      virtual HRESULT __stdcall put_TextScale (
        /*[in]*/ double pdAngle ) = 0;
      virtual HRESULT __stdcall put_Layer (
        /*[in]*/ BSTR Layer ) = 0;
      virtual HRESULT __stdcall get_Layer (
        /*[out,retval]*/ BSTR * Layer ) = 0;
      virtual HRESULT __stdcall get_BalloonDisplayedText (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall get_BalloonDisplayedTextLower (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall get_BalloonDisplayedTextPrefix (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall get_BalloonDisplayedTextSuffix (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall get_PMIPlane (
        /*[out,retval]*/ IDispatch * * pPMIPlane ) = 0;
      virtual HRESULT __stdcall get_PMITrackDistance (
        /*[out,retval]*/ double * pdPMITrackDistance ) = 0;
      virtual HRESULT __stdcall put_PMITrackDistance (
        /*[in]*/ double pdPMITrackDistance ) = 0;
      virtual HRESULT __stdcall put_CalloutAllAround (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_CalloutAllAround (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_HidePMI (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_HidePMI (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_AddFSStackBalloon (
        /*[in]*/ enum DimBalloonDirTypeConstants Direction ) = 0;
      virtual HRESULT __stdcall raw_RemoveFSStackBalloon ( ) = 0;
      virtual HRESULT __stdcall raw_BalloonHorizontalAlignment (
        /*[in]*/ enum TextHorizontalAlignmentConstants Alignment ) = 0;
      virtual HRESULT __stdcall put_CalloutAllOver (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_CalloutAllOver (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_CalloutBorder (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_CalloutBorder (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_CalloutBorderHorizontalGap (
        /*[in]*/ double Flag ) = 0;
      virtual HRESULT __stdcall get_CalloutBorderHorizontalGap (
        /*[out,retval]*/ double * Flag ) = 0;
      virtual HRESULT __stdcall put_CalloutBorderVerticalGap (
        /*[in]*/ double Flag ) = 0;
      virtual HRESULT __stdcall get_CalloutBorderVerticalGap (
        /*[out,retval]*/ double * Flag ) = 0;
      virtual HRESULT __stdcall put_CalloutTextWidth (
        /*[in]*/ double Flag ) = 0;
      virtual HRESULT __stdcall get_CalloutTextWidth (
        /*[out,retval]*/ double * Flag ) = 0;
      virtual HRESULT __stdcall put_CalloutTextAspectRatio (
        /*[in]*/ double Flag ) = 0;
      virtual HRESULT __stdcall get_CalloutTextAspectRatio (
        /*[out,retval]*/ double * Flag ) = 0;
      virtual HRESULT __stdcall put_CalloutTextWidthMode (
        /*[in]*/ enum DimCalloutTextWidthModeConstants WidthMode ) = 0;
      virtual HRESULT __stdcall get_CalloutTextWidthMode (
        /*[out,retval]*/ enum DimCalloutTextWidthModeConstants * WidthMode ) = 0;
      virtual HRESULT __stdcall put_CalloutHorizontalAlignment (
        /*[in]*/ enum TextJustificationConstants Type ) = 0;
      virtual HRESULT __stdcall get_CalloutHorizontalAlignment (
        /*[out,retval]*/ enum TextJustificationConstants * Type ) = 0;
      virtual HRESULT __stdcall raw_GetDisplayData (
        /*[out,retval]*/ struct DisplayData * * pDisplayData ) = 0;
      virtual HRESULT __stdcall put_CalloutLeaderTextConnectionPoint (
        /*[in]*/ enum DimCalloutLeaderTextConnectionPointConstants piIndex ) = 0;
      virtual HRESULT __stdcall get_CalloutLeaderTextConnectionPoint (
        /*[out,retval]*/ enum DimCalloutLeaderTextConnectionPointConstants * piIndex ) = 0;
      virtual HRESULT __stdcall put_BalloonLeaderTextConnectionPoint (
        /*[in]*/ int piIndex ) = 0;
      virtual HRESULT __stdcall get_BalloonLeaderTextConnectionPoint (
        /*[out,retval]*/ int * piIndex ) = 0;
      virtual HRESULT __stdcall put_CalloutBalloonBreaklineDirection (
        /*[in]*/ enum DimCalloutBalloonBreaklineDirectionConstants piIndex ) = 0;
      virtual HRESULT __stdcall get_CalloutBalloonBreaklineDirection (
        /*[out,retval]*/ enum DimCalloutBalloonBreaklineDirectionConstants * piIndex ) = 0;
      virtual HRESULT __stdcall put_FSBalloonOverridePrefixText (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_FSBalloonOverridePrefixText (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_FSBalloonOverrideSuffixText (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_FSBalloonOverrideSuffixText (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall raw_FSBalloonClearOverrides ( ) = 0;
      virtual HRESULT __stdcall raw_PromoteToCurrentVersion ( ) = 0;
      virtual HRESULT __stdcall raw_SetAlignmentShape (
        /*[in]*/ IDispatch * AlignmentShapeObj,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_GetAlignmentShape (
        /*[out]*/ IDispatch * * AlignmentShapeObj,
        /*[out]*/ double * x,
        /*[out]*/ double * y ) = 0;
      virtual HRESULT __stdcall put_CalloutParallel (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_CalloutParallel (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_PMIName (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_PMIName (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall raw_TransformToModelCoordinates (
        /*[in]*/ double InputX,
        /*[in]*/ double InputY,
        /*[in]*/ double InputZ,
        /*[out]*/ double * ModelX,
        /*[out]*/ double * ModelY,
        /*[out]*/ double * ModelZ ) = 0;
      virtual HRESULT __stdcall get_IsTerminatorAttachedToEntity (
        /*[out,retval]*/ VARIANT_BOOL * bIsAttached ) = 0;
      virtual HRESULT __stdcall raw_GetReferencedGeometry (
        /*[out]*/ SAFEARRAY * * ReferencedGeometries ) = 0;
      virtual HRESULT __stdcall raw_SetReferencedGeometry (
        /*[in]*/ SAFEARRAY * * ReferencedGeometries ) = 0;
      virtual HRESULT __stdcall put_LinkToFOAPartsList (
        /*[in]*/ VARIANT_BOOL pvbLinkToFOAPartsList ) = 0;
      virtual HRESULT __stdcall get_LinkToFOAPartsList (
        /*[out,retval]*/ VARIANT_BOOL * pvbLinkToFOAPartsList ) = 0;
      virtual HRESULT __stdcall raw_GetReferencedObjectInfo (
        /*[out]*/ SAFEARRAY * * ReferencedObjects,
        /*[out]*/ SAFEARRAY * * ReferencedObjectTypes ) = 0;
      virtual HRESULT __stdcall raw_TGReattachToDrawingView (
        /*[in]*/ IDispatch * DrawingView,
        /*[out,retval]*/ enum TGBalloonReattachStatusConstants * Value ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
};

struct __declspec(uuid("92486641-ec57-11cd-bb2e-08003601bda9"))
Lines2d : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    Line2dPtr Item (
        const _variant_t & Index );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    Line2dPtr AddBy2Points (
        double x1,
        double y1,
        double x2,
        double y2 );
    Line2dPtr AddByPointAngleLength (
        double x,
        double y,
        double Angle,
        double Length );
    Line2dPtr AddAsChamfer (
        IDispatch * Obj1,
        IDispatch * Obj2,
        double xDirection,
        double yDirection,
        double SetBackA,
        double SetBackB );
    SAFEARRAY * AddSlotBy3Points (
        double x1,
        double y1,
        double x2,
        double y2,
        double x3,
        double y3,
        long isSlotByCenter );
};

struct __declspec(uuid("77169d81-ec58-11cd-bb2e-08003601bda9"))
Line2d : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLength,put=PutLength))
    double Length;
    __declspec(property(get=GetStyle))
    GeometryStyle2dPtr Style;
    __declspec(property(get=GetRelationships))
    Relationships2dPtr Relationships;
    __declspec(property(get=GetChamfer))
    ChamferGeometry2dPtr Chamfer;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetIsChamfer))
    VARIANT_BOOL IsChamfer;
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetSegmentedStyleCount))
    long SegmentedStyleCount;
    __declspec(property(get=GetProjection,put=PutProjection))
    VARIANT_BOOL Projection;
    __declspec(property(get=GetProjectionDashName,put=PutProjectionDashName))
    _bstr_t ProjectionDashName;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    GeometryStyle2dPtr GetStyle ( );
    Relationships2dPtr GetRelationships ( );
    void PutLayer (
        _bstr_t _arg1 );
    _bstr_t GetLayer ( );
    ChamferGeometry2dPtr GetChamfer ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    double GetLength ( );
    void PutLength (
        double _arg1 );
    double GetAngle ( );
    void PutAngle (
        double _arg1 );
    VARIANT_BOOL GetIsChamfer ( );
    HRESULT GetStartPoint (
        double * x,
        double * y );
    HRESULT SetStartPoint (
        double x,
        double y );
    HRESULT GetEndPoint (
        double * x,
        double * y );
    HRESULT SetEndPoint (
        double x,
        double y );
    HRESULT Trim (
        double x,
        double y,
        IDispatch * CutObj1,
        const _variant_t & CutObj2 = vtMissing );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    HRESULT Extend (
        double x,
        double y,
        IDispatch * TargetObj );
    HRESULT CornerTrim (
        double xKeep,
        double yKeep,
        IDispatch * TargetObj,
        double xTargetKeep,
        double yTargetKeep );
    long GetSegmentedStyleCount ( );
    HRESULT AddSegmentedStyle (
        double x1,
        double y1,
        double x2,
        double y2,
        IDispatch * Style );
    HRESULT GetSegmentedStyle (
        long Index,
        double * x1,
        double * y1,
        double * x2,
        double * y2,
        IDispatch * * Style );
    HRESULT SetSegmentedStyle (
        long Index,
        IDispatch * Style );
    HRESULT RemoveSegmentedStyle (
        long Index );
    HRESULT RemoveAllSegmentedStyles ( );
    HRESULT RemoveAllSegmentedStylesBetween (
        double x1,
        double y1,
        double x2,
        double y2 );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    VARIANT_BOOL GetProjection ( );
    void PutProjection (
        VARIANT_BOOL _arg1 );
    void PutProjectionDashName (
        _bstr_t _arg1 );
    _bstr_t GetProjectionDashName ( );
    HRESULT SplitAtPoint (
        double x,
        double y,
        VARIANT * OtherSplitElement = &vtMissing );
};

struct __declspec(uuid("148aba30-ec57-11cd-bb2e-08003601bda9"))
_ILines2dAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    Line2dPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    Line2dPtr AddBy2Points (
        double x1,
        double y1,
        double x2,
        double y2 );
    Line2dPtr AddByPointAngleLength (
        double x,
        double y,
        double Angle,
        double Length );
    Line2dPtr AddAsChamfer (
        IDispatch * Obj1,
        IDispatch * Obj2,
        double xDirection,
        double yDirection,
        double SetBackA,
        double SetBackB );
    SAFEARRAY * AddSlotBy3Points (
        double x1,
        double y1,
        double x2,
        double y2,
        double x3,
        double y3,
        long isSlotByCenter );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Line2d * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Enum ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * App ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_AddBy2Points (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[out,retval]*/ struct Line2d * * Obj ) = 0;
      virtual HRESULT __stdcall raw_AddByPointAngleLength (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double Angle,
        /*[in]*/ double Length,
        /*[out,retval]*/ struct Line2d * * Obj ) = 0;
      virtual HRESULT __stdcall raw_AddAsChamfer (
        /*[in]*/ IDispatch * Obj1,
        /*[in]*/ IDispatch * Obj2,
        /*[in]*/ double xDirection,
        /*[in]*/ double yDirection,
        /*[in]*/ double SetBackA,
        /*[in]*/ double SetBackB,
        /*[out,retval]*/ struct Line2d * * Obj ) = 0;
      virtual HRESULT __stdcall raw_AddSlotBy3Points (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ double x3,
        /*[in]*/ double y3,
        /*[in]*/ long isSlotByCenter,
        /*[out,retval]*/ SAFEARRAY * * Slot2dObj ) = 0;
};

struct __declspec(uuid("d175e580-19f0-11cf-9947-08003601b103"))
GeometryStyle2d : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLinearColor,put=PutLinearColor))
    long LinearColor;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetUnits,put=PutUnits))
    long Units;
    __declspec(property(get=GetAutoPhase,put=PutAutoPhase))
    VARIANT_BOOL AutoPhase;
    __declspec(property(get=GetDashGapCount))
    long DashGapCount;
    __declspec(property(get=GetDashStrokePercent,put=PutDashStrokePercent))
    double DashStrokePercent;
    __declspec(property(get=GetLinearName,put=PutLinearName))
    _bstr_t LinearName;
    __declspec(property(get=GetDashName,put=PutDashName))
    _bstr_t DashName;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    void PutLinearColor (
        long _arg1 );
    long GetLinearColor ( );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    void PutUnits (
        long _arg1 );
    long GetUnits ( );
    VARIANT_BOOL GetAutoPhase ( );
    void PutAutoPhase (
        VARIANT_BOOL _arg1 );
    long GetDashGapCount ( );
    double GetDashStrokePercent ( );
    void PutDashStrokePercent (
        double _arg1 );
    void PutLinearName (
        _bstr_t _arg1 );
    _bstr_t GetLinearName ( );
    void PutDashName (
        _bstr_t _arg1 );
    _bstr_t GetDashName ( );
    HRESULT UseActiveStyle (
        long ForFutureUse );
    HRESULT SetDashGap (
        long DashCount,
        SAFEARRAY * * Dashes );
    HRESULT GetDashGap (
        long DashCount,
        SAFEARRAY * * Dashes );
};

struct __declspec(uuid("be6feaf0-19f0-11cf-9947-08003601b103"))
_IGeometryStyle2dAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetLinearColor,put=PutLinearColor))
    long LinearColor;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetUnits,put=PutUnits))
    long Units;
    __declspec(property(get=GetAutoPhase,put=PutAutoPhase))
    VARIANT_BOOL AutoPhase;
    __declspec(property(get=GetDashGapCount))
    long DashGapCount;
    __declspec(property(get=GetDashStrokePercent,put=PutDashStrokePercent))
    double DashStrokePercent;
    __declspec(property(get=GetLinearName,put=PutLinearName))
    _bstr_t LinearName;
    __declspec(property(get=GetDashName,put=PutDashName))
    _bstr_t DashName;

    //
    // Wrapper methods for error-handling
    //

    void PutLinearColor (
        long Color );
    long GetLinearColor ( );
    double GetWidth ( );
    void PutWidth (
        double PenWidth );
    void PutUnits (
        long Units );
    long GetUnits ( );
    VARIANT_BOOL GetAutoPhase ( );
    void PutAutoPhase (
        VARIANT_BOOL AutoPhase );
    long GetDashGapCount ( );
    double GetDashStrokePercent ( );
    void PutDashStrokePercent (
        double DashStrokePercent );
    void PutLinearName (
        _bstr_t StyleName );
    _bstr_t GetLinearName ( );
    void PutDashName (
        _bstr_t StyleName );
    _bstr_t GetDashName ( );
    HRESULT UseActiveStyle (
        long ForFutureUse );
    HRESULT SetDashGap (
        long DashCount,
        SAFEARRAY * * Dashes );
    HRESULT GetDashGap (
        long DashCount,
        SAFEARRAY * * Dashes );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_LinearColor (
        /*[in]*/ long Color ) = 0;
      virtual HRESULT __stdcall get_LinearColor (
        /*[out,retval]*/ long * Color ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * PenWidth ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double PenWidth ) = 0;
      virtual HRESULT __stdcall put_Units (
        /*[in]*/ long Units ) = 0;
      virtual HRESULT __stdcall get_Units (
        /*[out,retval]*/ long * Units ) = 0;
      virtual HRESULT __stdcall get_AutoPhase (
        /*[out,retval]*/ VARIANT_BOOL * AutoPhase ) = 0;
      virtual HRESULT __stdcall put_AutoPhase (
        /*[in]*/ VARIANT_BOOL AutoPhase ) = 0;
      virtual HRESULT __stdcall get_DashGapCount (
        /*[out,retval]*/ long * DashCount ) = 0;
      virtual HRESULT __stdcall get_DashStrokePercent (
        /*[out,retval]*/ double * DashStrokePercent ) = 0;
      virtual HRESULT __stdcall put_DashStrokePercent (
        /*[in]*/ double DashStrokePercent ) = 0;
      virtual HRESULT __stdcall put_LinearName (
        /*[in]*/ BSTR StyleName ) = 0;
      virtual HRESULT __stdcall get_LinearName (
        /*[out,retval]*/ BSTR * StyleName ) = 0;
      virtual HRESULT __stdcall put_DashName (
        /*[in]*/ BSTR StyleName ) = 0;
      virtual HRESULT __stdcall get_DashName (
        /*[out,retval]*/ BSTR * StyleName ) = 0;
      virtual HRESULT __stdcall raw_UseActiveStyle (
        /*[in]*/ long ForFutureUse ) = 0;
      virtual HRESULT __stdcall raw_SetDashGap (
        /*[in]*/ long DashCount,
        /*[in]*/ SAFEARRAY * * Dashes ) = 0;
      virtual HRESULT __stdcall raw_GetDashGap (
        /*[in]*/ long DashCount,
        /*[out]*/ SAFEARRAY * * Dashes ) = 0;
};

struct __declspec(uuid("02e44221-2e53-11cf-9c34-08003601e3b7"))
Relationships2d : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr Item (
        const _variant_t & Index );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
};

struct __declspec(uuid("02e44220-2e53-11cf-9c34-08003601e3b7"))
_IRelationships2dAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Enum ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * App ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
};

struct __declspec(uuid("931f20a0-06ad-11ce-976e-08003601e26d"))
ChamferGeometry2d : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetSetBackA,put=PutSetBackA))
    double SetBackA;
    __declspec(property(get=GetSetBackB,put=PutSetBackB))
    double SetBackB;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    double GetAngle ( );
    void PutAngle (
        double _arg1 );
    double GetSetBackA ( );
    void PutSetBackA (
        double _arg1 );
    double GetSetBackB ( );
    void PutSetBackB (
        double _arg1 );
    HRESULT GetConnectedObjects (
        IDispatch * * Obj1,
        IDispatch * * Obj2 );
    HRESULT ModifyByPointAndAngle (
        double x,
        double y,
        double Angle );
    HRESULT ModifyBySetBacks (
        double SetBackA,
        double SetBackB );
};

struct __declspec(uuid("a98fe580-ec57-11cd-bb2e-08003601bda9"))
_ILine2dAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetLength,put=PutLength))
    double Length;
    __declspec(property(get=GetStyle))
    GeometryStyle2dPtr Style;
    __declspec(property(get=GetRelationships))
    Relationships2dPtr Relationships;
    __declspec(property(get=GetChamfer))
    ChamferGeometry2dPtr Chamfer;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[][];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetIsChamfer))
    VARIANT_BOOL IsChamfer;
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetSegmentedStyleCount))
    long SegmentedStyleCount;
    __declspec(property(get=GetProjection,put=PutProjection))
    VARIANT_BOOL Projection;
    __declspec(property(get=GetProjectionDashName,put=PutProjectionDashName))
    _bstr_t ProjectionDashName;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    GeometryStyle2dPtr GetStyle ( );
    Relationships2dPtr GetRelationships ( );
    void PutLayer (
        _bstr_t Layer );
    _bstr_t GetLayer ( );
    ChamferGeometry2dPtr GetChamfer ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse,
        long Lcid = 0 );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    double GetLength ( );
    void PutLength (
        double Length );
    double GetAngle ( );
    void PutAngle (
        double Angle );
    VARIANT_BOOL GetIsChamfer ( );
    HRESULT GetStartPoint (
        double * x,
        double * y );
    HRESULT SetStartPoint (
        double x,
        double y );
    HRESULT GetEndPoint (
        double * x,
        double * y );
    HRESULT SetEndPoint (
        double x,
        double y );
    HRESULT Trim (
        double x,
        double y,
        IDispatch * CutObj1,
        const _variant_t & CutObj2 = vtMissing );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    HRESULT Extend (
        double x,
        double y,
        IDispatch * TargetObj );
    HRESULT CornerTrim (
        double xKeep,
        double yKeep,
        IDispatch * TargetObj,
        double xTargetKeep,
        double yTargetKeep );
    long GetSegmentedStyleCount ( );
    HRESULT AddSegmentedStyle (
        double x1,
        double y1,
        double x2,
        double y2,
        IDispatch * Style );
    HRESULT GetSegmentedStyle (
        long Index,
        double * x1,
        double * y1,
        double * x2,
        double * y2,
        IDispatch * * Style );
    HRESULT SetSegmentedStyle (
        long Index,
        IDispatch * Style );
    HRESULT RemoveSegmentedStyle (
        long Index );
    HRESULT RemoveAllSegmentedStyles ( );
    HRESULT RemoveAllSegmentedStylesBetween (
        double x1,
        double y1,
        double x2,
        double y2 );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    VARIANT_BOOL GetProjection ( );
    void PutProjection (
        VARIANT_BOOL IsProjection );
    void PutProjectionDashName (
        _bstr_t StyleName );
    _bstr_t GetProjectionDashName ( );
    HRESULT SplitAtPoint (
        double x,
        double y,
        VARIANT * OtherSplitElement );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct GeometryStyle2d * * Style ) = 0;
      virtual HRESULT __stdcall get_Relationships (
        /*[out,retval]*/ struct Relationships2d * * Relationships2d ) = 0;
      virtual HRESULT __stdcall put_Layer (
        /*[in]*/ BSTR Layer ) = 0;
      virtual HRESULT __stdcall get_Layer (
        /*[out,retval]*/ BSTR * Layer ) = 0;
      virtual HRESULT __stdcall get_Chamfer (
        /*[out,retval]*/ struct ChamferGeometry2d * * Chamfer ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[in]*/ VARIANT Recurse,
        /*[in,lcid]*/ long Lcid,
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * Type ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * ZOrder ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[in]*/ VARIANT Recurse,
        /*[out,retval]*/ BSTR * Key ) = 0;
      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ IDispatch * * Document ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ double XFrom,
        /*[in]*/ double YFrom,
        /*[in]*/ double XTo,
        /*[in]*/ double YTo ) = 0;
      virtual HRESULT __stdcall raw_Scale (
        /*[in]*/ double Factor ) = 0;
      virtual HRESULT __stdcall raw_Rotate (
        /*[in]*/ double Angle,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[out]*/ double * XMinimum,
        /*[out]*/ double * YMinimum,
        /*[out]*/ double * XMaximum,
        /*[out]*/ double * YMaximum ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ VARIANT XDistance,
        /*[in]*/ VARIANT YDistance,
        /*[out,retval]*/ IDispatch * * NewObject ) = 0;
      virtual HRESULT __stdcall raw_Mirror (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ VARIANT BooleanCopyFlag,
        /*[out,retval]*/ IDispatch * * Object ) = 0;
      virtual HRESULT __stdcall raw_BringToFront ( ) = 0;
      virtual HRESULT __stdcall raw_BringForward ( ) = 0;
      virtual HRESULT __stdcall raw_SendToBack ( ) = 0;
      virtual HRESULT __stdcall raw_SendBackward ( ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * Length ) = 0;
      virtual HRESULT __stdcall put_Length (
        /*[in]*/ double Length ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * Angle ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double Angle ) = 0;
      virtual HRESULT __stdcall get_IsChamfer (
        /*[out,retval]*/ VARIANT_BOOL * IsChamfer ) = 0;
      virtual HRESULT __stdcall raw_GetStartPoint (
        /*[out]*/ double * x,
        /*[out]*/ double * y ) = 0;
      virtual HRESULT __stdcall raw_SetStartPoint (
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_GetEndPoint (
        /*[out]*/ double * x,
        /*[out]*/ double * y ) = 0;
      virtual HRESULT __stdcall raw_SetEndPoint (
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_Trim (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ IDispatch * CutObj1,
        /*[in]*/ VARIANT CutObj2 = vtMissing ) = 0;
      virtual HRESULT __stdcall get_KeyPointCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_GetKeyPoint (
        /*[in]*/ long Index,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ enum TGFramework::KeyPointType * KeypointType,
        /*[out]*/ long * HandleType ) = 0;
      virtual HRESULT __stdcall raw_SetKeyPoint (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_Extend (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ IDispatch * TargetObj ) = 0;
      virtual HRESULT __stdcall raw_CornerTrim (
        /*[in]*/ double xKeep,
        /*[in]*/ double yKeep,
        /*[in]*/ IDispatch * TargetObj,
        /*[in]*/ double xTargetKeep,
        /*[in]*/ double yTargetKeep ) = 0;
      virtual HRESULT __stdcall get_SegmentedStyleCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_AddSegmentedStyle (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ IDispatch * Style ) = 0;
      virtual HRESULT __stdcall raw_GetSegmentedStyle (
        /*[in]*/ long Index,
        /*[out]*/ double * x1,
        /*[out]*/ double * y1,
        /*[out]*/ double * x2,
        /*[out]*/ double * y2,
        /*[out]*/ IDispatch * * Style ) = 0;
      virtual HRESULT __stdcall raw_SetSegmentedStyle (
        /*[in]*/ long Index,
        /*[in]*/ IDispatch * Style ) = 0;
      virtual HRESULT __stdcall raw_RemoveSegmentedStyle (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllSegmentedStyles ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllSegmentedStylesBetween (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2 ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
      virtual HRESULT __stdcall get_Projection (
        /*[out,retval]*/ VARIANT_BOOL * IsProjection ) = 0;
      virtual HRESULT __stdcall put_Projection (
        /*[in]*/ VARIANT_BOOL IsProjection ) = 0;
      virtual HRESULT __stdcall put_ProjectionDashName (
        /*[in]*/ BSTR StyleName ) = 0;
      virtual HRESULT __stdcall get_ProjectionDashName (
        /*[out,retval]*/ BSTR * StyleName ) = 0;
      virtual HRESULT __stdcall raw_SplitAtPoint (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[out]*/ VARIANT * OtherSplitElement ) = 0;
};

struct __declspec(uuid("87cc5df0-06ad-11ce-976e-08003601e26d"))
_IChamferGeometry2dAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetSetBackA,put=PutSetBackA))
    double SetBackA;
    __declspec(property(get=GetSetBackB,put=PutSetBackB))
    double SetBackB;

    //
    // Wrapper methods for error-handling
    //

    double GetAngle ( );
    void PutAngle (
        double Angle );
    double GetSetBackA ( );
    void PutSetBackA (
        double SetBackA );
    double GetSetBackB ( );
    void PutSetBackB (
        double SetBackB );
    HRESULT GetConnectedObjects (
        IDispatch * * Obj1,
        IDispatch * * Obj2 );
    HRESULT ModifyByPointAndAngle (
        double x,
        double y,
        double Angle );
    HRESULT ModifyBySetBacks (
        double SetBackA,
        double SetBackB );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * Angle ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double Angle ) = 0;
      virtual HRESULT __stdcall get_SetBackA (
        /*[out,retval]*/ double * SetBackA ) = 0;
      virtual HRESULT __stdcall put_SetBackA (
        /*[in]*/ double SetBackA ) = 0;
      virtual HRESULT __stdcall get_SetBackB (
        /*[out,retval]*/ double * SetBackB ) = 0;
      virtual HRESULT __stdcall put_SetBackB (
        /*[in]*/ double SetBackB ) = 0;
      virtual HRESULT __stdcall raw_GetConnectedObjects (
        /*[out]*/ IDispatch * * Obj1,
        /*[out]*/ IDispatch * * Obj2 ) = 0;
      virtual HRESULT __stdcall raw_ModifyByPointAndAngle (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double Angle ) = 0;
      virtual HRESULT __stdcall raw_ModifyBySetBacks (
        /*[in]*/ double SetBackA,
        /*[in]*/ double SetBackB ) = 0;
};

struct __declspec(uuid("6c00fd10-0513-11ce-976e-08003601e26d"))
Circles2d : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    Circle2dPtr Item (
        const _variant_t & Index );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    Circle2dPtr AddByCenterRadius (
        double x,
        double y,
        double Radius );
    Circle2dPtr AddBy3Points (
        double x1,
        double y1,
        double x2,
        double y2,
        double x3,
        double y3 );
};

struct __declspec(uuid("923f5f60-0513-11ce-976e-08003601e26d"))
Circle2d : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetStyle))
    GeometryStyle2dPtr Style;
    __declspec(property(get=GetRelationships))
    Relationships2dPtr Relationships;
    __declspec(property(get=GetDiameter,put=PutDiameter))
    double Diameter;
    __declspec(property(get=GetCircumference))
    double Circumference;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetArea))
    double Area;
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetSegmentedStyleCount))
    long SegmentedStyleCount;
    __declspec(property(get=GetShowCurvatureComb,put=PutShowCurvatureComb))
    VARIANT_BOOL ShowCurvatureComb;
    __declspec(property(get=GetLength))
    double Length;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    GeometryStyle2dPtr GetStyle ( );
    Relationships2dPtr GetRelationships ( );
    void PutLayer (
        _bstr_t _arg1 );
    _bstr_t GetLayer ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    double GetRadius ( );
    void PutRadius (
        double _arg1 );
    double GetDiameter ( );
    void PutDiameter (
        double _arg1 );
    double GetCircumference ( );
    double GetArea ( );
    HRESULT GetCenterPoint (
        double * x,
        double * y );
    HRESULT SetCenterPoint (
        double x,
        double y );
    HRESULT GetMajorAxis (
        double * x,
        double * y );
    HRESULT SetMajorAxis (
        double x,
        double y );
    HRESULT Trim (
        double x,
        double y,
        IDispatch * CutObj1,
        const _variant_t & CutObj2 = vtMissing );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    long GetSegmentedStyleCount ( );
    HRESULT AddSegmentedStyle (
        double x1,
        double y1,
        double x2,
        double y2,
        IDispatch * Style );
    HRESULT GetSegmentedStyle (
        long Index,
        double * x1,
        double * y1,
        double * x2,
        double * y2,
        IDispatch * * Style );
    HRESULT SetSegmentedStyle (
        long Index,
        IDispatch * Style );
    HRESULT RemoveSegmentedStyle (
        long Index );
    HRESULT RemoveAllSegmentedStyles ( );
    HRESULT RemoveAllSegmentedStylesBetween (
        double x1,
        double y1,
        double x2,
        double y2 );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    VARIANT_BOOL GetShowCurvatureComb ( );
    void PutShowCurvatureComb (
        VARIANT_BOOL _arg1 );
    HRESULT SplitAtPoints (
        double x1,
        double y1,
        double x2,
        double y2,
        VARIANT * SplitElement1 = &vtMissing,
        VARIANT * SplitElement2 = &vtMissing );
    double GetLength ( );
};

struct __declspec(uuid("5635fb80-0513-11ce-976e-08003601e26d"))
_ICircles2dAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    Circle2dPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    Circle2dPtr AddByCenterRadius (
        double x,
        double y,
        double Radius );
    Circle2dPtr AddBy3Points (
        double x1,
        double y1,
        double x2,
        double y2,
        double x3,
        double y3 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Circle2d * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Enum ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * App ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * pParent ) = 0;
      virtual HRESULT __stdcall raw_AddByCenterRadius (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double Radius,
        /*[out,retval]*/ struct Circle2d * * Obj ) = 0;
      virtual HRESULT __stdcall raw_AddBy3Points (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ double x3,
        /*[in]*/ double y3,
        /*[out,retval]*/ struct Circle2d * * Obj ) = 0;
};

struct __declspec(uuid("85d063d0-0513-11ce-976e-08003601e26d"))
_ICircle2dAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetStyle))
    GeometryStyle2dPtr Style;
    __declspec(property(get=GetRelationships))
    Relationships2dPtr Relationships;
    __declspec(property(get=GetDiameter,put=PutDiameter))
    double Diameter;
    __declspec(property(get=GetCircumference))
    double Circumference;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[][];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetArea))
    double Area;
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetSegmentedStyleCount))
    long SegmentedStyleCount;
    __declspec(property(get=GetShowCurvatureComb,put=PutShowCurvatureComb))
    VARIANT_BOOL ShowCurvatureComb;
    __declspec(property(get=GetLength))
    double Length;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    GeometryStyle2dPtr GetStyle ( );
    Relationships2dPtr GetRelationships ( );
    void PutLayer (
        _bstr_t Layer );
    _bstr_t GetLayer ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse,
        long Lcid = 0 );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    double GetRadius ( );
    void PutRadius (
        double Radius );
    double GetDiameter ( );
    void PutDiameter (
        double Diameter );
    double GetCircumference ( );
    double GetArea ( );
    HRESULT GetCenterPoint (
        double * x,
        double * y );
    HRESULT SetCenterPoint (
        double x,
        double y );
    HRESULT GetMajorAxis (
        double * x,
        double * y );
    HRESULT SetMajorAxis (
        double x,
        double y );
    HRESULT Trim (
        double x,
        double y,
        IDispatch * CutObj1,
        const _variant_t & CutObj2 = vtMissing );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    long GetSegmentedStyleCount ( );
    HRESULT AddSegmentedStyle (
        double x1,
        double y1,
        double x2,
        double y2,
        IDispatch * Style );
    HRESULT GetSegmentedStyle (
        long Index,
        double * x1,
        double * y1,
        double * x2,
        double * y2,
        IDispatch * * Style );
    HRESULT SetSegmentedStyle (
        long Index,
        IDispatch * Style );
    HRESULT RemoveSegmentedStyle (
        long Index );
    HRESULT RemoveAllSegmentedStyles ( );
    HRESULT RemoveAllSegmentedStylesBetween (
        double x1,
        double y1,
        double x2,
        double y2 );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    VARIANT_BOOL GetShowCurvatureComb ( );
    void PutShowCurvatureComb (
        VARIANT_BOOL Show );
    HRESULT SplitAtPoints (
        double x1,
        double y1,
        double x2,
        double y2,
        VARIANT * SplitElement1,
        VARIANT * SplitElement2 );
    double GetLength ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct GeometryStyle2d * * Style ) = 0;
      virtual HRESULT __stdcall get_Relationships (
        /*[out,retval]*/ struct Relationships2d * * Relationships2d ) = 0;
      virtual HRESULT __stdcall put_Layer (
        /*[in]*/ BSTR Layer ) = 0;
      virtual HRESULT __stdcall get_Layer (
        /*[out,retval]*/ BSTR * Layer ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[in]*/ VARIANT Recurse,
        /*[in,lcid]*/ long Lcid,
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * Type ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * ZOrder ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[in]*/ VARIANT Recurse,
        /*[out,retval]*/ BSTR * Key ) = 0;
      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ IDispatch * * Document ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ double XFrom,
        /*[in]*/ double YFrom,
        /*[in]*/ double XTo,
        /*[in]*/ double YTo ) = 0;
      virtual HRESULT __stdcall raw_Scale (
        /*[in]*/ double Factor ) = 0;
      virtual HRESULT __stdcall raw_Rotate (
        /*[in]*/ double Angle,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[out]*/ double * XMinimum,
        /*[out]*/ double * YMinimum,
        /*[out]*/ double * XMaximum,
        /*[out]*/ double * YMaximum ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ VARIANT XDistance,
        /*[in]*/ VARIANT YDistance,
        /*[out,retval]*/ IDispatch * * NewObject ) = 0;
      virtual HRESULT __stdcall raw_Mirror (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ VARIANT BooleanCopyFlag,
        /*[out,retval]*/ IDispatch * * Object ) = 0;
      virtual HRESULT __stdcall raw_BringToFront ( ) = 0;
      virtual HRESULT __stdcall raw_BringForward ( ) = 0;
      virtual HRESULT __stdcall raw_SendToBack ( ) = 0;
      virtual HRESULT __stdcall raw_SendBackward ( ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * Radius ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double Radius ) = 0;
      virtual HRESULT __stdcall get_Diameter (
        /*[out,retval]*/ double * Diameter ) = 0;
      virtual HRESULT __stdcall put_Diameter (
        /*[in]*/ double Diameter ) = 0;
      virtual HRESULT __stdcall get_Circumference (
        /*[out,retval]*/ double * Circumference ) = 0;
      virtual HRESULT __stdcall get_Area (
        /*[out,retval]*/ double * Area ) = 0;
      virtual HRESULT __stdcall raw_GetCenterPoint (
        /*[out]*/ double * x,
        /*[out]*/ double * y ) = 0;
      virtual HRESULT __stdcall raw_SetCenterPoint (
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_GetMajorAxis (
        /*[out]*/ double * x,
        /*[out]*/ double * y ) = 0;
      virtual HRESULT __stdcall raw_SetMajorAxis (
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_Trim (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ IDispatch * CutObj1,
        /*[in]*/ VARIANT CutObj2 = vtMissing ) = 0;
      virtual HRESULT __stdcall get_KeyPointCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_GetKeyPoint (
        /*[in]*/ long Index,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ enum TGFramework::KeyPointType * KeypointType,
        /*[out]*/ long * HandleType ) = 0;
      virtual HRESULT __stdcall raw_SetKeyPoint (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall get_SegmentedStyleCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_AddSegmentedStyle (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ IDispatch * Style ) = 0;
      virtual HRESULT __stdcall raw_GetSegmentedStyle (
        /*[in]*/ long Index,
        /*[out]*/ double * x1,
        /*[out]*/ double * y1,
        /*[out]*/ double * x2,
        /*[out]*/ double * y2,
        /*[out]*/ IDispatch * * Style ) = 0;
      virtual HRESULT __stdcall raw_SetSegmentedStyle (
        /*[in]*/ long Index,
        /*[in]*/ IDispatch * Style ) = 0;
      virtual HRESULT __stdcall raw_RemoveSegmentedStyle (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllSegmentedStyles ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllSegmentedStylesBetween (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2 ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
      virtual HRESULT __stdcall get_ShowCurvatureComb (
        /*[out,retval]*/ VARIANT_BOOL * Show ) = 0;
      virtual HRESULT __stdcall put_ShowCurvatureComb (
        /*[in]*/ VARIANT_BOOL Show ) = 0;
      virtual HRESULT __stdcall raw_SplitAtPoints (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[out]*/ VARIANT * SplitElement1,
        /*[out]*/ VARIANT * SplitElement2 ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * Length ) = 0;
};

struct __declspec(uuid("dc912d30-0056-11ce-976e-08003601e26d"))
Arcs2d : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    Arc2dPtr Item (
        const _variant_t & Index );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    Arc2dPtr AddByStartAlongEnd (
        double xStart,
        double yStart,
        double xAlong,
        double yAlong,
        double xEnd,
        double yEnd );
    Arc2dPtr AddByCenterStartEnd (
        double xCenter,
        double yCenter,
        double xStart,
        double yStart,
        double xEnd,
        double yEnd );
    Arc2dPtr AddAsFillet (
        IDispatch * Obj1,
        IDispatch * Obj2,
        double Radius,
        double xDirection,
        double yDirection );
    Arc2dPtr AddAsFilletNoTrim (
        IDispatch * Obj1,
        IDispatch * Obj2,
        double Radius,
        double xDirection,
        double yDirection );
};

struct __declspec(uuid("032213a0-0057-11ce-976e-08003601e26d"))
Arc2d : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetStyle))
    GeometryStyle2dPtr Style;
    __declspec(property(get=GetRelationships))
    Relationships2dPtr Relationships;
    __declspec(property(get=GetFillet))
    FilletGeometry2dPtr Fillet;
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetShowCurvatureComb,put=PutShowCurvatureComb))
    VARIANT_BOOL ShowCurvatureComb;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetStartAngle,put=PutStartAngle))
    double StartAngle;
    __declspec(property(get=GetSweepAngle,put=PutSweepAngle))
    double SweepAngle;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum Geom2dOrientationConstants Orientation;
    __declspec(property(get=GetIsFillet))
    VARIANT_BOOL IsFillet;
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetLength))
    double Length;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetSegmentedStyleCount))
    long SegmentedStyleCount;
    __declspec(property(get=GetZOrder))
    long ZOrder;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    GeometryStyle2dPtr GetStyle ( );
    Relationships2dPtr GetRelationships ( );
    void PutLayer (
        _bstr_t _arg1 );
    _bstr_t GetLayer ( );
    FilletGeometry2dPtr GetFillet ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    void PutRadius (
        double _arg1 );
    double GetRadius ( );
    double GetStartAngle ( );
    void PutStartAngle (
        double _arg1 );
    double GetSweepAngle ( );
    void PutSweepAngle (
        double _arg1 );
    void PutOrientation (
        enum Geom2dOrientationConstants _arg1 );
    enum Geom2dOrientationConstants GetOrientation ( );
    VARIANT_BOOL GetIsFillet ( );
    HRESULT GetStartPoint (
        double * x,
        double * y );
    HRESULT SetStartPoint (
        double x,
        double y );
    HRESULT GetEndPoint (
        double * x,
        double * y );
    HRESULT SetEndPoint (
        double x,
        double y );
    HRESULT GetCenterPoint (
        double * x,
        double * y );
    HRESULT SetCenterPoint (
        double x,
        double y );
    HRESULT GetMajorAxis (
        double * x,
        double * y );
    HRESULT SetMajorAxis (
        double x,
        double y );
    HRESULT Trim (
        double x,
        double y,
        IDispatch * CutObj1,
        const _variant_t & CutObj2 = vtMissing );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    HRESULT Extend (
        double x,
        double y,
        IDispatch * TargetObj );
    HRESULT CornerTrim (
        double xKeep,
        double yKeep,
        IDispatch * TargetObj,
        double xTargetKeep,
        double yTargetKeep );
    long GetSegmentedStyleCount ( );
    HRESULT AddSegmentedStyle (
        double x1,
        double y1,
        double x2,
        double y2,
        IDispatch * Style );
    HRESULT GetSegmentedStyle (
        long Index,
        double * x1,
        double * y1,
        double * x2,
        double * y2,
        IDispatch * * Style );
    HRESULT SetSegmentedStyle (
        long Index,
        IDispatch * Style );
    HRESULT RemoveSegmentedStyle (
        long Index );
    HRESULT RemoveAllSegmentedStyles ( );
    HRESULT RemoveAllSegmentedStylesBetween (
        double x1,
        double y1,
        double x2,
        double y2 );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    VARIANT_BOOL GetShowCurvatureComb ( );
    void PutShowCurvatureComb (
        VARIANT_BOOL _arg1 );
    HRESULT SplitAtPoint (
        double x,
        double y,
        VARIANT * OtherSplitElement = &vtMissing );
    double GetLength ( );
};

struct __declspec(uuid("c52b1e30-0056-11ce-976e-08003601e26d"))
_IArcs2dAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    Arc2dPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    Arc2dPtr AddByStartAlongEnd (
        double xStart,
        double yStart,
        double xAlong,
        double yAlong,
        double xEnd,
        double yEnd );
    Arc2dPtr AddByCenterStartEnd (
        double xCenter,
        double yCenter,
        double xStart,
        double yStart,
        double xEnd,
        double yEnd );
    Arc2dPtr AddAsFillet (
        IDispatch * Obj1,
        IDispatch * Obj2,
        double Radius,
        double xDirection,
        double yDirection );
    Arc2dPtr AddAsFilletNoTrim (
        IDispatch * Obj1,
        IDispatch * Obj2,
        double Radius,
        double xDirection,
        double yDirection );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Arc2d * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Enum ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * App ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_AddByStartAlongEnd (
        /*[in]*/ double xStart,
        /*[in]*/ double yStart,
        /*[in]*/ double xAlong,
        /*[in]*/ double yAlong,
        /*[in]*/ double xEnd,
        /*[in]*/ double yEnd,
        /*[out,retval]*/ struct Arc2d * * Obj ) = 0;
      virtual HRESULT __stdcall raw_AddByCenterStartEnd (
        /*[in]*/ double xCenter,
        /*[in]*/ double yCenter,
        /*[in]*/ double xStart,
        /*[in]*/ double yStart,
        /*[in]*/ double xEnd,
        /*[in]*/ double yEnd,
        /*[out,retval]*/ struct Arc2d * * Obj ) = 0;
      virtual HRESULT __stdcall raw_AddAsFillet (
        /*[in]*/ IDispatch * Obj1,
        /*[in]*/ IDispatch * Obj2,
        /*[in]*/ double Radius,
        /*[in]*/ double xDirection,
        /*[in]*/ double yDirection,
        /*[out,retval]*/ struct Arc2d * * Obj ) = 0;
      virtual HRESULT __stdcall raw_AddAsFilletNoTrim (
        /*[in]*/ IDispatch * Obj1,
        /*[in]*/ IDispatch * Obj2,
        /*[in]*/ double Radius,
        /*[in]*/ double xDirection,
        /*[in]*/ double yDirection,
        /*[out,retval]*/ struct Arc2d * * Obj ) = 0;
};

struct __declspec(uuid("117dc430-06ac-11ce-976e-08003601e26d"))
FilletGeometry2d : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT GetConnectedObjects (
        IDispatch * * Obj1,
        IDispatch * * Obj2 );
};

struct __declspec(uuid("06947170-06ac-11ce-976e-08003601e26d"))
_IFilletGeom2dAuto : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT GetConnectedObjects (
        IDispatch * * Obj1,
        IDispatch * * Obj2 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetConnectedObjects (
        /*[out]*/ IDispatch * * Obj1,
        /*[out]*/ IDispatch * * Obj2 ) = 0;
};

enum Geom2dOrientationConstants
{
    igGeom2dOrientClockwise = 0,
    igGeom2dOrientCounterClockwise = 1
};

struct __declspec(uuid("f748d870-0056-11ce-976e-08003601e26d"))
_IArc2dAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetStyle))
    GeometryStyle2dPtr Style;
    __declspec(property(get=GetRelationships))
    Relationships2dPtr Relationships;
    __declspec(property(get=GetFillet))
    FilletGeometry2dPtr Fillet;
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetShowCurvatureComb,put=PutShowCurvatureComb))
    VARIANT_BOOL ShowCurvatureComb;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetRadius,put=PutRadius))
    double Radius;
    __declspec(property(get=GetStartAngle,put=PutStartAngle))
    double StartAngle;
    __declspec(property(get=GetSweepAngle,put=PutSweepAngle))
    double SweepAngle;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum Geom2dOrientationConstants Orientation;
    __declspec(property(get=GetIsFillet))
    VARIANT_BOOL IsFillet;
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetLength))
    double Length;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[][];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetSegmentedStyleCount))
    long SegmentedStyleCount;
    __declspec(property(get=GetZOrder))
    long ZOrder;

    //
    // Wrapper methods for error-handling
    //

    GeometryStyle2dPtr GetStyle ( );
    Relationships2dPtr GetRelationships ( );
    void PutLayer (
        _bstr_t Layer );
    _bstr_t GetLayer ( );
    FilletGeometry2dPtr GetFillet ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse,
        long Lcid = 0 );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    void PutRadius (
        double Radius );
    double GetRadius ( );
    double GetStartAngle ( );
    void PutStartAngle (
        double Angle );
    double GetSweepAngle ( );
    void PutSweepAngle (
        double Angle );
    void PutOrientation (
        enum Geom2dOrientationConstants Orientation );
    enum Geom2dOrientationConstants GetOrientation ( );
    VARIANT_BOOL GetIsFillet ( );
    HRESULT GetStartPoint (
        double * x,
        double * y );
    HRESULT SetStartPoint (
        double x,
        double y );
    HRESULT GetEndPoint (
        double * x,
        double * y );
    HRESULT SetEndPoint (
        double x,
        double y );
    HRESULT GetCenterPoint (
        double * x,
        double * y );
    HRESULT SetCenterPoint (
        double x,
        double y );
    HRESULT GetMajorAxis (
        double * x,
        double * y );
    HRESULT SetMajorAxis (
        double x,
        double y );
    HRESULT Trim (
        double x,
        double y,
        IDispatch * CutObj1,
        const _variant_t & CutObj2 = vtMissing );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    HRESULT Extend (
        double x,
        double y,
        IDispatch * TargetObj );
    HRESULT CornerTrim (
        double xKeep,
        double yKeep,
        IDispatch * TargetObj,
        double xTargetKeep,
        double yTargetKeep );
    long GetSegmentedStyleCount ( );
    HRESULT AddSegmentedStyle (
        double x1,
        double y1,
        double x2,
        double y2,
        IDispatch * Style );
    HRESULT GetSegmentedStyle (
        long Index,
        double * x1,
        double * y1,
        double * x2,
        double * y2,
        IDispatch * * Style );
    HRESULT SetSegmentedStyle (
        long Index,
        IDispatch * Style );
    HRESULT RemoveSegmentedStyle (
        long Index );
    HRESULT RemoveAllSegmentedStyles ( );
    HRESULT RemoveAllSegmentedStylesBetween (
        double x1,
        double y1,
        double x2,
        double y2 );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    VARIANT_BOOL GetShowCurvatureComb ( );
    void PutShowCurvatureComb (
        VARIANT_BOOL Show );
    HRESULT SplitAtPoint (
        double x,
        double y,
        VARIANT * OtherSplitElement );
    double GetLength ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct GeometryStyle2d * * Style ) = 0;
      virtual HRESULT __stdcall get_Relationships (
        /*[out,retval]*/ struct Relationships2d * * Relationships2d ) = 0;
      virtual HRESULT __stdcall put_Layer (
        /*[in]*/ BSTR Layer ) = 0;
      virtual HRESULT __stdcall get_Layer (
        /*[out,retval]*/ BSTR * Layer ) = 0;
      virtual HRESULT __stdcall get_Fillet (
        /*[out,retval]*/ struct FilletGeometry2d * * Fillet ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[in]*/ VARIANT Recurse,
        /*[in,lcid]*/ long Lcid,
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * Type ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * ZOrder ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[in]*/ VARIANT Recurse,
        /*[out,retval]*/ BSTR * Key ) = 0;
      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ IDispatch * * Document ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ double XFrom,
        /*[in]*/ double YFrom,
        /*[in]*/ double XTo,
        /*[in]*/ double YTo ) = 0;
      virtual HRESULT __stdcall raw_Scale (
        /*[in]*/ double Factor ) = 0;
      virtual HRESULT __stdcall raw_Rotate (
        /*[in]*/ double Angle,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[out]*/ double * XMinimum,
        /*[out]*/ double * YMinimum,
        /*[out]*/ double * XMaximum,
        /*[out]*/ double * YMaximum ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ VARIANT XDistance,
        /*[in]*/ VARIANT YDistance,
        /*[out,retval]*/ IDispatch * * NewObject ) = 0;
      virtual HRESULT __stdcall raw_Mirror (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ VARIANT BooleanCopyFlag,
        /*[out,retval]*/ IDispatch * * Object ) = 0;
      virtual HRESULT __stdcall raw_BringToFront ( ) = 0;
      virtual HRESULT __stdcall raw_BringForward ( ) = 0;
      virtual HRESULT __stdcall raw_SendToBack ( ) = 0;
      virtual HRESULT __stdcall raw_SendBackward ( ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall put_Radius (
        /*[in]*/ double Radius ) = 0;
      virtual HRESULT __stdcall get_Radius (
        /*[out,retval]*/ double * Radius ) = 0;
      virtual HRESULT __stdcall get_StartAngle (
        /*[out,retval]*/ double * Angle ) = 0;
      virtual HRESULT __stdcall put_StartAngle (
        /*[in]*/ double Angle ) = 0;
      virtual HRESULT __stdcall get_SweepAngle (
        /*[out,retval]*/ double * Angle ) = 0;
      virtual HRESULT __stdcall put_SweepAngle (
        /*[in]*/ double Angle ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ enum Geom2dOrientationConstants Orientation ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ enum Geom2dOrientationConstants * Orientation ) = 0;
      virtual HRESULT __stdcall get_IsFillet (
        /*[out,retval]*/ VARIANT_BOOL * IsFillet ) = 0;
      virtual HRESULT __stdcall raw_GetStartPoint (
        /*[out]*/ double * x,
        /*[out]*/ double * y ) = 0;
      virtual HRESULT __stdcall raw_SetStartPoint (
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_GetEndPoint (
        /*[out]*/ double * x,
        /*[out]*/ double * y ) = 0;
      virtual HRESULT __stdcall raw_SetEndPoint (
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_GetCenterPoint (
        /*[out]*/ double * x,
        /*[out]*/ double * y ) = 0;
      virtual HRESULT __stdcall raw_SetCenterPoint (
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_GetMajorAxis (
        /*[out]*/ double * x,
        /*[out]*/ double * y ) = 0;
      virtual HRESULT __stdcall raw_SetMajorAxis (
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_Trim (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ IDispatch * CutObj1,
        /*[in]*/ VARIANT CutObj2 = vtMissing ) = 0;
      virtual HRESULT __stdcall get_KeyPointCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_GetKeyPoint (
        /*[in]*/ long Index,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ enum TGFramework::KeyPointType * KeypointType,
        /*[out]*/ long * HandleType ) = 0;
      virtual HRESULT __stdcall raw_SetKeyPoint (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_Extend (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ IDispatch * TargetObj ) = 0;
      virtual HRESULT __stdcall raw_CornerTrim (
        /*[in]*/ double xKeep,
        /*[in]*/ double yKeep,
        /*[in]*/ IDispatch * TargetObj,
        /*[in]*/ double xTargetKeep,
        /*[in]*/ double yTargetKeep ) = 0;
      virtual HRESULT __stdcall get_SegmentedStyleCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_AddSegmentedStyle (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ IDispatch * Style ) = 0;
      virtual HRESULT __stdcall raw_GetSegmentedStyle (
        /*[in]*/ long Index,
        /*[out]*/ double * x1,
        /*[out]*/ double * y1,
        /*[out]*/ double * x2,
        /*[out]*/ double * y2,
        /*[out]*/ IDispatch * * Style ) = 0;
      virtual HRESULT __stdcall raw_SetSegmentedStyle (
        /*[in]*/ long Index,
        /*[in]*/ IDispatch * Style ) = 0;
      virtual HRESULT __stdcall raw_RemoveSegmentedStyle (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllSegmentedStyles ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllSegmentedStylesBetween (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2 ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
      virtual HRESULT __stdcall get_ShowCurvatureComb (
        /*[out,retval]*/ VARIANT_BOOL * Show ) = 0;
      virtual HRESULT __stdcall put_ShowCurvatureComb (
        /*[in]*/ VARIANT_BOOL Show ) = 0;
      virtual HRESULT __stdcall raw_SplitAtPoint (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[out]*/ VARIANT * OtherSplitElement ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * Length ) = 0;
};

struct __declspec(uuid("12cda270-fb0d-11cd-976e-08003601e26d"))
Ellipses2d : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    Ellipse2dPtr Item (
        const _variant_t & Index );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    Ellipse2dPtr AddByCenter (
        double xCenter,
        double yCenter,
        double xMajor,
        double yMajor,
        double Ratio,
        enum Geom2dOrientationConstants Orientation );
};

struct __declspec(uuid("41876a30-fb0d-11cd-976e-08003601e26d"))
Ellipse2d : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStyle))
    GeometryStyle2dPtr Style;
    __declspec(property(get=GetRelationships))
    Relationships2dPtr Relationships;
    __declspec(property(get=GetShowCurvatureComb,put=PutShowCurvatureComb))
    VARIANT_BOOL ShowCurvatureComb;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetMajorRadius,put=PutMajorRadius))
    double MajorRadius;
    __declspec(property(get=GetMinorRadius,put=PutMinorRadius))
    double MinorRadius;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum Geom2dOrientationConstants Orientation;
    __declspec(property(get=GetRotationAngle,put=PutRotationAngle))
    double RotationAngle;
    __declspec(property(get=GetMinorMajorRatio,put=PutMinorMajorRatio))
    double MinorMajorRatio;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetCircumference))
    double Circumference;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetArea))
    double Area;
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetSegmentedStyleCount))
    long SegmentedStyleCount;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetLength))
    double Length;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    GeometryStyle2dPtr GetStyle ( );
    Relationships2dPtr GetRelationships ( );
    void PutLayer (
        _bstr_t _arg1 );
    _bstr_t GetLayer ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    void PutMajorRadius (
        double _arg1 );
    double GetMajorRadius ( );
    double GetMinorRadius ( );
    void PutMinorRadius (
        double _arg1 );
    void PutOrientation (
        enum Geom2dOrientationConstants _arg1 );
    enum Geom2dOrientationConstants GetOrientation ( );
    double GetRotationAngle ( );
    void PutRotationAngle (
        double _arg1 );
    double GetMinorMajorRatio ( );
    void PutMinorMajorRatio (
        double _arg1 );
    double GetCircumference ( );
    double GetArea ( );
    HRESULT GetCenterPoint (
        double * x,
        double * y );
    HRESULT SetCenterPoint (
        double x,
        double y );
    HRESULT GetMajorAxis (
        double * x,
        double * y );
    HRESULT SetMajorAxis (
        double x,
        double y );
    HRESULT GetMinorAxis (
        double * x,
        double * y );
    HRESULT SetMinorAxis (
        double x,
        double y );
    HRESULT Trim (
        double x,
        double y,
        IDispatch * CutObj1,
        const _variant_t & CutObj2 = vtMissing );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    long GetSegmentedStyleCount ( );
    HRESULT AddSegmentedStyle (
        double x1,
        double y1,
        double x2,
        double y2,
        IDispatch * Style );
    HRESULT GetSegmentedStyle (
        long Index,
        double * x1,
        double * y1,
        double * x2,
        double * y2,
        IDispatch * * Style );
    HRESULT SetSegmentedStyle (
        long Index,
        IDispatch * Style );
    HRESULT RemoveSegmentedStyle (
        long Index );
    HRESULT RemoveAllSegmentedStyles ( );
    HRESULT RemoveAllSegmentedStylesBetween (
        double x1,
        double y1,
        double x2,
        double y2 );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    VARIANT_BOOL GetShowCurvatureComb ( );
    void PutShowCurvatureComb (
        VARIANT_BOOL _arg1 );
    HRESULT SplitAtPoints (
        double x1,
        double y1,
        double x2,
        double y2,
        VARIANT * SplitElement1 = &vtMissing,
        VARIANT * SplitElement2 = &vtMissing );
    double GetLength ( );
};

struct __declspec(uuid("0314ae90-fb0d-11cd-976e-08003601e26d"))
_IEllipses2dAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    Ellipse2dPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    Ellipse2dPtr AddByCenter (
        double xCenter,
        double yCenter,
        double xMajor,
        double yMajor,
        double Ratio,
        enum Geom2dOrientationConstants Orientation );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Ellipse2d * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Enum ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * App ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_AddByCenter (
        /*[in]*/ double xCenter,
        /*[in]*/ double yCenter,
        /*[in]*/ double xMajor,
        /*[in]*/ double yMajor,
        /*[in]*/ double Ratio,
        /*[in]*/ enum Geom2dOrientationConstants Orientation,
        /*[out,retval]*/ struct Ellipse2d * * Obj ) = 0;
};

struct __declspec(uuid("33899ab0-fb0d-11cd-976e-08003601e26d"))
_IEllipse2dAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetStyle))
    GeometryStyle2dPtr Style;
    __declspec(property(get=GetRelationships))
    Relationships2dPtr Relationships;
    __declspec(property(get=GetShowCurvatureComb,put=PutShowCurvatureComb))
    VARIANT_BOOL ShowCurvatureComb;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetMajorRadius,put=PutMajorRadius))
    double MajorRadius;
    __declspec(property(get=GetMinorRadius,put=PutMinorRadius))
    double MinorRadius;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum Geom2dOrientationConstants Orientation;
    __declspec(property(get=GetRotationAngle,put=PutRotationAngle))
    double RotationAngle;
    __declspec(property(get=GetMinorMajorRatio,put=PutMinorMajorRatio))
    double MinorMajorRatio;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[][];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetCircumference))
    double Circumference;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetArea))
    double Area;
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetSegmentedStyleCount))
    long SegmentedStyleCount;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetLength))
    double Length;

    //
    // Wrapper methods for error-handling
    //

    GeometryStyle2dPtr GetStyle ( );
    Relationships2dPtr GetRelationships ( );
    void PutLayer (
        _bstr_t Layer );
    _bstr_t GetLayer ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse,
        long Lcid = 0 );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    void PutMajorRadius (
        double MajorRadius );
    double GetMajorRadius ( );
    double GetMinorRadius ( );
    void PutMinorRadius (
        double MinorRadius );
    void PutOrientation (
        enum Geom2dOrientationConstants Orientation );
    enum Geom2dOrientationConstants GetOrientation ( );
    double GetRotationAngle ( );
    void PutRotationAngle (
        double Angle );
    double GetMinorMajorRatio ( );
    void PutMinorMajorRatio (
        double Ratio );
    double GetCircumference ( );
    double GetArea ( );
    HRESULT GetCenterPoint (
        double * x,
        double * y );
    HRESULT SetCenterPoint (
        double x,
        double y );
    HRESULT GetMajorAxis (
        double * x,
        double * y );
    HRESULT SetMajorAxis (
        double x,
        double y );
    HRESULT GetMinorAxis (
        double * x,
        double * y );
    HRESULT SetMinorAxis (
        double x,
        double y );
    HRESULT Trim (
        double x,
        double y,
        IDispatch * CutObj1,
        const _variant_t & CutObj2 = vtMissing );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    long GetSegmentedStyleCount ( );
    HRESULT AddSegmentedStyle (
        double x1,
        double y1,
        double x2,
        double y2,
        IDispatch * Style );
    HRESULT GetSegmentedStyle (
        long Index,
        double * x1,
        double * y1,
        double * x2,
        double * y2,
        IDispatch * * Style );
    HRESULT SetSegmentedStyle (
        long Index,
        IDispatch * Style );
    HRESULT RemoveSegmentedStyle (
        long Index );
    HRESULT RemoveAllSegmentedStyles ( );
    HRESULT RemoveAllSegmentedStylesBetween (
        double x1,
        double y1,
        double x2,
        double y2 );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    VARIANT_BOOL GetShowCurvatureComb ( );
    void PutShowCurvatureComb (
        VARIANT_BOOL Show );
    HRESULT SplitAtPoints (
        double x1,
        double y1,
        double x2,
        double y2,
        VARIANT * SplitElement1,
        VARIANT * SplitElement2 );
    double GetLength ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct GeometryStyle2d * * Style ) = 0;
      virtual HRESULT __stdcall get_Relationships (
        /*[out,retval]*/ struct Relationships2d * * Relationships2d ) = 0;
      virtual HRESULT __stdcall put_Layer (
        /*[in]*/ BSTR Layer ) = 0;
      virtual HRESULT __stdcall get_Layer (
        /*[out,retval]*/ BSTR * Layer ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[in]*/ VARIANT Recurse,
        /*[in,lcid]*/ long Lcid,
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * Type ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * ZOrder ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[in]*/ VARIANT Recurse,
        /*[out,retval]*/ BSTR * Key ) = 0;
      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ IDispatch * * Document ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ double XFrom,
        /*[in]*/ double YFrom,
        /*[in]*/ double XTo,
        /*[in]*/ double YTo ) = 0;
      virtual HRESULT __stdcall raw_Scale (
        /*[in]*/ double Factor ) = 0;
      virtual HRESULT __stdcall raw_Rotate (
        /*[in]*/ double Angle,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[out]*/ double * XMinimum,
        /*[out]*/ double * YMinimum,
        /*[out]*/ double * XMaximum,
        /*[out]*/ double * YMaximum ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ VARIANT XDistance,
        /*[in]*/ VARIANT YDistance,
        /*[out,retval]*/ IDispatch * * NewObject ) = 0;
      virtual HRESULT __stdcall raw_Mirror (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ VARIANT BooleanCopyFlag,
        /*[out,retval]*/ IDispatch * * Object ) = 0;
      virtual HRESULT __stdcall raw_BringToFront ( ) = 0;
      virtual HRESULT __stdcall raw_BringForward ( ) = 0;
      virtual HRESULT __stdcall raw_SendToBack ( ) = 0;
      virtual HRESULT __stdcall raw_SendBackward ( ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall put_MajorRadius (
        /*[in]*/ double MajorRadius ) = 0;
      virtual HRESULT __stdcall get_MajorRadius (
        /*[out,retval]*/ double * MajorRadius ) = 0;
      virtual HRESULT __stdcall get_MinorRadius (
        /*[out,retval]*/ double * MinorRadius ) = 0;
      virtual HRESULT __stdcall put_MinorRadius (
        /*[in]*/ double MinorRadius ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ enum Geom2dOrientationConstants Orientation ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ enum Geom2dOrientationConstants * Orientation ) = 0;
      virtual HRESULT __stdcall get_RotationAngle (
        /*[out,retval]*/ double * Angle ) = 0;
      virtual HRESULT __stdcall put_RotationAngle (
        /*[in]*/ double Angle ) = 0;
      virtual HRESULT __stdcall get_MinorMajorRatio (
        /*[out,retval]*/ double * Ratio ) = 0;
      virtual HRESULT __stdcall put_MinorMajorRatio (
        /*[in]*/ double Ratio ) = 0;
      virtual HRESULT __stdcall get_Circumference (
        /*[out,retval]*/ double * Circumference ) = 0;
      virtual HRESULT __stdcall get_Area (
        /*[out,retval]*/ double * Area ) = 0;
      virtual HRESULT __stdcall raw_GetCenterPoint (
        /*[out]*/ double * x,
        /*[out]*/ double * y ) = 0;
      virtual HRESULT __stdcall raw_SetCenterPoint (
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_GetMajorAxis (
        /*[out]*/ double * x,
        /*[out]*/ double * y ) = 0;
      virtual HRESULT __stdcall raw_SetMajorAxis (
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_GetMinorAxis (
        /*[out]*/ double * x,
        /*[out]*/ double * y ) = 0;
      virtual HRESULT __stdcall raw_SetMinorAxis (
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_Trim (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ IDispatch * CutObj1,
        /*[in]*/ VARIANT CutObj2 = vtMissing ) = 0;
      virtual HRESULT __stdcall get_KeyPointCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_GetKeyPoint (
        /*[in]*/ long Index,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ enum TGFramework::KeyPointType * KeypointType,
        /*[out]*/ long * HandleType ) = 0;
      virtual HRESULT __stdcall raw_SetKeyPoint (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall get_SegmentedStyleCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_AddSegmentedStyle (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ IDispatch * Style ) = 0;
      virtual HRESULT __stdcall raw_GetSegmentedStyle (
        /*[in]*/ long Index,
        /*[out]*/ double * x1,
        /*[out]*/ double * y1,
        /*[out]*/ double * x2,
        /*[out]*/ double * y2,
        /*[out]*/ IDispatch * * Style ) = 0;
      virtual HRESULT __stdcall raw_SetSegmentedStyle (
        /*[in]*/ long Index,
        /*[in]*/ IDispatch * Style ) = 0;
      virtual HRESULT __stdcall raw_RemoveSegmentedStyle (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllSegmentedStyles ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllSegmentedStylesBetween (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2 ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
      virtual HRESULT __stdcall get_ShowCurvatureComb (
        /*[out,retval]*/ VARIANT_BOOL * Show ) = 0;
      virtual HRESULT __stdcall put_ShowCurvatureComb (
        /*[in]*/ VARIANT_BOOL Show ) = 0;
      virtual HRESULT __stdcall raw_SplitAtPoints (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[out]*/ VARIANT * SplitElement1,
        /*[out]*/ VARIANT * SplitElement2 ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * Length ) = 0;
};

struct __declspec(uuid("3d73a7a0-06a9-11ce-976e-08003601e26d"))
BSplineCurves2d : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    BSplineCurve2dPtr Item (
        const _variant_t & Index );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    BSplineCurve2dPtr AddByPoints (
        long Order,
        long ArraySize,
        SAFEARRAY * * Array );
    BSplineCurve2dPtr Add (
        long Degree,
        long NumberOfPoles,
        SAFEARRAY * * Poles,
        SAFEARRAY * * Knots,
        const _variant_t & Weights = vtMissing );
    BSplineCurve2dPtr AddByPointsWithCloseOption (
        long Order,
        long ArraySize,
        SAFEARRAY * * Array,
        VARIANT_BOOL bCreateTangentiallyClosedCurve );
};

struct __declspec(uuid("787328e0-06a9-11ce-976e-08003601e26d"))
BSplineCurve2d : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetStyle))
    GeometryStyle2dPtr Style;
    __declspec(property(get=GetRelationships))
    Relationships2dPtr Relationships;
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetSegmentedStyleCount))
    long SegmentedStyleCount;
    __declspec(property(get=GetShowCurvatureComb,put=PutShowCurvatureComb))
    VARIANT_BOOL ShowCurvatureComb;
    __declspec(property(get=GetShowControlPolygon,put=PutShowControlPolygon))
    VARIANT_BOOL ShowControlPolygon;
    __declspec(property(get=GetFlexible,put=PutFlexible))
    VARIANT_BOOL Flexible;
    __declspec(property(get=GetShapeEdit,put=PutShapeEdit))
    VARIANT_BOOL ShapeEdit;
    __declspec(property(get=GetDerived))
    VARIANT_BOOL Derived;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetIsTangentiallyClosedCurve,put=PutIsTangentiallyClosedCurve))
    VARIANT_BOOL IsTangentiallyClosedCurve;
    __declspec(property(get=GetOrder))
    long Order;
    __declspec(property(get=GetLength))
    double Length;
    __declspec(property(get=GetForm))
    enum Geom2dFormConstants Form;
    __declspec(property(get=GetScope))
    enum Geom2dScopeConstants Scope;
    __declspec(property(get=GetPoleCount))
    long PoleCount;
    __declspec(property(get=GetNodeCount))
    long NodeCount;
    __declspec(property(get=GetArea))
    double Area;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetZOrder))
    long ZOrder;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    GeometryStyle2dPtr GetStyle ( );
    Relationships2dPtr GetRelationships ( );
    _bstr_t GetLayer ( );
    void PutLayer (
        _bstr_t _arg1 );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    long GetOrder ( );
    double GetLength ( );
    enum Geom2dFormConstants GetForm ( );
    enum Geom2dScopeConstants GetScope ( );
    long GetPoleCount ( );
    long GetNodeCount ( );
    double GetArea ( );
    HRESULT GetPole (
        long Index,
        double * x,
        double * y );
    HRESULT SetPole (
        long Index,
        double x,
        double y );
    HRESULT GetNode (
        long Index,
        double * x,
        double * y );
    HRESULT SetNode (
        long Index,
        double x,
        double y );
    HRESULT DeleteNode (
        long Index );
    HRESULT InsertNode (
        long Index,
        double x,
        double y );
    long GetNearestNode (
        double x,
        double y );
    HRESULT GetCentroid (
        double * x,
        double * y );
    HRESULT Trim (
        double x,
        double y,
        IDispatch * CutObj1,
        const _variant_t & CutObj2 = vtMissing );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    HRESULT Extend (
        double x,
        double y,
        IDispatch * TargetObj );
    HRESULT CornerTrim (
        double xKeep,
        double yKeep,
        IDispatch * TargetObj,
        double xTargetKeep,
        double yTargetKeep );
    long GetSegmentedStyleCount ( );
    HRESULT AddSegmentedStyle (
        double x1,
        double y1,
        double x2,
        double y2,
        IDispatch * Style );
    HRESULT GetSegmentedStyle (
        long Index,
        double * x1,
        double * y1,
        double * x2,
        double * y2,
        IDispatch * * Style );
    HRESULT SetSegmentedStyle (
        long Index,
        IDispatch * Style );
    HRESULT RemoveSegmentedStyle (
        long Index );
    HRESULT RemoveAllSegmentedStyles ( );
    HRESULT RemoveAllSegmentedStylesBetween (
        double x1,
        double y1,
        double x2,
        double y2 );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    VARIANT_BOOL GetShowCurvatureComb ( );
    void PutShowCurvatureComb (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowControlPolygon ( );
    void PutShowControlPolygon (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetFlexible ( );
    void PutFlexible (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShapeEdit ( );
    void PutShapeEdit (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetDerived ( );
    HRESULT GetClosestPoint (
        double x,
        double y,
        VARIANT * Point = &vtMissing,
        VARIANT * Parameter = &vtMissing );
    HRESULT InsertNodeAtPoint (
        double x,
        double y,
        VARIANT * InsertedNodeIndex = &vtMissing );
    HRESULT GetParameterRange (
        double * Start,
        double * End );
    HRESULT Reparameterize ( );
    HRESULT Evaluate (
        double Parameter,
        VARIANT * Point = &vtMissing,
        VARIANT * FirstDerivative = &vtMissing,
        VARIANT * SecondDerivative = &vtMissing,
        VARIANT * Curvature = &vtMissing );
    HRESULT GetData (
        VARIANT * NumberOfNodes = &vtMissing,
        VARIANT * Nodes = &vtMissing,
        VARIANT * NumberOfPoles = &vtMissing,
        VARIANT * Poles = &vtMissing,
        VARIANT * Knots = &vtMissing,
        VARIANT * Rational = &vtMissing,
        VARIANT * Weights = &vtMissing,
        VARIANT * Degree = &vtMissing,
        VARIANT * Form = &vtMissing,
        VARIANT * Scope = &vtMissing );
    HRESULT SetDegree (
        long Degree );
    HRESULT Simplify (
        double Tolerance );
    HRESULT SplitAtPoint (
        double x,
        double y,
        VARIANT * OtherSplitElement = &vtMissing );
    HRESULT SplitAtPoints (
        double x1,
        double y1,
        double x2,
        double y2,
        VARIANT * SplitElement1 = &vtMissing,
        VARIANT * SplitElement2 = &vtMissing );
    VARIANT_BOOL GetIsTangentiallyClosedCurve ( );
    void PutIsTangentiallyClosedCurve (
        VARIANT_BOOL _arg1 );
};

struct __declspec(uuid("2b32cc40-06a9-11ce-976e-08003601e26d"))
_IBspCurves2dAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    BSplineCurve2dPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    BSplineCurve2dPtr AddByPoints (
        long Order,
        long ArraySize,
        SAFEARRAY * * Array );
    BSplineCurve2dPtr Add (
        long Degree,
        long NumberOfPoles,
        SAFEARRAY * * Poles,
        SAFEARRAY * * Knots,
        const _variant_t & Weights = vtMissing );
    BSplineCurve2dPtr AddByPointsWithCloseOption (
        long Order,
        long ArraySize,
        SAFEARRAY * * Array,
        VARIANT_BOOL bCreateTangentiallyClosedCurve );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct BSplineCurve2d * * Object ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Enum ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_AddByPoints (
        /*[in]*/ long Order,
        /*[in]*/ long ArraySize,
        /*[in]*/ SAFEARRAY * * Array,
        /*[out,retval]*/ struct BSplineCurve2d * * Object ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ long Degree,
        /*[in]*/ long NumberOfPoles,
        /*[in]*/ SAFEARRAY * * Poles,
        /*[in]*/ SAFEARRAY * * Knots,
        /*[in]*/ VARIANT Weights,
        /*[out,retval]*/ struct BSplineCurve2d * * Object ) = 0;
      virtual HRESULT __stdcall raw_AddByPointsWithCloseOption (
        /*[in]*/ long Order,
        /*[in]*/ long ArraySize,
        /*[in]*/ SAFEARRAY * * Array,
        /*[in]*/ VARIANT_BOOL bCreateTangentiallyClosedCurve,
        /*[out,retval]*/ struct BSplineCurve2d * * Object ) = 0;
};

enum Geom2dFormConstants
{
    igGeom2dFormUnknown = 0,
    igGeom2dFormOpen = 1,
    igGeom2dFormClosed = 2,
    igGeom2dFormClosedWithTangents = 3,
    igGeom2dFormClosedWithCurvature = 4,
    igGeom2dFormClosedWithTorsion = 5,
    igGeom2dFormClosedPeriodic = 6
};

enum Geom2dScopeConstants
{
    igGeom2dScopeUnknown = 0,
    igGeom2dScopePlaner = 1,
    igGeom2dScopeColinear = 2,
    igGeom2dScopeDegenerate = 3,
    igGeom2dScopeNonplaner = 4
};

struct __declspec(uuid("6ab895a0-06a9-11ce-976e-08003601e26d"))
_IBspCurve2dAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetStyle))
    GeometryStyle2dPtr Style;
    __declspec(property(get=GetRelationships))
    Relationships2dPtr Relationships;
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetSegmentedStyleCount))
    long SegmentedStyleCount;
    __declspec(property(get=GetShowCurvatureComb,put=PutShowCurvatureComb))
    VARIANT_BOOL ShowCurvatureComb;
    __declspec(property(get=GetShowControlPolygon,put=PutShowControlPolygon))
    VARIANT_BOOL ShowControlPolygon;
    __declspec(property(get=GetFlexible,put=PutFlexible))
    VARIANT_BOOL Flexible;
    __declspec(property(get=GetShapeEdit,put=PutShapeEdit))
    VARIANT_BOOL ShapeEdit;
    __declspec(property(get=GetDerived))
    VARIANT_BOOL Derived;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetIsTangentiallyClosedCurve,put=PutIsTangentiallyClosedCurve))
    VARIANT_BOOL IsTangentiallyClosedCurve;
    __declspec(property(get=GetOrder))
    long Order;
    __declspec(property(get=GetLength))
    double Length;
    __declspec(property(get=GetForm))
    enum Geom2dFormConstants Form;
    __declspec(property(get=GetScope))
    enum Geom2dScopeConstants Scope;
    __declspec(property(get=GetPoleCount))
    long PoleCount;
    __declspec(property(get=GetNodeCount))
    long NodeCount;
    __declspec(property(get=GetArea))
    double Area;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[][];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetZOrder))
    long ZOrder;

    //
    // Wrapper methods for error-handling
    //

    GeometryStyle2dPtr GetStyle ( );
    Relationships2dPtr GetRelationships ( );
    _bstr_t GetLayer ( );
    void PutLayer (
        _bstr_t Layer );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse,
        long Lcid = 0 );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    long GetOrder ( );
    double GetLength ( );
    enum Geom2dFormConstants GetForm ( );
    enum Geom2dScopeConstants GetScope ( );
    long GetPoleCount ( );
    long GetNodeCount ( );
    double GetArea ( );
    HRESULT GetPole (
        long Index,
        double * x,
        double * y );
    HRESULT SetPole (
        long Index,
        double x,
        double y );
    HRESULT GetNode (
        long Index,
        double * x,
        double * y );
    HRESULT SetNode (
        long Index,
        double x,
        double y );
    HRESULT DeleteNode (
        long Index );
    HRESULT InsertNode (
        long Index,
        double x,
        double y );
    long GetNearestNode (
        double x,
        double y );
    HRESULT GetCentroid (
        double * x,
        double * y );
    HRESULT Trim (
        double x,
        double y,
        IDispatch * CutObj1,
        const _variant_t & CutObj2 = vtMissing );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    HRESULT Extend (
        double x,
        double y,
        IDispatch * TargetObj );
    HRESULT CornerTrim (
        double xKeep,
        double yKeep,
        IDispatch * TargetObj,
        double xTargetKeep,
        double yTargetKeep );
    long GetSegmentedStyleCount ( );
    HRESULT AddSegmentedStyle (
        double x1,
        double y1,
        double x2,
        double y2,
        IDispatch * Style );
    HRESULT GetSegmentedStyle (
        long Index,
        double * x1,
        double * y1,
        double * x2,
        double * y2,
        IDispatch * * Style );
    HRESULT SetSegmentedStyle (
        long Index,
        IDispatch * Style );
    HRESULT RemoveSegmentedStyle (
        long Index );
    HRESULT RemoveAllSegmentedStyles ( );
    HRESULT RemoveAllSegmentedStylesBetween (
        double x1,
        double y1,
        double x2,
        double y2 );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    VARIANT_BOOL GetShowCurvatureComb ( );
    void PutShowCurvatureComb (
        VARIANT_BOOL Show );
    VARIANT_BOOL GetShowControlPolygon ( );
    void PutShowControlPolygon (
        VARIANT_BOOL Show );
    VARIANT_BOOL GetFlexible ( );
    void PutFlexible (
        VARIANT_BOOL Flexible );
    VARIANT_BOOL GetShapeEdit ( );
    void PutShapeEdit (
        VARIANT_BOOL ShapeEdit );
    VARIANT_BOOL GetDerived ( );
    HRESULT GetClosestPoint (
        double x,
        double y,
        VARIANT * Point,
        VARIANT * Parameter );
    HRESULT InsertNodeAtPoint (
        double x,
        double y,
        VARIANT * InsertedNodeIndex );
    HRESULT GetParameterRange (
        double * Start,
        double * End );
    HRESULT Reparameterize ( );
    HRESULT Evaluate (
        double Parameter,
        VARIANT * Point,
        VARIANT * FirstDerivative,
        VARIANT * SecondDerivative,
        VARIANT * Curvature );
    HRESULT GetData (
        VARIANT * NumberOfNodes,
        VARIANT * Nodes,
        VARIANT * NumberOfPoles,
        VARIANT * Poles,
        VARIANT * Knots,
        VARIANT * Rational,
        VARIANT * Weights,
        VARIANT * Degree,
        VARIANT * Form,
        VARIANT * Scope );
    HRESULT SetDegree (
        long Degree );
    HRESULT Simplify (
        double Tolerance );
    HRESULT SplitAtPoint (
        double x,
        double y,
        VARIANT * OtherSplitElement );
    HRESULT SplitAtPoints (
        double x1,
        double y1,
        double x2,
        double y2,
        VARIANT * SplitElement1,
        VARIANT * SplitElement2 );
    VARIANT_BOOL GetIsTangentiallyClosedCurve ( );
    void PutIsTangentiallyClosedCurve (
        VARIANT_BOOL pbIsClosedCurve );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct GeometryStyle2d * * Style ) = 0;
      virtual HRESULT __stdcall get_Relationships (
        /*[out,retval]*/ struct Relationships2d * * Relationships2d ) = 0;
      virtual HRESULT __stdcall get_Layer (
        /*[out,retval]*/ BSTR * Layer ) = 0;
      virtual HRESULT __stdcall put_Layer (
        /*[in]*/ BSTR Layer ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[in]*/ VARIANT Recurse,
        /*[in,lcid]*/ long Lcid,
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * Type ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * ZOrder ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[in]*/ VARIANT Recurse,
        /*[out,retval]*/ BSTR * Key ) = 0;
      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ IDispatch * * Document ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ double XFrom,
        /*[in]*/ double YFrom,
        /*[in]*/ double XTo,
        /*[in]*/ double YTo ) = 0;
      virtual HRESULT __stdcall raw_Scale (
        /*[in]*/ double Factor ) = 0;
      virtual HRESULT __stdcall raw_Rotate (
        /*[in]*/ double Angle,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[out]*/ double * XMinimum,
        /*[out]*/ double * YMinimum,
        /*[out]*/ double * XMaximum,
        /*[out]*/ double * YMaximum ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ VARIANT XDistance,
        /*[in]*/ VARIANT YDistance,
        /*[out,retval]*/ IDispatch * * NewObject ) = 0;
      virtual HRESULT __stdcall raw_Mirror (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ VARIANT BooleanCopyFlag,
        /*[out,retval]*/ IDispatch * * Object ) = 0;
      virtual HRESULT __stdcall raw_BringToFront ( ) = 0;
      virtual HRESULT __stdcall raw_BringForward ( ) = 0;
      virtual HRESULT __stdcall raw_SendToBack ( ) = 0;
      virtual HRESULT __stdcall raw_SendBackward ( ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall get_Order (
        /*[out,retval]*/ long * Order ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * Length ) = 0;
      virtual HRESULT __stdcall get_Form (
        /*[out,retval]*/ enum Geom2dFormConstants * Form ) = 0;
      virtual HRESULT __stdcall get_Scope (
        /*[out,retval]*/ enum Geom2dScopeConstants * Scope ) = 0;
      virtual HRESULT __stdcall get_PoleCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_NodeCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Area (
        /*[out,retval]*/ double * Area ) = 0;
      virtual HRESULT __stdcall raw_GetPole (
        /*[in]*/ long Index,
        /*[out]*/ double * x,
        /*[out]*/ double * y ) = 0;
      virtual HRESULT __stdcall raw_SetPole (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_GetNode (
        /*[in]*/ long Index,
        /*[out]*/ double * x,
        /*[out]*/ double * y ) = 0;
      virtual HRESULT __stdcall raw_SetNode (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_DeleteNode (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_InsertNode (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_GetNearestNode (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall raw_GetCentroid (
        /*[out]*/ double * x,
        /*[out]*/ double * y ) = 0;
      virtual HRESULT __stdcall raw_Trim (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ IDispatch * CutObj1,
        /*[in]*/ VARIANT CutObj2 = vtMissing ) = 0;
      virtual HRESULT __stdcall get_KeyPointCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_GetKeyPoint (
        /*[in]*/ long Index,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ enum TGFramework::KeyPointType * KeypointType,
        /*[out]*/ long * HandleType ) = 0;
      virtual HRESULT __stdcall raw_SetKeyPoint (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_Extend (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ IDispatch * TargetObj ) = 0;
      virtual HRESULT __stdcall raw_CornerTrim (
        /*[in]*/ double xKeep,
        /*[in]*/ double yKeep,
        /*[in]*/ IDispatch * TargetObj,
        /*[in]*/ double xTargetKeep,
        /*[in]*/ double yTargetKeep ) = 0;
      virtual HRESULT __stdcall get_SegmentedStyleCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_AddSegmentedStyle (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ IDispatch * Style ) = 0;
      virtual HRESULT __stdcall raw_GetSegmentedStyle (
        /*[in]*/ long Index,
        /*[out]*/ double * x1,
        /*[out]*/ double * y1,
        /*[out]*/ double * x2,
        /*[out]*/ double * y2,
        /*[out]*/ IDispatch * * Style ) = 0;
      virtual HRESULT __stdcall raw_SetSegmentedStyle (
        /*[in]*/ long Index,
        /*[in]*/ IDispatch * Style ) = 0;
      virtual HRESULT __stdcall raw_RemoveSegmentedStyle (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllSegmentedStyles ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllSegmentedStylesBetween (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2 ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
      virtual HRESULT __stdcall get_ShowCurvatureComb (
        /*[out,retval]*/ VARIANT_BOOL * Show ) = 0;
      virtual HRESULT __stdcall put_ShowCurvatureComb (
        /*[in]*/ VARIANT_BOOL Show ) = 0;
      virtual HRESULT __stdcall get_ShowControlPolygon (
        /*[out,retval]*/ VARIANT_BOOL * Show ) = 0;
      virtual HRESULT __stdcall put_ShowControlPolygon (
        /*[in]*/ VARIANT_BOOL Show ) = 0;
      virtual HRESULT __stdcall get_Flexible (
        /*[out,retval]*/ VARIANT_BOOL * Flexible ) = 0;
      virtual HRESULT __stdcall put_Flexible (
        /*[in]*/ VARIANT_BOOL Flexible ) = 0;
      virtual HRESULT __stdcall get_ShapeEdit (
        /*[out,retval]*/ VARIANT_BOOL * ShapeEdit ) = 0;
      virtual HRESULT __stdcall put_ShapeEdit (
        /*[in]*/ VARIANT_BOOL ShapeEdit ) = 0;
      virtual HRESULT __stdcall get_Derived (
        /*[out,retval]*/ VARIANT_BOOL * Derived ) = 0;
      virtual HRESULT __stdcall raw_GetClosestPoint (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[out]*/ VARIANT * Point,
        /*[out]*/ VARIANT * Parameter ) = 0;
      virtual HRESULT __stdcall raw_InsertNodeAtPoint (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[out]*/ VARIANT * InsertedNodeIndex ) = 0;
      virtual HRESULT __stdcall raw_GetParameterRange (
        /*[out]*/ double * Start,
        /*[out]*/ double * End ) = 0;
      virtual HRESULT __stdcall raw_Reparameterize ( ) = 0;
      virtual HRESULT __stdcall raw_Evaluate (
        /*[in]*/ double Parameter,
        /*[out]*/ VARIANT * Point,
        /*[out]*/ VARIANT * FirstDerivative,
        /*[out]*/ VARIANT * SecondDerivative,
        /*[out]*/ VARIANT * Curvature ) = 0;
      virtual HRESULT __stdcall raw_GetData (
        /*[out]*/ VARIANT * NumberOfNodes,
        /*[out]*/ VARIANT * Nodes,
        /*[out]*/ VARIANT * NumberOfPoles,
        /*[out]*/ VARIANT * Poles,
        /*[out]*/ VARIANT * Knots,
        /*[out]*/ VARIANT * Rational,
        /*[out]*/ VARIANT * Weights,
        /*[out]*/ VARIANT * Degree,
        /*[out]*/ VARIANT * Form,
        /*[out]*/ VARIANT * Scope ) = 0;
      virtual HRESULT __stdcall raw_SetDegree (
        /*[in]*/ long Degree ) = 0;
      virtual HRESULT __stdcall raw_Simplify (
        /*[in]*/ double Tolerance ) = 0;
      virtual HRESULT __stdcall raw_SplitAtPoint (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[out]*/ VARIANT * OtherSplitElement ) = 0;
      virtual HRESULT __stdcall raw_SplitAtPoints (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[out]*/ VARIANT * SplitElement1,
        /*[out]*/ VARIANT * SplitElement2 ) = 0;
      virtual HRESULT __stdcall get_IsTangentiallyClosedCurve (
        /*[out,retval]*/ VARIANT_BOOL * pbIsClosedCurve ) = 0;
      virtual HRESULT __stdcall put_IsTangentiallyClosedCurve (
        /*[in]*/ VARIANT_BOOL pbIsClosedCurve ) = 0;
};

struct __declspec(uuid("e25b3400-06b0-11ce-976e-08003601e26d"))
Points2d : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    Point2dPtr Item (
        const _variant_t & Index );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    Point2dPtr Add (
        double x,
        double y );
};

struct __declspec(uuid("03884020-06b1-11ce-976e-08003601e26d"))
Point2d : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=Getx,put=Putx))
    double x;
    __declspec(property(get=GetStyle))
    GeometryStyle2dPtr Style;
    __declspec(property(get=GetRelationships))
    Relationships2dPtr Relationships;
    __declspec(property(get=Gety,put=Puty))
    double y;
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetSegmentedStyleCount))
    long SegmentedStyleCount;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    GeometryStyle2dPtr GetStyle ( );
    Relationships2dPtr GetRelationships ( );
    void PutLayer (
        _bstr_t _arg1 );
    _bstr_t GetLayer ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    void Putx (
        double _arg1 );
    double Getx ( );
    void Puty (
        double _arg1 );
    double Gety ( );
    HRESULT GetPoint (
        double * x,
        double * y );
    HRESULT SetPoint (
        double x,
        double y );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    long GetSegmentedStyleCount ( );
    HRESULT AddSegmentedStyle (
        double x1,
        double y1,
        double x2,
        double y2,
        IDispatch * Style );
    HRESULT GetSegmentedStyle (
        long Index,
        double * x1,
        double * y1,
        double * x2,
        double * y2,
        IDispatch * * Style );
    HRESULT SetSegmentedStyle (
        long Index,
        IDispatch * Style );
    HRESULT RemoveSegmentedStyle (
        long Index );
    HRESULT RemoveAllSegmentedStyles ( );
    HRESULT RemoveAllSegmentedStylesBetween (
        double x1,
        double y1,
        double x2,
        double y2 );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
};

struct __declspec(uuid("d667fea0-06b0-11ce-976e-08003601e26d"))
_IPoints2dAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    Point2dPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    Point2dPtr Add (
        double x,
        double y );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Point2d * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Enum ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * App ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[out,retval]*/ struct Point2d * * Obj ) = 0;
};

struct __declspec(uuid("f8528600-06b0-11ce-976e-08003601e26d"))
_IPoint2dAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=Getx,put=Putx))
    double x;
    __declspec(property(get=GetStyle))
    GeometryStyle2dPtr Style;
    __declspec(property(get=GetRelationships))
    Relationships2dPtr Relationships;
    __declspec(property(get=Gety,put=Puty))
    double y;
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[][];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetSegmentedStyleCount))
    long SegmentedStyleCount;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    GeometryStyle2dPtr GetStyle ( );
    Relationships2dPtr GetRelationships ( );
    void PutLayer (
        _bstr_t Layer );
    _bstr_t GetLayer ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse,
        long Lcid = 0 );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    void Putx (
        double x );
    double Getx ( );
    void Puty (
        double y );
    double Gety ( );
    HRESULT GetPoint (
        double * x,
        double * y );
    HRESULT SetPoint (
        double x,
        double y );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    long GetSegmentedStyleCount ( );
    HRESULT AddSegmentedStyle (
        double x1,
        double y1,
        double x2,
        double y2,
        IDispatch * Style );
    HRESULT GetSegmentedStyle (
        long Index,
        double * x1,
        double * y1,
        double * x2,
        double * y2,
        IDispatch * * Style );
    HRESULT SetSegmentedStyle (
        long Index,
        IDispatch * Style );
    HRESULT RemoveSegmentedStyle (
        long Index );
    HRESULT RemoveAllSegmentedStyles ( );
    HRESULT RemoveAllSegmentedStylesBetween (
        double x1,
        double y1,
        double x2,
        double y2 );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct GeometryStyle2d * * Style ) = 0;
      virtual HRESULT __stdcall get_Relationships (
        /*[out,retval]*/ struct Relationships2d * * Relationships2d ) = 0;
      virtual HRESULT __stdcall put_Layer (
        /*[in]*/ BSTR Layer ) = 0;
      virtual HRESULT __stdcall get_Layer (
        /*[out,retval]*/ BSTR * Layer ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[in]*/ VARIANT Recurse,
        /*[in,lcid]*/ long Lcid,
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * Type ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * ZOrder ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[in]*/ VARIANT Recurse,
        /*[out,retval]*/ BSTR * Key ) = 0;
      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ IDispatch * * Document ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ double XFrom,
        /*[in]*/ double YFrom,
        /*[in]*/ double XTo,
        /*[in]*/ double YTo ) = 0;
      virtual HRESULT __stdcall raw_Scale (
        /*[in]*/ double Factor ) = 0;
      virtual HRESULT __stdcall raw_Rotate (
        /*[in]*/ double Angle,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[out]*/ double * XMinimum,
        /*[out]*/ double * YMinimum,
        /*[out]*/ double * XMaximum,
        /*[out]*/ double * YMaximum ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ VARIANT XDistance,
        /*[in]*/ VARIANT YDistance,
        /*[out,retval]*/ IDispatch * * NewObject ) = 0;
      virtual HRESULT __stdcall raw_Mirror (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ VARIANT BooleanCopyFlag,
        /*[out,retval]*/ IDispatch * * Object ) = 0;
      virtual HRESULT __stdcall raw_BringToFront ( ) = 0;
      virtual HRESULT __stdcall raw_BringForward ( ) = 0;
      virtual HRESULT __stdcall raw_SendToBack ( ) = 0;
      virtual HRESULT __stdcall raw_SendBackward ( ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall put_x (
        /*[in]*/ double x ) = 0;
      virtual HRESULT __stdcall get_x (
        /*[out,retval]*/ double * x ) = 0;
      virtual HRESULT __stdcall put_y (
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall get_y (
        /*[out,retval]*/ double * y ) = 0;
      virtual HRESULT __stdcall raw_GetPoint (
        /*[out]*/ double * x,
        /*[out]*/ double * y ) = 0;
      virtual HRESULT __stdcall raw_SetPoint (
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall get_KeyPointCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_GetKeyPoint (
        /*[in]*/ long Index,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ enum TGFramework::KeyPointType * KeypointType,
        /*[out]*/ long * HandleType ) = 0;
      virtual HRESULT __stdcall raw_SetKeyPoint (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall get_SegmentedStyleCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_AddSegmentedStyle (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ IDispatch * Style ) = 0;
      virtual HRESULT __stdcall raw_GetSegmentedStyle (
        /*[in]*/ long Index,
        /*[out]*/ double * x1,
        /*[out]*/ double * y1,
        /*[out]*/ double * x2,
        /*[out]*/ double * y2,
        /*[out]*/ IDispatch * * Style ) = 0;
      virtual HRESULT __stdcall raw_SetSegmentedStyle (
        /*[in]*/ long Index,
        /*[in]*/ IDispatch * Style ) = 0;
      virtual HRESULT __stdcall raw_RemoveSegmentedStyle (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllSegmentedStyles ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllSegmentedStylesBetween (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2 ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
};

struct __declspec(uuid("aa921170-1d6d-11ce-976e-08003601e26d"))
EllipticalArcs2d : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    EllipticalArc2dPtr Item (
        const _variant_t & Index );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    EllipticalArc2dPtr AddByCenter (
        double xCenter,
        double yCenter,
        double xMajorAxis,
        double yMajorAxis,
        double Ratio,
        enum Geom2dOrientationConstants Orientation,
        double StartAngle,
        double EndAngle );
    EllipticalArc2dPtr AddByStartEndEllipse (
        double StartAngle,
        double EndAngle,
        struct Ellipse2d * Ellipse );
};

struct __declspec(uuid("9102d890-1d6d-11ce-976e-08003601e26d"))
EllipticalArc2d : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetStyle))
    GeometryStyle2dPtr Style;
    __declspec(property(get=GetRelationships))
    Relationships2dPtr Relationships;
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetShowCurvatureComb,put=PutShowCurvatureComb))
    VARIANT_BOOL ShowCurvatureComb;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetMajorRadius,put=PutMajorRadius))
    double MajorRadius;
    __declspec(property(get=GetMinorRadius,put=PutMinorRadius))
    double MinorRadius;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum Geom2dOrientationConstants Orientation;
    __declspec(property(get=GetStartAngle,put=PutStartAngle))
    double StartAngle;
    __declspec(property(get=GetSweepAngle,put=PutSweepAngle))
    double SweepAngle;
    __declspec(property(get=GetRotationAngle,put=PutRotationAngle))
    double RotationAngle;
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetLength))
    double Length;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetSegmentedStyleCount))
    long SegmentedStyleCount;
    __declspec(property(get=GetZOrder))
    long ZOrder;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    GeometryStyle2dPtr GetStyle ( );
    Relationships2dPtr GetRelationships ( );
    void PutLayer (
        _bstr_t _arg1 );
    _bstr_t GetLayer ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    void PutMajorRadius (
        double _arg1 );
    double GetMajorRadius ( );
    void PutMinorRadius (
        double _arg1 );
    double GetMinorRadius ( );
    enum Geom2dOrientationConstants GetOrientation ( );
    void PutOrientation (
        enum Geom2dOrientationConstants _arg1 );
    void PutStartAngle (
        double _arg1 );
    double GetStartAngle ( );
    double GetSweepAngle ( );
    void PutSweepAngle (
        double _arg1 );
    double GetRotationAngle ( );
    void PutRotationAngle (
        double _arg1 );
    HRESULT GetStartPoint (
        double * x,
        double * y );
    HRESULT SetStartPoint (
        double x,
        double y );
    HRESULT GetEndPoint (
        double * x,
        double * y );
    HRESULT SetEndPoint (
        double x,
        double y );
    HRESULT GetCenterPoint (
        double * x,
        double * y );
    HRESULT SetCenterPoint (
        double x,
        double y );
    HRESULT GetMajorAxis (
        double * x,
        double * y );
    HRESULT SetMajorAxis (
        double x,
        double y );
    HRESULT GetMinorAxis (
        double * x,
        double * y );
    HRESULT SetMinorAxis (
        double x,
        double y );
    HRESULT Trim (
        double x,
        double y,
        IDispatch * CutObj1,
        const _variant_t & CutObj2 = vtMissing );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    HRESULT Extend (
        double x,
        double y,
        IDispatch * TargetObj );
    HRESULT CornerTrim (
        double xKeep,
        double yKeep,
        IDispatch * TargetObj,
        double xTargetKeep,
        double yTargetKeep );
    long GetSegmentedStyleCount ( );
    HRESULT AddSegmentedStyle (
        double x1,
        double y1,
        double x2,
        double y2,
        IDispatch * Style );
    HRESULT GetSegmentedStyle (
        long Index,
        double * x1,
        double * y1,
        double * x2,
        double * y2,
        IDispatch * * Style );
    HRESULT SetSegmentedStyle (
        long Index,
        IDispatch * Style );
    HRESULT RemoveSegmentedStyle (
        long Index );
    HRESULT RemoveAllSegmentedStyles ( );
    HRESULT RemoveAllSegmentedStylesBetween (
        double x1,
        double y1,
        double x2,
        double y2 );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    VARIANT_BOOL GetShowCurvatureComb ( );
    void PutShowCurvatureComb (
        VARIANT_BOOL _arg1 );
    HRESULT SplitAtPoint (
        double x,
        double y,
        VARIANT * OtherSplitElement = &vtMissing );
    double GetLength ( );
};

struct __declspec(uuid("9a52a510-1d6d-11ce-976e-08003601e26d"))
_IEllipArcs2dAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    EllipticalArc2dPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    EllipticalArc2dPtr AddByCenter (
        double xCenter,
        double yCenter,
        double xMajorAxis,
        double yMajorAxis,
        double Ratio,
        enum Geom2dOrientationConstants Orientation,
        double StartAngle,
        double EndAngle );
    EllipticalArc2dPtr AddByStartEndEllipse (
        double StartAngle,
        double EndAngle,
        struct Ellipse2d * Ellipse );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct EllipticalArc2d * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Enum ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * App ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_AddByCenter (
        /*[in]*/ double xCenter,
        /*[in]*/ double yCenter,
        /*[in]*/ double xMajorAxis,
        /*[in]*/ double yMajorAxis,
        /*[in]*/ double Ratio,
        /*[in]*/ enum Geom2dOrientationConstants Orientation,
        /*[in]*/ double StartAngle,
        /*[in]*/ double EndAngle,
        /*[out,retval]*/ struct EllipticalArc2d * * Obj ) = 0;
      virtual HRESULT __stdcall raw_AddByStartEndEllipse (
        /*[in]*/ double StartAngle,
        /*[in]*/ double EndAngle,
        /*[in]*/ struct Ellipse2d * Ellipse,
        /*[out,retval]*/ struct EllipticalArc2d * * Obj ) = 0;
};

struct __declspec(uuid("81c8b940-1d6d-11ce-976e-08003601e26d"))
_IEllipArc2dAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetStyle))
    GeometryStyle2dPtr Style;
    __declspec(property(get=GetRelationships))
    Relationships2dPtr Relationships;
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetShowCurvatureComb,put=PutShowCurvatureComb))
    VARIANT_BOOL ShowCurvatureComb;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetMajorRadius,put=PutMajorRadius))
    double MajorRadius;
    __declspec(property(get=GetMinorRadius,put=PutMinorRadius))
    double MinorRadius;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum Geom2dOrientationConstants Orientation;
    __declspec(property(get=GetStartAngle,put=PutStartAngle))
    double StartAngle;
    __declspec(property(get=GetSweepAngle,put=PutSweepAngle))
    double SweepAngle;
    __declspec(property(get=GetRotationAngle,put=PutRotationAngle))
    double RotationAngle;
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetLength))
    double Length;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[][];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetSegmentedStyleCount))
    long SegmentedStyleCount;
    __declspec(property(get=GetZOrder))
    long ZOrder;

    //
    // Wrapper methods for error-handling
    //

    GeometryStyle2dPtr GetStyle ( );
    Relationships2dPtr GetRelationships ( );
    void PutLayer (
        _bstr_t Layer );
    _bstr_t GetLayer ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse,
        long Lcid = 0 );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    void PutMajorRadius (
        double Radius );
    double GetMajorRadius ( );
    void PutMinorRadius (
        double Radius );
    double GetMinorRadius ( );
    enum Geom2dOrientationConstants GetOrientation ( );
    void PutOrientation (
        enum Geom2dOrientationConstants Orientation );
    void PutStartAngle (
        double Angle );
    double GetStartAngle ( );
    double GetSweepAngle ( );
    void PutSweepAngle (
        double Angle );
    double GetRotationAngle ( );
    void PutRotationAngle (
        double Angle );
    HRESULT GetStartPoint (
        double * x,
        double * y );
    HRESULT SetStartPoint (
        double x,
        double y );
    HRESULT GetEndPoint (
        double * x,
        double * y );
    HRESULT SetEndPoint (
        double x,
        double y );
    HRESULT GetCenterPoint (
        double * x,
        double * y );
    HRESULT SetCenterPoint (
        double x,
        double y );
    HRESULT GetMajorAxis (
        double * x,
        double * y );
    HRESULT SetMajorAxis (
        double x,
        double y );
    HRESULT GetMinorAxis (
        double * x,
        double * y );
    HRESULT SetMinorAxis (
        double x,
        double y );
    HRESULT Trim (
        double x,
        double y,
        IDispatch * CutObj1,
        const _variant_t & CutObj2 = vtMissing );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    HRESULT Extend (
        double x,
        double y,
        IDispatch * TargetObj );
    HRESULT CornerTrim (
        double xKeep,
        double yKeep,
        IDispatch * TargetObj,
        double xTargetKeep,
        double yTargetKeep );
    long GetSegmentedStyleCount ( );
    HRESULT AddSegmentedStyle (
        double x1,
        double y1,
        double x2,
        double y2,
        IDispatch * Style );
    HRESULT GetSegmentedStyle (
        long Index,
        double * x1,
        double * y1,
        double * x2,
        double * y2,
        IDispatch * * Style );
    HRESULT SetSegmentedStyle (
        long Index,
        IDispatch * Style );
    HRESULT RemoveSegmentedStyle (
        long Index );
    HRESULT RemoveAllSegmentedStyles ( );
    HRESULT RemoveAllSegmentedStylesBetween (
        double x1,
        double y1,
        double x2,
        double y2 );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    VARIANT_BOOL GetShowCurvatureComb ( );
    void PutShowCurvatureComb (
        VARIANT_BOOL Show );
    HRESULT SplitAtPoint (
        double x,
        double y,
        VARIANT * OtherSplitElement );
    double GetLength ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct GeometryStyle2d * * Style ) = 0;
      virtual HRESULT __stdcall get_Relationships (
        /*[out,retval]*/ struct Relationships2d * * Relationships2d ) = 0;
      virtual HRESULT __stdcall put_Layer (
        /*[in]*/ BSTR Layer ) = 0;
      virtual HRESULT __stdcall get_Layer (
        /*[out,retval]*/ BSTR * Layer ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[in]*/ VARIANT Recurse,
        /*[in,lcid]*/ long Lcid,
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * Type ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * ZOrder ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[in]*/ VARIANT Recurse,
        /*[out,retval]*/ BSTR * Key ) = 0;
      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ IDispatch * * Document ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ double XFrom,
        /*[in]*/ double YFrom,
        /*[in]*/ double XTo,
        /*[in]*/ double YTo ) = 0;
      virtual HRESULT __stdcall raw_Scale (
        /*[in]*/ double Factor ) = 0;
      virtual HRESULT __stdcall raw_Rotate (
        /*[in]*/ double Angle,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[out]*/ double * XMinimum,
        /*[out]*/ double * YMinimum,
        /*[out]*/ double * XMaximum,
        /*[out]*/ double * YMaximum ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ VARIANT XDistance,
        /*[in]*/ VARIANT YDistance,
        /*[out,retval]*/ IDispatch * * NewObject ) = 0;
      virtual HRESULT __stdcall raw_Mirror (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ VARIANT BooleanCopyFlag,
        /*[out,retval]*/ IDispatch * * Object ) = 0;
      virtual HRESULT __stdcall raw_BringToFront ( ) = 0;
      virtual HRESULT __stdcall raw_BringForward ( ) = 0;
      virtual HRESULT __stdcall raw_SendToBack ( ) = 0;
      virtual HRESULT __stdcall raw_SendBackward ( ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall put_MajorRadius (
        /*[in]*/ double Radius ) = 0;
      virtual HRESULT __stdcall get_MajorRadius (
        /*[out,retval]*/ double * Radius ) = 0;
      virtual HRESULT __stdcall put_MinorRadius (
        /*[in]*/ double Radius ) = 0;
      virtual HRESULT __stdcall get_MinorRadius (
        /*[out,retval]*/ double * Radius ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ enum Geom2dOrientationConstants * Orientation ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ enum Geom2dOrientationConstants Orientation ) = 0;
      virtual HRESULT __stdcall put_StartAngle (
        /*[in]*/ double Angle ) = 0;
      virtual HRESULT __stdcall get_StartAngle (
        /*[out,retval]*/ double * Angle ) = 0;
      virtual HRESULT __stdcall get_SweepAngle (
        /*[out,retval]*/ double * Angle ) = 0;
      virtual HRESULT __stdcall put_SweepAngle (
        /*[in]*/ double Angle ) = 0;
      virtual HRESULT __stdcall get_RotationAngle (
        /*[out,retval]*/ double * Angle ) = 0;
      virtual HRESULT __stdcall put_RotationAngle (
        /*[in]*/ double Angle ) = 0;
      virtual HRESULT __stdcall raw_GetStartPoint (
        /*[out]*/ double * x,
        /*[out]*/ double * y ) = 0;
      virtual HRESULT __stdcall raw_SetStartPoint (
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_GetEndPoint (
        /*[out]*/ double * x,
        /*[out]*/ double * y ) = 0;
      virtual HRESULT __stdcall raw_SetEndPoint (
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_GetCenterPoint (
        /*[out]*/ double * x,
        /*[out]*/ double * y ) = 0;
      virtual HRESULT __stdcall raw_SetCenterPoint (
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_GetMajorAxis (
        /*[out]*/ double * x,
        /*[out]*/ double * y ) = 0;
      virtual HRESULT __stdcall raw_SetMajorAxis (
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_GetMinorAxis (
        /*[out]*/ double * x,
        /*[out]*/ double * y ) = 0;
      virtual HRESULT __stdcall raw_SetMinorAxis (
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_Trim (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ IDispatch * CutObj1,
        /*[in]*/ VARIANT CutObj2 = vtMissing ) = 0;
      virtual HRESULT __stdcall get_KeyPointCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_GetKeyPoint (
        /*[in]*/ long Index,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ enum TGFramework::KeyPointType * KeypointType,
        /*[out]*/ long * HandleType ) = 0;
      virtual HRESULT __stdcall raw_SetKeyPoint (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_Extend (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ IDispatch * TargetObj ) = 0;
      virtual HRESULT __stdcall raw_CornerTrim (
        /*[in]*/ double xKeep,
        /*[in]*/ double yKeep,
        /*[in]*/ IDispatch * TargetObj,
        /*[in]*/ double xTargetKeep,
        /*[in]*/ double yTargetKeep ) = 0;
      virtual HRESULT __stdcall get_SegmentedStyleCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_AddSegmentedStyle (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ IDispatch * Style ) = 0;
      virtual HRESULT __stdcall raw_GetSegmentedStyle (
        /*[in]*/ long Index,
        /*[out]*/ double * x1,
        /*[out]*/ double * y1,
        /*[out]*/ double * x2,
        /*[out]*/ double * y2,
        /*[out]*/ IDispatch * * Style ) = 0;
      virtual HRESULT __stdcall raw_SetSegmentedStyle (
        /*[in]*/ long Index,
        /*[in]*/ IDispatch * Style ) = 0;
      virtual HRESULT __stdcall raw_RemoveSegmentedStyle (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllSegmentedStyles ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllSegmentedStylesBetween (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2 ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
      virtual HRESULT __stdcall get_ShowCurvatureComb (
        /*[out,retval]*/ VARIANT_BOOL * Show ) = 0;
      virtual HRESULT __stdcall put_ShowCurvatureComb (
        /*[in]*/ VARIANT_BOOL Show ) = 0;
      virtual HRESULT __stdcall raw_SplitAtPoint (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[out]*/ VARIANT * OtherSplitElement ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * Length ) = 0;
};

struct __declspec(uuid("ef0154a0-53e5-11ce-bd99-08003671f901"))
Curves2d : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    Curve2dPtr Item (
        const _variant_t & Index );
    Curve2dPtr AddByPoints (
        long PointCount,
        SAFEARRAY * * Points,
        const _variant_t & FitType = vtMissing,
        const _variant_t & Closed = vtMissing );
};

struct __declspec(uuid("2bdde510-531f-11ce-bd99-08003671f901"))
Curve2d : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStyle))
    GeometryStyle2dPtr Style;
    __declspec(property(get=GetRelationships))
    Relationships2dPtr Relationships;
    __declspec(property(get=GetLength))
    double Length;
    __declspec(property(get=GetVertexCount))
    long VertexCount;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetFitType,put=PutFitType))
    enum CurveFitTypeConstants FitType;
    __declspec(property(get=GetClosed))
    VARIANT_BOOL Closed;
    __declspec(property(get=GetArea))
    double Area;
    __declspec(property(get=GetFitTolerance,put=PutFitTolerance))
    double FitTolerance;
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetSegmentedStyleCount))
    long SegmentedStyleCount;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    GeometryStyle2dPtr GetStyle ( );
    Relationships2dPtr GetRelationships ( );
    void PutLayer (
        _bstr_t _arg1 );
    _bstr_t GetLayer ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    double GetLength ( );
    long GetVertexCount ( );
    enum CurveFitTypeConstants GetFitType ( );
    void PutFitType (
        enum CurveFitTypeConstants _arg1 );
    VARIANT_BOOL GetClosed ( );
    double GetArea ( );
    double GetFitTolerance ( );
    void PutFitTolerance (
        double _arg1 );
    HRESULT GetVertex (
        long Index,
        double * x,
        double * y );
    HRESULT SetVertex (
        long Index,
        double x,
        double y );
    HRESULT AddVertex (
        double x,
        double y );
    HRESULT RemoveVertex (
        long Index );
    HRESULT InsertVertex (
        long Index,
        double x,
        double y );
    HRESULT GetCentroid (
        double * x,
        double * y );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    HRESULT Extend (
        double x,
        double y,
        IDispatch * TargetObj );
    HRESULT CornerTrim (
        double xKeep,
        double yKeep,
        IDispatch * TargetObj,
        double xTargetKeep,
        double yTargetKeep );
    long GetSegmentedStyleCount ( );
    HRESULT AddSegmentedStyle (
        double x1,
        double y1,
        double x2,
        double y2,
        IDispatch * Style );
    HRESULT GetSegmentedStyle (
        long Index,
        double * x1,
        double * y1,
        double * x2,
        double * y2,
        IDispatch * * Style );
    HRESULT SetSegmentedStyle (
        long Index,
        IDispatch * Style );
    HRESULT RemoveSegmentedStyle (
        long Index );
    HRESULT RemoveAllSegmentedStyles ( );
    HRESULT RemoveAllSegmentedStylesBetween (
        double x1,
        double y1,
        double x2,
        double y2 );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
};

struct __declspec(uuid("2bdde515-531f-11ce-bd99-08003671f901"))
_ICurves2dAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    Curve2dPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    Curve2dPtr AddByPoints (
        long PointCount,
        SAFEARRAY * * Points,
        const _variant_t & FitType = vtMissing,
        const _variant_t & Closed = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * App ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Curve2d * * Curve ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Enum ) = 0;
      virtual HRESULT __stdcall raw_AddByPoints (
        /*[in]*/ long PointCount,
        /*[in]*/ SAFEARRAY * * Points,
        /*[in]*/ VARIANT FitType,
        /*[in]*/ VARIANT Closed,
        /*[out,retval]*/ struct Curve2d * * Curve ) = 0;
};

enum CurveFitTypeConstants
{
    igLinestringFit = 0,
    igDirectFit = 1,
    igLeastSquareFit = 2
};

struct __declspec(uuid("ef0154a1-53e5-11ce-bd99-08003671f901"))
_ICurve2dAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetStyle))
    GeometryStyle2dPtr Style;
    __declspec(property(get=GetRelationships))
    Relationships2dPtr Relationships;
    __declspec(property(get=GetLength))
    double Length;
    __declspec(property(get=GetVertexCount))
    long VertexCount;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[][];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetFitType,put=PutFitType))
    enum CurveFitTypeConstants FitType;
    __declspec(property(get=GetClosed))
    VARIANT_BOOL Closed;
    __declspec(property(get=GetArea))
    double Area;
    __declspec(property(get=GetFitTolerance,put=PutFitTolerance))
    double FitTolerance;
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetSegmentedStyleCount))
    long SegmentedStyleCount;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    GeometryStyle2dPtr GetStyle ( );
    Relationships2dPtr GetRelationships ( );
    void PutLayer (
        _bstr_t Layer );
    _bstr_t GetLayer ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse,
        long Lcid = 0 );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    double GetLength ( );
    long GetVertexCount ( );
    enum CurveFitTypeConstants GetFitType ( );
    void PutFitType (
        enum CurveFitTypeConstants Fit );
    VARIANT_BOOL GetClosed ( );
    double GetArea ( );
    double GetFitTolerance ( );
    void PutFitTolerance (
        double Tolerance );
    HRESULT GetVertex (
        long Index,
        double * x,
        double * y );
    HRESULT SetVertex (
        long Index,
        double x,
        double y );
    HRESULT AddVertex (
        double x,
        double y );
    HRESULT RemoveVertex (
        long Index );
    HRESULT InsertVertex (
        long Index,
        double x,
        double y );
    HRESULT GetCentroid (
        double * x,
        double * y );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    HRESULT Extend (
        double x,
        double y,
        IDispatch * TargetObj );
    HRESULT CornerTrim (
        double xKeep,
        double yKeep,
        IDispatch * TargetObj,
        double xTargetKeep,
        double yTargetKeep );
    long GetSegmentedStyleCount ( );
    HRESULT AddSegmentedStyle (
        double x1,
        double y1,
        double x2,
        double y2,
        IDispatch * Style );
    HRESULT GetSegmentedStyle (
        long Index,
        double * x1,
        double * y1,
        double * x2,
        double * y2,
        IDispatch * * Style );
    HRESULT SetSegmentedStyle (
        long Index,
        IDispatch * Style );
    HRESULT RemoveSegmentedStyle (
        long Index );
    HRESULT RemoveAllSegmentedStyles ( );
    HRESULT RemoveAllSegmentedStylesBetween (
        double x1,
        double y1,
        double x2,
        double y2 );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct GeometryStyle2d * * Style ) = 0;
      virtual HRESULT __stdcall get_Relationships (
        /*[out,retval]*/ struct Relationships2d * * Relationships2d ) = 0;
      virtual HRESULT __stdcall put_Layer (
        /*[in]*/ BSTR Layer ) = 0;
      virtual HRESULT __stdcall get_Layer (
        /*[out,retval]*/ BSTR * Layer ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[in]*/ VARIANT Recurse,
        /*[in,lcid]*/ long Lcid,
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * Type ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * ZOrder ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[in]*/ VARIANT Recurse,
        /*[out,retval]*/ BSTR * Key ) = 0;
      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ IDispatch * * Document ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ double XFrom,
        /*[in]*/ double YFrom,
        /*[in]*/ double XTo,
        /*[in]*/ double YTo ) = 0;
      virtual HRESULT __stdcall raw_Scale (
        /*[in]*/ double Factor ) = 0;
      virtual HRESULT __stdcall raw_Rotate (
        /*[in]*/ double Angle,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[out]*/ double * XMinimum,
        /*[out]*/ double * YMinimum,
        /*[out]*/ double * XMaximum,
        /*[out]*/ double * YMaximum ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ VARIANT XDistance,
        /*[in]*/ VARIANT YDistance,
        /*[out,retval]*/ IDispatch * * NewObject ) = 0;
      virtual HRESULT __stdcall raw_Mirror (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ VARIANT BooleanCopyFlag,
        /*[out,retval]*/ IDispatch * * Object ) = 0;
      virtual HRESULT __stdcall raw_BringToFront ( ) = 0;
      virtual HRESULT __stdcall raw_BringForward ( ) = 0;
      virtual HRESULT __stdcall raw_SendToBack ( ) = 0;
      virtual HRESULT __stdcall raw_SendBackward ( ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * Length ) = 0;
      virtual HRESULT __stdcall get_VertexCount (
        /*[out,retval]*/ long * VertexCount ) = 0;
      virtual HRESULT __stdcall get_FitType (
        /*[out,retval]*/ enum CurveFitTypeConstants * Fit ) = 0;
      virtual HRESULT __stdcall put_FitType (
        /*[in]*/ enum CurveFitTypeConstants Fit ) = 0;
      virtual HRESULT __stdcall get_Closed (
        /*[out,retval]*/ VARIANT_BOOL * Closed ) = 0;
      virtual HRESULT __stdcall get_Area (
        /*[out,retval]*/ double * Area ) = 0;
      virtual HRESULT __stdcall get_FitTolerance (
        /*[out,retval]*/ double * Tolerance ) = 0;
      virtual HRESULT __stdcall put_FitTolerance (
        /*[in]*/ double Tolerance ) = 0;
      virtual HRESULT __stdcall raw_GetVertex (
        /*[in]*/ long Index,
        /*[out]*/ double * x,
        /*[out]*/ double * y ) = 0;
      virtual HRESULT __stdcall raw_SetVertex (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_AddVertex (
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_RemoveVertex (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_InsertVertex (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_GetCentroid (
        /*[out]*/ double * x,
        /*[out]*/ double * y ) = 0;
      virtual HRESULT __stdcall get_KeyPointCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_GetKeyPoint (
        /*[in]*/ long Index,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ enum TGFramework::KeyPointType * KeypointType,
        /*[out]*/ long * HandleType ) = 0;
      virtual HRESULT __stdcall raw_SetKeyPoint (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_Extend (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ IDispatch * TargetObj ) = 0;
      virtual HRESULT __stdcall raw_CornerTrim (
        /*[in]*/ double xKeep,
        /*[in]*/ double yKeep,
        /*[in]*/ IDispatch * TargetObj,
        /*[in]*/ double xTargetKeep,
        /*[in]*/ double yTargetKeep ) = 0;
      virtual HRESULT __stdcall get_SegmentedStyleCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_AddSegmentedStyle (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ IDispatch * Style ) = 0;
      virtual HRESULT __stdcall raw_GetSegmentedStyle (
        /*[in]*/ long Index,
        /*[out]*/ double * x1,
        /*[out]*/ double * y1,
        /*[out]*/ double * x2,
        /*[out]*/ double * y2,
        /*[out]*/ IDispatch * * Style ) = 0;
      virtual HRESULT __stdcall raw_SetSegmentedStyle (
        /*[in]*/ long Index,
        /*[in]*/ IDispatch * Style ) = 0;
      virtual HRESULT __stdcall raw_RemoveSegmentedStyle (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllSegmentedStyles ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllSegmentedStylesBetween (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2 ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
};

struct __declspec(uuid("34dc85d0-3ea7-11ce-b0b9-08003601ebe2"))
LineStrings2d : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    LineString2dPtr Item (
        const _variant_t & Index );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    LineString2dPtr AddByPoints (
        long PointCount,
        SAFEARRAY * * Points );
};

struct __declspec(uuid("bed45830-3ea6-11ce-b0b9-08003601ebe2"))
LineString2d : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLength))
    double Length;
    __declspec(property(get=GetStyle))
    GeometryStyle2dPtr Style;
    __declspec(property(get=GetVertexCount))
    long VertexCount;
    __declspec(property(get=GetClosed))
    VARIANT_BOOL Closed;
    __declspec(property(get=GetArea))
    double Area;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetSegmentedStyleCount))
    long SegmentedStyleCount;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    GeometryStyle2dPtr GetStyle ( );
    void PutLayer (
        _bstr_t _arg1 );
    _bstr_t GetLayer ( );
    HRESULT Drop ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    double GetLength ( );
    long GetVertexCount ( );
    VARIANT_BOOL GetClosed ( );
    double GetArea ( );
    HRESULT GetVertices (
        long * VertexCount,
        SAFEARRAY * * Vertices );
    HRESULT SetVertices (
        long VertexCount,
        SAFEARRAY * * Vertices );
    HRESULT GetVertex (
        long Index,
        double * x,
        double * y );
    HRESULT SetVertex (
        long Index,
        double x,
        double y );
    HRESULT InsertVertex (
        long Index,
        double x,
        double y );
    HRESULT AddVertex (
        double x,
        double y );
    HRESULT RemoveVertex (
        long Index );
    HRESULT GetCentroid (
        double * x,
        double * y );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    HRESULT Extend (
        double x,
        double y,
        IDispatch * TargetObj );
    HRESULT CornerTrim (
        double xKeep,
        double yKeep,
        IDispatch * TargetObj,
        double xTargetKeep,
        double yTargetKeep );
    long GetSegmentedStyleCount ( );
    HRESULT AddSegmentedStyle (
        double x1,
        double y1,
        double x2,
        double y2,
        IDispatch * Style );
    HRESULT GetSegmentedStyle (
        long Index,
        double * x1,
        double * y1,
        double * x2,
        double * y2,
        IDispatch * * Style );
    HRESULT SetSegmentedStyle (
        long Index,
        IDispatch * Style );
    HRESULT RemoveSegmentedStyle (
        long Index );
    HRESULT RemoveAllSegmentedStyles ( );
    HRESULT RemoveAllSegmentedStylesBetween (
        double x1,
        double y1,
        double x2,
        double y2 );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
};

struct __declspec(uuid("f27325b0-3ea6-11ce-b0b9-08003601ebe2"))
_ILineStrings2dAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    LineString2dPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    LineString2dPtr AddByPoints (
        long PointCount,
        SAFEARRAY * * Points );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct LineString2d * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Enum ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * App ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_AddByPoints (
        /*[in]*/ long PointCount,
        /*[in]*/ SAFEARRAY * * Points,
        /*[out,retval]*/ struct LineString2d * * Obj ) = 0;
};

struct __declspec(uuid("37bcecb0-3ea6-11ce-b0b9-08003601ebe2"))
_ILineString2dAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetLength))
    double Length;
    __declspec(property(get=GetStyle))
    GeometryStyle2dPtr Style;
    __declspec(property(get=GetVertexCount))
    long VertexCount;
    __declspec(property(get=GetClosed))
    VARIANT_BOOL Closed;
    __declspec(property(get=GetArea))
    double Area;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[][];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetSegmentedStyleCount))
    long SegmentedStyleCount;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    GeometryStyle2dPtr GetStyle ( );
    void PutLayer (
        _bstr_t Layer );
    _bstr_t GetLayer ( );
    HRESULT Drop ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse,
        long Lcid = 0 );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    double GetLength ( );
    long GetVertexCount ( );
    VARIANT_BOOL GetClosed ( );
    double GetArea ( );
    HRESULT GetVertices (
        long * VertexCount,
        SAFEARRAY * * Vertices );
    HRESULT SetVertices (
        long VertexCount,
        SAFEARRAY * * Vertices );
    HRESULT GetVertex (
        long Index,
        double * x,
        double * y );
    HRESULT SetVertex (
        long Index,
        double x,
        double y );
    HRESULT InsertVertex (
        long Index,
        double x,
        double y );
    HRESULT AddVertex (
        double x,
        double y );
    HRESULT RemoveVertex (
        long Index );
    HRESULT GetCentroid (
        double * x,
        double * y );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    HRESULT Extend (
        double x,
        double y,
        IDispatch * TargetObj );
    HRESULT CornerTrim (
        double xKeep,
        double yKeep,
        IDispatch * TargetObj,
        double xTargetKeep,
        double yTargetKeep );
    long GetSegmentedStyleCount ( );
    HRESULT AddSegmentedStyle (
        double x1,
        double y1,
        double x2,
        double y2,
        IDispatch * Style );
    HRESULT GetSegmentedStyle (
        long Index,
        double * x1,
        double * y1,
        double * x2,
        double * y2,
        IDispatch * * Style );
    HRESULT SetSegmentedStyle (
        long Index,
        IDispatch * Style );
    HRESULT RemoveSegmentedStyle (
        long Index );
    HRESULT RemoveAllSegmentedStyles ( );
    HRESULT RemoveAllSegmentedStylesBetween (
        double x1,
        double y1,
        double x2,
        double y2 );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct GeometryStyle2d * * Style ) = 0;
      virtual HRESULT __stdcall put_Layer (
        /*[in]*/ BSTR Layer ) = 0;
      virtual HRESULT __stdcall get_Layer (
        /*[out,retval]*/ BSTR * Layer ) = 0;
      virtual HRESULT __stdcall raw_Drop ( ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[in]*/ VARIANT Recurse,
        /*[in,lcid]*/ long Lcid,
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * Type ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * ZOrder ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[in]*/ VARIANT Recurse,
        /*[out,retval]*/ BSTR * Key ) = 0;
      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ IDispatch * * Document ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ double XFrom,
        /*[in]*/ double YFrom,
        /*[in]*/ double XTo,
        /*[in]*/ double YTo ) = 0;
      virtual HRESULT __stdcall raw_Scale (
        /*[in]*/ double Factor ) = 0;
      virtual HRESULT __stdcall raw_Rotate (
        /*[in]*/ double Angle,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[out]*/ double * XMinimum,
        /*[out]*/ double * YMinimum,
        /*[out]*/ double * XMaximum,
        /*[out]*/ double * YMaximum ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ VARIANT XDistance,
        /*[in]*/ VARIANT YDistance,
        /*[out,retval]*/ IDispatch * * NewObject ) = 0;
      virtual HRESULT __stdcall raw_Mirror (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ VARIANT BooleanCopyFlag,
        /*[out,retval]*/ IDispatch * * Object ) = 0;
      virtual HRESULT __stdcall raw_BringToFront ( ) = 0;
      virtual HRESULT __stdcall raw_BringForward ( ) = 0;
      virtual HRESULT __stdcall raw_SendToBack ( ) = 0;
      virtual HRESULT __stdcall raw_SendBackward ( ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * Length ) = 0;
      virtual HRESULT __stdcall get_VertexCount (
        /*[out,retval]*/ long * VertexCount ) = 0;
      virtual HRESULT __stdcall get_Closed (
        /*[out,retval]*/ VARIANT_BOOL * Closed ) = 0;
      virtual HRESULT __stdcall get_Area (
        /*[out,retval]*/ double * Area ) = 0;
      virtual HRESULT __stdcall raw_GetVertices (
        /*[out]*/ long * VertexCount,
        /*[in,out]*/ SAFEARRAY * * Vertices ) = 0;
      virtual HRESULT __stdcall raw_SetVertices (
        /*[in]*/ long VertexCount,
        /*[in]*/ SAFEARRAY * * Vertices ) = 0;
      virtual HRESULT __stdcall raw_GetVertex (
        /*[in]*/ long Index,
        /*[out]*/ double * x,
        /*[out]*/ double * y ) = 0;
      virtual HRESULT __stdcall raw_SetVertex (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_InsertVertex (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_AddVertex (
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_RemoveVertex (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_GetCentroid (
        /*[out]*/ double * x,
        /*[out]*/ double * y ) = 0;
      virtual HRESULT __stdcall get_KeyPointCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_GetKeyPoint (
        /*[in]*/ long Index,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ enum TGFramework::KeyPointType * KeypointType,
        /*[out]*/ long * HandleType ) = 0;
      virtual HRESULT __stdcall raw_SetKeyPoint (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_Extend (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ IDispatch * TargetObj ) = 0;
      virtual HRESULT __stdcall raw_CornerTrim (
        /*[in]*/ double xKeep,
        /*[in]*/ double yKeep,
        /*[in]*/ IDispatch * TargetObj,
        /*[in]*/ double xTargetKeep,
        /*[in]*/ double yTargetKeep ) = 0;
      virtual HRESULT __stdcall get_SegmentedStyleCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_AddSegmentedStyle (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ IDispatch * Style ) = 0;
      virtual HRESULT __stdcall raw_GetSegmentedStyle (
        /*[in]*/ long Index,
        /*[out]*/ double * x1,
        /*[out]*/ double * y1,
        /*[out]*/ double * x2,
        /*[out]*/ double * y2,
        /*[out]*/ IDispatch * * Style ) = 0;
      virtual HRESULT __stdcall raw_SetSegmentedStyle (
        /*[in]*/ long Index,
        /*[in]*/ IDispatch * Style ) = 0;
      virtual HRESULT __stdcall raw_RemoveSegmentedStyle (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllSegmentedStyles ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllSegmentedStylesBetween (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2 ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
};

struct __declspec(uuid("2bd8e8d0-912b-11ce-976e-08003601e26d"))
ComplexStrings2d : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    ComplexString2dPtr Item (
        const _variant_t & Index );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    ComplexString2dPtr AddByObjects (
        long ArraySize,
        SAFEARRAY * * members );
};

struct __declspec(uuid("e8e47aa0-912a-11ce-976e-08003601e26d"))
ComplexString2d : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetForm))
    int Form;
    __declspec(property(get=GetStyle))
    GeometryStyle2dPtr Style;
    __declspec(property(get=GetLength))
    double Length;
    __declspec(property(get=GetArea))
    double Area;
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDrawingObjects))
    DrawingObjectsPtr DrawingObjects;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetSegmentedStyleCount))
    long SegmentedStyleCount;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    GeometryStyle2dPtr GetStyle ( );
    DrawingObjectsPtr GetDrawingObjects ( );
    _bstr_t GetLayer ( );
    void PutLayer (
        _bstr_t _arg1 );
    HRESULT AddMember (
        IDispatch * pMember );
    HRESULT RemoveMember (
        IDispatch * pMember );
    HRESULT Drop ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    int GetForm ( );
    double GetLength ( );
    double GetArea ( );
    HRESULT GetCentroid (
        double * x,
        double * y );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    long GetSegmentedStyleCount ( );
    HRESULT AddSegmentedStyle (
        double x1,
        double y1,
        double x2,
        double y2,
        IDispatch * Style );
    HRESULT GetSegmentedStyle (
        long Index,
        double * x1,
        double * y1,
        double * x2,
        double * y2,
        IDispatch * * Style );
    HRESULT SetSegmentedStyle (
        long Index,
        IDispatch * Style );
    HRESULT RemoveSegmentedStyle (
        long Index );
    HRESULT RemoveAllSegmentedStyles ( );
    HRESULT RemoveAllSegmentedStylesBetween (
        double x1,
        double y1,
        double x2,
        double y2 );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
};

struct __declspec(uuid("fc2177f0-912a-11ce-976e-08003601e26d"))
_IComplexStrings2dAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    ComplexString2dPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    ComplexString2dPtr AddByObjects (
        long ArraySize,
        SAFEARRAY * * members );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ComplexString2d * * pItem ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pEnum ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * pApp ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * pParent ) = 0;
      virtual HRESULT __stdcall raw_AddByObjects (
        /*[in]*/ long ArraySize,
        /*[in]*/ SAFEARRAY * * members,
        /*[out,retval]*/ struct ComplexString2d * * pObj ) = 0;
};

struct __declspec(uuid("e9505190-5881-11ce-956a-08003601dfe5"))
DrawingObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    IDispatchPtr Item (
        const _variant_t & Index );
};

struct __declspec(uuid("bb147e90-912a-11ce-976e-08003601e26d"))
_IComplexString2dAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetForm))
    int Form;
    __declspec(property(get=GetStyle))
    GeometryStyle2dPtr Style;
    __declspec(property(get=GetLength))
    double Length;
    __declspec(property(get=GetArea))
    double Area;
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[][];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetDrawingObjects))
    DrawingObjectsPtr DrawingObjects;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetSegmentedStyleCount))
    long SegmentedStyleCount;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    GeometryStyle2dPtr GetStyle ( );
    DrawingObjectsPtr GetDrawingObjects ( );
    _bstr_t GetLayer ( );
    void PutLayer (
        _bstr_t Layer );
    HRESULT AddMember (
        IDispatch * pMember );
    HRESULT RemoveMember (
        IDispatch * pMember );
    HRESULT Drop ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse,
        long Lcid = 0 );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    int GetForm ( );
    double GetLength ( );
    double GetArea ( );
    HRESULT GetCentroid (
        double * x,
        double * y );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    long GetSegmentedStyleCount ( );
    HRESULT AddSegmentedStyle (
        double x1,
        double y1,
        double x2,
        double y2,
        IDispatch * Style );
    HRESULT GetSegmentedStyle (
        long Index,
        double * x1,
        double * y1,
        double * x2,
        double * y2,
        IDispatch * * Style );
    HRESULT SetSegmentedStyle (
        long Index,
        IDispatch * Style );
    HRESULT RemoveSegmentedStyle (
        long Index );
    HRESULT RemoveAllSegmentedStyles ( );
    HRESULT RemoveAllSegmentedStylesBetween (
        double x1,
        double y1,
        double x2,
        double y2 );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct GeometryStyle2d * * pStyle ) = 0;
      virtual HRESULT __stdcall get_DrawingObjects (
        /*[out,retval]*/ struct DrawingObjects * * DrawingObjects ) = 0;
      virtual HRESULT __stdcall get_Layer (
        /*[out,retval]*/ BSTR * Layer ) = 0;
      virtual HRESULT __stdcall put_Layer (
        /*[in]*/ BSTR Layer ) = 0;
      virtual HRESULT __stdcall raw_AddMember (
        /*[in]*/ IDispatch * pMember ) = 0;
      virtual HRESULT __stdcall raw_RemoveMember (
        /*[in]*/ IDispatch * pMember ) = 0;
      virtual HRESULT __stdcall raw_Drop ( ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[in]*/ VARIANT Recurse,
        /*[in,lcid]*/ long Lcid,
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * Type ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * ZOrder ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[in]*/ VARIANT Recurse,
        /*[out,retval]*/ BSTR * Key ) = 0;
      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ IDispatch * * Document ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ double XFrom,
        /*[in]*/ double YFrom,
        /*[in]*/ double XTo,
        /*[in]*/ double YTo ) = 0;
      virtual HRESULT __stdcall raw_Scale (
        /*[in]*/ double Factor ) = 0;
      virtual HRESULT __stdcall raw_Rotate (
        /*[in]*/ double Angle,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[out]*/ double * XMinimum,
        /*[out]*/ double * YMinimum,
        /*[out]*/ double * XMaximum,
        /*[out]*/ double * YMaximum ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ VARIANT XDistance,
        /*[in]*/ VARIANT YDistance,
        /*[out,retval]*/ IDispatch * * NewObject ) = 0;
      virtual HRESULT __stdcall raw_Mirror (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ VARIANT BooleanCopyFlag,
        /*[out,retval]*/ IDispatch * * Object ) = 0;
      virtual HRESULT __stdcall raw_BringToFront ( ) = 0;
      virtual HRESULT __stdcall raw_BringForward ( ) = 0;
      virtual HRESULT __stdcall raw_SendToBack ( ) = 0;
      virtual HRESULT __stdcall raw_SendBackward ( ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall get_Form (
        /*[out,retval]*/ int * Form ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ double * Length ) = 0;
      virtual HRESULT __stdcall get_Area (
        /*[out,retval]*/ double * Area ) = 0;
      virtual HRESULT __stdcall raw_GetCentroid (
        /*[out]*/ double * x,
        /*[out]*/ double * y ) = 0;
      virtual HRESULT __stdcall get_KeyPointCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_GetKeyPoint (
        /*[in]*/ long Index,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ enum TGFramework::KeyPointType * KeypointType,
        /*[out]*/ long * HandleType ) = 0;
      virtual HRESULT __stdcall raw_SetKeyPoint (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall get_SegmentedStyleCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_AddSegmentedStyle (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ IDispatch * Style ) = 0;
      virtual HRESULT __stdcall raw_GetSegmentedStyle (
        /*[in]*/ long Index,
        /*[out]*/ double * x1,
        /*[out]*/ double * y1,
        /*[out]*/ double * x2,
        /*[out]*/ double * y2,
        /*[out]*/ IDispatch * * Style ) = 0;
      virtual HRESULT __stdcall raw_SetSegmentedStyle (
        /*[in]*/ long Index,
        /*[in]*/ IDispatch * Style ) = 0;
      virtual HRESULT __stdcall raw_RemoveSegmentedStyle (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllSegmentedStyles ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllSegmentedStylesBetween (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2 ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
};

struct __declspec(uuid("94c958b2-cee5-11ce-a9af-08003601b487"))
Boundaries2d : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    Boundary2dPtr Item (
        const _variant_t & Index );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    Boundary2dPtr AddByObjects (
        long ObjectCount,
        SAFEARRAY * * Objects,
        double xFlood,
        double yFlood );
    Boundary2dPtr AddByPoints (
        long PointCount,
        SAFEARRAY * * Points );
};

struct __declspec(uuid("94c958b0-cee5-11ce-a9af-08003601b487"))
Boundary2d : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStyle))
    BoundaryStyle2dPtr Style;
    __declspec(property(get=GetBoundingObjects))
    BoundingObjects2dPtr BoundingObjects;
    __declspec(property(get=GetPerimeter))
    double Perimeter;
    __declspec(property(get=GetArea))
    double Area;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetState))
    enum Boundary2dStateConstants State;
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    BoundaryStyle2dPtr GetStyle ( );
    BoundingObjects2dPtr GetBoundingObjects ( );
    _bstr_t GetLayer ( );
    void PutLayer (
        _bstr_t _arg1 );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    double GetPerimeter ( );
    double GetArea ( );
    enum Boundary2dStateConstants GetState ( );
    HRESULT GetFloodPoint (
        double * x,
        double * y );
    HRESULT GetCentroid (
        double * x,
        double * y );
    HRESULT ConstructGeometry ( );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
};

struct __declspec(uuid("94c958b1-cee5-11ce-a9af-08003601b487"))
_IBoundaries2dAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    Boundary2dPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    Boundary2dPtr AddByObjects (
        long ObjectCount,
        SAFEARRAY * * Objects,
        double xFlood,
        double yFlood );
    Boundary2dPtr AddByPoints (
        long PointCount,
        SAFEARRAY * * Points );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Boundary2d * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Enum ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * App ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_AddByObjects (
        /*[in]*/ long ObjectCount,
        /*[in]*/ SAFEARRAY * * Objects,
        /*[in]*/ double xFlood,
        /*[in]*/ double yFlood,
        /*[out,retval]*/ struct Boundary2d * * Obj ) = 0;
      virtual HRESULT __stdcall raw_AddByPoints (
        /*[in]*/ long PointCount,
        /*[in]*/ SAFEARRAY * * Points,
        /*[out,retval]*/ struct Boundary2d * * Obj ) = 0;
};

struct __declspec(uuid("f8cacde0-2420-11cf-b44e-08003601e84c"))
BoundaryStyle2d : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFillColor,put=PutFillColor))
    long FillColor;
    __declspec(property(get=GetLinearColor,put=PutLinearColor))
    long LinearColor;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetDashName,put=PutDashName))
    _bstr_t DashName;
    __declspec(property(get=GetRotation,put=PutRotation))
    double Rotation;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetUnits,put=PutUnits))
    long Units;
    __declspec(property(get=GetFillType))
    long FillType;
    __declspec(property(get=Getspacing,put=Putspacing))
    double spacing;
    __declspec(property(get=GetFillName,put=PutFillName))
    _bstr_t FillName;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    void PutFillColor (
        long _arg1 );
    long GetFillColor ( );
    void PutLinearColor (
        long _arg1 );
    long GetLinearColor ( );
    void PutWidth (
        double _arg1 );
    double GetWidth ( );
    _bstr_t GetDashName ( );
    void PutDashName (
        _bstr_t _arg1 );
    double GetRotation ( );
    void PutRotation (
        double _arg1 );
    double GetScale ( );
    void PutScale (
        double _arg1 );
    long GetUnits ( );
    void PutUnits (
        long _arg1 );
    long GetFillType ( );
    double Getspacing ( );
    void Putspacing (
        double _arg1 );
    _bstr_t GetFillName ( );
    void PutFillName (
        _bstr_t _arg1 );
    HRESULT UseActiveFillStyle ( );
};

struct __declspec(uuid("e12182a0-2420-11cf-b44e-08003601e84c"))
_IBoundaryStyle2dAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFillColor,put=PutFillColor))
    long FillColor;
    __declspec(property(get=GetLinearColor,put=PutLinearColor))
    long LinearColor;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetDashName,put=PutDashName))
    _bstr_t DashName;
    __declspec(property(get=GetRotation,put=PutRotation))
    double Rotation;
    __declspec(property(get=GetScale,put=PutScale))
    double Scale;
    __declspec(property(get=GetUnits,put=PutUnits))
    long Units;
    __declspec(property(get=GetFillType))
    long FillType;
    __declspec(property(get=Getspacing,put=Putspacing))
    double spacing;
    __declspec(property(get=GetFillName,put=PutFillName))
    _bstr_t FillName;

    //
    // Wrapper methods for error-handling
    //

    void PutFillColor (
        long FillColor );
    long GetFillColor ( );
    void PutLinearColor (
        long Color );
    long GetLinearColor ( );
    void PutWidth (
        double PenWidth );
    double GetWidth ( );
    _bstr_t GetDashName ( );
    void PutDashName (
        _bstr_t LineTypeName );
    double GetRotation ( );
    void PutRotation (
        double Angle );
    double GetScale ( );
    void PutScale (
        double Factor );
    long GetUnits ( );
    void PutUnits (
        long Units );
    long GetFillType ( );
    double Getspacing ( );
    void Putspacing (
        double Distance );
    _bstr_t GetFillName ( );
    void PutFillName (
        _bstr_t FillStyleName );
    HRESULT UseActiveFillStyle ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_FillColor (
        /*[in]*/ long FillColor ) = 0;
      virtual HRESULT __stdcall get_FillColor (
        /*[out,retval]*/ long * FillColor ) = 0;
      virtual HRESULT __stdcall put_LinearColor (
        /*[in]*/ long Color ) = 0;
      virtual HRESULT __stdcall get_LinearColor (
        /*[out,retval]*/ long * Color ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double PenWidth ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * PenWidth ) = 0;
      virtual HRESULT __stdcall get_DashName (
        /*[out,retval]*/ BSTR * LineTypeName ) = 0;
      virtual HRESULT __stdcall put_DashName (
        /*[in]*/ BSTR LineTypeName ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ double * Angle ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ double Angle ) = 0;
      virtual HRESULT __stdcall get_Scale (
        /*[out,retval]*/ double * Factor ) = 0;
      virtual HRESULT __stdcall put_Scale (
        /*[in]*/ double Factor ) = 0;
      virtual HRESULT __stdcall get_Units (
        /*[out,retval]*/ long * Units ) = 0;
      virtual HRESULT __stdcall put_Units (
        /*[in]*/ long Units ) = 0;
      virtual HRESULT __stdcall get_FillType (
        /*[out,retval]*/ long * Type ) = 0;
      virtual HRESULT __stdcall get_spacing (
        /*[out,retval]*/ double * Distance ) = 0;
      virtual HRESULT __stdcall put_spacing (
        /*[in]*/ double Distance ) = 0;
      virtual HRESULT __stdcall get_FillName (
        /*[out,retval]*/ BSTR * FillStyleName ) = 0;
      virtual HRESULT __stdcall put_FillName (
        /*[in]*/ BSTR FillStyleName ) = 0;
      virtual HRESULT __stdcall raw_UseActiveFillStyle ( ) = 0;
};

struct __declspec(uuid("6d967500-1ae2-11cf-b445-08003601e84c"))
BoundingObjects2d : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr Item (
        const _variant_t & Index );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
};

struct __declspec(uuid("56a48840-1ae2-11cf-b445-08003601e84c"))
_IBoundingObjects2dAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Enum ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * App ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
};

enum Boundary2dStateConstants
{
    igBoundary2dUndefined = 0,
    igBoundary2dUpToDate = 1,
    igBoundary2dUnableToCompute = 2
};

struct __declspec(uuid("2c488083-ce6a-11ce-a9af-08003601b487"))
_IBoundary2dAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetStyle))
    BoundaryStyle2dPtr Style;
    __declspec(property(get=GetBoundingObjects))
    BoundingObjects2dPtr BoundingObjects;
    __declspec(property(get=GetPerimeter))
    double Perimeter;
    __declspec(property(get=GetArea))
    double Area;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[][];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetState))
    enum Boundary2dStateConstants State;
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    BoundaryStyle2dPtr GetStyle ( );
    BoundingObjects2dPtr GetBoundingObjects ( );
    _bstr_t GetLayer ( );
    void PutLayer (
        _bstr_t Layer );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse,
        long Lcid = 0 );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    double GetPerimeter ( );
    double GetArea ( );
    enum Boundary2dStateConstants GetState ( );
    HRESULT GetFloodPoint (
        double * x,
        double * y );
    HRESULT GetCentroid (
        double * x,
        double * y );
    HRESULT ConstructGeometry ( );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct BoundaryStyle2d * * Style ) = 0;
      virtual HRESULT __stdcall get_BoundingObjects (
        /*[out,retval]*/ struct BoundingObjects2d * * BoundingObjs ) = 0;
      virtual HRESULT __stdcall get_Layer (
        /*[out,retval]*/ BSTR * Layer ) = 0;
      virtual HRESULT __stdcall put_Layer (
        /*[in]*/ BSTR Layer ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[in]*/ VARIANT Recurse,
        /*[in,lcid]*/ long Lcid,
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * Type ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * ZOrder ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[in]*/ VARIANT Recurse,
        /*[out,retval]*/ BSTR * Key ) = 0;
      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ IDispatch * * Document ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ double XFrom,
        /*[in]*/ double YFrom,
        /*[in]*/ double XTo,
        /*[in]*/ double YTo ) = 0;
      virtual HRESULT __stdcall raw_Scale (
        /*[in]*/ double Factor ) = 0;
      virtual HRESULT __stdcall raw_Rotate (
        /*[in]*/ double Angle,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[out]*/ double * XMinimum,
        /*[out]*/ double * YMinimum,
        /*[out]*/ double * XMaximum,
        /*[out]*/ double * YMaximum ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ VARIANT XDistance,
        /*[in]*/ VARIANT YDistance,
        /*[out,retval]*/ IDispatch * * NewObject ) = 0;
      virtual HRESULT __stdcall raw_Mirror (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ VARIANT BooleanCopyFlag,
        /*[out,retval]*/ IDispatch * * Object ) = 0;
      virtual HRESULT __stdcall raw_BringToFront ( ) = 0;
      virtual HRESULT __stdcall raw_BringForward ( ) = 0;
      virtual HRESULT __stdcall raw_SendToBack ( ) = 0;
      virtual HRESULT __stdcall raw_SendBackward ( ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall get_Perimeter (
        /*[out,retval]*/ double * Length ) = 0;
      virtual HRESULT __stdcall get_Area (
        /*[out,retval]*/ double * Area ) = 0;
      virtual HRESULT __stdcall get_State (
        /*[out,retval]*/ enum Boundary2dStateConstants * State ) = 0;
      virtual HRESULT __stdcall raw_GetFloodPoint (
        /*[out]*/ double * x,
        /*[out]*/ double * y ) = 0;
      virtual HRESULT __stdcall raw_GetCentroid (
        /*[out]*/ double * x,
        /*[out]*/ double * y ) = 0;
      virtual HRESULT __stdcall raw_ConstructGeometry ( ) = 0;
      virtual HRESULT __stdcall get_KeyPointCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_GetKeyPoint (
        /*[in]*/ long Index,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ enum TGFramework::KeyPointType * KeypointType,
        /*[out]*/ long * HandleType ) = 0;
      virtual HRESULT __stdcall raw_SetKeyPoint (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
};

struct __declspec(uuid("047cb8b0-ab10-11ce-a8b9-080036373002"))
TextBoxes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    TextBoxPtr Item (
        const _variant_t & Index );
    TextBoxPtr AddByTwoPoints (
        double x1,
        double y1,
        double z1,
        double x2,
        double y2,
        double z2 );
    TextBoxPtr Add (
        double x1,
        double y1,
        double z1 );
    TextBoxPtr AddByHtWdAng (
        double x1,
        double y1,
        double z1,
        double ht,
        double wd,
        double ang );
    TextBoxPtr AddWatermark (
        double x1,
        double y1,
        double z1 );
    TextBoxPtr AddPMITextBox (
        IUnknown * unkPlane,
        double x1,
        double y1,
        double z1 );
};

struct __declspec(uuid("429065f0-98d6-11ce-93f4-080036373002"))
TextBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetEdit))
    TextEditPtr Edit;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetRotationAngle,put=PutRotationAngle))
    double RotationAngle;
    __declspec(property(get=GetLineSpacing,put=PutLineSpacing))
    double LineSpacing;
    __declspec(property(get=GetActualTextLength))
    double ActualTextLength;
    __declspec(property(get=GetFillBackgroundColor,put=PutFillBackgroundColor))
    VARIANT_BOOL FillBackgroundColor;
    __declspec(property(get=GetBorderType,put=PutBorderType))
    enum TextBorderTypeConstants BorderType;
    __declspec(property(get=GetBorderLineStyle,put=PutBorderLineStyle))
    _bstr_t BorderLineStyle;
    __declspec(property(get=GetBorderLineWidth,put=PutBorderLineWidth))
    double BorderLineWidth;
    __declspec(property(put=PutPropertyText))
    _bstr_t PropertyText;
    __declspec(property(get=GetBorderLineColor,put=PutBorderLineColor))
    long BorderLineColor;
    __declspec(property(get=GetBorderOffset,put=PutBorderOffset))
    double BorderOffset;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    enum TextVerticalAlignmentConstants VerticalAlignment;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    enum TextHorizontalAlignmentConstants HorizontalAlignment;
    __declspec(property(get=GetJustification,put=PutJustification))
    enum TextJustificationConstants Justification;
    __declspec(property(get=GetFill,put=PutFill))
    VARIANT_BOOL Fill;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetFillColor,put=PutFillColor))
    long FillColor;
    __declspec(property(get=GetShadowOffset,put=PutShadowOffset))
    double ShadowOffset;
    __declspec(property(get=GetFlowDirection,put=PutFlowDirection))
    enum TextFlowDirectionConstants FlowDirection;
    __declspec(property(get=GetFlowOrientation,put=PutFlowOrientation))
    enum TextFlowOrientationConstants FlowOrientation;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetPlacementType,put=PutPlacementType))
    enum TextPlacementTypeConstants PlacementType;
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetTabStopWidth,put=PutTabStopWidth))
    double TabStopWidth;
    __declspec(property(get=GetMinimumAspectRatio,put=PutMinimumAspectRatio))
    double MinimumAspectRatio;
    __declspec(property(get=GetLineSpacingType,put=PutLineSpacingType))
    enum TextLineSpacingTypeConstants LineSpacingType;
    __declspec(property(get=GetTextControlType,put=PutTextControlType))
    enum TextControlTypeConstants TextControlType;
    __declspec(property(get=GetWatermark,put=PutWatermark))
    VARIANT_BOOL Watermark;
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetTextScale,put=PutTextScale))
    double TextScale;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TextEditPtr GetEdit ( );
    void PutHeight (
        double _arg1 );
    double GetHeight ( );
    void PutWidth (
        double _arg1 );
    double GetWidth ( );
    void PutRotationAngle (
        double _arg1 );
    double GetRotationAngle ( );
    void PutBorderType (
        enum TextBorderTypeConstants _arg1 );
    enum TextBorderTypeConstants GetBorderType ( );
    void PutBorderLineStyle (
        _bstr_t _arg1 );
    _bstr_t GetBorderLineStyle ( );
    void PutBorderLineWidth (
        double _arg1 );
    double GetBorderLineWidth ( );
    void PutBorderLineColor (
        long _arg1 );
    long GetBorderLineColor ( );
    void PutBorderOffset (
        double _arg1 );
    double GetBorderOffset ( );
    void PutVerticalAlignment (
        enum TextVerticalAlignmentConstants _arg1 );
    enum TextVerticalAlignmentConstants GetVerticalAlignment ( );
    void PutJustification (
        enum TextJustificationConstants _arg1 );
    enum TextJustificationConstants GetJustification ( );
    HRESULT SetOrigin (
        double x,
        double y,
        double z );
    HRESULT GetOrigin (
        double * x,
        double * y,
        double * z );
    void PutFill (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetFill ( );
    void PutShadow (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShadow ( );
    void PutFillColor (
        long _arg1 );
    long GetFillColor ( );
    void PutShadowOffset (
        double _arg1 );
    double GetShadowOffset ( );
    void PutFlowDirection (
        enum TextFlowDirectionConstants _arg1 );
    enum TextFlowDirectionConstants GetFlowDirection ( );
    void PutFlowOrientation (
        enum TextFlowOrientationConstants _arg1 );
    enum TextFlowOrientationConstants GetFlowOrientation ( );
    void PutText (
        _bstr_t _arg1 );
    _bstr_t GetText ( );
    void PutPropertyText (
        _bstr_t _arg1 );
    HRESULT FindAndReplacePropertyText (
        _bstr_t findText,
        _bstr_t propText,
        VARIANT_BOOL ReplaceAll );
    void PutLayer (
        _bstr_t _arg1 );
    _bstr_t GetLayer ( );
    void PutPlacementType (
        enum TextPlacementTypeConstants _arg1 );
    enum TextPlacementTypeConstants GetPlacementType ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    double GetTextScale ( );
    void PutTextScale (
        double _arg1 );
    void PutHorizontalAlignment (
        enum TextHorizontalAlignmentConstants _arg1 );
    enum TextHorizontalAlignmentConstants GetHorizontalAlignment ( );
    HRESULT PromoteToCurrentVersion ( );
    void PutTabStopWidth (
        double _arg1 );
    double GetTabStopWidth ( );
    void PutMinimumAspectRatio (
        double _arg1 );
    double GetMinimumAspectRatio ( );
    void PutLineSpacingType (
        enum TextLineSpacingTypeConstants _arg1 );
    enum TextLineSpacingTypeConstants GetLineSpacingType ( );
    void PutTextControlType (
        enum TextControlTypeConstants _arg1 );
    enum TextControlTypeConstants GetTextControlType ( );
    void PutLineSpacing (
        double _arg1 );
    double GetLineSpacing ( );
    double GetActualTextLength ( );
    void PutFillBackgroundColor (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetFillBackgroundColor ( );
    HRESULT GetReferencedObjectInfo (
        SAFEARRAY * * ReferencedObjects,
        SAFEARRAY * * ReferencedObjectTypes );
    void PutWatermark (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetWatermark ( );
    HRESULT ReplaceTextWithSymbol (
        _bstr_t Text );
    HRESULT SaveAsNote (
        _bstr_t NoteName,
        VARIANT_BOOL bNoteOverWrite );
    void PutParallelToScreen (
        VARIANT_BOOL _arg1 );
    long GetParallelToScreen ( );
};

struct __declspec(uuid("53735360-98d6-11ce-93f4-080036373002"))
_ITextBoxesAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    TextBoxPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    TextBoxPtr AddByTwoPoints (
        double x1,
        double y1,
        double z1,
        double x2,
        double y2,
        double z2 );
    TextBoxPtr Add (
        double x1,
        double y1,
        double z1 );
    TextBoxPtr AddByHtWdAng (
        double x1,
        double y1,
        double z1,
        double ht,
        double wd,
        double ang );
    TextBoxPtr AddWatermark (
        double x1,
        double y1,
        double z1 );
    TextBoxPtr AddPMITextBox (
        IUnknown * unkPlane,
        double x1,
        double y1,
        double z1 );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * App ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct TextBox * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Enum ) = 0;
      virtual HRESULT __stdcall raw_AddByTwoPoints (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double z1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ double z2,
        /*[out,retval]*/ struct TextBox * * Obj ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double z1,
        /*[out,retval]*/ struct TextBox * * Obj ) = 0;
      virtual HRESULT __stdcall raw_AddByHtWdAng (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double z1,
        /*[in]*/ double ht,
        /*[in]*/ double wd,
        /*[in]*/ double ang,
        /*[out,retval]*/ struct TextBox * * Obj ) = 0;
      virtual HRESULT __stdcall raw_AddWatermark (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double z1,
        /*[out,retval]*/ struct TextBox * * Obj ) = 0;
      virtual HRESULT __stdcall raw_AddPMITextBox (
        /*[in]*/ IUnknown * unkPlane,
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double z1,
        /*[out,retval]*/ struct TextBox * * TxtBoxObj ) = 0;
};

struct __declspec(uuid("02a24700-98e7-11ce-93f4-080036373002"))
TextEdit : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLanguage,put=PutLanguage))
    long Language;
    __declspec(property(get=GetTextSize,put=PutTextSize))
    double TextSize;
    __declspec(property(get=GetAspectRatio,put=PutAspectRatio))
    double AspectRatio;
    __declspec(property(get=GetBold,put=PutBold))
    VARIANT_BOOL Bold;
    __declspec(property(get=GetItalic,put=PutItalic))
    VARIANT_BOOL Italic;
    __declspec(property(get=GetUnderLine,put=PutUnderLine))
    VARIANT_BOOL UnderLine;
    __declspec(property(get=GetSubScript,put=PutSubScript))
    VARIANT_BOOL SubScript;
    __declspec(property(get=GetSuperScript,put=PutSuperScript))
    VARIANT_BOOL SuperScript;
    __declspec(property(get=GetFont,put=PutFont))
    _bstr_t Font;
    __declspec(property(get=GetCharacterSpacing,put=PutCharacterSpacing))
    double CharacterSpacing;
    __declspec(property(get=GetVerticalPosition,put=PutVerticalPosition))
    double VerticalPosition;
    __declspec(property(get=GetColor,put=PutColor))
    long Color;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    enum TextHorizontalAlignmentConstants HorizontalAlignment;
    __declspec(property(get=GetBullet,put=PutBullet))
    VARIANT_BOOL Bullet;
    __declspec(property(get=GetNumber,put=PutNumber))
    VARIANT_BOOL Number;
    __declspec(property(get=GetRightIndent,put=PutRightIndent))
    double RightIndent;
    __declspec(property(get=GetLeftIndent,put=PutLeftIndent))
    double LeftIndent;
    __declspec(property(get=GetFirstLineIndent,put=PutFirstLineIndent))
    double FirstLineIndent;
    __declspec(property(get=GetLineSpacing,put=PutLineSpacing))
    double LineSpacing;
    __declspec(property(get=GetBeforeSpacing,put=PutBeforeSpacing))
    double BeforeSpacing;
    __declspec(property(get=GetAfterSpacing,put=PutAfterSpacing))
    double AfterSpacing;
    __declspec(property(get=GetIsEmpty))
    VARIANT_BOOL IsEmpty;
    __declspec(property(get=GetSpecialIndentType,put=PutSpecialIndentType))
    enum TextSpecialIndentTypeConstants SpecialIndentType;
    __declspec(property(get=GetLineSpacingType,put=PutLineSpacingType))
    enum TextLineSpacingTypeConstants LineSpacingType;
    __declspec(property(get=GetCharacters,put=PutCharacters))
    _bstr_t Characters;
    __declspec(property(get=GetInsertIndex,put=PutInsertIndex))
    long InsertIndex;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetTabCount))
    int TabCount;
    __declspec(property(get=GetNumberingStartValue,put=PutNumberingStartValue))
    int NumberingStartValue;
    __declspec(property(get=GetTextScale,put=PutTextScale))
    double TextScale;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetName ( );
    void PutLanguage (
        long _arg1 );
    long GetLanguage ( );
    void PutTextSize (
        double _arg1 );
    double GetTextSize ( );
    void PutAspectRatio (
        double _arg1 );
    double GetAspectRatio ( );
    void PutBold (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetBold ( );
    void PutItalic (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetItalic ( );
    void PutUnderLine (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetUnderLine ( );
    void PutSubScript (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetSubScript ( );
    void PutSuperScript (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetSuperScript ( );
    void PutFont (
        _bstr_t _arg1 );
    _bstr_t GetFont ( );
    void PutCharacterSpacing (
        double _arg1 );
    double GetCharacterSpacing ( );
    void PutVerticalPosition (
        double _arg1 );
    double GetVerticalPosition ( );
    void PutColor (
        long _arg1 );
    long GetColor ( );
    void PutHorizontalAlignment (
        enum TextHorizontalAlignmentConstants _arg1 );
    enum TextHorizontalAlignmentConstants GetHorizontalAlignment ( );
    void PutBullet (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetBullet ( );
    void PutNumber (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetNumber ( );
    void PutRightIndent (
        double _arg1 );
    double GetRightIndent ( );
    void PutLeftIndent (
        double _arg1 );
    double GetLeftIndent ( );
    void PutFirstLineIndent (
        double _arg1 );
    double GetFirstLineIndent ( );
    void PutLineSpacing (
        double _arg1 );
    double GetLineSpacing ( );
    void PutBeforeSpacing (
        double _arg1 );
    double GetBeforeSpacing ( );
    void PutAfterSpacing (
        double _arg1 );
    double GetAfterSpacing ( );
    VARIANT_BOOL GetIsEmpty ( );
    void PutCharacters (
        _bstr_t _arg1 );
    _bstr_t GetCharacters ( );
    void PutInsertIndex (
        long _arg1 );
    long GetInsertIndex ( );
    int GetTabCount ( );
    HRESULT TabStop (
        enum TextTabTypeConstants Type,
        double Distance );
    HRESULT SetTabStop (
        int Index,
        enum TextTabTypeConstants Type,
        double Distance );
    HRESULT GetTabStop (
        int Index,
        enum TextTabTypeConstants * Type,
        double * Distance );
    HRESULT ClearTabStops ( );
    HRESULT SetSelect (
        long Start,
        long End,
        enum TextSelectConstants option );
    HRESULT GetSelect (
        long * Start,
        long * End );
    HRESULT Cut ( );
    HRESULT Paste ( );
    HRESULT Copy ( );
    HRESULT Clear ( );
    VARIANT_BOOL PointInsideBox (
        double x,
        double y,
        double z );
    double GetTextScale ( );
    void PutTextScale (
        double _arg1 );
    void PutSpecialIndentType (
        enum TextSpecialIndentTypeConstants _arg1 );
    enum TextSpecialIndentTypeConstants GetSpecialIndentType ( );
    void PutLineSpacingType (
        enum TextLineSpacingTypeConstants _arg1 );
    enum TextLineSpacingTypeConstants GetLineSpacingType ( );
    HRESULT InsertFraction (
        _bstr_t UpperText,
        _bstr_t LowerText,
        enum TextFractionTypeConstants typeOption,
        enum TextFractionAlignConstants alignOption,
        enum TextFractionSizeConstants fractionSize );
    HRESULT GetFraction (
        VARIANT_BOOL * Flag,
        BSTR * UpperText,
        BSTR * LowerText,
        enum TextFractionTypeConstants * typeOption,
        enum TextFractionAlignConstants * alignOption,
        enum TextFractionSizeConstants * fractionSize );
    HRESULT SetBulletList (
        enum TextBulletTypeConstants Value );
    HRESULT GetBulletList (
        VARIANT_BOOL * Flag,
        enum TextBulletTypeConstants * Value );
    HRESULT SetNumberList (
        enum TextNumberTypeConstants Type,
        enum TextNumberFormatConstants format,
        enum TextNumberJustificationConstants align );
    HRESULT GetNumberList (
        VARIANT_BOOL * Flag,
        enum TextNumberTypeConstants * Type,
        enum TextNumberFormatConstants * format,
        enum TextNumberJustificationConstants * align );
    HRESULT SetNoList ( );
    HRESULT IncreaseIndent ( );
    HRESULT DecreaseIndent ( );
    HRESULT RestartNumbering ( );
    HRESULT ContinueNumbering ( );
    void PutNumberingStartValue (
        int _arg1 );
    int GetNumberingStartValue ( );
};

enum TextTabTypeConstants
{
    igTextTabFlushLeft = 1,
    igTextTabFlushRight = 2,
    igTextTabFlushCentered = 3,
    igTextTabFlushDecimal = 4
};

enum TextSelectConstants
{
    seTextSelectRange = 0,
    seTextSelectWord = 1,
    seTextSelectParagraph = 2,
    seTextSelectAll = 5
};

enum TextSpecialIndentTypeConstants
{
    igIndentNone = 0,
    igFirstline = 1,
    igHanging = 2
};

enum TextLineSpacingTypeConstants
{
    igSingle = 0,
    igOneAndHalf = 1,
    igDouble = 2,
    igAtLeast = 3,
    igExactly = 4,
    igMultiple = 5
};

enum TextFractionTypeConstants
{
    igStacked = 1,
    igTolerance = 2,
    igSkewed = 3,
    igLinearFraction = 4
};

enum TextFractionAlignConstants
{
    igUpper = 1,
    igMiddle = 2,
    igLower = 3
};

enum TextFractionSizeConstants
{
    ig10 = 0,
    ig20 = 1,
    ig30 = 2,
    ig40 = 3,
    ig50 = 4,
    ig60 = 5,
    ig70 = 6,
    ig80 = 7,
    ig90 = 8,
    ig100 = 9
};

enum TextBulletTypeConstants
{
    igFilledRound = 0,
    igHollowRound = 1,
    igFilledSquare = 2,
    igHollowSquare = 3,
    igStar = 4,
    igArrow = 5,
    igCheckmark = 6,
    igDash = 7
};

enum TextNumberTypeConstants
{
    igPlain = 0,
    igCapitalRoman = 1,
    igSmallRoman = 2,
    igCapitalLatinAlpha = 3,
    igSmallLatinAlpha = 4
};

enum TextNumberFormatConstants
{
    igNoFormat = 0,
    igPeriod = 1,
    igBracket = 2,
    igDoubleBrackets = 3
};

enum TextNumberJustificationConstants
{
    igLeftJustification = 0,
    igCenterJustification = 1,
    igRightJustification = 2
};

struct __declspec(uuid("f23ca6f0-98e6-11ce-93f4-080036373002"))
_ITextEditAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetLanguage,put=PutLanguage))
    long Language;
    __declspec(property(get=GetTextSize,put=PutTextSize))
    double TextSize;
    __declspec(property(get=GetAspectRatio,put=PutAspectRatio))
    double AspectRatio;
    __declspec(property(get=GetBold,put=PutBold))
    VARIANT_BOOL Bold;
    __declspec(property(get=GetItalic,put=PutItalic))
    VARIANT_BOOL Italic;
    __declspec(property(get=GetUnderLine,put=PutUnderLine))
    VARIANT_BOOL UnderLine;
    __declspec(property(get=GetSubScript,put=PutSubScript))
    VARIANT_BOOL SubScript;
    __declspec(property(get=GetSuperScript,put=PutSuperScript))
    VARIANT_BOOL SuperScript;
    __declspec(property(get=GetFont,put=PutFont))
    _bstr_t Font;
    __declspec(property(get=GetCharacterSpacing,put=PutCharacterSpacing))
    double CharacterSpacing;
    __declspec(property(get=GetVerticalPosition,put=PutVerticalPosition))
    double VerticalPosition;
    __declspec(property(get=GetColor,put=PutColor))
    long Color;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    enum TextHorizontalAlignmentConstants HorizontalAlignment;
    __declspec(property(get=GetBullet,put=PutBullet))
    VARIANT_BOOL Bullet;
    __declspec(property(get=GetNumber,put=PutNumber))
    VARIANT_BOOL Number;
    __declspec(property(get=GetRightIndent,put=PutRightIndent))
    double RightIndent;
    __declspec(property(get=GetLeftIndent,put=PutLeftIndent))
    double LeftIndent;
    __declspec(property(get=GetFirstLineIndent,put=PutFirstLineIndent))
    double FirstLineIndent;
    __declspec(property(get=GetLineSpacing,put=PutLineSpacing))
    double LineSpacing;
    __declspec(property(get=GetBeforeSpacing,put=PutBeforeSpacing))
    double BeforeSpacing;
    __declspec(property(get=GetAfterSpacing,put=PutAfterSpacing))
    double AfterSpacing;
    __declspec(property(get=GetIsEmpty))
    VARIANT_BOOL IsEmpty;
    __declspec(property(get=GetSpecialIndentType,put=PutSpecialIndentType))
    enum TextSpecialIndentTypeConstants SpecialIndentType;
    __declspec(property(get=GetLineSpacingType,put=PutLineSpacingType))
    enum TextLineSpacingTypeConstants LineSpacingType;
    __declspec(property(get=GetCharacters,put=PutCharacters))
    _bstr_t Characters;
    __declspec(property(get=GetInsertIndex,put=PutInsertIndex))
    long InsertIndex;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetTabCount))
    int TabCount;
    __declspec(property(get=GetNumberingStartValue,put=PutNumberingStartValue))
    int NumberingStartValue;
    __declspec(property(get=GetTextScale,put=PutTextScale))
    double TextScale;

    //
    // Wrapper methods for error-handling
    //

    void PutName (
        _bstr_t Name );
    _bstr_t GetName ( );
    void PutLanguage (
        long Lcid );
    long GetLanguage ( );
    void PutTextSize (
        double TextSize );
    double GetTextSize ( );
    void PutAspectRatio (
        double Ratio );
    double GetAspectRatio ( );
    void PutBold (
        VARIANT_BOOL Bold );
    VARIANT_BOOL GetBold ( );
    void PutItalic (
        VARIANT_BOOL Italic );
    VARIANT_BOOL GetItalic ( );
    void PutUnderLine (
        VARIANT_BOOL uline );
    VARIANT_BOOL GetUnderLine ( );
    void PutSubScript (
        VARIANT_BOOL SubScript );
    VARIANT_BOOL GetSubScript ( );
    void PutSuperScript (
        VARIANT_BOOL SuperScript );
    VARIANT_BOOL GetSuperScript ( );
    void PutFont (
        _bstr_t FontName );
    _bstr_t GetFont ( );
    void PutCharacterSpacing (
        double space );
    double GetCharacterSpacing ( );
    void PutVerticalPosition (
        double space );
    double GetVerticalPosition ( );
    void PutColor (
        long Color );
    long GetColor ( );
    void PutHorizontalAlignment (
        enum TextHorizontalAlignmentConstants align );
    enum TextHorizontalAlignmentConstants GetHorizontalAlignment ( );
    void PutBullet (
        VARIANT_BOOL Bullet );
    VARIANT_BOOL GetBullet ( );
    void PutNumber (
        VARIANT_BOOL Number );
    VARIANT_BOOL GetNumber ( );
    void PutRightIndent (
        double Distance );
    double GetRightIndent ( );
    void PutLeftIndent (
        double Distance );
    double GetLeftIndent ( );
    void PutFirstLineIndent (
        double Distance );
    double GetFirstLineIndent ( );
    void PutLineSpacing (
        double Distance );
    double GetLineSpacing ( );
    void PutBeforeSpacing (
        double Distance );
    double GetBeforeSpacing ( );
    void PutAfterSpacing (
        double Distance );
    double GetAfterSpacing ( );
    VARIANT_BOOL GetIsEmpty ( );
    void PutCharacters (
        _bstr_t Text );
    _bstr_t GetCharacters ( );
    void PutInsertIndex (
        long Index );
    long GetInsertIndex ( );
    int GetTabCount ( );
    HRESULT TabStop (
        enum TextTabTypeConstants Type,
        double Distance );
    HRESULT SetTabStop (
        int Index,
        enum TextTabTypeConstants Type,
        double Distance );
    HRESULT GetTabStop (
        int Index,
        enum TextTabTypeConstants * Type,
        double * Distance );
    HRESULT ClearTabStops ( );
    HRESULT SetSelect (
        long Start,
        long End,
        enum TextSelectConstants option );
    HRESULT GetSelect (
        long * Start,
        long * End );
    HRESULT Cut ( );
    HRESULT Paste ( );
    HRESULT Copy ( );
    HRESULT Clear ( );
    VARIANT_BOOL PointInsideBox (
        double x,
        double y,
        double z );
    double GetTextScale ( );
    void PutTextScale (
        double pdAngle );
    void PutSpecialIndentType (
        enum TextSpecialIndentTypeConstants Value );
    enum TextSpecialIndentTypeConstants GetSpecialIndentType ( );
    void PutLineSpacingType (
        enum TextLineSpacingTypeConstants Value );
    enum TextLineSpacingTypeConstants GetLineSpacingType ( );
    HRESULT InsertFraction (
        _bstr_t UpperText,
        _bstr_t LowerText,
        enum TextFractionTypeConstants typeOption,
        enum TextFractionAlignConstants alignOption,
        enum TextFractionSizeConstants fractionSize );
    HRESULT GetFraction (
        VARIANT_BOOL * Flag,
        BSTR * UpperText,
        BSTR * LowerText,
        enum TextFractionTypeConstants * typeOption,
        enum TextFractionAlignConstants * alignOption,
        enum TextFractionSizeConstants * fractionSize );
    HRESULT SetBulletList (
        enum TextBulletTypeConstants Value );
    HRESULT GetBulletList (
        VARIANT_BOOL * Flag,
        enum TextBulletTypeConstants * Value );
    HRESULT SetNumberList (
        enum TextNumberTypeConstants Type,
        enum TextNumberFormatConstants format,
        enum TextNumberJustificationConstants align );
    HRESULT GetNumberList (
        VARIANT_BOOL * Flag,
        enum TextNumberTypeConstants * Type,
        enum TextNumberFormatConstants * format,
        enum TextNumberJustificationConstants * align );
    HRESULT SetNoList ( );
    HRESULT IncreaseIndent ( );
    HRESULT DecreaseIndent ( );
    HRESULT RestartNumbering ( );
    HRESULT ContinueNumbering ( );
    void PutNumberingStartValue (
        int Value );
    int GetNumberingStartValue ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Language (
        /*[in]*/ long Lcid ) = 0;
      virtual HRESULT __stdcall get_Language (
        /*[out,retval]*/ long * Lcid ) = 0;
      virtual HRESULT __stdcall put_TextSize (
        /*[in]*/ double TextSize ) = 0;
      virtual HRESULT __stdcall get_TextSize (
        /*[out,retval]*/ double * TextSize ) = 0;
      virtual HRESULT __stdcall put_AspectRatio (
        /*[in]*/ double Ratio ) = 0;
      virtual HRESULT __stdcall get_AspectRatio (
        /*[out,retval]*/ double * Ratio ) = 0;
      virtual HRESULT __stdcall put_Bold (
        /*[in]*/ VARIANT_BOOL Bold ) = 0;
      virtual HRESULT __stdcall get_Bold (
        /*[out,retval]*/ VARIANT_BOOL * Bold ) = 0;
      virtual HRESULT __stdcall put_Italic (
        /*[in]*/ VARIANT_BOOL Italic ) = 0;
      virtual HRESULT __stdcall get_Italic (
        /*[out,retval]*/ VARIANT_BOOL * Italic ) = 0;
      virtual HRESULT __stdcall put_UnderLine (
        /*[in]*/ VARIANT_BOOL uline ) = 0;
      virtual HRESULT __stdcall get_UnderLine (
        /*[out,retval]*/ VARIANT_BOOL * uline ) = 0;
      virtual HRESULT __stdcall put_SubScript (
        /*[in]*/ VARIANT_BOOL SubScript ) = 0;
      virtual HRESULT __stdcall get_SubScript (
        /*[out,retval]*/ VARIANT_BOOL * SubScript ) = 0;
      virtual HRESULT __stdcall put_SuperScript (
        /*[in]*/ VARIANT_BOOL SuperScript ) = 0;
      virtual HRESULT __stdcall get_SuperScript (
        /*[out,retval]*/ VARIANT_BOOL * SuperScript ) = 0;
      virtual HRESULT __stdcall put_Font (
        /*[in]*/ BSTR FontName ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ BSTR * FontName ) = 0;
      virtual HRESULT __stdcall put_CharacterSpacing (
        /*[in]*/ double space ) = 0;
      virtual HRESULT __stdcall get_CharacterSpacing (
        /*[out,retval]*/ double * space ) = 0;
      virtual HRESULT __stdcall put_VerticalPosition (
        /*[in]*/ double space ) = 0;
      virtual HRESULT __stdcall get_VerticalPosition (
        /*[out,retval]*/ double * space ) = 0;
      virtual HRESULT __stdcall put_Color (
        /*[in]*/ long Color ) = 0;
      virtual HRESULT __stdcall get_Color (
        /*[out,retval]*/ long * Color ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ enum TextHorizontalAlignmentConstants align ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ enum TextHorizontalAlignmentConstants * align ) = 0;
      virtual HRESULT __stdcall put_Bullet (
        /*[in]*/ VARIANT_BOOL Bullet ) = 0;
      virtual HRESULT __stdcall get_Bullet (
        /*[out,retval]*/ VARIANT_BOOL * Bullet ) = 0;
      virtual HRESULT __stdcall put_Number (
        /*[in]*/ VARIANT_BOOL Number ) = 0;
      virtual HRESULT __stdcall get_Number (
        /*[out,retval]*/ VARIANT_BOOL * Number ) = 0;
      virtual HRESULT __stdcall put_RightIndent (
        /*[in]*/ double Distance ) = 0;
      virtual HRESULT __stdcall get_RightIndent (
        /*[out,retval]*/ double * Distance ) = 0;
      virtual HRESULT __stdcall put_LeftIndent (
        /*[in]*/ double Distance ) = 0;
      virtual HRESULT __stdcall get_LeftIndent (
        /*[out,retval]*/ double * Distance ) = 0;
      virtual HRESULT __stdcall put_FirstLineIndent (
        /*[in]*/ double Distance ) = 0;
      virtual HRESULT __stdcall get_FirstLineIndent (
        /*[out,retval]*/ double * Distance ) = 0;
      virtual HRESULT __stdcall put_LineSpacing (
        /*[in]*/ double Distance ) = 0;
      virtual HRESULT __stdcall get_LineSpacing (
        /*[out,retval]*/ double * Distance ) = 0;
      virtual HRESULT __stdcall put_BeforeSpacing (
        /*[in]*/ double Distance ) = 0;
      virtual HRESULT __stdcall get_BeforeSpacing (
        /*[out,retval]*/ double * Distance ) = 0;
      virtual HRESULT __stdcall put_AfterSpacing (
        /*[in]*/ double Distance ) = 0;
      virtual HRESULT __stdcall get_AfterSpacing (
        /*[out,retval]*/ double * Distance ) = 0;
      virtual HRESULT __stdcall get_IsEmpty (
        /*[out,retval]*/ VARIANT_BOOL * empty ) = 0;
      virtual HRESULT __stdcall put_Characters (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_Characters (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_InsertIndex (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall get_InsertIndex (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall get_TabCount (
        /*[out,retval]*/ int * Count ) = 0;
      virtual HRESULT __stdcall raw_TabStop (
        /*[in]*/ enum TextTabTypeConstants Type,
        /*[in]*/ double Distance ) = 0;
      virtual HRESULT __stdcall raw_SetTabStop (
        /*[in]*/ int Index,
        /*[in]*/ enum TextTabTypeConstants Type,
        /*[in]*/ double Distance ) = 0;
      virtual HRESULT __stdcall raw_GetTabStop (
        /*[in]*/ int Index,
        /*[out]*/ enum TextTabTypeConstants * Type,
        /*[in]*/ double * Distance ) = 0;
      virtual HRESULT __stdcall raw_ClearTabStops ( ) = 0;
      virtual HRESULT __stdcall raw_SetSelect (
        /*[in]*/ long Start,
        /*[in]*/ long End,
        /*[in]*/ enum TextSelectConstants option ) = 0;
      virtual HRESULT __stdcall raw_GetSelect (
        /*[out]*/ long * Start,
        /*[out]*/ long * End ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Paste ( ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_PointInsideBox (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z,
        /*[out,retval]*/ VARIANT_BOOL * inside ) = 0;
      virtual HRESULT __stdcall get_TextScale (
        /*[out,retval]*/ double * pdAngle ) = 0;
      virtual HRESULT __stdcall put_TextScale (
        /*[in]*/ double pdAngle ) = 0;
      virtual HRESULT __stdcall put_SpecialIndentType (
        /*[in]*/ enum TextSpecialIndentTypeConstants Value ) = 0;
      virtual HRESULT __stdcall get_SpecialIndentType (
        /*[out,retval]*/ enum TextSpecialIndentTypeConstants * Value ) = 0;
      virtual HRESULT __stdcall put_LineSpacingType (
        /*[in]*/ enum TextLineSpacingTypeConstants Value ) = 0;
      virtual HRESULT __stdcall get_LineSpacingType (
        /*[out,retval]*/ enum TextLineSpacingTypeConstants * Value ) = 0;
      virtual HRESULT __stdcall raw_InsertFraction (
        /*[in]*/ BSTR UpperText,
        /*[in]*/ BSTR LowerText,
        /*[in]*/ enum TextFractionTypeConstants typeOption,
        /*[in]*/ enum TextFractionAlignConstants alignOption,
        /*[in]*/ enum TextFractionSizeConstants fractionSize ) = 0;
      virtual HRESULT __stdcall raw_GetFraction (
        /*[out]*/ VARIANT_BOOL * Flag,
        /*[out]*/ BSTR * UpperText,
        /*[out]*/ BSTR * LowerText,
        /*[out]*/ enum TextFractionTypeConstants * typeOption,
        /*[out]*/ enum TextFractionAlignConstants * alignOption,
        /*[out]*/ enum TextFractionSizeConstants * fractionSize ) = 0;
      virtual HRESULT __stdcall raw_SetBulletList (
        /*[in]*/ enum TextBulletTypeConstants Value ) = 0;
      virtual HRESULT __stdcall raw_GetBulletList (
        /*[out]*/ VARIANT_BOOL * Flag,
        /*[out]*/ enum TextBulletTypeConstants * Value ) = 0;
      virtual HRESULT __stdcall raw_SetNumberList (
        /*[in]*/ enum TextNumberTypeConstants Type,
        /*[in]*/ enum TextNumberFormatConstants format,
        /*[in]*/ enum TextNumberJustificationConstants align ) = 0;
      virtual HRESULT __stdcall raw_GetNumberList (
        /*[out]*/ VARIANT_BOOL * Flag,
        /*[out]*/ enum TextNumberTypeConstants * Type,
        /*[out]*/ enum TextNumberFormatConstants * format,
        /*[out]*/ enum TextNumberJustificationConstants * align ) = 0;
      virtual HRESULT __stdcall raw_SetNoList ( ) = 0;
      virtual HRESULT __stdcall raw_IncreaseIndent ( ) = 0;
      virtual HRESULT __stdcall raw_DecreaseIndent ( ) = 0;
      virtual HRESULT __stdcall raw_RestartNumbering ( ) = 0;
      virtual HRESULT __stdcall raw_ContinueNumbering ( ) = 0;
      virtual HRESULT __stdcall put_NumberingStartValue (
        /*[in]*/ int Value ) = 0;
      virtual HRESULT __stdcall get_NumberingStartValue (
        /*[out,retval]*/ int * Value ) = 0;
};

enum TextBorderTypeConstants
{
    igTextBorderNone = 0,
    igTextBorderRectangle = 1
};

enum TextFlowDirectionConstants
{
    igTextLeftToRight = 0,
    igTextRightToLeft = 1
};

enum TextFlowOrientationConstants
{
    igTextHorizontal = 0,
    igTextVertical = 1
};

enum TextPlacementTypeConstants
{
    igTextBoxType = 1,
    igTextStringType = 2
};

enum TextControlTypeConstants
{
    igTextFitToContent = 0,
    igTextAdjustAspectRatio = 1,
    igTextWrap = 2
};

struct __declspec(uuid("18caebd0-98d6-11ce-93f4-080036373002"))
_ITextBoxAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[][];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetEdit))
    TextEditPtr Edit;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetRotationAngle,put=PutRotationAngle))
    double RotationAngle;
    __declspec(property(get=GetLineSpacing,put=PutLineSpacing))
    double LineSpacing;
    __declspec(property(get=GetActualTextLength))
    double ActualTextLength;
    __declspec(property(get=GetFillBackgroundColor,put=PutFillBackgroundColor))
    VARIANT_BOOL FillBackgroundColor;
    __declspec(property(get=GetBorderType,put=PutBorderType))
    enum TextBorderTypeConstants BorderType;
    __declspec(property(get=GetBorderLineStyle,put=PutBorderLineStyle))
    _bstr_t BorderLineStyle;
    __declspec(property(get=GetBorderLineWidth,put=PutBorderLineWidth))
    double BorderLineWidth;
    __declspec(property(put=PutPropertyText))
    _bstr_t PropertyText;
    __declspec(property(get=GetBorderLineColor,put=PutBorderLineColor))
    long BorderLineColor;
    __declspec(property(get=GetBorderOffset,put=PutBorderOffset))
    double BorderOffset;
    __declspec(property(get=GetVerticalAlignment,put=PutVerticalAlignment))
    enum TextVerticalAlignmentConstants VerticalAlignment;
    __declspec(property(get=GetHorizontalAlignment,put=PutHorizontalAlignment))
    enum TextHorizontalAlignmentConstants HorizontalAlignment;
    __declspec(property(get=GetJustification,put=PutJustification))
    enum TextJustificationConstants Justification;
    __declspec(property(get=GetFill,put=PutFill))
    VARIANT_BOOL Fill;
    __declspec(property(get=GetShadow,put=PutShadow))
    VARIANT_BOOL Shadow;
    __declspec(property(get=GetFillColor,put=PutFillColor))
    long FillColor;
    __declspec(property(get=GetShadowOffset,put=PutShadowOffset))
    double ShadowOffset;
    __declspec(property(get=GetFlowDirection,put=PutFlowDirection))
    enum TextFlowDirectionConstants FlowDirection;
    __declspec(property(get=GetFlowOrientation,put=PutFlowOrientation))
    enum TextFlowOrientationConstants FlowOrientation;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetPlacementType,put=PutPlacementType))
    enum TextPlacementTypeConstants PlacementType;
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetTabStopWidth,put=PutTabStopWidth))
    double TabStopWidth;
    __declspec(property(get=GetMinimumAspectRatio,put=PutMinimumAspectRatio))
    double MinimumAspectRatio;
    __declspec(property(get=GetLineSpacingType,put=PutLineSpacingType))
    enum TextLineSpacingTypeConstants LineSpacingType;
    __declspec(property(get=GetTextControlType,put=PutTextControlType))
    enum TextControlTypeConstants TextControlType;
    __declspec(property(get=GetWatermark,put=PutWatermark))
    VARIANT_BOOL Watermark;
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetTextScale,put=PutTextScale))
    double TextScale;

    //
    // Wrapper methods for error-handling
    //

    TextEditPtr GetEdit ( );
    void PutHeight (
        double Value );
    double GetHeight ( );
    void PutWidth (
        double Value );
    double GetWidth ( );
    void PutRotationAngle (
        double Value );
    double GetRotationAngle ( );
    void PutBorderType (
        enum TextBorderTypeConstants Value );
    enum TextBorderTypeConstants GetBorderType ( );
    void PutBorderLineStyle (
        _bstr_t Style );
    _bstr_t GetBorderLineStyle ( );
    void PutBorderLineWidth (
        double Value );
    double GetBorderLineWidth ( );
    void PutBorderLineColor (
        long Value );
    long GetBorderLineColor ( );
    void PutBorderOffset (
        double Value );
    double GetBorderOffset ( );
    void PutVerticalAlignment (
        enum TextVerticalAlignmentConstants Value );
    enum TextVerticalAlignmentConstants GetVerticalAlignment ( );
    void PutJustification (
        enum TextJustificationConstants Value );
    enum TextJustificationConstants GetJustification ( );
    HRESULT SetOrigin (
        double x,
        double y,
        double z );
    HRESULT GetOrigin (
        double * x,
        double * y,
        double * z );
    void PutFill (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetFill ( );
    void PutShadow (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetShadow ( );
    void PutFillColor (
        long FillColor );
    long GetFillColor ( );
    void PutShadowOffset (
        double ShadowOffset );
    double GetShadowOffset ( );
    void PutFlowDirection (
        enum TextFlowDirectionConstants flowDirn );
    enum TextFlowDirectionConstants GetFlowDirection ( );
    void PutFlowOrientation (
        enum TextFlowOrientationConstants flowOrient );
    enum TextFlowOrientationConstants GetFlowOrientation ( );
    void PutText (
        _bstr_t Text );
    _bstr_t GetText ( );
    void PutPropertyText (
        _bstr_t _arg1 );
    HRESULT FindAndReplacePropertyText (
        _bstr_t findText,
        _bstr_t propText,
        VARIANT_BOOL ReplaceAll );
    void PutLayer (
        _bstr_t Layer );
    _bstr_t GetLayer ( );
    void PutPlacementType (
        enum TextPlacementTypeConstants Type );
    enum TextPlacementTypeConstants GetPlacementType ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse,
        long Lcid = 0 );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    double GetTextScale ( );
    void PutTextScale (
        double pdAngle );
    void PutHorizontalAlignment (
        enum TextHorizontalAlignmentConstants Value );
    enum TextHorizontalAlignmentConstants GetHorizontalAlignment ( );
    HRESULT PromoteToCurrentVersion ( );
    void PutTabStopWidth (
        double Value );
    double GetTabStopWidth ( );
    void PutMinimumAspectRatio (
        double Value );
    double GetMinimumAspectRatio ( );
    void PutLineSpacingType (
        enum TextLineSpacingTypeConstants Value );
    enum TextLineSpacingTypeConstants GetLineSpacingType ( );
    void PutTextControlType (
        enum TextControlTypeConstants Value );
    enum TextControlTypeConstants GetTextControlType ( );
    void PutLineSpacing (
        double Distance );
    double GetLineSpacing ( );
    double GetActualTextLength ( );
    void PutFillBackgroundColor (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetFillBackgroundColor ( );
    HRESULT GetReferencedObjectInfo (
        SAFEARRAY * * ReferencedObjects,
        SAFEARRAY * * ReferencedObjectTypes );
    void PutWatermark (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetWatermark ( );
    HRESULT ReplaceTextWithSymbol (
        _bstr_t Text );
    HRESULT SaveAsNote (
        _bstr_t NoteName,
        VARIANT_BOOL bNoteOverWrite );
    void PutParallelToScreen (
        VARIANT_BOOL bGetParallelToScreen );
    long GetParallelToScreen ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Edit (
        /*[out,retval]*/ struct TextEdit * * Edit ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_RotationAngle (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_RotationAngle (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_BorderType (
        /*[in]*/ enum TextBorderTypeConstants Value ) = 0;
      virtual HRESULT __stdcall get_BorderType (
        /*[out,retval]*/ enum TextBorderTypeConstants * Value ) = 0;
      virtual HRESULT __stdcall put_BorderLineStyle (
        /*[in]*/ BSTR Style ) = 0;
      virtual HRESULT __stdcall get_BorderLineStyle (
        /*[out,retval]*/ BSTR * Style ) = 0;
      virtual HRESULT __stdcall put_BorderLineWidth (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_BorderLineWidth (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_BorderLineColor (
        /*[in]*/ long Value ) = 0;
      virtual HRESULT __stdcall get_BorderLineColor (
        /*[out,retval]*/ long * Value ) = 0;
      virtual HRESULT __stdcall put_BorderOffset (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_BorderOffset (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_VerticalAlignment (
        /*[in]*/ enum TextVerticalAlignmentConstants Value ) = 0;
      virtual HRESULT __stdcall get_VerticalAlignment (
        /*[out,retval]*/ enum TextVerticalAlignmentConstants * Value ) = 0;
      virtual HRESULT __stdcall put_Justification (
        /*[in]*/ enum TextJustificationConstants Value ) = 0;
      virtual HRESULT __stdcall get_Justification (
        /*[out,retval]*/ enum TextJustificationConstants * Value ) = 0;
      virtual HRESULT __stdcall raw_SetOrigin (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_GetOrigin (
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z ) = 0;
      virtual HRESULT __stdcall put_Fill (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_Fill (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_Shadow (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_Shadow (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_FillColor (
        /*[in]*/ long FillColor ) = 0;
      virtual HRESULT __stdcall get_FillColor (
        /*[out,retval]*/ long * FillColor ) = 0;
      virtual HRESULT __stdcall put_ShadowOffset (
        /*[in]*/ double ShadowOffset ) = 0;
      virtual HRESULT __stdcall get_ShadowOffset (
        /*[out,retval]*/ double * ShadowOffset ) = 0;
      virtual HRESULT __stdcall put_FlowDirection (
        /*[in]*/ enum TextFlowDirectionConstants flowDirn ) = 0;
      virtual HRESULT __stdcall get_FlowDirection (
        /*[out,retval]*/ enum TextFlowDirectionConstants * flowDirn ) = 0;
      virtual HRESULT __stdcall put_FlowOrientation (
        /*[in]*/ enum TextFlowOrientationConstants flowOrient ) = 0;
      virtual HRESULT __stdcall get_FlowOrientation (
        /*[out,retval]*/ enum TextFlowOrientationConstants * flowOrient ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_PropertyText (
        /*[in]*/ BSTR _arg1 ) = 0;
      virtual HRESULT __stdcall raw_FindAndReplacePropertyText (
        /*[in]*/ BSTR findText,
        /*[in]*/ BSTR propText,
        /*[in]*/ VARIANT_BOOL ReplaceAll ) = 0;
      virtual HRESULT __stdcall put_Layer (
        /*[in]*/ BSTR Layer ) = 0;
      virtual HRESULT __stdcall get_Layer (
        /*[out,retval]*/ BSTR * Layer ) = 0;
      virtual HRESULT __stdcall put_PlacementType (
        /*[in]*/ enum TextPlacementTypeConstants Type ) = 0;
      virtual HRESULT __stdcall get_PlacementType (
        /*[out,retval]*/ enum TextPlacementTypeConstants * Type ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[in]*/ VARIANT Recurse,
        /*[in,lcid]*/ long Lcid,
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * Type ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * ZOrder ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[in]*/ VARIANT Recurse,
        /*[out,retval]*/ BSTR * Key ) = 0;
      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ IDispatch * * Document ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ double XFrom,
        /*[in]*/ double YFrom,
        /*[in]*/ double XTo,
        /*[in]*/ double YTo ) = 0;
      virtual HRESULT __stdcall raw_Scale (
        /*[in]*/ double Factor ) = 0;
      virtual HRESULT __stdcall raw_Rotate (
        /*[in]*/ double Angle,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[out]*/ double * XMinimum,
        /*[out]*/ double * YMinimum,
        /*[out]*/ double * XMaximum,
        /*[out]*/ double * YMaximum ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ VARIANT XDistance,
        /*[in]*/ VARIANT YDistance,
        /*[out,retval]*/ IDispatch * * NewObject ) = 0;
      virtual HRESULT __stdcall raw_Mirror (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ VARIANT BooleanCopyFlag,
        /*[out,retval]*/ IDispatch * * Object ) = 0;
      virtual HRESULT __stdcall raw_BringToFront ( ) = 0;
      virtual HRESULT __stdcall raw_BringForward ( ) = 0;
      virtual HRESULT __stdcall raw_SendToBack ( ) = 0;
      virtual HRESULT __stdcall raw_SendBackward ( ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall get_KeyPointCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_GetKeyPoint (
        /*[in]*/ long Index,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ enum TGFramework::KeyPointType * KeypointType,
        /*[out]*/ long * HandleType ) = 0;
      virtual HRESULT __stdcall raw_SetKeyPoint (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
      virtual HRESULT __stdcall get_TextScale (
        /*[out,retval]*/ double * pdAngle ) = 0;
      virtual HRESULT __stdcall put_TextScale (
        /*[in]*/ double pdAngle ) = 0;
      virtual HRESULT __stdcall put_HorizontalAlignment (
        /*[in]*/ enum TextHorizontalAlignmentConstants Value ) = 0;
      virtual HRESULT __stdcall get_HorizontalAlignment (
        /*[out,retval]*/ enum TextHorizontalAlignmentConstants * Value ) = 0;
      virtual HRESULT __stdcall raw_PromoteToCurrentVersion ( ) = 0;
      virtual HRESULT __stdcall put_TabStopWidth (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_TabStopWidth (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_MinimumAspectRatio (
        /*[in]*/ double Value ) = 0;
      virtual HRESULT __stdcall get_MinimumAspectRatio (
        /*[out,retval]*/ double * Value ) = 0;
      virtual HRESULT __stdcall put_LineSpacingType (
        /*[in]*/ enum TextLineSpacingTypeConstants Value ) = 0;
      virtual HRESULT __stdcall get_LineSpacingType (
        /*[out,retval]*/ enum TextLineSpacingTypeConstants * Value ) = 0;
      virtual HRESULT __stdcall put_TextControlType (
        /*[in]*/ enum TextControlTypeConstants Value ) = 0;
      virtual HRESULT __stdcall get_TextControlType (
        /*[out,retval]*/ enum TextControlTypeConstants * Value ) = 0;
      virtual HRESULT __stdcall put_LineSpacing (
        /*[in]*/ double Distance ) = 0;
      virtual HRESULT __stdcall get_LineSpacing (
        /*[out,retval]*/ double * Distance ) = 0;
      virtual HRESULT __stdcall get_ActualTextLength (
        /*[out,retval]*/ double * pdTextLength ) = 0;
      virtual HRESULT __stdcall put_FillBackgroundColor (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_FillBackgroundColor (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall raw_GetReferencedObjectInfo (
        /*[out]*/ SAFEARRAY * * ReferencedObjects,
        /*[out]*/ SAFEARRAY * * ReferencedObjectTypes ) = 0;
      virtual HRESULT __stdcall put_Watermark (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_Watermark (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall raw_ReplaceTextWithSymbol (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall raw_SaveAsNote (
        /*[in]*/ BSTR NoteName,
        /*[in]*/ VARIANT_BOOL bNoteOverWrite ) = 0;
      virtual HRESULT __stdcall put_ParallelToScreen (
        /*[in]*/ VARIANT_BOOL bGetParallelToScreen ) = 0;
      virtual HRESULT __stdcall get_ParallelToScreen (
        /*[out,retval]*/ long * bGetParallelToScreen ) = 0;
};

struct __declspec(uuid("9b06d914-10cb-424b-91c7-dc74cb616ddf"))
TextProfiles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    TextProfilePtr Item (
        const _variant_t & Index );
};

struct __declspec(uuid("98a9be78-fffd-47d8-82eb-d0bc228e2a38"))
TextProfile : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetFontName,put=PutFontName))
    _bstr_t FontName;
    __declspec(property(get=GetTextSize,put=PutTextSize))
    double TextSize;
    __declspec(property(get=GetLetterSpacing,put=PutLetterSpacing))
    double LetterSpacing;
    __declspec(property(get=GetLineSpacing,put=PutLineSpacing))
    double LineSpacing;
    __declspec(property(get=GetMargin,put=PutMargin))
    double Margin;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetAnchorPointLocation,put=PutAnchorPointLocation))
    enum AnchorPointLocationConstants AnchorPointLocation;
    __declspec(property(get=GetSmoothness,put=PutSmoothness))
    int Smoothness;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetText ( );
    HRESULT GetCharCount (
        long * NumChars );
    HRESULT GetCharCurveCount (
        int CharIndex,
        long * NumCurves );
    HRESULT GetCharStrokedCurveData (
        int CharIndex,
        int CurveIndex,
        long * NumNodes,
        VARIANT * Nodes,
        long * NumPoles,
        VARIANT * Poles,
        VARIANT * Knots,
        VARIANT * Rational,
        VARIANT * Weights,
        long * Degree,
        enum Geom2dFormConstants * Form,
        enum Geom2dScopeConstants * Scope );
    _bstr_t GetFontName ( );
    HRESULT GetBoldState (
        int CharIndex,
        VARIANT_BOOL * IsBold );
    HRESULT GetItalicState (
        int CharIndex,
        VARIANT_BOOL * IsItalic );
    double GetTextSize ( );
    HRESULT GetAlignment (
        int TextLineIndex,
        enum TextNumberJustificationConstants * JustifValue );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT GetAnchorPoint (
        double * x,
        double * y );
    HRESULT SetAnchorPoint (
        double x,
        double y );
    void PutAnchorPointLocation (
        enum AnchorPointLocationConstants _arg1 );
    enum AnchorPointLocationConstants GetAnchorPointLocation ( );
    double GetLetterSpacing ( );
    double GetLineSpacing ( );
    double GetMargin ( );
    int GetSmoothness ( );
    void PutMargin (
        double _arg1 );
    void PutLineSpacing (
        double _arg1 );
    void PutLetterSpacing (
        double _arg1 );
    void PutTextSize (
        double _arg1 );
    void PutSmoothness (
        int _arg1 );
    void PutFontName (
        _bstr_t _arg1 );
    HRESULT SetAlignment (
        int TextLineIndex,
        enum TextNumberJustificationConstants JustifValue );
    HRESULT SetBoldState (
        int startCharIndex,
        int endCharIndex,
        VARIANT_BOOL IsBold );
    HRESULT SetItalicState (
        int startCharIndex,
        int endCharIndex,
        VARIANT_BOOL IsItalic );
    void PutText (
        _bstr_t _arg1 );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
};

struct __declspec(uuid("2558042d-153f-441d-a35b-95098c202ea0"))
_ITextProfilesAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    TextProfilePtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * App ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct TextProfile * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Enum ) = 0;
};

enum AnchorPointLocationConstants
{
    igAnchorPointTopLeft = 0,
    igAnchorPointTopCenter = 1,
    igAnchorPointTopRight = 2,
    igAnchorPointMiddleLeft = 3,
    igAnchorPointMiddleCenter = 4,
    igAnchorPointMiddleRight = 5,
    igAnchorPointBottomLeft = 6,
    igAnchorPointBottomCenter = 7,
    igAnchorPointBottomRight = 8
};

struct __declspec(uuid("d57d3aa1-7785-499e-afc1-be9ddb7666c5"))
_ITextProfileAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetFontName,put=PutFontName))
    _bstr_t FontName;
    __declspec(property(get=GetTextSize,put=PutTextSize))
    double TextSize;
    __declspec(property(get=GetLetterSpacing,put=PutLetterSpacing))
    double LetterSpacing;
    __declspec(property(get=GetLineSpacing,put=PutLineSpacing))
    double LineSpacing;
    __declspec(property(get=GetMargin,put=PutMargin))
    double Margin;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetAnchorPointLocation,put=PutAnchorPointLocation))
    enum AnchorPointLocationConstants AnchorPointLocation;
    __declspec(property(get=GetSmoothness,put=PutSmoothness))
    int Smoothness;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    _bstr_t GetText ( );
    HRESULT GetCharCount (
        long * NumChars );
    HRESULT GetCharCurveCount (
        int CharIndex,
        long * NumCurves );
    HRESULT GetCharStrokedCurveData (
        int CharIndex,
        int CurveIndex,
        long * NumNodes,
        VARIANT * Nodes,
        long * NumPoles,
        VARIANT * Poles,
        VARIANT * Knots,
        VARIANT * Rational,
        VARIANT * Weights,
        long * Degree,
        enum Geom2dFormConstants * Form,
        enum Geom2dScopeConstants * Scope );
    _bstr_t GetFontName ( );
    HRESULT GetBoldState (
        int CharIndex,
        VARIANT_BOOL * IsBold );
    HRESULT GetItalicState (
        int CharIndex,
        VARIANT_BOOL * IsItalic );
    double GetTextSize ( );
    HRESULT GetAlignment (
        int TextLineIndex,
        enum TextNumberJustificationConstants * JustifValue );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT GetAnchorPoint (
        double * x,
        double * y );
    HRESULT SetAnchorPoint (
        double x,
        double y );
    void PutAnchorPointLocation (
        enum AnchorPointLocationConstants Value );
    enum AnchorPointLocationConstants GetAnchorPointLocation ( );
    double GetLetterSpacing ( );
    double GetLineSpacing ( );
    double GetMargin ( );
    int GetSmoothness ( );
    void PutMargin (
        double Margin );
    void PutLineSpacing (
        double Distance );
    void PutLetterSpacing (
        double space );
    void PutTextSize (
        double TextSize );
    void PutSmoothness (
        int Smoothness );
    void PutFontName (
        _bstr_t FontName );
    HRESULT SetAlignment (
        int TextLineIndex,
        enum TextNumberJustificationConstants JustifValue );
    HRESULT SetBoldState (
        int startCharIndex,
        int endCharIndex,
        VARIANT_BOOL IsBold );
    HRESULT SetItalicState (
        int startCharIndex,
        int endCharIndex,
        VARIANT_BOOL IsItalic );
    void PutText (
        _bstr_t Text );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * App ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall raw_GetCharCount (
        /*[out]*/ long * NumChars ) = 0;
      virtual HRESULT __stdcall raw_GetCharCurveCount (
        /*[in]*/ int CharIndex,
        /*[out]*/ long * NumCurves ) = 0;
      virtual HRESULT __stdcall raw_GetCharStrokedCurveData (
        /*[in]*/ int CharIndex,
        /*[in]*/ int CurveIndex,
        /*[out]*/ long * NumNodes,
        /*[out]*/ VARIANT * Nodes,
        /*[out]*/ long * NumPoles,
        /*[out]*/ VARIANT * Poles,
        /*[out]*/ VARIANT * Knots,
        /*[out]*/ VARIANT * Rational,
        /*[out]*/ VARIANT * Weights,
        /*[out]*/ long * Degree,
        /*[out]*/ enum Geom2dFormConstants * Form,
        /*[out]*/ enum Geom2dScopeConstants * Scope ) = 0;
      virtual HRESULT __stdcall get_FontName (
        /*[out,retval]*/ BSTR * FontName ) = 0;
      virtual HRESULT __stdcall raw_GetBoldState (
        /*[in]*/ int CharIndex,
        /*[out]*/ VARIANT_BOOL * IsBold ) = 0;
      virtual HRESULT __stdcall raw_GetItalicState (
        /*[in]*/ int CharIndex,
        /*[out]*/ VARIANT_BOOL * IsItalic ) = 0;
      virtual HRESULT __stdcall get_TextSize (
        /*[out,retval]*/ double * TextSize ) = 0;
      virtual HRESULT __stdcall raw_GetAlignment (
        /*[in]*/ int TextLineIndex,
        /*[out]*/ enum TextNumberJustificationConstants * JustifValue ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ double XFrom,
        /*[in]*/ double YFrom,
        /*[in]*/ double XTo,
        /*[in]*/ double YTo ) = 0;
      virtual HRESULT __stdcall raw_GetAnchorPoint (
        /*[out]*/ double * x,
        /*[out]*/ double * y ) = 0;
      virtual HRESULT __stdcall raw_SetAnchorPoint (
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall put_AnchorPointLocation (
        /*[in]*/ enum AnchorPointLocationConstants Value ) = 0;
      virtual HRESULT __stdcall get_AnchorPointLocation (
        /*[out,retval]*/ enum AnchorPointLocationConstants * Value ) = 0;
      virtual HRESULT __stdcall get_LetterSpacing (
        /*[out,retval]*/ double * space ) = 0;
      virtual HRESULT __stdcall get_LineSpacing (
        /*[out,retval]*/ double * Distance ) = 0;
      virtual HRESULT __stdcall get_Margin (
        /*[out,retval]*/ double * Margin ) = 0;
      virtual HRESULT __stdcall get_Smoothness (
        /*[out,retval]*/ int * Smoothness ) = 0;
      virtual HRESULT __stdcall put_Margin (
        /*[in]*/ double Margin ) = 0;
      virtual HRESULT __stdcall put_LineSpacing (
        /*[in]*/ double Distance ) = 0;
      virtual HRESULT __stdcall put_LetterSpacing (
        /*[in]*/ double space ) = 0;
      virtual HRESULT __stdcall put_TextSize (
        /*[in]*/ double TextSize ) = 0;
      virtual HRESULT __stdcall put_Smoothness (
        /*[in]*/ int Smoothness ) = 0;
      virtual HRESULT __stdcall put_FontName (
        /*[in]*/ BSTR FontName ) = 0;
      virtual HRESULT __stdcall raw_SetAlignment (
        /*[in]*/ int TextLineIndex,
        /*[in]*/ enum TextNumberJustificationConstants JustifValue ) = 0;
      virtual HRESULT __stdcall raw_SetBoldState (
        /*[in]*/ int startCharIndex,
        /*[in]*/ int endCharIndex,
        /*[in]*/ VARIANT_BOOL IsBold ) = 0;
      virtual HRESULT __stdcall raw_SetItalicState (
        /*[in]*/ int startCharIndex,
        /*[in]*/ int endCharIndex,
        /*[in]*/ VARIANT_BOOL IsItalic ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
};

struct __declspec(uuid("a25db0c0-9bf8-11ce-967b-080036776c02"))
DatumFrames : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetPlane,put=PutPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetStyle,put=PutStyle))
    DimensionStylePtr Style;
    __declspec(property(get=GetAnnotInitData))
    AnnotInitDataPtr AnnotInitData;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    DatumFramePtr Item (
        const _variant_t & Index );
    void PutPlane (
        IDispatch * _arg1 );
    IDispatchPtr GetPlane ( );
    void PutStyle (
        struct DimensionStyle * _arg1 );
    DimensionStylePtr GetStyle ( );
    DatumFramePtr Add (
        double x1,
        double y1,
        double z1 );
    DatumFramePtr AddByTerminator (
        IDispatch * TerminatorObject,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint1 );
    HRESULT ClearPlane ( );
    HRESULT ClearStyle ( );
    AnnotInitDataPtr GetAnnotInitData ( );
    DatumFramePtr AddDatumFrame (
        struct AnnotInitData * AnnotInitData );
};

struct __declspec(uuid("6c433540-9bf8-11ce-967b-080036776c02"))
DatumFrame : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStyle))
    DimStylePtr Style;
    __declspec(property(get=GetDatum,put=PutDatum))
    _bstr_t Datum;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetVertexCount))
    long VertexCount;
    __declspec(property(get=GetBreakLineDistance,put=PutBreakLineDistance))
    double BreakLineDistance;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetBreakLine,put=PutBreakLine))
    VARIANT_BOOL BreakLine;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetBreakLineDirection,put=PutBreakLineDirection))
    VARIANT_BOOL BreakLineDirection;
    __declspec(property(get=GetLeader,put=PutLeader))
    VARIANT_BOOL Leader;
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetTextScale,put=PutTextScale))
    double TextScale;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetPMIPlane))
    IDispatchPtr PMIPlane;
    __declspec(property(get=GetPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetPMITrackDistance,put=PutPMITrackDistance))
    double PMITrackDistance;
    __declspec(property(get=GetHidePMI,put=PutHidePMI))
    VARIANT_BOOL HidePMI;
    __declspec(property(get=GetPMIName,put=PutPMIName))
    _bstr_t PMIName;
    __declspec(property(get=GetIsTerminatorAttachedToEntity))
    VARIANT_BOOL IsTerminatorAttachedToEntity;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    DimStylePtr GetStyle ( );
    _bstr_t GetDatum ( );
    void PutDatum (
        _bstr_t _arg1 );
    HRESULT SetTerminator (
        IDispatch * TerminatorObj,
        double x,
        double y,
        double z,
        VARIANT_BOOL keyPoint );
    HRESULT GetTerminator (
        IDispatch * * TerminatorObj,
        double * x,
        double * y,
        double * z,
        VARIANT_BOOL * keyPoint );
    HRESULT SetFreeSpacePoint (
        double x,
        double y,
        double z );
    HRESULT GetFreeSpacePoint (
        double * x,
        double * y,
        double * z );
    IDispatchPtr GetPlane ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    double GetBreakLineDistance ( );
    void PutBreakLineDistance (
        double _arg1 );
    VARIANT_BOOL GetBreakLine ( );
    void PutBreakLine (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetBreakLineDirection ( );
    void PutBreakLineDirection (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetLeader ( );
    void PutLeader (
        VARIANT_BOOL _arg1 );
    long GetVertexCount ( );
    HRESULT GetVertices (
        long * VertexCount,
        SAFEARRAY * * Vertices );
    HRESULT SetVertices (
        long VertexCount,
        SAFEARRAY * * Vertices );
    HRESULT GetVertex (
        long Index,
        double * x,
        double * y,
        double * z );
    HRESULT SetVertex (
        long Index,
        double x,
        double y,
        double z );
    HRESULT InsertVertex (
        long Index,
        double x,
        double y,
        double z );
    HRESULT AddVertex (
        double x,
        double y,
        double z );
    HRESULT RemoveVertex (
        long Index );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    double GetTextScale ( );
    void PutTextScale (
        double _arg1 );
    void PutLayer (
        _bstr_t _arg1 );
    _bstr_t GetLayer ( );
    IDispatchPtr GetPMIPlane ( );
    double GetPMITrackDistance ( );
    void PutPMITrackDistance (
        double _arg1 );
    void PutHidePMI (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHidePMI ( );
    DisplayDataPtr GetDisplayData ( );
    HRESULT PromoteToCurrentVersion ( );
    void PutPMIName (
        _bstr_t _arg1 );
    _bstr_t GetPMIName ( );
    HRESULT TransformToModelCoordinates (
        double InputX,
        double InputY,
        double InputZ,
        double * ModelX,
        double * ModelY,
        double * ModelZ );
    VARIANT_BOOL GetIsTerminatorAttachedToEntity ( );
    HRESULT GetReferencedGeometry (
        SAFEARRAY * * ReferencedGeometries );
    HRESULT SetReferencedGeometry (
        SAFEARRAY * * ReferencedGeometries );
};

struct __declspec(uuid("8b4a25e0-9bf8-11ce-967b-080036776c02"))
_IDatumFramesAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetPlane,put=PutPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetStyle,put=PutStyle))
    DimensionStylePtr Style;
    __declspec(property(get=GetAnnotInitData))
    AnnotInitDataPtr AnnotInitData;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    DatumFramePtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    void PutPlane (
        IDispatch * Plane );
    IDispatchPtr GetPlane ( );
    void PutStyle (
        struct DimensionStyle * Style );
    DimensionStylePtr GetStyle ( );
    DatumFramePtr Add (
        double x1,
        double y1,
        double z1 );
    DatumFramePtr AddByTerminator (
        IDispatch * TerminatorObject,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint1 );
    HRESULT ClearPlane ( );
    HRESULT ClearStyle ( );
    AnnotInitDataPtr GetAnnotInitData ( );
    DatumFramePtr AddDatumFrame (
        struct AnnotInitData * AnnotInitData );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * App ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct DatumFrame * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Enum ) = 0;
      virtual HRESULT __stdcall put_Plane (
        /*[in]*/ IDispatch * Plane ) = 0;
      virtual HRESULT __stdcall get_Plane (
        /*[out,retval]*/ IDispatch * * Plane ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ struct DimensionStyle * Style ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct DimensionStyle * * Style ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double z1,
        /*[out,retval]*/ struct DatumFrame * * Obj ) = 0;
      virtual HRESULT __stdcall raw_AddByTerminator (
        /*[in]*/ IDispatch * TerminatorObject,
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double z1,
        /*[in]*/ VARIANT_BOOL keyPoint1,
        /*[out,retval]*/ struct DatumFrame * * Obj ) = 0;
      virtual HRESULT __stdcall raw_ClearPlane ( ) = 0;
      virtual HRESULT __stdcall raw_ClearStyle ( ) = 0;
      virtual HRESULT __stdcall get_AnnotInitData (
        /*[out,retval]*/ struct AnnotInitData * * AnnotInitData ) = 0;
      virtual HRESULT __stdcall raw_AddDatumFrame (
        /*[in]*/ struct AnnotInitData * AnnotInitData,
        /*[out,retval]*/ struct DatumFrame * * Obj ) = 0;
};

struct __declspec(uuid("56f3f9e0-9bf8-11ce-967b-080036776c02"))
_IDatumFrameAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetStyle))
    DimStylePtr Style;
    __declspec(property(get=GetDatum,put=PutDatum))
    _bstr_t Datum;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetVertexCount))
    long VertexCount;
    __declspec(property(get=GetBreakLineDistance,put=PutBreakLineDistance))
    double BreakLineDistance;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[][];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetBreakLine,put=PutBreakLine))
    VARIANT_BOOL BreakLine;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetBreakLineDirection,put=PutBreakLineDirection))
    VARIANT_BOOL BreakLineDirection;
    __declspec(property(get=GetLeader,put=PutLeader))
    VARIANT_BOOL Leader;
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetTextScale,put=PutTextScale))
    double TextScale;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetPMIPlane))
    IDispatchPtr PMIPlane;
    __declspec(property(get=GetPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetPMITrackDistance,put=PutPMITrackDistance))
    double PMITrackDistance;
    __declspec(property(get=GetHidePMI,put=PutHidePMI))
    VARIANT_BOOL HidePMI;
    __declspec(property(get=GetPMIName,put=PutPMIName))
    _bstr_t PMIName;
    __declspec(property(get=GetIsTerminatorAttachedToEntity))
    VARIANT_BOOL IsTerminatorAttachedToEntity;

    //
    // Wrapper methods for error-handling
    //

    DimStylePtr GetStyle ( );
    _bstr_t GetDatum ( );
    void PutDatum (
        _bstr_t Text );
    HRESULT SetTerminator (
        IDispatch * TerminatorObj,
        double x,
        double y,
        double z,
        VARIANT_BOOL keyPoint );
    HRESULT GetTerminator (
        IDispatch * * TerminatorObj,
        double * x,
        double * y,
        double * z,
        VARIANT_BOOL * keyPoint );
    HRESULT SetFreeSpacePoint (
        double x,
        double y,
        double z );
    HRESULT GetFreeSpacePoint (
        double * x,
        double * y,
        double * z );
    IDispatchPtr GetPlane ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse,
        long Lcid = 0 );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    double GetBreakLineDistance ( );
    void PutBreakLineDistance (
        double Distance );
    VARIANT_BOOL GetBreakLine ( );
    void PutBreakLine (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetBreakLineDirection ( );
    void PutBreakLineDirection (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetLeader ( );
    void PutLeader (
        VARIANT_BOOL Flag );
    long GetVertexCount ( );
    HRESULT GetVertices (
        long * VertexCount,
        SAFEARRAY * * Vertices );
    HRESULT SetVertices (
        long VertexCount,
        SAFEARRAY * * Vertices );
    HRESULT GetVertex (
        long Index,
        double * x,
        double * y,
        double * z );
    HRESULT SetVertex (
        long Index,
        double x,
        double y,
        double z );
    HRESULT InsertVertex (
        long Index,
        double x,
        double y,
        double z );
    HRESULT AddVertex (
        double x,
        double y,
        double z );
    HRESULT RemoveVertex (
        long Index );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    double GetTextScale ( );
    void PutTextScale (
        double pdAngle );
    void PutLayer (
        _bstr_t Layer );
    _bstr_t GetLayer ( );
    IDispatchPtr GetPMIPlane ( );
    double GetPMITrackDistance ( );
    void PutPMITrackDistance (
        double pdPMITrackDistance );
    void PutHidePMI (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetHidePMI ( );
    DisplayDataPtr GetDisplayData ( );
    HRESULT PromoteToCurrentVersion ( );
    void PutPMIName (
        _bstr_t Text );
    _bstr_t GetPMIName ( );
    HRESULT TransformToModelCoordinates (
        double InputX,
        double InputY,
        double InputZ,
        double * ModelX,
        double * ModelY,
        double * ModelZ );
    VARIANT_BOOL GetIsTerminatorAttachedToEntity ( );
    HRESULT GetReferencedGeometry (
        SAFEARRAY * * ReferencedGeometries );
    HRESULT SetReferencedGeometry (
        SAFEARRAY * * ReferencedGeometries );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct DimStyle * * Style ) = 0;
      virtual HRESULT __stdcall get_Datum (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_Datum (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall raw_SetTerminator (
        /*[in]*/ IDispatch * TerminatorObj,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z,
        /*[in]*/ VARIANT_BOOL keyPoint ) = 0;
      virtual HRESULT __stdcall raw_GetTerminator (
        /*[out]*/ IDispatch * * TerminatorObj,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ VARIANT_BOOL * keyPoint ) = 0;
      virtual HRESULT __stdcall raw_SetFreeSpacePoint (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_GetFreeSpacePoint (
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z ) = 0;
      virtual HRESULT __stdcall get_Plane (
        /*[out,retval]*/ IDispatch * * Plane ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[in]*/ VARIANT Recurse,
        /*[in,lcid]*/ long Lcid,
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * Type ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * ZOrder ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[in]*/ VARIANT Recurse,
        /*[out,retval]*/ BSTR * Key ) = 0;
      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ IDispatch * * Document ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ double XFrom,
        /*[in]*/ double YFrom,
        /*[in]*/ double XTo,
        /*[in]*/ double YTo ) = 0;
      virtual HRESULT __stdcall raw_Scale (
        /*[in]*/ double Factor ) = 0;
      virtual HRESULT __stdcall raw_Rotate (
        /*[in]*/ double Angle,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[out]*/ double * XMinimum,
        /*[out]*/ double * YMinimum,
        /*[out]*/ double * XMaximum,
        /*[out]*/ double * YMaximum ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ VARIANT XDistance,
        /*[in]*/ VARIANT YDistance,
        /*[out,retval]*/ IDispatch * * NewObject ) = 0;
      virtual HRESULT __stdcall raw_Mirror (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ VARIANT BooleanCopyFlag,
        /*[out,retval]*/ IDispatch * * Object ) = 0;
      virtual HRESULT __stdcall raw_BringToFront ( ) = 0;
      virtual HRESULT __stdcall raw_BringForward ( ) = 0;
      virtual HRESULT __stdcall raw_SendToBack ( ) = 0;
      virtual HRESULT __stdcall raw_SendBackward ( ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall get_BreakLineDistance (
        /*[out,retval]*/ double * Distance ) = 0;
      virtual HRESULT __stdcall put_BreakLineDistance (
        /*[in]*/ double Distance ) = 0;
      virtual HRESULT __stdcall get_BreakLine (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_BreakLine (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_BreakLineDirection (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_BreakLineDirection (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_Leader (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_Leader (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_VertexCount (
        /*[out,retval]*/ long * VertexCount ) = 0;
      virtual HRESULT __stdcall raw_GetVertices (
        /*[out]*/ long * VertexCount,
        /*[in,out]*/ SAFEARRAY * * Vertices ) = 0;
      virtual HRESULT __stdcall raw_SetVertices (
        /*[in]*/ long VertexCount,
        /*[in]*/ SAFEARRAY * * Vertices ) = 0;
      virtual HRESULT __stdcall raw_GetVertex (
        /*[in]*/ long Index,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[in]*/ double * z ) = 0;
      virtual HRESULT __stdcall raw_SetVertex (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_InsertVertex (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_AddVertex (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_RemoveVertex (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall get_KeyPointCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_GetKeyPoint (
        /*[in]*/ long Index,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ enum TGFramework::KeyPointType * KeypointType,
        /*[out]*/ long * HandleType ) = 0;
      virtual HRESULT __stdcall raw_SetKeyPoint (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
      virtual HRESULT __stdcall get_TextScale (
        /*[out,retval]*/ double * pdAngle ) = 0;
      virtual HRESULT __stdcall put_TextScale (
        /*[in]*/ double pdAngle ) = 0;
      virtual HRESULT __stdcall put_Layer (
        /*[in]*/ BSTR Layer ) = 0;
      virtual HRESULT __stdcall get_Layer (
        /*[out,retval]*/ BSTR * Layer ) = 0;
      virtual HRESULT __stdcall get_PMIPlane (
        /*[out,retval]*/ IDispatch * * pPMIPlane ) = 0;
      virtual HRESULT __stdcall get_PMITrackDistance (
        /*[out,retval]*/ double * pdPMITrackDistance ) = 0;
      virtual HRESULT __stdcall put_PMITrackDistance (
        /*[in]*/ double pdPMITrackDistance ) = 0;
      virtual HRESULT __stdcall put_HidePMI (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_HidePMI (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_GetDisplayData (
        /*[out,retval]*/ struct DisplayData * * pDisplayData ) = 0;
      virtual HRESULT __stdcall raw_PromoteToCurrentVersion ( ) = 0;
      virtual HRESULT __stdcall put_PMIName (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_PMIName (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall raw_TransformToModelCoordinates (
        /*[in]*/ double InputX,
        /*[in]*/ double InputY,
        /*[in]*/ double InputZ,
        /*[out]*/ double * ModelX,
        /*[out]*/ double * ModelY,
        /*[out]*/ double * ModelZ ) = 0;
      virtual HRESULT __stdcall get_IsTerminatorAttachedToEntity (
        /*[out,retval]*/ VARIANT_BOOL * bIsAttached ) = 0;
      virtual HRESULT __stdcall raw_GetReferencedGeometry (
        /*[out]*/ SAFEARRAY * * ReferencedGeometries ) = 0;
      virtual HRESULT __stdcall raw_SetReferencedGeometry (
        /*[in]*/ SAFEARRAY * * ReferencedGeometries ) = 0;
};

struct __declspec(uuid("2ebb2a95-c806-11ce-bb17-080036776c02"))
FeatureControlFrames : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetPlane,put=PutPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetStyle,put=PutStyle))
    DimensionStylePtr Style;
    __declspec(property(get=GetDataSet,put=PutDataSet))
    FeatureControlFrameDataSetPtr DataSet;
    __declspec(property(get=GetAnnotInitData))
    AnnotInitDataPtr AnnotInitData;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    FeatureControlFramePtr Item (
        const _variant_t & Index );
    void PutPlane (
        IDispatch * _arg1 );
    IDispatchPtr GetPlane ( );
    void PutStyle (
        struct DimensionStyle * _arg1 );
    DimensionStylePtr GetStyle ( );
    void PutDataSet (
        struct FeatureControlFrameDataSet * _arg1 );
    FeatureControlFrameDataSetPtr GetDataSet ( );
    FeatureControlFramePtr Add (
        double x,
        double y,
        double z );
    FeatureControlFramePtr AddByTerminator (
        IDispatch * TerminatorObject,
        double x,
        double y,
        double z,
        VARIANT_BOOL keyPoint );
    HRESULT ClearPlane ( );
    HRESULT ClearStyle ( );
    HRESULT ClearDataSet ( );
    AnnotInitDataPtr GetAnnotInitData ( );
    FeatureControlFramePtr AddFeatureControlFrame (
        struct AnnotInitData * AnnotInitData );
};

struct __declspec(uuid("2ebb2a92-c806-11ce-bb17-080036776c02"))
FeatureControlFrame : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStyle))
    DimStylePtr Style;
    __declspec(property(get=GetCompositeFrame,put=PutCompositeFrame))
    VARIANT_BOOL CompositeFrame;
    __declspec(property(get=GetBoxAlignment,put=PutBoxAlignment))
    VARIANT_BOOL BoxAlignment;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetFCFAllOver,put=PutFCFAllOver))
    VARIANT_BOOL FCFAllOver;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetName))
    _bstr_t Name[];
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetPMIPlane))
    IDispatchPtr PMIPlane;
    __declspec(property(get=GetPMITrackDistance,put=PutPMITrackDistance))
    double PMITrackDistance;
    __declspec(property(get=GetHidePMI,put=PutHidePMI))
    VARIANT_BOOL HidePMI;
    __declspec(property(get=GetTertiaryFrame,put=PutTertiaryFrame))
    _bstr_t TertiaryFrame;
    __declspec(property(get=GetQuaternaryFrame,put=PutQuaternaryFrame))
    _bstr_t QuaternaryFrame;
    __declspec(property(get=GetCompositePrimaryAndSecondaryText,put=PutCompositePrimaryAndSecondaryText))
    VARIANT_BOOL CompositePrimaryAndSecondaryText;
    __declspec(property(get=GetCompositeSecondaryAndTertiaryText,put=PutCompositeSecondaryAndTertiaryText))
    VARIANT_BOOL CompositeSecondaryAndTertiaryText;
    __declspec(property(get=GetCompositeTertiaryAndQuaternaryText,put=PutCompositeTertiaryAndQuaternaryText))
    VARIANT_BOOL CompositeTertiaryAndQuaternaryText;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum DimFCFOrientationConstants Orientation;
    __declspec(property(get=GetLeaderTextConnectionPoint,put=PutLeaderTextConnectionPoint))
    enum DimFCFLeaderTextConnectionPointConstants LeaderTextConnectionPoint;
    __declspec(property(get=GetFCFBorderPointCount))
    long FCFBorderPointCount;
    __declspec(property(get=GetPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetFCFAllAround,put=PutFCFAllAround))
    VARIANT_BOOL FCFAllAround;
    __declspec(property(get=GetPrimaryFrame,put=PutPrimaryFrame))
    _bstr_t PrimaryFrame;
    __declspec(property(get=GetSecondaryFrame,put=PutSecondaryFrame))
    _bstr_t SecondaryFrame;
    __declspec(property(get=GetProjectedToleranceFrame,put=PutProjectedToleranceFrame))
    _bstr_t ProjectedToleranceFrame;
    __declspec(property(get=GetPMIName,put=PutPMIName))
    _bstr_t PMIName;
    __declspec(property(get=GetIsTerminatorAttachedToEntity))
    VARIANT_BOOL IsTerminatorAttachedToEntity;
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetVertexCount))
    long VertexCount;
    __declspec(property(get=GetBreakLineDistance,put=PutBreakLineDistance))
    double BreakLineDistance;
    __declspec(property(get=GetBreakLine,put=PutBreakLine))
    VARIANT_BOOL BreakLine;
    __declspec(property(get=GetBreakLineDirection,put=PutBreakLineDirection))
    VARIANT_BOOL BreakLineDirection;
    __declspec(property(get=GetLeader,put=PutLeader))
    VARIANT_BOOL Leader;
    __declspec(property(get=GetRotationAngle,put=PutRotationAngle))
    double RotationAngle;
    __declspec(property(get=GetTextScale,put=PutTextScale))
    double TextScale;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    DimStylePtr GetStyle ( );
    void PutBoxAlignment (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetBoxAlignment ( );
    void PutCompositeFrame (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetCompositeFrame ( );
    HRESULT SetTerminator (
        IDispatch * TerminatorObj,
        double x,
        double y,
        double z,
        VARIANT_BOOL keyPoint );
    HRESULT GetTerminator (
        IDispatch * * TerminatorObj,
        double * x,
        double * y,
        double * z,
        VARIANT_BOOL * keyPoint );
    HRESULT SetFreeSpacePoint (
        double x,
        double y,
        double z );
    HRESULT GetFreeSpacePoint (
        double * x,
        double * y,
        double * z );
    IDispatchPtr GetPlane ( );
    void PutFCFAllAround (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetFCFAllAround ( );
    void PutPrimaryFrame (
        _bstr_t _arg1 );
    _bstr_t GetPrimaryFrame ( );
    void PutSecondaryFrame (
        _bstr_t _arg1 );
    _bstr_t GetSecondaryFrame ( );
    void PutProjectedToleranceFrame (
        _bstr_t _arg1 );
    _bstr_t GetProjectedToleranceFrame ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    double GetBreakLineDistance ( );
    void PutBreakLineDistance (
        double _arg1 );
    VARIANT_BOOL GetBreakLine ( );
    void PutBreakLine (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetBreakLineDirection ( );
    void PutBreakLineDirection (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetLeader ( );
    void PutLeader (
        VARIANT_BOOL _arg1 );
    long GetVertexCount ( );
    HRESULT GetVertices (
        long * VertexCount,
        SAFEARRAY * * Vertices );
    HRESULT SetVertices (
        long VertexCount,
        SAFEARRAY * * Vertices );
    HRESULT GetVertex (
        long Index,
        double * x,
        double * y,
        double * z );
    HRESULT SetVertex (
        long Index,
        double x,
        double y,
        double z );
    HRESULT InsertVertex (
        long Index,
        double x,
        double y,
        double z );
    HRESULT AddVertex (
        double x,
        double y,
        double z );
    HRESULT RemoveVertex (
        long Index );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    double GetRotationAngle ( );
    void PutRotationAngle (
        double _arg1 );
    double GetTextScale ( );
    void PutTextScale (
        double _arg1 );
    void PutLayer (
        _bstr_t _arg1 );
    _bstr_t GetLayer ( );
    IDispatchPtr GetPMIPlane ( );
    double GetPMITrackDistance ( );
    void PutPMITrackDistance (
        double _arg1 );
    void PutHidePMI (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHidePMI ( );
    void PutFCFAllOver (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetFCFAllOver ( );
    void PutTertiaryFrame (
        _bstr_t _arg1 );
    _bstr_t GetTertiaryFrame ( );
    void PutQuaternaryFrame (
        _bstr_t _arg1 );
    _bstr_t GetQuaternaryFrame ( );
    void PutCompositePrimaryAndSecondaryText (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetCompositePrimaryAndSecondaryText ( );
    void PutCompositeSecondaryAndTertiaryText (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetCompositeSecondaryAndTertiaryText ( );
    void PutCompositeTertiaryAndQuaternaryText (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetCompositeTertiaryAndQuaternaryText ( );
    void PutOrientation (
        enum DimFCFOrientationConstants _arg1 );
    enum DimFCFOrientationConstants GetOrientation ( );
    void PutLeaderTextConnectionPoint (
        enum DimFCFLeaderTextConnectionPointConstants _arg1 );
    enum DimFCFLeaderTextConnectionPointConstants GetLeaderTextConnectionPoint ( );
    long GetFCFBorderPointCount ( );
    HRESULT FCFBorderPointAtIndex (
        long Index,
        double * x,
        double * y,
        double * z );
    DisplayDataPtr GetDisplayData ( );
    HRESULT PromoteToCurrentVersion ( );
    HRESULT SetAlignmentShape (
        IDispatch * AlignmentShapeObj,
        double x,
        double y );
    HRESULT GetAlignmentShape (
        IDispatch * * AlignmentShapeObj,
        double * x,
        double * y );
    void PutPMIName (
        _bstr_t _arg1 );
    _bstr_t GetPMIName ( );
    HRESULT TransformToModelCoordinates (
        double InputX,
        double InputY,
        double InputZ,
        double * ModelX,
        double * ModelY,
        double * ModelZ );
    VARIANT_BOOL GetIsTerminatorAttachedToEntity ( );
    HRESULT GetReferencedGeometry (
        SAFEARRAY * * ReferencedGeometries );
    HRESULT SetReferencedGeometry (
        SAFEARRAY * * ReferencedGeometries );
    HRESULT GetReferencedObjectInfo (
        SAFEARRAY * * ReferencedObjects,
        SAFEARRAY * * ReferencedObjectTypes );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
};

enum DimFCFOrientationConstants
{
    igDimFCFOrientationVertical = 0,
    igDimFCFOrientationHorizontal = 1,
    igDimFCFOrientationPerpendicular = 2,
    igDimFCFOrientationParallel = 3
};

enum DimFCFLeaderTextConnectionPointConstants
{
    igDimFCFLeaderTextConnectionPointCenter = 0,
    igDimFCFLeaderTextConnectionPointMiddleLeft = 1,
    igDimFCFLeaderTextConnectionPointTopLeft = 2,
    igDimFCFLeaderTextConnectionPointTopMiddle = 3,
    igDimFCFLeaderTextConnectionPointTopRight = 4,
    igDimFCFLeaderTextConnectionPointMiddleRight = 5,
    igDimFCFLeaderTextConnectionPointBottomRight = 6,
    igDimFCFLeaderTextConnectionPointBottomMiddle = 7,
    igDimFCFLeaderTextConnectionPointBottomLeft = 8
};

struct __declspec(uuid("2ebb2a90-c806-11ce-bb17-080036776c02"))
_IFeatureControlFrameAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetStyle))
    DimStylePtr Style;
    __declspec(property(get=GetCompositeFrame,put=PutCompositeFrame))
    VARIANT_BOOL CompositeFrame;
    __declspec(property(get=GetBoxAlignment,put=PutBoxAlignment))
    VARIANT_BOOL BoxAlignment;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetFCFAllOver,put=PutFCFAllOver))
    VARIANT_BOOL FCFAllOver;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetName))
    _bstr_t Name[][];
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetPMIPlane))
    IDispatchPtr PMIPlane;
    __declspec(property(get=GetPMITrackDistance,put=PutPMITrackDistance))
    double PMITrackDistance;
    __declspec(property(get=GetHidePMI,put=PutHidePMI))
    VARIANT_BOOL HidePMI;
    __declspec(property(get=GetTertiaryFrame,put=PutTertiaryFrame))
    _bstr_t TertiaryFrame;
    __declspec(property(get=GetQuaternaryFrame,put=PutQuaternaryFrame))
    _bstr_t QuaternaryFrame;
    __declspec(property(get=GetCompositePrimaryAndSecondaryText,put=PutCompositePrimaryAndSecondaryText))
    VARIANT_BOOL CompositePrimaryAndSecondaryText;
    __declspec(property(get=GetCompositeSecondaryAndTertiaryText,put=PutCompositeSecondaryAndTertiaryText))
    VARIANT_BOOL CompositeSecondaryAndTertiaryText;
    __declspec(property(get=GetCompositeTertiaryAndQuaternaryText,put=PutCompositeTertiaryAndQuaternaryText))
    VARIANT_BOOL CompositeTertiaryAndQuaternaryText;
    __declspec(property(get=GetOrientation,put=PutOrientation))
    enum DimFCFOrientationConstants Orientation;
    __declspec(property(get=GetLeaderTextConnectionPoint,put=PutLeaderTextConnectionPoint))
    enum DimFCFLeaderTextConnectionPointConstants LeaderTextConnectionPoint;
    __declspec(property(get=GetFCFBorderPointCount))
    long FCFBorderPointCount;
    __declspec(property(get=GetPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetFCFAllAround,put=PutFCFAllAround))
    VARIANT_BOOL FCFAllAround;
    __declspec(property(get=GetPrimaryFrame,put=PutPrimaryFrame))
    _bstr_t PrimaryFrame;
    __declspec(property(get=GetSecondaryFrame,put=PutSecondaryFrame))
    _bstr_t SecondaryFrame;
    __declspec(property(get=GetProjectedToleranceFrame,put=PutProjectedToleranceFrame))
    _bstr_t ProjectedToleranceFrame;
    __declspec(property(get=GetPMIName,put=PutPMIName))
    _bstr_t PMIName;
    __declspec(property(get=GetIsTerminatorAttachedToEntity))
    VARIANT_BOOL IsTerminatorAttachedToEntity;
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetVertexCount))
    long VertexCount;
    __declspec(property(get=GetBreakLineDistance,put=PutBreakLineDistance))
    double BreakLineDistance;
    __declspec(property(get=GetBreakLine,put=PutBreakLine))
    VARIANT_BOOL BreakLine;
    __declspec(property(get=GetBreakLineDirection,put=PutBreakLineDirection))
    VARIANT_BOOL BreakLineDirection;
    __declspec(property(get=GetLeader,put=PutLeader))
    VARIANT_BOOL Leader;
    __declspec(property(get=GetRotationAngle,put=PutRotationAngle))
    double RotationAngle;
    __declspec(property(get=GetTextScale,put=PutTextScale))
    double TextScale;

    //
    // Wrapper methods for error-handling
    //

    DimStylePtr GetStyle ( );
    void PutBoxAlignment (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetBoxAlignment ( );
    void PutCompositeFrame (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetCompositeFrame ( );
    HRESULT SetTerminator (
        IDispatch * TerminatorObj,
        double x,
        double y,
        double z,
        VARIANT_BOOL keyPoint );
    HRESULT GetTerminator (
        IDispatch * * TerminatorObj,
        double * x,
        double * y,
        double * z,
        VARIANT_BOOL * keyPoint );
    HRESULT SetFreeSpacePoint (
        double x,
        double y,
        double z );
    HRESULT GetFreeSpacePoint (
        double * x,
        double * y,
        double * z );
    IDispatchPtr GetPlane ( );
    void PutFCFAllAround (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetFCFAllAround ( );
    void PutPrimaryFrame (
        _bstr_t Text );
    _bstr_t GetPrimaryFrame ( );
    void PutSecondaryFrame (
        _bstr_t Text );
    _bstr_t GetSecondaryFrame ( );
    void PutProjectedToleranceFrame (
        _bstr_t Text );
    _bstr_t GetProjectedToleranceFrame ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse,
        long Lcid = 0 );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    double GetBreakLineDistance ( );
    void PutBreakLineDistance (
        double Distance );
    VARIANT_BOOL GetBreakLine ( );
    void PutBreakLine (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetBreakLineDirection ( );
    void PutBreakLineDirection (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetLeader ( );
    void PutLeader (
        VARIANT_BOOL Flag );
    long GetVertexCount ( );
    HRESULT GetVertices (
        long * VertexCount,
        SAFEARRAY * * Vertices );
    HRESULT SetVertices (
        long VertexCount,
        SAFEARRAY * * Vertices );
    HRESULT GetVertex (
        long Index,
        double * x,
        double * y,
        double * z );
    HRESULT SetVertex (
        long Index,
        double x,
        double y,
        double z );
    HRESULT InsertVertex (
        long Index,
        double x,
        double y,
        double z );
    HRESULT AddVertex (
        double x,
        double y,
        double z );
    HRESULT RemoveVertex (
        long Index );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    double GetRotationAngle ( );
    void PutRotationAngle (
        double pdAngle );
    double GetTextScale ( );
    void PutTextScale (
        double pdAngle );
    void PutLayer (
        _bstr_t Layer );
    _bstr_t GetLayer ( );
    IDispatchPtr GetPMIPlane ( );
    double GetPMITrackDistance ( );
    void PutPMITrackDistance (
        double pdPMITrackDistance );
    void PutHidePMI (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetHidePMI ( );
    void PutFCFAllOver (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetFCFAllOver ( );
    void PutTertiaryFrame (
        _bstr_t Text );
    _bstr_t GetTertiaryFrame ( );
    void PutQuaternaryFrame (
        _bstr_t Text );
    _bstr_t GetQuaternaryFrame ( );
    void PutCompositePrimaryAndSecondaryText (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetCompositePrimaryAndSecondaryText ( );
    void PutCompositeSecondaryAndTertiaryText (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetCompositeSecondaryAndTertiaryText ( );
    void PutCompositeTertiaryAndQuaternaryText (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetCompositeTertiaryAndQuaternaryText ( );
    void PutOrientation (
        enum DimFCFOrientationConstants Flag );
    enum DimFCFOrientationConstants GetOrientation ( );
    void PutLeaderTextConnectionPoint (
        enum DimFCFLeaderTextConnectionPointConstants Flag );
    enum DimFCFLeaderTextConnectionPointConstants GetLeaderTextConnectionPoint ( );
    long GetFCFBorderPointCount ( );
    HRESULT FCFBorderPointAtIndex (
        long Index,
        double * x,
        double * y,
        double * z );
    DisplayDataPtr GetDisplayData ( );
    HRESULT PromoteToCurrentVersion ( );
    HRESULT SetAlignmentShape (
        IDispatch * AlignmentShapeObj,
        double x,
        double y );
    HRESULT GetAlignmentShape (
        IDispatch * * AlignmentShapeObj,
        double * x,
        double * y );
    void PutPMIName (
        _bstr_t Text );
    _bstr_t GetPMIName ( );
    HRESULT TransformToModelCoordinates (
        double InputX,
        double InputY,
        double InputZ,
        double * ModelX,
        double * ModelY,
        double * ModelZ );
    VARIANT_BOOL GetIsTerminatorAttachedToEntity ( );
    HRESULT GetReferencedGeometry (
        SAFEARRAY * * ReferencedGeometries );
    HRESULT SetReferencedGeometry (
        SAFEARRAY * * ReferencedGeometries );
    HRESULT GetReferencedObjectInfo (
        SAFEARRAY * * ReferencedObjects,
        SAFEARRAY * * ReferencedObjectTypes );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct DimStyle * * Style ) = 0;
      virtual HRESULT __stdcall put_BoxAlignment (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_BoxAlignment (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_CompositeFrame (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_CompositeFrame (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall raw_SetTerminator (
        /*[in]*/ IDispatch * TerminatorObj,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z,
        /*[in]*/ VARIANT_BOOL keyPoint ) = 0;
      virtual HRESULT __stdcall raw_GetTerminator (
        /*[out]*/ IDispatch * * TerminatorObj,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ VARIANT_BOOL * keyPoint ) = 0;
      virtual HRESULT __stdcall raw_SetFreeSpacePoint (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_GetFreeSpacePoint (
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z ) = 0;
      virtual HRESULT __stdcall get_Plane (
        /*[out,retval]*/ IDispatch * * Plane ) = 0;
      virtual HRESULT __stdcall put_FCFAllAround (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_FCFAllAround (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_PrimaryFrame (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_PrimaryFrame (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_SecondaryFrame (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_SecondaryFrame (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_ProjectedToleranceFrame (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_ProjectedToleranceFrame (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[in]*/ VARIANT Recurse,
        /*[in,lcid]*/ long Lcid,
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * Type ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * ZOrder ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[in]*/ VARIANT Recurse,
        /*[out,retval]*/ BSTR * Key ) = 0;
      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ IDispatch * * Document ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ double XFrom,
        /*[in]*/ double YFrom,
        /*[in]*/ double XTo,
        /*[in]*/ double YTo ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[out]*/ double * XMinimum,
        /*[out]*/ double * YMinimum,
        /*[out]*/ double * XMaximum,
        /*[out]*/ double * YMaximum ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ VARIANT XDistance,
        /*[in]*/ VARIANT YDistance,
        /*[out,retval]*/ IDispatch * * NewObject ) = 0;
      virtual HRESULT __stdcall raw_BringToFront ( ) = 0;
      virtual HRESULT __stdcall raw_BringForward ( ) = 0;
      virtual HRESULT __stdcall raw_SendToBack ( ) = 0;
      virtual HRESULT __stdcall raw_SendBackward ( ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall get_BreakLineDistance (
        /*[out,retval]*/ double * Distance ) = 0;
      virtual HRESULT __stdcall put_BreakLineDistance (
        /*[in]*/ double Distance ) = 0;
      virtual HRESULT __stdcall get_BreakLine (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_BreakLine (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_BreakLineDirection (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_BreakLineDirection (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_Leader (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_Leader (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_VertexCount (
        /*[out,retval]*/ long * VertexCount ) = 0;
      virtual HRESULT __stdcall raw_GetVertices (
        /*[out]*/ long * VertexCount,
        /*[in,out]*/ SAFEARRAY * * Vertices ) = 0;
      virtual HRESULT __stdcall raw_SetVertices (
        /*[in]*/ long VertexCount,
        /*[in]*/ SAFEARRAY * * Vertices ) = 0;
      virtual HRESULT __stdcall raw_GetVertex (
        /*[in]*/ long Index,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[in]*/ double * z ) = 0;
      virtual HRESULT __stdcall raw_SetVertex (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_InsertVertex (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_AddVertex (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_RemoveVertex (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall get_KeyPointCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_GetKeyPoint (
        /*[in]*/ long Index,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ enum TGFramework::KeyPointType * KeypointType,
        /*[out]*/ long * HandleType ) = 0;
      virtual HRESULT __stdcall raw_SetKeyPoint (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall get_RotationAngle (
        /*[out,retval]*/ double * pdAngle ) = 0;
      virtual HRESULT __stdcall put_RotationAngle (
        /*[in]*/ double pdAngle ) = 0;
      virtual HRESULT __stdcall get_TextScale (
        /*[out,retval]*/ double * pdAngle ) = 0;
      virtual HRESULT __stdcall put_TextScale (
        /*[in]*/ double pdAngle ) = 0;
      virtual HRESULT __stdcall put_Layer (
        /*[in]*/ BSTR Layer ) = 0;
      virtual HRESULT __stdcall get_Layer (
        /*[out,retval]*/ BSTR * Layer ) = 0;
      virtual HRESULT __stdcall get_PMIPlane (
        /*[out,retval]*/ IDispatch * * pPMIPlane ) = 0;
      virtual HRESULT __stdcall get_PMITrackDistance (
        /*[out,retval]*/ double * pdPMITrackDistance ) = 0;
      virtual HRESULT __stdcall put_PMITrackDistance (
        /*[in]*/ double pdPMITrackDistance ) = 0;
      virtual HRESULT __stdcall put_HidePMI (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_HidePMI (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_FCFAllOver (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_FCFAllOver (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_TertiaryFrame (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_TertiaryFrame (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_QuaternaryFrame (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_QuaternaryFrame (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_CompositePrimaryAndSecondaryText (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_CompositePrimaryAndSecondaryText (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_CompositeSecondaryAndTertiaryText (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_CompositeSecondaryAndTertiaryText (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_CompositeTertiaryAndQuaternaryText (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_CompositeTertiaryAndQuaternaryText (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_Orientation (
        /*[in]*/ enum DimFCFOrientationConstants Flag ) = 0;
      virtual HRESULT __stdcall get_Orientation (
        /*[out,retval]*/ enum DimFCFOrientationConstants * Flag ) = 0;
      virtual HRESULT __stdcall put_LeaderTextConnectionPoint (
        /*[in]*/ enum DimFCFLeaderTextConnectionPointConstants Flag ) = 0;
      virtual HRESULT __stdcall get_LeaderTextConnectionPoint (
        /*[out,retval]*/ enum DimFCFLeaderTextConnectionPointConstants * Flag ) = 0;
      virtual HRESULT __stdcall get_FCFBorderPointCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_FCFBorderPointAtIndex (
        /*[in]*/ long Index,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z ) = 0;
      virtual HRESULT __stdcall raw_GetDisplayData (
        /*[out,retval]*/ struct DisplayData * * pDisplayData ) = 0;
      virtual HRESULT __stdcall raw_PromoteToCurrentVersion ( ) = 0;
      virtual HRESULT __stdcall raw_SetAlignmentShape (
        /*[in]*/ IDispatch * AlignmentShapeObj,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_GetAlignmentShape (
        /*[out]*/ IDispatch * * AlignmentShapeObj,
        /*[out]*/ double * x,
        /*[out]*/ double * y ) = 0;
      virtual HRESULT __stdcall put_PMIName (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_PMIName (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall raw_TransformToModelCoordinates (
        /*[in]*/ double InputX,
        /*[in]*/ double InputY,
        /*[in]*/ double InputZ,
        /*[out]*/ double * ModelX,
        /*[out]*/ double * ModelY,
        /*[out]*/ double * ModelZ ) = 0;
      virtual HRESULT __stdcall get_IsTerminatorAttachedToEntity (
        /*[out,retval]*/ VARIANT_BOOL * bIsAttached ) = 0;
      virtual HRESULT __stdcall raw_GetReferencedGeometry (
        /*[out]*/ SAFEARRAY * * ReferencedGeometries ) = 0;
      virtual HRESULT __stdcall raw_SetReferencedGeometry (
        /*[in]*/ SAFEARRAY * * ReferencedGeometries ) = 0;
      virtual HRESULT __stdcall raw_GetReferencedObjectInfo (
        /*[out]*/ SAFEARRAY * * ReferencedObjects,
        /*[out]*/ SAFEARRAY * * ReferencedObjectTypes ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
};

struct __declspec(uuid("b3cec7e1-34a4-11cf-848f-080036373002"))
FeatureControlFrameDataSet : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetCompositeFrame,put=PutCompositeFrame))
    VARIANT_BOOL CompositeFrame;
    __declspec(property(get=GetPrimaryFrame,put=PutPrimaryFrame))
    _bstr_t PrimaryFrame;
    __declspec(property(get=GetSecondaryFrame,put=PutSecondaryFrame))
    _bstr_t SecondaryFrame;
    __declspec(property(get=GetProjectedToleranceFrame,put=PutProjectedToleranceFrame))
    _bstr_t ProjectedToleranceFrame;
    __declspec(property(get=GetFCFAllOver,put=PutFCFAllOver))
    VARIANT_BOOL FCFAllOver;
    __declspec(property(get=GetTertiaryFrame,put=PutTertiaryFrame))
    _bstr_t TertiaryFrame;
    __declspec(property(get=GetBoxAlignment,put=PutBoxAlignment))
    VARIANT_BOOL BoxAlignment;
    __declspec(property(get=GetQuaternaryFrame,put=PutQuaternaryFrame))
    _bstr_t QuaternaryFrame;
    __declspec(property(get=GetCompositePrimaryAndSecondaryText,put=PutCompositePrimaryAndSecondaryText))
    VARIANT_BOOL CompositePrimaryAndSecondaryText;
    __declspec(property(get=GetCompositeSecondaryAndTertiaryText,put=PutCompositeSecondaryAndTertiaryText))
    VARIANT_BOOL CompositeSecondaryAndTertiaryText;
    __declspec(property(get=GetCompositeTertiaryAndQuaternaryText,put=PutCompositeTertiaryAndQuaternaryText))
    VARIANT_BOOL CompositeTertiaryAndQuaternaryText;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetFCFAllAround,put=PutFCFAllAround))
    VARIANT_BOOL FCFAllAround;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    void PutBoxAlignment (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetBoxAlignment ( );
    void PutCompositeFrame (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetCompositeFrame ( );
    void PutFCFAllAround (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetFCFAllAround ( );
    void PutPrimaryFrame (
        _bstr_t _arg1 );
    _bstr_t GetPrimaryFrame ( );
    void PutSecondaryFrame (
        _bstr_t _arg1 );
    _bstr_t GetSecondaryFrame ( );
    void PutProjectedToleranceFrame (
        _bstr_t _arg1 );
    _bstr_t GetProjectedToleranceFrame ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetName ( );
    void PutFCFAllOver (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetFCFAllOver ( );
    void PutTertiaryFrame (
        _bstr_t _arg1 );
    _bstr_t GetTertiaryFrame ( );
    void PutQuaternaryFrame (
        _bstr_t _arg1 );
    _bstr_t GetQuaternaryFrame ( );
    void PutCompositePrimaryAndSecondaryText (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetCompositePrimaryAndSecondaryText ( );
    void PutCompositeSecondaryAndTertiaryText (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetCompositeSecondaryAndTertiaryText ( );
    void PutCompositeTertiaryAndQuaternaryText (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetCompositeTertiaryAndQuaternaryText ( );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
};

struct __declspec(uuid("2ebb2a94-c806-11ce-bb17-080036776c02"))
_IFeatureControlFramesAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetPlane,put=PutPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetStyle,put=PutStyle))
    DimensionStylePtr Style;
    __declspec(property(get=GetDataSet,put=PutDataSet))
    FeatureControlFrameDataSetPtr DataSet;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetAnnotInitData))
    AnnotInitDataPtr AnnotInitData;

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    FeatureControlFramePtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    void PutPlane (
        IDispatch * Plane );
    IDispatchPtr GetPlane ( );
    void PutStyle (
        struct DimensionStyle * Style );
    DimensionStylePtr GetStyle ( );
    void PutDataSet (
        struct FeatureControlFrameDataSet * DataSet );
    FeatureControlFrameDataSetPtr GetDataSet ( );
    FeatureControlFramePtr Add (
        double x,
        double y,
        double z );
    FeatureControlFramePtr AddByTerminator (
        IDispatch * TerminatorObject,
        double x,
        double y,
        double z,
        VARIANT_BOOL keyPoint );
    HRESULT ClearPlane ( );
    HRESULT ClearStyle ( );
    HRESULT ClearDataSet ( );
    AnnotInitDataPtr GetAnnotInitData ( );
    FeatureControlFramePtr AddFeatureControlFrame (
        struct AnnotInitData * AnnotInitData );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * App ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct FeatureControlFrame * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Enum ) = 0;
      virtual HRESULT __stdcall put_Plane (
        /*[in]*/ IDispatch * Plane ) = 0;
      virtual HRESULT __stdcall get_Plane (
        /*[out,retval]*/ IDispatch * * Plane ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ struct DimensionStyle * Style ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct DimensionStyle * * Style ) = 0;
      virtual HRESULT __stdcall put_DataSet (
        /*[in]*/ struct FeatureControlFrameDataSet * DataSet ) = 0;
      virtual HRESULT __stdcall get_DataSet (
        /*[out,retval]*/ struct FeatureControlFrameDataSet * * DataSet ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z,
        /*[out,retval]*/ struct FeatureControlFrame * * Obj ) = 0;
      virtual HRESULT __stdcall raw_AddByTerminator (
        /*[in]*/ IDispatch * TerminatorObject,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z,
        /*[in]*/ VARIANT_BOOL keyPoint,
        /*[out,retval]*/ struct FeatureControlFrame * * Obj ) = 0;
      virtual HRESULT __stdcall raw_ClearPlane ( ) = 0;
      virtual HRESULT __stdcall raw_ClearStyle ( ) = 0;
      virtual HRESULT __stdcall raw_ClearDataSet ( ) = 0;
      virtual HRESULT __stdcall get_AnnotInitData (
        /*[out,retval]*/ struct AnnotInitData * * AnnotInitData ) = 0;
      virtual HRESULT __stdcall raw_AddFeatureControlFrame (
        /*[in]*/ struct AnnotInitData * AnnotInitData,
        /*[out,retval]*/ struct FeatureControlFrame * * Obj ) = 0;
};

struct __declspec(uuid("b3cec7e0-34a4-11cf-848f-080036373002"))
_IFeatureControlFrameDataSetAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetCompositeFrame,put=PutCompositeFrame))
    VARIANT_BOOL CompositeFrame;
    __declspec(property(get=GetPrimaryFrame,put=PutPrimaryFrame))
    _bstr_t PrimaryFrame;
    __declspec(property(get=GetSecondaryFrame,put=PutSecondaryFrame))
    _bstr_t SecondaryFrame;
    __declspec(property(get=GetProjectedToleranceFrame,put=PutProjectedToleranceFrame))
    _bstr_t ProjectedToleranceFrame;
    __declspec(property(get=GetFCFAllOver,put=PutFCFAllOver))
    VARIANT_BOOL FCFAllOver;
    __declspec(property(get=GetTertiaryFrame,put=PutTertiaryFrame))
    _bstr_t TertiaryFrame;
    __declspec(property(get=GetBoxAlignment,put=PutBoxAlignment))
    VARIANT_BOOL BoxAlignment;
    __declspec(property(get=GetQuaternaryFrame,put=PutQuaternaryFrame))
    _bstr_t QuaternaryFrame;
    __declspec(property(get=GetCompositePrimaryAndSecondaryText,put=PutCompositePrimaryAndSecondaryText))
    VARIANT_BOOL CompositePrimaryAndSecondaryText;
    __declspec(property(get=GetCompositeSecondaryAndTertiaryText,put=PutCompositeSecondaryAndTertiaryText))
    VARIANT_BOOL CompositeSecondaryAndTertiaryText;
    __declspec(property(get=GetCompositeTertiaryAndQuaternaryText,put=PutCompositeTertiaryAndQuaternaryText))
    VARIANT_BOOL CompositeTertiaryAndQuaternaryText;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetFCFAllAround,put=PutFCFAllAround))
    VARIANT_BOOL FCFAllAround;

    //
    // Wrapper methods for error-handling
    //

    void PutBoxAlignment (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetBoxAlignment ( );
    void PutCompositeFrame (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetCompositeFrame ( );
    void PutFCFAllAround (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetFCFAllAround ( );
    void PutPrimaryFrame (
        _bstr_t Text );
    _bstr_t GetPrimaryFrame ( );
    void PutSecondaryFrame (
        _bstr_t Text );
    _bstr_t GetSecondaryFrame ( );
    void PutProjectedToleranceFrame (
        _bstr_t Text );
    _bstr_t GetProjectedToleranceFrame ( );
    void PutName (
        _bstr_t Name );
    _bstr_t GetName ( );
    void PutFCFAllOver (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetFCFAllOver ( );
    void PutTertiaryFrame (
        _bstr_t Text );
    _bstr_t GetTertiaryFrame ( );
    void PutQuaternaryFrame (
        _bstr_t Text );
    _bstr_t GetQuaternaryFrame ( );
    void PutCompositePrimaryAndSecondaryText (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetCompositePrimaryAndSecondaryText ( );
    void PutCompositeSecondaryAndTertiaryText (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetCompositeSecondaryAndTertiaryText ( );
    void PutCompositeTertiaryAndQuaternaryText (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetCompositeTertiaryAndQuaternaryText ( );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_BoxAlignment (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_BoxAlignment (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_CompositeFrame (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_CompositeFrame (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_FCFAllAround (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_FCFAllAround (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_PrimaryFrame (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_PrimaryFrame (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_SecondaryFrame (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_SecondaryFrame (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_ProjectedToleranceFrame (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_ProjectedToleranceFrame (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_FCFAllOver (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_FCFAllOver (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_TertiaryFrame (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_TertiaryFrame (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_QuaternaryFrame (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_QuaternaryFrame (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_CompositePrimaryAndSecondaryText (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_CompositePrimaryAndSecondaryText (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_CompositeSecondaryAndTertiaryText (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_CompositeSecondaryAndTertiaryText (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_CompositeTertiaryAndQuaternaryText (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_CompositeTertiaryAndQuaternaryText (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
};

struct __declspec(uuid("92e76925-d3a0-11ce-bb2a-080036776c02"))
SurfaceFinishSymbols : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetPlane,put=PutPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetStyle,put=PutStyle))
    DimensionStylePtr Style;
    __declspec(property(put=PutDataSet))
    SurfaceFinishSymbolDataSetPtr DataSet;
    __declspec(property(get=GetAnnotInitData))
    AnnotInitDataPtr AnnotInitData;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    SurfaceFinishSymbolPtr Item (
        const _variant_t & Index );
    void PutPlane (
        IDispatch * _arg1 );
    IDispatchPtr GetPlane ( );
    void PutStyle (
        struct DimensionStyle * _arg1 );
    DimensionStylePtr GetStyle ( );
    void PutDataSet (
        struct SurfaceFinishSymbolDataSet * _arg1 );
    SurfaceFinishSymbolPtr AddByTerminator (
        IDispatch * TerminatorObject,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint1 );
    HRESULT ClearPlane ( );
    HRESULT ClearStyle ( );
    HRESULT ClearDataSet ( );
    AnnotInitDataPtr GetAnnotInitData ( );
    SurfaceFinishSymbolPtr AddSurfaceFinishSymbol (
        struct AnnotInitData * AnnotInitData );
};

struct __declspec(uuid("92e76922-d3a0-11ce-bb2a-080036776c02"))
SurfaceFinishSymbol : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetStyle))
    DimStylePtr Style;
    __declspec(property(get=GetSurfaceFinishSymbol,put=PutSurfaceFinishSymbol))
    enum DimSurfTextureSymTypeConstants _SurfaceFinishSymbol;
    __declspec(property(get=GetMachiningAllowance,put=PutMachiningAllowance))
    _bstr_t MachiningAllowance;
    __declspec(property(get=GetMinimumRoughnessValue,put=PutMinimumRoughnessValue))
    _bstr_t MinimumRoughnessValue;
    __declspec(property(get=GetMaximumRoughnessValue,put=PutMaximumRoughnessValue))
    _bstr_t MaximumRoughnessValue;
    __declspec(property(get=GetProductionMethod,put=PutProductionMethod))
    _bstr_t ProductionMethod;
    __declspec(property(get=GetRoughnessWidthCutOff,put=PutRoughnessWidthCutOff))
    _bstr_t RoughnessWidthCutOff;
    __declspec(property(get=GetSamplingLength,put=PutSamplingLength))
    _bstr_t SamplingLength;
    __declspec(property(get=GetSurfaceLaySymbol,put=PutSurfaceLaySymbol))
    enum DimSurfTextureLaySymTypeConstants SurfaceLaySymbol;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetAllAround,put=PutAllAround))
    VARIANT_BOOL AllAround;
    __declspec(property(get=GetRoughnessValue,put=PutRoughnessValue))
    _bstr_t RoughnessValue;
    __declspec(property(get=GetRequirements,put=PutRequirements))
    _bstr_t Requirements;
    __declspec(property(get=GetTextScale,put=PutTextScale))
    double TextScale;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetPMIPlane))
    IDispatchPtr PMIPlane;
    __declspec(property(get=GetPMITrackDistance,put=PutPMITrackDistance))
    double PMITrackDistance;
    __declspec(property(get=GetAllAroundLeaderSymbol,put=PutAllAroundLeaderSymbol))
    VARIANT_BOOL AllAroundLeaderSymbol;
    __declspec(property(get=GetCompressSymbolSize,put=PutCompressSymbolSize))
    VARIANT_BOOL CompressSymbolSize;
    __declspec(property(get=GetHidePMI,put=PutHidePMI))
    VARIANT_BOOL HidePMI;
    __declspec(property(get=GetPMIName,put=PutPMIName))
    _bstr_t PMIName;
    __declspec(property(get=GetIsTerminatorAttachedToEntity))
    VARIANT_BOOL IsTerminatorAttachedToEntity;
    __declspec(property(get=GetPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetVertexCount))
    long VertexCount;
    __declspec(property(get=GetBreakLineDistance,put=PutBreakLineDistance))
    double BreakLineDistance;
    __declspec(property(get=GetBreakLine,put=PutBreakLine))
    VARIANT_BOOL BreakLine;
    __declspec(property(get=GetBreakLineDirection,put=PutBreakLineDirection))
    VARIANT_BOOL BreakLineDirection;
    __declspec(property(get=GetLeader,put=PutLeader))
    VARIANT_BOOL Leader;
    __declspec(property(get=GetRotationAngle,put=PutRotationAngle))
    double RotationAngle;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[];

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    DimStylePtr GetStyle ( );
    void PutSurfaceFinishSymbol (
        enum DimSurfTextureSymTypeConstants _arg1 );
    enum DimSurfTextureSymTypeConstants GetSurfaceFinishSymbol ( );
    void PutMachiningAllowance (
        _bstr_t _arg1 );
    _bstr_t GetMachiningAllowance ( );
    void PutMinimumRoughnessValue (
        _bstr_t _arg1 );
    _bstr_t GetMinimumRoughnessValue ( );
    void PutMaximumRoughnessValue (
        _bstr_t _arg1 );
    _bstr_t GetMaximumRoughnessValue ( );
    void PutProductionMethod (
        _bstr_t _arg1 );
    _bstr_t GetProductionMethod ( );
    void PutRoughnessWidthCutOff (
        _bstr_t _arg1 );
    _bstr_t GetRoughnessWidthCutOff ( );
    void PutSamplingLength (
        _bstr_t _arg1 );
    _bstr_t GetSamplingLength ( );
    void PutSurfaceLaySymbol (
        enum DimSurfTextureLaySymTypeConstants _arg1 );
    enum DimSurfTextureLaySymTypeConstants GetSurfaceLaySymbol ( );
    HRESULT SetTerminator (
        IDispatch * TerminatorObj,
        double x,
        double y,
        double z,
        VARIANT_BOOL keyPoint );
    HRESULT GetTerminator (
        IDispatch * * TerminatorObj,
        double * x,
        double * y,
        double * z,
        VARIANT_BOOL * keyPoint );
    IDispatchPtr GetPlane ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    double GetBreakLineDistance ( );
    void PutBreakLineDistance (
        double _arg1 );
    VARIANT_BOOL GetBreakLine ( );
    void PutBreakLine (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetBreakLineDirection ( );
    void PutBreakLineDirection (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetLeader ( );
    void PutLeader (
        VARIANT_BOOL _arg1 );
    long GetVertexCount ( );
    HRESULT GetVertices (
        long * VertexCount,
        SAFEARRAY * * Vertices );
    HRESULT SetVertices (
        long VertexCount,
        SAFEARRAY * * Vertices );
    HRESULT GetVertex (
        long Index,
        double * x,
        double * y,
        double * z );
    HRESULT SetVertex (
        long Index,
        double x,
        double y,
        double z );
    HRESULT InsertVertex (
        long Index,
        double x,
        double y,
        double z );
    HRESULT AddVertex (
        double x,
        double y,
        double z );
    HRESULT RemoveVertex (
        long Index );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    double GetRotationAngle ( );
    void PutRotationAngle (
        double _arg1 );
    void PutAllAround (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetAllAround ( );
    void PutRoughnessValue (
        _bstr_t _arg1 );
    _bstr_t GetRoughnessValue ( );
    void PutRequirements (
        _bstr_t _arg1 );
    _bstr_t GetRequirements ( );
    double GetTextScale ( );
    void PutTextScale (
        double _arg1 );
    void PutLayer (
        _bstr_t _arg1 );
    _bstr_t GetLayer ( );
    IDispatchPtr GetPMIPlane ( );
    double GetPMITrackDistance ( );
    void PutPMITrackDistance (
        double _arg1 );
    void PutAllAroundLeaderSymbol (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetAllAroundLeaderSymbol ( );
    void PutCompressSymbolSize (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetCompressSymbolSize ( );
    void PutHidePMI (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHidePMI ( );
    DisplayDataPtr GetDisplayData ( );
    HRESULT PromoteToCurrentVersion ( );
    HRESULT SetAlignmentShape (
        IDispatch * AlignmentShapeObj,
        double x,
        double y );
    HRESULT GetAlignmentShape (
        IDispatch * * AlignmentShapeObj,
        double * x,
        double * y );
    void PutPMIName (
        _bstr_t _arg1 );
    _bstr_t GetPMIName ( );
    HRESULT TransformToModelCoordinates (
        double InputX,
        double InputY,
        double InputZ,
        double * ModelX,
        double * ModelY,
        double * ModelZ );
    VARIANT_BOOL GetIsTerminatorAttachedToEntity ( );
    HRESULT GetReferencedGeometry (
        SAFEARRAY * * ReferencedGeometries );
    HRESULT SetReferencedGeometry (
        SAFEARRAY * * ReferencedGeometries );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
};

enum DimSurfTextureSymTypeConstants
{
    igDimSurfaceFinishBasic = 1,
    igDimSurfaceFinishMachined = 2,
    igDimSurfaceFinishNoMaterialRemoval = 3,
    igDimSurfaceFinishBasicHz = 4,
    igDimSurfaceFinishMachinedHz = 5,
    igDimSurfaceFinishNoMaterialRemovalHz = 6,
    igDimSurfaceFinishTriangle = 7,
    igDimSurfaceFinishTriangle2 = 8,
    igDimSurfaceFinishTriangle3 = 9,
    igDimSurfaceFinishTriangle4 = 10,
    igDimSurfaceFinishMachined2 = 11,
    igDimSurfaceFinishMachined3 = 12,
    igDimSurfaceFinishMachined4 = 13,
    igDimSurfaceFinishMachinedHz2 = 14,
    igDimSurfaceFinishMachinedHz3 = 15,
    igDimSurfaceFinishMachinedHz4 = 16,
    igDimSurfaceFinishNoWorkingSurface = 17
};

enum DimSurfTextureLaySymTypeConstants
{
    igDimSurfaceFinishLayNone = 1,
    igDimSurfaceFinishLayPerpendicular = 2,
    igDimSurfaceFinishLayVtParallel = 3,
    igDimSurfaceFinishLayHzParallel = 4,
    igDimSurfaceFinishLayCrossed = 5,
    igDimSurfaceFinishLayCircular = 6,
    igDimSurfaceFinishLayRadial = 7,
    igDimSurfaceFinishLayParticulate = 8,
    igDimSurfaceFinishLayMulti = 9
};

struct __declspec(uuid("92e76920-d3a0-11ce-bb2a-080036776c02"))
_ISurfaceFinishSymbolAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetStyle))
    DimStylePtr Style;
    __declspec(property(get=GetSurfaceFinishSymbol,put=PutSurfaceFinishSymbol))
    enum DimSurfTextureSymTypeConstants SurfaceFinishSymbol;
    __declspec(property(get=GetMachiningAllowance,put=PutMachiningAllowance))
    _bstr_t MachiningAllowance;
    __declspec(property(get=GetMinimumRoughnessValue,put=PutMinimumRoughnessValue))
    _bstr_t MinimumRoughnessValue;
    __declspec(property(get=GetMaximumRoughnessValue,put=PutMaximumRoughnessValue))
    _bstr_t MaximumRoughnessValue;
    __declspec(property(get=GetProductionMethod,put=PutProductionMethod))
    _bstr_t ProductionMethod;
    __declspec(property(get=GetRoughnessWidthCutOff,put=PutRoughnessWidthCutOff))
    _bstr_t RoughnessWidthCutOff;
    __declspec(property(get=GetSamplingLength,put=PutSamplingLength))
    _bstr_t SamplingLength;
    __declspec(property(get=GetSurfaceLaySymbol,put=PutSurfaceLaySymbol))
    enum DimSurfTextureLaySymTypeConstants SurfaceLaySymbol;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetAllAround,put=PutAllAround))
    VARIANT_BOOL AllAround;
    __declspec(property(get=GetRoughnessValue,put=PutRoughnessValue))
    _bstr_t RoughnessValue;
    __declspec(property(get=GetRequirements,put=PutRequirements))
    _bstr_t Requirements;
    __declspec(property(get=GetTextScale,put=PutTextScale))
    double TextScale;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetPMIPlane))
    IDispatchPtr PMIPlane;
    __declspec(property(get=GetPMITrackDistance,put=PutPMITrackDistance))
    double PMITrackDistance;
    __declspec(property(get=GetAllAroundLeaderSymbol,put=PutAllAroundLeaderSymbol))
    VARIANT_BOOL AllAroundLeaderSymbol;
    __declspec(property(get=GetCompressSymbolSize,put=PutCompressSymbolSize))
    VARIANT_BOOL CompressSymbolSize;
    __declspec(property(get=GetHidePMI,put=PutHidePMI))
    VARIANT_BOOL HidePMI;
    __declspec(property(get=GetPMIName,put=PutPMIName))
    _bstr_t PMIName;
    __declspec(property(get=GetIsTerminatorAttachedToEntity))
    VARIANT_BOOL IsTerminatorAttachedToEntity;
    __declspec(property(get=GetPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetVertexCount))
    long VertexCount;
    __declspec(property(get=GetBreakLineDistance,put=PutBreakLineDistance))
    double BreakLineDistance;
    __declspec(property(get=GetBreakLine,put=PutBreakLine))
    VARIANT_BOOL BreakLine;
    __declspec(property(get=GetBreakLineDirection,put=PutBreakLineDirection))
    VARIANT_BOOL BreakLineDirection;
    __declspec(property(get=GetLeader,put=PutLeader))
    VARIANT_BOOL Leader;
    __declspec(property(get=GetRotationAngle,put=PutRotationAngle))
    double RotationAngle;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[][];

    //
    // Wrapper methods for error-handling
    //

    DimStylePtr GetStyle ( );
    void PutSurfaceFinishSymbol (
        enum DimSurfTextureSymTypeConstants val );
    enum DimSurfTextureSymTypeConstants GetSurfaceFinishSymbol ( );
    void PutMachiningAllowance (
        _bstr_t Text );
    _bstr_t GetMachiningAllowance ( );
    void PutMinimumRoughnessValue (
        _bstr_t Text );
    _bstr_t GetMinimumRoughnessValue ( );
    void PutMaximumRoughnessValue (
        _bstr_t Text );
    _bstr_t GetMaximumRoughnessValue ( );
    void PutProductionMethod (
        _bstr_t Text );
    _bstr_t GetProductionMethod ( );
    void PutRoughnessWidthCutOff (
        _bstr_t Text );
    _bstr_t GetRoughnessWidthCutOff ( );
    void PutSamplingLength (
        _bstr_t Text );
    _bstr_t GetSamplingLength ( );
    void PutSurfaceLaySymbol (
        enum DimSurfTextureLaySymTypeConstants Flag );
    enum DimSurfTextureLaySymTypeConstants GetSurfaceLaySymbol ( );
    HRESULT SetTerminator (
        IDispatch * TerminatorObj,
        double x,
        double y,
        double z,
        VARIANT_BOOL keyPoint );
    HRESULT GetTerminator (
        IDispatch * * TerminatorObj,
        double * x,
        double * y,
        double * z,
        VARIANT_BOOL * keyPoint );
    IDispatchPtr GetPlane ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse,
        long Lcid = 0 );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    double GetBreakLineDistance ( );
    void PutBreakLineDistance (
        double Distance );
    VARIANT_BOOL GetBreakLine ( );
    void PutBreakLine (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetBreakLineDirection ( );
    void PutBreakLineDirection (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetLeader ( );
    void PutLeader (
        VARIANT_BOOL Flag );
    long GetVertexCount ( );
    HRESULT GetVertices (
        long * VertexCount,
        SAFEARRAY * * Vertices );
    HRESULT SetVertices (
        long VertexCount,
        SAFEARRAY * * Vertices );
    HRESULT GetVertex (
        long Index,
        double * x,
        double * y,
        double * z );
    HRESULT SetVertex (
        long Index,
        double x,
        double y,
        double z );
    HRESULT InsertVertex (
        long Index,
        double x,
        double y,
        double z );
    HRESULT AddVertex (
        double x,
        double y,
        double z );
    HRESULT RemoveVertex (
        long Index );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    double GetRotationAngle ( );
    void PutRotationAngle (
        double pdAngle );
    void PutAllAround (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetAllAround ( );
    void PutRoughnessValue (
        _bstr_t Text );
    _bstr_t GetRoughnessValue ( );
    void PutRequirements (
        _bstr_t Text );
    _bstr_t GetRequirements ( );
    double GetTextScale ( );
    void PutTextScale (
        double pdAngle );
    void PutLayer (
        _bstr_t Layer );
    _bstr_t GetLayer ( );
    IDispatchPtr GetPMIPlane ( );
    double GetPMITrackDistance ( );
    void PutPMITrackDistance (
        double pdPMITrackDistance );
    void PutAllAroundLeaderSymbol (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetAllAroundLeaderSymbol ( );
    void PutCompressSymbolSize (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetCompressSymbolSize ( );
    void PutHidePMI (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetHidePMI ( );
    DisplayDataPtr GetDisplayData ( );
    HRESULT PromoteToCurrentVersion ( );
    HRESULT SetAlignmentShape (
        IDispatch * AlignmentShapeObj,
        double x,
        double y );
    HRESULT GetAlignmentShape (
        IDispatch * * AlignmentShapeObj,
        double * x,
        double * y );
    void PutPMIName (
        _bstr_t Text );
    _bstr_t GetPMIName ( );
    HRESULT TransformToModelCoordinates (
        double InputX,
        double InputY,
        double InputZ,
        double * ModelX,
        double * ModelY,
        double * ModelZ );
    VARIANT_BOOL GetIsTerminatorAttachedToEntity ( );
    HRESULT GetReferencedGeometry (
        SAFEARRAY * * ReferencedGeometries );
    HRESULT SetReferencedGeometry (
        SAFEARRAY * * ReferencedGeometries );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct DimStyle * * Style ) = 0;
      virtual HRESULT __stdcall put_SurfaceFinishSymbol (
        /*[in]*/ enum DimSurfTextureSymTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_SurfaceFinishSymbol (
        /*[out,retval]*/ enum DimSurfTextureSymTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_MachiningAllowance (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_MachiningAllowance (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_MinimumRoughnessValue (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_MinimumRoughnessValue (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_MaximumRoughnessValue (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_MaximumRoughnessValue (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_ProductionMethod (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_ProductionMethod (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_RoughnessWidthCutOff (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_RoughnessWidthCutOff (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_SamplingLength (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_SamplingLength (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_SurfaceLaySymbol (
        /*[in]*/ enum DimSurfTextureLaySymTypeConstants Flag ) = 0;
      virtual HRESULT __stdcall get_SurfaceLaySymbol (
        /*[out,retval]*/ enum DimSurfTextureLaySymTypeConstants * Flag ) = 0;
      virtual HRESULT __stdcall raw_SetTerminator (
        /*[in]*/ IDispatch * TerminatorObj,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z,
        /*[in]*/ VARIANT_BOOL keyPoint ) = 0;
      virtual HRESULT __stdcall raw_GetTerminator (
        /*[out]*/ IDispatch * * TerminatorObj,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ VARIANT_BOOL * keyPoint ) = 0;
      virtual HRESULT __stdcall get_Plane (
        /*[out,retval]*/ IDispatch * * Plane ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[in]*/ VARIANT Recurse,
        /*[in,lcid]*/ long Lcid,
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * Type ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * ZOrder ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[in]*/ VARIANT Recurse,
        /*[out,retval]*/ BSTR * Key ) = 0;
      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ IDispatch * * Document ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ double XFrom,
        /*[in]*/ double YFrom,
        /*[in]*/ double XTo,
        /*[in]*/ double YTo ) = 0;
      virtual HRESULT __stdcall raw_Scale (
        /*[in]*/ double Factor ) = 0;
      virtual HRESULT __stdcall raw_Rotate (
        /*[in]*/ double Angle,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[out]*/ double * XMinimum,
        /*[out]*/ double * YMinimum,
        /*[out]*/ double * XMaximum,
        /*[out]*/ double * YMaximum ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ VARIANT XDistance,
        /*[in]*/ VARIANT YDistance,
        /*[out,retval]*/ IDispatch * * NewObject ) = 0;
      virtual HRESULT __stdcall raw_Mirror (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ VARIANT BooleanCopyFlag,
        /*[out,retval]*/ IDispatch * * Object ) = 0;
      virtual HRESULT __stdcall raw_BringToFront ( ) = 0;
      virtual HRESULT __stdcall raw_BringForward ( ) = 0;
      virtual HRESULT __stdcall raw_SendToBack ( ) = 0;
      virtual HRESULT __stdcall raw_SendBackward ( ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall get_BreakLineDistance (
        /*[out,retval]*/ double * Distance ) = 0;
      virtual HRESULT __stdcall put_BreakLineDistance (
        /*[in]*/ double Distance ) = 0;
      virtual HRESULT __stdcall get_BreakLine (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_BreakLine (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_BreakLineDirection (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_BreakLineDirection (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_Leader (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_Leader (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_VertexCount (
        /*[out,retval]*/ long * VertexCount ) = 0;
      virtual HRESULT __stdcall raw_GetVertices (
        /*[out]*/ long * VertexCount,
        /*[in,out]*/ SAFEARRAY * * Vertices ) = 0;
      virtual HRESULT __stdcall raw_SetVertices (
        /*[in]*/ long VertexCount,
        /*[in]*/ SAFEARRAY * * Vertices ) = 0;
      virtual HRESULT __stdcall raw_GetVertex (
        /*[in]*/ long Index,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[in]*/ double * z ) = 0;
      virtual HRESULT __stdcall raw_SetVertex (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_InsertVertex (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_AddVertex (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_RemoveVertex (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall get_KeyPointCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_GetKeyPoint (
        /*[in]*/ long Index,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ enum TGFramework::KeyPointType * KeypointType,
        /*[out]*/ long * HandleType ) = 0;
      virtual HRESULT __stdcall raw_SetKeyPoint (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall get_RotationAngle (
        /*[out,retval]*/ double * pdAngle ) = 0;
      virtual HRESULT __stdcall put_RotationAngle (
        /*[in]*/ double pdAngle ) = 0;
      virtual HRESULT __stdcall put_AllAround (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_AllAround (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_RoughnessValue (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_RoughnessValue (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_Requirements (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_Requirements (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall get_TextScale (
        /*[out,retval]*/ double * pdAngle ) = 0;
      virtual HRESULT __stdcall put_TextScale (
        /*[in]*/ double pdAngle ) = 0;
      virtual HRESULT __stdcall put_Layer (
        /*[in]*/ BSTR Layer ) = 0;
      virtual HRESULT __stdcall get_Layer (
        /*[out,retval]*/ BSTR * Layer ) = 0;
      virtual HRESULT __stdcall get_PMIPlane (
        /*[out,retval]*/ IDispatch * * pPMIPlane ) = 0;
      virtual HRESULT __stdcall get_PMITrackDistance (
        /*[out,retval]*/ double * pdPMITrackDistance ) = 0;
      virtual HRESULT __stdcall put_PMITrackDistance (
        /*[in]*/ double pdPMITrackDistance ) = 0;
      virtual HRESULT __stdcall put_AllAroundLeaderSymbol (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_AllAroundLeaderSymbol (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_CompressSymbolSize (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_CompressSymbolSize (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_HidePMI (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_HidePMI (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_GetDisplayData (
        /*[out,retval]*/ struct DisplayData * * pDisplayData ) = 0;
      virtual HRESULT __stdcall raw_PromoteToCurrentVersion ( ) = 0;
      virtual HRESULT __stdcall raw_SetAlignmentShape (
        /*[in]*/ IDispatch * AlignmentShapeObj,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_GetAlignmentShape (
        /*[out]*/ IDispatch * * AlignmentShapeObj,
        /*[out]*/ double * x,
        /*[out]*/ double * y ) = 0;
      virtual HRESULT __stdcall put_PMIName (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_PMIName (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall raw_TransformToModelCoordinates (
        /*[in]*/ double InputX,
        /*[in]*/ double InputY,
        /*[in]*/ double InputZ,
        /*[out]*/ double * ModelX,
        /*[out]*/ double * ModelY,
        /*[out]*/ double * ModelZ ) = 0;
      virtual HRESULT __stdcall get_IsTerminatorAttachedToEntity (
        /*[out,retval]*/ VARIANT_BOOL * bIsAttached ) = 0;
      virtual HRESULT __stdcall raw_GetReferencedGeometry (
        /*[out]*/ SAFEARRAY * * ReferencedGeometries ) = 0;
      virtual HRESULT __stdcall raw_SetReferencedGeometry (
        /*[in]*/ SAFEARRAY * * ReferencedGeometries ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
};

struct __declspec(uuid("b3cec7e4-34a4-11cf-848f-080036373002"))
SurfaceFinishSymbolDataSet : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetSurfaceFinishSymbol,put=PutSurfaceFinishSymbol))
    enum DimSurfTextureSymTypeConstants SurfaceFinishSymbol;
    __declspec(property(get=GetMachiningAllowance,put=PutMachiningAllowance))
    _bstr_t MachiningAllowance;
    __declspec(property(get=GetMinimumRoughnessValue,put=PutMinimumRoughnessValue))
    _bstr_t MinimumRoughnessValue;
    __declspec(property(get=GetMaximumRoughnessValue,put=PutMaximumRoughnessValue))
    _bstr_t MaximumRoughnessValue;
    __declspec(property(get=GetProductionMethod,put=PutProductionMethod))
    _bstr_t ProductionMethod;
    __declspec(property(get=GetRoughnessWidthCutOff,put=PutRoughnessWidthCutOff))
    _bstr_t RoughnessWidthCutOff;
    __declspec(property(get=GetSamplingLength,put=PutSamplingLength))
    _bstr_t SamplingLength;
    __declspec(property(get=GetSurfaceLaySymbol,put=PutSurfaceLaySymbol))
    enum DimSurfTextureLaySymTypeConstants SurfaceLaySymbol;
    __declspec(property(get=GetAllAround,put=PutAllAround))
    VARIANT_BOOL AllAround;
    __declspec(property(get=GetRoughnessValue,put=PutRoughnessValue))
    _bstr_t RoughnessValue;
    __declspec(property(get=GetRequirements,put=PutRequirements))
    _bstr_t Requirements;
    __declspec(property(get=GetAllAroundLeaderSymbol,put=PutAllAroundLeaderSymbol))
    VARIANT_BOOL AllAroundLeaderSymbol;
    __declspec(property(get=GetCompressSymbolSize,put=PutCompressSymbolSize))
    VARIANT_BOOL CompressSymbolSize;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    void PutSurfaceFinishSymbol (
        enum DimSurfTextureSymTypeConstants _arg1 );
    enum DimSurfTextureSymTypeConstants GetSurfaceFinishSymbol ( );
    void PutMachiningAllowance (
        _bstr_t _arg1 );
    _bstr_t GetMachiningAllowance ( );
    void PutMinimumRoughnessValue (
        _bstr_t _arg1 );
    _bstr_t GetMinimumRoughnessValue ( );
    void PutMaximumRoughnessValue (
        _bstr_t _arg1 );
    _bstr_t GetMaximumRoughnessValue ( );
    void PutProductionMethod (
        _bstr_t _arg1 );
    _bstr_t GetProductionMethod ( );
    void PutRoughnessWidthCutOff (
        _bstr_t _arg1 );
    _bstr_t GetRoughnessWidthCutOff ( );
    void PutSamplingLength (
        _bstr_t _arg1 );
    _bstr_t GetSamplingLength ( );
    void PutSurfaceLaySymbol (
        enum DimSurfTextureLaySymTypeConstants _arg1 );
    enum DimSurfTextureLaySymTypeConstants GetSurfaceLaySymbol ( );
    void PutAllAround (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetAllAround ( );
    void PutRoughnessValue (
        _bstr_t _arg1 );
    _bstr_t GetRoughnessValue ( );
    void PutRequirements (
        _bstr_t _arg1 );
    _bstr_t GetRequirements ( );
    void PutAllAroundLeaderSymbol (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetAllAroundLeaderSymbol ( );
    void PutCompressSymbolSize (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetCompressSymbolSize ( );
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetName ( );
};

struct __declspec(uuid("92e76924-d3a0-11ce-bb2a-080036776c02"))
_ISurfaceFinishSymbolsAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetPlane,put=PutPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetStyle,put=PutStyle))
    DimensionStylePtr Style;
    __declspec(property(put=PutDataSet))
    SurfaceFinishSymbolDataSetPtr DataSet;
    __declspec(property(get=GetAnnotInitData))
    AnnotInitDataPtr AnnotInitData;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    SurfaceFinishSymbolPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    void PutPlane (
        IDispatch * Plane );
    IDispatchPtr GetPlane ( );
    void PutStyle (
        struct DimensionStyle * Style );
    DimensionStylePtr GetStyle ( );
    void PutDataSet (
        struct SurfaceFinishSymbolDataSet * _arg1 );
    SurfaceFinishSymbolPtr AddByTerminator (
        IDispatch * TerminatorObject,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint1 );
    HRESULT ClearPlane ( );
    HRESULT ClearStyle ( );
    HRESULT ClearDataSet ( );
    AnnotInitDataPtr GetAnnotInitData ( );
    SurfaceFinishSymbolPtr AddSurfaceFinishSymbol (
        struct AnnotInitData * AnnotInitData );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * App ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct SurfaceFinishSymbol * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Enum ) = 0;
      virtual HRESULT __stdcall put_Plane (
        /*[in]*/ IDispatch * Plane ) = 0;
      virtual HRESULT __stdcall get_Plane (
        /*[out,retval]*/ IDispatch * * Plane ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ struct DimensionStyle * Style ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct DimensionStyle * * Style ) = 0;
      virtual HRESULT __stdcall put_DataSet (
        /*[in]*/ struct SurfaceFinishSymbolDataSet * _arg1 ) = 0;
      virtual HRESULT __stdcall raw_AddByTerminator (
        /*[in]*/ IDispatch * TerminatorObject,
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double z1,
        /*[in]*/ VARIANT_BOOL keyPoint1,
        /*[out,retval]*/ struct SurfaceFinishSymbol * * Obj ) = 0;
      virtual HRESULT __stdcall raw_ClearPlane ( ) = 0;
      virtual HRESULT __stdcall raw_ClearStyle ( ) = 0;
      virtual HRESULT __stdcall raw_ClearDataSet ( ) = 0;
      virtual HRESULT __stdcall get_AnnotInitData (
        /*[out,retval]*/ struct AnnotInitData * * AnnotInitData ) = 0;
      virtual HRESULT __stdcall raw_AddSurfaceFinishSymbol (
        /*[in]*/ struct AnnotInitData * AnnotInitData,
        /*[out,retval]*/ struct SurfaceFinishSymbol * * Obj ) = 0;
};

struct __declspec(uuid("b3cec7e3-34a4-11cf-848f-080036373002"))
_ISurfaceFinishSymbolDataSetAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetSurfaceFinishSymbol,put=PutSurfaceFinishSymbol))
    enum DimSurfTextureSymTypeConstants SurfaceFinishSymbol;
    __declspec(property(get=GetMachiningAllowance,put=PutMachiningAllowance))
    _bstr_t MachiningAllowance;
    __declspec(property(get=GetMinimumRoughnessValue,put=PutMinimumRoughnessValue))
    _bstr_t MinimumRoughnessValue;
    __declspec(property(get=GetMaximumRoughnessValue,put=PutMaximumRoughnessValue))
    _bstr_t MaximumRoughnessValue;
    __declspec(property(get=GetProductionMethod,put=PutProductionMethod))
    _bstr_t ProductionMethod;
    __declspec(property(get=GetRoughnessWidthCutOff,put=PutRoughnessWidthCutOff))
    _bstr_t RoughnessWidthCutOff;
    __declspec(property(get=GetSamplingLength,put=PutSamplingLength))
    _bstr_t SamplingLength;
    __declspec(property(get=GetSurfaceLaySymbol,put=PutSurfaceLaySymbol))
    enum DimSurfTextureLaySymTypeConstants SurfaceLaySymbol;
    __declspec(property(get=GetAllAround,put=PutAllAround))
    VARIANT_BOOL AllAround;
    __declspec(property(get=GetRoughnessValue,put=PutRoughnessValue))
    _bstr_t RoughnessValue;
    __declspec(property(get=GetRequirements,put=PutRequirements))
    _bstr_t Requirements;
    __declspec(property(get=GetAllAroundLeaderSymbol,put=PutAllAroundLeaderSymbol))
    VARIANT_BOOL AllAroundLeaderSymbol;
    __declspec(property(get=GetCompressSymbolSize,put=PutCompressSymbolSize))
    VARIANT_BOOL CompressSymbolSize;

    //
    // Wrapper methods for error-handling
    //

    void PutSurfaceFinishSymbol (
        enum DimSurfTextureSymTypeConstants val );
    enum DimSurfTextureSymTypeConstants GetSurfaceFinishSymbol ( );
    void PutMachiningAllowance (
        _bstr_t Text );
    _bstr_t GetMachiningAllowance ( );
    void PutMinimumRoughnessValue (
        _bstr_t Text );
    _bstr_t GetMinimumRoughnessValue ( );
    void PutMaximumRoughnessValue (
        _bstr_t Text );
    _bstr_t GetMaximumRoughnessValue ( );
    void PutProductionMethod (
        _bstr_t Text );
    _bstr_t GetProductionMethod ( );
    void PutRoughnessWidthCutOff (
        _bstr_t Text );
    _bstr_t GetRoughnessWidthCutOff ( );
    void PutSamplingLength (
        _bstr_t Text );
    _bstr_t GetSamplingLength ( );
    void PutSurfaceLaySymbol (
        enum DimSurfTextureLaySymTypeConstants Flag );
    enum DimSurfTextureLaySymTypeConstants GetSurfaceLaySymbol ( );
    void PutAllAround (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetAllAround ( );
    void PutRoughnessValue (
        _bstr_t Text );
    _bstr_t GetRoughnessValue ( );
    void PutRequirements (
        _bstr_t Text );
    _bstr_t GetRequirements ( );
    void PutAllAroundLeaderSymbol (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetAllAroundLeaderSymbol ( );
    void PutCompressSymbolSize (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetCompressSymbolSize ( );
    void PutName (
        _bstr_t Name );
    _bstr_t GetName ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_SurfaceFinishSymbol (
        /*[in]*/ enum DimSurfTextureSymTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_SurfaceFinishSymbol (
        /*[out,retval]*/ enum DimSurfTextureSymTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_MachiningAllowance (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_MachiningAllowance (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_MinimumRoughnessValue (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_MinimumRoughnessValue (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_MaximumRoughnessValue (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_MaximumRoughnessValue (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_ProductionMethod (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_ProductionMethod (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_RoughnessWidthCutOff (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_RoughnessWidthCutOff (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_SamplingLength (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_SamplingLength (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_SurfaceLaySymbol (
        /*[in]*/ enum DimSurfTextureLaySymTypeConstants Flag ) = 0;
      virtual HRESULT __stdcall get_SurfaceLaySymbol (
        /*[out,retval]*/ enum DimSurfTextureLaySymTypeConstants * Flag ) = 0;
      virtual HRESULT __stdcall put_AllAround (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_AllAround (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_RoughnessValue (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_RoughnessValue (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_Requirements (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_Requirements (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_AllAroundLeaderSymbol (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_AllAroundLeaderSymbol (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_CompressSymbolSize (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_CompressSymbolSize (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
};

struct __declspec(uuid("1690dd48-e132-11ce-bb3b-080036776c02"))
WeldSymbols : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetAnnotInitData))
    AnnotInitDataPtr AnnotInitData;
    __declspec(property(get=GetPlane,put=PutPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetStyle,put=PutStyle))
    DimensionStylePtr Style;
    __declspec(property(put=PutDataSet))
    WeldSymbolDataSetPtr DataSet;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    WeldSymbolPtr Item (
        const _variant_t & Index );
    void PutPlane (
        IDispatch * _arg1 );
    IDispatchPtr GetPlane ( );
    void PutStyle (
        struct DimensionStyle * _arg1 );
    DimensionStylePtr GetStyle ( );
    void PutDataSet (
        struct WeldSymbolDataSet * _arg1 );
    WeldSymbolPtr Add (
        double x1,
        double y1,
        double z1 );
    WeldSymbolPtr AddByTerminator (
        IDispatch * TerminatorObject,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint1 );
    HRESULT ClearPlane ( );
    HRESULT ClearStyle ( );
    HRESULT ClearDataSet ( );
    AnnotInitDataPtr GetAnnotInitData ( );
    WeldSymbolPtr AddWeldSymbol (
        struct AnnotInitData * AnnotInitData );
};

struct __declspec(uuid("1690dd42-e132-11ce-bb3b-080036776c02"))
WeldSymbol : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStyle))
    DimStylePtr Style;
    __declspec(property(get=GetZSymbol,put=PutZSymbol))
    VARIANT_BOOL ZSymbol;
    __declspec(property(get=GetTail,put=PutTail))
    enum DimWeldTailTypeConstants Tail;
    __declspec(property(get=GetDashLine,put=PutDashLine))
    enum DimWeldDashLineTypeConstants DashLine;
    __declspec(property(get=GetWeldInField,put=PutWeldInField))
    VARIANT_BOOL WeldInField;
    __declspec(property(get=GetOffsetTopBottom,put=PutOffsetTopBottom))
    VARIANT_BOOL OffsetTopBottom;
    __declspec(property(get=GetWeldAllAround,put=PutWeldAllAround))
    VARIANT_BOOL WeldAllAround;
    __declspec(property(get=GetTopNote1,put=PutTopNote1))
    _bstr_t TopNote1;
    __declspec(property(get=GetTopNote2,put=PutTopNote2))
    _bstr_t TopNote2;
    __declspec(property(get=GetTopTreatmentType,put=PutTopTreatmentType))
    enum DimWeldTreatmentTypeConstants TopTreatmentType;
    __declspec(property(get=GetTopType,put=PutTopType))
    enum DimWeldTypeConstants TopType;
    __declspec(property(get=GetTopNote3,put=PutTopNote3))
    _bstr_t TopNote3;
    __declspec(property(get=GetTopNoteZ,put=PutTopNoteZ))
    _bstr_t TopNoteZ;
    __declspec(property(get=GetTailNote,put=PutTailNote))
    _bstr_t TailNote;
    __declspec(property(get=GetTopWeldModifier,put=PutTopWeldModifier))
    enum DimWeldModifierConstants TopWeldModifier;
    __declspec(property(get=GetBottomNote1,put=PutBottomNote1))
    _bstr_t BottomNote1;
    __declspec(property(get=GetBottomNote2,put=PutBottomNote2))
    _bstr_t BottomNote2;
    __declspec(property(get=GetBottomTreatmentType,put=PutBottomTreatmentType))
    enum DimWeldTreatmentTypeConstants BottomTreatmentType;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetBottomType,put=PutBottomType))
    enum DimWeldTypeConstants BottomType;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetBottomNote3,put=PutBottomNote3))
    _bstr_t BottomNote3;
    __declspec(property(get=GetBottomNoteZ,put=PutBottomNoteZ))
    _bstr_t BottomNoteZ;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[];
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetPMIPlane))
    IDispatchPtr PMIPlane;
    __declspec(property(get=GetPMITrackDistance,put=PutPMITrackDistance))
    double PMITrackDistance;
    __declspec(property(get=GetSymmetrical,put=PutSymmetrical))
    VARIANT_BOOL Symmetrical;
    __declspec(property(get=GetHidePMI,put=PutHidePMI))
    VARIANT_BOOL HidePMI;
    __declspec(property(get=GetBottomWeldModifier,put=PutBottomWeldModifier))
    enum DimWeldModifierConstants BottomWeldModifier;
    __declspec(property(get=GetPMIName,put=PutPMIName))
    _bstr_t PMIName;
    __declspec(property(get=GetWeldInFieldFlagDirection,put=PutWeldInFieldFlagDirection))
    enum WeldSymbolFlagDirectionConstants WeldInFieldFlagDirection;
    __declspec(property(get=GetTailNote2,put=PutTailNote2))
    _bstr_t TailNote2;
    __declspec(property(get=GetTopNoteCSize,put=PutTopNoteCSize))
    _bstr_t TopNoteCSize;
    __declspec(property(get=GetBottomNoteCSize,put=PutBottomNoteCSize))
    _bstr_t BottomNoteCSize;
    __declspec(property(get=GetTopNoteAngle,put=PutTopNoteAngle))
    _bstr_t TopNoteAngle;
    __declspec(property(get=GetBottomNoteAngle,put=PutBottomNoteAngle))
    _bstr_t BottomNoteAngle;
    __declspec(property(get=GetTopNoteDepth,put=PutTopNoteDepth))
    _bstr_t TopNoteDepth;
    __declspec(property(get=GetBottomNoteDepth,put=PutBottomNoteDepth))
    _bstr_t BottomNoteDepth;
    __declspec(property(get=GetTopPosOffset,put=PutTopPosOffset))
    int TopPosOffset;
    __declspec(property(get=GetBottomPosOffset,put=PutBottomPosOffset))
    int BottomPosOffset;
    __declspec(property(get=GetCenterType,put=PutCenterType))
    enum DimWeldTypeConstants CenterType;
    __declspec(property(get=GetIsTerminatorAttachedToEntity))
    VARIANT_BOOL IsTerminatorAttachedToEntity;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetVertexCount))
    long VertexCount;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetBreakLineDistance,put=PutBreakLineDistance))
    double BreakLineDistance;
    __declspec(property(get=GetBreakLine,put=PutBreakLine))
    VARIANT_BOOL BreakLine;
    __declspec(property(get=GetBreakLineDirection,put=PutBreakLineDirection))
    VARIANT_BOOL BreakLineDirection;
    __declspec(property(get=GetLeader,put=PutLeader))
    VARIANT_BOOL Leader;
    __declspec(property(get=GetRotationAngle,put=PutRotationAngle))
    double RotationAngle;
    __declspec(property(get=GetTextScale,put=PutTextScale))
    double TextScale;
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    DimStylePtr GetStyle ( );
    void PutZSymbol (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetZSymbol ( );
    void PutTail (
        enum DimWeldTailTypeConstants _arg1 );
    enum DimWeldTailTypeConstants GetTail ( );
    void PutDashLine (
        enum DimWeldDashLineTypeConstants _arg1 );
    enum DimWeldDashLineTypeConstants GetDashLine ( );
    void PutWeldInField (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetWeldInField ( );
    void PutOffsetTopBottom (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetOffsetTopBottom ( );
    void PutWeldAllAround (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetWeldAllAround ( );
    void PutSymmetrical (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetSymmetrical ( );
    void PutTopNote1 (
        _bstr_t _arg1 );
    _bstr_t GetTopNote1 ( );
    void PutTopNote2 (
        _bstr_t _arg1 );
    _bstr_t GetTopNote2 ( );
    void PutTopTreatmentType (
        enum DimWeldTreatmentTypeConstants _arg1 );
    enum DimWeldTreatmentTypeConstants GetTopTreatmentType ( );
    void PutTopType (
        enum DimWeldTypeConstants _arg1 );
    enum DimWeldTypeConstants GetTopType ( );
    void PutTopNote3 (
        _bstr_t _arg1 );
    _bstr_t GetTopNote3 ( );
    void PutTopNoteZ (
        _bstr_t _arg1 );
    _bstr_t GetTopNoteZ ( );
    void PutTailNote (
        _bstr_t _arg1 );
    _bstr_t GetTailNote ( );
    void PutBottomNote1 (
        _bstr_t _arg1 );
    _bstr_t GetBottomNote1 ( );
    void PutBottomNote2 (
        _bstr_t _arg1 );
    _bstr_t GetBottomNote2 ( );
    void PutBottomTreatmentType (
        enum DimWeldTreatmentTypeConstants _arg1 );
    enum DimWeldTreatmentTypeConstants GetBottomTreatmentType ( );
    void PutBottomType (
        enum DimWeldTypeConstants _arg1 );
    enum DimWeldTypeConstants GetBottomType ( );
    void PutBottomNote3 (
        _bstr_t _arg1 );
    _bstr_t GetBottomNote3 ( );
    void PutBottomNoteZ (
        _bstr_t _arg1 );
    _bstr_t GetBottomNoteZ ( );
    HRESULT SetTerminator (
        IDispatch * TerminatorObj,
        double x,
        double y,
        double z,
        VARIANT_BOOL keyPoint );
    HRESULT GetTerminator (
        IDispatch * * TerminatorObj,
        double * x,
        double * y,
        double * z,
        VARIANT_BOOL * keyPoint );
    HRESULT SetFreeSpacePoint (
        double x,
        double y,
        double z );
    HRESULT GetFreeSpacePoint (
        double * x,
        double * y,
        double * z );
    IDispatchPtr GetPlane ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    double GetBreakLineDistance ( );
    void PutBreakLineDistance (
        double _arg1 );
    VARIANT_BOOL GetBreakLine ( );
    void PutBreakLine (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetBreakLineDirection ( );
    void PutBreakLineDirection (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetLeader ( );
    void PutLeader (
        VARIANT_BOOL _arg1 );
    long GetVertexCount ( );
    HRESULT GetVertices (
        long * VertexCount,
        SAFEARRAY * * Vertices );
    HRESULT SetVertices (
        long VertexCount,
        SAFEARRAY * * Vertices );
    HRESULT GetVertex (
        long Index,
        double * x,
        double * y,
        double * z );
    HRESULT SetVertex (
        long Index,
        double x,
        double y,
        double z );
    HRESULT InsertVertex (
        long Index,
        double x,
        double y,
        double z );
    HRESULT AddVertex (
        double x,
        double y,
        double z );
    HRESULT RemoveVertex (
        long Index );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    double GetRotationAngle ( );
    void PutRotationAngle (
        double _arg1 );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    void PutTailNote2 (
        _bstr_t _arg1 );
    _bstr_t GetTailNote2 ( );
    void PutTopNoteCSize (
        _bstr_t _arg1 );
    _bstr_t GetTopNoteCSize ( );
    void PutBottomNoteCSize (
        _bstr_t _arg1 );
    _bstr_t GetBottomNoteCSize ( );
    void PutTopNoteAngle (
        _bstr_t _arg1 );
    _bstr_t GetTopNoteAngle ( );
    void PutBottomNoteAngle (
        _bstr_t _arg1 );
    _bstr_t GetBottomNoteAngle ( );
    void PutTopNoteDepth (
        _bstr_t _arg1 );
    _bstr_t GetTopNoteDepth ( );
    void PutBottomNoteDepth (
        _bstr_t _arg1 );
    _bstr_t GetBottomNoteDepth ( );
    void PutTopPosOffset (
        int _arg1 );
    int GetTopPosOffset ( );
    void PutBottomPosOffset (
        int _arg1 );
    int GetBottomPosOffset ( );
    double GetTextScale ( );
    void PutTextScale (
        double _arg1 );
    void PutLayer (
        _bstr_t _arg1 );
    _bstr_t GetLayer ( );
    IDispatchPtr GetPMIPlane ( );
    double GetPMITrackDistance ( );
    void PutPMITrackDistance (
        double _arg1 );
    void PutHidePMI (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHidePMI ( );
    void PutTopWeldModifier (
        enum DimWeldModifierConstants _arg1 );
    enum DimWeldModifierConstants GetTopWeldModifier ( );
    void PutBottomWeldModifier (
        enum DimWeldModifierConstants _arg1 );
    enum DimWeldModifierConstants GetBottomWeldModifier ( );
    DisplayDataPtr GetDisplayData ( );
    HRESULT PromoteToCurrentVersion ( );
    HRESULT SetAlignmentShape (
        IDispatch * AlignmentShapeObj,
        double x,
        double y );
    HRESULT GetAlignmentShape (
        IDispatch * * AlignmentShapeObj,
        double * x,
        double * y );
    void PutPMIName (
        _bstr_t _arg1 );
    _bstr_t GetPMIName ( );
    void PutWeldInFieldFlagDirection (
        enum WeldSymbolFlagDirectionConstants _arg1 );
    enum WeldSymbolFlagDirectionConstants GetWeldInFieldFlagDirection ( );
    HRESULT TransformToModelCoordinates (
        double InputX,
        double InputY,
        double InputZ,
        double * ModelX,
        double * ModelY,
        double * ModelZ );
    void PutCenterType (
        enum DimWeldTypeConstants _arg1 );
    enum DimWeldTypeConstants GetCenterType ( );
    HRESULT SetCenterTreatmentTypes (
        enum DimWeldTreatmentTypeConstants AboveType,
        enum DimWeldTreatmentTypeConstants BelowType );
    HRESULT GetCenterTreatmentTypes (
        enum DimWeldTreatmentTypeConstants * AboveType,
        enum DimWeldTreatmentTypeConstants * BelowType );
    VARIANT_BOOL GetIsTerminatorAttachedToEntity ( );
    HRESULT GetReferencedGeometry (
        SAFEARRAY * * ReferencedGeometries );
    HRESULT SetReferencedGeometry (
        SAFEARRAY * * ReferencedGeometries );
};

enum DimWeldTailTypeConstants
{
    igDimWeldTailNone = 0,
    igDimWeldTailOpen = 1,
    igDimWeldTailClosed = 2
};

enum DimWeldDashLineTypeConstants
{
    igDimWeldDashLineNone = 0,
    igDimWeldDashLineAbove = 1,
    igDimWeldDashLineBelow = 2
};

enum DimWeldTreatmentTypeConstants
{
    igDimWeldTreatmentNone = 0,
    igDimWeldTreatmentFlush = 1,
    igDimWeldTreatmentConcave = 2,
    igDimWeldTreatmentConvex = 3,
    igDimWeldTreatmentSmoothBlend = 4,
    igDimWeldTreatmentPermBacking = 5,
    igDimWeldTreatmentRemBacking = 6
};

enum DimWeldTypeConstants
{
    igDimWeldTypeNone = 0,
    igDimWeldTopFillet = 1,
    igDimWeldTopSpot = 2,
    igDimWeldTopSeam = 3,
    igDimWeldTopBevel = 4,
    igDimWeldTopVGroove = 5,
    igDimWeldTopSlot = 6,
    igDimWeldTopSquare = 7,
    igDimWeldTopUGroove = 8,
    igDimWeldTopFlangeEdge = 9,
    igDimWeldTopFlangeCorner = 10,
    igDimWeldTopBacking = 11,
    igDimWeldTopJGroove = 12,
    igDimWeldTopFlareV = 13,
    igDimWeldTopFlareBevel = 14,
    igDimWeldTopSurfacing = 15,
    igDimWeldTopSteepFlankedBevel = 16,
    igDimWeldTopSteepFlankedV = 17,
    igDimWeldTopEdgeWeld = 18,
    igDimWeldTopSurfaceJoint = 19,
    igDimWeldTopInclinedJoint = 20,
    igDimWeldTopFoldJoint = 21,
    igDimWeldTopSingleVButt = 43,
    igDimWeldTopSingleBevelButt = 44,
    igDimWeldBottomFillet = 22,
    igDimWeldBottomSpot = 23,
    igDimWeldBottomSeam = 24,
    igDimWeldBottomBevel = 25,
    igDimWeldBottomVGroove = 26,
    igDimWeldBottomSlot = 27,
    igDimWeldBottomSquare = 28,
    igDimWeldBottomUGroove = 29,
    igDimWeldBottomFlangeEdge = 30,
    igDimWeldBottomFlangeCorner = 31,
    igDimWeldBottomBacking = 32,
    igDimWeldBottomJGroove = 33,
    igDimWeldBottomFlareV = 34,
    igDimWeldBottomFlareBevel = 35,
    igDimWeldBottomSurfacing = 36,
    igDimWeldBottomSteepFlankedBevel = 37,
    igDimWeldBottomSteepFlankedV = 38,
    igDimWeldBottomEdgeWeld = 39,
    igDimWeldBottomSurfaceJoint = 40,
    igDimWeldBottomInclinedJoint = 41,
    igDimWeldBottomFoldJoint = 42,
    igDimWeldBottomSingleVButt = 45,
    igDimWeldBottomSingleBevelButt = 46,
    igDimWeldXSpot = 51,
    igDimWeldCenterSpot = 52,
    igDimWeldCenterSeam = 53,
    igDimWeldTopCompoundSquareGroove = 54,
    igDimWeldTopCompoundJGroove = 55,
    igDimWeldTopCompoundBevel = 56,
    igDimWeldTopCompoundFlareBevel = 57,
    igDimWeldBotCompoundSquareGroove = 58,
    igDimWeldBotCompoundJGroove = 59,
    igDimWeldBotCompoundBevel = 60,
    igDimWeldBotCompoundFlareBevel = 61,
    igDimWeldTopMeltThrough = 62,
    igDimWeldBottomMeltThrough = 63,
    igDimWeldJISSeam = 64,
    igDimWeldTopKeyhole = 65,
    igDimWeldBottomKeyhole = 66,
    igDimWeldTopScarf = 67,
    igDimWeldBottomScarf = 68,
    igDimWeldJISStud = 69,
    igDimWeldTopContinuationFillet = 70,
    igDimWeldBottomContinuationFillet = 71,
    igDimWeldDoubleBevelButt = 72,
    igDimWeldTopGroove = 73,
    igDimWeldBottomGroove = 74,
    igDimWeldTopHYWeld = 75,
    igDimWeldBottomHYWeld = 76,
    igDimWeldDoubleBevelButtAlt = 77,
    igDimWeldTopSingleUButt = 78,
    igDimWeldBottomSingleUButt = 79,
    igDimWeldTopPermRemBacking = 80,
    igDimWeldBottomPermRemBacking = 81,
    igDimWeldTopConsumableInsert = 82,
    igDimWeldBottomConsumableInsert = 83,
    igDimWeldTopCompoundFlareBevelDashed = 84,
    igDimWeldBotCompoundFlareBevelDashed = 85,
    igDimWeldResistanceSeam = 86,
    igDimWeldResistanceSpot = 87
};

enum DimWeldModifierConstants
{
    igDimWeldModifierNone = 0,
    igDimWeldTopThreeSided = 1,
    igDimWeldBottomThreeSided = 2
};

enum WeldSymbolFlagDirectionConstants
{
    igRightFlag = 0,
    igLeftFlag = 1
};

struct __declspec(uuid("1690dd40-e132-11ce-bb3b-080036776c02"))
_IWeldSymbolAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetStyle))
    DimStylePtr Style;
    __declspec(property(get=GetZSymbol,put=PutZSymbol))
    VARIANT_BOOL ZSymbol;
    __declspec(property(get=GetTail,put=PutTail))
    enum DimWeldTailTypeConstants Tail;
    __declspec(property(get=GetDashLine,put=PutDashLine))
    enum DimWeldDashLineTypeConstants DashLine;
    __declspec(property(get=GetWeldInField,put=PutWeldInField))
    VARIANT_BOOL WeldInField;
    __declspec(property(get=GetOffsetTopBottom,put=PutOffsetTopBottom))
    VARIANT_BOOL OffsetTopBottom;
    __declspec(property(get=GetWeldAllAround,put=PutWeldAllAround))
    VARIANT_BOOL WeldAllAround;
    __declspec(property(get=GetTopNote1,put=PutTopNote1))
    _bstr_t TopNote1;
    __declspec(property(get=GetTopNote2,put=PutTopNote2))
    _bstr_t TopNote2;
    __declspec(property(get=GetTopTreatmentType,put=PutTopTreatmentType))
    enum DimWeldTreatmentTypeConstants TopTreatmentType;
    __declspec(property(get=GetTopType,put=PutTopType))
    enum DimWeldTypeConstants TopType;
    __declspec(property(get=GetTopNote3,put=PutTopNote3))
    _bstr_t TopNote3;
    __declspec(property(get=GetTopNoteZ,put=PutTopNoteZ))
    _bstr_t TopNoteZ;
    __declspec(property(get=GetTailNote,put=PutTailNote))
    _bstr_t TailNote;
    __declspec(property(get=GetTopWeldModifier,put=PutTopWeldModifier))
    enum DimWeldModifierConstants TopWeldModifier;
    __declspec(property(get=GetBottomNote1,put=PutBottomNote1))
    _bstr_t BottomNote1;
    __declspec(property(get=GetBottomNote2,put=PutBottomNote2))
    _bstr_t BottomNote2;
    __declspec(property(get=GetBottomTreatmentType,put=PutBottomTreatmentType))
    enum DimWeldTreatmentTypeConstants BottomTreatmentType;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetBottomType,put=PutBottomType))
    enum DimWeldTypeConstants BottomType;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetBottomNote3,put=PutBottomNote3))
    _bstr_t BottomNote3;
    __declspec(property(get=GetBottomNoteZ,put=PutBottomNoteZ))
    _bstr_t BottomNoteZ;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[][];
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetPMIPlane))
    IDispatchPtr PMIPlane;
    __declspec(property(get=GetPMITrackDistance,put=PutPMITrackDistance))
    double PMITrackDistance;
    __declspec(property(get=GetSymmetrical,put=PutSymmetrical))
    VARIANT_BOOL Symmetrical;
    __declspec(property(get=GetHidePMI,put=PutHidePMI))
    VARIANT_BOOL HidePMI;
    __declspec(property(get=GetBottomWeldModifier,put=PutBottomWeldModifier))
    enum DimWeldModifierConstants BottomWeldModifier;
    __declspec(property(get=GetPMIName,put=PutPMIName))
    _bstr_t PMIName;
    __declspec(property(get=GetWeldInFieldFlagDirection,put=PutWeldInFieldFlagDirection))
    enum WeldSymbolFlagDirectionConstants WeldInFieldFlagDirection;
    __declspec(property(get=GetTailNote2,put=PutTailNote2))
    _bstr_t TailNote2;
    __declspec(property(get=GetTopNoteCSize,put=PutTopNoteCSize))
    _bstr_t TopNoteCSize;
    __declspec(property(get=GetBottomNoteCSize,put=PutBottomNoteCSize))
    _bstr_t BottomNoteCSize;
    __declspec(property(get=GetTopNoteAngle,put=PutTopNoteAngle))
    _bstr_t TopNoteAngle;
    __declspec(property(get=GetBottomNoteAngle,put=PutBottomNoteAngle))
    _bstr_t BottomNoteAngle;
    __declspec(property(get=GetTopNoteDepth,put=PutTopNoteDepth))
    _bstr_t TopNoteDepth;
    __declspec(property(get=GetBottomNoteDepth,put=PutBottomNoteDepth))
    _bstr_t BottomNoteDepth;
    __declspec(property(get=GetTopPosOffset,put=PutTopPosOffset))
    int TopPosOffset;
    __declspec(property(get=GetBottomPosOffset,put=PutBottomPosOffset))
    int BottomPosOffset;
    __declspec(property(get=GetCenterType,put=PutCenterType))
    enum DimWeldTypeConstants CenterType;
    __declspec(property(get=GetIsTerminatorAttachedToEntity))
    VARIANT_BOOL IsTerminatorAttachedToEntity;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetVertexCount))
    long VertexCount;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetBreakLineDistance,put=PutBreakLineDistance))
    double BreakLineDistance;
    __declspec(property(get=GetBreakLine,put=PutBreakLine))
    VARIANT_BOOL BreakLine;
    __declspec(property(get=GetBreakLineDirection,put=PutBreakLineDirection))
    VARIANT_BOOL BreakLineDirection;
    __declspec(property(get=GetLeader,put=PutLeader))
    VARIANT_BOOL Leader;
    __declspec(property(get=GetRotationAngle,put=PutRotationAngle))
    double RotationAngle;
    __declspec(property(get=GetTextScale,put=PutTextScale))
    double TextScale;
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;

    //
    // Wrapper methods for error-handling
    //

    DimStylePtr GetStyle ( );
    void PutZSymbol (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetZSymbol ( );
    void PutTail (
        enum DimWeldTailTypeConstants pVal );
    enum DimWeldTailTypeConstants GetTail ( );
    void PutDashLine (
        enum DimWeldDashLineTypeConstants pVal );
    enum DimWeldDashLineTypeConstants GetDashLine ( );
    void PutWeldInField (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetWeldInField ( );
    void PutOffsetTopBottom (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetOffsetTopBottom ( );
    void PutWeldAllAround (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetWeldAllAround ( );
    void PutSymmetrical (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetSymmetrical ( );
    void PutTopNote1 (
        _bstr_t Text );
    _bstr_t GetTopNote1 ( );
    void PutTopNote2 (
        _bstr_t Text );
    _bstr_t GetTopNote2 ( );
    void PutTopTreatmentType (
        enum DimWeldTreatmentTypeConstants Type );
    enum DimWeldTreatmentTypeConstants GetTopTreatmentType ( );
    void PutTopType (
        enum DimWeldTypeConstants Type );
    enum DimWeldTypeConstants GetTopType ( );
    void PutTopNote3 (
        _bstr_t Text );
    _bstr_t GetTopNote3 ( );
    void PutTopNoteZ (
        _bstr_t Text );
    _bstr_t GetTopNoteZ ( );
    void PutTailNote (
        _bstr_t Text );
    _bstr_t GetTailNote ( );
    void PutBottomNote1 (
        _bstr_t Text );
    _bstr_t GetBottomNote1 ( );
    void PutBottomNote2 (
        _bstr_t Text );
    _bstr_t GetBottomNote2 ( );
    void PutBottomTreatmentType (
        enum DimWeldTreatmentTypeConstants Type );
    enum DimWeldTreatmentTypeConstants GetBottomTreatmentType ( );
    void PutBottomType (
        enum DimWeldTypeConstants Type );
    enum DimWeldTypeConstants GetBottomType ( );
    void PutBottomNote3 (
        _bstr_t Text );
    _bstr_t GetBottomNote3 ( );
    void PutBottomNoteZ (
        _bstr_t Text );
    _bstr_t GetBottomNoteZ ( );
    HRESULT SetTerminator (
        IDispatch * TerminatorObj,
        double x,
        double y,
        double z,
        VARIANT_BOOL keyPoint );
    HRESULT GetTerminator (
        IDispatch * * TerminatorObj,
        double * x,
        double * y,
        double * z,
        VARIANT_BOOL * keyPoint );
    HRESULT SetFreeSpacePoint (
        double x,
        double y,
        double z );
    HRESULT GetFreeSpacePoint (
        double * x,
        double * y,
        double * z );
    IDispatchPtr GetPlane ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse,
        long Lcid = 0 );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    double GetBreakLineDistance ( );
    void PutBreakLineDistance (
        double Distance );
    VARIANT_BOOL GetBreakLine ( );
    void PutBreakLine (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetBreakLineDirection ( );
    void PutBreakLineDirection (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetLeader ( );
    void PutLeader (
        VARIANT_BOOL Flag );
    long GetVertexCount ( );
    HRESULT GetVertices (
        long * VertexCount,
        SAFEARRAY * * Vertices );
    HRESULT SetVertices (
        long VertexCount,
        SAFEARRAY * * Vertices );
    HRESULT GetVertex (
        long Index,
        double * x,
        double * y,
        double * z );
    HRESULT SetVertex (
        long Index,
        double x,
        double y,
        double z );
    HRESULT InsertVertex (
        long Index,
        double x,
        double y,
        double z );
    HRESULT AddVertex (
        double x,
        double y,
        double z );
    HRESULT RemoveVertex (
        long Index );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    double GetRotationAngle ( );
    void PutRotationAngle (
        double pdAngle );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    void PutTailNote2 (
        _bstr_t Text );
    _bstr_t GetTailNote2 ( );
    void PutTopNoteCSize (
        _bstr_t Text );
    _bstr_t GetTopNoteCSize ( );
    void PutBottomNoteCSize (
        _bstr_t Text );
    _bstr_t GetBottomNoteCSize ( );
    void PutTopNoteAngle (
        _bstr_t Text );
    _bstr_t GetTopNoteAngle ( );
    void PutBottomNoteAngle (
        _bstr_t Text );
    _bstr_t GetBottomNoteAngle ( );
    void PutTopNoteDepth (
        _bstr_t Text );
    _bstr_t GetTopNoteDepth ( );
    void PutBottomNoteDepth (
        _bstr_t Text );
    _bstr_t GetBottomNoteDepth ( );
    void PutTopPosOffset (
        int Offset );
    int GetTopPosOffset ( );
    void PutBottomPosOffset (
        int Offset );
    int GetBottomPosOffset ( );
    double GetTextScale ( );
    void PutTextScale (
        double pdAngle );
    void PutLayer (
        _bstr_t Layer );
    _bstr_t GetLayer ( );
    IDispatchPtr GetPMIPlane ( );
    double GetPMITrackDistance ( );
    void PutPMITrackDistance (
        double pdPMITrackDistance );
    void PutHidePMI (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetHidePMI ( );
    void PutTopWeldModifier (
        enum DimWeldModifierConstants Type );
    enum DimWeldModifierConstants GetTopWeldModifier ( );
    void PutBottomWeldModifier (
        enum DimWeldModifierConstants Type );
    enum DimWeldModifierConstants GetBottomWeldModifier ( );
    DisplayDataPtr GetDisplayData ( );
    HRESULT PromoteToCurrentVersion ( );
    HRESULT SetAlignmentShape (
        IDispatch * AlignmentShapeObj,
        double x,
        double y );
    HRESULT GetAlignmentShape (
        IDispatch * * AlignmentShapeObj,
        double * x,
        double * y );
    void PutPMIName (
        _bstr_t Text );
    _bstr_t GetPMIName ( );
    void PutWeldInFieldFlagDirection (
        enum WeldSymbolFlagDirectionConstants Flag );
    enum WeldSymbolFlagDirectionConstants GetWeldInFieldFlagDirection ( );
    HRESULT TransformToModelCoordinates (
        double InputX,
        double InputY,
        double InputZ,
        double * ModelX,
        double * ModelY,
        double * ModelZ );
    void PutCenterType (
        enum DimWeldTypeConstants Type );
    enum DimWeldTypeConstants GetCenterType ( );
    HRESULT SetCenterTreatmentTypes (
        enum DimWeldTreatmentTypeConstants AboveType,
        enum DimWeldTreatmentTypeConstants BelowType );
    HRESULT GetCenterTreatmentTypes (
        enum DimWeldTreatmentTypeConstants * AboveType,
        enum DimWeldTreatmentTypeConstants * BelowType );
    VARIANT_BOOL GetIsTerminatorAttachedToEntity ( );
    HRESULT GetReferencedGeometry (
        SAFEARRAY * * ReferencedGeometries );
    HRESULT SetReferencedGeometry (
        SAFEARRAY * * ReferencedGeometries );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct DimStyle * * Style ) = 0;
      virtual HRESULT __stdcall put_ZSymbol (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_ZSymbol (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_Tail (
        /*[in]*/ enum DimWeldTailTypeConstants pVal ) = 0;
      virtual HRESULT __stdcall get_Tail (
        /*[out,retval]*/ enum DimWeldTailTypeConstants * pVal ) = 0;
      virtual HRESULT __stdcall put_DashLine (
        /*[in]*/ enum DimWeldDashLineTypeConstants pVal ) = 0;
      virtual HRESULT __stdcall get_DashLine (
        /*[out,retval]*/ enum DimWeldDashLineTypeConstants * pVal ) = 0;
      virtual HRESULT __stdcall put_WeldInField (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_WeldInField (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_OffsetTopBottom (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_OffsetTopBottom (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_WeldAllAround (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_WeldAllAround (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_Symmetrical (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_Symmetrical (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_TopNote1 (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_TopNote1 (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_TopNote2 (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_TopNote2 (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_TopTreatmentType (
        /*[in]*/ enum DimWeldTreatmentTypeConstants Type ) = 0;
      virtual HRESULT __stdcall get_TopTreatmentType (
        /*[out,retval]*/ enum DimWeldTreatmentTypeConstants * Type ) = 0;
      virtual HRESULT __stdcall put_TopType (
        /*[in]*/ enum DimWeldTypeConstants Type ) = 0;
      virtual HRESULT __stdcall get_TopType (
        /*[out,retval]*/ enum DimWeldTypeConstants * Type ) = 0;
      virtual HRESULT __stdcall put_TopNote3 (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_TopNote3 (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_TopNoteZ (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_TopNoteZ (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_TailNote (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_TailNote (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_BottomNote1 (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_BottomNote1 (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_BottomNote2 (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_BottomNote2 (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_BottomTreatmentType (
        /*[in]*/ enum DimWeldTreatmentTypeConstants Type ) = 0;
      virtual HRESULT __stdcall get_BottomTreatmentType (
        /*[out,retval]*/ enum DimWeldTreatmentTypeConstants * Type ) = 0;
      virtual HRESULT __stdcall put_BottomType (
        /*[in]*/ enum DimWeldTypeConstants Type ) = 0;
      virtual HRESULT __stdcall get_BottomType (
        /*[out,retval]*/ enum DimWeldTypeConstants * Type ) = 0;
      virtual HRESULT __stdcall put_BottomNote3 (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_BottomNote3 (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_BottomNoteZ (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_BottomNoteZ (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall raw_SetTerminator (
        /*[in]*/ IDispatch * TerminatorObj,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z,
        /*[in]*/ VARIANT_BOOL keyPoint ) = 0;
      virtual HRESULT __stdcall raw_GetTerminator (
        /*[out]*/ IDispatch * * TerminatorObj,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ VARIANT_BOOL * keyPoint ) = 0;
      virtual HRESULT __stdcall raw_SetFreeSpacePoint (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_GetFreeSpacePoint (
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z ) = 0;
      virtual HRESULT __stdcall get_Plane (
        /*[out,retval]*/ IDispatch * * Plane ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[in]*/ VARIANT Recurse,
        /*[in,lcid]*/ long Lcid,
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * Type ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * ZOrder ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[in]*/ VARIANT Recurse,
        /*[out,retval]*/ BSTR * Key ) = 0;
      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ IDispatch * * Document ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ double XFrom,
        /*[in]*/ double YFrom,
        /*[in]*/ double XTo,
        /*[in]*/ double YTo ) = 0;
      virtual HRESULT __stdcall raw_Scale (
        /*[in]*/ double Factor ) = 0;
      virtual HRESULT __stdcall raw_Rotate (
        /*[in]*/ double Angle,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[out]*/ double * XMinimum,
        /*[out]*/ double * YMinimum,
        /*[out]*/ double * XMaximum,
        /*[out]*/ double * YMaximum ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ VARIANT XDistance,
        /*[in]*/ VARIANT YDistance,
        /*[out,retval]*/ IDispatch * * NewObject ) = 0;
      virtual HRESULT __stdcall raw_Mirror (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ VARIANT BooleanCopyFlag,
        /*[out,retval]*/ IDispatch * * Object ) = 0;
      virtual HRESULT __stdcall raw_BringToFront ( ) = 0;
      virtual HRESULT __stdcall raw_BringForward ( ) = 0;
      virtual HRESULT __stdcall raw_SendToBack ( ) = 0;
      virtual HRESULT __stdcall raw_SendBackward ( ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall get_BreakLineDistance (
        /*[out,retval]*/ double * Distance ) = 0;
      virtual HRESULT __stdcall put_BreakLineDistance (
        /*[in]*/ double Distance ) = 0;
      virtual HRESULT __stdcall get_BreakLine (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_BreakLine (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_BreakLineDirection (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_BreakLineDirection (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_Leader (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_Leader (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_VertexCount (
        /*[out,retval]*/ long * VertexCount ) = 0;
      virtual HRESULT __stdcall raw_GetVertices (
        /*[out]*/ long * VertexCount,
        /*[in,out]*/ SAFEARRAY * * Vertices ) = 0;
      virtual HRESULT __stdcall raw_SetVertices (
        /*[in]*/ long VertexCount,
        /*[in]*/ SAFEARRAY * * Vertices ) = 0;
      virtual HRESULT __stdcall raw_GetVertex (
        /*[in]*/ long Index,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[in]*/ double * z ) = 0;
      virtual HRESULT __stdcall raw_SetVertex (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_InsertVertex (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_AddVertex (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_RemoveVertex (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall get_KeyPointCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_GetKeyPoint (
        /*[in]*/ long Index,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ enum TGFramework::KeyPointType * KeypointType,
        /*[out]*/ long * HandleType ) = 0;
      virtual HRESULT __stdcall raw_SetKeyPoint (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall get_RotationAngle (
        /*[out,retval]*/ double * pdAngle ) = 0;
      virtual HRESULT __stdcall put_RotationAngle (
        /*[in]*/ double pdAngle ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
      virtual HRESULT __stdcall put_TailNote2 (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_TailNote2 (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_TopNoteCSize (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_TopNoteCSize (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_BottomNoteCSize (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_BottomNoteCSize (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_TopNoteAngle (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_TopNoteAngle (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_BottomNoteAngle (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_BottomNoteAngle (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_TopNoteDepth (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_TopNoteDepth (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_BottomNoteDepth (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_BottomNoteDepth (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_TopPosOffset (
        /*[in]*/ int Offset ) = 0;
      virtual HRESULT __stdcall get_TopPosOffset (
        /*[out,retval]*/ int * Offset ) = 0;
      virtual HRESULT __stdcall put_BottomPosOffset (
        /*[in]*/ int Offset ) = 0;
      virtual HRESULT __stdcall get_BottomPosOffset (
        /*[out,retval]*/ int * Offset ) = 0;
      virtual HRESULT __stdcall get_TextScale (
        /*[out,retval]*/ double * pdAngle ) = 0;
      virtual HRESULT __stdcall put_TextScale (
        /*[in]*/ double pdAngle ) = 0;
      virtual HRESULT __stdcall put_Layer (
        /*[in]*/ BSTR Layer ) = 0;
      virtual HRESULT __stdcall get_Layer (
        /*[out,retval]*/ BSTR * Layer ) = 0;
      virtual HRESULT __stdcall get_PMIPlane (
        /*[out,retval]*/ IDispatch * * pPMIPlane ) = 0;
      virtual HRESULT __stdcall get_PMITrackDistance (
        /*[out,retval]*/ double * pdPMITrackDistance ) = 0;
      virtual HRESULT __stdcall put_PMITrackDistance (
        /*[in]*/ double pdPMITrackDistance ) = 0;
      virtual HRESULT __stdcall put_HidePMI (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_HidePMI (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_TopWeldModifier (
        /*[in]*/ enum DimWeldModifierConstants Type ) = 0;
      virtual HRESULT __stdcall get_TopWeldModifier (
        /*[out,retval]*/ enum DimWeldModifierConstants * Type ) = 0;
      virtual HRESULT __stdcall put_BottomWeldModifier (
        /*[in]*/ enum DimWeldModifierConstants Type ) = 0;
      virtual HRESULT __stdcall get_BottomWeldModifier (
        /*[out,retval]*/ enum DimWeldModifierConstants * Type ) = 0;
      virtual HRESULT __stdcall raw_GetDisplayData (
        /*[out,retval]*/ struct DisplayData * * pDisplayData ) = 0;
      virtual HRESULT __stdcall raw_PromoteToCurrentVersion ( ) = 0;
      virtual HRESULT __stdcall raw_SetAlignmentShape (
        /*[in]*/ IDispatch * AlignmentShapeObj,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_GetAlignmentShape (
        /*[out]*/ IDispatch * * AlignmentShapeObj,
        /*[out]*/ double * x,
        /*[out]*/ double * y ) = 0;
      virtual HRESULT __stdcall put_PMIName (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_PMIName (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_WeldInFieldFlagDirection (
        /*[in]*/ enum WeldSymbolFlagDirectionConstants Flag ) = 0;
      virtual HRESULT __stdcall get_WeldInFieldFlagDirection (
        /*[out,retval]*/ enum WeldSymbolFlagDirectionConstants * Flag ) = 0;
      virtual HRESULT __stdcall raw_TransformToModelCoordinates (
        /*[in]*/ double InputX,
        /*[in]*/ double InputY,
        /*[in]*/ double InputZ,
        /*[out]*/ double * ModelX,
        /*[out]*/ double * ModelY,
        /*[out]*/ double * ModelZ ) = 0;
      virtual HRESULT __stdcall put_CenterType (
        /*[in]*/ enum DimWeldTypeConstants Type ) = 0;
      virtual HRESULT __stdcall get_CenterType (
        /*[out,retval]*/ enum DimWeldTypeConstants * Type ) = 0;
      virtual HRESULT __stdcall raw_SetCenterTreatmentTypes (
        /*[in]*/ enum DimWeldTreatmentTypeConstants AboveType,
        /*[in]*/ enum DimWeldTreatmentTypeConstants BelowType ) = 0;
      virtual HRESULT __stdcall raw_GetCenterTreatmentTypes (
        /*[out]*/ enum DimWeldTreatmentTypeConstants * AboveType,
        /*[out]*/ enum DimWeldTreatmentTypeConstants * BelowType ) = 0;
      virtual HRESULT __stdcall get_IsTerminatorAttachedToEntity (
        /*[out,retval]*/ VARIANT_BOOL * bIsAttached ) = 0;
      virtual HRESULT __stdcall raw_GetReferencedGeometry (
        /*[out]*/ SAFEARRAY * * ReferencedGeometries ) = 0;
      virtual HRESULT __stdcall raw_SetReferencedGeometry (
        /*[in]*/ SAFEARRAY * * ReferencedGeometries ) = 0;
};

struct __declspec(uuid("b3cec7e7-34a4-11cf-848f-080036373002"))
WeldSymbolDataSet : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetZSymbol,put=PutZSymbol))
    VARIANT_BOOL ZSymbol;
    __declspec(property(get=GetTail,put=PutTail))
    enum DimWeldTailTypeConstants Tail;
    __declspec(property(get=GetDashLine,put=PutDashLine))
    enum DimWeldDashLineTypeConstants DashLine;
    __declspec(property(get=GetWeldInField,put=PutWeldInField))
    VARIANT_BOOL WeldInField;
    __declspec(property(get=GetOffsetTopBottom,put=PutOffsetTopBottom))
    VARIANT_BOOL OffsetTopBottom;
    __declspec(property(get=GetWeldAllAround,put=PutWeldAllAround))
    VARIANT_BOOL WeldAllAround;
    __declspec(property(get=GetTopNote1,put=PutTopNote1))
    _bstr_t TopNote1;
    __declspec(property(get=GetTopNote2,put=PutTopNote2))
    _bstr_t TopNote2;
    __declspec(property(get=GetTopTreatmentType,put=PutTopTreatmentType))
    enum DimWeldTreatmentTypeConstants TopTreatmentType;
    __declspec(property(get=GetTopType,put=PutTopType))
    enum DimWeldTypeConstants TopType;
    __declspec(property(get=GetTopNote3,put=PutTopNote3))
    _bstr_t TopNote3;
    __declspec(property(get=GetTopNoteZ,put=PutTopNoteZ))
    _bstr_t TopNoteZ;
    __declspec(property(get=GetTailNote,put=PutTailNote))
    _bstr_t TailNote;
    __declspec(property(get=GetBottomNote1,put=PutBottomNote1))
    _bstr_t BottomNote1;
    __declspec(property(get=GetBottomNote2,put=PutBottomNote2))
    _bstr_t BottomNote2;
    __declspec(property(get=GetBottomTreatmentType,put=PutBottomTreatmentType))
    enum DimWeldTreatmentTypeConstants BottomTreatmentType;
    __declspec(property(get=GetBottomType,put=PutBottomType))
    enum DimWeldTypeConstants BottomType;
    __declspec(property(get=GetBottomNote3,put=PutBottomNote3))
    _bstr_t BottomNote3;
    __declspec(property(get=GetBottomNoteZ,put=PutBottomNoteZ))
    _bstr_t BottomNoteZ;
    __declspec(property(get=GetTopWeldModifier,put=PutTopWeldModifier))
    enum DimWeldModifierConstants TopWeldModifier;
    __declspec(property(get=GetBottomWeldModifier,put=PutBottomWeldModifier))
    enum DimWeldModifierConstants BottomWeldModifier;
    __declspec(property(get=GetSymmetrical,put=PutSymmetrical))
    VARIANT_BOOL Symmetrical;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    void PutZSymbol (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetZSymbol ( );
    void PutTail (
        enum DimWeldTailTypeConstants _arg1 );
    enum DimWeldTailTypeConstants GetTail ( );
    void PutDashLine (
        enum DimWeldDashLineTypeConstants _arg1 );
    enum DimWeldDashLineTypeConstants GetDashLine ( );
    void PutWeldInField (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetWeldInField ( );
    void PutOffsetTopBottom (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetOffsetTopBottom ( );
    void PutWeldAllAround (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetWeldAllAround ( );
    void PutSymmetrical (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetSymmetrical ( );
    void PutTopNote1 (
        _bstr_t _arg1 );
    _bstr_t GetTopNote1 ( );
    void PutTopNote2 (
        _bstr_t _arg1 );
    _bstr_t GetTopNote2 ( );
    void PutTopTreatmentType (
        enum DimWeldTreatmentTypeConstants _arg1 );
    enum DimWeldTreatmentTypeConstants GetTopTreatmentType ( );
    void PutTopType (
        enum DimWeldTypeConstants _arg1 );
    enum DimWeldTypeConstants GetTopType ( );
    void PutTopNote3 (
        _bstr_t _arg1 );
    _bstr_t GetTopNote3 ( );
    void PutTopNoteZ (
        _bstr_t _arg1 );
    _bstr_t GetTopNoteZ ( );
    void PutTailNote (
        _bstr_t _arg1 );
    _bstr_t GetTailNote ( );
    void PutBottomNote1 (
        _bstr_t _arg1 );
    _bstr_t GetBottomNote1 ( );
    void PutBottomNote2 (
        _bstr_t _arg1 );
    _bstr_t GetBottomNote2 ( );
    void PutBottomTreatmentType (
        enum DimWeldTreatmentTypeConstants _arg1 );
    enum DimWeldTreatmentTypeConstants GetBottomTreatmentType ( );
    void PutBottomType (
        enum DimWeldTypeConstants _arg1 );
    enum DimWeldTypeConstants GetBottomType ( );
    void PutBottomNote3 (
        _bstr_t _arg1 );
    _bstr_t GetBottomNote3 ( );
    void PutBottomNoteZ (
        _bstr_t _arg1 );
    _bstr_t GetBottomNoteZ ( );
    void PutTopWeldModifier (
        enum DimWeldModifierConstants _arg1 );
    enum DimWeldModifierConstants GetTopWeldModifier ( );
    void PutBottomWeldModifier (
        enum DimWeldModifierConstants _arg1 );
    enum DimWeldModifierConstants GetBottomWeldModifier ( );
};

struct __declspec(uuid("1690dd47-e132-11ce-bb3b-080036776c02"))
_IWeldSymbolsAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetAnnotInitData))
    AnnotInitDataPtr AnnotInitData;
    __declspec(property(get=GetPlane,put=PutPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetStyle,put=PutStyle))
    DimensionStylePtr Style;
    __declspec(property(put=PutDataSet))
    WeldSymbolDataSetPtr DataSet;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    WeldSymbolPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    void PutPlane (
        IDispatch * Plane );
    IDispatchPtr GetPlane ( );
    void PutStyle (
        struct DimensionStyle * Style );
    DimensionStylePtr GetStyle ( );
    void PutDataSet (
        struct WeldSymbolDataSet * _arg1 );
    WeldSymbolPtr Add (
        double x1,
        double y1,
        double z1 );
    WeldSymbolPtr AddByTerminator (
        IDispatch * TerminatorObject,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint1 );
    HRESULT ClearPlane ( );
    HRESULT ClearStyle ( );
    HRESULT ClearDataSet ( );
    AnnotInitDataPtr GetAnnotInitData ( );
    WeldSymbolPtr AddWeldSymbol (
        struct AnnotInitData * AnnotInitData );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * App ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct WeldSymbol * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Enum ) = 0;
      virtual HRESULT __stdcall put_Plane (
        /*[in]*/ IDispatch * Plane ) = 0;
      virtual HRESULT __stdcall get_Plane (
        /*[out,retval]*/ IDispatch * * Plane ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ struct DimensionStyle * Style ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct DimensionStyle * * Style ) = 0;
      virtual HRESULT __stdcall put_DataSet (
        /*[in]*/ struct WeldSymbolDataSet * _arg1 ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double z1,
        /*[out,retval]*/ struct WeldSymbol * * Obj ) = 0;
      virtual HRESULT __stdcall raw_AddByTerminator (
        /*[in]*/ IDispatch * TerminatorObject,
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double z1,
        /*[in]*/ VARIANT_BOOL keyPoint1,
        /*[out,retval]*/ struct WeldSymbol * * Obj ) = 0;
      virtual HRESULT __stdcall raw_ClearPlane ( ) = 0;
      virtual HRESULT __stdcall raw_ClearStyle ( ) = 0;
      virtual HRESULT __stdcall raw_ClearDataSet ( ) = 0;
      virtual HRESULT __stdcall get_AnnotInitData (
        /*[out,retval]*/ struct AnnotInitData * * AnnotInitData ) = 0;
      virtual HRESULT __stdcall raw_AddWeldSymbol (
        /*[in]*/ struct AnnotInitData * AnnotInitData,
        /*[out,retval]*/ struct WeldSymbol * * Obj ) = 0;
};

struct __declspec(uuid("b3cec7e6-34a4-11cf-848f-080036373002"))
_IWeldSymbolDataSetAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetZSymbol,put=PutZSymbol))
    VARIANT_BOOL ZSymbol;
    __declspec(property(get=GetTail,put=PutTail))
    enum DimWeldTailTypeConstants Tail;
    __declspec(property(get=GetDashLine,put=PutDashLine))
    enum DimWeldDashLineTypeConstants DashLine;
    __declspec(property(get=GetWeldInField,put=PutWeldInField))
    VARIANT_BOOL WeldInField;
    __declspec(property(get=GetOffsetTopBottom,put=PutOffsetTopBottom))
    VARIANT_BOOL OffsetTopBottom;
    __declspec(property(get=GetWeldAllAround,put=PutWeldAllAround))
    VARIANT_BOOL WeldAllAround;
    __declspec(property(get=GetTopNote1,put=PutTopNote1))
    _bstr_t TopNote1;
    __declspec(property(get=GetTopNote2,put=PutTopNote2))
    _bstr_t TopNote2;
    __declspec(property(get=GetTopTreatmentType,put=PutTopTreatmentType))
    enum DimWeldTreatmentTypeConstants TopTreatmentType;
    __declspec(property(get=GetTopType,put=PutTopType))
    enum DimWeldTypeConstants TopType;
    __declspec(property(get=GetTopNote3,put=PutTopNote3))
    _bstr_t TopNote3;
    __declspec(property(get=GetTopNoteZ,put=PutTopNoteZ))
    _bstr_t TopNoteZ;
    __declspec(property(get=GetTailNote,put=PutTailNote))
    _bstr_t TailNote;
    __declspec(property(get=GetBottomNote1,put=PutBottomNote1))
    _bstr_t BottomNote1;
    __declspec(property(get=GetBottomNote2,put=PutBottomNote2))
    _bstr_t BottomNote2;
    __declspec(property(get=GetBottomTreatmentType,put=PutBottomTreatmentType))
    enum DimWeldTreatmentTypeConstants BottomTreatmentType;
    __declspec(property(get=GetBottomType,put=PutBottomType))
    enum DimWeldTypeConstants BottomType;
    __declspec(property(get=GetBottomNote3,put=PutBottomNote3))
    _bstr_t BottomNote3;
    __declspec(property(get=GetBottomNoteZ,put=PutBottomNoteZ))
    _bstr_t BottomNoteZ;
    __declspec(property(get=GetTopWeldModifier,put=PutTopWeldModifier))
    enum DimWeldModifierConstants TopWeldModifier;
    __declspec(property(get=GetBottomWeldModifier,put=PutBottomWeldModifier))
    enum DimWeldModifierConstants BottomWeldModifier;
    __declspec(property(get=GetSymmetrical,put=PutSymmetrical))
    VARIANT_BOOL Symmetrical;

    //
    // Wrapper methods for error-handling
    //

    void PutZSymbol (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetZSymbol ( );
    void PutTail (
        enum DimWeldTailTypeConstants pVal );
    enum DimWeldTailTypeConstants GetTail ( );
    void PutDashLine (
        enum DimWeldDashLineTypeConstants pVal );
    enum DimWeldDashLineTypeConstants GetDashLine ( );
    void PutWeldInField (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetWeldInField ( );
    void PutOffsetTopBottom (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetOffsetTopBottom ( );
    void PutWeldAllAround (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetWeldAllAround ( );
    void PutSymmetrical (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetSymmetrical ( );
    void PutTopNote1 (
        _bstr_t Text );
    _bstr_t GetTopNote1 ( );
    void PutTopNote2 (
        _bstr_t Text );
    _bstr_t GetTopNote2 ( );
    void PutTopTreatmentType (
        enum DimWeldTreatmentTypeConstants Type );
    enum DimWeldTreatmentTypeConstants GetTopTreatmentType ( );
    void PutTopType (
        enum DimWeldTypeConstants Type );
    enum DimWeldTypeConstants GetTopType ( );
    void PutTopNote3 (
        _bstr_t Text );
    _bstr_t GetTopNote3 ( );
    void PutTopNoteZ (
        _bstr_t Text );
    _bstr_t GetTopNoteZ ( );
    void PutTailNote (
        _bstr_t Text );
    _bstr_t GetTailNote ( );
    void PutBottomNote1 (
        _bstr_t Text );
    _bstr_t GetBottomNote1 ( );
    void PutBottomNote2 (
        _bstr_t Text );
    _bstr_t GetBottomNote2 ( );
    void PutBottomTreatmentType (
        enum DimWeldTreatmentTypeConstants Type );
    enum DimWeldTreatmentTypeConstants GetBottomTreatmentType ( );
    void PutBottomType (
        enum DimWeldTypeConstants Type );
    enum DimWeldTypeConstants GetBottomType ( );
    void PutBottomNote3 (
        _bstr_t Text );
    _bstr_t GetBottomNote3 ( );
    void PutBottomNoteZ (
        _bstr_t Text );
    _bstr_t GetBottomNoteZ ( );
    void PutTopWeldModifier (
        enum DimWeldModifierConstants Type );
    enum DimWeldModifierConstants GetTopWeldModifier ( );
    void PutBottomWeldModifier (
        enum DimWeldModifierConstants Type );
    enum DimWeldModifierConstants GetBottomWeldModifier ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_ZSymbol (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_ZSymbol (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_Tail (
        /*[in]*/ enum DimWeldTailTypeConstants pVal ) = 0;
      virtual HRESULT __stdcall get_Tail (
        /*[out,retval]*/ enum DimWeldTailTypeConstants * pVal ) = 0;
      virtual HRESULT __stdcall put_DashLine (
        /*[in]*/ enum DimWeldDashLineTypeConstants pVal ) = 0;
      virtual HRESULT __stdcall get_DashLine (
        /*[out,retval]*/ enum DimWeldDashLineTypeConstants * pVal ) = 0;
      virtual HRESULT __stdcall put_WeldInField (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_WeldInField (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_OffsetTopBottom (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_OffsetTopBottom (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_WeldAllAround (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_WeldAllAround (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_Symmetrical (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_Symmetrical (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_TopNote1 (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_TopNote1 (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_TopNote2 (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_TopNote2 (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_TopTreatmentType (
        /*[in]*/ enum DimWeldTreatmentTypeConstants Type ) = 0;
      virtual HRESULT __stdcall get_TopTreatmentType (
        /*[out,retval]*/ enum DimWeldTreatmentTypeConstants * Type ) = 0;
      virtual HRESULT __stdcall put_TopType (
        /*[in]*/ enum DimWeldTypeConstants Type ) = 0;
      virtual HRESULT __stdcall get_TopType (
        /*[out,retval]*/ enum DimWeldTypeConstants * Type ) = 0;
      virtual HRESULT __stdcall put_TopNote3 (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_TopNote3 (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_TopNoteZ (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_TopNoteZ (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_TailNote (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_TailNote (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_BottomNote1 (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_BottomNote1 (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_BottomNote2 (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_BottomNote2 (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_BottomTreatmentType (
        /*[in]*/ enum DimWeldTreatmentTypeConstants Type ) = 0;
      virtual HRESULT __stdcall get_BottomTreatmentType (
        /*[out,retval]*/ enum DimWeldTreatmentTypeConstants * Type ) = 0;
      virtual HRESULT __stdcall put_BottomType (
        /*[in]*/ enum DimWeldTypeConstants Type ) = 0;
      virtual HRESULT __stdcall get_BottomType (
        /*[out,retval]*/ enum DimWeldTypeConstants * Type ) = 0;
      virtual HRESULT __stdcall put_BottomNote3 (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_BottomNote3 (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_BottomNoteZ (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_BottomNoteZ (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_TopWeldModifier (
        /*[in]*/ enum DimWeldModifierConstants Type ) = 0;
      virtual HRESULT __stdcall get_TopWeldModifier (
        /*[out,retval]*/ enum DimWeldModifierConstants * Type ) = 0;
      virtual HRESULT __stdcall put_BottomWeldModifier (
        /*[in]*/ enum DimWeldModifierConstants Type ) = 0;
      virtual HRESULT __stdcall get_BottomWeldModifier (
        /*[out,retval]*/ enum DimWeldModifierConstants * Type ) = 0;
};

struct __declspec(uuid("5c585ab1-f199-11ce-a93b-080036373002"))
CenterMarks : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetPlane,put=PutPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetStyle,put=PutStyle))
    DimensionStylePtr Style;
    __declspec(property(get=GetAxis,put=PutAxis))
    IDispatchPtr Axis;
    __declspec(property(get=GetAnnotInitData))
    AnnotInitDataPtr AnnotInitData;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    CenterMarkPtr Item (
        const _variant_t & Index );
    void PutPlane (
        IDispatch * _arg1 );
    IDispatchPtr GetPlane ( );
    void PutStyle (
        struct DimensionStyle * _arg1 );
    DimensionStylePtr GetStyle ( );
    void PutAxis (
        IDispatch * _arg1 );
    IDispatchPtr GetAxis ( );
    CenterMarkPtr Add (
        double x,
        double y,
        double z );
    CenterMarkPtr AddByCenter (
        IDispatch * CenterObject,
        double x,
        double y,
        double z,
        VARIANT_BOOL keyPoint );
    HRESULT ClearPlane ( );
    HRESULT ClearStyle ( );
    HRESULT ClearAxis ( );
    CenterMarkPtr Add2PointCenterMark (
        IDispatch * Object1,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint1,
        IDispatch * Object2,
        double x2,
        double y2,
        double z2,
        VARIANT_BOOL keyPoint2,
        VARIANT_BOOL bHonorKeyPoints );
    AnnotInitDataPtr GetAnnotInitData ( );
    CenterMarkPtr AddCenterMark (
        struct AnnotInitData * AnnotInitData );
};

struct __declspec(uuid("7d915053-f4a6-11ce-a941-080036373002"))
CenterMark : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetStyle))
    DimStylePtr Style;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetAxis))
    IDispatchPtr Axis;
    __declspec(property(get=GetName))
    _bstr_t Name[];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetConnectObject))
    IDispatchPtr ConnectObject;
    __declspec(property(get=GetTwoPoint))
    VARIANT_BOOL TwoPoint;
    __declspec(property(get=GetTextScale,put=PutTextScale))
    double TextScale;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetPMIName,put=PutPMIName))
    _bstr_t PMIName;
    __declspec(property(get=GetHidePMI,put=PutHidePMI))
    VARIANT_BOOL HidePMI;
    __declspec(property(get=GetPMIPlane))
    IDispatchPtr PMIPlane;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    DimStylePtr GetStyle ( );
    HRESULT SetCenter (
        IDispatch * CenterObj,
        double x,
        double y,
        double z,
        VARIANT_BOOL keyPoint );
    HRESULT GetCenter (
        IDispatch * * CenterObj,
        double * x,
        double * y,
        double * z,
        VARIANT_BOOL * keyPoint );
    HRESULT SetCenterPoint (
        double x,
        double y,
        double z );
    HRESULT GetCenterPoint (
        double * x,
        double * y,
        double * z );
    IDispatchPtr GetPlane ( );
    IDispatchPtr GetAxis ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    IDispatchPtr GetConnectObject ( );
    VARIANT_BOOL GetTwoPoint ( );
    HRESULT SetArcCenter (
        IDispatch * CenterObj,
        double x,
        double y,
        double z,
        VARIANT_BOOL keyPoint );
    HRESULT GetArcCenter (
        IDispatch * * CenterObj,
        double * x,
        double * y,
        double * z,
        VARIANT_BOOL * keyPoint );
    HRESULT SetArcCenterPoint (
        double x,
        double y,
        double z );
    HRESULT GetArcCenterPoint (
        double * x,
        double * y,
        double * z );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    double GetTextScale ( );
    void PutTextScale (
        double _arg1 );
    void PutLayer (
        _bstr_t _arg1 );
    _bstr_t GetLayer ( );
    HRESULT PromoteToCurrentVersion ( );
    void PutPMIName (
        _bstr_t _arg1 );
    _bstr_t GetPMIName ( );
    void PutHidePMI (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHidePMI ( );
    IDispatchPtr GetPMIPlane ( );
};

struct __declspec(uuid("7d915054-f4a6-11ce-a941-080036373002"))
_ICenterMarksAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetPlane,put=PutPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetStyle,put=PutStyle))
    DimensionStylePtr Style;
    __declspec(property(get=GetAxis,put=PutAxis))
    IDispatchPtr Axis;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetAnnotInitData))
    AnnotInitDataPtr AnnotInitData;

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    CenterMarkPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    void PutPlane (
        IDispatch * Plane );
    IDispatchPtr GetPlane ( );
    void PutStyle (
        struct DimensionStyle * Style );
    DimensionStylePtr GetStyle ( );
    void PutAxis (
        IDispatch * Axis );
    IDispatchPtr GetAxis ( );
    CenterMarkPtr Add (
        double x,
        double y,
        double z );
    CenterMarkPtr AddByCenter (
        IDispatch * CenterObject,
        double x,
        double y,
        double z,
        VARIANT_BOOL keyPoint );
    HRESULT ClearPlane ( );
    HRESULT ClearStyle ( );
    HRESULT ClearAxis ( );
    CenterMarkPtr Add2PointCenterMark (
        IDispatch * Object1,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint1,
        IDispatch * Object2,
        double x2,
        double y2,
        double z2,
        VARIANT_BOOL keyPoint2,
        VARIANT_BOOL bHonorKeyPoints );
    AnnotInitDataPtr GetAnnotInitData ( );
    CenterMarkPtr AddCenterMark (
        struct AnnotInitData * AnnotInitData );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * App ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct CenterMark * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Enum ) = 0;
      virtual HRESULT __stdcall put_Plane (
        /*[in]*/ IDispatch * Plane ) = 0;
      virtual HRESULT __stdcall get_Plane (
        /*[out,retval]*/ IDispatch * * Plane ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ struct DimensionStyle * Style ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct DimensionStyle * * Style ) = 0;
      virtual HRESULT __stdcall put_Axis (
        /*[in]*/ IDispatch * Axis ) = 0;
      virtual HRESULT __stdcall get_Axis (
        /*[out,retval]*/ IDispatch * * Axis ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z,
        /*[out,retval]*/ struct CenterMark * * Obj ) = 0;
      virtual HRESULT __stdcall raw_AddByCenter (
        /*[in]*/ IDispatch * CenterObject,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z,
        /*[in]*/ VARIANT_BOOL keyPoint,
        /*[out,retval]*/ struct CenterMark * * Obj ) = 0;
      virtual HRESULT __stdcall raw_ClearPlane ( ) = 0;
      virtual HRESULT __stdcall raw_ClearStyle ( ) = 0;
      virtual HRESULT __stdcall raw_ClearAxis ( ) = 0;
      virtual HRESULT __stdcall raw_Add2PointCenterMark (
        /*[in]*/ IDispatch * Object1,
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double z1,
        /*[in]*/ VARIANT_BOOL keyPoint1,
        /*[in]*/ IDispatch * Object2,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ double z2,
        /*[in]*/ VARIANT_BOOL keyPoint2,
        /*[in]*/ VARIANT_BOOL bHonorKeyPoints,
        /*[out,retval]*/ struct CenterMark * * Obj ) = 0;
      virtual HRESULT __stdcall get_AnnotInitData (
        /*[out,retval]*/ struct AnnotInitData * * AnnotInitData ) = 0;
      virtual HRESULT __stdcall raw_AddCenterMark (
        /*[in]*/ struct AnnotInitData * AnnotInitData,
        /*[out,retval]*/ struct CenterMark * * Obj ) = 0;
};

struct __declspec(uuid("7d915052-f4a6-11ce-a941-080036373002"))
_ICenterMarkAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetStyle))
    DimStylePtr Style;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetAxis))
    IDispatchPtr Axis;
    __declspec(property(get=GetName))
    _bstr_t Name[][];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetConnectObject))
    IDispatchPtr ConnectObject;
    __declspec(property(get=GetTwoPoint))
    VARIANT_BOOL TwoPoint;
    __declspec(property(get=GetTextScale,put=PutTextScale))
    double TextScale;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetPMIName,put=PutPMIName))
    _bstr_t PMIName;
    __declspec(property(get=GetHidePMI,put=PutHidePMI))
    VARIANT_BOOL HidePMI;
    __declspec(property(get=GetPMIPlane))
    IDispatchPtr PMIPlane;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    DimStylePtr GetStyle ( );
    HRESULT SetCenter (
        IDispatch * CenterObj,
        double x,
        double y,
        double z,
        VARIANT_BOOL keyPoint );
    HRESULT GetCenter (
        IDispatch * * CenterObj,
        double * x,
        double * y,
        double * z,
        VARIANT_BOOL * keyPoint );
    HRESULT SetCenterPoint (
        double x,
        double y,
        double z );
    HRESULT GetCenterPoint (
        double * x,
        double * y,
        double * z );
    IDispatchPtr GetPlane ( );
    IDispatchPtr GetAxis ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse,
        long Lcid = 0 );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    IDispatchPtr GetConnectObject ( );
    VARIANT_BOOL GetTwoPoint ( );
    HRESULT SetArcCenter (
        IDispatch * CenterObj,
        double x,
        double y,
        double z,
        VARIANT_BOOL keyPoint );
    HRESULT GetArcCenter (
        IDispatch * * CenterObj,
        double * x,
        double * y,
        double * z,
        VARIANT_BOOL * keyPoint );
    HRESULT SetArcCenterPoint (
        double x,
        double y,
        double z );
    HRESULT GetArcCenterPoint (
        double * x,
        double * y,
        double * z );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    double GetTextScale ( );
    void PutTextScale (
        double pdAngle );
    void PutLayer (
        _bstr_t Layer );
    _bstr_t GetLayer ( );
    HRESULT PromoteToCurrentVersion ( );
    void PutPMIName (
        _bstr_t Text );
    _bstr_t GetPMIName ( );
    void PutHidePMI (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetHidePMI ( );
    IDispatchPtr GetPMIPlane ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct DimStyle * * Style ) = 0;
      virtual HRESULT __stdcall raw_SetCenter (
        /*[in]*/ IDispatch * CenterObj,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z,
        /*[in]*/ VARIANT_BOOL keyPoint ) = 0;
      virtual HRESULT __stdcall raw_GetCenter (
        /*[out]*/ IDispatch * * CenterObj,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ VARIANT_BOOL * keyPoint ) = 0;
      virtual HRESULT __stdcall raw_SetCenterPoint (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_GetCenterPoint (
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z ) = 0;
      virtual HRESULT __stdcall get_Plane (
        /*[out,retval]*/ IDispatch * * Plane ) = 0;
      virtual HRESULT __stdcall get_Axis (
        /*[out,retval]*/ IDispatch * * Axis ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[in]*/ VARIANT Recurse,
        /*[in,lcid]*/ long Lcid,
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * Type ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * ZOrder ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[in]*/ VARIANT Recurse,
        /*[out,retval]*/ BSTR * Key ) = 0;
      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ IDispatch * * Document ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ double XFrom,
        /*[in]*/ double YFrom,
        /*[in]*/ double XTo,
        /*[in]*/ double YTo ) = 0;
      virtual HRESULT __stdcall raw_Scale (
        /*[in]*/ double Factor ) = 0;
      virtual HRESULT __stdcall raw_Rotate (
        /*[in]*/ double Angle,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[out]*/ double * XMinimum,
        /*[out]*/ double * YMinimum,
        /*[out]*/ double * XMaximum,
        /*[out]*/ double * YMaximum ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ VARIANT XDistance,
        /*[in]*/ VARIANT YDistance,
        /*[out,retval]*/ IDispatch * * NewObject ) = 0;
      virtual HRESULT __stdcall raw_Mirror (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ VARIANT BooleanCopyFlag,
        /*[out,retval]*/ IDispatch * * Object ) = 0;
      virtual HRESULT __stdcall raw_BringToFront ( ) = 0;
      virtual HRESULT __stdcall raw_BringForward ( ) = 0;
      virtual HRESULT __stdcall raw_SendToBack ( ) = 0;
      virtual HRESULT __stdcall raw_SendBackward ( ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall get_KeyPointCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_GetKeyPoint (
        /*[in]*/ long Index,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ enum TGFramework::KeyPointType * KeypointType,
        /*[out]*/ long * HandleType ) = 0;
      virtual HRESULT __stdcall raw_SetKeyPoint (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall get_ConnectObject (
        /*[out,retval]*/ IDispatch * * ConnectObject ) = 0;
      virtual HRESULT __stdcall get_TwoPoint (
        /*[out,retval]*/ VARIANT_BOOL * TwoPoint ) = 0;
      virtual HRESULT __stdcall raw_SetArcCenter (
        /*[in]*/ IDispatch * CenterObj,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z,
        /*[in]*/ VARIANT_BOOL keyPoint ) = 0;
      virtual HRESULT __stdcall raw_GetArcCenter (
        /*[out]*/ IDispatch * * CenterObj,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ VARIANT_BOOL * keyPoint ) = 0;
      virtual HRESULT __stdcall raw_SetArcCenterPoint (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_GetArcCenterPoint (
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
      virtual HRESULT __stdcall get_TextScale (
        /*[out,retval]*/ double * pdAngle ) = 0;
      virtual HRESULT __stdcall put_TextScale (
        /*[in]*/ double pdAngle ) = 0;
      virtual HRESULT __stdcall put_Layer (
        /*[in]*/ BSTR Layer ) = 0;
      virtual HRESULT __stdcall get_Layer (
        /*[out,retval]*/ BSTR * Layer ) = 0;
      virtual HRESULT __stdcall raw_PromoteToCurrentVersion ( ) = 0;
      virtual HRESULT __stdcall put_PMIName (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_PMIName (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_HidePMI (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_HidePMI (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_PMIPlane (
        /*[out,retval]*/ IDispatch * * pPMIPlane ) = 0;
};

struct __declspec(uuid("5c585ab3-f199-11ce-a93b-080036373002"))
CenterLines : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetAnnotInitData))
    AnnotInitDataPtr AnnotInitData;
    __declspec(property(get=GetPlane,put=PutPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetStyle,put=PutStyle))
    DimensionStylePtr Style;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    CenterLinePtr Item (
        const _variant_t & Index );
    void PutPlane (
        IDispatch * _arg1 );
    IDispatchPtr GetPlane ( );
    void PutStyle (
        struct DimensionStyle * _arg1 );
    DimensionStylePtr GetStyle ( );
    CenterLinePtr Add (
        double x1,
        double y1,
        double z1,
        double x2,
        double y2,
        double z2 );
    CenterLinePtr AddByStart (
        IDispatch * StartObject,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint,
        double x2,
        double y2,
        double z2 );
    CenterLinePtr AddByEnd (
        IDispatch * EndObject,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint1,
        double x2,
        double y2,
        double z2 );
    CenterLinePtr AddByStartEnd (
        IDispatch * StartObject,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint1,
        IDispatch * EndObject,
        double x2,
        double y2,
        double z2,
        VARIANT_BOOL keyPoint2 );
    HRESULT ClearPlane ( );
    HRESULT ClearStyle ( );
    CenterLinePtr AddBetweenTwoParallelLines (
        IDispatch * StartObject,
        IDispatch * EndObject );
    CenterLinePtr AddCenterArcBy3Points (
        IDispatch * StartObject,
        double Start_X,
        double Start_Y,
        double Start_Z,
        VARIANT_BOOL Start_Keypoint,
        IDispatch * EndObject,
        double End_X,
        double End_Y,
        double End_Z,
        VARIANT_BOOL End_Keypoint,
        IDispatch * CenterObject,
        double Center_X,
        double Center_Y,
        double Center_Z,
        VARIANT_BOOL Center_Keypoint );
    CenterLinePtr AddCenterArcBy2Arcs (
        IDispatch * StartObject,
        IDispatch * EndObject );
    CenterLinePtr AddBetweenTwoLines (
        IDispatch * StartObject,
        IDispatch * EndObject );
    AnnotInitDataPtr GetAnnotInitData ( );
    CenterLinePtr AddCenterLine (
        struct AnnotInitData * AnnotInitData,
        long bIsBy2Lines );
    CenterLinePtr AddCenterArc (
        struct AnnotInitData * AnnotInitData );
    CenterLinePtr AddCenterAxis (
        struct AnnotInitData * AnnotInitData );
};

struct __declspec(uuid("7d915050-f4a6-11ce-a941-080036373002"))
CenterLine : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetStyle))
    DimStylePtr Style;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetCenterLineType,put=PutCenterLineType))
    enum DimCenterlineTypeConstants CenterLineType;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetPMIName,put=PutPMIName))
    _bstr_t PMIName;
    __declspec(property(get=GetHidePMI,put=PutHidePMI))
    VARIANT_BOOL HidePMI;
    __declspec(property(get=GetPMIPlane))
    IDispatchPtr PMIPlane;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    DimStylePtr GetStyle ( );
    HRESULT SetStart (
        IDispatch * StartObj,
        double x,
        double y,
        double z,
        VARIANT_BOOL keyPoint );
    HRESULT GetStart (
        IDispatch * * StartObj,
        double * x,
        double * y,
        double * z,
        VARIANT_BOOL * keyPoint );
    HRESULT SetStartPoint (
        double x,
        double y,
        double z );
    HRESULT GetStartPoint (
        double * x,
        double * y,
        double * z );
    HRESULT SetEnd (
        IDispatch * ConnectObject,
        double x,
        double y,
        double z,
        VARIANT_BOOL keyPoint );
    HRESULT GetEnd (
        IDispatch * * ConnectObject,
        double * x,
        double * y,
        double * z,
        VARIANT_BOOL * keyPoint );
    HRESULT SetEndPoint (
        double x,
        double y,
        double z );
    HRESULT GetEndPoint (
        double * x,
        double * y,
        double * z );
    IDispatchPtr GetPlane ( );
    enum DimCenterlineTypeConstants GetCenterLineType ( );
    void PutCenterLineType (
        enum DimCenterlineTypeConstants _arg1 );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    HRESULT ConnectObjects (
        IDispatch * * ConnectObject1,
        IDispatch * * ConnectObject2 );
    void PutLayer (
        _bstr_t _arg1 );
    _bstr_t GetLayer ( );
    HRESULT SetCenter (
        IDispatch * CenterObj,
        double x,
        double y,
        double z,
        VARIANT_BOOL keyPoint );
    HRESULT GetCenter (
        IDispatch * * CenterObj,
        double * x,
        double * y,
        double * z,
        VARIANT_BOOL * keyPoint );
    HRESULT SetCenterPoint (
        double x,
        double y,
        double z );
    HRESULT GetCenterPoint (
        double * x,
        double * y,
        double * z );
    void PutPMIName (
        _bstr_t _arg1 );
    _bstr_t GetPMIName ( );
    void PutHidePMI (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHidePMI ( );
    IDispatchPtr GetPMIPlane ( );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
};

struct __declspec(uuid("7d915051-f4a6-11ce-a941-080036373002"))
_ICenterLinesAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetAnnotInitData))
    AnnotInitDataPtr AnnotInitData;
    __declspec(property(get=GetPlane,put=PutPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetStyle,put=PutStyle))
    DimensionStylePtr Style;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    CenterLinePtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    void PutPlane (
        IDispatch * Plane );
    IDispatchPtr GetPlane ( );
    void PutStyle (
        struct DimensionStyle * Style );
    DimensionStylePtr GetStyle ( );
    CenterLinePtr Add (
        double x1,
        double y1,
        double z1,
        double x2,
        double y2,
        double z2 );
    CenterLinePtr AddByStart (
        IDispatch * StartObject,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint,
        double x2,
        double y2,
        double z2 );
    CenterLinePtr AddByEnd (
        IDispatch * EndObject,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint1,
        double x2,
        double y2,
        double z2 );
    CenterLinePtr AddByStartEnd (
        IDispatch * StartObject,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint1,
        IDispatch * EndObject,
        double x2,
        double y2,
        double z2,
        VARIANT_BOOL keyPoint2 );
    HRESULT ClearPlane ( );
    HRESULT ClearStyle ( );
    CenterLinePtr AddBetweenTwoParallelLines (
        IDispatch * StartObject,
        IDispatch * EndObject );
    CenterLinePtr AddCenterArcBy3Points (
        IDispatch * StartObject,
        double Start_X,
        double Start_Y,
        double Start_Z,
        VARIANT_BOOL Start_Keypoint,
        IDispatch * EndObject,
        double End_X,
        double End_Y,
        double End_Z,
        VARIANT_BOOL End_Keypoint,
        IDispatch * CenterObject,
        double Center_X,
        double Center_Y,
        double Center_Z,
        VARIANT_BOOL Center_Keypoint );
    CenterLinePtr AddCenterArcBy2Arcs (
        IDispatch * StartObject,
        IDispatch * EndObject );
    CenterLinePtr AddBetweenTwoLines (
        IDispatch * StartObject,
        IDispatch * EndObject );
    AnnotInitDataPtr GetAnnotInitData ( );
    CenterLinePtr AddCenterLine (
        struct AnnotInitData * AnnotInitData,
        long bIsBy2Lines );
    CenterLinePtr AddCenterArc (
        struct AnnotInitData * AnnotInitData );
    CenterLinePtr AddCenterAxis (
        struct AnnotInitData * AnnotInitData );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * App ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct CenterLine * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Enum ) = 0;
      virtual HRESULT __stdcall put_Plane (
        /*[in]*/ IDispatch * Plane ) = 0;
      virtual HRESULT __stdcall get_Plane (
        /*[out,retval]*/ IDispatch * * Plane ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ struct DimensionStyle * Style ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct DimensionStyle * * Style ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double z1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ double z2,
        /*[out,retval]*/ struct CenterLine * * Obj ) = 0;
      virtual HRESULT __stdcall raw_AddByStart (
        /*[in]*/ IDispatch * StartObject,
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double z1,
        /*[in]*/ VARIANT_BOOL keyPoint,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ double z2,
        /*[out,retval]*/ struct CenterLine * * Obj ) = 0;
      virtual HRESULT __stdcall raw_AddByEnd (
        /*[in]*/ IDispatch * EndObject,
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double z1,
        /*[in]*/ VARIANT_BOOL keyPoint1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ double z2,
        /*[out,retval]*/ struct CenterLine * * Obj ) = 0;
      virtual HRESULT __stdcall raw_AddByStartEnd (
        /*[in]*/ IDispatch * StartObject,
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double z1,
        /*[in]*/ VARIANT_BOOL keyPoint1,
        /*[in]*/ IDispatch * EndObject,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ double z2,
        /*[in]*/ VARIANT_BOOL keyPoint2,
        /*[out,retval]*/ struct CenterLine * * Obj ) = 0;
      virtual HRESULT __stdcall raw_ClearPlane ( ) = 0;
      virtual HRESULT __stdcall raw_ClearStyle ( ) = 0;
      virtual HRESULT __stdcall raw_AddBetweenTwoParallelLines (
        /*[in]*/ IDispatch * StartObject,
        /*[in]*/ IDispatch * EndObject,
        /*[out,retval]*/ struct CenterLine * * Obj ) = 0;
      virtual HRESULT __stdcall raw_AddCenterArcBy3Points (
        /*[in]*/ IDispatch * StartObject,
        /*[in]*/ double Start_X,
        /*[in]*/ double Start_Y,
        /*[in]*/ double Start_Z,
        /*[in]*/ VARIANT_BOOL Start_Keypoint,
        /*[in]*/ IDispatch * EndObject,
        /*[in]*/ double End_X,
        /*[in]*/ double End_Y,
        /*[in]*/ double End_Z,
        /*[in]*/ VARIANT_BOOL End_Keypoint,
        /*[in]*/ IDispatch * CenterObject,
        /*[in]*/ double Center_X,
        /*[in]*/ double Center_Y,
        /*[in]*/ double Center_Z,
        /*[in]*/ VARIANT_BOOL Center_Keypoint,
        /*[out,retval]*/ struct CenterLine * * Obj ) = 0;
      virtual HRESULT __stdcall raw_AddCenterArcBy2Arcs (
        /*[in]*/ IDispatch * StartObject,
        /*[in]*/ IDispatch * EndObject,
        /*[out,retval]*/ struct CenterLine * * Obj ) = 0;
      virtual HRESULT __stdcall raw_AddBetweenTwoLines (
        /*[in]*/ IDispatch * StartObject,
        /*[in]*/ IDispatch * EndObject,
        /*[out,retval]*/ struct CenterLine * * Obj ) = 0;
      virtual HRESULT __stdcall get_AnnotInitData (
        /*[out,retval]*/ struct AnnotInitData * * AnnotInitData ) = 0;
      virtual HRESULT __stdcall raw_AddCenterLine (
        /*[in]*/ struct AnnotInitData * AnnotInitData,
        /*[in]*/ long bIsBy2Lines,
        /*[out,retval]*/ struct CenterLine * * Obj ) = 0;
      virtual HRESULT __stdcall raw_AddCenterArc (
        /*[in]*/ struct AnnotInitData * AnnotInitData,
        /*[out,retval]*/ struct CenterLine * * Obj ) = 0;
      virtual HRESULT __stdcall raw_AddCenterAxis (
        /*[in]*/ struct AnnotInitData * AnnotInitData,
        /*[out,retval]*/ struct CenterLine * * Obj ) = 0;
};

enum DimCenterlineTypeConstants
{
    igDimCenterlineNormal = 1,
    igDimCenterlineMidway = 2,
    igDimCenterArcByCenterPoint = 3,
    igDimCenterArcBy2Arcs = 4
};

struct __declspec(uuid("18b97b40-f44b-11ce-a93f-080036373002"))
_ICenterLineAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetStyle))
    DimStylePtr Style;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[][];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetCenterLineType,put=PutCenterLineType))
    enum DimCenterlineTypeConstants CenterLineType;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetPMIName,put=PutPMIName))
    _bstr_t PMIName;
    __declspec(property(get=GetHidePMI,put=PutHidePMI))
    VARIANT_BOOL HidePMI;
    __declspec(property(get=GetPMIPlane))
    IDispatchPtr PMIPlane;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    DimStylePtr GetStyle ( );
    HRESULT SetStart (
        IDispatch * StartObj,
        double x,
        double y,
        double z,
        VARIANT_BOOL keyPoint );
    HRESULT GetStart (
        IDispatch * * StartObj,
        double * x,
        double * y,
        double * z,
        VARIANT_BOOL * keyPoint );
    HRESULT SetStartPoint (
        double x,
        double y,
        double z );
    HRESULT GetStartPoint (
        double * x,
        double * y,
        double * z );
    HRESULT SetEnd (
        IDispatch * ConnectObject,
        double x,
        double y,
        double z,
        VARIANT_BOOL keyPoint );
    HRESULT GetEnd (
        IDispatch * * ConnectObject,
        double * x,
        double * y,
        double * z,
        VARIANT_BOOL * keyPoint );
    HRESULT SetEndPoint (
        double x,
        double y,
        double z );
    HRESULT GetEndPoint (
        double * x,
        double * y,
        double * z );
    IDispatchPtr GetPlane ( );
    enum DimCenterlineTypeConstants GetCenterLineType ( );
    void PutCenterLineType (
        enum DimCenterlineTypeConstants Size );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse,
        long Lcid = 0 );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    HRESULT ConnectObjects (
        IDispatch * * ConnectObject1,
        IDispatch * * ConnectObject2 );
    void PutLayer (
        _bstr_t Layer );
    _bstr_t GetLayer ( );
    HRESULT SetCenter (
        IDispatch * CenterObj,
        double x,
        double y,
        double z,
        VARIANT_BOOL keyPoint );
    HRESULT GetCenter (
        IDispatch * * CenterObj,
        double * x,
        double * y,
        double * z,
        VARIANT_BOOL * keyPoint );
    HRESULT SetCenterPoint (
        double x,
        double y,
        double z );
    HRESULT GetCenterPoint (
        double * x,
        double * y,
        double * z );
    void PutPMIName (
        _bstr_t Text );
    _bstr_t GetPMIName ( );
    void PutHidePMI (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetHidePMI ( );
    IDispatchPtr GetPMIPlane ( );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct DimStyle * * Style ) = 0;
      virtual HRESULT __stdcall raw_SetStart (
        /*[in]*/ IDispatch * StartObj,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z,
        /*[in]*/ VARIANT_BOOL keyPoint ) = 0;
      virtual HRESULT __stdcall raw_GetStart (
        /*[out]*/ IDispatch * * StartObj,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ VARIANT_BOOL * keyPoint ) = 0;
      virtual HRESULT __stdcall raw_SetStartPoint (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_GetStartPoint (
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z ) = 0;
      virtual HRESULT __stdcall raw_SetEnd (
        /*[in]*/ IDispatch * ConnectObject,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z,
        /*[in]*/ VARIANT_BOOL keyPoint ) = 0;
      virtual HRESULT __stdcall raw_GetEnd (
        /*[out]*/ IDispatch * * ConnectObject,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ VARIANT_BOOL * keyPoint ) = 0;
      virtual HRESULT __stdcall raw_SetEndPoint (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_GetEndPoint (
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z ) = 0;
      virtual HRESULT __stdcall get_Plane (
        /*[out,retval]*/ IDispatch * * Plane ) = 0;
      virtual HRESULT __stdcall get_CenterLineType (
        /*[out,retval]*/ enum DimCenterlineTypeConstants * Size ) = 0;
      virtual HRESULT __stdcall put_CenterLineType (
        /*[in]*/ enum DimCenterlineTypeConstants Size ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[in]*/ VARIANT Recurse,
        /*[in,lcid]*/ long Lcid,
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * Type ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * ZOrder ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[in]*/ VARIANT Recurse,
        /*[out,retval]*/ BSTR * Key ) = 0;
      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ IDispatch * * Document ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ double XFrom,
        /*[in]*/ double YFrom,
        /*[in]*/ double XTo,
        /*[in]*/ double YTo ) = 0;
      virtual HRESULT __stdcall raw_Scale (
        /*[in]*/ double Factor ) = 0;
      virtual HRESULT __stdcall raw_Rotate (
        /*[in]*/ double Angle,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[out]*/ double * XMinimum,
        /*[out]*/ double * YMinimum,
        /*[out]*/ double * XMaximum,
        /*[out]*/ double * YMaximum ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ VARIANT XDistance,
        /*[in]*/ VARIANT YDistance,
        /*[out,retval]*/ IDispatch * * NewObject ) = 0;
      virtual HRESULT __stdcall raw_Mirror (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ VARIANT BooleanCopyFlag,
        /*[out,retval]*/ IDispatch * * Object ) = 0;
      virtual HRESULT __stdcall raw_BringToFront ( ) = 0;
      virtual HRESULT __stdcall raw_BringForward ( ) = 0;
      virtual HRESULT __stdcall raw_SendToBack ( ) = 0;
      virtual HRESULT __stdcall raw_SendBackward ( ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall get_KeyPointCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_GetKeyPoint (
        /*[in]*/ long Index,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ enum TGFramework::KeyPointType * KeypointType,
        /*[out]*/ long * HandleType ) = 0;
      virtual HRESULT __stdcall raw_SetKeyPoint (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_ConnectObjects (
        /*[out]*/ IDispatch * * ConnectObject1,
        /*[out]*/ IDispatch * * ConnectObject2 ) = 0;
      virtual HRESULT __stdcall put_Layer (
        /*[in]*/ BSTR Layer ) = 0;
      virtual HRESULT __stdcall get_Layer (
        /*[out,retval]*/ BSTR * Layer ) = 0;
      virtual HRESULT __stdcall raw_SetCenter (
        /*[in]*/ IDispatch * CenterObj,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z,
        /*[in]*/ VARIANT_BOOL keyPoint ) = 0;
      virtual HRESULT __stdcall raw_GetCenter (
        /*[out]*/ IDispatch * * CenterObj,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ VARIANT_BOOL * keyPoint ) = 0;
      virtual HRESULT __stdcall raw_SetCenterPoint (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_GetCenterPoint (
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z ) = 0;
      virtual HRESULT __stdcall put_PMIName (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_PMIName (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_HidePMI (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_HidePMI (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_PMIPlane (
        /*[out,retval]*/ IDispatch * * pPMIPlane ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
};

struct __declspec(uuid("011c6470-c7ce-11ce-bb17-080036776c02"))
DatumTargets : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetPlane,put=PutPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetStyle,put=PutStyle))
    DimensionStylePtr Style;
    __declspec(property(get=GetAnnotInitData))
    AnnotInitDataPtr AnnotInitData;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    DatumTargetPtr Item (
        const _variant_t & Index );
    void PutPlane (
        IDispatch * _arg1 );
    IDispatchPtr GetPlane ( );
    void PutStyle (
        struct DimensionStyle * _arg1 );
    DimensionStylePtr GetStyle ( );
    DatumTargetPtr Add (
        double x1,
        double y1,
        double z1 );
    DatumTargetPtr AddByTerminator (
        IDispatch * TerminatorObject,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint1 );
    HRESULT ClearPlane ( );
    HRESULT ClearStyle ( );
    AnnotInitDataPtr GetAnnotInitData ( );
    DatumTargetPtr AddDatumTarget (
        struct AnnotInitData * AnnotInitData );
};

struct __declspec(uuid("ceb9ae00-c716-11ce-bb15-080036776c02"))
DatumTarget : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetStyle))
    DimStylePtr Style;
    __declspec(property(get=GetDatumReference,put=PutDatumReference))
    _bstr_t DatumReference;
    __declspec(property(get=GetDatumAreaSize,put=PutDatumAreaSize))
    double DatumAreaSize;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetTextScale,put=PutTextScale))
    double TextScale;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetPMIPlane))
    IDispatchPtr PMIPlane;
    __declspec(property(get=GetPMITrackDistance,put=PutPMITrackDistance))
    double PMITrackDistance;
    __declspec(property(get=GetHidePMI,put=PutHidePMI))
    VARIANT_BOOL HidePMI;
    __declspec(property(get=GetDatumTargetType,put=PutDatumTargetType))
    enum DimDatumTargetTypeConstants DatumTargetType;
    __declspec(property(get=GetPMIName,put=PutPMIName))
    _bstr_t PMIName;
    __declspec(property(get=GetIsTerminatorAttachedToEntity))
    VARIANT_BOOL IsTerminatorAttachedToEntity;
    __declspec(property(get=GetDatumNumber,put=PutDatumNumber))
    _bstr_t DatumNumber;
    __declspec(property(get=GetLeaderType,put=PutLeaderType))
    enum DimDatumTargetLeaderTypeConstants LeaderType;
    __declspec(property(get=GetDatumAreaSizeDisplay,put=PutDatumAreaSizeDisplay))
    VARIANT_BOOL DatumAreaSizeDisplay;
    __declspec(property(get=GetVertexCount))
    long VertexCount;
    __declspec(property(get=GetBreakLineDistance,put=PutBreakLineDistance))
    double BreakLineDistance;
    __declspec(property(get=GetBreakLine,put=PutBreakLine))
    VARIANT_BOOL BreakLine;
    __declspec(property(get=GetBreakLineDirection,put=PutBreakLineDirection))
    VARIANT_BOOL BreakLineDirection;
    __declspec(property(get=GetLeader,put=PutLeader))
    VARIANT_BOOL Leader;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[];

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    DimStylePtr GetStyle ( );
    _bstr_t GetDatumReference ( );
    void PutDatumReference (
        _bstr_t _arg1 );
    double GetDatumAreaSize ( );
    void PutDatumAreaSize (
        double _arg1 );
    HRESULT SetTerminator (
        IDispatch * TerminatorObj,
        double x,
        double y,
        double z,
        VARIANT_BOOL keyPoint );
    HRESULT GetTerminator (
        IDispatch * * TerminatorObj,
        double * x,
        double * y,
        double * z,
        VARIANT_BOOL * keyPoint );
    HRESULT SetFreeSpacePoint (
        double x,
        double y,
        double z );
    HRESULT GetFreeSpacePoint (
        double * x,
        double * y,
        double * z );
    enum DimDatumTargetLeaderTypeConstants GetLeaderType ( );
    void PutLeaderType (
        enum DimDatumTargetLeaderTypeConstants _arg1 );
    VARIANT_BOOL GetDatumAreaSizeDisplay ( );
    void PutDatumAreaSizeDisplay (
        VARIANT_BOOL _arg1 );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    double GetBreakLineDistance ( );
    void PutBreakLineDistance (
        double _arg1 );
    VARIANT_BOOL GetBreakLine ( );
    void PutBreakLine (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetBreakLineDirection ( );
    void PutBreakLineDirection (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetLeader ( );
    void PutLeader (
        VARIANT_BOOL _arg1 );
    long GetVertexCount ( );
    HRESULT GetVertices (
        long * VertexCount,
        SAFEARRAY * * Vertices );
    HRESULT SetVertices (
        long VertexCount,
        SAFEARRAY * * Vertices );
    HRESULT GetVertex (
        long Index,
        double * x,
        double * y,
        double * z );
    HRESULT SetVertex (
        long Index,
        double x,
        double y,
        double z );
    HRESULT InsertVertex (
        long Index,
        double x,
        double y,
        double z );
    HRESULT AddVertex (
        double x,
        double y,
        double z );
    HRESULT RemoveVertex (
        long Index );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    double GetTextScale ( );
    void PutTextScale (
        double _arg1 );
    void PutLayer (
        _bstr_t _arg1 );
    _bstr_t GetLayer ( );
    IDispatchPtr GetPMIPlane ( );
    double GetPMITrackDistance ( );
    void PutPMITrackDistance (
        double _arg1 );
    void PutHidePMI (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHidePMI ( );
    DisplayDataPtr GetDisplayData ( );
    enum DimDatumTargetTypeConstants GetDatumTargetType ( );
    void PutDatumTargetType (
        enum DimDatumTargetTypeConstants _arg1 );
    HRESULT PromoteToCurrentVersion ( );
    HRESULT SetAlignmentShape (
        IDispatch * AlignmentShapeObj,
        double x,
        double y );
    HRESULT GetAlignmentShape (
        IDispatch * * AlignmentShapeObj,
        double * x,
        double * y );
    void PutPMIName (
        _bstr_t _arg1 );
    _bstr_t GetPMIName ( );
    HRESULT TransformToModelCoordinates (
        double InputX,
        double InputY,
        double InputZ,
        double * ModelX,
        double * ModelY,
        double * ModelZ );
    VARIANT_BOOL GetIsTerminatorAttachedToEntity ( );
    HRESULT GetReferencedGeometry (
        SAFEARRAY * * ReferencedGeometries );
    HRESULT SetReferencedGeometry (
        SAFEARRAY * * ReferencedGeometries );
    _bstr_t GetDatumNumber ( );
    void PutDatumNumber (
        _bstr_t _arg1 );
};

struct __declspec(uuid("ceb9ae05-c716-11ce-bb15-080036776c02"))
_IDatumTargetsAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetPlane,put=PutPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetStyle,put=PutStyle))
    DimensionStylePtr Style;
    __declspec(property(get=GetAnnotInitData))
    AnnotInitDataPtr AnnotInitData;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    DatumTargetPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    void PutPlane (
        IDispatch * Plane );
    IDispatchPtr GetPlane ( );
    void PutStyle (
        struct DimensionStyle * Style );
    DimensionStylePtr GetStyle ( );
    DatumTargetPtr Add (
        double x1,
        double y1,
        double z1 );
    DatumTargetPtr AddByTerminator (
        IDispatch * TerminatorObject,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint1 );
    HRESULT ClearPlane ( );
    HRESULT ClearStyle ( );
    AnnotInitDataPtr GetAnnotInitData ( );
    DatumTargetPtr AddDatumTarget (
        struct AnnotInitData * AnnotInitData );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * App ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct DatumTarget * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Enum ) = 0;
      virtual HRESULT __stdcall put_Plane (
        /*[in]*/ IDispatch * Plane ) = 0;
      virtual HRESULT __stdcall get_Plane (
        /*[out,retval]*/ IDispatch * * Plane ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ struct DimensionStyle * Style ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct DimensionStyle * * Style ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double z1,
        /*[out,retval]*/ struct DatumTarget * * Obj ) = 0;
      virtual HRESULT __stdcall raw_AddByTerminator (
        /*[in]*/ IDispatch * TerminatorObject,
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double z1,
        /*[in]*/ VARIANT_BOOL keyPoint1,
        /*[out,retval]*/ struct DatumTarget * * Obj ) = 0;
      virtual HRESULT __stdcall raw_ClearPlane ( ) = 0;
      virtual HRESULT __stdcall raw_ClearStyle ( ) = 0;
      virtual HRESULT __stdcall get_AnnotInitData (
        /*[out,retval]*/ struct AnnotInitData * * AnnotInitData ) = 0;
      virtual HRESULT __stdcall raw_AddDatumTarget (
        /*[in]*/ struct AnnotInitData * AnnotInitData,
        /*[out,retval]*/ struct DatumTarget * * Obj ) = 0;
};

enum DimDatumTargetLeaderTypeConstants
{
    igDimDatumTargetNearSide = 1,
    igDimDatumTargetFarSide = 2
};

enum DimDatumTargetTypeConstants
{
    igDimDatumTargetRegular = 1,
    igDimDatumTargetMovable = 2
};

struct __declspec(uuid("c033ded0-c716-11ce-bb15-080036776c02"))
_IDatumTargetAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetStyle))
    DimStylePtr Style;
    __declspec(property(get=GetDatumReference,put=PutDatumReference))
    _bstr_t DatumReference;
    __declspec(property(get=GetDatumAreaSize,put=PutDatumAreaSize))
    double DatumAreaSize;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetTextScale,put=PutTextScale))
    double TextScale;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetPMIPlane))
    IDispatchPtr PMIPlane;
    __declspec(property(get=GetPMITrackDistance,put=PutPMITrackDistance))
    double PMITrackDistance;
    __declspec(property(get=GetHidePMI,put=PutHidePMI))
    VARIANT_BOOL HidePMI;
    __declspec(property(get=GetDatumTargetType,put=PutDatumTargetType))
    enum DimDatumTargetTypeConstants DatumTargetType;
    __declspec(property(get=GetPMIName,put=PutPMIName))
    _bstr_t PMIName;
    __declspec(property(get=GetIsTerminatorAttachedToEntity))
    VARIANT_BOOL IsTerminatorAttachedToEntity;
    __declspec(property(get=GetDatumNumber,put=PutDatumNumber))
    _bstr_t DatumNumber;
    __declspec(property(get=GetLeaderType,put=PutLeaderType))
    enum DimDatumTargetLeaderTypeConstants LeaderType;
    __declspec(property(get=GetDatumAreaSizeDisplay,put=PutDatumAreaSizeDisplay))
    VARIANT_BOOL DatumAreaSizeDisplay;
    __declspec(property(get=GetVertexCount))
    long VertexCount;
    __declspec(property(get=GetBreakLineDistance,put=PutBreakLineDistance))
    double BreakLineDistance;
    __declspec(property(get=GetBreakLine,put=PutBreakLine))
    VARIANT_BOOL BreakLine;
    __declspec(property(get=GetBreakLineDirection,put=PutBreakLineDirection))
    VARIANT_BOOL BreakLineDirection;
    __declspec(property(get=GetLeader,put=PutLeader))
    VARIANT_BOOL Leader;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[][];

    //
    // Wrapper methods for error-handling
    //

    DimStylePtr GetStyle ( );
    _bstr_t GetDatumReference ( );
    void PutDatumReference (
        _bstr_t Text );
    double GetDatumAreaSize ( );
    void PutDatumAreaSize (
        double Text );
    HRESULT SetTerminator (
        IDispatch * TerminatorObj,
        double x,
        double y,
        double z,
        VARIANT_BOOL keyPoint );
    HRESULT GetTerminator (
        IDispatch * * TerminatorObj,
        double * x,
        double * y,
        double * z,
        VARIANT_BOOL * keyPoint );
    HRESULT SetFreeSpacePoint (
        double x,
        double y,
        double z );
    HRESULT GetFreeSpacePoint (
        double * x,
        double * y,
        double * z );
    enum DimDatumTargetLeaderTypeConstants GetLeaderType ( );
    void PutLeaderType (
        enum DimDatumTargetLeaderTypeConstants Size );
    VARIANT_BOOL GetDatumAreaSizeDisplay ( );
    void PutDatumAreaSizeDisplay (
        VARIANT_BOOL Flag );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse,
        long Lcid = 0 );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    double GetBreakLineDistance ( );
    void PutBreakLineDistance (
        double Distance );
    VARIANT_BOOL GetBreakLine ( );
    void PutBreakLine (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetBreakLineDirection ( );
    void PutBreakLineDirection (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetLeader ( );
    void PutLeader (
        VARIANT_BOOL Flag );
    long GetVertexCount ( );
    HRESULT GetVertices (
        long * VertexCount,
        SAFEARRAY * * Vertices );
    HRESULT SetVertices (
        long VertexCount,
        SAFEARRAY * * Vertices );
    HRESULT GetVertex (
        long Index,
        double * x,
        double * y,
        double * z );
    HRESULT SetVertex (
        long Index,
        double x,
        double y,
        double z );
    HRESULT InsertVertex (
        long Index,
        double x,
        double y,
        double z );
    HRESULT AddVertex (
        double x,
        double y,
        double z );
    HRESULT RemoveVertex (
        long Index );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    double GetTextScale ( );
    void PutTextScale (
        double pdAngle );
    void PutLayer (
        _bstr_t Layer );
    _bstr_t GetLayer ( );
    IDispatchPtr GetPMIPlane ( );
    double GetPMITrackDistance ( );
    void PutPMITrackDistance (
        double pdPMITrackDistance );
    void PutHidePMI (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetHidePMI ( );
    DisplayDataPtr GetDisplayData ( );
    enum DimDatumTargetTypeConstants GetDatumTargetType ( );
    void PutDatumTargetType (
        enum DimDatumTargetTypeConstants Type );
    HRESULT PromoteToCurrentVersion ( );
    HRESULT SetAlignmentShape (
        IDispatch * AlignmentShapeObj,
        double x,
        double y );
    HRESULT GetAlignmentShape (
        IDispatch * * AlignmentShapeObj,
        double * x,
        double * y );
    void PutPMIName (
        _bstr_t Text );
    _bstr_t GetPMIName ( );
    HRESULT TransformToModelCoordinates (
        double InputX,
        double InputY,
        double InputZ,
        double * ModelX,
        double * ModelY,
        double * ModelZ );
    VARIANT_BOOL GetIsTerminatorAttachedToEntity ( );
    HRESULT GetReferencedGeometry (
        SAFEARRAY * * ReferencedGeometries );
    HRESULT SetReferencedGeometry (
        SAFEARRAY * * ReferencedGeometries );
    _bstr_t GetDatumNumber ( );
    void PutDatumNumber (
        _bstr_t Text );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct DimStyle * * Style ) = 0;
      virtual HRESULT __stdcall get_DatumReference (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_DatumReference (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_DatumAreaSize (
        /*[out,retval]*/ double * Text ) = 0;
      virtual HRESULT __stdcall put_DatumAreaSize (
        /*[in]*/ double Text ) = 0;
      virtual HRESULT __stdcall raw_SetTerminator (
        /*[in]*/ IDispatch * TerminatorObj,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z,
        /*[in]*/ VARIANT_BOOL keyPoint ) = 0;
      virtual HRESULT __stdcall raw_GetTerminator (
        /*[out]*/ IDispatch * * TerminatorObj,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ VARIANT_BOOL * keyPoint ) = 0;
      virtual HRESULT __stdcall raw_SetFreeSpacePoint (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_GetFreeSpacePoint (
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z ) = 0;
      virtual HRESULT __stdcall get_LeaderType (
        /*[out,retval]*/ enum DimDatumTargetLeaderTypeConstants * Size ) = 0;
      virtual HRESULT __stdcall put_LeaderType (
        /*[in]*/ enum DimDatumTargetLeaderTypeConstants Size ) = 0;
      virtual HRESULT __stdcall get_DatumAreaSizeDisplay (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_DatumAreaSizeDisplay (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[in]*/ VARIANT Recurse,
        /*[in,lcid]*/ long Lcid,
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * Type ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * ZOrder ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[in]*/ VARIANT Recurse,
        /*[out,retval]*/ BSTR * Key ) = 0;
      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ IDispatch * * Document ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ double XFrom,
        /*[in]*/ double YFrom,
        /*[in]*/ double XTo,
        /*[in]*/ double YTo ) = 0;
      virtual HRESULT __stdcall raw_Scale (
        /*[in]*/ double Factor ) = 0;
      virtual HRESULT __stdcall raw_Rotate (
        /*[in]*/ double Angle,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[out]*/ double * XMinimum,
        /*[out]*/ double * YMinimum,
        /*[out]*/ double * XMaximum,
        /*[out]*/ double * YMaximum ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ VARIANT XDistance,
        /*[in]*/ VARIANT YDistance,
        /*[out,retval]*/ IDispatch * * NewObject ) = 0;
      virtual HRESULT __stdcall raw_Mirror (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ VARIANT BooleanCopyFlag,
        /*[out,retval]*/ IDispatch * * Object ) = 0;
      virtual HRESULT __stdcall raw_BringToFront ( ) = 0;
      virtual HRESULT __stdcall raw_BringForward ( ) = 0;
      virtual HRESULT __stdcall raw_SendToBack ( ) = 0;
      virtual HRESULT __stdcall raw_SendBackward ( ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall get_BreakLineDistance (
        /*[out,retval]*/ double * Distance ) = 0;
      virtual HRESULT __stdcall put_BreakLineDistance (
        /*[in]*/ double Distance ) = 0;
      virtual HRESULT __stdcall get_BreakLine (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_BreakLine (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_BreakLineDirection (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_BreakLineDirection (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_Leader (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_Leader (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_VertexCount (
        /*[out,retval]*/ long * VertexCount ) = 0;
      virtual HRESULT __stdcall raw_GetVertices (
        /*[out]*/ long * VertexCount,
        /*[out]*/ SAFEARRAY * * Vertices ) = 0;
      virtual HRESULT __stdcall raw_SetVertices (
        /*[in]*/ long VertexCount,
        /*[in]*/ SAFEARRAY * * Vertices ) = 0;
      virtual HRESULT __stdcall raw_GetVertex (
        /*[in]*/ long Index,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[in]*/ double * z ) = 0;
      virtual HRESULT __stdcall raw_SetVertex (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_InsertVertex (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_AddVertex (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_RemoveVertex (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall get_KeyPointCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_GetKeyPoint (
        /*[in]*/ long Index,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ enum TGFramework::KeyPointType * KeypointType,
        /*[out]*/ long * HandleType ) = 0;
      virtual HRESULT __stdcall raw_SetKeyPoint (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
      virtual HRESULT __stdcall get_TextScale (
        /*[out,retval]*/ double * pdAngle ) = 0;
      virtual HRESULT __stdcall put_TextScale (
        /*[in]*/ double pdAngle ) = 0;
      virtual HRESULT __stdcall put_Layer (
        /*[in]*/ BSTR Layer ) = 0;
      virtual HRESULT __stdcall get_Layer (
        /*[out,retval]*/ BSTR * Layer ) = 0;
      virtual HRESULT __stdcall get_PMIPlane (
        /*[out,retval]*/ IDispatch * * pPMIPlane ) = 0;
      virtual HRESULT __stdcall get_PMITrackDistance (
        /*[out,retval]*/ double * pdPMITrackDistance ) = 0;
      virtual HRESULT __stdcall put_PMITrackDistance (
        /*[in]*/ double pdPMITrackDistance ) = 0;
      virtual HRESULT __stdcall put_HidePMI (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_HidePMI (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_GetDisplayData (
        /*[out,retval]*/ struct DisplayData * * pDisplayData ) = 0;
      virtual HRESULT __stdcall get_DatumTargetType (
        /*[out,retval]*/ enum DimDatumTargetTypeConstants * Type ) = 0;
      virtual HRESULT __stdcall put_DatumTargetType (
        /*[in]*/ enum DimDatumTargetTypeConstants Type ) = 0;
      virtual HRESULT __stdcall raw_PromoteToCurrentVersion ( ) = 0;
      virtual HRESULT __stdcall raw_SetAlignmentShape (
        /*[in]*/ IDispatch * AlignmentShapeObj,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_GetAlignmentShape (
        /*[out]*/ IDispatch * * AlignmentShapeObj,
        /*[out]*/ double * x,
        /*[out]*/ double * y ) = 0;
      virtual HRESULT __stdcall put_PMIName (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_PMIName (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall raw_TransformToModelCoordinates (
        /*[in]*/ double InputX,
        /*[in]*/ double InputY,
        /*[in]*/ double InputZ,
        /*[out]*/ double * ModelX,
        /*[out]*/ double * ModelY,
        /*[out]*/ double * ModelZ ) = 0;
      virtual HRESULT __stdcall get_IsTerminatorAttachedToEntity (
        /*[out,retval]*/ VARIANT_BOOL * bIsAttached ) = 0;
      virtual HRESULT __stdcall raw_GetReferencedGeometry (
        /*[out]*/ SAFEARRAY * * ReferencedGeometries ) = 0;
      virtual HRESULT __stdcall raw_SetReferencedGeometry (
        /*[in]*/ SAFEARRAY * * ReferencedGeometries ) = 0;
      virtual HRESULT __stdcall get_DatumNumber (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_DatumNumber (
        /*[in]*/ BSTR Text ) = 0;
};

struct __declspec(uuid("6464b554-63e0-4508-9592-8050936502b6"))
PinSymbols : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetPlane,put=PutPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetStyle,put=PutStyle))
    DimensionStylePtr Style;
    __declspec(property(get=GetAnnotInitData))
    AnnotInitDataPtr AnnotInitData;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    PinSymbolPtr Item (
        const _variant_t & Index );
    void PutPlane (
        IDispatch * _arg1 );
    IDispatchPtr GetPlane ( );
    void PutStyle (
        struct DimensionStyle * _arg1 );
    DimensionStylePtr GetStyle ( );
    PinSymbolPtr Add (
        double x1,
        double y1,
        double z1 );
    PinSymbolPtr AddByTerminator (
        IDispatch * TerminatorObject,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint1 );
    HRESULT ClearPlane ( );
    HRESULT ClearStyle ( );
    AnnotInitDataPtr GetAnnotInitData ( );
    PinSymbolPtr AddPinSymbol (
        struct AnnotInitData * AnnotInitData );
};

struct __declspec(uuid("34377e14-91ee-41cd-a0d3-168b1038da0c"))
PinSymbol : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVertexCount))
    long VertexCount;
    __declspec(property(get=GetHidePMI,put=PutHidePMI))
    VARIANT_BOOL HidePMI;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetBreakLineDistance,put=PutBreakLineDistance))
    double BreakLineDistance;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetPinSymbolTempRadius,put=PutPinSymbolTempRadius))
    double PinSymbolTempRadius;
    __declspec(property(get=GetPinSymbolTempStyle,put=PutPinSymbolTempStyle))
    VARIANT_BOOL PinSymbolTempStyle;
    __declspec(property(get=GetName))
    _bstr_t Name[];
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetBreakLine,put=PutBreakLine))
    VARIANT_BOOL BreakLine;
    __declspec(property(get=GetPMIName,put=PutPMIName))
    _bstr_t PMIName;
    __declspec(property(get=GetTextScale,put=PutTextScale))
    double TextScale;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetStyle))
    DimStylePtr Style;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPMIPlane))
    IDispatchPtr PMIPlane;
    __declspec(property(get=GetBreakLineDirection,put=PutBreakLineDirection))
    VARIANT_BOOL BreakLineDirection;
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetDatumReference,put=PutDatumReference))
    _bstr_t DatumReference;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetPMITrackDistance,put=PutPMITrackDistance))
    double PMITrackDistance;
    __declspec(property(get=GetLeader,put=PutLeader))
    VARIANT_BOOL Leader;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIsTerminatorAttachedToEntity))
    VARIANT_BOOL IsTerminatorAttachedToEntity;
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    DimStylePtr GetStyle ( );
    _bstr_t GetDatumReference ( );
    void PutDatumReference (
        _bstr_t _arg1 );
    HRESULT SetTerminator (
        IDispatch * TerminatorObj,
        double x,
        double y,
        double z,
        VARIANT_BOOL keyPoint );
    HRESULT GetTerminator (
        IDispatch * * TerminatorObj,
        double * x,
        double * y,
        double * z,
        VARIANT_BOOL * keyPoint );
    HRESULT SetFreeSpacePoint (
        double x,
        double y,
        double z );
    HRESULT GetFreeSpacePoint (
        double * x,
        double * y,
        double * z );
    void PutPinSymbolTempRadius (
        double _arg1 );
    double GetPinSymbolTempRadius ( );
    void PutPinSymbolTempStyle (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetPinSymbolTempStyle ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    double GetBreakLineDistance ( );
    void PutBreakLineDistance (
        double _arg1 );
    VARIANT_BOOL GetBreakLine ( );
    void PutBreakLine (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetBreakLineDirection ( );
    void PutBreakLineDirection (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetLeader ( );
    void PutLeader (
        VARIANT_BOOL _arg1 );
    long GetVertexCount ( );
    HRESULT GetVertices (
        long * VertexCount,
        SAFEARRAY * * Vertices );
    HRESULT SetVertices (
        long VertexCount,
        SAFEARRAY * * Vertices );
    HRESULT GetVertex (
        long Index,
        double * x,
        double * y,
        double * z );
    HRESULT SetVertex (
        long Index,
        double x,
        double y,
        double z );
    HRESULT InsertVertex (
        long Index,
        double x,
        double y,
        double z );
    HRESULT AddVertex (
        double x,
        double y,
        double z );
    HRESULT RemoveVertex (
        long Index );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    double GetTextScale ( );
    void PutTextScale (
        double _arg1 );
    void PutLayer (
        _bstr_t _arg1 );
    _bstr_t GetLayer ( );
    IDispatchPtr GetPMIPlane ( );
    double GetPMITrackDistance ( );
    void PutPMITrackDistance (
        double _arg1 );
    void PutHidePMI (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHidePMI ( );
    DisplayDataPtr GetDisplayData ( );
    HRESULT PromoteToCurrentVersion ( );
    HRESULT SetAlignmentShape (
        IDispatch * AlignmentShapeObj,
        double x,
        double y );
    HRESULT GetAlignmentShape (
        IDispatch * * AlignmentShapeObj,
        double * x,
        double * y );
    void PutPMIName (
        _bstr_t _arg1 );
    _bstr_t GetPMIName ( );
    HRESULT TransformToModelCoordinates (
        double InputX,
        double InputY,
        double InputZ,
        double * ModelX,
        double * ModelY,
        double * ModelZ );
    VARIANT_BOOL GetIsTerminatorAttachedToEntity ( );
    HRESULT GetReferencedGeometry (
        SAFEARRAY * * ReferencedGeometries );
    HRESULT SetReferencedGeometry (
        SAFEARRAY * * ReferencedGeometries );
};

struct __declspec(uuid("57b05cf9-ec6c-45ba-bcfa-0b89ab322490"))
_IPinSymbolsAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetPlane,put=PutPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetStyle,put=PutStyle))
    DimensionStylePtr Style;
    __declspec(property(get=GetAnnotInitData))
    AnnotInitDataPtr AnnotInitData;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    PinSymbolPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    void PutPlane (
        IDispatch * Plane );
    IDispatchPtr GetPlane ( );
    void PutStyle (
        struct DimensionStyle * Style );
    DimensionStylePtr GetStyle ( );
    PinSymbolPtr Add (
        double x1,
        double y1,
        double z1 );
    PinSymbolPtr AddByTerminator (
        IDispatch * TerminatorObject,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint1 );
    HRESULT ClearPlane ( );
    HRESULT ClearStyle ( );
    AnnotInitDataPtr GetAnnotInitData ( );
    PinSymbolPtr AddPinSymbol (
        struct AnnotInitData * AnnotInitData );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * App ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct PinSymbol * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Enum ) = 0;
      virtual HRESULT __stdcall put_Plane (
        /*[in]*/ IDispatch * Plane ) = 0;
      virtual HRESULT __stdcall get_Plane (
        /*[out,retval]*/ IDispatch * * Plane ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ struct DimensionStyle * Style ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct DimensionStyle * * Style ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double z1,
        /*[out,retval]*/ struct PinSymbol * * Obj ) = 0;
      virtual HRESULT __stdcall raw_AddByTerminator (
        /*[in]*/ IDispatch * TerminatorObject,
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double z1,
        /*[in]*/ VARIANT_BOOL keyPoint1,
        /*[out,retval]*/ struct PinSymbol * * Obj ) = 0;
      virtual HRESULT __stdcall raw_ClearPlane ( ) = 0;
      virtual HRESULT __stdcall raw_ClearStyle ( ) = 0;
      virtual HRESULT __stdcall get_AnnotInitData (
        /*[out,retval]*/ struct AnnotInitData * * AnnotInitData ) = 0;
      virtual HRESULT __stdcall raw_AddPinSymbol (
        /*[in]*/ struct AnnotInitData * AnnotInitData,
        /*[out,retval]*/ struct PinSymbol * * Obj ) = 0;
};

struct __declspec(uuid("81468c62-04a9-4aa2-89ed-ad5befe43152"))
_IPinSymbolAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetVertexCount))
    long VertexCount;
    __declspec(property(get=GetHidePMI,put=PutHidePMI))
    VARIANT_BOOL HidePMI;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetBreakLineDistance,put=PutBreakLineDistance))
    double BreakLineDistance;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetPinSymbolTempRadius,put=PutPinSymbolTempRadius))
    double PinSymbolTempRadius;
    __declspec(property(get=GetPinSymbolTempStyle,put=PutPinSymbolTempStyle))
    VARIANT_BOOL PinSymbolTempStyle;
    __declspec(property(get=GetName))
    _bstr_t Name[][];
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetBreakLine,put=PutBreakLine))
    VARIANT_BOOL BreakLine;
    __declspec(property(get=GetPMIName,put=PutPMIName))
    _bstr_t PMIName;
    __declspec(property(get=GetTextScale,put=PutTextScale))
    double TextScale;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetStyle))
    DimStylePtr Style;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPMIPlane))
    IDispatchPtr PMIPlane;
    __declspec(property(get=GetBreakLineDirection,put=PutBreakLineDirection))
    VARIANT_BOOL BreakLineDirection;
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetDatumReference,put=PutDatumReference))
    _bstr_t DatumReference;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetPMITrackDistance,put=PutPMITrackDistance))
    double PMITrackDistance;
    __declspec(property(get=GetLeader,put=PutLeader))
    VARIANT_BOOL Leader;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIsTerminatorAttachedToEntity))
    VARIANT_BOOL IsTerminatorAttachedToEntity;
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;

    //
    // Wrapper methods for error-handling
    //

    DimStylePtr GetStyle ( );
    _bstr_t GetDatumReference ( );
    void PutDatumReference (
        _bstr_t Text );
    HRESULT SetTerminator (
        IDispatch * TerminatorObj,
        double x,
        double y,
        double z,
        VARIANT_BOOL keyPoint );
    HRESULT GetTerminator (
        IDispatch * * TerminatorObj,
        double * x,
        double * y,
        double * z,
        VARIANT_BOOL * keyPoint );
    HRESULT SetFreeSpacePoint (
        double x,
        double y,
        double z );
    HRESULT GetFreeSpacePoint (
        double * x,
        double * y,
        double * z );
    void PutPinSymbolTempRadius (
        double Radius );
    double GetPinSymbolTempRadius ( );
    void PutPinSymbolTempStyle (
        VARIANT_BOOL Style );
    VARIANT_BOOL GetPinSymbolTempStyle ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse,
        long Lcid = 0 );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    double GetBreakLineDistance ( );
    void PutBreakLineDistance (
        double Distance );
    VARIANT_BOOL GetBreakLine ( );
    void PutBreakLine (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetBreakLineDirection ( );
    void PutBreakLineDirection (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetLeader ( );
    void PutLeader (
        VARIANT_BOOL Flag );
    long GetVertexCount ( );
    HRESULT GetVertices (
        long * VertexCount,
        SAFEARRAY * * Vertices );
    HRESULT SetVertices (
        long VertexCount,
        SAFEARRAY * * Vertices );
    HRESULT GetVertex (
        long Index,
        double * x,
        double * y,
        double * z );
    HRESULT SetVertex (
        long Index,
        double x,
        double y,
        double z );
    HRESULT InsertVertex (
        long Index,
        double x,
        double y,
        double z );
    HRESULT AddVertex (
        double x,
        double y,
        double z );
    HRESULT RemoveVertex (
        long Index );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    double GetTextScale ( );
    void PutTextScale (
        double pdAngle );
    void PutLayer (
        _bstr_t Layer );
    _bstr_t GetLayer ( );
    IDispatchPtr GetPMIPlane ( );
    double GetPMITrackDistance ( );
    void PutPMITrackDistance (
        double pdPMITrackDistance );
    void PutHidePMI (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetHidePMI ( );
    DisplayDataPtr GetDisplayData ( );
    HRESULT PromoteToCurrentVersion ( );
    HRESULT SetAlignmentShape (
        IDispatch * AlignmentShapeObj,
        double x,
        double y );
    HRESULT GetAlignmentShape (
        IDispatch * * AlignmentShapeObj,
        double * x,
        double * y );
    void PutPMIName (
        _bstr_t Text );
    _bstr_t GetPMIName ( );
    HRESULT TransformToModelCoordinates (
        double InputX,
        double InputY,
        double InputZ,
        double * ModelX,
        double * ModelY,
        double * ModelZ );
    VARIANT_BOOL GetIsTerminatorAttachedToEntity ( );
    HRESULT GetReferencedGeometry (
        SAFEARRAY * * ReferencedGeometries );
    HRESULT SetReferencedGeometry (
        SAFEARRAY * * ReferencedGeometries );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct DimStyle * * Style ) = 0;
      virtual HRESULT __stdcall get_DatumReference (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_DatumReference (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall raw_SetTerminator (
        /*[in]*/ IDispatch * TerminatorObj,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z,
        /*[in]*/ VARIANT_BOOL keyPoint ) = 0;
      virtual HRESULT __stdcall raw_GetTerminator (
        /*[out]*/ IDispatch * * TerminatorObj,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ VARIANT_BOOL * keyPoint ) = 0;
      virtual HRESULT __stdcall raw_SetFreeSpacePoint (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_GetFreeSpacePoint (
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z ) = 0;
      virtual HRESULT __stdcall put_PinSymbolTempRadius (
        /*[in]*/ double Radius ) = 0;
      virtual HRESULT __stdcall get_PinSymbolTempRadius (
        /*[out,retval]*/ double * Radius ) = 0;
      virtual HRESULT __stdcall put_PinSymbolTempStyle (
        /*[in]*/ VARIANT_BOOL Style ) = 0;
      virtual HRESULT __stdcall get_PinSymbolTempStyle (
        /*[out,retval]*/ VARIANT_BOOL * Style ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[in]*/ VARIANT Recurse,
        /*[in,lcid]*/ long Lcid,
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * Type ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * ZOrder ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[in]*/ VARIANT Recurse,
        /*[out,retval]*/ BSTR * Key ) = 0;
      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ IDispatch * * Document ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ double XFrom,
        /*[in]*/ double YFrom,
        /*[in]*/ double XTo,
        /*[in]*/ double YTo ) = 0;
      virtual HRESULT __stdcall raw_Scale (
        /*[in]*/ double Factor ) = 0;
      virtual HRESULT __stdcall raw_Rotate (
        /*[in]*/ double Angle,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[out]*/ double * XMinimum,
        /*[out]*/ double * YMinimum,
        /*[out]*/ double * XMaximum,
        /*[out]*/ double * YMaximum ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ VARIANT XDistance,
        /*[in]*/ VARIANT YDistance,
        /*[out,retval]*/ IDispatch * * NewObject ) = 0;
      virtual HRESULT __stdcall raw_Mirror (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ VARIANT BooleanCopyFlag,
        /*[out,retval]*/ IDispatch * * Object ) = 0;
      virtual HRESULT __stdcall raw_BringToFront ( ) = 0;
      virtual HRESULT __stdcall raw_BringForward ( ) = 0;
      virtual HRESULT __stdcall raw_SendToBack ( ) = 0;
      virtual HRESULT __stdcall raw_SendBackward ( ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall get_BreakLineDistance (
        /*[out,retval]*/ double * Distance ) = 0;
      virtual HRESULT __stdcall put_BreakLineDistance (
        /*[in]*/ double Distance ) = 0;
      virtual HRESULT __stdcall get_BreakLine (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_BreakLine (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_BreakLineDirection (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_BreakLineDirection (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_Leader (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_Leader (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_VertexCount (
        /*[out,retval]*/ long * VertexCount ) = 0;
      virtual HRESULT __stdcall raw_GetVertices (
        /*[out]*/ long * VertexCount,
        /*[out]*/ SAFEARRAY * * Vertices ) = 0;
      virtual HRESULT __stdcall raw_SetVertices (
        /*[in]*/ long VertexCount,
        /*[in]*/ SAFEARRAY * * Vertices ) = 0;
      virtual HRESULT __stdcall raw_GetVertex (
        /*[in]*/ long Index,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[in]*/ double * z ) = 0;
      virtual HRESULT __stdcall raw_SetVertex (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_InsertVertex (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_AddVertex (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_RemoveVertex (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall get_KeyPointCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_GetKeyPoint (
        /*[in]*/ long Index,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ enum TGFramework::KeyPointType * KeypointType,
        /*[out]*/ long * HandleType ) = 0;
      virtual HRESULT __stdcall raw_SetKeyPoint (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
      virtual HRESULT __stdcall get_TextScale (
        /*[out,retval]*/ double * pdAngle ) = 0;
      virtual HRESULT __stdcall put_TextScale (
        /*[in]*/ double pdAngle ) = 0;
      virtual HRESULT __stdcall put_Layer (
        /*[in]*/ BSTR Layer ) = 0;
      virtual HRESULT __stdcall get_Layer (
        /*[out,retval]*/ BSTR * Layer ) = 0;
      virtual HRESULT __stdcall get_PMIPlane (
        /*[out,retval]*/ IDispatch * * pPMIPlane ) = 0;
      virtual HRESULT __stdcall get_PMITrackDistance (
        /*[out,retval]*/ double * pdPMITrackDistance ) = 0;
      virtual HRESULT __stdcall put_PMITrackDistance (
        /*[in]*/ double pdPMITrackDistance ) = 0;
      virtual HRESULT __stdcall put_HidePMI (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_HidePMI (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_GetDisplayData (
        /*[out,retval]*/ struct DisplayData * * pDisplayData ) = 0;
      virtual HRESULT __stdcall raw_PromoteToCurrentVersion ( ) = 0;
      virtual HRESULT __stdcall raw_SetAlignmentShape (
        /*[in]*/ IDispatch * AlignmentShapeObj,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_GetAlignmentShape (
        /*[out]*/ IDispatch * * AlignmentShapeObj,
        /*[out]*/ double * x,
        /*[out]*/ double * y ) = 0;
      virtual HRESULT __stdcall put_PMIName (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_PMIName (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall raw_TransformToModelCoordinates (
        /*[in]*/ double InputX,
        /*[in]*/ double InputY,
        /*[in]*/ double InputZ,
        /*[out]*/ double * ModelX,
        /*[out]*/ double * ModelY,
        /*[out]*/ double * ModelZ ) = 0;
      virtual HRESULT __stdcall get_IsTerminatorAttachedToEntity (
        /*[out,retval]*/ VARIANT_BOOL * bIsAttached ) = 0;
      virtual HRESULT __stdcall raw_GetReferencedGeometry (
        /*[out]*/ SAFEARRAY * * ReferencedGeometries ) = 0;
      virtual HRESULT __stdcall raw_SetReferencedGeometry (
        /*[in]*/ SAFEARRAY * * ReferencedGeometries ) = 0;
};

struct __declspec(uuid("8d2252b7-4c0e-11d0-9b73-080036a8d302"))
DatumPoints : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAnnotInitData))
    AnnotInitDataPtr AnnotInitData;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetPlane,put=PutPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetStyle,put=PutStyle))
    DimensionStylePtr Style;
    __declspec(property(get=GetAxis,put=PutAxis))
    IDispatchPtr Axis;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    DatumPointPtr Item (
        const _variant_t & Index );
    void PutPlane (
        IDispatch * _arg1 );
    IDispatchPtr GetPlane ( );
    void PutStyle (
        struct DimensionStyle * _arg1 );
    DimensionStylePtr GetStyle ( );
    void PutAxis (
        IDispatch * _arg1 );
    IDispatchPtr GetAxis ( );
    DatumPointPtr Add (
        double x1,
        double y1,
        double z1 );
    DatumPointPtr AddByElement (
        IDispatch * TerminatorObject,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint1 );
    HRESULT ClearPlane ( );
    HRESULT ClearStyle ( );
    AnnotInitDataPtr GetAnnotInitData ( );
    DatumPointPtr AddDatumPoint (
        struct AnnotInitData * AnnotInitData );
};

struct __declspec(uuid("36bd1697-dbfe-11d0-8422-080036c7ce02"))
DatumPoint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHidePMI,put=PutHidePMI))
    VARIANT_BOOL HidePMI;
    __declspec(property(get=GetStyle))
    DimStylePtr Style;
    __declspec(property(get=GetPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetAreaSize,put=PutAreaSize))
    double AreaSize;
    __declspec(property(get=GetPointType,put=PutPointType))
    enum DimDatumPointTypeConstants PointType;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetTextScale,put=PutTextScale))
    double TextScale;
    __declspec(property(get=GetPMIName,put=PutPMIName))
    _bstr_t PMIName;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetPMIPlane))
    IDispatchPtr PMIPlane;
    __declspec(property(get=GetPMITrackDistance,put=PutPMITrackDistance))
    double PMITrackDistance;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    DimStylePtr GetStyle ( );
    IDispatchPtr GetPlane ( );
    double GetAreaSize ( );
    void PutAreaSize (
        double _arg1 );
    enum DimDatumPointTypeConstants GetPointType ( );
    void PutPointType (
        enum DimDatumPointTypeConstants _arg1 );
    HRESULT SetElement (
        IDispatch * CenterObj,
        double x,
        double y,
        double z,
        VARIANT_BOOL keyPoint );
    HRESULT GetElement (
        IDispatch * * CenterObj,
        double * x,
        double * y,
        double * z,
        VARIANT_BOOL * keyPoint );
    HRESULT SetCenter (
        double x,
        double y,
        double z );
    HRESULT GetCenter (
        double * x,
        double * y,
        double * z );
    HRESULT SetFreeSpacePoint (
        double x,
        double y,
        double z );
    HRESULT GetFreeSpacePoint (
        double * x,
        double * y,
        double * z );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    double GetTextScale ( );
    void PutTextScale (
        double _arg1 );
    void PutLayer (
        _bstr_t _arg1 );
    _bstr_t GetLayer ( );
    IDispatchPtr GetPMIPlane ( );
    double GetPMITrackDistance ( );
    void PutPMITrackDistance (
        double _arg1 );
    void PutHidePMI (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHidePMI ( );
    DisplayDataPtr GetDisplayData ( );
    HRESULT SetRectangularDatumPointWidthAndHeight (
        double dWidth,
        double dHeight );
    HRESULT GetRectangularDatumPointWidthAndHeight (
        double * pdWidth,
        double * pdHeight );
    HRESULT PromoteToCurrentVersion ( );
    void PutPMIName (
        _bstr_t _arg1 );
    _bstr_t GetPMIName ( );
    HRESULT TransformToModelCoordinates (
        double InputX,
        double InputY,
        double InputZ,
        double * ModelX,
        double * ModelY,
        double * ModelZ );
    HRESULT GetReferencedGeometry (
        SAFEARRAY * * ReferencedGeometries );
    HRESULT SetReferencedGeometry (
        SAFEARRAY * * ReferencedGeometries );
};

struct __declspec(uuid("36bd16a0-dbfe-11d0-8422-080036c7ce02"))
_IDatumPointsAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetAnnotInitData))
    AnnotInitDataPtr AnnotInitData;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetPlane,put=PutPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetStyle,put=PutStyle))
    DimensionStylePtr Style;
    __declspec(property(get=GetAxis,put=PutAxis))
    IDispatchPtr Axis;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    DatumPointPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    void PutPlane (
        IDispatch * Plane );
    IDispatchPtr GetPlane ( );
    void PutStyle (
        struct DimensionStyle * Style );
    DimensionStylePtr GetStyle ( );
    void PutAxis (
        IDispatch * Axis );
    IDispatchPtr GetAxis ( );
    DatumPointPtr Add (
        double x1,
        double y1,
        double z1 );
    DatumPointPtr AddByElement (
        IDispatch * TerminatorObject,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint1 );
    HRESULT ClearPlane ( );
    HRESULT ClearStyle ( );
    AnnotInitDataPtr GetAnnotInitData ( );
    DatumPointPtr AddDatumPoint (
        struct AnnotInitData * AnnotInitData );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * App ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct DatumPoint * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Enum ) = 0;
      virtual HRESULT __stdcall put_Plane (
        /*[in]*/ IDispatch * Plane ) = 0;
      virtual HRESULT __stdcall get_Plane (
        /*[out,retval]*/ IDispatch * * Plane ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ struct DimensionStyle * Style ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct DimensionStyle * * Style ) = 0;
      virtual HRESULT __stdcall put_Axis (
        /*[in]*/ IDispatch * Axis ) = 0;
      virtual HRESULT __stdcall get_Axis (
        /*[out,retval]*/ IDispatch * * Axis ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double z1,
        /*[out,retval]*/ struct DatumPoint * * Obj ) = 0;
      virtual HRESULT __stdcall raw_AddByElement (
        /*[in]*/ IDispatch * TerminatorObject,
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double z1,
        /*[in]*/ VARIANT_BOOL keyPoint1,
        /*[out,retval]*/ struct DatumPoint * * Obj ) = 0;
      virtual HRESULT __stdcall raw_ClearPlane ( ) = 0;
      virtual HRESULT __stdcall raw_ClearStyle ( ) = 0;
      virtual HRESULT __stdcall get_AnnotInitData (
        /*[out,retval]*/ struct AnnotInitData * * AnnotInitData ) = 0;
      virtual HRESULT __stdcall raw_AddDatumPoint (
        /*[in]*/ struct AnnotInitData * AnnotInitData,
        /*[out,retval]*/ struct DatumPoint * * Obj ) = 0;
};

enum DimDatumPointTypeConstants
{
    igDimDatumPointCross = 1,
    igDimDatumPointCircle = 2,
    igDimDatumPointRectangle = 3
};

struct __declspec(uuid("36bd1693-dbfe-11d0-8422-080036c7ce02"))
_IDatumPointAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetHidePMI,put=PutHidePMI))
    VARIANT_BOOL HidePMI;
    __declspec(property(get=GetStyle))
    DimStylePtr Style;
    __declspec(property(get=GetPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetAreaSize,put=PutAreaSize))
    double AreaSize;
    __declspec(property(get=GetPointType,put=PutPointType))
    enum DimDatumPointTypeConstants PointType;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[][];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetTextScale,put=PutTextScale))
    double TextScale;
    __declspec(property(get=GetPMIName,put=PutPMIName))
    _bstr_t PMIName;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetPMIPlane))
    IDispatchPtr PMIPlane;
    __declspec(property(get=GetPMITrackDistance,put=PutPMITrackDistance))
    double PMITrackDistance;

    //
    // Wrapper methods for error-handling
    //

    DimStylePtr GetStyle ( );
    IDispatchPtr GetPlane ( );
    double GetAreaSize ( );
    void PutAreaSize (
        double Size );
    enum DimDatumPointTypeConstants GetPointType ( );
    void PutPointType (
        enum DimDatumPointTypeConstants Size );
    HRESULT SetElement (
        IDispatch * CenterObj,
        double x,
        double y,
        double z,
        VARIANT_BOOL keyPoint );
    HRESULT GetElement (
        IDispatch * * CenterObj,
        double * x,
        double * y,
        double * z,
        VARIANT_BOOL * keyPoint );
    HRESULT SetCenter (
        double x,
        double y,
        double z );
    HRESULT GetCenter (
        double * x,
        double * y,
        double * z );
    HRESULT SetFreeSpacePoint (
        double x,
        double y,
        double z );
    HRESULT GetFreeSpacePoint (
        double * x,
        double * y,
        double * z );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse,
        long Lcid = 0 );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    double GetTextScale ( );
    void PutTextScale (
        double pdAngle );
    void PutLayer (
        _bstr_t Layer );
    _bstr_t GetLayer ( );
    IDispatchPtr GetPMIPlane ( );
    double GetPMITrackDistance ( );
    void PutPMITrackDistance (
        double pdPMITrackDistance );
    void PutHidePMI (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetHidePMI ( );
    DisplayDataPtr GetDisplayData ( );
    HRESULT SetRectangularDatumPointWidthAndHeight (
        double dWidth,
        double dHeight );
    HRESULT GetRectangularDatumPointWidthAndHeight (
        double * pdWidth,
        double * pdHeight );
    HRESULT PromoteToCurrentVersion ( );
    void PutPMIName (
        _bstr_t Text );
    _bstr_t GetPMIName ( );
    HRESULT TransformToModelCoordinates (
        double InputX,
        double InputY,
        double InputZ,
        double * ModelX,
        double * ModelY,
        double * ModelZ );
    HRESULT GetReferencedGeometry (
        SAFEARRAY * * ReferencedGeometries );
    HRESULT SetReferencedGeometry (
        SAFEARRAY * * ReferencedGeometries );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct DimStyle * * Style ) = 0;
      virtual HRESULT __stdcall get_Plane (
        /*[out,retval]*/ IDispatch * * Plane ) = 0;
      virtual HRESULT __stdcall get_AreaSize (
        /*[out,retval]*/ double * Size ) = 0;
      virtual HRESULT __stdcall put_AreaSize (
        /*[in]*/ double Size ) = 0;
      virtual HRESULT __stdcall get_PointType (
        /*[out,retval]*/ enum DimDatumPointTypeConstants * Size ) = 0;
      virtual HRESULT __stdcall put_PointType (
        /*[in]*/ enum DimDatumPointTypeConstants Size ) = 0;
      virtual HRESULT __stdcall raw_SetElement (
        /*[in]*/ IDispatch * CenterObj,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z,
        /*[in]*/ VARIANT_BOOL keyPoint ) = 0;
      virtual HRESULT __stdcall raw_GetElement (
        /*[out]*/ IDispatch * * CenterObj,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ VARIANT_BOOL * keyPoint ) = 0;
      virtual HRESULT __stdcall raw_SetCenter (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_GetCenter (
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z ) = 0;
      virtual HRESULT __stdcall raw_SetFreeSpacePoint (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_GetFreeSpacePoint (
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[in]*/ VARIANT Recurse,
        /*[in,lcid]*/ long Lcid,
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * Type ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * ZOrder ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[in]*/ VARIANT Recurse,
        /*[out,retval]*/ BSTR * Key ) = 0;
      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ IDispatch * * Document ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ double XFrom,
        /*[in]*/ double YFrom,
        /*[in]*/ double XTo,
        /*[in]*/ double YTo ) = 0;
      virtual HRESULT __stdcall raw_Scale (
        /*[in]*/ double Factor ) = 0;
      virtual HRESULT __stdcall raw_Rotate (
        /*[in]*/ double Angle,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[out]*/ double * XMinimum,
        /*[out]*/ double * YMinimum,
        /*[out]*/ double * XMaximum,
        /*[out]*/ double * YMaximum ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ VARIANT XDistance,
        /*[in]*/ VARIANT YDistance,
        /*[out,retval]*/ IDispatch * * NewObject ) = 0;
      virtual HRESULT __stdcall raw_Mirror (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ VARIANT BooleanCopyFlag,
        /*[out,retval]*/ IDispatch * * Object ) = 0;
      virtual HRESULT __stdcall raw_BringToFront ( ) = 0;
      virtual HRESULT __stdcall raw_BringForward ( ) = 0;
      virtual HRESULT __stdcall raw_SendToBack ( ) = 0;
      virtual HRESULT __stdcall raw_SendBackward ( ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall get_KeyPointCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_GetKeyPoint (
        /*[in]*/ long Index,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ enum TGFramework::KeyPointType * KeypointType,
        /*[out]*/ long * HandleType ) = 0;
      virtual HRESULT __stdcall raw_SetKeyPoint (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
      virtual HRESULT __stdcall get_TextScale (
        /*[out,retval]*/ double * pdAngle ) = 0;
      virtual HRESULT __stdcall put_TextScale (
        /*[in]*/ double pdAngle ) = 0;
      virtual HRESULT __stdcall put_Layer (
        /*[in]*/ BSTR Layer ) = 0;
      virtual HRESULT __stdcall get_Layer (
        /*[out,retval]*/ BSTR * Layer ) = 0;
      virtual HRESULT __stdcall get_PMIPlane (
        /*[out,retval]*/ IDispatch * * pPMIPlane ) = 0;
      virtual HRESULT __stdcall get_PMITrackDistance (
        /*[out,retval]*/ double * pdPMITrackDistance ) = 0;
      virtual HRESULT __stdcall put_PMITrackDistance (
        /*[in]*/ double pdPMITrackDistance ) = 0;
      virtual HRESULT __stdcall put_HidePMI (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_HidePMI (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_GetDisplayData (
        /*[out,retval]*/ struct DisplayData * * pDisplayData ) = 0;
      virtual HRESULT __stdcall raw_SetRectangularDatumPointWidthAndHeight (
        /*[in]*/ double dWidth,
        /*[in]*/ double dHeight ) = 0;
      virtual HRESULT __stdcall raw_GetRectangularDatumPointWidthAndHeight (
        /*[out]*/ double * pdWidth,
        /*[out]*/ double * pdHeight ) = 0;
      virtual HRESULT __stdcall raw_PromoteToCurrentVersion ( ) = 0;
      virtual HRESULT __stdcall put_PMIName (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_PMIName (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall raw_TransformToModelCoordinates (
        /*[in]*/ double InputX,
        /*[in]*/ double InputY,
        /*[in]*/ double InputZ,
        /*[out]*/ double * ModelX,
        /*[out]*/ double * ModelY,
        /*[out]*/ double * ModelZ ) = 0;
      virtual HRESULT __stdcall raw_GetReferencedGeometry (
        /*[out]*/ SAFEARRAY * * ReferencedGeometries ) = 0;
      virtual HRESULT __stdcall raw_SetReferencedGeometry (
        /*[in]*/ SAFEARRAY * * ReferencedGeometries ) = 0;
};

struct __declspec(uuid("e7b545e0-0533-444d-a941-45b763aafdda"))
CornerAnnotations : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetPlane,put=PutPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetStyle,put=PutStyle))
    DimensionStylePtr Style;
    __declspec(property(get=GetAnnotInitData))
    AnnotInitDataPtr AnnotInitData;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    CornerAnnotationPtr Item (
        const _variant_t & Index );
    void PutPlane (
        IDispatch * _arg1 );
    IDispatchPtr GetPlane ( );
    void PutStyle (
        struct DimensionStyle * _arg1 );
    DimensionStylePtr GetStyle ( );
    CornerAnnotationPtr Add (
        double x1,
        double y1,
        double z1 );
    CornerAnnotationPtr AddByTerminator (
        IDispatch * TerminatorObject,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint1 );
    HRESULT ClearPlane ( );
    HRESULT ClearStyle ( );
    AnnotInitDataPtr GetAnnotInitData ( );
    CornerAnnotationPtr AddCornerAnnotation (
        struct AnnotInitData * AnnotInitData );
};

struct __declspec(uuid("7fb02fb0-e049-4fed-8702-99b7b5d5bd5f"))
CornerAnnotation : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetStyle))
    DimStylePtr Style;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetTextScale,put=PutTextScale))
    double TextScale;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetPMIPlane))
    IDispatchPtr PMIPlane;
    __declspec(property(get=GetPMITrackDistance,put=PutPMITrackDistance))
    double PMITrackDistance;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetUpperToleranceForClassicSymbol,put=PutUpperToleranceForClassicSymbol))
    _bstr_t UpperToleranceForClassicSymbol;
    __declspec(property(get=GetLowerToleranceForClassicSymbol,put=PutLowerToleranceForClassicSymbol))
    _bstr_t LowerToleranceForClassicSymbol;
    __declspec(property(get=GetUpperToleranceForEnhancedSymbol,put=PutUpperToleranceForEnhancedSymbol))
    _bstr_t UpperToleranceForEnhancedSymbol;
    __declspec(property(get=GetLowerToleranceForEnhancedSymbol,put=PutLowerToleranceForEnhancedSymbol))
    _bstr_t LowerToleranceForEnhancedSymbol;
    __declspec(property(get=GetDirection1Tolerance,put=PutDirection1Tolerance))
    _bstr_t Direction1Tolerance;
    __declspec(property(get=GetDirection2Tolerance,put=PutDirection2Tolerance))
    _bstr_t Direction2Tolerance;
    __declspec(property(get=GetAllAround,put=PutAllAround))
    VARIANT_BOOL AllAround;
    __declspec(property(get=GetNoTextOnSymbol,put=PutNoTextOnSymbol))
    VARIANT_BOOL NoTextOnSymbol;
    __declspec(property(get=GetUseISODIN2000CornerAnnot,put=PutUseISODIN2000CornerAnnot))
    VARIANT_BOOL UseISODIN2000CornerAnnot;
    __declspec(property(get=GetHidePMI,put=PutHidePMI))
    VARIANT_BOOL HidePMI;
    __declspec(property(get=GetPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetPMIName,put=PutPMIName))
    _bstr_t PMIName;
    __declspec(property(get=GetIsTerminatorAttachedToEntity))
    VARIANT_BOOL IsTerminatorAttachedToEntity;
    __declspec(property(get=GetVertexCount))
    long VertexCount;
    __declspec(property(get=GetBreakLineDistance,put=PutBreakLineDistance))
    double BreakLineDistance;
    __declspec(property(get=GetBreakLine,put=PutBreakLine))
    VARIANT_BOOL BreakLine;
    __declspec(property(get=GetBreakLineDirection,put=PutBreakLineDirection))
    VARIANT_BOOL BreakLineDirection;
    __declspec(property(get=GetLeader,put=PutLeader))
    VARIANT_BOOL Leader;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[];

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    DimStylePtr GetStyle ( );
    HRESULT SetTerminator (
        IDispatch * TerminatorObj,
        double x,
        double y,
        double z,
        VARIANT_BOOL keyPoint );
    HRESULT GetTerminator (
        IDispatch * * TerminatorObj,
        double * x,
        double * y,
        double * z,
        VARIANT_BOOL * keyPoint );
    HRESULT SetFreeSpacePoint (
        double x,
        double y,
        double z );
    HRESULT GetFreeSpacePoint (
        double * x,
        double * y,
        double * z );
    IDispatchPtr GetPlane ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    double GetBreakLineDistance ( );
    void PutBreakLineDistance (
        double _arg1 );
    VARIANT_BOOL GetBreakLine ( );
    void PutBreakLine (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetBreakLineDirection ( );
    void PutBreakLineDirection (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetLeader ( );
    void PutLeader (
        VARIANT_BOOL _arg1 );
    long GetVertexCount ( );
    HRESULT GetVertices (
        long * VertexCount,
        SAFEARRAY * * Vertices );
    HRESULT SetVertices (
        long VertexCount,
        SAFEARRAY * * Vertices );
    HRESULT GetVertex (
        long Index,
        double * x,
        double * y,
        double * z );
    HRESULT SetVertex (
        long Index,
        double x,
        double y,
        double z );
    HRESULT InsertVertex (
        long Index,
        double x,
        double y,
        double z );
    HRESULT AddVertex (
        double x,
        double y,
        double z );
    HRESULT RemoveVertex (
        long Index );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    double GetTextScale ( );
    void PutTextScale (
        double _arg1 );
    void PutLayer (
        _bstr_t _arg1 );
    _bstr_t GetLayer ( );
    IDispatchPtr GetPMIPlane ( );
    double GetPMITrackDistance ( );
    void PutPMITrackDistance (
        double _arg1 );
    void PutUpperToleranceForClassicSymbol (
        _bstr_t _arg1 );
    _bstr_t GetUpperToleranceForClassicSymbol ( );
    void PutLowerToleranceForClassicSymbol (
        _bstr_t _arg1 );
    _bstr_t GetLowerToleranceForClassicSymbol ( );
    void PutUpperToleranceForEnhancedSymbol (
        _bstr_t _arg1 );
    _bstr_t GetUpperToleranceForEnhancedSymbol ( );
    void PutLowerToleranceForEnhancedSymbol (
        _bstr_t _arg1 );
    _bstr_t GetLowerToleranceForEnhancedSymbol ( );
    void PutDirection1Tolerance (
        _bstr_t _arg1 );
    _bstr_t GetDirection1Tolerance ( );
    void PutDirection2Tolerance (
        _bstr_t _arg1 );
    _bstr_t GetDirection2Tolerance ( );
    void PutAllAround (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetAllAround ( );
    void PutNoTextOnSymbol (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetNoTextOnSymbol ( );
    void PutUseISODIN2000CornerAnnot (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetUseISODIN2000CornerAnnot ( );
    void PutHidePMI (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHidePMI ( );
    DisplayDataPtr GetDisplayData ( );
    HRESULT PromoteToCurrentVersion ( );
    HRESULT SetAlignmentShape (
        IDispatch * AlignmentShapeObj,
        double x,
        double y );
    HRESULT GetAlignmentShape (
        IDispatch * * AlignmentShapeObj,
        double * x,
        double * y );
    void PutPMIName (
        _bstr_t _arg1 );
    _bstr_t GetPMIName ( );
    HRESULT TransformToModelCoordinates (
        double InputX,
        double InputY,
        double InputZ,
        double * ModelX,
        double * ModelY,
        double * ModelZ );
    VARIANT_BOOL GetIsTerminatorAttachedToEntity ( );
    HRESULT GetReferencedGeometry (
        SAFEARRAY * * ReferencedGeometries );
    HRESULT SetReferencedGeometry (
        SAFEARRAY * * ReferencedGeometries );
};

struct __declspec(uuid("15afb5e7-22cc-11d2-89ad-080036a8d302"))
_ICornerAnnotationsAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetPlane,put=PutPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetStyle,put=PutStyle))
    DimensionStylePtr Style;
    __declspec(property(get=GetAnnotInitData))
    AnnotInitDataPtr AnnotInitData;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    CornerAnnotationPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    void PutPlane (
        IDispatch * Plane );
    IDispatchPtr GetPlane ( );
    void PutStyle (
        struct DimensionStyle * Style );
    DimensionStylePtr GetStyle ( );
    CornerAnnotationPtr Add (
        double x1,
        double y1,
        double z1 );
    CornerAnnotationPtr AddByTerminator (
        IDispatch * TerminatorObject,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint1 );
    HRESULT ClearPlane ( );
    HRESULT ClearStyle ( );
    AnnotInitDataPtr GetAnnotInitData ( );
    CornerAnnotationPtr AddCornerAnnotation (
        struct AnnotInitData * AnnotInitData );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * App ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct CornerAnnotation * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Enum ) = 0;
      virtual HRESULT __stdcall put_Plane (
        /*[in]*/ IDispatch * Plane ) = 0;
      virtual HRESULT __stdcall get_Plane (
        /*[out,retval]*/ IDispatch * * Plane ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ struct DimensionStyle * Style ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct DimensionStyle * * Style ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double z1,
        /*[out,retval]*/ struct CornerAnnotation * * Obj ) = 0;
      virtual HRESULT __stdcall raw_AddByTerminator (
        /*[in]*/ IDispatch * TerminatorObject,
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double z1,
        /*[in]*/ VARIANT_BOOL keyPoint1,
        /*[out,retval]*/ struct CornerAnnotation * * Obj ) = 0;
      virtual HRESULT __stdcall raw_ClearPlane ( ) = 0;
      virtual HRESULT __stdcall raw_ClearStyle ( ) = 0;
      virtual HRESULT __stdcall get_AnnotInitData (
        /*[out,retval]*/ struct AnnotInitData * * AnnotInitData ) = 0;
      virtual HRESULT __stdcall raw_AddCornerAnnotation (
        /*[in]*/ struct AnnotInitData * AnnotInitData,
        /*[out,retval]*/ struct CornerAnnotation * * Obj ) = 0;
};

struct __declspec(uuid("15afb5e5-22cc-11d2-89ad-080036a8d302"))
_ICornerAnnotationAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetStyle))
    DimStylePtr Style;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetTextScale,put=PutTextScale))
    double TextScale;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetPMIPlane))
    IDispatchPtr PMIPlane;
    __declspec(property(get=GetPMITrackDistance,put=PutPMITrackDistance))
    double PMITrackDistance;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetUpperToleranceForClassicSymbol,put=PutUpperToleranceForClassicSymbol))
    _bstr_t UpperToleranceForClassicSymbol;
    __declspec(property(get=GetLowerToleranceForClassicSymbol,put=PutLowerToleranceForClassicSymbol))
    _bstr_t LowerToleranceForClassicSymbol;
    __declspec(property(get=GetUpperToleranceForEnhancedSymbol,put=PutUpperToleranceForEnhancedSymbol))
    _bstr_t UpperToleranceForEnhancedSymbol;
    __declspec(property(get=GetLowerToleranceForEnhancedSymbol,put=PutLowerToleranceForEnhancedSymbol))
    _bstr_t LowerToleranceForEnhancedSymbol;
    __declspec(property(get=GetDirection1Tolerance,put=PutDirection1Tolerance))
    _bstr_t Direction1Tolerance;
    __declspec(property(get=GetDirection2Tolerance,put=PutDirection2Tolerance))
    _bstr_t Direction2Tolerance;
    __declspec(property(get=GetAllAround,put=PutAllAround))
    VARIANT_BOOL AllAround;
    __declspec(property(get=GetNoTextOnSymbol,put=PutNoTextOnSymbol))
    VARIANT_BOOL NoTextOnSymbol;
    __declspec(property(get=GetUseISODIN2000CornerAnnot,put=PutUseISODIN2000CornerAnnot))
    VARIANT_BOOL UseISODIN2000CornerAnnot;
    __declspec(property(get=GetHidePMI,put=PutHidePMI))
    VARIANT_BOOL HidePMI;
    __declspec(property(get=GetPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetPMIName,put=PutPMIName))
    _bstr_t PMIName;
    __declspec(property(get=GetIsTerminatorAttachedToEntity))
    VARIANT_BOOL IsTerminatorAttachedToEntity;
    __declspec(property(get=GetVertexCount))
    long VertexCount;
    __declspec(property(get=GetBreakLineDistance,put=PutBreakLineDistance))
    double BreakLineDistance;
    __declspec(property(get=GetBreakLine,put=PutBreakLine))
    VARIANT_BOOL BreakLine;
    __declspec(property(get=GetBreakLineDirection,put=PutBreakLineDirection))
    VARIANT_BOOL BreakLineDirection;
    __declspec(property(get=GetLeader,put=PutLeader))
    VARIANT_BOOL Leader;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[][];

    //
    // Wrapper methods for error-handling
    //

    DimStylePtr GetStyle ( );
    HRESULT SetTerminator (
        IDispatch * TerminatorObj,
        double x,
        double y,
        double z,
        VARIANT_BOOL keyPoint );
    HRESULT GetTerminator (
        IDispatch * * TerminatorObj,
        double * x,
        double * y,
        double * z,
        VARIANT_BOOL * keyPoint );
    HRESULT SetFreeSpacePoint (
        double x,
        double y,
        double z );
    HRESULT GetFreeSpacePoint (
        double * x,
        double * y,
        double * z );
    IDispatchPtr GetPlane ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse,
        long Lcid = 0 );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    double GetBreakLineDistance ( );
    void PutBreakLineDistance (
        double Distance );
    VARIANT_BOOL GetBreakLine ( );
    void PutBreakLine (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetBreakLineDirection ( );
    void PutBreakLineDirection (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetLeader ( );
    void PutLeader (
        VARIANT_BOOL Flag );
    long GetVertexCount ( );
    HRESULT GetVertices (
        long * VertexCount,
        SAFEARRAY * * Vertices );
    HRESULT SetVertices (
        long VertexCount,
        SAFEARRAY * * Vertices );
    HRESULT GetVertex (
        long Index,
        double * x,
        double * y,
        double * z );
    HRESULT SetVertex (
        long Index,
        double x,
        double y,
        double z );
    HRESULT InsertVertex (
        long Index,
        double x,
        double y,
        double z );
    HRESULT AddVertex (
        double x,
        double y,
        double z );
    HRESULT RemoveVertex (
        long Index );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    double GetTextScale ( );
    void PutTextScale (
        double pdAngle );
    void PutLayer (
        _bstr_t Layer );
    _bstr_t GetLayer ( );
    IDispatchPtr GetPMIPlane ( );
    double GetPMITrackDistance ( );
    void PutPMITrackDistance (
        double pdPMITrackDistance );
    void PutUpperToleranceForClassicSymbol (
        _bstr_t Text );
    _bstr_t GetUpperToleranceForClassicSymbol ( );
    void PutLowerToleranceForClassicSymbol (
        _bstr_t Text );
    _bstr_t GetLowerToleranceForClassicSymbol ( );
    void PutUpperToleranceForEnhancedSymbol (
        _bstr_t Text );
    _bstr_t GetUpperToleranceForEnhancedSymbol ( );
    void PutLowerToleranceForEnhancedSymbol (
        _bstr_t Text );
    _bstr_t GetLowerToleranceForEnhancedSymbol ( );
    void PutDirection1Tolerance (
        _bstr_t Text );
    _bstr_t GetDirection1Tolerance ( );
    void PutDirection2Tolerance (
        _bstr_t Text );
    _bstr_t GetDirection2Tolerance ( );
    void PutAllAround (
        VARIANT_BOOL pbAllAround );
    VARIANT_BOOL GetAllAround ( );
    void PutNoTextOnSymbol (
        VARIANT_BOOL pbNoTextOnSymbol );
    VARIANT_BOOL GetNoTextOnSymbol ( );
    void PutUseISODIN2000CornerAnnot (
        VARIANT_BOOL pbUseISODIN2000CornerAnnot );
    VARIANT_BOOL GetUseISODIN2000CornerAnnot ( );
    void PutHidePMI (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetHidePMI ( );
    DisplayDataPtr GetDisplayData ( );
    HRESULT PromoteToCurrentVersion ( );
    HRESULT SetAlignmentShape (
        IDispatch * AlignmentShapeObj,
        double x,
        double y );
    HRESULT GetAlignmentShape (
        IDispatch * * AlignmentShapeObj,
        double * x,
        double * y );
    void PutPMIName (
        _bstr_t Text );
    _bstr_t GetPMIName ( );
    HRESULT TransformToModelCoordinates (
        double InputX,
        double InputY,
        double InputZ,
        double * ModelX,
        double * ModelY,
        double * ModelZ );
    VARIANT_BOOL GetIsTerminatorAttachedToEntity ( );
    HRESULT GetReferencedGeometry (
        SAFEARRAY * * ReferencedGeometries );
    HRESULT SetReferencedGeometry (
        SAFEARRAY * * ReferencedGeometries );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct DimStyle * * Style ) = 0;
      virtual HRESULT __stdcall raw_SetTerminator (
        /*[in]*/ IDispatch * TerminatorObj,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z,
        /*[in]*/ VARIANT_BOOL keyPoint ) = 0;
      virtual HRESULT __stdcall raw_GetTerminator (
        /*[out]*/ IDispatch * * TerminatorObj,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ VARIANT_BOOL * keyPoint ) = 0;
      virtual HRESULT __stdcall raw_SetFreeSpacePoint (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_GetFreeSpacePoint (
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z ) = 0;
      virtual HRESULT __stdcall get_Plane (
        /*[out,retval]*/ IDispatch * * Plane ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[in]*/ VARIANT Recurse,
        /*[in,lcid]*/ long Lcid,
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * Type ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * ZOrder ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[in]*/ VARIANT Recurse,
        /*[out,retval]*/ BSTR * Key ) = 0;
      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ IDispatch * * Document ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ double XFrom,
        /*[in]*/ double YFrom,
        /*[in]*/ double XTo,
        /*[in]*/ double YTo ) = 0;
      virtual HRESULT __stdcall raw_Scale (
        /*[in]*/ double Factor ) = 0;
      virtual HRESULT __stdcall raw_Rotate (
        /*[in]*/ double Angle,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[out]*/ double * XMinimum,
        /*[out]*/ double * YMinimum,
        /*[out]*/ double * XMaximum,
        /*[out]*/ double * YMaximum ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ VARIANT XDistance,
        /*[in]*/ VARIANT YDistance,
        /*[out,retval]*/ IDispatch * * NewObject ) = 0;
      virtual HRESULT __stdcall raw_Mirror (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ VARIANT BooleanCopyFlag,
        /*[out,retval]*/ IDispatch * * Object ) = 0;
      virtual HRESULT __stdcall raw_BringToFront ( ) = 0;
      virtual HRESULT __stdcall raw_BringForward ( ) = 0;
      virtual HRESULT __stdcall raw_SendToBack ( ) = 0;
      virtual HRESULT __stdcall raw_SendBackward ( ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall get_BreakLineDistance (
        /*[out,retval]*/ double * Distance ) = 0;
      virtual HRESULT __stdcall put_BreakLineDistance (
        /*[in]*/ double Distance ) = 0;
      virtual HRESULT __stdcall get_BreakLine (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_BreakLine (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_BreakLineDirection (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_BreakLineDirection (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_Leader (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_Leader (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_VertexCount (
        /*[out,retval]*/ long * VertexCount ) = 0;
      virtual HRESULT __stdcall raw_GetVertices (
        /*[out]*/ long * VertexCount,
        /*[in,out]*/ SAFEARRAY * * Vertices ) = 0;
      virtual HRESULT __stdcall raw_SetVertices (
        /*[in]*/ long VertexCount,
        /*[in]*/ SAFEARRAY * * Vertices ) = 0;
      virtual HRESULT __stdcall raw_GetVertex (
        /*[in]*/ long Index,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[in]*/ double * z ) = 0;
      virtual HRESULT __stdcall raw_SetVertex (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_InsertVertex (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_AddVertex (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_RemoveVertex (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall get_KeyPointCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_GetKeyPoint (
        /*[in]*/ long Index,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ enum TGFramework::KeyPointType * KeypointType,
        /*[out]*/ long * HandleType ) = 0;
      virtual HRESULT __stdcall raw_SetKeyPoint (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
      virtual HRESULT __stdcall get_TextScale (
        /*[out,retval]*/ double * pdAngle ) = 0;
      virtual HRESULT __stdcall put_TextScale (
        /*[in]*/ double pdAngle ) = 0;
      virtual HRESULT __stdcall put_Layer (
        /*[in]*/ BSTR Layer ) = 0;
      virtual HRESULT __stdcall get_Layer (
        /*[out,retval]*/ BSTR * Layer ) = 0;
      virtual HRESULT __stdcall get_PMIPlane (
        /*[out,retval]*/ IDispatch * * pPMIPlane ) = 0;
      virtual HRESULT __stdcall get_PMITrackDistance (
        /*[out,retval]*/ double * pdPMITrackDistance ) = 0;
      virtual HRESULT __stdcall put_PMITrackDistance (
        /*[in]*/ double pdPMITrackDistance ) = 0;
      virtual HRESULT __stdcall put_UpperToleranceForClassicSymbol (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_UpperToleranceForClassicSymbol (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_LowerToleranceForClassicSymbol (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_LowerToleranceForClassicSymbol (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_UpperToleranceForEnhancedSymbol (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_UpperToleranceForEnhancedSymbol (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_LowerToleranceForEnhancedSymbol (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_LowerToleranceForEnhancedSymbol (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_Direction1Tolerance (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_Direction1Tolerance (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_Direction2Tolerance (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_Direction2Tolerance (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_AllAround (
        /*[in]*/ VARIANT_BOOL pbAllAround ) = 0;
      virtual HRESULT __stdcall get_AllAround (
        /*[out,retval]*/ VARIANT_BOOL * pbAllAround ) = 0;
      virtual HRESULT __stdcall put_NoTextOnSymbol (
        /*[in]*/ VARIANT_BOOL pbNoTextOnSymbol ) = 0;
      virtual HRESULT __stdcall get_NoTextOnSymbol (
        /*[out,retval]*/ VARIANT_BOOL * pbNoTextOnSymbol ) = 0;
      virtual HRESULT __stdcall put_UseISODIN2000CornerAnnot (
        /*[in]*/ VARIANT_BOOL pbUseISODIN2000CornerAnnot ) = 0;
      virtual HRESULT __stdcall get_UseISODIN2000CornerAnnot (
        /*[out,retval]*/ VARIANT_BOOL * pbUseISODIN2000CornerAnnot ) = 0;
      virtual HRESULT __stdcall put_HidePMI (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_HidePMI (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_GetDisplayData (
        /*[out,retval]*/ struct DisplayData * * pDisplayData ) = 0;
      virtual HRESULT __stdcall raw_PromoteToCurrentVersion ( ) = 0;
      virtual HRESULT __stdcall raw_SetAlignmentShape (
        /*[in]*/ IDispatch * AlignmentShapeObj,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_GetAlignmentShape (
        /*[out]*/ IDispatch * * AlignmentShapeObj,
        /*[out]*/ double * x,
        /*[out]*/ double * y ) = 0;
      virtual HRESULT __stdcall put_PMIName (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_PMIName (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall raw_TransformToModelCoordinates (
        /*[in]*/ double InputX,
        /*[in]*/ double InputY,
        /*[in]*/ double InputZ,
        /*[out]*/ double * ModelX,
        /*[out]*/ double * ModelY,
        /*[out]*/ double * ModelZ ) = 0;
      virtual HRESULT __stdcall get_IsTerminatorAttachedToEntity (
        /*[out,retval]*/ VARIANT_BOOL * bIsAttached ) = 0;
      virtual HRESULT __stdcall raw_GetReferencedGeometry (
        /*[out]*/ SAFEARRAY * * ReferencedGeometries ) = 0;
      virtual HRESULT __stdcall raw_SetReferencedGeometry (
        /*[in]*/ SAFEARRAY * * ReferencedGeometries ) = 0;
};

struct __declspec(uuid("9e54f91c-2a33-40f7-b1fa-0287623eb25c"))
BoltHoleCircles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAnnotInitData))
    AnnotInitDataPtr AnnotInitData;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    BoltHoleCirclePtr Item (
        const _variant_t & Index );
    BoltHoleCirclePtr AddBoltHoleCircleBy3Points (
        IDispatch * Object1,
        long Object1_Keypoint_Index,
        IDispatch * Object2,
        long Object2_Keypoint_Index,
        IDispatch * Object3,
        long Object3_Keypoint_Index );
    BoltHoleCirclePtr AddBoltHoleCircleByCenterAndRadius (
        IDispatch * CenterObject,
        long CenterObject_KeyPointIndex,
        IDispatch * RadiusObject,
        long RadiusObject_KeypointIndex );
    BoltHoleCirclePtr AddBoltHoleCircleBy2Points (
        IDispatch * Object1,
        long Object1_KeyPointIndex,
        IDispatch * Object2,
        long Object2_KeypointIndex );
    AnnotInitDataPtr GetAnnotInitData ( );
    BoltHoleCirclePtr AddBoltHoleCircle (
        struct AnnotInitData * AnnotInitData,
        long bIsByCenterRadius );
};

struct __declspec(uuid("de9693b0-7bab-468d-9b0c-b94fb78dd4ae"))
BoltHoleCircle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetStyle))
    DimStylePtr Style;
    __declspec(property(get=GetIsDefinedBy3Points))
    VARIANT_BOOL IsDefinedBy3Points;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetTextScale,put=PutTextScale))
    double TextScale;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetIsAcceptableConnectElementOrMember))
    VARIANT_BOOL IsAcceptableConnectElementOrMember[];
    __declspec(property(get=GetIsMember))
    VARIANT_BOOL IsMember[][];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetIsDefinedBy2Points))
    VARIANT_BOOL IsDefinedBy2Points;
    __declspec(property(get=GetPMIName,put=PutPMIName))
    _bstr_t PMIName;
    __declspec(property(get=GetHidePMI,put=PutHidePMI))
    VARIANT_BOOL HidePMI;
    __declspec(property(get=GetPMIPlane))
    IDispatchPtr PMIPlane;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    double GetTextScale ( );
    void PutTextScale (
        double _arg1 );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        enum HandleType * HandleType );
    DimStylePtr GetStyle ( );
    VARIANT_BOOL GetIsDefinedBy3Points ( );
    HRESULT AddMember (
        IDispatch * Object,
        long Object_Keypoint_Index );
    HRESULT RemoveMember (
        IDispatch * Object,
        const _variant_t & Object_Keypoint_Index = vtMissing );
    HRESULT Circle2d (
        double * BHC_Circle2d_center_x,
        double * BHC_Circle2d_center_y,
        double * BHC_Circle2d_radius );
    VARIANT_BOOL GetIsAcceptableConnectElementOrMember (
        IDispatch * Object );
    HRESULT GetConnectElements3Objects (
        IDispatch * * Object1,
        int * Object1_Keypoint_Index,
        IDispatch * * Object2,
        int * Object2_Keypoint_Index,
        IDispatch * * Object3,
        int * Object3_Keypoint_Index );
    HRESULT GetConnectElementsCenterRadius (
        IDispatch * * CenterObject,
        int * CenterObject_Keypoint_Index,
        IDispatch * * RadiusObject,
        int * RadiusObject_Keypoint_Index );
    VARIANT_BOOL GetIsMember (
        IDispatch * Object,
        const _variant_t & Object_Keypoint_Index = vtMissing );
    IUnknownPtr Item (
        const _variant_t & Index );
    long GetCount ( );
    void PutLayer (
        _bstr_t _arg1 );
    _bstr_t GetLayer ( );
    VARIANT_BOOL GetIsDefinedBy2Points ( );
    HRESULT GetTrimArcEndPoints (
        double * x1,
        double * y1,
        double * z1,
        double * x2,
        double * y2,
        double * z2 );
    HRESULT SetTrimArcEndPoints (
        double x1,
        double y1,
        double z1,
        double x2,
        double y2,
        double z2 );
    void PutPMIName (
        _bstr_t _arg1 );
    _bstr_t GetPMIName ( );
    void PutHidePMI (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHidePMI ( );
    IDispatchPtr GetPMIPlane ( );
};

struct __declspec(uuid("cc40ece8-1cae-4e2c-b2a6-af96492d5976"))
_IBoltHoleCirclesAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAnnotInitData))
    AnnotInitDataPtr AnnotInitData;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    BoltHoleCirclePtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    BoltHoleCirclePtr AddBoltHoleCircleBy3Points (
        IDispatch * Object1,
        long Object1_Keypoint_Index,
        IDispatch * Object2,
        long Object2_Keypoint_Index,
        IDispatch * Object3,
        long Object3_Keypoint_Index );
    BoltHoleCirclePtr AddBoltHoleCircleByCenterAndRadius (
        IDispatch * CenterObject,
        long CenterObject_KeyPointIndex,
        IDispatch * RadiusObject,
        long RadiusObject_KeypointIndex );
    BoltHoleCirclePtr AddBoltHoleCircleBy2Points (
        IDispatch * Object1,
        long Object1_KeyPointIndex,
        IDispatch * Object2,
        long Object2_KeypointIndex );
    AnnotInitDataPtr GetAnnotInitData ( );
    BoltHoleCirclePtr AddBoltHoleCircle (
        struct AnnotInitData * AnnotInitData,
        long bIsByCenterRadius );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * App ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct BoltHoleCircle * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Enum ) = 0;
      virtual HRESULT __stdcall raw_AddBoltHoleCircleBy3Points (
        /*[in]*/ IDispatch * Object1,
        /*[in]*/ long Object1_Keypoint_Index,
        /*[in]*/ IDispatch * Object2,
        /*[in]*/ long Object2_Keypoint_Index,
        /*[in]*/ IDispatch * Object3,
        /*[in]*/ long Object3_Keypoint_Index,
        /*[out,retval]*/ struct BoltHoleCircle * * Obj ) = 0;
      virtual HRESULT __stdcall raw_AddBoltHoleCircleByCenterAndRadius (
        /*[in]*/ IDispatch * CenterObject,
        /*[in]*/ long CenterObject_KeyPointIndex,
        /*[in]*/ IDispatch * RadiusObject,
        /*[in]*/ long RadiusObject_KeypointIndex,
        /*[out,retval]*/ struct BoltHoleCircle * * Obj ) = 0;
      virtual HRESULT __stdcall raw_AddBoltHoleCircleBy2Points (
        /*[in]*/ IDispatch * Object1,
        /*[in]*/ long Object1_KeyPointIndex,
        /*[in]*/ IDispatch * Object2,
        /*[in]*/ long Object2_KeypointIndex,
        /*[out,retval]*/ struct BoltHoleCircle * * Obj ) = 0;
      virtual HRESULT __stdcall get_AnnotInitData (
        /*[out,retval]*/ struct AnnotInitData * * AnnotInitData ) = 0;
      virtual HRESULT __stdcall raw_AddBoltHoleCircle (
        /*[in]*/ struct AnnotInitData * AnnotInitData,
        /*[in]*/ long bIsByCenterRadius,
        /*[out,retval]*/ struct BoltHoleCircle * * Obj ) = 0;
};

enum HandleType
{
    igHandleNone = 0,
    igHandleReadOnly = 1,
    igHandleWriteable = 2,
    igHandleInvisible = 4,
    igHandleRotate = 8,
    igHandleConnectedToNext = 16,
    igHandleConnectedToPrevious = 32
};

struct __declspec(uuid("6b88349e-9cf7-463c-b2ad-fb51684dfc89"))
_IBoltHoleCircleAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetStyle))
    DimStylePtr Style;
    __declspec(property(get=GetIsDefinedBy3Points))
    VARIANT_BOOL IsDefinedBy3Points;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[][];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetTextScale,put=PutTextScale))
    double TextScale;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetIsAcceptableConnectElementOrMember))
    VARIANT_BOOL IsAcceptableConnectElementOrMember[];
    __declspec(property(get=GetIsMember))
    VARIANT_BOOL IsMember[][];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetIsDefinedBy2Points))
    VARIANT_BOOL IsDefinedBy2Points;
    __declspec(property(get=GetPMIName,put=PutPMIName))
    _bstr_t PMIName;
    __declspec(property(get=GetHidePMI,put=PutHidePMI))
    VARIANT_BOOL HidePMI;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetPMIPlane))
    IDispatchPtr PMIPlane;

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse,
        long Lcid = 0 );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    double GetTextScale ( );
    void PutTextScale (
        double pdAngle );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        enum HandleType * HandleType );
    DimStylePtr GetStyle ( );
    VARIANT_BOOL GetIsDefinedBy3Points ( );
    HRESULT AddMember (
        IDispatch * Object,
        long Object_Keypoint_Index );
    HRESULT RemoveMember (
        IDispatch * Object,
        const _variant_t & Object_Keypoint_Index = vtMissing );
    HRESULT Circle2d (
        double * BHC_Circle2d_center_x,
        double * BHC_Circle2d_center_y,
        double * BHC_Circle2d_radius );
    VARIANT_BOOL GetIsAcceptableConnectElementOrMember (
        IDispatch * Object );
    HRESULT GetConnectElements3Objects (
        IDispatch * * Object1,
        int * Object1_Keypoint_Index,
        IDispatch * * Object2,
        int * Object2_Keypoint_Index,
        IDispatch * * Object3,
        int * Object3_Keypoint_Index );
    HRESULT GetConnectElementsCenterRadius (
        IDispatch * * CenterObject,
        int * CenterObject_Keypoint_Index,
        IDispatch * * RadiusObject,
        int * RadiusObject_Keypoint_Index );
    VARIANT_BOOL GetIsMember (
        IDispatch * Object,
        const _variant_t & Object_Keypoint_Index = vtMissing );
    IUnknownPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    void PutLayer (
        _bstr_t Layer );
    _bstr_t GetLayer ( );
    VARIANT_BOOL GetIsDefinedBy2Points ( );
    HRESULT GetTrimArcEndPoints (
        double * x1,
        double * y1,
        double * z1,
        double * x2,
        double * y2,
        double * z2 );
    HRESULT SetTrimArcEndPoints (
        double x1,
        double y1,
        double z1,
        double x2,
        double y2,
        double z2 );
    void PutPMIName (
        _bstr_t Text );
    _bstr_t GetPMIName ( );
    void PutHidePMI (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetHidePMI ( );
    IDispatchPtr GetPMIPlane ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[in]*/ VARIANT Recurse,
        /*[in,lcid]*/ long Lcid,
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * Type ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * ZOrder ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[in]*/ VARIANT Recurse,
        /*[out,retval]*/ BSTR * Key ) = 0;
      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ IDispatch * * Document ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[out]*/ double * XMinimum,
        /*[out]*/ double * YMinimum,
        /*[out]*/ double * XMaximum,
        /*[out]*/ double * YMaximum ) = 0;
      virtual HRESULT __stdcall raw_BringToFront ( ) = 0;
      virtual HRESULT __stdcall raw_BringForward ( ) = 0;
      virtual HRESULT __stdcall raw_SendToBack ( ) = 0;
      virtual HRESULT __stdcall raw_SendBackward ( ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall get_TextScale (
        /*[out,retval]*/ double * pdAngle ) = 0;
      virtual HRESULT __stdcall put_TextScale (
        /*[in]*/ double pdAngle ) = 0;
      virtual HRESULT __stdcall get_KeyPointCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_GetKeyPoint (
        /*[in]*/ long Index,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ enum TGFramework::KeyPointType * KeypointType,
        /*[out]*/ enum HandleType * HandleType ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct DimStyle * * Style ) = 0;
      virtual HRESULT __stdcall get_IsDefinedBy3Points (
        /*[out,retval]*/ VARIANT_BOOL * IsDefinedBy3Points ) = 0;
      virtual HRESULT __stdcall raw_AddMember (
        /*[in]*/ IDispatch * Object,
        /*[in]*/ long Object_Keypoint_Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveMember (
        /*[in]*/ IDispatch * Object,
        /*[in]*/ VARIANT Object_Keypoint_Index = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Circle2d (
        /*[out]*/ double * BHC_Circle2d_center_x,
        /*[out]*/ double * BHC_Circle2d_center_y,
        /*[out]*/ double * BHC_Circle2d_radius ) = 0;
      virtual HRESULT __stdcall get_IsAcceptableConnectElementOrMember (
        /*[in]*/ IDispatch * Object,
        /*[out,retval]*/ VARIANT_BOOL * IsAcceptableConnectElementOrMember ) = 0;
      virtual HRESULT __stdcall raw_GetConnectElements3Objects (
        /*[out]*/ IDispatch * * Object1,
        /*[out]*/ int * Object1_Keypoint_Index,
        /*[out]*/ IDispatch * * Object2,
        /*[out]*/ int * Object2_Keypoint_Index,
        /*[out]*/ IDispatch * * Object3,
        /*[out]*/ int * Object3_Keypoint_Index ) = 0;
      virtual HRESULT __stdcall raw_GetConnectElementsCenterRadius (
        /*[out]*/ IDispatch * * CenterObject,
        /*[out]*/ int * CenterObject_Keypoint_Index,
        /*[out]*/ IDispatch * * RadiusObject,
        /*[out]*/ int * RadiusObject_Keypoint_Index ) = 0;
      virtual HRESULT __stdcall get_IsMember (
        /*[in]*/ IDispatch * Object,
        /*[in]*/ VARIANT Object_Keypoint_Index,
        /*[out,retval]*/ VARIANT_BOOL * IsMember ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IUnknown * * pItem ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pEnum ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * MemberCount ) = 0;
      virtual HRESULT __stdcall put_Layer (
        /*[in]*/ BSTR Layer ) = 0;
      virtual HRESULT __stdcall get_Layer (
        /*[out,retval]*/ BSTR * Layer ) = 0;
      virtual HRESULT __stdcall get_IsDefinedBy2Points (
        /*[out,retval]*/ VARIANT_BOOL * IsDefinedBy2Points ) = 0;
      virtual HRESULT __stdcall raw_GetTrimArcEndPoints (
        /*[out]*/ double * x1,
        /*[out]*/ double * y1,
        /*[out]*/ double * z1,
        /*[out]*/ double * x2,
        /*[out]*/ double * y2,
        /*[out]*/ double * z2 ) = 0;
      virtual HRESULT __stdcall raw_SetTrimArcEndPoints (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double z1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ double z2 ) = 0;
      virtual HRESULT __stdcall put_PMIName (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_PMIName (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_HidePMI (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_HidePMI (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall get_PMIPlane (
        /*[out,retval]*/ IDispatch * * pPMIPlane ) = 0;
};

struct __declspec(uuid("48dcb1f1-1896-4ba7-8380-9a59ba2a8cdb"))
Connectors : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    ConnectorPtr Item (
        const _variant_t & Index );
    ConnectorPtr AddConnectorByType (
        IDispatch * Object1,
        double x1,
        double y1,
        double z1,
        long Object1_Keypoint_Index,
        IDispatch * Object2,
        double x2,
        double y2,
        double z2,
        long Object2_Keypoint_Index,
        enum ConnectorTypeConstants ConnectorType );
    ConnectorPtr AddFreeSpaceConnectorByType (
        double x1,
        double y1,
        double z1,
        double x2,
        double y2,
        double z2,
        enum ConnectorTypeConstants ConnectorType );
};

struct __declspec(uuid("9c470e2f-5274-4b46-8d2a-5deb082d8cfc"))
Connector : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetStyle))
    DimStylePtr Style;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetTextScale,put=PutTextScale))
    double TextScale;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        enum HandleType * HandleType );
    DimStylePtr GetStyle ( );
    HRESULT GetConnectorType (
        enum ConnectorTypeConstants * ConnectorType );
    HRESULT SetConnectorType (
        enum ConnectorTypeConstants ConnectorType );
    HRESULT GetStartElement (
        IDispatch * * StartObj,
        double * x,
        double * y,
        double * z,
        int * StartKeyPointIndex );
    HRESULT SetStartElement (
        IDispatch * StartObj,
        double x,
        double y,
        double z,
        int StartKeyPointIndex );
    HRESULT GetEndElement (
        IDispatch * * EndObj,
        double * x,
        double * y,
        double * z,
        int * EndKeyPointIndex );
    HRESULT SetEndElement (
        IDispatch * EndObj,
        double x,
        double y,
        double z,
        int EndKeyPointIndex );
    HRESULT GetCenterElement (
        IDispatch * * CenterObj,
        double * x,
        double * y,
        double * z,
        int * CenterKeyPointIndex );
    HRESULT SetCenterElement (
        IDispatch * CenterObj,
        double x,
        double y,
        double z,
        int CenterKeyPointIndex );
    HRESULT GetStartPoint (
        double * x,
        double * y,
        double * z );
    HRESULT SetStartPoint (
        double x,
        double y,
        double z );
    HRESULT GetEndPoint (
        double * x,
        double * y,
        double * z );
    HRESULT SetEndPoint (
        double x,
        double y,
        double z );
    HRESULT GetStartTerminatorType (
        enum DimTermTypeConstants * StartTermType );
    HRESULT SetStartTerminatorType (
        enum DimTermTypeConstants StartTermType );
    HRESULT GetEndTerminatorType (
        enum DimTermTypeConstants * EndTermType );
    HRESULT SetEndTerminatorType (
        enum DimTermTypeConstants EndTermType );
    HRESULT GetFlipState (
        VARIANT_BOOL * FlipState );
    HRESULT SetFlipState (
        VARIANT_BOOL FlipState );
    HRESULT GetJumpRadius (
        double * JumpRadius );
    HRESULT SetJumpRadius (
        double JumpRadius );
    double GetTextScale ( );
    void PutTextScale (
        double _arg1 );
    void PutLayer (
        _bstr_t _arg1 );
    _bstr_t GetLayer ( );
    HRESULT PromoteToCurrentVersion ( );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
};

enum ConnectorTypeConstants
{
    seLineConnector = 0,
    seJumpConnector = 1,
    seCornerConnector = 2,
    seStepConnector = 3,
    seGapConnector = 4
};

struct __declspec(uuid("d34be97b-22d4-4978-8ccc-e01d224256bd"))
_IConnectorsAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    ConnectorPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    ConnectorPtr AddConnectorByType (
        IDispatch * Object1,
        double x1,
        double y1,
        double z1,
        long Object1_Keypoint_Index,
        IDispatch * Object2,
        double x2,
        double y2,
        double z2,
        long Object2_Keypoint_Index,
        enum ConnectorTypeConstants ConnectorType );
    ConnectorPtr AddFreeSpaceConnectorByType (
        double x1,
        double y1,
        double z1,
        double x2,
        double y2,
        double z2,
        enum ConnectorTypeConstants ConnectorType );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * App ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Connector * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Enum ) = 0;
      virtual HRESULT __stdcall raw_AddConnectorByType (
        /*[in]*/ IDispatch * Object1,
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double z1,
        /*[in]*/ long Object1_Keypoint_Index,
        /*[in]*/ IDispatch * Object2,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ double z2,
        /*[in]*/ long Object2_Keypoint_Index,
        /*[in]*/ enum ConnectorTypeConstants ConnectorType,
        /*[out,retval]*/ struct Connector * * Obj ) = 0;
      virtual HRESULT __stdcall raw_AddFreeSpaceConnectorByType (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double z1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ double z2,
        /*[in]*/ enum ConnectorTypeConstants ConnectorType,
        /*[out,retval]*/ struct Connector * * Obj ) = 0;
};

struct __declspec(uuid("85fb6108-6777-472d-b3e2-1796702a7265"))
_IConnectorAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetStyle))
    DimStylePtr Style;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[][];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetTextScale,put=PutTextScale))
    double TextScale;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse,
        long Lcid = 0 );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        enum HandleType * HandleType );
    DimStylePtr GetStyle ( );
    HRESULT GetConnectorType (
        enum ConnectorTypeConstants * ConnectorType );
    HRESULT SetConnectorType (
        enum ConnectorTypeConstants ConnectorType );
    HRESULT GetStartElement (
        IDispatch * * StartObj,
        double * x,
        double * y,
        double * z,
        int * StartKeyPointIndex );
    HRESULT SetStartElement (
        IDispatch * StartObj,
        double x,
        double y,
        double z,
        int StartKeyPointIndex );
    HRESULT GetEndElement (
        IDispatch * * EndObj,
        double * x,
        double * y,
        double * z,
        int * EndKeyPointIndex );
    HRESULT SetEndElement (
        IDispatch * EndObj,
        double x,
        double y,
        double z,
        int EndKeyPointIndex );
    HRESULT GetCenterElement (
        IDispatch * * CenterObj,
        double * x,
        double * y,
        double * z,
        int * CenterKeyPointIndex );
    HRESULT SetCenterElement (
        IDispatch * CenterObj,
        double x,
        double y,
        double z,
        int CenterKeyPointIndex );
    HRESULT GetStartPoint (
        double * x,
        double * y,
        double * z );
    HRESULT SetStartPoint (
        double x,
        double y,
        double z );
    HRESULT GetEndPoint (
        double * x,
        double * y,
        double * z );
    HRESULT SetEndPoint (
        double x,
        double y,
        double z );
    HRESULT GetStartTerminatorType (
        enum DimTermTypeConstants * StartTermType );
    HRESULT SetStartTerminatorType (
        enum DimTermTypeConstants StartTermType );
    HRESULT GetEndTerminatorType (
        enum DimTermTypeConstants * EndTermType );
    HRESULT SetEndTerminatorType (
        enum DimTermTypeConstants EndTermType );
    HRESULT GetFlipState (
        VARIANT_BOOL * FlipState );
    HRESULT SetFlipState (
        VARIANT_BOOL FlipState );
    HRESULT GetJumpRadius (
        double * JumpRadius );
    HRESULT SetJumpRadius (
        double JumpRadius );
    double GetTextScale ( );
    void PutTextScale (
        double pdAngle );
    void PutLayer (
        _bstr_t Layer );
    _bstr_t GetLayer ( );
    HRESULT PromoteToCurrentVersion ( );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[in]*/ VARIANT Recurse,
        /*[in,lcid]*/ long Lcid,
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * Type ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * ZOrder ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[in]*/ VARIANT Recurse,
        /*[out,retval]*/ BSTR * Key ) = 0;
      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ IDispatch * * Document ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[out]*/ double * XMinimum,
        /*[out]*/ double * YMinimum,
        /*[out]*/ double * XMaximum,
        /*[out]*/ double * YMaximum ) = 0;
      virtual HRESULT __stdcall raw_BringToFront ( ) = 0;
      virtual HRESULT __stdcall raw_BringForward ( ) = 0;
      virtual HRESULT __stdcall raw_SendToBack ( ) = 0;
      virtual HRESULT __stdcall raw_SendBackward ( ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall get_KeyPointCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_GetKeyPoint (
        /*[in]*/ long Index,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ enum TGFramework::KeyPointType * KeypointType,
        /*[out]*/ enum HandleType * HandleType ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct DimStyle * * Style ) = 0;
      virtual HRESULT __stdcall raw_GetConnectorType (
        /*[out]*/ enum ConnectorTypeConstants * ConnectorType ) = 0;
      virtual HRESULT __stdcall raw_SetConnectorType (
        /*[in]*/ enum ConnectorTypeConstants ConnectorType ) = 0;
      virtual HRESULT __stdcall raw_GetStartElement (
        /*[out]*/ IDispatch * * StartObj,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ int * StartKeyPointIndex ) = 0;
      virtual HRESULT __stdcall raw_SetStartElement (
        /*[in]*/ IDispatch * StartObj,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z,
        /*[in]*/ int StartKeyPointIndex ) = 0;
      virtual HRESULT __stdcall raw_GetEndElement (
        /*[out]*/ IDispatch * * EndObj,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ int * EndKeyPointIndex ) = 0;
      virtual HRESULT __stdcall raw_SetEndElement (
        /*[in]*/ IDispatch * EndObj,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z,
        /*[in]*/ int EndKeyPointIndex ) = 0;
      virtual HRESULT __stdcall raw_GetCenterElement (
        /*[out]*/ IDispatch * * CenterObj,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ int * CenterKeyPointIndex ) = 0;
      virtual HRESULT __stdcall raw_SetCenterElement (
        /*[in]*/ IDispatch * CenterObj,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z,
        /*[in]*/ int CenterKeyPointIndex ) = 0;
      virtual HRESULT __stdcall raw_GetStartPoint (
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z ) = 0;
      virtual HRESULT __stdcall raw_SetStartPoint (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_GetEndPoint (
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z ) = 0;
      virtual HRESULT __stdcall raw_SetEndPoint (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_GetStartTerminatorType (
        /*[out]*/ enum DimTermTypeConstants * StartTermType ) = 0;
      virtual HRESULT __stdcall raw_SetStartTerminatorType (
        /*[in]*/ enum DimTermTypeConstants StartTermType ) = 0;
      virtual HRESULT __stdcall raw_GetEndTerminatorType (
        /*[out]*/ enum DimTermTypeConstants * EndTermType ) = 0;
      virtual HRESULT __stdcall raw_SetEndTerminatorType (
        /*[in]*/ enum DimTermTypeConstants EndTermType ) = 0;
      virtual HRESULT __stdcall raw_GetFlipState (
        /*[out]*/ VARIANT_BOOL * FlipState ) = 0;
      virtual HRESULT __stdcall raw_SetFlipState (
        /*[in]*/ VARIANT_BOOL FlipState ) = 0;
      virtual HRESULT __stdcall raw_GetJumpRadius (
        /*[out]*/ double * JumpRadius ) = 0;
      virtual HRESULT __stdcall raw_SetJumpRadius (
        /*[in]*/ double JumpRadius ) = 0;
      virtual HRESULT __stdcall get_TextScale (
        /*[out,retval]*/ double * pdAngle ) = 0;
      virtual HRESULT __stdcall put_TextScale (
        /*[in]*/ double pdAngle ) = 0;
      virtual HRESULT __stdcall put_Layer (
        /*[in]*/ BSTR Layer ) = 0;
      virtual HRESULT __stdcall get_Layer (
        /*[out,retval]*/ BSTR * Layer ) = 0;
      virtual HRESULT __stdcall raw_PromoteToCurrentVersion ( ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
};

struct __declspec(uuid("c1430b85-ce5d-11ce-9472-0800361c0602"))
Groups : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    GroupPtr Item (
        const _variant_t & Index );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    GroupPtr Add (
        const _variant_t & Name = vtMissing );
    HRESULT Remove (
        const _variant_t & Index );
    GroupPtr AddEmptyGroup ( );
};

struct __declspec(uuid("c1430b82-ce5d-11ce-9472-0800361c0602"))
Group : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDimensions))
    DimensionsPtr Dimensions;
    __declspec(property(get=GetStyle))
    IDispatchPtr Style;
    __declspec(property(get=GetLeaders))
    LeadersPtr Leaders;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetBalloons))
    BalloonsPtr Balloons;
    __declspec(property(get=GetLines2d))
    Lines2dPtr Lines2d;
    __declspec(property(get=GetCircles2d))
    Circles2dPtr Circles2d;
    __declspec(property(get=GetArcs2d))
    Arcs2dPtr Arcs2d;
    __declspec(property(get=GetEllipses2d))
    Ellipses2dPtr Ellipses2d;
    __declspec(property(get=GetBSplineCurves2d))
    BSplineCurves2dPtr BSplineCurves2d;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetPoints2d))
    Points2dPtr Points2d;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetCenterLines))
    CenterLinesPtr CenterLines;
    __declspec(property(get=GetDatumTargets))
    DatumTargetsPtr DatumTargets;
    __declspec(property(get=GetDatumPoints))
    DatumPointsPtr DatumPoints;
    __declspec(property(get=GetSymbols))
    IDispatchPtr Symbols;
    __declspec(property(get=GetEllipticalArcs2d))
    EllipticalArcs2dPtr EllipticalArcs2d;
    __declspec(property(get=GetCurves2d))
    Curves2dPtr Curves2d;
    __declspec(property(get=GetLineStrings2d))
    LineStrings2dPtr LineStrings2d;
    __declspec(property(get=GetComplexStrings2d))
    ComplexStrings2dPtr ComplexStrings2d;
    __declspec(property(get=GetBoundaries2d))
    Boundaries2dPtr Boundaries2d;
    __declspec(property(get=GetCornerAnnotations))
    CornerAnnotationsPtr CornerAnnotations;
    __declspec(property(get=GetBoltHoleCircles))
    BoltHoleCirclesPtr BoltHoleCircles;
    __declspec(property(get=GetTextBoxes))
    TextBoxesPtr TextBoxes;
    __declspec(property(get=GetConnectors))
    ConnectorsPtr Connectors;
    __declspec(property(get=GetTextProfiles))
    TextProfilesPtr TextProfiles;
    __declspec(property(get=GetDatumFrames))
    DatumFramesPtr DatumFrames;
    __declspec(property(get=GetFeatureControlFrames))
    FeatureControlFramesPtr FeatureControlFrames;
    __declspec(property(get=GetPinSymbols))
    PinSymbolsPtr PinSymbols;
    __declspec(property(get=GetSurfaceFinishSymbols))
    SurfaceFinishSymbolsPtr SurfaceFinishSymbols;
    __declspec(property(get=GetWeldSymbols))
    WeldSymbolsPtr WeldSymbols;
    __declspec(property(get=GetCenterMarks))
    CenterMarksPtr CenterMarks;
    __declspec(property(get=GetGroups))
    GroupsPtr Groups;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetLocatable,put=PutLocatable))
    VARIANT_BOOL Locatable;
    __declspec(property(get=GetEditable,put=PutEditable))
    VARIANT_BOOL Editable;
    __declspec(property(get=GetUserDefinedName,put=PutUserDefinedName))
    _bstr_t UserDefinedName;
    __declspec(property(get=GetDrawingViews))
    IDispatchPtr DrawingViews;
    __declspec(property(get=GetLayoutElementType))
    enum LayoutElementTypeConstants LayoutElementType;
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetStyle ( );
    HRESULT Ungroup ( );
    HRESULT AddToGroup (
        const _variant_t & NumObjects = vtMissing,
        const _variant_t & Objects = vtMissing );
    HRESULT RemoveFromGroup (
        const _variant_t & NumObjects = vtMissing,
        const _variant_t & Objects = vtMissing );
    IDispatchPtr Item (
        const _variant_t & Index );
    long GetCount ( );
    long IsNested ( );
    long HasNested ( );
    void PutLayer (
        _bstr_t _arg1 );
    _bstr_t GetLayer ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    DimensionsPtr GetDimensions ( );
    LeadersPtr GetLeaders ( );
    BalloonsPtr GetBalloons ( );
    Lines2dPtr GetLines2d ( );
    Circles2dPtr GetCircles2d ( );
    Arcs2dPtr GetArcs2d ( );
    Ellipses2dPtr GetEllipses2d ( );
    BSplineCurves2dPtr GetBSplineCurves2d ( );
    Points2dPtr GetPoints2d ( );
    EllipticalArcs2dPtr GetEllipticalArcs2d ( );
    Curves2dPtr GetCurves2d ( );
    LineStrings2dPtr GetLineStrings2d ( );
    ComplexStrings2dPtr GetComplexStrings2d ( );
    Boundaries2dPtr GetBoundaries2d ( );
    TextBoxesPtr GetTextBoxes ( );
    TextProfilesPtr GetTextProfiles ( );
    DatumFramesPtr GetDatumFrames ( );
    FeatureControlFramesPtr GetFeatureControlFrames ( );
    SurfaceFinishSymbolsPtr GetSurfaceFinishSymbols ( );
    WeldSymbolsPtr GetWeldSymbols ( );
    CenterMarksPtr GetCenterMarks ( );
    CenterLinesPtr GetCenterLines ( );
    DatumTargetsPtr GetDatumTargets ( );
    PinSymbolsPtr GetPinSymbols ( );
    DatumPointsPtr GetDatumPoints ( );
    CornerAnnotationsPtr GetCornerAnnotations ( );
    BoltHoleCirclesPtr GetBoltHoleCircles ( );
    ConnectorsPtr GetConnectors ( );
    IDispatchPtr GetSymbols ( );
    GroupsPtr GetGroups ( );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    void PutVisible (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetVisible ( );
    void PutLocatable (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetLocatable ( );
    void PutEditable (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetEditable ( );
    void PutUserDefinedName (
        _bstr_t _arg1 );
    _bstr_t GetUserDefinedName ( );
    IDispatchPtr GetDrawingViews ( );
    enum LayoutElementTypeConstants GetLayoutElementType ( );
};

struct __declspec(uuid("c1430b84-ce5d-11ce-9472-0800361c0602"))
_IGroupsAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    GroupPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    GroupPtr Add (
        const _variant_t & Name = vtMissing );
    HRESULT Remove (
        const _variant_t & Index );
    GroupPtr AddEmptyGroup ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Group * * pItem ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pEnum ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * pApp ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * pParent ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ VARIANT Name,
        /*[out,retval]*/ struct Group * * pGroup ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ VARIANT Index ) = 0;
      virtual HRESULT __stdcall raw_AddEmptyGroup (
        /*[out,retval]*/ struct Group * * pGroup ) = 0;
};

enum LayoutElementTypeConstants
{
    igTemplateEditor3DView = 1,
    igTemplateEditorViewCarousel = 2,
    igTemplateEditorBOMTable = 3,
    igTemplateEditorPDFText = 4
};

struct __declspec(uuid("c1430b81-ce5d-11ce-9472-0800361c0602"))
_IGroupAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetDimensions))
    DimensionsPtr Dimensions;
    __declspec(property(get=GetStyle))
    IDispatchPtr Style;
    __declspec(property(get=GetLeaders))
    LeadersPtr Leaders;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetBalloons))
    BalloonsPtr Balloons;
    __declspec(property(get=GetLines2d))
    Lines2dPtr Lines2d;
    __declspec(property(get=GetCircles2d))
    Circles2dPtr Circles2d;
    __declspec(property(get=GetArcs2d))
    Arcs2dPtr Arcs2d;
    __declspec(property(get=GetEllipses2d))
    Ellipses2dPtr Ellipses2d;
    __declspec(property(get=GetBSplineCurves2d))
    BSplineCurves2dPtr BSplineCurves2d;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[][];
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetCenterLines))
    CenterLinesPtr CenterLines;
    __declspec(property(get=GetDatumTargets))
    DatumTargetsPtr DatumTargets;
    __declspec(property(get=GetDatumPoints))
    DatumPointsPtr DatumPoints;
    __declspec(property(get=GetPoints2d))
    Points2dPtr Points2d;
    __declspec(property(get=GetEllipticalArcs2d))
    EllipticalArcs2dPtr EllipticalArcs2d;
    __declspec(property(get=GetCurves2d))
    Curves2dPtr Curves2d;
    __declspec(property(get=GetLineStrings2d))
    LineStrings2dPtr LineStrings2d;
    __declspec(property(get=GetComplexStrings2d))
    ComplexStrings2dPtr ComplexStrings2d;
    __declspec(property(get=GetBoundaries2d))
    Boundaries2dPtr Boundaries2d;
    __declspec(property(get=GetCornerAnnotations))
    CornerAnnotationsPtr CornerAnnotations;
    __declspec(property(get=GetBoltHoleCircles))
    BoltHoleCirclesPtr BoltHoleCircles;
    __declspec(property(get=GetTextBoxes))
    TextBoxesPtr TextBoxes;
    __declspec(property(get=GetConnectors))
    ConnectorsPtr Connectors;
    __declspec(property(get=GetTextProfiles))
    TextProfilesPtr TextProfiles;
    __declspec(property(get=GetDatumFrames))
    DatumFramesPtr DatumFrames;
    __declspec(property(get=GetFeatureControlFrames))
    FeatureControlFramesPtr FeatureControlFrames;
    __declspec(property(get=GetPinSymbols))
    PinSymbolsPtr PinSymbols;
    __declspec(property(get=GetSurfaceFinishSymbols))
    SurfaceFinishSymbolsPtr SurfaceFinishSymbols;
    __declspec(property(get=GetWeldSymbols))
    WeldSymbolsPtr WeldSymbols;
    __declspec(property(get=GetCenterMarks))
    CenterMarksPtr CenterMarks;
    __declspec(property(get=GetSymbols))
    IDispatchPtr Symbols;
    __declspec(property(get=GetGroups))
    GroupsPtr Groups;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetLocatable,put=PutLocatable))
    VARIANT_BOOL Locatable;
    __declspec(property(get=GetEditable,put=PutEditable))
    VARIANT_BOOL Editable;
    __declspec(property(get=GetUserDefinedName,put=PutUserDefinedName))
    _bstr_t UserDefinedName;
    __declspec(property(get=GetDrawingViews))
    IDispatchPtr DrawingViews;
    __declspec(property(get=GetLayoutElementType))
    enum LayoutElementTypeConstants LayoutElementType;
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetStyle ( );
    HRESULT Ungroup ( );
    HRESULT AddToGroup (
        const _variant_t & NumObjects = vtMissing,
        const _variant_t & Objects = vtMissing );
    HRESULT RemoveFromGroup (
        const _variant_t & NumObjects = vtMissing,
        const _variant_t & Objects = vtMissing );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    long IsNested ( );
    long HasNested ( );
    void PutLayer (
        _bstr_t Layer );
    _bstr_t GetLayer ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse,
        long Lcid = 0 );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    DimensionsPtr GetDimensions ( );
    LeadersPtr GetLeaders ( );
    BalloonsPtr GetBalloons ( );
    Lines2dPtr GetLines2d ( );
    Circles2dPtr GetCircles2d ( );
    Arcs2dPtr GetArcs2d ( );
    Ellipses2dPtr GetEllipses2d ( );
    BSplineCurves2dPtr GetBSplineCurves2d ( );
    Points2dPtr GetPoints2d ( );
    EllipticalArcs2dPtr GetEllipticalArcs2d ( );
    Curves2dPtr GetCurves2d ( );
    LineStrings2dPtr GetLineStrings2d ( );
    ComplexStrings2dPtr GetComplexStrings2d ( );
    Boundaries2dPtr GetBoundaries2d ( );
    TextBoxesPtr GetTextBoxes ( );
    TextProfilesPtr GetTextProfiles ( );
    DatumFramesPtr GetDatumFrames ( );
    FeatureControlFramesPtr GetFeatureControlFrames ( );
    SurfaceFinishSymbolsPtr GetSurfaceFinishSymbols ( );
    WeldSymbolsPtr GetWeldSymbols ( );
    CenterMarksPtr GetCenterMarks ( );
    CenterLinesPtr GetCenterLines ( );
    DatumTargetsPtr GetDatumTargets ( );
    PinSymbolsPtr GetPinSymbols ( );
    DatumPointsPtr GetDatumPoints ( );
    CornerAnnotationsPtr GetCornerAnnotations ( );
    BoltHoleCirclesPtr GetBoltHoleCircles ( );
    ConnectorsPtr GetConnectors ( );
    IDispatchPtr GetSymbols ( );
    GroupsPtr GetGroups ( );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    void PutVisible (
        VARIANT_BOOL Visible );
    VARIANT_BOOL GetVisible ( );
    void PutLocatable (
        VARIANT_BOOL Locatable );
    VARIANT_BOOL GetLocatable ( );
    void PutEditable (
        VARIANT_BOOL Editable );
    VARIANT_BOOL GetEditable ( );
    void PutUserDefinedName (
        _bstr_t Name );
    _bstr_t GetUserDefinedName ( );
    IDispatchPtr GetDrawingViews ( );
    enum LayoutElementTypeConstants GetLayoutElementType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ IDispatch * * pStyle ) = 0;
      virtual HRESULT __stdcall raw_Ungroup ( ) = 0;
      virtual HRESULT __stdcall raw_AddToGroup (
        /*[in]*/ VARIANT NumObjects = vtMissing,
        /*[in]*/ VARIANT Objects = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_RemoveFromGroup (
        /*[in]*/ VARIANT NumObjects = vtMissing,
        /*[in]*/ VARIANT Objects = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * pItem ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pEnum ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_IsNested (
        /*[out,retval]*/ long * is_nested ) = 0;
      virtual HRESULT __stdcall raw_HasNested (
        /*[out,retval]*/ long * has_nested ) = 0;
      virtual HRESULT __stdcall put_Layer (
        /*[in]*/ BSTR Layer ) = 0;
      virtual HRESULT __stdcall get_Layer (
        /*[out,retval]*/ BSTR * Layer ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[in]*/ VARIANT Recurse,
        /*[in,lcid]*/ long Lcid,
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * Type ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * ZOrder ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[in]*/ VARIANT Recurse,
        /*[out,retval]*/ BSTR * Key ) = 0;
      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ IDispatch * * Document ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ double XFrom,
        /*[in]*/ double YFrom,
        /*[in]*/ double XTo,
        /*[in]*/ double YTo ) = 0;
      virtual HRESULT __stdcall raw_Scale (
        /*[in]*/ double Factor ) = 0;
      virtual HRESULT __stdcall raw_Rotate (
        /*[in]*/ double Angle,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[out]*/ double * XMinimum,
        /*[out]*/ double * YMinimum,
        /*[out]*/ double * XMaximum,
        /*[out]*/ double * YMaximum ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ VARIANT XDistance,
        /*[in]*/ VARIANT YDistance,
        /*[out,retval]*/ IDispatch * * NewObject ) = 0;
      virtual HRESULT __stdcall raw_Mirror (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ VARIANT BooleanCopyFlag,
        /*[out,retval]*/ IDispatch * * Object ) = 0;
      virtual HRESULT __stdcall raw_BringToFront ( ) = 0;
      virtual HRESULT __stdcall raw_BringForward ( ) = 0;
      virtual HRESULT __stdcall raw_SendToBack ( ) = 0;
      virtual HRESULT __stdcall raw_SendBackward ( ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall get_KeyPointCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_GetKeyPoint (
        /*[in]*/ long Index,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ enum TGFramework::KeyPointType * KeypointType,
        /*[out]*/ long * HandleType ) = 0;
      virtual HRESULT __stdcall raw_SetKeyPoint (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall get_Dimensions (
        /*[out,retval]*/ struct Dimensions * * Dimensions ) = 0;
      virtual HRESULT __stdcall get_Leaders (
        /*[out,retval]*/ struct Leaders * * Leaders ) = 0;
      virtual HRESULT __stdcall get_Balloons (
        /*[out,retval]*/ struct Balloons * * Balloons ) = 0;
      virtual HRESULT __stdcall get_Lines2d (
        /*[out,retval]*/ struct Lines2d * * Lines2d ) = 0;
      virtual HRESULT __stdcall get_Circles2d (
        /*[out,retval]*/ struct Circles2d * * Circles2d ) = 0;
      virtual HRESULT __stdcall get_Arcs2d (
        /*[out,retval]*/ struct Arcs2d * * Arcs2d ) = 0;
      virtual HRESULT __stdcall get_Ellipses2d (
        /*[out,retval]*/ struct Ellipses2d * * Ellipses2d ) = 0;
      virtual HRESULT __stdcall get_BSplineCurves2d (
        /*[out,retval]*/ struct BSplineCurves2d * * BSplineCurves2d ) = 0;
      virtual HRESULT __stdcall get_Points2d (
        /*[out,retval]*/ struct Points2d * * Points2d ) = 0;
      virtual HRESULT __stdcall get_EllipticalArcs2d (
        /*[out,retval]*/ struct EllipticalArcs2d * * EllipticalArcs2d ) = 0;
      virtual HRESULT __stdcall get_Curves2d (
        /*[out,retval]*/ struct Curves2d * * Curves2d ) = 0;
      virtual HRESULT __stdcall get_LineStrings2d (
        /*[out,retval]*/ struct LineStrings2d * * LineStrings2d ) = 0;
      virtual HRESULT __stdcall get_ComplexStrings2d (
        /*[out,retval]*/ struct ComplexStrings2d * * ComplexStrings2d ) = 0;
      virtual HRESULT __stdcall get_Boundaries2d (
        /*[out,retval]*/ struct Boundaries2d * * Boundaries2d ) = 0;
      virtual HRESULT __stdcall get_TextBoxes (
        /*[out,retval]*/ struct TextBoxes * * TextBoxes ) = 0;
      virtual HRESULT __stdcall get_TextProfiles (
        /*[out,retval]*/ struct TextProfiles * * pTextProfiles ) = 0;
      virtual HRESULT __stdcall get_DatumFrames (
        /*[out,retval]*/ struct DatumFrames * * DatumFrames ) = 0;
      virtual HRESULT __stdcall get_FeatureControlFrames (
        /*[out,retval]*/ struct FeatureControlFrames * * FeatureControlFrames ) = 0;
      virtual HRESULT __stdcall get_SurfaceFinishSymbols (
        /*[out,retval]*/ struct SurfaceFinishSymbols * * SurfaceFinishSymbols ) = 0;
      virtual HRESULT __stdcall get_WeldSymbols (
        /*[out,retval]*/ struct WeldSymbols * * WeldSymbols ) = 0;
      virtual HRESULT __stdcall get_CenterMarks (
        /*[out,retval]*/ struct CenterMarks * * CenterMarks ) = 0;
      virtual HRESULT __stdcall get_CenterLines (
        /*[out,retval]*/ struct CenterLines * * CenterLines ) = 0;
      virtual HRESULT __stdcall get_DatumTargets (
        /*[out,retval]*/ struct DatumTargets * * DatumTargets ) = 0;
      virtual HRESULT __stdcall get_PinSymbols (
        /*[out,retval]*/ struct PinSymbols * * PinSymbols ) = 0;
      virtual HRESULT __stdcall get_DatumPoints (
        /*[out,retval]*/ struct DatumPoints * * DatumPoints ) = 0;
      virtual HRESULT __stdcall get_CornerAnnotations (
        /*[out,retval]*/ struct CornerAnnotations * * CornerAnnotations ) = 0;
      virtual HRESULT __stdcall get_BoltHoleCircles (
        /*[out,retval]*/ struct BoltHoleCircles * * BoltHoleCircles ) = 0;
      virtual HRESULT __stdcall get_Connectors (
        /*[out,retval]*/ struct Connectors * * Connectors ) = 0;
      virtual HRESULT __stdcall get_Symbols (
        /*[out,retval]*/ IDispatch * * Symbols ) = 0;
      virtual HRESULT __stdcall get_Groups (
        /*[out,retval]*/ struct Groups * * Groups ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall put_Locatable (
        /*[in]*/ VARIANT_BOOL Locatable ) = 0;
      virtual HRESULT __stdcall get_Locatable (
        /*[out,retval]*/ VARIANT_BOOL * Locatable ) = 0;
      virtual HRESULT __stdcall put_Editable (
        /*[in]*/ VARIANT_BOOL Editable ) = 0;
      virtual HRESULT __stdcall get_Editable (
        /*[out,retval]*/ VARIANT_BOOL * Editable ) = 0;
      virtual HRESULT __stdcall put_UserDefinedName (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_UserDefinedName (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_DrawingViews (
        /*[out,retval]*/ IDispatch * * ppDrawingView ) = 0;
      virtual HRESULT __stdcall get_LayoutElementType (
        /*[out,retval]*/ enum LayoutElementTypeConstants * ElemType ) = 0;
};

struct __declspec(uuid("a294acc6-83e3-11d3-b018-00c04f79bea1"))
_IGroupStyleAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetLinearColor,put=PutLinearColor))
    long LinearColor;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetUnits,put=PutUnits))
    long Units;
    __declspec(property(get=GetAutoPhase,put=PutAutoPhase))
    VARIANT_BOOL AutoPhase;
    __declspec(property(get=GetDashGapCount))
    long DashGapCount;
    __declspec(property(get=GetDashStrokePercent,put=PutDashStrokePercent))
    double DashStrokePercent;
    __declspec(property(get=GetLinearName,put=PutLinearName))
    _bstr_t LinearName;
    __declspec(property(get=GetDashName,put=PutDashName))
    _bstr_t DashName;

    //
    // Wrapper methods for error-handling
    //

    void PutLinearColor (
        long Color );
    long GetLinearColor ( );
    double GetWidth ( );
    void PutWidth (
        double PenWidth );
    void PutUnits (
        long Units );
    long GetUnits ( );
    VARIANT_BOOL GetAutoPhase ( );
    void PutAutoPhase (
        VARIANT_BOOL AutoPhase );
    long GetDashGapCount ( );
    double GetDashStrokePercent ( );
    void PutDashStrokePercent (
        double DashStrokePercent );
    void PutLinearName (
        _bstr_t StyleName );
    _bstr_t GetLinearName ( );
    void PutDashName (
        _bstr_t StyleName );
    _bstr_t GetDashName ( );
    HRESULT UseActiveStyle (
        long StyleType );
    HRESULT SetDashGap (
        long DashCount,
        SAFEARRAY * * Dashes );
    HRESULT GetDashGap (
        long DashCount,
        SAFEARRAY * * Dashes );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_LinearColor (
        /*[in]*/ long Color ) = 0;
      virtual HRESULT __stdcall get_LinearColor (
        /*[out,retval]*/ long * Color ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * PenWidth ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double PenWidth ) = 0;
      virtual HRESULT __stdcall put_Units (
        /*[in]*/ long Units ) = 0;
      virtual HRESULT __stdcall get_Units (
        /*[out,retval]*/ long * Units ) = 0;
      virtual HRESULT __stdcall get_AutoPhase (
        /*[out,retval]*/ VARIANT_BOOL * AutoPhase ) = 0;
      virtual HRESULT __stdcall put_AutoPhase (
        /*[in]*/ VARIANT_BOOL AutoPhase ) = 0;
      virtual HRESULT __stdcall get_DashGapCount (
        /*[out,retval]*/ long * DashCount ) = 0;
      virtual HRESULT __stdcall get_DashStrokePercent (
        /*[out,retval]*/ double * DashStrokePercent ) = 0;
      virtual HRESULT __stdcall put_DashStrokePercent (
        /*[in]*/ double DashStrokePercent ) = 0;
      virtual HRESULT __stdcall put_LinearName (
        /*[in]*/ BSTR StyleName ) = 0;
      virtual HRESULT __stdcall get_LinearName (
        /*[out,retval]*/ BSTR * StyleName ) = 0;
      virtual HRESULT __stdcall put_DashName (
        /*[in]*/ BSTR StyleName ) = 0;
      virtual HRESULT __stdcall get_DashName (
        /*[out,retval]*/ BSTR * StyleName ) = 0;
      virtual HRESULT __stdcall raw_UseActiveStyle (
        /*[in]*/ long StyleType ) = 0;
      virtual HRESULT __stdcall raw_SetDashGap (
        /*[in]*/ long DashCount,
        /*[in]*/ SAFEARRAY * * Dashes ) = 0;
      virtual HRESULT __stdcall raw_GetDashGap (
        /*[in]*/ long DashCount,
        /*[out]*/ SAFEARRAY * * Dashes ) = 0;
};

struct __declspec(uuid("29ac15a0-31d7-11ce-93f4-080036373002"))
_IDimensionStylesAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetActive,put=PutActive))
    _bstr_t Active;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    DimensionStylePtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    DimensionStylePtr Add (
        _bstr_t Name,
        _bstr_t Parent );
    HRESULT Remove (
        _bstr_t Name );
    _bstr_t GetActive ( );
    void PutActive (
        _bstr_t Name );
    HRESULT AddEx (
        _bstr_t Name,
        VARIANT_BOOL bOverride,
        IDispatch * pSourceDoc );
    VARIANT_BOOL IsDimStyleExists (
        _bstr_t DimensionStyle );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * App ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct DimensionStyle * * pItem ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pEnum ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Parent,
        /*[out,retval]*/ struct DimensionStyle * * pObj ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Active (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall raw_AddEx (
        /*[in]*/ BSTR Name,
        /*[in]*/ VARIANT_BOOL bOverride,
        /*[in]*/ IDispatch * pSourceDoc ) = 0;
      virtual HRESULT __stdcall raw_IsDimStyleExists (
        /*[in]*/ BSTR DimensionStyle,
        /*[out,retval]*/ VARIANT_BOOL * bStyleExists ) = 0;
};

struct __declspec(uuid("b3cec7e9-34a4-11cf-848f-080036373002"))
_IFeatureControlFrameDataSetsAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    FeatureControlFrameDataSetPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    FeatureControlFrameDataSetPtr Add (
        _bstr_t Name );
    HRESULT Remove (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * App ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct FeatureControlFrameDataSet * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pEnum ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct FeatureControlFrameDataSet * * pObj ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR Name ) = 0;
};

struct __declspec(uuid("b3cec7f1-34a4-11cf-848f-080036373002"))
_IWeldSymbolDataSetsAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    WeldSymbolDataSetPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    WeldSymbolDataSetPtr Add (
        _bstr_t Name );
    HRESULT Remove (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * App ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct WeldSymbolDataSet * * pItem ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pEnum ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct WeldSymbolDataSet * * pObj ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR Name ) = 0;
};

struct __declspec(uuid("b3cec7ea-34a4-11cf-848f-080036373002"))
_ISurfaceFinishSymbolDataSetsAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    SurfaceFinishSymbolDataSetPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    SurfaceFinishSymbolDataSetPtr Add (
        _bstr_t Name );
    HRESULT Remove (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * App ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct SurfaceFinishSymbolDataSet * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pEnum ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct SurfaceFinishSymbolDataSet * * pObj ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR Name ) = 0;
};

enum FrameShapeConstants
{
    igRectangularFrame = 1,
    igEllipticalFrame = 2
};

struct __declspec(uuid("d1a617b0-3953-11ce-bb8e-08003601bb4e"))
_IFrameAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetShapeOption,put=PutShapeOption))
    enum FrameShapeConstants ShapeOption;
    __declspec(property(get=GetBorderPrinted,put=PutBorderPrinted))
    VARIANT_BOOL BorderPrinted;
    __declspec(property(get=GetMargin,put=PutMargin))
    double Margin;
    __declspec(property(get=GetBorderVisible,put=PutBorderVisible))
    VARIANT_BOOL BorderVisible;
    __declspec(property(get=GetBorderColor,put=PutBorderColor))
    long BorderColor;
    __declspec(property(get=GetBorderWidth,put=PutBorderWidth))
    double BorderWidth;
    __declspec(property(get=GetBorderDashTypeName,put=PutBorderDashTypeName))
    _bstr_t BorderDashTypeName;

    //
    // Wrapper methods for error-handling
    //

    enum FrameShapeConstants GetShapeOption ( );
    void PutShapeOption (
        enum FrameShapeConstants ShapeOption );
    VARIANT_BOOL GetBorderPrinted ( );
    void PutBorderPrinted (
        VARIANT_BOOL Printed );
    VARIANT_BOOL GetBorderVisible ( );
    void PutBorderVisible (
        VARIANT_BOOL Visible );
    double GetMargin ( );
    void PutMargin (
        double Margin );
    double GetBorderWidth ( );
    void PutBorderWidth (
        double Margin );
    long GetBorderColor ( );
    void PutBorderColor (
        long Color );
    _bstr_t GetBorderDashTypeName ( );
    void PutBorderDashTypeName (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ShapeOption (
        /*[out,retval]*/ enum FrameShapeConstants * ShapeOption ) = 0;
      virtual HRESULT __stdcall put_ShapeOption (
        /*[in]*/ enum FrameShapeConstants ShapeOption ) = 0;
      virtual HRESULT __stdcall get_BorderPrinted (
        /*[out,retval]*/ VARIANT_BOOL * Printed ) = 0;
      virtual HRESULT __stdcall put_BorderPrinted (
        /*[in]*/ VARIANT_BOOL Printed ) = 0;
      virtual HRESULT __stdcall get_BorderVisible (
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall put_BorderVisible (
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
      virtual HRESULT __stdcall get_Margin (
        /*[out,retval]*/ double * Margin ) = 0;
      virtual HRESULT __stdcall put_Margin (
        /*[in]*/ double Margin ) = 0;
      virtual HRESULT __stdcall get_BorderWidth (
        /*[out,retval]*/ double * Margin ) = 0;
      virtual HRESULT __stdcall put_BorderWidth (
        /*[in]*/ double Margin ) = 0;
      virtual HRESULT __stdcall get_BorderColor (
        /*[out,retval]*/ long * Color ) = 0;
      virtual HRESULT __stdcall put_BorderColor (
        /*[in]*/ long Color ) = 0;
      virtual HRESULT __stdcall get_BorderDashTypeName (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_BorderDashTypeName (
        /*[in]*/ BSTR Name ) = 0;
};

enum UpdateOptionConstants
{
    igUpdateAutomatic = 1,
    igUpdateOnSave = 2,
    igUpdateManual = 3
};

struct __declspec(uuid("cf0b6980-39ee-11ce-bb8e-08003601bb4e"))
_ISmartFrame2dDefaultsAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetContentsVisible,put=PutContentsVisible))
    VARIANT_BOOL ContentsVisible;
    __declspec(property(get=GetCropBottom,put=PutCropBottom))
    double CropBottom;
    __declspec(property(get=GetCropLeft,put=PutCropLeft))
    double CropLeft;
    __declspec(property(get=GetCropRight,put=PutCropRight))
    double CropRight;
    __declspec(property(get=GetCropTop,put=PutCropTop))
    double CropTop;
    __declspec(property(get=GetIsLinkPublic,put=PutIsLinkPublic))
    VARIANT_BOOL IsLinkPublic;
    __declspec(property(get=GetProtectFromSelection,put=PutProtectFromSelection))
    VARIANT_BOOL ProtectFromSelection;
    __declspec(property(get=GetRotation,put=PutRotation))
    double Rotation;
    __declspec(property(get=GetScaleFactor,put=PutScaleFactor))
    double ScaleFactor;
    __declspec(property(get=GetUpdateOption,put=PutUpdateOption))
    enum UpdateOptionConstants UpdateOption;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetContentsVisible ( );
    void PutContentsVisible (
        VARIANT_BOOL Visible );
    double GetCropBottom ( );
    void PutCropBottom (
        double Distance );
    double GetCropLeft ( );
    void PutCropLeft (
        double Distance );
    double GetCropRight ( );
    void PutCropRight (
        double Distance );
    double GetCropTop ( );
    void PutCropTop (
        double Distance );
    VARIANT_BOOL GetIsLinkPublic ( );
    void PutIsLinkPublic (
        VARIANT_BOOL IsPublic );
    VARIANT_BOOL GetProtectFromSelection ( );
    void PutProtectFromSelection (
        VARIANT_BOOL Protect );
    double GetRotation ( );
    void PutRotation (
        double Angle );
    double GetScaleFactor ( );
    void PutScaleFactor (
        double Factor );
    enum UpdateOptionConstants GetUpdateOption ( );
    void PutUpdateOption (
        enum UpdateOptionConstants option );
    HRESULT GetOrigin (
        double * xOrigin,
        double * yOrigin );
    HRESULT SetOrigin (
        double xOrigin,
        double yOrigin );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ContentsVisible (
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall put_ContentsVisible (
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
      virtual HRESULT __stdcall get_CropBottom (
        /*[out,retval]*/ double * Distance ) = 0;
      virtual HRESULT __stdcall put_CropBottom (
        /*[in]*/ double Distance ) = 0;
      virtual HRESULT __stdcall get_CropLeft (
        /*[out,retval]*/ double * Distance ) = 0;
      virtual HRESULT __stdcall put_CropLeft (
        /*[in]*/ double Distance ) = 0;
      virtual HRESULT __stdcall get_CropRight (
        /*[out,retval]*/ double * Distance ) = 0;
      virtual HRESULT __stdcall put_CropRight (
        /*[in]*/ double Distance ) = 0;
      virtual HRESULT __stdcall get_CropTop (
        /*[out,retval]*/ double * Distance ) = 0;
      virtual HRESULT __stdcall put_CropTop (
        /*[in]*/ double Distance ) = 0;
      virtual HRESULT __stdcall get_IsLinkPublic (
        /*[out,retval]*/ VARIANT_BOOL * IsPublic ) = 0;
      virtual HRESULT __stdcall put_IsLinkPublic (
        /*[in]*/ VARIANT_BOOL IsPublic ) = 0;
      virtual HRESULT __stdcall get_ProtectFromSelection (
        /*[out,retval]*/ VARIANT_BOOL * Protect ) = 0;
      virtual HRESULT __stdcall put_ProtectFromSelection (
        /*[in]*/ VARIANT_BOOL Protect ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ double * Angle ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ double Angle ) = 0;
      virtual HRESULT __stdcall get_ScaleFactor (
        /*[out,retval]*/ double * Factor ) = 0;
      virtual HRESULT __stdcall put_ScaleFactor (
        /*[in]*/ double Factor ) = 0;
      virtual HRESULT __stdcall get_UpdateOption (
        /*[out,retval]*/ enum UpdateOptionConstants * option ) = 0;
      virtual HRESULT __stdcall put_UpdateOption (
        /*[in]*/ enum UpdateOptionConstants option ) = 0;
      virtual HRESULT __stdcall raw_GetOrigin (
        /*[out]*/ double * xOrigin,
        /*[out]*/ double * yOrigin ) = 0;
      virtual HRESULT __stdcall raw_SetOrigin (
        /*[in]*/ double xOrigin,
        /*[in]*/ double yOrigin ) = 0;
};

struct __declspec(uuid("e1b49e10-3953-11ce-bb8e-08003601bb4e"))
Frame : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetShapeOption,put=PutShapeOption))
    enum FrameShapeConstants ShapeOption;
    __declspec(property(get=GetBorderPrinted,put=PutBorderPrinted))
    VARIANT_BOOL BorderPrinted;
    __declspec(property(get=GetMargin,put=PutMargin))
    double Margin;
    __declspec(property(get=GetBorderVisible,put=PutBorderVisible))
    VARIANT_BOOL BorderVisible;
    __declspec(property(get=GetBorderColor,put=PutBorderColor))
    long BorderColor;
    __declspec(property(get=GetBorderWidth,put=PutBorderWidth))
    double BorderWidth;
    __declspec(property(get=GetBorderDashTypeName,put=PutBorderDashTypeName))
    _bstr_t BorderDashTypeName;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    enum FrameShapeConstants GetShapeOption ( );
    void PutShapeOption (
        enum FrameShapeConstants _arg1 );
    VARIANT_BOOL GetBorderPrinted ( );
    void PutBorderPrinted (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetBorderVisible ( );
    void PutBorderVisible (
        VARIANT_BOOL _arg1 );
    double GetMargin ( );
    void PutMargin (
        double _arg1 );
    double GetBorderWidth ( );
    void PutBorderWidth (
        double _arg1 );
    long GetBorderColor ( );
    void PutBorderColor (
        long _arg1 );
    _bstr_t GetBorderDashTypeName ( );
    void PutBorderDashTypeName (
        _bstr_t _arg1 );
};

struct __declspec(uuid("0d6dd130-37ad-11ce-bb8e-08003601bb4e"))
SmartFrame2dStyle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetScaleFactor,put=PutScaleFactor))
    double ScaleFactor;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetUpdateOption,put=PutUpdateOption))
    enum UpdateOptionConstants UpdateOption;
    __declspec(property(get=GetShapeOption,put=PutShapeOption))
    enum FrameShapeConstants ShapeOption;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetFrameDefaults))
    FramePtr FrameDefaults;
    __declspec(property(get=GetBorderPrinted,put=PutBorderPrinted))
    VARIANT_BOOL BorderPrinted;
    __declspec(property(get=GetMargin,put=PutMargin))
    double Margin;
    __declspec(property(get=GetBorderVisible,put=PutBorderVisible))
    VARIANT_BOOL BorderVisible;
    __declspec(property(get=GetContentsVisible,put=PutContentsVisible))
    VARIANT_BOOL ContentsVisible;
    __declspec(property(get=GetBorderColor,put=PutBorderColor))
    long BorderColor;
    __declspec(property(get=GetCropBottom,put=PutCropBottom))
    double CropBottom;
    __declspec(property(get=GetCropLeft,put=PutCropLeft))
    double CropLeft;
    __declspec(property(get=GetCropRight,put=PutCropRight))
    double CropRight;
    __declspec(property(get=GetBorderWidth,put=PutBorderWidth))
    double BorderWidth;
    __declspec(property(get=GetBorderDashTypeName,put=PutBorderDashTypeName))
    _bstr_t BorderDashTypeName;
    __declspec(property(get=GetCropTop,put=PutCropTop))
    double CropTop;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetBehaviorDefaults))
    SmartFrame2dDefaultsPtr BehaviorDefaults;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    enum PlacementMethodConstants Placement;
    __declspec(property(get=GetPrinted,put=PutPrinted))
    VARIANT_BOOL Printed;
    __declspec(property(get=GetLocateChildren,put=PutLocateChildren))
    VARIANT_BOOL LocateChildren;
    __declspec(property(get=GetSizeMode,put=PutSizeMode))
    enum SizeModeConstants SizeMode;
    __declspec(property(get=GetIsLinkPublic,put=PutIsLinkPublic))
    VARIANT_BOOL IsLinkPublic;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetProtectFromSelection,put=PutProtectFromSelection))
    VARIANT_BOOL ProtectFromSelection;
    __declspec(property(get=GetRotation,put=PutRotation))
    double Rotation;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetType ( );
    SmartFrame2dDefaultsPtr GetBehaviorDefaults ( );
    FramePtr GetFrameDefaults ( );
    VARIANT_BOOL GetLocateChildren ( );
    void PutLocateChildren (
        VARIANT_BOOL _arg1 );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    enum PlacementMethodConstants GetPlacement ( );
    void PutPlacement (
        enum PlacementMethodConstants _arg1 );
    VARIANT_BOOL GetPrinted ( );
    void PutPrinted (
        VARIANT_BOOL _arg1 );
    enum SizeModeConstants GetSizeMode ( );
    void PutSizeMode (
        enum SizeModeConstants _arg1 );
    enum FrameShapeConstants GetShapeOption ( );
    void PutShapeOption (
        enum FrameShapeConstants _arg1 );
    VARIANT_BOOL GetBorderPrinted ( );
    void PutBorderPrinted (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetBorderVisible ( );
    void PutBorderVisible (
        VARIANT_BOOL _arg1 );
    double GetMargin ( );
    void PutMargin (
        double _arg1 );
    double GetBorderWidth ( );
    void PutBorderWidth (
        double _arg1 );
    long GetBorderColor ( );
    void PutBorderColor (
        long _arg1 );
    _bstr_t GetBorderDashTypeName ( );
    void PutBorderDashTypeName (
        _bstr_t _arg1 );
    VARIANT_BOOL GetContentsVisible ( );
    void PutContentsVisible (
        VARIANT_BOOL _arg1 );
    double GetCropBottom ( );
    void PutCropBottom (
        double _arg1 );
    double GetCropLeft ( );
    void PutCropLeft (
        double _arg1 );
    double GetCropRight ( );
    void PutCropRight (
        double _arg1 );
    double GetCropTop ( );
    void PutCropTop (
        double _arg1 );
    VARIANT_BOOL GetIsLinkPublic ( );
    void PutIsLinkPublic (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetProtectFromSelection ( );
    void PutProtectFromSelection (
        VARIANT_BOOL _arg1 );
    double GetRotation ( );
    void PutRotation (
        double _arg1 );
    double GetScaleFactor ( );
    void PutScaleFactor (
        double _arg1 );
    enum UpdateOptionConstants GetUpdateOption ( );
    void PutUpdateOption (
        enum UpdateOptionConstants _arg1 );
    HRESULT GetOrigin (
        double * xOrigin,
        double * yOrigin );
    HRESULT SetOrigin (
        double xOrigin,
        double yOrigin );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
};

struct __declspec(uuid("de812120-39ee-11ce-bb8e-08003601bb4e"))
SmartFrame2dDefaults : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetContentsVisible,put=PutContentsVisible))
    VARIANT_BOOL ContentsVisible;
    __declspec(property(get=GetCropBottom,put=PutCropBottom))
    double CropBottom;
    __declspec(property(get=GetCropLeft,put=PutCropLeft))
    double CropLeft;
    __declspec(property(get=GetCropRight,put=PutCropRight))
    double CropRight;
    __declspec(property(get=GetCropTop,put=PutCropTop))
    double CropTop;
    __declspec(property(get=GetIsLinkPublic,put=PutIsLinkPublic))
    VARIANT_BOOL IsLinkPublic;
    __declspec(property(get=GetProtectFromSelection,put=PutProtectFromSelection))
    VARIANT_BOOL ProtectFromSelection;
    __declspec(property(get=GetRotation,put=PutRotation))
    double Rotation;
    __declspec(property(get=GetScaleFactor,put=PutScaleFactor))
    double ScaleFactor;
    __declspec(property(get=GetUpdateOption,put=PutUpdateOption))
    enum UpdateOptionConstants UpdateOption;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    VARIANT_BOOL GetContentsVisible ( );
    void PutContentsVisible (
        VARIANT_BOOL _arg1 );
    double GetCropBottom ( );
    void PutCropBottom (
        double _arg1 );
    double GetCropLeft ( );
    void PutCropLeft (
        double _arg1 );
    double GetCropRight ( );
    void PutCropRight (
        double _arg1 );
    double GetCropTop ( );
    void PutCropTop (
        double _arg1 );
    VARIANT_BOOL GetIsLinkPublic ( );
    void PutIsLinkPublic (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetProtectFromSelection ( );
    void PutProtectFromSelection (
        VARIANT_BOOL _arg1 );
    double GetRotation ( );
    void PutRotation (
        double _arg1 );
    double GetScaleFactor ( );
    void PutScaleFactor (
        double _arg1 );
    enum UpdateOptionConstants GetUpdateOption ( );
    void PutUpdateOption (
        enum UpdateOptionConstants _arg1 );
    HRESULT GetOrigin (
        double * xOrigin,
        double * yOrigin );
    HRESULT SetOrigin (
        double xOrigin,
        double yOrigin );
};

enum PlacementMethodConstants
{
    igByOrigin = 1,
    igByFrameBoundaries = 2,
    igByCascadeMethod = 3,
    igByDefaultStateData = 4
};

enum SizeModeConstants
{
    igFrameCrops = 1,
    igFrameChangesSize = 2,
    igObjectScaled = 3
};

struct __declspec(uuid("fa81d0d0-37ac-11ce-bb8e-08003601bb4e"))
_ISmartFrame2dStyleAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetScaleFactor,put=PutScaleFactor))
    double ScaleFactor;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetUpdateOption,put=PutUpdateOption))
    enum UpdateOptionConstants UpdateOption;
    __declspec(property(get=GetShapeOption,put=PutShapeOption))
    enum FrameShapeConstants ShapeOption;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetFrameDefaults))
    FramePtr FrameDefaults;
    __declspec(property(get=GetBorderPrinted,put=PutBorderPrinted))
    VARIANT_BOOL BorderPrinted;
    __declspec(property(get=GetMargin,put=PutMargin))
    double Margin;
    __declspec(property(get=GetBorderVisible,put=PutBorderVisible))
    VARIANT_BOOL BorderVisible;
    __declspec(property(get=GetContentsVisible,put=PutContentsVisible))
    VARIANT_BOOL ContentsVisible;
    __declspec(property(get=GetBorderColor,put=PutBorderColor))
    long BorderColor;
    __declspec(property(get=GetCropBottom,put=PutCropBottom))
    double CropBottom;
    __declspec(property(get=GetCropLeft,put=PutCropLeft))
    double CropLeft;
    __declspec(property(get=GetCropRight,put=PutCropRight))
    double CropRight;
    __declspec(property(get=GetBorderWidth,put=PutBorderWidth))
    double BorderWidth;
    __declspec(property(get=GetBorderDashTypeName,put=PutBorderDashTypeName))
    _bstr_t BorderDashTypeName;
    __declspec(property(get=GetCropTop,put=PutCropTop))
    double CropTop;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetBehaviorDefaults))
    SmartFrame2dDefaultsPtr BehaviorDefaults;
    __declspec(property(get=GetPlacement,put=PutPlacement))
    enum PlacementMethodConstants Placement;
    __declspec(property(get=GetPrinted,put=PutPrinted))
    VARIANT_BOOL Printed;
    __declspec(property(get=GetLocateChildren,put=PutLocateChildren))
    VARIANT_BOOL LocateChildren;
    __declspec(property(get=GetSizeMode,put=PutSizeMode))
    enum SizeModeConstants SizeMode;
    __declspec(property(get=GetIsLinkPublic,put=PutIsLinkPublic))
    VARIANT_BOOL IsLinkPublic;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetProtectFromSelection,put=PutProtectFromSelection))
    VARIANT_BOOL ProtectFromSelection;
    __declspec(property(get=GetRotation,put=PutRotation))
    double Rotation;

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetType ( );
    SmartFrame2dDefaultsPtr GetBehaviorDefaults ( );
    FramePtr GetFrameDefaults ( );
    VARIANT_BOOL GetLocateChildren ( );
    void PutLocateChildren (
        VARIANT_BOOL Locate );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    enum PlacementMethodConstants GetPlacement ( );
    void PutPlacement (
        enum PlacementMethodConstants option );
    VARIANT_BOOL GetPrinted ( );
    void PutPrinted (
        VARIANT_BOOL Printed );
    enum SizeModeConstants GetSizeMode ( );
    void PutSizeMode (
        enum SizeModeConstants Mode );
    enum FrameShapeConstants GetShapeOption ( );
    void PutShapeOption (
        enum FrameShapeConstants ShapeOption );
    VARIANT_BOOL GetBorderPrinted ( );
    void PutBorderPrinted (
        VARIANT_BOOL Printed );
    VARIANT_BOOL GetBorderVisible ( );
    void PutBorderVisible (
        VARIANT_BOOL Visible );
    double GetMargin ( );
    void PutMargin (
        double Margin );
    double GetBorderWidth ( );
    void PutBorderWidth (
        double Margin );
    long GetBorderColor ( );
    void PutBorderColor (
        long Color );
    _bstr_t GetBorderDashTypeName ( );
    void PutBorderDashTypeName (
        _bstr_t Name );
    VARIANT_BOOL GetContentsVisible ( );
    void PutContentsVisible (
        VARIANT_BOOL Visible );
    double GetCropBottom ( );
    void PutCropBottom (
        double Distance );
    double GetCropLeft ( );
    void PutCropLeft (
        double Distance );
    double GetCropRight ( );
    void PutCropRight (
        double Distance );
    double GetCropTop ( );
    void PutCropTop (
        double Distance );
    VARIANT_BOOL GetIsLinkPublic ( );
    void PutIsLinkPublic (
        VARIANT_BOOL IsPublic );
    VARIANT_BOOL GetProtectFromSelection ( );
    void PutProtectFromSelection (
        VARIANT_BOOL Protect );
    double GetRotation ( );
    void PutRotation (
        double Angle );
    double GetScaleFactor ( );
    void PutScaleFactor (
        double Factor );
    enum UpdateOptionConstants GetUpdateOption ( );
    void PutUpdateOption (
        enum UpdateOptionConstants option );
    HRESULT GetOrigin (
        double * xOrigin,
        double * yOrigin );
    HRESULT SetOrigin (
        double xOrigin,
        double yOrigin );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * Type ) = 0;
      virtual HRESULT __stdcall get_BehaviorDefaults (
        /*[out,retval]*/ struct SmartFrame2dDefaults * * pObj ) = 0;
      virtual HRESULT __stdcall get_FrameDefaults (
        /*[out,retval]*/ struct Frame * * Frame ) = 0;
      virtual HRESULT __stdcall get_LocateChildren (
        /*[out,retval]*/ VARIANT_BOOL * Locate ) = 0;
      virtual HRESULT __stdcall put_LocateChildren (
        /*[in]*/ VARIANT_BOOL Locate ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Placement (
        /*[out,retval]*/ enum PlacementMethodConstants * option ) = 0;
      virtual HRESULT __stdcall put_Placement (
        /*[in]*/ enum PlacementMethodConstants option ) = 0;
      virtual HRESULT __stdcall get_Printed (
        /*[out,retval]*/ VARIANT_BOOL * Printed ) = 0;
      virtual HRESULT __stdcall put_Printed (
        /*[in]*/ VARIANT_BOOL Printed ) = 0;
      virtual HRESULT __stdcall get_SizeMode (
        /*[out,retval]*/ enum SizeModeConstants * Mode ) = 0;
      virtual HRESULT __stdcall put_SizeMode (
        /*[in]*/ enum SizeModeConstants Mode ) = 0;
      virtual HRESULT __stdcall get_ShapeOption (
        /*[out,retval]*/ enum FrameShapeConstants * ShapeOption ) = 0;
      virtual HRESULT __stdcall put_ShapeOption (
        /*[in]*/ enum FrameShapeConstants ShapeOption ) = 0;
      virtual HRESULT __stdcall get_BorderPrinted (
        /*[out,retval]*/ VARIANT_BOOL * Printed ) = 0;
      virtual HRESULT __stdcall put_BorderPrinted (
        /*[in]*/ VARIANT_BOOL Printed ) = 0;
      virtual HRESULT __stdcall get_BorderVisible (
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall put_BorderVisible (
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
      virtual HRESULT __stdcall get_Margin (
        /*[out,retval]*/ double * Margin ) = 0;
      virtual HRESULT __stdcall put_Margin (
        /*[in]*/ double Margin ) = 0;
      virtual HRESULT __stdcall get_BorderWidth (
        /*[out,retval]*/ double * Margin ) = 0;
      virtual HRESULT __stdcall put_BorderWidth (
        /*[in]*/ double Margin ) = 0;
      virtual HRESULT __stdcall get_BorderColor (
        /*[out,retval]*/ long * Color ) = 0;
      virtual HRESULT __stdcall put_BorderColor (
        /*[in]*/ long Color ) = 0;
      virtual HRESULT __stdcall get_BorderDashTypeName (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_BorderDashTypeName (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_ContentsVisible (
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall put_ContentsVisible (
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
      virtual HRESULT __stdcall get_CropBottom (
        /*[out,retval]*/ double * Distance ) = 0;
      virtual HRESULT __stdcall put_CropBottom (
        /*[in]*/ double Distance ) = 0;
      virtual HRESULT __stdcall get_CropLeft (
        /*[out,retval]*/ double * Distance ) = 0;
      virtual HRESULT __stdcall put_CropLeft (
        /*[in]*/ double Distance ) = 0;
      virtual HRESULT __stdcall get_CropRight (
        /*[out,retval]*/ double * Distance ) = 0;
      virtual HRESULT __stdcall put_CropRight (
        /*[in]*/ double Distance ) = 0;
      virtual HRESULT __stdcall get_CropTop (
        /*[out,retval]*/ double * Distance ) = 0;
      virtual HRESULT __stdcall put_CropTop (
        /*[in]*/ double Distance ) = 0;
      virtual HRESULT __stdcall get_IsLinkPublic (
        /*[out,retval]*/ VARIANT_BOOL * IsPublic ) = 0;
      virtual HRESULT __stdcall put_IsLinkPublic (
        /*[in]*/ VARIANT_BOOL IsPublic ) = 0;
      virtual HRESULT __stdcall get_ProtectFromSelection (
        /*[out,retval]*/ VARIANT_BOOL * Protect ) = 0;
      virtual HRESULT __stdcall put_ProtectFromSelection (
        /*[in]*/ VARIANT_BOOL Protect ) = 0;
      virtual HRESULT __stdcall get_Rotation (
        /*[out,retval]*/ double * Angle ) = 0;
      virtual HRESULT __stdcall put_Rotation (
        /*[in]*/ double Angle ) = 0;
      virtual HRESULT __stdcall get_ScaleFactor (
        /*[out,retval]*/ double * Factor ) = 0;
      virtual HRESULT __stdcall put_ScaleFactor (
        /*[in]*/ double Factor ) = 0;
      virtual HRESULT __stdcall get_UpdateOption (
        /*[out,retval]*/ enum UpdateOptionConstants * option ) = 0;
      virtual HRESULT __stdcall put_UpdateOption (
        /*[in]*/ enum UpdateOptionConstants option ) = 0;
      virtual HRESULT __stdcall raw_GetOrigin (
        /*[out]*/ double * xOrigin,
        /*[out]*/ double * yOrigin ) = 0;
      virtual HRESULT __stdcall raw_SetOrigin (
        /*[in]*/ double xOrigin,
        /*[in]*/ double yOrigin ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
};

enum DisplayTypeConstants
{
    igDisplayTypeContents = 1,
    igDisplayTypeIcon = 2,
    igDisplayTypeThumbnail = 3
};

struct __declspec(uuid("f4f646e0-7c23-11ce-a80e-08003601dada"))
_ISmartFrame2dAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetFrame))
    FramePtr Frame;
    __declspec(property(get=GetStyle,put=PutStyle))
    SmartFrame2dStylePtr Style;
    __declspec(property(get=GetContentsVisible,put=PutContentsVisible))
    VARIANT_BOOL ContentsVisible;
    __declspec(property(get=GetCropRight,put=PutCropRight))
    double CropRight;
    __declspec(property(get=GetCropTop,put=PutCropTop))
    double CropTop;
    __declspec(property(get=GetCropBottom,put=PutCropBottom))
    double CropBottom;
    __declspec(property(get=GetCropLeft,put=PutCropLeft))
    double CropLeft;
    __declspec(property(get=GetDescription,put=PutDescription))
    _bstr_t Description;
    __declspec(property(get=GetDisplayType,put=PutDisplayType))
    enum DisplayTypeConstants DisplayType;
    __declspec(property(get=GetIsLink))
    VARIANT_BOOL IsLink;
    __declspec(property(get=GetIsLinkPublic,put=PutIsLinkPublic))
    VARIANT_BOOL IsLinkPublic;
    __declspec(property(get=GetObjectType))
    _bstr_t ObjectType;
    __declspec(property(get=GetObjectVerbsCount))
    long ObjectVerbsCount;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[][];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetProtectFromSelection,put=PutProtectFromSelection))
    VARIANT_BOOL ProtectFromSelection;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetRotationAngle,put=PutRotationAngle))
    double RotationAngle;
    __declspec(property(get=GetScaleFactor,put=PutScaleFactor))
    double ScaleFactor;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetObject))
    IDispatchPtr Object;
    __declspec(property(get=GetShapeOption,put=PutShapeOption))
    enum FrameShapeConstants ShapeOption;
    __declspec(property(get=GetAutomaticLinkUpdate,put=PutAutomaticLinkUpdate))
    VARIANT_BOOL AutomaticLinkUpdate;
    __declspec(property(get=GetBorderPrinted,put=PutBorderPrinted))
    VARIANT_BOOL BorderPrinted;
    __declspec(property(get=GetBorderVisible,put=PutBorderVisible))
    VARIANT_BOOL BorderVisible;
    __declspec(property(get=GetMargin,put=PutMargin))
    double Margin;
    __declspec(property(get=GetBorderWidth,put=PutBorderWidth))
    double BorderWidth;
    __declspec(property(get=GetBorderColor,put=PutBorderColor))
    long BorderColor;
    __declspec(property(get=GetBorderDashTypeName,put=PutBorderDashTypeName))
    _bstr_t BorderDashTypeName;
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;

    //
    // Wrapper methods for error-handling
    //

    FramePtr GetFrame ( );
    void PutStyle (
        struct SmartFrame2dStyle * Style );
    SmartFrame2dStylePtr GetStyle ( );
    void PutContentsVisible (
        VARIANT_BOOL Visible );
    VARIANT_BOOL GetContentsVisible ( );
    void PutCropRight (
        double Distance );
    double GetCropRight ( );
    void PutCropTop (
        double Offset );
    double GetCropTop ( );
    void PutCropBottom (
        double Distance );
    double GetCropBottom ( );
    void PutCropLeft (
        double Distance );
    double GetCropLeft ( );
    void PutDescription (
        _bstr_t Description );
    _bstr_t GetDescription ( );
    void PutDisplayType (
        enum DisplayTypeConstants Type );
    enum DisplayTypeConstants GetDisplayType ( );
    VARIANT_BOOL GetIsLink ( );
    void PutIsLinkPublic (
        VARIANT_BOOL LinkPublic );
    VARIANT_BOOL GetIsLinkPublic ( );
    _bstr_t GetObjectType ( );
    long GetObjectVerbsCount ( );
    void PutProtectFromSelection (
        VARIANT_BOOL Protect );
    VARIANT_BOOL GetProtectFromSelection ( );
    void PutRotationAngle (
        double Angle );
    double GetRotationAngle ( );
    void PutScaleFactor (
        double ScaleFactor );
    double GetScaleFactor ( );
    IDispatchPtr GetObject ( );
    void PutAutomaticLinkUpdate (
        VARIANT_BOOL Automatic );
    VARIANT_BOOL GetAutomaticLinkUpdate ( );
    _bstr_t LinkMoniker (
        const _variant_t & WantDisplayableVersion = vtMissing );
    _bstr_t ObjectVerbs (
        const _variant_t & Index = vtMissing );
    HRESULT GetOrigin (
        double * x,
        double * y );
    HRESULT SetOrigin (
        double x,
        double y );
    HRESULT ChangeCrop (
        double top,
        double bottom,
        double left,
        double right );
    HRESULT CreateLink (
        const _variant_t & SourceDoc = vtMissing,
        const _variant_t & SourceItem = vtMissing );
    HRESULT CreateEmbed (
        const _variant_t & SourceDoc = vtMissing,
        const _variant_t & ObjectType = vtMissing );
    HRESULT DoVerb (
        const _variant_t & DoVerb = vtMissing );
    HRESULT Fit ( );
    HRESULT Update ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse,
        long Lcid = 0 );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    enum FrameShapeConstants GetShapeOption ( );
    void PutShapeOption (
        enum FrameShapeConstants ShapeOption );
    VARIANT_BOOL GetBorderPrinted ( );
    void PutBorderPrinted (
        VARIANT_BOOL Printed );
    VARIANT_BOOL GetBorderVisible ( );
    void PutBorderVisible (
        VARIANT_BOOL Visible );
    double GetMargin ( );
    void PutMargin (
        double Margin );
    double GetBorderWidth ( );
    void PutBorderWidth (
        double Margin );
    long GetBorderColor ( );
    void PutBorderColor (
        long Color );
    _bstr_t GetBorderDashTypeName ( );
    void PutBorderDashTypeName (
        _bstr_t Name );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    void PutLayer (
        _bstr_t Layer );
    _bstr_t GetLayer ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Frame (
        /*[out,retval]*/ struct Frame * * Frame ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ struct SmartFrame2dStyle * Style ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct SmartFrame2dStyle * * Style ) = 0;
      virtual HRESULT __stdcall put_ContentsVisible (
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
      virtual HRESULT __stdcall get_ContentsVisible (
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall put_CropRight (
        /*[in]*/ double Distance ) = 0;
      virtual HRESULT __stdcall get_CropRight (
        /*[out,retval]*/ double * Distance ) = 0;
      virtual HRESULT __stdcall put_CropTop (
        /*[in]*/ double Offset ) = 0;
      virtual HRESULT __stdcall get_CropTop (
        /*[out,retval]*/ double * Offset ) = 0;
      virtual HRESULT __stdcall put_CropBottom (
        /*[in]*/ double Distance ) = 0;
      virtual HRESULT __stdcall get_CropBottom (
        /*[out,retval]*/ double * Distance ) = 0;
      virtual HRESULT __stdcall put_CropLeft (
        /*[in]*/ double Distance ) = 0;
      virtual HRESULT __stdcall get_CropLeft (
        /*[out,retval]*/ double * Distance ) = 0;
      virtual HRESULT __stdcall put_Description (
        /*[in]*/ BSTR Description ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * Description ) = 0;
      virtual HRESULT __stdcall put_DisplayType (
        /*[in]*/ enum DisplayTypeConstants Type ) = 0;
      virtual HRESULT __stdcall get_DisplayType (
        /*[out,retval]*/ enum DisplayTypeConstants * Type ) = 0;
      virtual HRESULT __stdcall get_IsLink (
        /*[out,retval]*/ VARIANT_BOOL * IsLink ) = 0;
      virtual HRESULT __stdcall put_IsLinkPublic (
        /*[in]*/ VARIANT_BOOL LinkPublic ) = 0;
      virtual HRESULT __stdcall get_IsLinkPublic (
        /*[out,retval]*/ VARIANT_BOOL * LinkPublic ) = 0;
      virtual HRESULT __stdcall get_ObjectType (
        /*[out,retval]*/ BSTR * Type ) = 0;
      virtual HRESULT __stdcall get_ObjectVerbsCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall put_ProtectFromSelection (
        /*[in]*/ VARIANT_BOOL Protect ) = 0;
      virtual HRESULT __stdcall get_ProtectFromSelection (
        /*[out,retval]*/ VARIANT_BOOL * Protect ) = 0;
      virtual HRESULT __stdcall put_RotationAngle (
        /*[in]*/ double Angle ) = 0;
      virtual HRESULT __stdcall get_RotationAngle (
        /*[out,retval]*/ double * Angle ) = 0;
      virtual HRESULT __stdcall put_ScaleFactor (
        /*[in]*/ double ScaleFactor ) = 0;
      virtual HRESULT __stdcall get_ScaleFactor (
        /*[out,retval]*/ double * ScaleFactor ) = 0;
      virtual HRESULT __stdcall get_Object (
        /*[out,retval]*/ IDispatch * * OLEObject ) = 0;
      virtual HRESULT __stdcall put_AutomaticLinkUpdate (
        /*[in]*/ VARIANT_BOOL Automatic ) = 0;
      virtual HRESULT __stdcall get_AutomaticLinkUpdate (
        /*[out,retval]*/ VARIANT_BOOL * Automatic ) = 0;
      virtual HRESULT __stdcall raw_LinkMoniker (
        /*[in]*/ VARIANT WantDisplayableVersion,
        /*[out,retval]*/ BSTR * Moniker ) = 0;
      virtual HRESULT __stdcall raw_ObjectVerbs (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ BSTR * verb ) = 0;
      virtual HRESULT __stdcall raw_GetOrigin (
        /*[out]*/ double * x,
        /*[out]*/ double * y ) = 0;
      virtual HRESULT __stdcall raw_SetOrigin (
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_ChangeCrop (
        /*[in]*/ double top,
        /*[in]*/ double bottom,
        /*[in]*/ double left,
        /*[in]*/ double right ) = 0;
      virtual HRESULT __stdcall raw_CreateLink (
        /*[in]*/ VARIANT SourceDoc = vtMissing,
        /*[in]*/ VARIANT SourceItem = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_CreateEmbed (
        /*[in]*/ VARIANT SourceDoc = vtMissing,
        /*[in]*/ VARIANT ObjectType = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_DoVerb (
        /*[in]*/ VARIANT DoVerb = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Fit ( ) = 0;
      virtual HRESULT __stdcall raw_Update ( ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[in]*/ VARIANT Recurse,
        /*[in,lcid]*/ long Lcid,
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * Type ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * ZOrder ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[in]*/ VARIANT Recurse,
        /*[out,retval]*/ BSTR * Key ) = 0;
      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ IDispatch * * Document ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ double XFrom,
        /*[in]*/ double YFrom,
        /*[in]*/ double XTo,
        /*[in]*/ double YTo ) = 0;
      virtual HRESULT __stdcall raw_Scale (
        /*[in]*/ double Factor ) = 0;
      virtual HRESULT __stdcall raw_Rotate (
        /*[in]*/ double Angle,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[out]*/ double * XMinimum,
        /*[out]*/ double * YMinimum,
        /*[out]*/ double * XMaximum,
        /*[out]*/ double * YMaximum ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ VARIANT XDistance,
        /*[in]*/ VARIANT YDistance,
        /*[out,retval]*/ IDispatch * * NewObject ) = 0;
      virtual HRESULT __stdcall raw_Mirror (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ VARIANT BooleanCopyFlag,
        /*[out,retval]*/ IDispatch * * Object ) = 0;
      virtual HRESULT __stdcall raw_BringToFront ( ) = 0;
      virtual HRESULT __stdcall raw_BringForward ( ) = 0;
      virtual HRESULT __stdcall raw_SendToBack ( ) = 0;
      virtual HRESULT __stdcall raw_SendBackward ( ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall get_ShapeOption (
        /*[out,retval]*/ enum FrameShapeConstants * ShapeOption ) = 0;
      virtual HRESULT __stdcall put_ShapeOption (
        /*[in]*/ enum FrameShapeConstants ShapeOption ) = 0;
      virtual HRESULT __stdcall get_BorderPrinted (
        /*[out,retval]*/ VARIANT_BOOL * Printed ) = 0;
      virtual HRESULT __stdcall put_BorderPrinted (
        /*[in]*/ VARIANT_BOOL Printed ) = 0;
      virtual HRESULT __stdcall get_BorderVisible (
        /*[out,retval]*/ VARIANT_BOOL * Visible ) = 0;
      virtual HRESULT __stdcall put_BorderVisible (
        /*[in]*/ VARIANT_BOOL Visible ) = 0;
      virtual HRESULT __stdcall get_Margin (
        /*[out,retval]*/ double * Margin ) = 0;
      virtual HRESULT __stdcall put_Margin (
        /*[in]*/ double Margin ) = 0;
      virtual HRESULT __stdcall get_BorderWidth (
        /*[out,retval]*/ double * Margin ) = 0;
      virtual HRESULT __stdcall put_BorderWidth (
        /*[in]*/ double Margin ) = 0;
      virtual HRESULT __stdcall get_BorderColor (
        /*[out,retval]*/ long * Color ) = 0;
      virtual HRESULT __stdcall put_BorderColor (
        /*[in]*/ long Color ) = 0;
      virtual HRESULT __stdcall get_BorderDashTypeName (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_BorderDashTypeName (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_KeyPointCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_GetKeyPoint (
        /*[in]*/ long Index,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ enum TGFramework::KeyPointType * KeypointType,
        /*[out]*/ long * HandleType ) = 0;
      virtual HRESULT __stdcall raw_SetKeyPoint (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
      virtual HRESULT __stdcall put_Layer (
        /*[in]*/ BSTR Layer ) = 0;
      virtual HRESULT __stdcall get_Layer (
        /*[out,retval]*/ BSTR * Layer ) = 0;
};

struct __declspec(uuid("3c315550-7c28-11ce-a80e-08003601dada"))
SmartFrame2d : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFrame))
    FramePtr Frame;
    __declspec(property(get=GetStyle,put=PutStyle))
    SmartFrame2dStylePtr Style;
    __declspec(property(get=GetContentsVisible,put=PutContentsVisible))
    VARIANT_BOOL ContentsVisible;
    __declspec(property(get=GetCropRight,put=PutCropRight))
    double CropRight;
    __declspec(property(get=GetCropTop,put=PutCropTop))
    double CropTop;
    __declspec(property(get=GetCropBottom,put=PutCropBottom))
    double CropBottom;
    __declspec(property(get=GetCropLeft,put=PutCropLeft))
    double CropLeft;
    __declspec(property(get=GetDescription,put=PutDescription))
    _bstr_t Description;
    __declspec(property(get=GetDisplayType,put=PutDisplayType))
    enum DisplayTypeConstants DisplayType;
    __declspec(property(get=GetIsLink))
    VARIANT_BOOL IsLink;
    __declspec(property(get=GetIsLinkPublic,put=PutIsLinkPublic))
    VARIANT_BOOL IsLinkPublic;
    __declspec(property(get=GetObjectType))
    _bstr_t ObjectType;
    __declspec(property(get=GetObjectVerbsCount))
    long ObjectVerbsCount;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetProtectFromSelection,put=PutProtectFromSelection))
    VARIANT_BOOL ProtectFromSelection;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetRotationAngle,put=PutRotationAngle))
    double RotationAngle;
    __declspec(property(get=GetScaleFactor,put=PutScaleFactor))
    double ScaleFactor;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetObject))
    IDispatchPtr Object;
    __declspec(property(get=GetShapeOption,put=PutShapeOption))
    enum FrameShapeConstants ShapeOption;
    __declspec(property(get=GetAutomaticLinkUpdate,put=PutAutomaticLinkUpdate))
    VARIANT_BOOL AutomaticLinkUpdate;
    __declspec(property(get=GetBorderPrinted,put=PutBorderPrinted))
    VARIANT_BOOL BorderPrinted;
    __declspec(property(get=GetBorderVisible,put=PutBorderVisible))
    VARIANT_BOOL BorderVisible;
    __declspec(property(get=GetMargin,put=PutMargin))
    double Margin;
    __declspec(property(get=GetBorderWidth,put=PutBorderWidth))
    double BorderWidth;
    __declspec(property(get=GetBorderColor,put=PutBorderColor))
    long BorderColor;
    __declspec(property(get=GetBorderDashTypeName,put=PutBorderDashTypeName))
    _bstr_t BorderDashTypeName;
    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    FramePtr GetFrame ( );
    void PutStyle (
        struct SmartFrame2dStyle * _arg1 );
    SmartFrame2dStylePtr GetStyle ( );
    void PutContentsVisible (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetContentsVisible ( );
    void PutCropRight (
        double _arg1 );
    double GetCropRight ( );
    void PutCropTop (
        double _arg1 );
    double GetCropTop ( );
    void PutCropBottom (
        double _arg1 );
    double GetCropBottom ( );
    void PutCropLeft (
        double _arg1 );
    double GetCropLeft ( );
    void PutDescription (
        _bstr_t _arg1 );
    _bstr_t GetDescription ( );
    void PutDisplayType (
        enum DisplayTypeConstants _arg1 );
    enum DisplayTypeConstants GetDisplayType ( );
    VARIANT_BOOL GetIsLink ( );
    void PutIsLinkPublic (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetIsLinkPublic ( );
    _bstr_t GetObjectType ( );
    long GetObjectVerbsCount ( );
    void PutProtectFromSelection (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetProtectFromSelection ( );
    void PutRotationAngle (
        double _arg1 );
    double GetRotationAngle ( );
    void PutScaleFactor (
        double _arg1 );
    double GetScaleFactor ( );
    IDispatchPtr GetObject ( );
    void PutAutomaticLinkUpdate (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetAutomaticLinkUpdate ( );
    _bstr_t LinkMoniker (
        const _variant_t & WantDisplayableVersion = vtMissing );
    _bstr_t ObjectVerbs (
        const _variant_t & Index = vtMissing );
    HRESULT GetOrigin (
        double * x,
        double * y );
    HRESULT SetOrigin (
        double x,
        double y );
    HRESULT ChangeCrop (
        double top,
        double bottom,
        double left,
        double right );
    HRESULT CreateLink (
        const _variant_t & SourceDoc = vtMissing,
        const _variant_t & SourceItem = vtMissing );
    HRESULT CreateEmbed (
        const _variant_t & SourceDoc = vtMissing,
        const _variant_t & ObjectType = vtMissing );
    HRESULT DoVerb (
        const _variant_t & DoVerb = vtMissing );
    HRESULT Fit ( );
    HRESULT Update ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    enum FrameShapeConstants GetShapeOption ( );
    void PutShapeOption (
        enum FrameShapeConstants _arg1 );
    VARIANT_BOOL GetBorderPrinted ( );
    void PutBorderPrinted (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetBorderVisible ( );
    void PutBorderVisible (
        VARIANT_BOOL _arg1 );
    double GetMargin ( );
    void PutMargin (
        double _arg1 );
    double GetBorderWidth ( );
    void PutBorderWidth (
        double _arg1 );
    long GetBorderColor ( );
    void PutBorderColor (
        long _arg1 );
    _bstr_t GetBorderDashTypeName ( );
    void PutBorderDashTypeName (
        _bstr_t _arg1 );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    void PutLayer (
        _bstr_t _arg1 );
    _bstr_t GetLayer ( );
};

struct __declspec(uuid("e8be6f90-7c24-11ce-a80e-08003601dada"))
_ISmartFrames2dAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    SmartFrame2dPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    SmartFrame2dPtr AddBy2Points (
        _bstr_t StyleName,
        double x1,
        double y1,
        double x2,
        double y2 );
    SmartFrame2dPtr AddByOrigin (
        _bstr_t StyleName,
        double x1,
        double y1,
        double top,
        double bottom,
        double left,
        double right );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct SmartFrame2d * * pItem ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pEnum ) = 0;
      virtual HRESULT __stdcall raw_AddBy2Points (
        /*[in]*/ BSTR StyleName,
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[out,retval]*/ struct SmartFrame2d * * SmartFrame ) = 0;
      virtual HRESULT __stdcall raw_AddByOrigin (
        /*[in]*/ BSTR StyleName,
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double top,
        /*[in]*/ double bottom,
        /*[in]*/ double left,
        /*[in]*/ double right,
        /*[out,retval]*/ struct SmartFrame2d * * SmartFrame ) = 0;
};

struct __declspec(uuid("cb525fa0-37ac-11ce-bb8e-08003601bb4e"))
_ISmartFrame2dStylesAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    SmartFrame2dStylePtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    TGFramework::ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    long GetType ( );
    SmartFrame2dStylePtr Add (
        _bstr_t Name,
        _bstr_t Parent );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct SmartFrame2dStyle * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * ppUnkEnum ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * Type ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Parent,
        /*[out,retval]*/ struct SmartFrame2dStyle * * Style ) = 0;
};

struct __declspec(uuid("8d842ba1-e9f0-11ce-9dfd-08003601e012"))
_IVFSetAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    HRESULT SetCriteria (
        _bstr_t Name,
        long Scope,
        long Color,
        double Width,
        _bstr_t LINESTYLE,
        VARIANT_BOOL DISPLAY,
        VARIANT_BOOL Locate,
        long flagsToSet );
    HRESULT GetCriteria (
        _bstr_t Name,
        long Scope,
        long * Color,
        double * Width,
        BSTR * LINESTYLE,
        VARIANT_BOOL * DISPLAY,
        VARIANT_BOOL * Locate,
        long flagsToSet );
    HRESULT ResetAll (
        long Scope );
    HRESULT SetAll (
        long Scope,
        long Color,
        double Width,
        _bstr_t LINESTYLE,
        VARIANT_BOOL DISPLAY,
        VARIANT_BOOL Locate,
        long flagsToSet );
    HRESULT CheckForDefault (
        VARIANT_BOOL * bSetting );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * pApplication ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_SetCriteria (
        /*[in]*/ BSTR Name,
        /*[in]*/ long Scope,
        /*[in]*/ long Color,
        /*[in]*/ double Width,
        /*[in]*/ BSTR LINESTYLE,
        /*[in]*/ VARIANT_BOOL DISPLAY,
        /*[in]*/ VARIANT_BOOL Locate,
        /*[in]*/ long flagsToSet ) = 0;
      virtual HRESULT __stdcall raw_GetCriteria (
        /*[in]*/ BSTR Name,
        /*[in]*/ long Scope,
        /*[out]*/ long * Color,
        /*[out]*/ double * Width,
        /*[out]*/ BSTR * LINESTYLE,
        /*[out]*/ VARIANT_BOOL * DISPLAY,
        /*[out]*/ VARIANT_BOOL * Locate,
        /*[in]*/ long flagsToSet ) = 0;
      virtual HRESULT __stdcall raw_ResetAll (
        /*[in]*/ long Scope ) = 0;
      virtual HRESULT __stdcall raw_SetAll (
        /*[in]*/ long Scope,
        /*[in]*/ long Color,
        /*[in]*/ double Width,
        /*[in]*/ BSTR LINESTYLE,
        /*[in]*/ VARIANT_BOOL DISPLAY,
        /*[in]*/ VARIANT_BOOL Locate,
        /*[in]*/ long flagsToSet ) = 0;
      virtual HRESULT __stdcall raw_CheckForDefault (
        /*[out]*/ VARIANT_BOOL * bSetting ) = 0;
};

enum StaggerTypeConstants
{
    seNoStagger = 0,
    seRowStagger = 1,
    seColumnStagger = 2
};

enum PatternOffsetTypeConstants
{
    sePatternFitOffset = 0,
    sePatternFillOffset = 1,
    sePatternFixedOffset = 2,
    sePatternChordLengthOffset = 3
};

struct __declspec(uuid("e52d3d25-4df9-11d2-a478-080036ecf202"))
_IRectangularPattern2dAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetStaggerType,put=PutStaggerType))
    enum StaggerTypeConstants StaggerType;
    __declspec(property(get=GetStaggerOffset,put=PutStaggerOffset))
    double StaggerOffset;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetStaggerOffsetHalf,put=PutStaggerOffsetHalf))
    VARIANT_BOOL StaggerOffsetHalf;
    __declspec(property(get=GetStaggerIncludeLast,put=PutStaggerIncludeLast))
    VARIANT_BOOL StaggerIncludeLast;
    __declspec(property(get=GetOffsetType,put=PutOffsetType))
    enum PatternOffsetTypeConstants OffsetType;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetXSpace,put=PutXSpace))
    double XSpace;
    __declspec(property(get=GetYSpace,put=PutYSpace))
    double YSpace;
    __declspec(property(get=GetXCount,put=PutXCount))
    long XCount;
    __declspec(property(get=GetYCount,put=PutYCount))
    long YCount;
    __declspec(property(get=GetReferenceOccurrence,put=PutReferenceOccurrence))
    long ReferenceOccurrence;
    __declspec(property(get=GetSuppressed,put=PutSuppressed))
    VARIANT_BOOL Suppressed[];
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetType))
    long Type;

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    void PutStaggerType (
        enum StaggerTypeConstants StaggerType );
    enum StaggerTypeConstants GetStaggerType ( );
    void PutStaggerOffset (
        double StaggerOffset );
    double GetStaggerOffset ( );
    VARIANT_BOOL GetStaggerOffsetHalf ( );
    void PutStaggerOffsetHalf (
        VARIANT_BOOL HalfOffset );
    VARIANT_BOOL GetStaggerIncludeLast ( );
    void PutStaggerIncludeLast (
        VARIANT_BOOL StaggerIncludeLast );
    enum PatternOffsetTypeConstants GetOffsetType ( );
    void PutOffsetType (
        enum PatternOffsetTypeConstants OffsetType );
    double GetWidth ( );
    void PutWidth (
        double Width );
    double GetHeight ( );
    void PutHeight (
        double Height );
    double GetXSpace ( );
    void PutXSpace (
        double space );
    double GetYSpace ( );
    void PutYSpace (
        double space );
    long GetXCount ( );
    void PutXCount (
        long XCount );
    long GetYCount ( );
    void PutYCount (
        long YCount );
    long GetReferenceOccurrence ( );
    void PutReferenceOccurrence (
        long RefOccurrence );
    VARIANT_BOOL GetSuppressed (
        long Occurrence );
    void PutSuppressed (
        long Occurrence,
        VARIANT_BOOL IsSuppressed );
    HRESULT GetGeometry (
        struct Line2d * * Line1,
        struct Line2d * * Line2,
        struct Line2d * * Line3,
        struct Line2d * * Line4 );
    void PutLayer (
        _bstr_t Layer );
    _bstr_t GetLayer ( );
    long GetType ( );
    SAFEARRAY * GetParentGeometries ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall put_StaggerType (
        /*[in]*/ enum StaggerTypeConstants StaggerType ) = 0;
      virtual HRESULT __stdcall get_StaggerType (
        /*[out,retval]*/ enum StaggerTypeConstants * StaggerType ) = 0;
      virtual HRESULT __stdcall put_StaggerOffset (
        /*[in]*/ double StaggerOffset ) = 0;
      virtual HRESULT __stdcall get_StaggerOffset (
        /*[out,retval]*/ double * StaggerOffset ) = 0;
      virtual HRESULT __stdcall get_StaggerOffsetHalf (
        /*[out,retval]*/ VARIANT_BOOL * HalfOffset ) = 0;
      virtual HRESULT __stdcall put_StaggerOffsetHalf (
        /*[in]*/ VARIANT_BOOL HalfOffset ) = 0;
      virtual HRESULT __stdcall get_StaggerIncludeLast (
        /*[out,retval]*/ VARIANT_BOOL * StaggerIncludeLast ) = 0;
      virtual HRESULT __stdcall put_StaggerIncludeLast (
        /*[in]*/ VARIANT_BOOL StaggerIncludeLast ) = 0;
      virtual HRESULT __stdcall get_OffsetType (
        /*[out,retval]*/ enum PatternOffsetTypeConstants * OffsetType ) = 0;
      virtual HRESULT __stdcall put_OffsetType (
        /*[in]*/ enum PatternOffsetTypeConstants OffsetType ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * Width ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double Width ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double Height ) = 0;
      virtual HRESULT __stdcall get_XSpace (
        /*[out,retval]*/ double * space ) = 0;
      virtual HRESULT __stdcall put_XSpace (
        /*[in]*/ double space ) = 0;
      virtual HRESULT __stdcall get_YSpace (
        /*[out,retval]*/ double * space ) = 0;
      virtual HRESULT __stdcall put_YSpace (
        /*[in]*/ double space ) = 0;
      virtual HRESULT __stdcall get_XCount (
        /*[out,retval]*/ long * XCount ) = 0;
      virtual HRESULT __stdcall put_XCount (
        /*[in]*/ long XCount ) = 0;
      virtual HRESULT __stdcall get_YCount (
        /*[out,retval]*/ long * YCount ) = 0;
      virtual HRESULT __stdcall put_YCount (
        /*[in]*/ long YCount ) = 0;
      virtual HRESULT __stdcall get_ReferenceOccurrence (
        /*[out,retval]*/ long * RefOccurrence ) = 0;
      virtual HRESULT __stdcall put_ReferenceOccurrence (
        /*[in]*/ long RefOccurrence ) = 0;
      virtual HRESULT __stdcall get_Suppressed (
        /*[in]*/ long Occurrence,
        /*[out,retval]*/ VARIANT_BOOL * IsSuppressed ) = 0;
      virtual HRESULT __stdcall put_Suppressed (
        /*[in]*/ long Occurrence,
        /*[in]*/ VARIANT_BOOL IsSuppressed ) = 0;
      virtual HRESULT __stdcall raw_GetGeometry (
        /*[out]*/ struct Line2d * * Line1,
        /*[out]*/ struct Line2d * * Line2,
        /*[out]*/ struct Line2d * * Line3,
        /*[out]*/ struct Line2d * * Line4 ) = 0;
      virtual HRESULT __stdcall put_Layer (
        /*[in]*/ BSTR Layer ) = 0;
      virtual HRESULT __stdcall get_Layer (
        /*[out,retval]*/ BSTR * Layer ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * Type ) = 0;
      virtual HRESULT __stdcall raw_GetParentGeometries (
        /*[out,retval]*/ SAFEARRAY * * ParentGeoms ) = 0;
};

struct __declspec(uuid("7f943b1a-4eb5-11d2-a479-080036ecf202"))
RectangularPattern2d : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetStaggerType,put=PutStaggerType))
    enum StaggerTypeConstants StaggerType;
    __declspec(property(get=GetStaggerOffset,put=PutStaggerOffset))
    double StaggerOffset;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetStaggerOffsetHalf,put=PutStaggerOffsetHalf))
    VARIANT_BOOL StaggerOffsetHalf;
    __declspec(property(get=GetStaggerIncludeLast,put=PutStaggerIncludeLast))
    VARIANT_BOOL StaggerIncludeLast;
    __declspec(property(get=GetOffsetType,put=PutOffsetType))
    enum PatternOffsetTypeConstants OffsetType;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetXSpace,put=PutXSpace))
    double XSpace;
    __declspec(property(get=GetYSpace,put=PutYSpace))
    double YSpace;
    __declspec(property(get=GetXCount,put=PutXCount))
    long XCount;
    __declspec(property(get=GetYCount,put=PutYCount))
    long YCount;
    __declspec(property(get=GetReferenceOccurrence,put=PutReferenceOccurrence))
    long ReferenceOccurrence;
    __declspec(property(get=GetSuppressed,put=PutSuppressed))
    VARIANT_BOOL Suppressed[];
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetType))
    long Type;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    void PutStaggerType (
        enum StaggerTypeConstants _arg1 );
    enum StaggerTypeConstants GetStaggerType ( );
    void PutStaggerOffset (
        double _arg1 );
    double GetStaggerOffset ( );
    VARIANT_BOOL GetStaggerOffsetHalf ( );
    void PutStaggerOffsetHalf (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetStaggerIncludeLast ( );
    void PutStaggerIncludeLast (
        VARIANT_BOOL _arg1 );
    enum PatternOffsetTypeConstants GetOffsetType ( );
    void PutOffsetType (
        enum PatternOffsetTypeConstants _arg1 );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetXSpace ( );
    void PutXSpace (
        double _arg1 );
    double GetYSpace ( );
    void PutYSpace (
        double _arg1 );
    long GetXCount ( );
    void PutXCount (
        long _arg1 );
    long GetYCount ( );
    void PutYCount (
        long _arg1 );
    long GetReferenceOccurrence ( );
    void PutReferenceOccurrence (
        long _arg1 );
    VARIANT_BOOL GetSuppressed (
        long Occurrence );
    void PutSuppressed (
        long Occurrence,
        VARIANT_BOOL _arg2 );
    HRESULT GetGeometry (
        struct Line2d * * Line1,
        struct Line2d * * Line2,
        struct Line2d * * Line3,
        struct Line2d * * Line4 );
    void PutLayer (
        _bstr_t _arg1 );
    _bstr_t GetLayer ( );
    long GetType ( );
    SAFEARRAY * GetParentGeometries ( );
};

struct __declspec(uuid("e52d3d27-4df9-11d2-a478-080036ecf202"))
_IRectangularPatterns2dAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    RectangularPattern2dPtr Item (
        const _variant_t & Index );
    RectangularPattern2dPtr Add (
        double OriginX,
        double OriginY,
        double Width,
        double Height,
        double Angle,
        enum PatternOffsetTypeConstants OffsetType,
        long XCount,
        long YCount,
        double XSpace,
        double YSpace,
        const _variant_t & StaggerType = vtMissing,
        const _variant_t & StaggerOffset = vtMissing,
        const _variant_t & StaggerOffsetHalf = vtMissing,
        const _variant_t & StaggerIncludeLast = vtMissing );
    RectangularPattern2dPtr AddEx (
        SAFEARRAY * * GeomArray,
        long NumOfElements,
        double OriginX,
        double OriginY,
        double Width,
        double Height,
        double Angle,
        enum PatternOffsetTypeConstants OffsetType,
        long XCount,
        long YCount,
        double XSpace,
        double YSpace,
        const _variant_t & StaggerType = vtMissing,
        const _variant_t & StaggerOffset = vtMissing,
        const _variant_t & StaggerOffsetHalf = vtMissing,
        const _variant_t & StaggerIncludeLast = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Enum ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct RectangularPattern2d * * RectangularPattern2d ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double OriginX,
        /*[in]*/ double OriginY,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[in]*/ double Angle,
        /*[in]*/ enum PatternOffsetTypeConstants OffsetType,
        /*[in]*/ long XCount,
        /*[in]*/ long YCount,
        /*[in]*/ double XSpace,
        /*[in]*/ double YSpace,
        /*[in]*/ VARIANT StaggerType,
        /*[in]*/ VARIANT StaggerOffset,
        /*[in]*/ VARIANT StaggerOffsetHalf,
        /*[in]*/ VARIANT StaggerIncludeLast,
        /*[out,retval]*/ struct RectangularPattern2d * * RectangularPattern2d ) = 0;
      virtual HRESULT __stdcall raw_AddEx (
        /*[in]*/ SAFEARRAY * * GeomArray,
        /*[in]*/ long NumOfElements,
        /*[in]*/ double OriginX,
        /*[in]*/ double OriginY,
        /*[in]*/ double Width,
        /*[in]*/ double Height,
        /*[in]*/ double Angle,
        /*[in]*/ enum PatternOffsetTypeConstants OffsetType,
        /*[in]*/ long XCount,
        /*[in]*/ long YCount,
        /*[in]*/ double XSpace,
        /*[in]*/ double YSpace,
        /*[in]*/ VARIANT StaggerType,
        /*[in]*/ VARIANT StaggerOffset,
        /*[in]*/ VARIANT StaggerOffsetHalf,
        /*[in]*/ VARIANT StaggerIncludeLast,
        /*[out,retval]*/ struct RectangularPattern2d * * RectangularPattern2d ) = 0;
};

struct __declspec(uuid("7f943b17-4eb5-11d2-a479-080036ecf202"))
_ICircularPattern2dAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetGeometryType))
    enum TGFramework::ObjectType GeometryType;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOffsetType,put=PutOffsetType))
    enum PatternOffsetTypeConstants OffsetType;
    __declspec(property(get=GetCount,put=PutCount))
    long Count;
    __declspec(property(get=GetAngularSpacing,put=PutAngularSpacing))
    double AngularSpacing;
    __declspec(property(get=GetReferenceOccurrence,put=PutReferenceOccurrence))
    long ReferenceOccurrence;
    __declspec(property(get=GetSuppressed,put=PutSuppressed))
    VARIANT_BOOL Suppressed[];
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetType))
    long Type;

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    IDispatchPtr GetGeometry ( );
    enum TGFramework::ObjectType GetGeometryType ( );
    enum PatternOffsetTypeConstants GetOffsetType ( );
    void PutOffsetType (
        enum PatternOffsetTypeConstants OffsetType );
    long GetCount ( );
    void PutCount (
        long Count );
    double GetAngularSpacing ( );
    void PutAngularSpacing (
        double AngularSpacing );
    long GetReferenceOccurrence ( );
    void PutReferenceOccurrence (
        long RefOccurrence );
    VARIANT_BOOL GetSuppressed (
        long Occurrence );
    void PutSuppressed (
        long Occurrence,
        VARIANT_BOOL IsSuppressed );
    IDispatchPtr GetParent ( );
    void PutLayer (
        _bstr_t Layer );
    _bstr_t GetLayer ( );
    long GetType ( );
    SAFEARRAY * GetParentGeometries ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall raw_GetGeometry (
        /*[out,retval]*/ IDispatch * * Arc2dOrCircle2d ) = 0;
      virtual HRESULT __stdcall get_GeometryType (
        /*[out,retval]*/ enum TGFramework::ObjectType * Type ) = 0;
      virtual HRESULT __stdcall get_OffsetType (
        /*[out,retval]*/ enum PatternOffsetTypeConstants * OffsetType ) = 0;
      virtual HRESULT __stdcall put_OffsetType (
        /*[in]*/ enum PatternOffsetTypeConstants OffsetType ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall put_Count (
        /*[in]*/ long Count ) = 0;
      virtual HRESULT __stdcall get_AngularSpacing (
        /*[out,retval]*/ double * AngularSpacing ) = 0;
      virtual HRESULT __stdcall put_AngularSpacing (
        /*[in]*/ double AngularSpacing ) = 0;
      virtual HRESULT __stdcall get_ReferenceOccurrence (
        /*[out,retval]*/ long * RefOccurrence ) = 0;
      virtual HRESULT __stdcall put_ReferenceOccurrence (
        /*[in]*/ long RefOccurrence ) = 0;
      virtual HRESULT __stdcall get_Suppressed (
        /*[in]*/ long Occurrence,
        /*[out,retval]*/ VARIANT_BOOL * IsSuppressed ) = 0;
      virtual HRESULT __stdcall put_Suppressed (
        /*[in]*/ long Occurrence,
        /*[in]*/ VARIANT_BOOL IsSuppressed ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall put_Layer (
        /*[in]*/ BSTR Layer ) = 0;
      virtual HRESULT __stdcall get_Layer (
        /*[out,retval]*/ BSTR * Layer ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * Type ) = 0;
      virtual HRESULT __stdcall raw_GetParentGeometries (
        /*[out,retval]*/ SAFEARRAY * * ParentGeoms ) = 0;
};

struct __declspec(uuid("7f943b1c-4eb5-11d2-a479-080036ecf202"))
CircularPattern2d : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetGeometryType))
    enum TGFramework::ObjectType GeometryType;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetOffsetType,put=PutOffsetType))
    enum PatternOffsetTypeConstants OffsetType;
    __declspec(property(get=GetCount,put=PutCount))
    long Count;
    __declspec(property(get=GetAngularSpacing,put=PutAngularSpacing))
    double AngularSpacing;
    __declspec(property(get=GetReferenceOccurrence,put=PutReferenceOccurrence))
    long ReferenceOccurrence;
    __declspec(property(get=GetSuppressed,put=PutSuppressed))
    VARIANT_BOOL Suppressed[];
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetType))
    long Type;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    IDispatchPtr GetGeometry ( );
    enum TGFramework::ObjectType GetGeometryType ( );
    enum PatternOffsetTypeConstants GetOffsetType ( );
    void PutOffsetType (
        enum PatternOffsetTypeConstants _arg1 );
    long GetCount ( );
    void PutCount (
        long _arg1 );
    double GetAngularSpacing ( );
    void PutAngularSpacing (
        double _arg1 );
    long GetReferenceOccurrence ( );
    void PutReferenceOccurrence (
        long _arg1 );
    VARIANT_BOOL GetSuppressed (
        long Occurrence );
    void PutSuppressed (
        long Occurrence,
        VARIANT_BOOL _arg2 );
    IDispatchPtr GetParent ( );
    void PutLayer (
        _bstr_t _arg1 );
    _bstr_t GetLayer ( );
    long GetType ( );
    SAFEARRAY * GetParentGeometries ( );
};

struct __declspec(uuid("7f943b15-4eb5-11d2-a479-080036ecf202"))
_ICircularPatterns2dAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    CircularPattern2dPtr Item (
        const _variant_t & Index );
    CircularPattern2dPtr AddByCircle (
        double CenterX,
        double CenterY,
        double StartX,
        double StartY,
        enum Geom2dOrientationConstants Orientation,
        enum PatternOffsetTypeConstants OffsetType,
        long Count,
        double AngularSpacing );
    CircularPattern2dPtr AddByArc (
        double CenterX,
        double CenterY,
        double StartX,
        double StartY,
        double SweepAngle,
        enum Geom2dOrientationConstants Orientation,
        enum PatternOffsetTypeConstants OffsetType,
        long Count,
        double AngularSpacing );
    CircularPattern2dPtr AddByCircleEx (
        SAFEARRAY * * GeomArray,
        long NumOfElements,
        double CenterX,
        double CenterY,
        double StartX,
        double StartY,
        enum Geom2dOrientationConstants Orientation,
        enum PatternOffsetTypeConstants OffsetType,
        long Count,
        double AngularSpacing );
    CircularPattern2dPtr AddByArcEx (
        SAFEARRAY * * GeomArray,
        long NumOfElements,
        double CenterX,
        double CenterY,
        double StartX,
        double StartY,
        double SweepAngle,
        enum Geom2dOrientationConstants Orientation,
        enum PatternOffsetTypeConstants OffsetType,
        long Count,
        double AngularSpacing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Enum ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct CircularPattern2d * * CircularPattern2d ) = 0;
      virtual HRESULT __stdcall raw_AddByCircle (
        /*[in]*/ double CenterX,
        /*[in]*/ double CenterY,
        /*[in]*/ double StartX,
        /*[in]*/ double StartY,
        /*[in]*/ enum Geom2dOrientationConstants Orientation,
        /*[in]*/ enum PatternOffsetTypeConstants OffsetType,
        /*[in]*/ long Count,
        /*[in]*/ double AngularSpacing,
        /*[out,retval]*/ struct CircularPattern2d * * CircularPattern2d ) = 0;
      virtual HRESULT __stdcall raw_AddByArc (
        /*[in]*/ double CenterX,
        /*[in]*/ double CenterY,
        /*[in]*/ double StartX,
        /*[in]*/ double StartY,
        /*[in]*/ double SweepAngle,
        /*[in]*/ enum Geom2dOrientationConstants Orientation,
        /*[in]*/ enum PatternOffsetTypeConstants OffsetType,
        /*[in]*/ long Count,
        /*[in]*/ double AngularSpacing,
        /*[out,retval]*/ struct CircularPattern2d * * CircularPattern2d ) = 0;
      virtual HRESULT __stdcall raw_AddByCircleEx (
        /*[in]*/ SAFEARRAY * * GeomArray,
        /*[in]*/ long NumOfElements,
        /*[in]*/ double CenterX,
        /*[in]*/ double CenterY,
        /*[in]*/ double StartX,
        /*[in]*/ double StartY,
        /*[in]*/ enum Geom2dOrientationConstants Orientation,
        /*[in]*/ enum PatternOffsetTypeConstants OffsetType,
        /*[in]*/ long Count,
        /*[in]*/ double AngularSpacing,
        /*[out,retval]*/ struct CircularPattern2d * * CircularPattern2d ) = 0;
      virtual HRESULT __stdcall raw_AddByArcEx (
        /*[in]*/ SAFEARRAY * * GeomArray,
        /*[in]*/ long NumOfElements,
        /*[in]*/ double CenterX,
        /*[in]*/ double CenterY,
        /*[in]*/ double StartX,
        /*[in]*/ double StartY,
        /*[in]*/ double SweepAngle,
        /*[in]*/ enum Geom2dOrientationConstants Orientation,
        /*[in]*/ enum PatternOffsetTypeConstants OffsetType,
        /*[in]*/ long Count,
        /*[in]*/ double AngularSpacing,
        /*[out,retval]*/ struct CircularPattern2d * * CircularPattern2d ) = 0;
};

struct __declspec(uuid("fb1c412f-146d-4622-a78e-0e16f837c7bf"))
_IImage2dAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetLockAspectRatio,put=PutLockAspectRatio))
    VARIANT_BOOL LockAspectRatio;
    __declspec(property(get=GetResetAspectRatio,put=PutResetAspectRatio))
    VARIANT_BOOL ResetAspectRatio;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFlipHorizontal,put=PutFlipHorizontal))
    VARIANT_BOOL FlipHorizontal;
    __declspec(property(get=GetFlipVertical,put=PutFlipVertical))
    VARIANT_BOOL FlipVertical;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetOpacity,put=PutOpacity))
    int Opacity;
    __declspec(property(get=GetIsLink))
    VARIANT_BOOL IsLink;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetShowBorder,put=PutShowBorder))
    VARIANT_BOOL ShowBorder;
    __declspec(property(get=GetBorderColor,put=PutBorderColor))
    long BorderColor;
    __declspec(property(get=GetBorderStyleName,put=PutBorderStyleName))
    _bstr_t BorderStyleName;
    __declspec(property(get=GetBorderWidth,put=PutBorderWidth))
    double BorderWidth;
    __declspec(property(get=GetBorderTypeName,put=PutBorderTypeName))
    _bstr_t BorderTypeName;
    __declspec(property(get=GetImageFileName))
    _bstr_t ImageFileName;
    __declspec(property(get=GetDecal))
    VARIANT_BOOL Decal;

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    void PutLockAspectRatio (
        VARIANT_BOOL Lock );
    VARIANT_BOOL GetLockAspectRatio ( );
    void PutResetAspectRatio (
        VARIANT_BOOL Reset );
    VARIANT_BOOL GetResetAspectRatio ( );
    VARIANT_BOOL GetFlipHorizontal ( );
    void PutFlipHorizontal (
        VARIANT_BOOL FlipHorizontal );
    VARIANT_BOOL GetFlipVertical ( );
    void PutFlipVertical (
        VARIANT_BOOL FlipVertical );
    VARIANT_BOOL GetShowBorder ( );
    void PutShowBorder (
        VARIANT_BOOL ShowBorder );
    void PutBorderColor (
        long BorderColor );
    long GetBorderColor ( );
    void PutBorderWidth (
        double BorderColor );
    double GetBorderWidth ( );
    void PutBorderStyleName (
        _bstr_t Name );
    _bstr_t GetBorderStyleName ( );
    void PutBorderTypeName (
        _bstr_t Name );
    _bstr_t GetBorderTypeName ( );
    double GetWidth ( );
    void PutWidth (
        double Width );
    double GetHeight ( );
    void PutHeight (
        double Height );
    double GetAngle ( );
    void PutAngle (
        double Angle );
    HRESULT GetOrigin (
        double * x,
        double * y );
    HRESULT SetOrigin (
        double x,
        double y );
    int GetOpacity ( );
    void PutOpacity (
        int pnOpacity );
    HRESULT GetTransparentColor (
        float * pfRed,
        float * pfGreen,
        float * pfBlue );
    HRESULT SetTransparentColor (
        float fRed,
        float fGreen,
        float fBlue );
    VARIANT_BOOL GetIsLink ( );
    HRESULT Update ( );
    HRESULT DoVerb (
        const _variant_t & DoVerb = vtMissing );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    void PutLayer (
        _bstr_t Layer );
    _bstr_t GetLayer ( );
    long GetType ( );
    HRESULT SaveImageAs (
        _bstr_t FilePath );
    _bstr_t GetImageFileName ( );
    VARIANT_BOOL GetDecal ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall put_LockAspectRatio (
        /*[in]*/ VARIANT_BOOL Lock ) = 0;
      virtual HRESULT __stdcall get_LockAspectRatio (
        /*[out,retval]*/ VARIANT_BOOL * Lock ) = 0;
      virtual HRESULT __stdcall put_ResetAspectRatio (
        /*[in]*/ VARIANT_BOOL Reset ) = 0;
      virtual HRESULT __stdcall get_ResetAspectRatio (
        /*[out,retval]*/ VARIANT_BOOL * Reset ) = 0;
      virtual HRESULT __stdcall get_FlipHorizontal (
        /*[out,retval]*/ VARIANT_BOOL * FlipHorizontal ) = 0;
      virtual HRESULT __stdcall put_FlipHorizontal (
        /*[in]*/ VARIANT_BOOL FlipHorizontal ) = 0;
      virtual HRESULT __stdcall get_FlipVertical (
        /*[out,retval]*/ VARIANT_BOOL * FlipVertical ) = 0;
      virtual HRESULT __stdcall put_FlipVertical (
        /*[in]*/ VARIANT_BOOL FlipVertical ) = 0;
      virtual HRESULT __stdcall get_ShowBorder (
        /*[out,retval]*/ VARIANT_BOOL * ShowBorder ) = 0;
      virtual HRESULT __stdcall put_ShowBorder (
        /*[in]*/ VARIANT_BOOL ShowBorder ) = 0;
      virtual HRESULT __stdcall put_BorderColor (
        /*[in]*/ long BorderColor ) = 0;
      virtual HRESULT __stdcall get_BorderColor (
        /*[out,retval]*/ long * BorderColor ) = 0;
      virtual HRESULT __stdcall put_BorderWidth (
        /*[in]*/ double BorderColor ) = 0;
      virtual HRESULT __stdcall get_BorderWidth (
        /*[out,retval]*/ double * BorderColor ) = 0;
      virtual HRESULT __stdcall put_BorderStyleName (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_BorderStyleName (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_BorderTypeName (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_BorderTypeName (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ double * Width ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ double Width ) = 0;
      virtual HRESULT __stdcall get_Height (
        /*[out,retval]*/ double * Height ) = 0;
      virtual HRESULT __stdcall put_Height (
        /*[in]*/ double Height ) = 0;
      virtual HRESULT __stdcall get_Angle (
        /*[out,retval]*/ double * Angle ) = 0;
      virtual HRESULT __stdcall put_Angle (
        /*[in]*/ double Angle ) = 0;
      virtual HRESULT __stdcall raw_GetOrigin (
        /*[out]*/ double * x,
        /*[out]*/ double * y ) = 0;
      virtual HRESULT __stdcall raw_SetOrigin (
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall get_Opacity (
        /*[out,retval]*/ int * pnOpacity ) = 0;
      virtual HRESULT __stdcall put_Opacity (
        /*[in]*/ int pnOpacity ) = 0;
      virtual HRESULT __stdcall raw_GetTransparentColor (
        /*[out]*/ float * pfRed,
        /*[out]*/ float * pfGreen,
        /*[out]*/ float * pfBlue ) = 0;
      virtual HRESULT __stdcall raw_SetTransparentColor (
        /*[in]*/ float fRed,
        /*[in]*/ float fGreen,
        /*[in]*/ float fBlue ) = 0;
      virtual HRESULT __stdcall get_IsLink (
        /*[out,retval]*/ VARIANT_BOOL * IsLink ) = 0;
      virtual HRESULT __stdcall raw_Update ( ) = 0;
      virtual HRESULT __stdcall raw_DoVerb (
        /*[in]*/ VARIANT DoVerb = vtMissing ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
      virtual HRESULT __stdcall put_Layer (
        /*[in]*/ BSTR Layer ) = 0;
      virtual HRESULT __stdcall get_Layer (
        /*[out,retval]*/ BSTR * Layer ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * Type ) = 0;
      virtual HRESULT __stdcall raw_SaveImageAs (
        /*[in]*/ BSTR FilePath ) = 0;
      virtual HRESULT __stdcall get_ImageFileName (
        /*[out,retval]*/ BSTR * ImageFileName ) = 0;
      virtual HRESULT __stdcall get_Decal (
        /*[out,retval]*/ VARIANT_BOOL * Decal ) = 0;
};

struct __declspec(uuid("e854d8e3-d4da-4d87-a1e8-e1e2d98526eb"))
Image2d : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLockAspectRatio,put=PutLockAspectRatio))
    VARIANT_BOOL LockAspectRatio;
    __declspec(property(get=GetResetAspectRatio,put=PutResetAspectRatio))
    VARIANT_BOOL ResetAspectRatio;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetFlipHorizontal,put=PutFlipHorizontal))
    VARIANT_BOOL FlipHorizontal;
    __declspec(property(get=GetFlipVertical,put=PutFlipVertical))
    VARIANT_BOOL FlipVertical;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    double Height;
    __declspec(property(get=GetAngle,put=PutAngle))
    double Angle;
    __declspec(property(get=GetOpacity,put=PutOpacity))
    int Opacity;
    __declspec(property(get=GetIsLink))
    VARIANT_BOOL IsLink;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetShowBorder,put=PutShowBorder))
    VARIANT_BOOL ShowBorder;
    __declspec(property(get=GetBorderColor,put=PutBorderColor))
    long BorderColor;
    __declspec(property(get=GetBorderStyleName,put=PutBorderStyleName))
    _bstr_t BorderStyleName;
    __declspec(property(get=GetBorderWidth,put=PutBorderWidth))
    double BorderWidth;
    __declspec(property(get=GetBorderTypeName,put=PutBorderTypeName))
    _bstr_t BorderTypeName;
    __declspec(property(get=GetImageFileName))
    _bstr_t ImageFileName;
    __declspec(property(get=GetDecal))
    VARIANT_BOOL Decal;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    void PutLockAspectRatio (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetLockAspectRatio ( );
    void PutResetAspectRatio (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetResetAspectRatio ( );
    VARIANT_BOOL GetFlipHorizontal ( );
    void PutFlipHorizontal (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetFlipVertical ( );
    void PutFlipVertical (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowBorder ( );
    void PutShowBorder (
        VARIANT_BOOL _arg1 );
    void PutBorderColor (
        long _arg1 );
    long GetBorderColor ( );
    void PutBorderWidth (
        double _arg1 );
    double GetBorderWidth ( );
    void PutBorderStyleName (
        _bstr_t _arg1 );
    _bstr_t GetBorderStyleName ( );
    void PutBorderTypeName (
        _bstr_t _arg1 );
    _bstr_t GetBorderTypeName ( );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    double GetHeight ( );
    void PutHeight (
        double _arg1 );
    double GetAngle ( );
    void PutAngle (
        double _arg1 );
    HRESULT GetOrigin (
        double * x,
        double * y );
    HRESULT SetOrigin (
        double x,
        double y );
    int GetOpacity ( );
    void PutOpacity (
        int _arg1 );
    HRESULT GetTransparentColor (
        float * pfRed,
        float * pfGreen,
        float * pfBlue );
    HRESULT SetTransparentColor (
        float fRed,
        float fGreen,
        float fBlue );
    VARIANT_BOOL GetIsLink ( );
    HRESULT Update ( );
    HRESULT DoVerb (
        const _variant_t & DoVerb = vtMissing );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    void PutLayer (
        _bstr_t _arg1 );
    _bstr_t GetLayer ( );
    long GetType ( );
    HRESULT SaveImageAs (
        _bstr_t FilePath );
    _bstr_t GetImageFileName ( );
    VARIANT_BOOL GetDecal ( );
};

struct __declspec(uuid("fe4ae384-0ad7-42fc-9558-d84d16785227"))
_IImages2dAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    Image2dPtr Item (
        const _variant_t & Index );
    Image2dPtr AddImage (
        VARIANT_BOOL blink,
        _bstr_t ImageDocumentName );
    Image2dPtr AddDecalImage (
        VARIANT_BOOL Link,
        _bstr_t ImageDocumentName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Enum ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Image2d * * Image2d ) = 0;
      virtual HRESULT __stdcall raw_AddImage (
        /*[in]*/ VARIANT_BOOL blink,
        /*[in]*/ BSTR ImageDocumentName,
        /*[out,retval]*/ struct Image2d * * Image2d ) = 0;
      virtual HRESULT __stdcall raw_AddDecalImage (
        /*[in]*/ VARIANT_BOOL Link,
        /*[in]*/ BSTR ImageDocumentName,
        /*[out,retval]*/ struct Image2d * * Image2d ) = 0;
};

struct __declspec(uuid("cde7b4af-ffb5-4a92-983d-dd4b22b6ff12"))
_IComponentImage2dAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetStyle))
    GeometryStyle2dPtr Style;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    GeometryStyle2dPtr GetStyle ( );
    void PutLayer (
        _bstr_t Layer );
    _bstr_t GetLayer ( );
    long GetType ( );
    HRESULT Delete ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct GeometryStyle2d * * Style ) = 0;
      virtual HRESULT __stdcall put_Layer (
        /*[in]*/ BSTR Layer ) = 0;
      virtual HRESULT __stdcall get_Layer (
        /*[out,retval]*/ BSTR * Layer ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * Type ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
};

struct __declspec(uuid("c1fd7afa-3e80-40c0-9500-8353ee551dd2"))
ComponentImage2d : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetStyle))
    GeometryStyle2dPtr Style;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    GeometryStyle2dPtr GetStyle ( );
    void PutLayer (
        _bstr_t _arg1 );
    _bstr_t GetLayer ( );
    long GetType ( );
    HRESULT Delete ( );
};

enum ComponentImageCreationModeConstants
{
    seAllVisible = 0,
    seExplicit = 1
};

struct __declspec(uuid("4a0696e7-9834-46e1-870e-e3e0d6bf3fec"))
_IComponentImages2dAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    IUnknownPtr Get_NewEnum ( );
    ComponentImage2dPtr Item (
        const _variant_t & Index );
    ComponentImage2dPtr AddComponentImage (
        enum ComponentImageCreationModeConstants CreationMode,
        const _variant_t & NumElements = vtMissing,
        const _variant_t & Elements = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Enum ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct ComponentImage2d * * ComponentImage2d ) = 0;
      virtual HRESULT __stdcall raw_AddComponentImage (
        /*[in]*/ enum ComponentImageCreationModeConstants CreationMode,
        /*[in]*/ VARIANT NumElements,
        /*[in]*/ VARIANT Elements,
        /*[out,retval]*/ struct ComponentImage2d * * ComponentImage2d ) = 0;
};

struct __declspec(uuid("1077a3cc-af95-41f8-b36e-ffb2200df3bb"))
_IAreaPropertiesAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAreaFillStyle,put=PutAreaFillStyle))
    TGFramework::FillStylePtr AreaFillStyle;
    __declspec(property(get=GetAxesStyle))
    DimStylePtr AxesStyle;
    __declspec(property(get=GetAxesLabelStyle))
    DimStylePtr AxesLabelStyle;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[][];
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;

    //
    // Wrapper methods for error-handling
    //

    TGFramework::FillStylePtr GetAreaFillStyle ( );
    void PutAreaFillStyle (
        struct TGFramework::FillStyle * Style );
    DimStylePtr GetAxesStyle ( );
    DimStylePtr GetAxesLabelStyle ( );
    _bstr_t GetLayer ( );
    void PutLayer (
        _bstr_t Layer );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse,
        long Lcid = 0 );
    IDispatchPtr GetParent ( );
    long GetType ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT GetAreaProperties (
        double * dArea,
        double * dAreaCenterX,
        double * dAreaCenterY,
        double * dMIX,
        double * dMIY,
        double * dMIXY,
        double * dPrincipalMIX,
        double * dPrincipalMIY,
        double * dAngleOfOrientation,
        double * dPrincipalXX,
        double * dPrincipalXY,
        double * dPrincipalYX,
        double * dPrincipalYY,
        double * dPerimeter );
    HRESULT SetAxesLength (
        VARIANT_BOOL bPrincipalAxes,
        double dLength );
    HRESULT ShowAxes (
        VARIANT_BOOL bPrincipalAxes,
        VARIANT_BOOL bShow );
    HRESULT AddBoundaries (
        long ParentBoundariesCount,
        SAFEARRAY * * ParentBoundaries,
        double xFloodPoint,
        double yFloodPoint );
    HRESULT SetAxesLabels (
        _bstr_t ModelXAxesLabel,
        _bstr_t ModelYAxesLabel,
        _bstr_t PrincipalXAxesLabel,
        _bstr_t PrincipalYAxesLabel );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AreaFillStyle (
        /*[out,retval]*/ struct TGFramework::FillStyle * * Style ) = 0;
      virtual HRESULT __stdcall put_AreaFillStyle (
        /*[in]*/ struct TGFramework::FillStyle * Style ) = 0;
      virtual HRESULT __stdcall get_AxesStyle (
        /*[out,retval]*/ struct DimStyle * * AxesStyle ) = 0;
      virtual HRESULT __stdcall get_AxesLabelStyle (
        /*[out,retval]*/ struct DimStyle * * AxesLabelStyle ) = 0;
      virtual HRESULT __stdcall get_Layer (
        /*[out,retval]*/ BSTR * Layer ) = 0;
      virtual HRESULT __stdcall put_Layer (
        /*[in]*/ BSTR Layer ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[in]*/ VARIANT Recurse,
        /*[in,lcid]*/ long Lcid,
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * Type ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[in]*/ VARIANT Recurse,
        /*[out,retval]*/ BSTR * Key ) = 0;
      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ IDispatch * * Document ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ double XFrom,
        /*[in]*/ double YFrom,
        /*[in]*/ double XTo,
        /*[in]*/ double YTo ) = 0;
      virtual HRESULT __stdcall raw_Scale (
        /*[in]*/ double Factor ) = 0;
      virtual HRESULT __stdcall raw_Rotate (
        /*[in]*/ double Angle,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[out]*/ double * XMinimum,
        /*[out]*/ double * YMinimum,
        /*[out]*/ double * XMaximum,
        /*[out]*/ double * YMaximum ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ VARIANT XDistance,
        /*[in]*/ VARIANT YDistance,
        /*[out,retval]*/ IDispatch * * NewObject ) = 0;
      virtual HRESULT __stdcall raw_Mirror (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ VARIANT BooleanCopyFlag,
        /*[out,retval]*/ IDispatch * * Object ) = 0;
      virtual HRESULT __stdcall raw_BringToFront ( ) = 0;
      virtual HRESULT __stdcall raw_BringForward ( ) = 0;
      virtual HRESULT __stdcall raw_SendToBack ( ) = 0;
      virtual HRESULT __stdcall raw_SendBackward ( ) = 0;
      virtual HRESULT __stdcall raw_GetAreaProperties (
        /*[out]*/ double * dArea,
        /*[out]*/ double * dAreaCenterX,
        /*[out]*/ double * dAreaCenterY,
        /*[out]*/ double * dMIX,
        /*[out]*/ double * dMIY,
        /*[out]*/ double * dMIXY,
        /*[out]*/ double * dPrincipalMIX,
        /*[out]*/ double * dPrincipalMIY,
        /*[out]*/ double * dAngleOfOrientation,
        /*[out]*/ double * dPrincipalXX,
        /*[out]*/ double * dPrincipalXY,
        /*[out]*/ double * dPrincipalYX,
        /*[out]*/ double * dPrincipalYY,
        /*[out]*/ double * dPerimeter ) = 0;
      virtual HRESULT __stdcall raw_SetAxesLength (
        /*[in]*/ VARIANT_BOOL bPrincipalAxes,
        /*[in]*/ double dLength ) = 0;
      virtual HRESULT __stdcall raw_ShowAxes (
        /*[in]*/ VARIANT_BOOL bPrincipalAxes,
        /*[in]*/ VARIANT_BOOL bShow ) = 0;
      virtual HRESULT __stdcall raw_AddBoundaries (
        /*[in]*/ long ParentBoundariesCount,
        /*[in]*/ SAFEARRAY * * ParentBoundaries,
        /*[in]*/ double xFloodPoint,
        /*[in]*/ double yFloodPoint ) = 0;
      virtual HRESULT __stdcall raw_SetAxesLabels (
        /*[in]*/ BSTR ModelXAxesLabel,
        /*[in]*/ BSTR ModelYAxesLabel,
        /*[in]*/ BSTR PrincipalXAxesLabel,
        /*[in]*/ BSTR PrincipalYAxesLabel ) = 0;
};

struct __declspec(uuid("29331bfd-b0f6-4648-b0b6-31a1ea34ef89"))
AreaProperties : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetAreaFillStyle,put=PutAreaFillStyle))
    TGFramework::FillStylePtr AreaFillStyle;
    __declspec(property(get=GetAxesStyle))
    DimStylePtr AxesStyle;
    __declspec(property(get=GetAxesLabelStyle))
    DimStylePtr AxesLabelStyle;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[];
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::FillStylePtr GetAreaFillStyle ( );
    void PutAreaFillStyle (
        struct TGFramework::FillStyle * _arg1 );
    DimStylePtr GetAxesStyle ( );
    DimStylePtr GetAxesLabelStyle ( );
    _bstr_t GetLayer ( );
    void PutLayer (
        _bstr_t _arg1 );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse );
    IDispatchPtr GetParent ( );
    long GetType ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT GetAreaProperties (
        double * dArea,
        double * dAreaCenterX,
        double * dAreaCenterY,
        double * dMIX,
        double * dMIY,
        double * dMIXY,
        double * dPrincipalMIX,
        double * dPrincipalMIY,
        double * dAngleOfOrientation,
        double * dPrincipalXX,
        double * dPrincipalXY,
        double * dPrincipalYX,
        double * dPrincipalYY,
        double * dPerimeter );
    HRESULT SetAxesLength (
        VARIANT_BOOL bPrincipalAxes,
        double dLength );
    HRESULT ShowAxes (
        VARIANT_BOOL bPrincipalAxes,
        VARIANT_BOOL bShow );
    HRESULT AddBoundaries (
        long ParentBoundariesCount,
        SAFEARRAY * * ParentBoundaries,
        double xFloodPoint,
        double yFloodPoint );
    HRESULT SetAxesLabels (
        _bstr_t ModelXAxesLabel,
        _bstr_t ModelYAxesLabel,
        _bstr_t PrincipalXAxesLabel,
        _bstr_t PrincipalYAxesLabel );
};

struct __declspec(uuid("41eed004-4aba-454a-a0f8-d42a83eac34f"))
_IAreaPropertiesCollectionAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    AreaPropertiesPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    AreaPropertiesPtr Add (
        long ParentBoundariesCount,
        SAFEARRAY * * ParentBoundaries,
        double xFloodPoint,
        double yFloodPoint );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct AreaProperties * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Enum ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * App ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ long ParentBoundariesCount,
        /*[in]*/ SAFEARRAY * * ParentBoundaries,
        /*[in]*/ double xFloodPoint,
        /*[in]*/ double yFloodPoint,
        /*[out,retval]*/ struct AreaProperties * * Obj ) = 0;
};

struct __declspec(uuid("9f3867b6-b438-42d6-aaaa-3b4f04c37c04"))
_IPMIAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetDimensions))
    IDispatchPtr Dimensions;
    __declspec(property(get=GetAxis,put=PutAxis))
    IDispatchPtr Axis;
    __declspec(property(get=GetActivePlane,put=PutActivePlane))
    IDispatchPtr ActivePlane;
    __declspec(property(get=GetBalloons))
    IDispatchPtr Balloons;
    __declspec(property(get=GetCornerAnnotations))
    IDispatchPtr CornerAnnotations;
    __declspec(property(get=GetDatumFrames))
    IDispatchPtr DatumFrames;
    __declspec(property(get=GetDatumPoints))
    IDispatchPtr DatumPoints;
    __declspec(property(get=GetDatumTargets))
    IDispatchPtr DatumTargets;
    __declspec(property(get=GetFeatureControlFrames))
    IDispatchPtr FeatureControlFrames;
    __declspec(property(get=GetLeaders))
    IDispatchPtr Leaders;
    __declspec(property(get=GetSurfaceFinishSymbols))
    IDispatchPtr SurfaceFinishSymbols;
    __declspec(property(get=GetWeldSymbols))
    IDispatchPtr WeldSymbols;
    __declspec(property(get=GetGostWeldSymbols))
    IDispatchPtr GostWeldSymbols;
    __declspec(property(get=GetSymbolicPMIGroup))
    IDispatchPtr SymbolicPMIGroup;
    __declspec(property(get=GetPMIModelViews))
    IDispatchPtr PMIModelViews;
    __declspec(property(get=GetShowDimensions,put=PutShowDimensions))
    VARIANT_BOOL ShowDimensions;
    __declspec(property(get=GetShowAnnotations,put=PutShowAnnotations))
    VARIANT_BOOL ShowAnnotations;
    __declspec(property(get=GetShow,put=PutShow))
    VARIANT_BOOL Show;
    __declspec(property(get=GetCenterMarks))
    IDispatchPtr CenterMarks;
    __declspec(property(get=GetCenterLines))
    IDispatchPtr CenterLines;
    __declspec(property(get=GetBoltHoleCircles))
    IDispatchPtr BoltHoleCircles;
    __declspec(property(get=GetPMIPixelSize,put=PutPMIPixelSize))
    int PMIPixelSize;
    __declspec(property(get=GetPMIPixelMode,put=PutPMIPixelMode))
    VARIANT_BOOL PMIPixelMode;
    __declspec(property(get=GetTextBoxes))
    IDispatchPtr TextBoxes;
    __declspec(property(get=GetPinSymbols))
    IDispatchPtr PinSymbols;

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    IDispatchPtr GetDimensions ( );
    IDispatchPtr GetBalloons ( );
    IDispatchPtr GetCornerAnnotations ( );
    IDispatchPtr GetDatumFrames ( );
    IDispatchPtr GetDatumPoints ( );
    IDispatchPtr GetDatumTargets ( );
    IDispatchPtr GetPinSymbols ( );
    IDispatchPtr GetFeatureControlFrames ( );
    IDispatchPtr GetLeaders ( );
    IDispatchPtr GetSurfaceFinishSymbols ( );
    IDispatchPtr GetWeldSymbols ( );
    IDispatchPtr GetGostWeldSymbols ( );
    IDispatchPtr GetSymbolicPMIGroup ( );
    IDispatchPtr GetPMIModelViews ( );
    IDispatchPtr GetCenterMarks ( );
    IDispatchPtr GetCenterLines ( );
    IDispatchPtr GetBoltHoleCircles ( );
    void PutAxis (
        IDispatch * Axis );
    IDispatchPtr GetAxis ( );
    HRESULT ClearAxis ( );
    void PutActivePlane (
        IDispatch * Plane );
    IDispatchPtr GetActivePlane ( );
    HRESULT ClearActivePlane ( );
    void PutShowDimensions (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetShowDimensions ( );
    void PutShowAnnotations (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetShowAnnotations ( );
    void PutShow (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetShow ( );
    void PutPMIPixelMode (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetPMIPixelMode ( );
    void PutPMIPixelSize (
        int Value );
    int GetPMIPixelSize ( );
    IDispatchPtr GetTextBoxes ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * App ) = 0;
      virtual HRESULT __stdcall get_Dimensions (
        /*[out,retval]*/ IDispatch * * Dimensions ) = 0;
      virtual HRESULT __stdcall get_Balloons (
        /*[out,retval]*/ IDispatch * * Balloons ) = 0;
      virtual HRESULT __stdcall get_CornerAnnotations (
        /*[out,retval]*/ IDispatch * * CornerAnnotations ) = 0;
      virtual HRESULT __stdcall get_DatumFrames (
        /*[out,retval]*/ IDispatch * * DatumFrames ) = 0;
      virtual HRESULT __stdcall get_DatumPoints (
        /*[out,retval]*/ IDispatch * * DatumPoints ) = 0;
      virtual HRESULT __stdcall get_DatumTargets (
        /*[out,retval]*/ IDispatch * * DatumTargets ) = 0;
      virtual HRESULT __stdcall get_PinSymbols (
        /*[out,retval]*/ IDispatch * * PinSymbols ) = 0;
      virtual HRESULT __stdcall get_FeatureControlFrames (
        /*[out,retval]*/ IDispatch * * FeatureControlFrames ) = 0;
      virtual HRESULT __stdcall get_Leaders (
        /*[out,retval]*/ IDispatch * * Leaders ) = 0;
      virtual HRESULT __stdcall get_SurfaceFinishSymbols (
        /*[out,retval]*/ IDispatch * * SurfaceFinishSymbols ) = 0;
      virtual HRESULT __stdcall get_WeldSymbols (
        /*[out,retval]*/ IDispatch * * WeldSymbols ) = 0;
      virtual HRESULT __stdcall get_GostWeldSymbols (
        /*[out,retval]*/ IDispatch * * GostWeldSymbols ) = 0;
      virtual HRESULT __stdcall get_SymbolicPMIGroup (
        /*[out,retval]*/ IDispatch * * SymbolicPMIGroup ) = 0;
      virtual HRESULT __stdcall get_PMIModelViews (
        /*[out,retval]*/ IDispatch * * PMIModelViews ) = 0;
      virtual HRESULT __stdcall get_CenterMarks (
        /*[out,retval]*/ IDispatch * * CenterMarks ) = 0;
      virtual HRESULT __stdcall get_CenterLines (
        /*[out,retval]*/ IDispatch * * CenterLines ) = 0;
      virtual HRESULT __stdcall get_BoltHoleCircles (
        /*[out,retval]*/ IDispatch * * BHCs ) = 0;
      virtual HRESULT __stdcall put_Axis (
        /*[in]*/ IDispatch * Axis ) = 0;
      virtual HRESULT __stdcall get_Axis (
        /*[out,retval]*/ IDispatch * * Axis ) = 0;
      virtual HRESULT __stdcall raw_ClearAxis ( ) = 0;
      virtual HRESULT __stdcall put_ActivePlane (
        /*[in]*/ IDispatch * Plane ) = 0;
      virtual HRESULT __stdcall get_ActivePlane (
        /*[out,retval]*/ IDispatch * * Plane ) = 0;
      virtual HRESULT __stdcall raw_ClearActivePlane ( ) = 0;
      virtual HRESULT __stdcall put_ShowDimensions (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ShowDimensions (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_ShowAnnotations (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_ShowAnnotations (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_Show (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_Show (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_PMIPixelMode (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_PMIPixelMode (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall put_PMIPixelSize (
        /*[in]*/ int Value ) = 0;
      virtual HRESULT __stdcall get_PMIPixelSize (
        /*[out,retval]*/ int * Value ) = 0;
      virtual HRESULT __stdcall get_TextBoxes (
        /*[out,retval]*/ IDispatch * * pTxtBoxes ) = 0;
};

enum DimGostWeldPermanentJointTypeConstants
{
    igDimGostWeldPermJointAdhesive = 0,
    igDimGostWeldPermJointSolder = 1,
    igDimGostWeldPermJointStitch = 2,
    igDimGostWeldPermJointBracket = 3,
    igDimGostWeldPermJointAngled = 4
};

enum DimGostWeldTerminatorTypeConstants
{
    igDimGostWeldTerminatorSameSide = 0,
    igDimGostWeldTerminatorOtherSide = 1,
    igDimGostWeldTerminatorFullArrow = 2
};

struct __declspec(uuid("5ebc8f67-ea49-4015-927e-3e4596774a79"))
_IGostWeldSymbolAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetRotationAngle,put=PutRotationAngle))
    double RotationAngle;
    __declspec(property(get=GetWeldInField,put=PutWeldInField))
    VARIANT_BOOL WeldInField;
    __declspec(property(get=GetWeldAllAround,put=PutWeldAllAround))
    VARIANT_BOOL WeldAllAround;
    __declspec(property(get=GetTextScale,put=PutTextScale))
    double TextScale;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetPMIPlane))
    IDispatchPtr PMIPlane;
    __declspec(property(get=GetPMITrackDistance,put=PutPMITrackDistance))
    double PMITrackDistance;
    __declspec(property(get=GetAboveBreakLineText,put=PutAboveBreakLineText))
    _bstr_t AboveBreakLineText;
    __declspec(property(get=GetBelowBreakLineText,put=PutBelowBreakLineText))
    _bstr_t BelowBreakLineText;
    __declspec(property(get=GetAboveLeaderLineText,put=PutAboveLeaderLineText))
    _bstr_t AboveLeaderLineText;
    __declspec(property(get=GetBelowLeaderLineText,put=PutBelowLeaderLineText))
    _bstr_t BelowLeaderLineText;
    __declspec(property(get=GetPermanentJoint,put=PutPermanentJoint))
    VARIANT_BOOL PermanentJoint;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetPermanentJointType,put=PutPermanentJointType))
    enum DimGostWeldPermanentJointTypeConstants PermanentJointType;
    __declspec(property(get=GetTerminatorSideType,put=PutTerminatorSideType))
    enum DimGostWeldTerminatorTypeConstants TerminatorSideType;
    __declspec(property(get=GetHidePMI,put=PutHidePMI))
    VARIANT_BOOL HidePMI;
    __declspec(property(get=GetStyle))
    DimStylePtr Style;
    __declspec(property(get=GetPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[][];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetPMIName,put=PutPMIName))
    _bstr_t PMIName;
    __declspec(property(get=GetWeldInFieldFlagDirection,put=PutWeldInFieldFlagDirection))
    enum WeldSymbolFlagDirectionConstants WeldInFieldFlagDirection;
    __declspec(property(get=GetIsTerminatorAttachedToEntity))
    VARIANT_BOOL IsTerminatorAttachedToEntity;
    __declspec(property(get=GetBreakLineDistance,put=PutBreakLineDistance))
    double BreakLineDistance;
    __declspec(property(get=GetBreakLine,put=PutBreakLine))
    VARIANT_BOOL BreakLine;
    __declspec(property(get=GetBreakLineDirection,put=PutBreakLineDirection))
    VARIANT_BOOL BreakLineDirection;
    __declspec(property(get=GetLeader,put=PutLeader))
    VARIANT_BOOL Leader;
    __declspec(property(get=GetVertexCount))
    long VertexCount;

    //
    // Wrapper methods for error-handling
    //

    DimStylePtr GetStyle ( );
    HRESULT SetTerminator (
        IDispatch * TerminatorObj,
        double x,
        double y,
        double z,
        VARIANT_BOOL keyPoint );
    HRESULT GetTerminator (
        IDispatch * * TerminatorObj,
        double * x,
        double * y,
        double * z,
        VARIANT_BOOL * keyPoint );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    IDispatchPtr GetPlane ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse,
        long Lcid = 0 );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    double GetBreakLineDistance ( );
    void PutBreakLineDistance (
        double Distance );
    VARIANT_BOOL GetBreakLine ( );
    void PutBreakLine (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetBreakLineDirection ( );
    void PutBreakLineDirection (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetLeader ( );
    void PutLeader (
        VARIANT_BOOL Flag );
    long GetVertexCount ( );
    HRESULT GetVertices (
        long * VertexCount,
        SAFEARRAY * * Vertices );
    HRESULT SetVertices (
        long VertexCount,
        SAFEARRAY * * Vertices );
    HRESULT GetVertex (
        long Index,
        double * x,
        double * y,
        double * z );
    HRESULT SetVertex (
        long Index,
        double x,
        double y,
        double z );
    HRESULT InsertVertex (
        long Index,
        double x,
        double y,
        double z );
    HRESULT AddVertex (
        double x,
        double y,
        double z );
    HRESULT RemoveVertex (
        long Index );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    double GetRotationAngle ( );
    void PutRotationAngle (
        double pdAngle );
    VARIANT_BOOL GetWeldInField ( );
    void PutWeldInField (
        VARIANT_BOOL Flag );
    VARIANT_BOOL GetWeldAllAround ( );
    void PutWeldAllAround (
        VARIANT_BOOL Flag );
    double GetTextScale ( );
    void PutTextScale (
        double pdAngle );
    void PutLayer (
        _bstr_t Layer );
    _bstr_t GetLayer ( );
    IDispatchPtr GetPMIPlane ( );
    double GetPMITrackDistance ( );
    void PutPMITrackDistance (
        double pdPMITrackDistance );
    void PutAboveBreakLineText (
        _bstr_t Text );
    _bstr_t GetAboveBreakLineText ( );
    void PutBelowBreakLineText (
        _bstr_t Text );
    _bstr_t GetBelowBreakLineText ( );
    void PutAboveLeaderLineText (
        _bstr_t Text );
    _bstr_t GetAboveLeaderLineText ( );
    void PutBelowLeaderLineText (
        _bstr_t Text );
    _bstr_t GetBelowLeaderLineText ( );
    VARIANT_BOOL GetPermanentJoint ( );
    void PutPermanentJoint (
        VARIANT_BOOL Flag );
    void PutPermanentJointType (
        enum DimGostWeldPermanentJointTypeConstants pVal );
    enum DimGostWeldPermanentJointTypeConstants GetPermanentJointType ( );
    void PutTerminatorSideType (
        enum DimGostWeldTerminatorTypeConstants pVal );
    enum DimGostWeldTerminatorTypeConstants GetTerminatorSideType ( );
    void PutHidePMI (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetHidePMI ( );
    DisplayDataPtr GetDisplayData ( );
    HRESULT PromoteToCurrentVersion ( );
    void PutPMIName (
        _bstr_t Text );
    _bstr_t GetPMIName ( );
    void PutWeldInFieldFlagDirection (
        enum WeldSymbolFlagDirectionConstants Flag );
    enum WeldSymbolFlagDirectionConstants GetWeldInFieldFlagDirection ( );
    HRESULT TransformToModelCoordinates (
        double InputX,
        double InputY,
        double InputZ,
        double * ModelX,
        double * ModelY,
        double * ModelZ );
    VARIANT_BOOL GetIsTerminatorAttachedToEntity ( );
    HRESULT GetReferencedGeometry (
        SAFEARRAY * * ReferencedGeometries );
    HRESULT SetReferencedGeometry (
        SAFEARRAY * * ReferencedGeometries );
    HRESULT GetReferencedObjectInfo (
        SAFEARRAY * * ReferencedObjects,
        SAFEARRAY * * ReferencedObjectTypes );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct DimStyle * * Style ) = 0;
      virtual HRESULT __stdcall raw_SetTerminator (
        /*[in]*/ IDispatch * TerminatorObj,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z,
        /*[in]*/ VARIANT_BOOL keyPoint ) = 0;
      virtual HRESULT __stdcall raw_GetTerminator (
        /*[out]*/ IDispatch * * TerminatorObj,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ VARIANT_BOOL * keyPoint ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
      virtual HRESULT __stdcall get_Plane (
        /*[out,retval]*/ IDispatch * * Plane ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[in]*/ VARIANT Recurse,
        /*[in,lcid]*/ long Lcid,
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * Type ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * ZOrder ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[in]*/ VARIANT Recurse,
        /*[out,retval]*/ BSTR * Key ) = 0;
      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ IDispatch * * Document ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ double XFrom,
        /*[in]*/ double YFrom,
        /*[in]*/ double XTo,
        /*[in]*/ double YTo ) = 0;
      virtual HRESULT __stdcall raw_Scale (
        /*[in]*/ double Factor ) = 0;
      virtual HRESULT __stdcall raw_Rotate (
        /*[in]*/ double Angle,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[out]*/ double * XMinimum,
        /*[out]*/ double * YMinimum,
        /*[out]*/ double * XMaximum,
        /*[out]*/ double * YMaximum ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ VARIANT XDistance,
        /*[in]*/ VARIANT YDistance,
        /*[out,retval]*/ IDispatch * * NewObject ) = 0;
      virtual HRESULT __stdcall raw_Mirror (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ VARIANT BooleanCopyFlag,
        /*[out,retval]*/ IDispatch * * Object ) = 0;
      virtual HRESULT __stdcall raw_BringToFront ( ) = 0;
      virtual HRESULT __stdcall raw_BringForward ( ) = 0;
      virtual HRESULT __stdcall raw_SendToBack ( ) = 0;
      virtual HRESULT __stdcall raw_SendBackward ( ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall get_BreakLineDistance (
        /*[out,retval]*/ double * Distance ) = 0;
      virtual HRESULT __stdcall put_BreakLineDistance (
        /*[in]*/ double Distance ) = 0;
      virtual HRESULT __stdcall get_BreakLine (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_BreakLine (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_BreakLineDirection (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_BreakLineDirection (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_Leader (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_Leader (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_VertexCount (
        /*[out,retval]*/ long * VertexCount ) = 0;
      virtual HRESULT __stdcall raw_GetVertices (
        /*[out]*/ long * VertexCount,
        /*[in,out]*/ SAFEARRAY * * Vertices ) = 0;
      virtual HRESULT __stdcall raw_SetVertices (
        /*[in]*/ long VertexCount,
        /*[in]*/ SAFEARRAY * * Vertices ) = 0;
      virtual HRESULT __stdcall raw_GetVertex (
        /*[in]*/ long Index,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[in]*/ double * z ) = 0;
      virtual HRESULT __stdcall raw_SetVertex (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_InsertVertex (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_AddVertex (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_RemoveVertex (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall get_KeyPointCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_GetKeyPoint (
        /*[in]*/ long Index,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ enum TGFramework::KeyPointType * KeypointType,
        /*[out]*/ long * HandleType ) = 0;
      virtual HRESULT __stdcall raw_SetKeyPoint (
        /*[in]*/ long Index,
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall get_RotationAngle (
        /*[out,retval]*/ double * pdAngle ) = 0;
      virtual HRESULT __stdcall put_RotationAngle (
        /*[in]*/ double pdAngle ) = 0;
      virtual HRESULT __stdcall get_WeldInField (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_WeldInField (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_WeldAllAround (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_WeldAllAround (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall get_TextScale (
        /*[out,retval]*/ double * pdAngle ) = 0;
      virtual HRESULT __stdcall put_TextScale (
        /*[in]*/ double pdAngle ) = 0;
      virtual HRESULT __stdcall put_Layer (
        /*[in]*/ BSTR Layer ) = 0;
      virtual HRESULT __stdcall get_Layer (
        /*[out,retval]*/ BSTR * Layer ) = 0;
      virtual HRESULT __stdcall get_PMIPlane (
        /*[out,retval]*/ IDispatch * * pPMIPlane ) = 0;
      virtual HRESULT __stdcall get_PMITrackDistance (
        /*[out,retval]*/ double * pdPMITrackDistance ) = 0;
      virtual HRESULT __stdcall put_PMITrackDistance (
        /*[in]*/ double pdPMITrackDistance ) = 0;
      virtual HRESULT __stdcall put_AboveBreakLineText (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_AboveBreakLineText (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_BelowBreakLineText (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_BelowBreakLineText (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_AboveLeaderLineText (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_AboveLeaderLineText (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_BelowLeaderLineText (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_BelowLeaderLineText (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall get_PermanentJoint (
        /*[out,retval]*/ VARIANT_BOOL * Flag ) = 0;
      virtual HRESULT __stdcall put_PermanentJoint (
        /*[in]*/ VARIANT_BOOL Flag ) = 0;
      virtual HRESULT __stdcall put_PermanentJointType (
        /*[in]*/ enum DimGostWeldPermanentJointTypeConstants pVal ) = 0;
      virtual HRESULT __stdcall get_PermanentJointType (
        /*[out,retval]*/ enum DimGostWeldPermanentJointTypeConstants * pVal ) = 0;
      virtual HRESULT __stdcall put_TerminatorSideType (
        /*[in]*/ enum DimGostWeldTerminatorTypeConstants pVal ) = 0;
      virtual HRESULT __stdcall get_TerminatorSideType (
        /*[out,retval]*/ enum DimGostWeldTerminatorTypeConstants * pVal ) = 0;
      virtual HRESULT __stdcall put_HidePMI (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_HidePMI (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
      virtual HRESULT __stdcall raw_GetDisplayData (
        /*[out,retval]*/ struct DisplayData * * pDisplayData ) = 0;
      virtual HRESULT __stdcall raw_PromoteToCurrentVersion ( ) = 0;
      virtual HRESULT __stdcall put_PMIName (
        /*[in]*/ BSTR Text ) = 0;
      virtual HRESULT __stdcall get_PMIName (
        /*[out,retval]*/ BSTR * Text ) = 0;
      virtual HRESULT __stdcall put_WeldInFieldFlagDirection (
        /*[in]*/ enum WeldSymbolFlagDirectionConstants Flag ) = 0;
      virtual HRESULT __stdcall get_WeldInFieldFlagDirection (
        /*[out,retval]*/ enum WeldSymbolFlagDirectionConstants * Flag ) = 0;
      virtual HRESULT __stdcall raw_TransformToModelCoordinates (
        /*[in]*/ double InputX,
        /*[in]*/ double InputY,
        /*[in]*/ double InputZ,
        /*[out]*/ double * ModelX,
        /*[out]*/ double * ModelY,
        /*[out]*/ double * ModelZ ) = 0;
      virtual HRESULT __stdcall get_IsTerminatorAttachedToEntity (
        /*[out,retval]*/ VARIANT_BOOL * bIsAttached ) = 0;
      virtual HRESULT __stdcall raw_GetReferencedGeometry (
        /*[out]*/ SAFEARRAY * * ReferencedGeometries ) = 0;
      virtual HRESULT __stdcall raw_SetReferencedGeometry (
        /*[in]*/ SAFEARRAY * * ReferencedGeometries ) = 0;
      virtual HRESULT __stdcall raw_GetReferencedObjectInfo (
        /*[out]*/ SAFEARRAY * * ReferencedObjects,
        /*[out]*/ SAFEARRAY * * ReferencedObjectTypes ) = 0;
};

struct __declspec(uuid("1d0f4998-d931-45a9-9f9c-bd18ebcd8d27"))
GostWeldSymbol : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKeyPointCount))
    long KeyPointCount;
    __declspec(property(get=GetRotationAngle,put=PutRotationAngle))
    double RotationAngle;
    __declspec(property(get=GetWeldInField,put=PutWeldInField))
    VARIANT_BOOL WeldInField;
    __declspec(property(get=GetWeldAllAround,put=PutWeldAllAround))
    VARIANT_BOOL WeldAllAround;
    __declspec(property(get=GetTextScale,put=PutTextScale))
    double TextScale;
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetPMIPlane))
    IDispatchPtr PMIPlane;
    __declspec(property(get=GetPMITrackDistance,put=PutPMITrackDistance))
    double PMITrackDistance;
    __declspec(property(get=GetAboveBreakLineText,put=PutAboveBreakLineText))
    _bstr_t AboveBreakLineText;
    __declspec(property(get=GetBelowBreakLineText,put=PutBelowBreakLineText))
    _bstr_t BelowBreakLineText;
    __declspec(property(get=GetAboveLeaderLineText,put=PutAboveLeaderLineText))
    _bstr_t AboveLeaderLineText;
    __declspec(property(get=GetBelowLeaderLineText,put=PutBelowLeaderLineText))
    _bstr_t BelowLeaderLineText;
    __declspec(property(get=GetPermanentJoint,put=PutPermanentJoint))
    VARIANT_BOOL PermanentJoint;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];
    __declspec(property(get=GetPermanentJointType,put=PutPermanentJointType))
    enum DimGostWeldPermanentJointTypeConstants PermanentJointType;
    __declspec(property(get=GetTerminatorSideType,put=PutTerminatorSideType))
    enum DimGostWeldTerminatorTypeConstants TerminatorSideType;
    __declspec(property(get=GetHidePMI,put=PutHidePMI))
    VARIANT_BOOL HidePMI;
    __declspec(property(get=GetStyle))
    DimStylePtr Style;
    __declspec(property(get=GetPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetPMIName,put=PutPMIName))
    _bstr_t PMIName;
    __declspec(property(get=GetWeldInFieldFlagDirection,put=PutWeldInFieldFlagDirection))
    enum WeldSymbolFlagDirectionConstants WeldInFieldFlagDirection;
    __declspec(property(get=GetIsTerminatorAttachedToEntity))
    VARIANT_BOOL IsTerminatorAttachedToEntity;
    __declspec(property(get=GetBreakLineDistance,put=PutBreakLineDistance))
    double BreakLineDistance;
    __declspec(property(get=GetBreakLine,put=PutBreakLine))
    VARIANT_BOOL BreakLine;
    __declspec(property(get=GetBreakLineDirection,put=PutBreakLineDirection))
    VARIANT_BOOL BreakLineDirection;
    __declspec(property(get=GetLeader,put=PutLeader))
    VARIANT_BOOL Leader;
    __declspec(property(get=GetVertexCount))
    long VertexCount;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    DimStylePtr GetStyle ( );
    HRESULT SetTerminator (
        IDispatch * TerminatorObj,
        double x,
        double y,
        double z,
        VARIANT_BOOL keyPoint );
    HRESULT GetTerminator (
        IDispatch * * TerminatorObj,
        double * x,
        double * y,
        double * z,
        VARIANT_BOOL * keyPoint );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    IDispatchPtr GetPlane ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    double GetBreakLineDistance ( );
    void PutBreakLineDistance (
        double _arg1 );
    VARIANT_BOOL GetBreakLine ( );
    void PutBreakLine (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetBreakLineDirection ( );
    void PutBreakLineDirection (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetLeader ( );
    void PutLeader (
        VARIANT_BOOL _arg1 );
    long GetVertexCount ( );
    HRESULT GetVertices (
        long * VertexCount,
        SAFEARRAY * * Vertices );
    HRESULT SetVertices (
        long VertexCount,
        SAFEARRAY * * Vertices );
    HRESULT GetVertex (
        long Index,
        double * x,
        double * y,
        double * z );
    HRESULT SetVertex (
        long Index,
        double x,
        double y,
        double z );
    HRESULT InsertVertex (
        long Index,
        double x,
        double y,
        double z );
    HRESULT AddVertex (
        double x,
        double y,
        double z );
    HRESULT RemoveVertex (
        long Index );
    long GetKeyPointCount ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT SetKeyPoint (
        long Index,
        double x,
        double y,
        double z );
    double GetRotationAngle ( );
    void PutRotationAngle (
        double _arg1 );
    VARIANT_BOOL GetWeldInField ( );
    void PutWeldInField (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetWeldAllAround ( );
    void PutWeldAllAround (
        VARIANT_BOOL _arg1 );
    double GetTextScale ( );
    void PutTextScale (
        double _arg1 );
    void PutLayer (
        _bstr_t _arg1 );
    _bstr_t GetLayer ( );
    IDispatchPtr GetPMIPlane ( );
    double GetPMITrackDistance ( );
    void PutPMITrackDistance (
        double _arg1 );
    void PutAboveBreakLineText (
        _bstr_t _arg1 );
    _bstr_t GetAboveBreakLineText ( );
    void PutBelowBreakLineText (
        _bstr_t _arg1 );
    _bstr_t GetBelowBreakLineText ( );
    void PutAboveLeaderLineText (
        _bstr_t _arg1 );
    _bstr_t GetAboveLeaderLineText ( );
    void PutBelowLeaderLineText (
        _bstr_t _arg1 );
    _bstr_t GetBelowLeaderLineText ( );
    VARIANT_BOOL GetPermanentJoint ( );
    void PutPermanentJoint (
        VARIANT_BOOL _arg1 );
    void PutPermanentJointType (
        enum DimGostWeldPermanentJointTypeConstants _arg1 );
    enum DimGostWeldPermanentJointTypeConstants GetPermanentJointType ( );
    void PutTerminatorSideType (
        enum DimGostWeldTerminatorTypeConstants _arg1 );
    enum DimGostWeldTerminatorTypeConstants GetTerminatorSideType ( );
    void PutHidePMI (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHidePMI ( );
    DisplayDataPtr GetDisplayData ( );
    HRESULT PromoteToCurrentVersion ( );
    void PutPMIName (
        _bstr_t _arg1 );
    _bstr_t GetPMIName ( );
    void PutWeldInFieldFlagDirection (
        enum WeldSymbolFlagDirectionConstants _arg1 );
    enum WeldSymbolFlagDirectionConstants GetWeldInFieldFlagDirection ( );
    HRESULT TransformToModelCoordinates (
        double InputX,
        double InputY,
        double InputZ,
        double * ModelX,
        double * ModelY,
        double * ModelZ );
    VARIANT_BOOL GetIsTerminatorAttachedToEntity ( );
    HRESULT GetReferencedGeometry (
        SAFEARRAY * * ReferencedGeometries );
    HRESULT SetReferencedGeometry (
        SAFEARRAY * * ReferencedGeometries );
    HRESULT GetReferencedObjectInfo (
        SAFEARRAY * * ReferencedObjects,
        SAFEARRAY * * ReferencedObjectTypes );
};

struct __declspec(uuid("da6e00b5-56cc-40b5-aff2-c9717f1649a3"))
_IGostWeldSymbolsAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPlane,put=PutPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetStyle,put=PutStyle))
    DimensionStylePtr Style;
    __declspec(property(get=GetAnnotInitData))
    AnnotInitDataPtr AnnotInitData;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    GostWeldSymbolPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    void PutPlane (
        IDispatch * Plane );
    IDispatchPtr GetPlane ( );
    void PutStyle (
        struct DimensionStyle * Style );
    DimensionStylePtr GetStyle ( );
    GostWeldSymbolPtr AddByTerminator (
        IDispatch * TerminatorObject,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint1 );
    HRESULT ClearPlane ( );
    HRESULT ClearStyle ( );
    AnnotInitDataPtr GetAnnotInitData ( );
    GostWeldSymbolPtr AddGostWeldSymbol (
        struct AnnotInitData * AnnotInitData );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * App ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct GostWeldSymbol * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Enum ) = 0;
      virtual HRESULT __stdcall put_Plane (
        /*[in]*/ IDispatch * Plane ) = 0;
      virtual HRESULT __stdcall get_Plane (
        /*[out,retval]*/ IDispatch * * Plane ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ struct DimensionStyle * Style ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct DimensionStyle * * Style ) = 0;
      virtual HRESULT __stdcall raw_AddByTerminator (
        /*[in]*/ IDispatch * TerminatorObject,
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double z1,
        /*[in]*/ VARIANT_BOOL keyPoint1,
        /*[out,retval]*/ struct GostWeldSymbol * * Obj ) = 0;
      virtual HRESULT __stdcall raw_ClearPlane ( ) = 0;
      virtual HRESULT __stdcall raw_ClearStyle ( ) = 0;
      virtual HRESULT __stdcall get_AnnotInitData (
        /*[out,retval]*/ struct AnnotInitData * * AnnotInitData ) = 0;
      virtual HRESULT __stdcall raw_AddGostWeldSymbol (
        /*[in]*/ struct AnnotInitData * AnnotInitData,
        /*[out,retval]*/ struct GostWeldSymbol * * Obj ) = 0;
};

struct __declspec(uuid("5ebc8f23-ea49-4015-927e-3e4596774a79"))
_ISymbolicPMIAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[][];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetHidePMI,put=PutHidePMI))
    VARIANT_BOOL HidePMI;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse,
        long Lcid = 0 );
    IDispatchPtr GetParent ( );
    long GetType ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Delete ( );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    HRESULT Select ( );
    void PutHidePMI (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetHidePMI ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[in]*/ VARIANT Recurse,
        /*[in,lcid]*/ long Lcid,
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * Type ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[in]*/ VARIANT Recurse,
        /*[out,retval]*/ BSTR * Key ) = 0;
      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ IDispatch * * Document ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[out]*/ double * XMinimum,
        /*[out]*/ double * YMinimum,
        /*[out]*/ double * XMaximum,
        /*[out]*/ double * YMaximum ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall put_HidePMI (
        /*[in]*/ VARIANT_BOOL Value ) = 0;
      virtual HRESULT __stdcall get_HidePMI (
        /*[out,retval]*/ VARIANT_BOOL * Value ) = 0;
};

struct __declspec(uuid("da6e00b3-56cc-40b5-aff2-c9717f1649a3"))
_ISymbolicPMIGroupAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * App ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Enum ) = 0;
};

struct __declspec(uuid("1cb73369-a62a-11ce-b05b-08003601dd4b"))
Relations2d : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    Relation2dPtr Item (
        const _variant_t & Index );
    long GetCount ( );
    Relation2dPtr AddHorizontalAlign (
        IDispatch * Object1,
        long Index1,
        IDispatch * Object2,
        long Index2,
        const _variant_t & guaranteed_ok = vtMissing );
    Relation2dPtr AddVerticalAlign (
        IDispatch * Object1,
        long Index1,
        IDispatch * Object2,
        long Index2,
        const _variant_t & guaranteed_ok = vtMissing );
    Relation2dPtr AddConcentric (
        IDispatch * Object1,
        IDispatch * Object2,
        const _variant_t & guaranteed_ok = vtMissing );
    Relation2dPtr AddFix (
        IDispatch * Object,
        const _variant_t & guaranteed_ok = vtMissing );
    Relation2dPtr AddKeypointFix (
        IDispatch * Object,
        long Index,
        const _variant_t & guaranteed_ok = vtMissing );
    Relation2dPtr AddHorizontal (
        IDispatch * Object,
        const _variant_t & guaranteed_ok = vtMissing );
    Relation2dPtr AddVertical (
        IDispatch * Object,
        const _variant_t & guaranteed_ok = vtMissing );
    Relation2dPtr AddParallel (
        IDispatch * Object1,
        IDispatch * Object2,
        const _variant_t & guaranteed_ok = vtMissing );
    Relation2dPtr AddPerpendicular (
        IDispatch * Object1,
        IDispatch * Object2,
        const _variant_t & guaranteed_ok = vtMissing );
    Relation2dPtr AddTangent (
        IDispatch * Object1,
        IDispatch * Object2,
        const _variant_t & guaranteed_ok = vtMissing );
    Relation2dPtr AddEqualDirection (
        IDispatch * Object1,
        long Index1,
        IDispatch * Object2,
        long Index2,
        const _variant_t & guaranteed_ok = vtMissing );
    Relation2dPtr AddTangentEqualCurvature (
        IDispatch * Object1,
        long Index1,
        IDispatch * Object2,
        long Index2,
        const _variant_t & guaranteed_ok = vtMissing );
    Relation2dPtr AddEqualDirectionEqualCurvature (
        IDispatch * Object1,
        long Index1,
        IDispatch * Object2,
        long Index2,
        const _variant_t & guaranteed_ok = vtMissing );
    Relation2dPtr AddTangentBetweenCompoundCurves (
        long NumberElements1,
        SAFEARRAY * * Elements1,
        long NumberElements2,
        SAFEARRAY * * Elements2,
        const _variant_t & guaranteed_ok = vtMissing );
    Relation2dPtr AddIntersection (
        IDispatch * Object1,
        long Index,
        IDispatch * Object2,
        IDispatch * Object3,
        const _variant_t & guaranteed_ok = vtMissing );
    Relation2dPtr AddPointOn (
        IDispatch * Object1,
        long Index,
        IDispatch * Object2,
        const _variant_t & guaranteed_ok = vtMissing );
    Relation2dPtr AddPointOnCompoundCurve (
        IDispatch * Object1,
        long Index,
        long NumberElements,
        SAFEARRAY * * Elements,
        const _variant_t & guaranteed_ok = vtMissing );
    Relation2dPtr AddKeypoint (
        IDispatch * Object1,
        long Index1,
        IDispatch * Object2,
        long Index2,
        const _variant_t & guaranteed_ok = vtMissing );
    Relation2dPtr AddSymmetric (
        IDispatch * pLine,
        IDispatch * Object2,
        IDispatch * Object3,
        const _variant_t & guaranteed_ok = vtMissing );
    Relation2dPtr AddEqual (
        IDispatch * Object1,
        IDispatch * Object2,
        const _variant_t & guaranteed_ok = vtMissing );
    Relation2dPtr AddSet (
        long NumberElements,
        SAFEARRAY * * Elements );
    Relation2dPtr AddColinear (
        IDispatch * Object1,
        IDispatch * Object2,
        const _variant_t & guaranteed_ok = vtMissing );
    Relation2dPtr AddFillet (
        IDispatch * Object1,
        long Index1,
        IDispatch * Arc,
        long arc_index,
        IDispatch * Object2,
        long Index2,
        const _variant_t & guaranteed_ok = vtMissing );
    Relation2dPtr AddLink (
        IDispatch * Object1,
        IDispatch * Object2,
        const _variant_t & guaranteed_ok = vtMissing );
    Relation2dPtr AddChamfer (
        IDispatch * Object1,
        long Index1,
        IDispatch * Line,
        long line_index,
        IDispatch * Object2,
        long Index2,
        const _variant_t & guaranteed_ok = vtMissing );
    HRESULT AddAutoConstraints (
        double dist_tol,
        double angle_tol,
        long NumElements,
        SAFEARRAY * * Elements,
        long NumCnstrTypes,
        SAFEARRAY * * CnstrTypes,
        long * NumCnstrs,
        SAFEARRAY * * Cnstrs,
        const _variant_t & varXOriginUnk,
        const _variant_t & varYOriginUnk,
        const _variant_t & Xdim_pos_x,
        const _variant_t & Xdim_pos_y,
        const _variant_t & Ydim_pos_x,
        const _variant_t & Ydim_pos_y,
        const _variant_t & DimPlacementOptions,
        const _variant_t & LinearDimOptions,
        VARIANT_BOOL PlaceRadiusDimOnCircle,
        VARIANT_BOOL PlaceRadiusDimOnArc,
        VARIANT_BOOL PlaceDistanceDimFromCircleCenter );
};

struct __declspec(uuid("0ad0e8a3-9cf6-11ce-8d65-08003601bb4e"))
BackDrop : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMarginColor,put=PutMarginColor))
    long MarginColor;
    __declspec(property(get=GetMarginDisplay,put=PutMarginDisplay))
    VARIANT_BOOL MarginDisplay;
    __declspec(property(get=GetGridColor,put=PutGridColor))
    long GridColor;
    __declspec(property(get=GetGridType,put=PutGridType))
    enum GridTypeConstants GridType;
    __declspec(property(get=GetDynamicGridSpacing,put=PutDynamicGridSpacing))
    enum DynamicGridSpacingConstants DynamicGridSpacing;
    __declspec(property(get=GetStaticGridSpacing,put=PutStaticGridSpacing))
    double StaticGridSpacing;
    __declspec(property(get=GetGridDisplay,put=PutGridDisplay))
    VARIANT_BOOL GridDisplay;
    __declspec(property(get=GetUseCustomSheetColor,put=PutUseCustomSheetColor))
    VARIANT_BOOL UseCustomSheetColor;
    __declspec(property(get=GetCustomSheetColor,put=PutCustomSheetColor))
    long CustomSheetColor;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetMarginColor ( );
    void PutMarginColor (
        long _arg1 );
    void PutMarginDisplay (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetMarginDisplay ( );
    long GetGridColor ( );
    void PutGridColor (
        long _arg1 );
    enum GridTypeConstants GetGridType ( );
    void PutGridType (
        enum GridTypeConstants _arg1 );
    void PutDynamicGridSpacing (
        enum DynamicGridSpacingConstants _arg1 );
    enum DynamicGridSpacingConstants GetDynamicGridSpacing ( );
    double GetStaticGridSpacing ( );
    void PutStaticGridSpacing (
        double _arg1 );
    VARIANT_BOOL GetGridDisplay ( );
    void PutGridDisplay (
        VARIANT_BOOL _arg1 );
    void PutUseCustomSheetColor (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetUseCustomSheetColor ( );
    long GetCustomSheetColor ( );
    void PutCustomSheetColor (
        long _arg1 );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
};

struct __declspec(uuid("be6feaf2-19f0-11cf-9947-08003601b103"))
GroupStyle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLinearColor,put=PutLinearColor))
    long LinearColor;
    __declspec(property(get=GetWidth,put=PutWidth))
    double Width;
    __declspec(property(get=GetUnits,put=PutUnits))
    long Units;
    __declspec(property(get=GetAutoPhase,put=PutAutoPhase))
    VARIANT_BOOL AutoPhase;
    __declspec(property(get=GetDashGapCount))
    long DashGapCount;
    __declspec(property(get=GetDashStrokePercent,put=PutDashStrokePercent))
    double DashStrokePercent;
    __declspec(property(get=GetLinearName,put=PutLinearName))
    _bstr_t LinearName;
    __declspec(property(get=GetDashName,put=PutDashName))
    _bstr_t DashName;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    void PutLinearColor (
        long _arg1 );
    long GetLinearColor ( );
    double GetWidth ( );
    void PutWidth (
        double _arg1 );
    void PutUnits (
        long _arg1 );
    long GetUnits ( );
    VARIANT_BOOL GetAutoPhase ( );
    void PutAutoPhase (
        VARIANT_BOOL _arg1 );
    long GetDashGapCount ( );
    double GetDashStrokePercent ( );
    void PutDashStrokePercent (
        double _arg1 );
    void PutLinearName (
        _bstr_t _arg1 );
    _bstr_t GetLinearName ( );
    void PutDashName (
        _bstr_t _arg1 );
    _bstr_t GetDashName ( );
    HRESULT UseActiveStyle (
        long StyleType );
    HRESULT SetDashGap (
        long DashCount,
        SAFEARRAY * * Dashes );
    HRESULT GetDashGap (
        long DashCount,
        SAFEARRAY * * Dashes );
};

struct __declspec(uuid("ea07bc80-31d6-11ce-93f4-080036373002"))
DimensionStyles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetActive,put=PutActive))
    _bstr_t Active;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    DimensionStylePtr Item (
        const _variant_t & Index );
    DimensionStylePtr Add (
        _bstr_t Name,
        _bstr_t Parent );
    HRESULT Remove (
        _bstr_t Name );
    _bstr_t GetActive ( );
    void PutActive (
        _bstr_t _arg1 );
    HRESULT AddEx (
        _bstr_t Name,
        VARIANT_BOOL bOverride,
        IDispatch * pSourceDoc );
    VARIANT_BOOL IsDimStyleExists (
        _bstr_t DimensionStyle );
};

struct __declspec(uuid("bd37a85d-c0f1-4a6f-813e-637808e64bd9"))
DrawingViewStyle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetDimensionStyle,put=PutDimensionStyle))
    DimensionStylePtr DimensionStyle;
    __declspec(property(get=GetCodeASSuffix,put=PutCodeASSuffix))
    _bstr_t CodeASSuffix[];
    __declspec(property(get=GetShowCodeASSuffix,put=PutShowCodeASSuffix))
    VARIANT_BOOL ShowCodeASSuffix[];
    __declspec(property(get=GetCodeLNAnnotationSheetNumber,put=PutCodeLNAnnotationSheetNumber))
    _bstr_t CodeLNAnnotationSheetNumber;
    __declspec(property(get=GetShowCodeLNAnnotationSheetNumber,put=PutShowCodeLNAnnotationSheetNumber))
    VARIANT_BOOL ShowCodeLNAnnotationSheetNumber;
    __declspec(property(get=GetCodeVSViewScale,put=PutCodeVSViewScale))
    _bstr_t CodeVSViewScale;
    __declspec(property(get=GetShowCodeVSViewScale,put=PutShowCodeVSViewScale))
    VARIANT_BOOL ShowCodeVSViewScale;
    __declspec(property(get=GetCodeVNViewSheetNumber,put=PutCodeVNViewSheetNumber))
    _bstr_t CodeVNViewSheetNumber;
    __declspec(property(get=GetShowCodeVNViewSheetNumber,put=PutShowCodeVNViewSheetNumber))
    VARIANT_BOOL ShowCodeVNViewSheetNumber;
    __declspec(property(get=GetCodeVRViewRotationAngle,put=PutCodeVRViewRotationAngle))
    _bstr_t CodeVRViewRotationAngle;
    __declspec(property(get=GetShowCodeVRViewRotationAngle,put=PutShowCodeVRViewRotationAngle))
    VARIANT_BOOL ShowCodeVRViewRotationAngle;
    __declspec(property(get=GetCaptionPrimary,put=PutCaptionPrimary))
    _bstr_t CaptionPrimary[];
    __declspec(property(get=GetCaptionSecondary,put=PutCaptionSecondary))
    _bstr_t CaptionSecondary[];
    __declspec(property(get=GetShowPrimaryCaption,put=PutShowPrimaryCaption))
    VARIANT_BOOL ShowPrimaryCaption[];
    __declspec(property(get=GetShowSecondaryCaption,put=PutShowSecondaryCaption))
    VARIANT_BOOL ShowSecondaryCaption[];
    __declspec(property(get=GetCaptionAnnotation,put=PutCaptionAnnotation))
    _bstr_t CaptionAnnotation[];
    __declspec(property(get=GetShowAnnotationCaption,put=PutShowAnnotationCaption))
    VARIANT_BOOL ShowAnnotationCaption[];
    __declspec(property(get=GetPrimaryCaptionFont,put=PutPrimaryCaptionFont))
    _bstr_t PrimaryCaptionFont;
    __declspec(property(get=GetPrimaryCaptionFontStyle,put=PutPrimaryCaptionFontStyle))
    enum DimTextFontStyleConstants PrimaryCaptionFontStyle;
    __declspec(property(get=GetPrimaryCaptionColor,put=PutPrimaryCaptionColor))
    long PrimaryCaptionColor;
    __declspec(property(get=GetPrimaryCaptionTextSize,put=PutPrimaryCaptionTextSize))
    double PrimaryCaptionTextSize;
    __declspec(property(get=GetPrimaryCaptionTextAutoFillBackground,put=PutPrimaryCaptionTextAutoFillBackground))
    VARIANT_BOOL PrimaryCaptionTextAutoFillBackground;
    __declspec(property(get=GetPrimaryCaptionTextAlignment,put=PutPrimaryCaptionTextAlignment))
    enum DrawingViewCaptionTextAlignment PrimaryCaptionTextAlignment;
    __declspec(property(get=GetSecondaryCaptionFont,put=PutSecondaryCaptionFont))
    _bstr_t SecondaryCaptionFont;
    __declspec(property(get=GetSecondaryCaptionFontStyle,put=PutSecondaryCaptionFontStyle))
    enum DimTextFontStyleConstants SecondaryCaptionFontStyle;
    __declspec(property(get=GetSecondaryCaptionColor,put=PutSecondaryCaptionColor))
    long SecondaryCaptionColor;
    __declspec(property(get=GetSecondaryCaptionTextSize,put=PutSecondaryCaptionTextSize))
    double SecondaryCaptionTextSize;
    __declspec(property(get=GetSecondaryCaptionTextAutoFillBackground,put=PutSecondaryCaptionTextAutoFillBackground))
    VARIANT_BOOL SecondaryCaptionTextAutoFillBackground;
    __declspec(property(get=GetSecondaryCaptionTextAlignment,put=PutSecondaryCaptionTextAlignment))
    enum DrawingViewCaptionTextAlignment SecondaryCaptionTextAlignment;
    __declspec(property(get=GetShowPrimarySecondayCaptionSeparator,put=PutShowPrimarySecondayCaptionSeparator))
    VARIANT_BOOL ShowPrimarySecondayCaptionSeparator;
    __declspec(property(get=GetViewCaptionLocation,put=PutViewCaptionLocation))
    enum DimViewCaptionLocationConstants ViewCaptionLocation;
    __declspec(property(get=GetCPLCaptionLocation,put=PutCPLCaptionLocation))
    enum DimViewCPLCaptionLocationConstants CPLCaptionLocation;
    __declspec(property(get=GetVPLCaptionAtEnd,put=PutVPLCaptionAtEnd))
    VARIANT_BOOL VPLCaptionAtEnd;
    __declspec(property(get=GetViewSheetNumberLocation,put=PutViewSheetNumberLocation))
    enum DrawingViewStyleSheetNumberLocationConstants ViewSheetNumberLocation;
    __declspec(property(get=GetViewBorderLineType,put=PutViewBorderLineType))
    _bstr_t ViewBorderLineType;
    __declspec(property(get=GetViewBorderLineWidth,put=PutViewBorderLineWidth))
    double ViewBorderLineWidth;
    __declspec(property(get=GetViewAnnotationLineType,put=PutViewAnnotationLineType))
    _bstr_t ViewAnnotationLineType;
    __declspec(property(get=GetViewAnnotationLineWidth,put=PutViewAnnotationLineWidth))
    double ViewAnnotationLineWidth;
    __declspec(property(get=GetTerminatorDisplay,put=PutTerminatorDisplay))
    enum DimTermDisplayTypeConstants TerminatorDisplay;
    __declspec(property(get=GetTerminatorType,put=PutTerminatorType))
    enum DimTermTypeConstants TerminatorType;
    __declspec(property(get=GetTerminatorSize,put=PutTerminatorSize))
    double TerminatorSize;
    __declspec(property(get=GetThinTerminatorLines,put=PutThinTerminatorLines))
    VARIANT_BOOL ThinTerminatorLines;
    __declspec(property(get=GetCuttingPlaneLineDisplay,put=PutCuttingPlaneLineDisplay))
    enum DimViewCuttingPlaneDisplayTypeConstants CuttingPlaneLineDisplay;
    __declspec(property(get=GetCuttingPlaneLineDisplayStyle,put=PutCuttingPlaneLineDisplayStyle))
    enum CuttingPlaneLineDisplayStyleConstants CuttingPlaneLineDisplayStyle;
    __declspec(property(get=GetThickLineLengthRatio,put=PutThickLineLengthRatio))
    double ThickLineLengthRatio;
    __declspec(property(get=GetCuttingPlaneLineArrowOffset,put=PutCuttingPlaneLineArrowOffset))
    double CuttingPlaneLineArrowOffset;
    __declspec(property(get=GetViewPlaneLineDisplay,put=PutViewPlaneLineDisplay))
    enum DimViewPlaneDisplayTypeConstants ViewPlaneLineDisplay;
    __declspec(property(get=GetParent,put=PutParent))
    _bstr_t Parent;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    void PutDimensionStyle (
        struct DimensionStyle * _arg1 );
    DimensionStylePtr GetDimensionStyle ( );
    void PutCodeASSuffix (
        enum DrawingViewCaptionTypeConstants dvtype,
        _bstr_t _arg2 );
    _bstr_t GetCodeASSuffix (
        enum DrawingViewCaptionTypeConstants dvtype );
    void PutShowCodeASSuffix (
        enum DrawingViewCaptionTypeConstants dvtype,
        VARIANT_BOOL _arg2 );
    VARIANT_BOOL GetShowCodeASSuffix (
        enum DrawingViewCaptionTypeConstants dvtype );
    void PutCodeLNAnnotationSheetNumber (
        _bstr_t _arg1 );
    _bstr_t GetCodeLNAnnotationSheetNumber ( );
    void PutShowCodeLNAnnotationSheetNumber (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowCodeLNAnnotationSheetNumber ( );
    void PutCodeVSViewScale (
        _bstr_t _arg1 );
    _bstr_t GetCodeVSViewScale ( );
    void PutShowCodeVSViewScale (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowCodeVSViewScale ( );
    void PutCodeVNViewSheetNumber (
        _bstr_t _arg1 );
    _bstr_t GetCodeVNViewSheetNumber ( );
    void PutShowCodeVNViewSheetNumber (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowCodeVNViewSheetNumber ( );
    void PutCodeVRViewRotationAngle (
        _bstr_t _arg1 );
    _bstr_t GetCodeVRViewRotationAngle ( );
    void PutShowCodeVRViewRotationAngle (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowCodeVRViewRotationAngle ( );
    void PutCaptionPrimary (
        enum DrawingViewCaptionTypeConstants dvtype,
        _bstr_t _arg2 );
    _bstr_t GetCaptionPrimary (
        enum DrawingViewCaptionTypeConstants dvtype );
    void PutCaptionSecondary (
        enum DrawingViewCaptionTypeConstants dvtype,
        _bstr_t _arg2 );
    _bstr_t GetCaptionSecondary (
        enum DrawingViewCaptionTypeConstants dvtype );
    void PutShowPrimaryCaption (
        enum DrawingViewCaptionTypeConstants dvtype,
        VARIANT_BOOL _arg2 );
    VARIANT_BOOL GetShowPrimaryCaption (
        enum DrawingViewCaptionTypeConstants dvtype );
    void PutShowSecondaryCaption (
        enum DrawingViewCaptionTypeConstants dvtype,
        VARIANT_BOOL _arg2 );
    VARIANT_BOOL GetShowSecondaryCaption (
        enum DrawingViewCaptionTypeConstants dvtype );
    void PutCaptionAnnotation (
        enum DrawingViewAnnotationTypeConstants dvtype,
        _bstr_t _arg2 );
    _bstr_t GetCaptionAnnotation (
        enum DrawingViewAnnotationTypeConstants dvtype );
    void PutShowAnnotationCaption (
        enum DrawingViewAnnotationTypeConstants dvtype,
        VARIANT_BOOL _arg2 );
    VARIANT_BOOL GetShowAnnotationCaption (
        enum DrawingViewAnnotationTypeConstants dvtype );
    void PutPrimaryCaptionFont (
        _bstr_t _arg1 );
    _bstr_t GetPrimaryCaptionFont ( );
    void PutPrimaryCaptionFontStyle (
        enum DimTextFontStyleConstants _arg1 );
    enum DimTextFontStyleConstants GetPrimaryCaptionFontStyle ( );
    void PutPrimaryCaptionColor (
        long _arg1 );
    long GetPrimaryCaptionColor ( );
    void PutPrimaryCaptionTextSize (
        double _arg1 );
    double GetPrimaryCaptionTextSize ( );
    void PutPrimaryCaptionTextAutoFillBackground (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetPrimaryCaptionTextAutoFillBackground ( );
    void PutPrimaryCaptionTextAlignment (
        enum DrawingViewCaptionTextAlignment _arg1 );
    enum DrawingViewCaptionTextAlignment GetPrimaryCaptionTextAlignment ( );
    void PutSecondaryCaptionFont (
        _bstr_t _arg1 );
    _bstr_t GetSecondaryCaptionFont ( );
    void PutSecondaryCaptionFontStyle (
        enum DimTextFontStyleConstants _arg1 );
    enum DimTextFontStyleConstants GetSecondaryCaptionFontStyle ( );
    void PutSecondaryCaptionColor (
        long _arg1 );
    long GetSecondaryCaptionColor ( );
    void PutSecondaryCaptionTextSize (
        double _arg1 );
    double GetSecondaryCaptionTextSize ( );
    void PutSecondaryCaptionTextAutoFillBackground (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetSecondaryCaptionTextAutoFillBackground ( );
    void PutSecondaryCaptionTextAlignment (
        enum DrawingViewCaptionTextAlignment _arg1 );
    enum DrawingViewCaptionTextAlignment GetSecondaryCaptionTextAlignment ( );
    void PutShowPrimarySecondayCaptionSeparator (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowPrimarySecondayCaptionSeparator ( );
    void PutViewCaptionLocation (
        enum DimViewCaptionLocationConstants _arg1 );
    enum DimViewCaptionLocationConstants GetViewCaptionLocation ( );
    void PutCPLCaptionLocation (
        enum DimViewCPLCaptionLocationConstants _arg1 );
    enum DimViewCPLCaptionLocationConstants GetCPLCaptionLocation ( );
    void PutVPLCaptionAtEnd (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetVPLCaptionAtEnd ( );
    void PutViewSheetNumberLocation (
        enum DrawingViewStyleSheetNumberLocationConstants _arg1 );
    enum DrawingViewStyleSheetNumberLocationConstants GetViewSheetNumberLocation ( );
    void PutViewBorderLineType (
        _bstr_t _arg1 );
    _bstr_t GetViewBorderLineType ( );
    void PutViewBorderLineWidth (
        double _arg1 );
    double GetViewBorderLineWidth ( );
    void PutViewAnnotationLineType (
        _bstr_t _arg1 );
    _bstr_t GetViewAnnotationLineType ( );
    void PutViewAnnotationLineWidth (
        double _arg1 );
    double GetViewAnnotationLineWidth ( );
    void PutTerminatorDisplay (
        enum DimTermDisplayTypeConstants _arg1 );
    enum DimTermDisplayTypeConstants GetTerminatorDisplay ( );
    void PutTerminatorType (
        enum DimTermTypeConstants _arg1 );
    enum DimTermTypeConstants GetTerminatorType ( );
    void PutTerminatorSize (
        double _arg1 );
    double GetTerminatorSize ( );
    void PutThinTerminatorLines (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetThinTerminatorLines ( );
    void PutCuttingPlaneLineDisplay (
        enum DimViewCuttingPlaneDisplayTypeConstants _arg1 );
    enum DimViewCuttingPlaneDisplayTypeConstants GetCuttingPlaneLineDisplay ( );
    void PutCuttingPlaneLineDisplayStyle (
        enum CuttingPlaneLineDisplayStyleConstants _arg1 );
    enum CuttingPlaneLineDisplayStyleConstants GetCuttingPlaneLineDisplayStyle ( );
    void PutThickLineLengthRatio (
        double _arg1 );
    double GetThickLineLengthRatio ( );
    void PutCuttingPlaneLineArrowOffset (
        double _arg1 );
    double GetCuttingPlaneLineArrowOffset ( );
    void PutViewPlaneLineDisplay (
        enum DimViewPlaneDisplayTypeConstants _arg1 );
    enum DimViewPlaneDisplayTypeConstants GetViewPlaneLineDisplay ( );
    void PutParent (
        _bstr_t _arg1 );
    _bstr_t GetParent ( );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
};

enum DrawingViewCaptionTypeConstants
{
    sePrincipalView = 1,
    seSectionView = 2,
    seAuxiliaryView = 3,
    seDetailView = 4,
    se2DModelView = 5,
    seNailboardView = 6
};

enum DrawingViewAnnotationTypeConstants
{
    seCuttingPlane = 1,
    seViewingPlane = 2,
    seDetailEnvelope = 3
};

enum DrawingViewCaptionTextAlignment
{
    seTextAlignmentLeft = 1,
    seTextAlignmentCenter = 2,
    seTextAlignmentRight = 3
};

enum DrawingViewStyleSheetNumberLocationConstants
{
    seLeftArrow = 1,
    seRightArrow = 2,
    seBothArrows = 3
};

enum CuttingPlaneLineDisplayStyleConstants
{
    seThick = 1,
    seThickCornersOnly = 2,
    seThickThin = 3
};

struct __declspec(uuid("952bbd2b-ca79-44be-b7d7-c6a3879f7fa1"))
_IDrawingViewStyleAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetDimensionStyle,put=PutDimensionStyle))
    DimensionStylePtr DimensionStyle;
    __declspec(property(get=GetCodeASSuffix,put=PutCodeASSuffix))
    _bstr_t CodeASSuffix[];
    __declspec(property(get=GetShowCodeASSuffix,put=PutShowCodeASSuffix))
    VARIANT_BOOL ShowCodeASSuffix[];
    __declspec(property(get=GetCodeLNAnnotationSheetNumber,put=PutCodeLNAnnotationSheetNumber))
    _bstr_t CodeLNAnnotationSheetNumber;
    __declspec(property(get=GetShowCodeLNAnnotationSheetNumber,put=PutShowCodeLNAnnotationSheetNumber))
    VARIANT_BOOL ShowCodeLNAnnotationSheetNumber;
    __declspec(property(get=GetCodeVSViewScale,put=PutCodeVSViewScale))
    _bstr_t CodeVSViewScale;
    __declspec(property(get=GetShowCodeVSViewScale,put=PutShowCodeVSViewScale))
    VARIANT_BOOL ShowCodeVSViewScale;
    __declspec(property(get=GetCodeVNViewSheetNumber,put=PutCodeVNViewSheetNumber))
    _bstr_t CodeVNViewSheetNumber;
    __declspec(property(get=GetShowCodeVNViewSheetNumber,put=PutShowCodeVNViewSheetNumber))
    VARIANT_BOOL ShowCodeVNViewSheetNumber;
    __declspec(property(get=GetCodeVRViewRotationAngle,put=PutCodeVRViewRotationAngle))
    _bstr_t CodeVRViewRotationAngle;
    __declspec(property(get=GetShowCodeVRViewRotationAngle,put=PutShowCodeVRViewRotationAngle))
    VARIANT_BOOL ShowCodeVRViewRotationAngle;
    __declspec(property(get=GetCaptionPrimary,put=PutCaptionPrimary))
    _bstr_t CaptionPrimary[];
    __declspec(property(get=GetCaptionSecondary,put=PutCaptionSecondary))
    _bstr_t CaptionSecondary[];
    __declspec(property(get=GetShowPrimaryCaption,put=PutShowPrimaryCaption))
    VARIANT_BOOL ShowPrimaryCaption[];
    __declspec(property(get=GetShowSecondaryCaption,put=PutShowSecondaryCaption))
    VARIANT_BOOL ShowSecondaryCaption[];
    __declspec(property(get=GetCaptionAnnotation,put=PutCaptionAnnotation))
    _bstr_t CaptionAnnotation[];
    __declspec(property(get=GetShowAnnotationCaption,put=PutShowAnnotationCaption))
    VARIANT_BOOL ShowAnnotationCaption[];
    __declspec(property(get=GetPrimaryCaptionFont,put=PutPrimaryCaptionFont))
    _bstr_t PrimaryCaptionFont;
    __declspec(property(get=GetPrimaryCaptionFontStyle,put=PutPrimaryCaptionFontStyle))
    enum DimTextFontStyleConstants PrimaryCaptionFontStyle;
    __declspec(property(get=GetPrimaryCaptionColor,put=PutPrimaryCaptionColor))
    long PrimaryCaptionColor;
    __declspec(property(get=GetPrimaryCaptionTextSize,put=PutPrimaryCaptionTextSize))
    double PrimaryCaptionTextSize;
    __declspec(property(get=GetPrimaryCaptionTextAutoFillBackground,put=PutPrimaryCaptionTextAutoFillBackground))
    VARIANT_BOOL PrimaryCaptionTextAutoFillBackground;
    __declspec(property(get=GetPrimaryCaptionTextAlignment,put=PutPrimaryCaptionTextAlignment))
    enum DrawingViewCaptionTextAlignment PrimaryCaptionTextAlignment;
    __declspec(property(get=GetSecondaryCaptionFont,put=PutSecondaryCaptionFont))
    _bstr_t SecondaryCaptionFont;
    __declspec(property(get=GetSecondaryCaptionFontStyle,put=PutSecondaryCaptionFontStyle))
    enum DimTextFontStyleConstants SecondaryCaptionFontStyle;
    __declspec(property(get=GetSecondaryCaptionColor,put=PutSecondaryCaptionColor))
    long SecondaryCaptionColor;
    __declspec(property(get=GetSecondaryCaptionTextSize,put=PutSecondaryCaptionTextSize))
    double SecondaryCaptionTextSize;
    __declspec(property(get=GetSecondaryCaptionTextAutoFillBackground,put=PutSecondaryCaptionTextAutoFillBackground))
    VARIANT_BOOL SecondaryCaptionTextAutoFillBackground;
    __declspec(property(get=GetSecondaryCaptionTextAlignment,put=PutSecondaryCaptionTextAlignment))
    enum DrawingViewCaptionTextAlignment SecondaryCaptionTextAlignment;
    __declspec(property(get=GetShowPrimarySecondayCaptionSeparator,put=PutShowPrimarySecondayCaptionSeparator))
    VARIANT_BOOL ShowPrimarySecondayCaptionSeparator;
    __declspec(property(get=GetViewCaptionLocation,put=PutViewCaptionLocation))
    enum DimViewCaptionLocationConstants ViewCaptionLocation;
    __declspec(property(get=GetCPLCaptionLocation,put=PutCPLCaptionLocation))
    enum DimViewCPLCaptionLocationConstants CPLCaptionLocation;
    __declspec(property(get=GetVPLCaptionAtEnd,put=PutVPLCaptionAtEnd))
    VARIANT_BOOL VPLCaptionAtEnd;
    __declspec(property(get=GetViewSheetNumberLocation,put=PutViewSheetNumberLocation))
    enum DrawingViewStyleSheetNumberLocationConstants ViewSheetNumberLocation;
    __declspec(property(get=GetViewBorderLineType,put=PutViewBorderLineType))
    _bstr_t ViewBorderLineType;
    __declspec(property(get=GetViewBorderLineWidth,put=PutViewBorderLineWidth))
    double ViewBorderLineWidth;
    __declspec(property(get=GetViewAnnotationLineType,put=PutViewAnnotationLineType))
    _bstr_t ViewAnnotationLineType;
    __declspec(property(get=GetViewAnnotationLineWidth,put=PutViewAnnotationLineWidth))
    double ViewAnnotationLineWidth;
    __declspec(property(get=GetTerminatorDisplay,put=PutTerminatorDisplay))
    enum DimTermDisplayTypeConstants TerminatorDisplay;
    __declspec(property(get=GetTerminatorType,put=PutTerminatorType))
    enum DimTermTypeConstants TerminatorType;
    __declspec(property(get=GetTerminatorSize,put=PutTerminatorSize))
    double TerminatorSize;
    __declspec(property(get=GetThinTerminatorLines,put=PutThinTerminatorLines))
    VARIANT_BOOL ThinTerminatorLines;
    __declspec(property(get=GetCuttingPlaneLineDisplay,put=PutCuttingPlaneLineDisplay))
    enum DimViewCuttingPlaneDisplayTypeConstants CuttingPlaneLineDisplay;
    __declspec(property(get=GetCuttingPlaneLineDisplayStyle,put=PutCuttingPlaneLineDisplayStyle))
    enum CuttingPlaneLineDisplayStyleConstants CuttingPlaneLineDisplayStyle;
    __declspec(property(get=GetThickLineLengthRatio,put=PutThickLineLengthRatio))
    double ThickLineLengthRatio;
    __declspec(property(get=GetCuttingPlaneLineArrowOffset,put=PutCuttingPlaneLineArrowOffset))
    double CuttingPlaneLineArrowOffset;
    __declspec(property(get=GetViewPlaneLineDisplay,put=PutViewPlaneLineDisplay))
    enum DimViewPlaneDisplayTypeConstants ViewPlaneLineDisplay;
    __declspec(property(get=GetParent,put=PutParent))
    _bstr_t Parent;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    void PutName (
        _bstr_t Name );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );
    void PutDimensionStyle (
        struct DimensionStyle * ppObj );
    DimensionStylePtr GetDimensionStyle ( );
    void PutCodeASSuffix (
        enum DrawingViewCaptionTypeConstants dvtype,
        _bstr_t caption );
    _bstr_t GetCodeASSuffix (
        enum DrawingViewCaptionTypeConstants dvtype );
    void PutShowCodeASSuffix (
        enum DrawingViewCaptionTypeConstants dvtype,
        VARIANT_BOOL Show );
    VARIANT_BOOL GetShowCodeASSuffix (
        enum DrawingViewCaptionTypeConstants dvtype );
    void PutCodeLNAnnotationSheetNumber (
        _bstr_t caption );
    _bstr_t GetCodeLNAnnotationSheetNumber ( );
    void PutShowCodeLNAnnotationSheetNumber (
        VARIANT_BOOL Show );
    VARIANT_BOOL GetShowCodeLNAnnotationSheetNumber ( );
    void PutCodeVSViewScale (
        _bstr_t caption );
    _bstr_t GetCodeVSViewScale ( );
    void PutShowCodeVSViewScale (
        VARIANT_BOOL Show );
    VARIANT_BOOL GetShowCodeVSViewScale ( );
    void PutCodeVNViewSheetNumber (
        _bstr_t caption );
    _bstr_t GetCodeVNViewSheetNumber ( );
    void PutShowCodeVNViewSheetNumber (
        VARIANT_BOOL Show );
    VARIANT_BOOL GetShowCodeVNViewSheetNumber ( );
    void PutCodeVRViewRotationAngle (
        _bstr_t caption );
    _bstr_t GetCodeVRViewRotationAngle ( );
    void PutShowCodeVRViewRotationAngle (
        VARIANT_BOOL Show );
    VARIANT_BOOL GetShowCodeVRViewRotationAngle ( );
    void PutCaptionPrimary (
        enum DrawingViewCaptionTypeConstants dvtype,
        _bstr_t caption );
    _bstr_t GetCaptionPrimary (
        enum DrawingViewCaptionTypeConstants dvtype );
    void PutCaptionSecondary (
        enum DrawingViewCaptionTypeConstants dvtype,
        _bstr_t caption );
    _bstr_t GetCaptionSecondary (
        enum DrawingViewCaptionTypeConstants dvtype );
    void PutShowPrimaryCaption (
        enum DrawingViewCaptionTypeConstants dvtype,
        VARIANT_BOOL Show );
    VARIANT_BOOL GetShowPrimaryCaption (
        enum DrawingViewCaptionTypeConstants dvtype );
    void PutShowSecondaryCaption (
        enum DrawingViewCaptionTypeConstants dvtype,
        VARIANT_BOOL Show );
    VARIANT_BOOL GetShowSecondaryCaption (
        enum DrawingViewCaptionTypeConstants dvtype );
    void PutCaptionAnnotation (
        enum DrawingViewAnnotationTypeConstants dvtype,
        _bstr_t caption );
    _bstr_t GetCaptionAnnotation (
        enum DrawingViewAnnotationTypeConstants dvtype );
    void PutShowAnnotationCaption (
        enum DrawingViewAnnotationTypeConstants dvtype,
        VARIANT_BOOL Show );
    VARIANT_BOOL GetShowAnnotationCaption (
        enum DrawingViewAnnotationTypeConstants dvtype );
    void PutPrimaryCaptionFont (
        _bstr_t FontName );
    _bstr_t GetPrimaryCaptionFont ( );
    void PutPrimaryCaptionFontStyle (
        enum DimTextFontStyleConstants val );
    enum DimTextFontStyleConstants GetPrimaryCaptionFontStyle ( );
    void PutPrimaryCaptionColor (
        long val );
    long GetPrimaryCaptionColor ( );
    void PutPrimaryCaptionTextSize (
        double val );
    double GetPrimaryCaptionTextSize ( );
    void PutPrimaryCaptionTextAutoFillBackground (
        VARIANT_BOOL val );
    VARIANT_BOOL GetPrimaryCaptionTextAutoFillBackground ( );
    void PutPrimaryCaptionTextAlignment (
        enum DrawingViewCaptionTextAlignment val );
    enum DrawingViewCaptionTextAlignment GetPrimaryCaptionTextAlignment ( );
    void PutSecondaryCaptionFont (
        _bstr_t FontName );
    _bstr_t GetSecondaryCaptionFont ( );
    void PutSecondaryCaptionFontStyle (
        enum DimTextFontStyleConstants val );
    enum DimTextFontStyleConstants GetSecondaryCaptionFontStyle ( );
    void PutSecondaryCaptionColor (
        long val );
    long GetSecondaryCaptionColor ( );
    void PutSecondaryCaptionTextSize (
        double val );
    double GetSecondaryCaptionTextSize ( );
    void PutSecondaryCaptionTextAutoFillBackground (
        VARIANT_BOOL val );
    VARIANT_BOOL GetSecondaryCaptionTextAutoFillBackground ( );
    void PutSecondaryCaptionTextAlignment (
        enum DrawingViewCaptionTextAlignment val );
    enum DrawingViewCaptionTextAlignment GetSecondaryCaptionTextAlignment ( );
    void PutShowPrimarySecondayCaptionSeparator (
        VARIANT_BOOL val );
    VARIANT_BOOL GetShowPrimarySecondayCaptionSeparator ( );
    void PutViewCaptionLocation (
        enum DimViewCaptionLocationConstants val );
    enum DimViewCaptionLocationConstants GetViewCaptionLocation ( );
    void PutCPLCaptionLocation (
        enum DimViewCPLCaptionLocationConstants val );
    enum DimViewCPLCaptionLocationConstants GetCPLCaptionLocation ( );
    void PutVPLCaptionAtEnd (
        VARIANT_BOOL val );
    VARIANT_BOOL GetVPLCaptionAtEnd ( );
    void PutViewSheetNumberLocation (
        enum DrawingViewStyleSheetNumberLocationConstants val );
    enum DrawingViewStyleSheetNumberLocationConstants GetViewSheetNumberLocation ( );
    void PutViewBorderLineType (
        _bstr_t val );
    _bstr_t GetViewBorderLineType ( );
    void PutViewBorderLineWidth (
        double val );
    double GetViewBorderLineWidth ( );
    void PutViewAnnotationLineType (
        _bstr_t val );
    _bstr_t GetViewAnnotationLineType ( );
    void PutViewAnnotationLineWidth (
        double val );
    double GetViewAnnotationLineWidth ( );
    void PutTerminatorDisplay (
        enum DimTermDisplayTypeConstants val );
    enum DimTermDisplayTypeConstants GetTerminatorDisplay ( );
    void PutTerminatorType (
        enum DimTermTypeConstants val );
    enum DimTermTypeConstants GetTerminatorType ( );
    void PutTerminatorSize (
        double val );
    double GetTerminatorSize ( );
    void PutThinTerminatorLines (
        VARIANT_BOOL val );
    VARIANT_BOOL GetThinTerminatorLines ( );
    void PutCuttingPlaneLineDisplay (
        enum DimViewCuttingPlaneDisplayTypeConstants val );
    enum DimViewCuttingPlaneDisplayTypeConstants GetCuttingPlaneLineDisplay ( );
    void PutCuttingPlaneLineDisplayStyle (
        enum CuttingPlaneLineDisplayStyleConstants val );
    enum CuttingPlaneLineDisplayStyleConstants GetCuttingPlaneLineDisplayStyle ( );
    void PutThickLineLengthRatio (
        double val );
    double GetThickLineLengthRatio ( );
    void PutCuttingPlaneLineArrowOffset (
        double val );
    double GetCuttingPlaneLineArrowOffset ( );
    void PutViewPlaneLineDisplay (
        enum DimViewPlaneDisplayTypeConstants val );
    enum DimViewPlaneDisplayTypeConstants GetViewPlaneLineDisplay ( );
    void PutParent (
        _bstr_t Parent );
    _bstr_t GetParent ( );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * Description ) = 0;
      virtual HRESULT __stdcall put_DimensionStyle (
        /*[in]*/ struct DimensionStyle * ppObj ) = 0;
      virtual HRESULT __stdcall get_DimensionStyle (
        /*[out,retval]*/ struct DimensionStyle * * ppObj ) = 0;
      virtual HRESULT __stdcall put_CodeASSuffix (
        /*[in]*/ enum DrawingViewCaptionTypeConstants dvtype,
        /*[in]*/ BSTR caption ) = 0;
      virtual HRESULT __stdcall get_CodeASSuffix (
        /*[in]*/ enum DrawingViewCaptionTypeConstants dvtype,
        /*[out,retval]*/ BSTR * caption ) = 0;
      virtual HRESULT __stdcall put_ShowCodeASSuffix (
        /*[in]*/ enum DrawingViewCaptionTypeConstants dvtype,
        /*[in]*/ VARIANT_BOOL Show ) = 0;
      virtual HRESULT __stdcall get_ShowCodeASSuffix (
        /*[in]*/ enum DrawingViewCaptionTypeConstants dvtype,
        /*[out,retval]*/ VARIANT_BOOL * Show ) = 0;
      virtual HRESULT __stdcall put_CodeLNAnnotationSheetNumber (
        /*[in]*/ BSTR caption ) = 0;
      virtual HRESULT __stdcall get_CodeLNAnnotationSheetNumber (
        /*[out,retval]*/ BSTR * caption ) = 0;
      virtual HRESULT __stdcall put_ShowCodeLNAnnotationSheetNumber (
        /*[in]*/ VARIANT_BOOL Show ) = 0;
      virtual HRESULT __stdcall get_ShowCodeLNAnnotationSheetNumber (
        /*[out,retval]*/ VARIANT_BOOL * Show ) = 0;
      virtual HRESULT __stdcall put_CodeVSViewScale (
        /*[in]*/ BSTR caption ) = 0;
      virtual HRESULT __stdcall get_CodeVSViewScale (
        /*[out,retval]*/ BSTR * caption ) = 0;
      virtual HRESULT __stdcall put_ShowCodeVSViewScale (
        /*[in]*/ VARIANT_BOOL Show ) = 0;
      virtual HRESULT __stdcall get_ShowCodeVSViewScale (
        /*[out,retval]*/ VARIANT_BOOL * Show ) = 0;
      virtual HRESULT __stdcall put_CodeVNViewSheetNumber (
        /*[in]*/ BSTR caption ) = 0;
      virtual HRESULT __stdcall get_CodeVNViewSheetNumber (
        /*[out,retval]*/ BSTR * caption ) = 0;
      virtual HRESULT __stdcall put_ShowCodeVNViewSheetNumber (
        /*[in]*/ VARIANT_BOOL Show ) = 0;
      virtual HRESULT __stdcall get_ShowCodeVNViewSheetNumber (
        /*[out,retval]*/ VARIANT_BOOL * Show ) = 0;
      virtual HRESULT __stdcall put_CodeVRViewRotationAngle (
        /*[in]*/ BSTR caption ) = 0;
      virtual HRESULT __stdcall get_CodeVRViewRotationAngle (
        /*[out,retval]*/ BSTR * caption ) = 0;
      virtual HRESULT __stdcall put_ShowCodeVRViewRotationAngle (
        /*[in]*/ VARIANT_BOOL Show ) = 0;
      virtual HRESULT __stdcall get_ShowCodeVRViewRotationAngle (
        /*[out,retval]*/ VARIANT_BOOL * Show ) = 0;
      virtual HRESULT __stdcall put_CaptionPrimary (
        /*[in]*/ enum DrawingViewCaptionTypeConstants dvtype,
        /*[in]*/ BSTR caption ) = 0;
      virtual HRESULT __stdcall get_CaptionPrimary (
        /*[in]*/ enum DrawingViewCaptionTypeConstants dvtype,
        /*[out,retval]*/ BSTR * caption ) = 0;
      virtual HRESULT __stdcall put_CaptionSecondary (
        /*[in]*/ enum DrawingViewCaptionTypeConstants dvtype,
        /*[in]*/ BSTR caption ) = 0;
      virtual HRESULT __stdcall get_CaptionSecondary (
        /*[in]*/ enum DrawingViewCaptionTypeConstants dvtype,
        /*[out,retval]*/ BSTR * caption ) = 0;
      virtual HRESULT __stdcall put_ShowPrimaryCaption (
        /*[in]*/ enum DrawingViewCaptionTypeConstants dvtype,
        /*[in]*/ VARIANT_BOOL Show ) = 0;
      virtual HRESULT __stdcall get_ShowPrimaryCaption (
        /*[in]*/ enum DrawingViewCaptionTypeConstants dvtype,
        /*[out,retval]*/ VARIANT_BOOL * Show ) = 0;
      virtual HRESULT __stdcall put_ShowSecondaryCaption (
        /*[in]*/ enum DrawingViewCaptionTypeConstants dvtype,
        /*[in]*/ VARIANT_BOOL Show ) = 0;
      virtual HRESULT __stdcall get_ShowSecondaryCaption (
        /*[in]*/ enum DrawingViewCaptionTypeConstants dvtype,
        /*[out,retval]*/ VARIANT_BOOL * Show ) = 0;
      virtual HRESULT __stdcall put_CaptionAnnotation (
        /*[in]*/ enum DrawingViewAnnotationTypeConstants dvtype,
        /*[in]*/ BSTR caption ) = 0;
      virtual HRESULT __stdcall get_CaptionAnnotation (
        /*[in]*/ enum DrawingViewAnnotationTypeConstants dvtype,
        /*[out,retval]*/ BSTR * caption ) = 0;
      virtual HRESULT __stdcall put_ShowAnnotationCaption (
        /*[in]*/ enum DrawingViewAnnotationTypeConstants dvtype,
        /*[in]*/ VARIANT_BOOL Show ) = 0;
      virtual HRESULT __stdcall get_ShowAnnotationCaption (
        /*[in]*/ enum DrawingViewAnnotationTypeConstants dvtype,
        /*[out,retval]*/ VARIANT_BOOL * Show ) = 0;
      virtual HRESULT __stdcall put_PrimaryCaptionFont (
        /*[in]*/ BSTR FontName ) = 0;
      virtual HRESULT __stdcall get_PrimaryCaptionFont (
        /*[out,retval]*/ BSTR * FontName ) = 0;
      virtual HRESULT __stdcall put_PrimaryCaptionFontStyle (
        /*[in]*/ enum DimTextFontStyleConstants val ) = 0;
      virtual HRESULT __stdcall get_PrimaryCaptionFontStyle (
        /*[out,retval]*/ enum DimTextFontStyleConstants * val ) = 0;
      virtual HRESULT __stdcall put_PrimaryCaptionColor (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_PrimaryCaptionColor (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_PrimaryCaptionTextSize (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_PrimaryCaptionTextSize (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_PrimaryCaptionTextAutoFillBackground (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_PrimaryCaptionTextAutoFillBackground (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_PrimaryCaptionTextAlignment (
        /*[in]*/ enum DrawingViewCaptionTextAlignment val ) = 0;
      virtual HRESULT __stdcall get_PrimaryCaptionTextAlignment (
        /*[out,retval]*/ enum DrawingViewCaptionTextAlignment * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryCaptionFont (
        /*[in]*/ BSTR FontName ) = 0;
      virtual HRESULT __stdcall get_SecondaryCaptionFont (
        /*[out,retval]*/ BSTR * FontName ) = 0;
      virtual HRESULT __stdcall put_SecondaryCaptionFontStyle (
        /*[in]*/ enum DimTextFontStyleConstants val ) = 0;
      virtual HRESULT __stdcall get_SecondaryCaptionFontStyle (
        /*[out,retval]*/ enum DimTextFontStyleConstants * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryCaptionColor (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_SecondaryCaptionColor (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryCaptionTextSize (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_SecondaryCaptionTextSize (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryCaptionTextAutoFillBackground (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_SecondaryCaptionTextAutoFillBackground (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_SecondaryCaptionTextAlignment (
        /*[in]*/ enum DrawingViewCaptionTextAlignment val ) = 0;
      virtual HRESULT __stdcall get_SecondaryCaptionTextAlignment (
        /*[out,retval]*/ enum DrawingViewCaptionTextAlignment * val ) = 0;
      virtual HRESULT __stdcall put_ShowPrimarySecondayCaptionSeparator (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_ShowPrimarySecondayCaptionSeparator (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ViewCaptionLocation (
        /*[in]*/ enum DimViewCaptionLocationConstants val ) = 0;
      virtual HRESULT __stdcall get_ViewCaptionLocation (
        /*[out,retval]*/ enum DimViewCaptionLocationConstants * val ) = 0;
      virtual HRESULT __stdcall put_CPLCaptionLocation (
        /*[in]*/ enum DimViewCPLCaptionLocationConstants val ) = 0;
      virtual HRESULT __stdcall get_CPLCaptionLocation (
        /*[out,retval]*/ enum DimViewCPLCaptionLocationConstants * val ) = 0;
      virtual HRESULT __stdcall put_VPLCaptionAtEnd (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_VPLCaptionAtEnd (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ViewSheetNumberLocation (
        /*[in]*/ enum DrawingViewStyleSheetNumberLocationConstants val ) = 0;
      virtual HRESULT __stdcall get_ViewSheetNumberLocation (
        /*[out,retval]*/ enum DrawingViewStyleSheetNumberLocationConstants * val ) = 0;
      virtual HRESULT __stdcall put_ViewBorderLineType (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_ViewBorderLineType (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_ViewBorderLineWidth (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_ViewBorderLineWidth (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_ViewAnnotationLineType (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_ViewAnnotationLineType (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_ViewAnnotationLineWidth (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_ViewAnnotationLineWidth (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_TerminatorDisplay (
        /*[in]*/ enum DimTermDisplayTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_TerminatorDisplay (
        /*[out,retval]*/ enum DimTermDisplayTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_TerminatorType (
        /*[in]*/ enum DimTermTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_TerminatorType (
        /*[out,retval]*/ enum DimTermTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_TerminatorSize (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_TerminatorSize (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_ThinTerminatorLines (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_ThinTerminatorLines (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_CuttingPlaneLineDisplay (
        /*[in]*/ enum DimViewCuttingPlaneDisplayTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_CuttingPlaneLineDisplay (
        /*[out,retval]*/ enum DimViewCuttingPlaneDisplayTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_CuttingPlaneLineDisplayStyle (
        /*[in]*/ enum CuttingPlaneLineDisplayStyleConstants val ) = 0;
      virtual HRESULT __stdcall get_CuttingPlaneLineDisplayStyle (
        /*[out,retval]*/ enum CuttingPlaneLineDisplayStyleConstants * val ) = 0;
      virtual HRESULT __stdcall put_ThickLineLengthRatio (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_ThickLineLengthRatio (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_CuttingPlaneLineArrowOffset (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_CuttingPlaneLineArrowOffset (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_ViewPlaneLineDisplay (
        /*[in]*/ enum DimViewPlaneDisplayTypeConstants val ) = 0;
      virtual HRESULT __stdcall get_ViewPlaneLineDisplay (
        /*[out,retval]*/ enum DimViewPlaneDisplayTypeConstants * val ) = 0;
      virtual HRESULT __stdcall put_Parent (
        /*[in]*/ BSTR Parent ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ BSTR * Parent ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
};

struct __declspec(uuid("7ebc92e6-1f97-4c0c-9ec5-cade8ff85290"))
DrawingViewStyles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetActive,put=PutActive))
    _bstr_t Active;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _bstr_t GetActive ( );
    void PutActive (
        _bstr_t _arg1 );
    DrawingViewStylePtr Add (
        _bstr_t Name,
        _bstr_t Parent );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    DrawingViewStylePtr Item (
        const _variant_t & Index );
    HRESULT Remove (
        _bstr_t Name );
};

struct __declspec(uuid("f260967e-584c-4b64-8a9b-93c41f89e15a"))
_IDrawingViewStylesAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetActive,put=PutActive))
    _bstr_t Active;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetActive ( );
    void PutActive (
        _bstr_t Name );
    DrawingViewStylePtr Add (
        _bstr_t Name,
        _bstr_t Parent );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    DrawingViewStylePtr Item (
        const _variant_t & Index );
    HRESULT Remove (
        _bstr_t Name );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Active (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Active (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Parent,
        /*[out,retval]*/ struct DrawingViewStyle * * pObj ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * App ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct DrawingViewStyle * * pItem ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pEnum ) = 0;
};

struct __declspec(uuid("b3cec7ee-34a4-11cf-848f-080036373002"))
FeatureControlFrameDataSets : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    FeatureControlFrameDataSetPtr Item (
        const _variant_t & Index );
    FeatureControlFrameDataSetPtr Add (
        _bstr_t Name );
    HRESULT Remove (
        _bstr_t Name );
};

struct __declspec(uuid("b3cec7f0-34a4-11cf-848f-080036373002"))
WeldSymbolDataSets : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    WeldSymbolDataSetPtr Item (
        const _variant_t & Index );
    WeldSymbolDataSetPtr Add (
        _bstr_t Name );
    HRESULT Remove (
        _bstr_t Name );
};

struct __declspec(uuid("b3cec7ef-34a4-11cf-848f-080036373002"))
SurfaceFinishSymbolDataSets : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    SurfaceFinishSymbolDataSetPtr Item (
        const _variant_t & Index );
    SurfaceFinishSymbolDataSetPtr Add (
        _bstr_t Name );
    HRESULT Remove (
        _bstr_t Name );
};

struct __declspec(uuid("4edeaf00-7c28-11ce-a80e-08003601dada"))
SmartFrames2d : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    SmartFrame2dPtr Item (
        const _variant_t & Index );
    SmartFrame2dPtr AddBy2Points (
        _bstr_t StyleName,
        double x1,
        double y1,
        double x2,
        double y2 );
    SmartFrame2dPtr AddByOrigin (
        _bstr_t StyleName,
        double x1,
        double y1,
        double top,
        double bottom,
        double left,
        double right );
};

struct __declspec(uuid("e1c88630-37ac-11ce-bb8e-08003601bb4e"))
SmartFrame2dStyles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetType))
    long Type;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    SmartFrame2dStylePtr Item (
        const _variant_t & Index );
    TGFramework::ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    long GetType ( );
    SmartFrame2dStylePtr Add (
        _bstr_t Name,
        _bstr_t Parent );
};

struct __declspec(uuid("8d842ba2-e9f0-11ce-9dfd-08003601e012"))
VFSet : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    HRESULT SetCriteria (
        _bstr_t Name,
        long Scope,
        long Color,
        double Width,
        _bstr_t LINESTYLE,
        VARIANT_BOOL DISPLAY,
        VARIANT_BOOL Locate,
        long flagsToSet );
    HRESULT GetCriteria (
        _bstr_t Name,
        long Scope,
        long * Color,
        double * Width,
        BSTR * LINESTYLE,
        VARIANT_BOOL * DISPLAY,
        VARIANT_BOOL * Locate,
        long flagsToSet );
    HRESULT ResetAll (
        long Scope );
    HRESULT SetAll (
        long Scope,
        long Color,
        double Width,
        _bstr_t LINESTYLE,
        VARIANT_BOOL DISPLAY,
        VARIANT_BOOL Locate,
        long flagsToSet );
    HRESULT CheckForDefault (
        VARIANT_BOOL * bSetting );
};

struct __declspec(uuid("bc9f13a1-5702-4102-85ce-060ab77642c0"))
AnnotAlignmentShape : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetClosedAlignmentShape))
    long ClosedAlignmentShape;
    __declspec(property(get=GetUniformSpacing,put=PutUniformSpacing))
    long UniformSpacing;
    __declspec(property(get=GetMinimumSpacing,put=PutMinimumSpacing))
    long MinimumSpacing;
    __declspec(property(get=GetMinimumSpacingValue,put=PutMinimumSpacingValue))
    double MinimumSpacingValue;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetVertexCount))
    int VertexCount;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetDrawingView,put=PutDrawingView))
    IDispatchPtr DrawingView;
    __declspec(property(get=GetItemNumberDirection,put=PutItemNumberDirection))
    enum DimItemNumDirConstants ItemNumberDirection;
    __declspec(property(get=GetFirstBalloon,put=PutFirstBalloon))
    IDispatchPtr FirstBalloon;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    long GetClosedAlignmentShape ( );
    long GetUniformSpacing ( );
    void PutUniformSpacing (
        long _arg1 );
    long GetMinimumSpacing ( );
    void PutMinimumSpacing (
        long _arg1 );
    double GetMinimumSpacingValue ( );
    void PutMinimumSpacingValue (
        double _arg1 );
    HRESULT GetGeometry (
        SAFEARRAY * * ppPointsX,
        SAFEARRAY * * ppPointsY );
    int GetVertexCount ( );
    HRESULT InsertVertex (
        double PointsX,
        double PointsY );
    HRESULT RemoveVertex (
        int nIndex );
    HRESULT ModifyVertex (
        int nIndex,
        double dNexX,
        double dNewY );
    IDispatchPtr GetDrawingView ( );
    void PutDrawingView (
        IDispatch * _arg1 );
    enum DimItemNumDirConstants GetItemNumberDirection ( );
    void PutItemNumberDirection (
        enum DimItemNumDirConstants _arg1 );
    IDispatchPtr GetFirstBalloon ( );
    void PutFirstBalloon (
        IDispatch * _arg1 );
};

enum DimItemNumDirConstants
{
    igDimItemNumberDirectionNone = 0,
    igDimItemNumberDirectionClockwise = 1,
    igDimItemNumberDirectionCounterClockwise = 2
};

struct __declspec(uuid("43400792-9c6b-44d5-8aa9-c69a1e25010e"))
_IAnnotAlignmentShapeAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetClosedAlignmentShape))
    long ClosedAlignmentShape;
    __declspec(property(get=GetUniformSpacing,put=PutUniformSpacing))
    long UniformSpacing;
    __declspec(property(get=GetMinimumSpacing,put=PutMinimumSpacing))
    long MinimumSpacing;
    __declspec(property(get=GetMinimumSpacingValue,put=PutMinimumSpacingValue))
    double MinimumSpacingValue;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[][];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetVertexCount))
    int VertexCount;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetDrawingView,put=PutDrawingView))
    IDispatchPtr DrawingView;
    __declspec(property(get=GetItemNumberDirection,put=PutItemNumberDirection))
    enum DimItemNumDirConstants ItemNumberDirection;
    __declspec(property(get=GetFirstBalloon,put=PutFirstBalloon))
    IDispatchPtr FirstBalloon;

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse,
        long Lcid = 0 );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT Select ( );
    long GetClosedAlignmentShape ( );
    long GetUniformSpacing ( );
    void PutUniformSpacing (
        long bIsUniformSpacing );
    long GetMinimumSpacing ( );
    void PutMinimumSpacing (
        long pbIsMiniumSpacing );
    double GetMinimumSpacingValue ( );
    void PutMinimumSpacingValue (
        double pdMiniumSpacing );
    HRESULT GetGeometry (
        SAFEARRAY * * ppPointsX,
        SAFEARRAY * * ppPointsY );
    int GetVertexCount ( );
    HRESULT InsertVertex (
        double PointsX,
        double PointsY );
    HRESULT RemoveVertex (
        int nIndex );
    HRESULT ModifyVertex (
        int nIndex,
        double dNexX,
        double dNewY );
    IDispatchPtr GetDrawingView ( );
    void PutDrawingView (
        IDispatch * ppDrawingView );
    enum DimItemNumDirConstants GetItemNumberDirection ( );
    void PutItemNumberDirection (
        enum DimItemNumDirConstants pnItemNumberDirection );
    IDispatchPtr GetFirstBalloon ( );
    void PutFirstBalloon (
        IDispatch * ppFirstBalloon );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[in]*/ VARIANT Recurse,
        /*[in,lcid]*/ long Lcid,
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * Type ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * ZOrder ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[in]*/ VARIANT Recurse,
        /*[out,retval]*/ BSTR * Key ) = 0;
      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ IDispatch * * Document ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[out]*/ double * XMinimum,
        /*[out]*/ double * YMinimum,
        /*[out]*/ double * XMaximum,
        /*[out]*/ double * YMaximum ) = 0;
      virtual HRESULT __stdcall raw_BringToFront ( ) = 0;
      virtual HRESULT __stdcall raw_BringForward ( ) = 0;
      virtual HRESULT __stdcall raw_SendToBack ( ) = 0;
      virtual HRESULT __stdcall raw_SendBackward ( ) = 0;
      virtual HRESULT __stdcall raw_Select ( ) = 0;
      virtual HRESULT __stdcall get_ClosedAlignmentShape (
        /*[out,retval]*/ long * pbIsClosedAlignmentShape ) = 0;
      virtual HRESULT __stdcall get_UniformSpacing (
        /*[out,retval]*/ long * bIsUniformSpacing ) = 0;
      virtual HRESULT __stdcall put_UniformSpacing (
        /*[in]*/ long bIsUniformSpacing ) = 0;
      virtual HRESULT __stdcall get_MinimumSpacing (
        /*[out,retval]*/ long * pbIsMiniumSpacing ) = 0;
      virtual HRESULT __stdcall put_MinimumSpacing (
        /*[in]*/ long pbIsMiniumSpacing ) = 0;
      virtual HRESULT __stdcall get_MinimumSpacingValue (
        /*[out,retval]*/ double * pdMiniumSpacing ) = 0;
      virtual HRESULT __stdcall put_MinimumSpacingValue (
        /*[in]*/ double pdMiniumSpacing ) = 0;
      virtual HRESULT __stdcall raw_GetGeometry (
        /*[out]*/ SAFEARRAY * * ppPointsX,
        /*[out]*/ SAFEARRAY * * ppPointsY ) = 0;
      virtual HRESULT __stdcall get_VertexCount (
        /*[out,retval]*/ int * nNumVertices ) = 0;
      virtual HRESULT __stdcall raw_InsertVertex (
        /*[in]*/ double PointsX,
        /*[in]*/ double PointsY ) = 0;
      virtual HRESULT __stdcall raw_RemoveVertex (
        /*[in]*/ int nIndex ) = 0;
      virtual HRESULT __stdcall raw_ModifyVertex (
        /*[in]*/ int nIndex,
        /*[in]*/ double dNexX,
        /*[in]*/ double dNewY ) = 0;
      virtual HRESULT __stdcall get_DrawingView (
        /*[out,retval]*/ IDispatch * * ppDrawingView ) = 0;
      virtual HRESULT __stdcall put_DrawingView (
        /*[in]*/ IDispatch * ppDrawingView ) = 0;
      virtual HRESULT __stdcall get_ItemNumberDirection (
        /*[out,retval]*/ enum DimItemNumDirConstants * pnItemNumberDirection ) = 0;
      virtual HRESULT __stdcall put_ItemNumberDirection (
        /*[in]*/ enum DimItemNumDirConstants pnItemNumberDirection ) = 0;
      virtual HRESULT __stdcall get_FirstBalloon (
        /*[out,retval]*/ IDispatch * * ppFirstBalloon ) = 0;
      virtual HRESULT __stdcall put_FirstBalloon (
        /*[in]*/ IDispatch * ppFirstBalloon ) = 0;
};

struct __declspec(uuid("f07f9ba5-dcdb-463d-92d3-259778e7734e"))
AnnotAlignmentShapes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    AnnotAlignmentShapePtr Item (
        const _variant_t & Index );
    AnnotAlignmentShapePtr AddAnnotAlignmentShape (
        SAFEARRAY * * ppPointsX,
        SAFEARRAY * * ppPointsY );
};

struct __declspec(uuid("0a531efa-8663-48c1-92ad-103b32f66d28"))
_IAnnotAlignmentShapesAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    AnnotAlignmentShapePtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    AnnotAlignmentShapePtr AddAnnotAlignmentShape (
        SAFEARRAY * * ppPointsX,
        SAFEARRAY * * ppPointsY );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * App ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct AnnotAlignmentShape * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Enum ) = 0;
      virtual HRESULT __stdcall raw_AddAnnotAlignmentShape (
        /*[in]*/ SAFEARRAY * * ppPointsX,
        /*[in]*/ SAFEARRAY * * ppPointsY,
        /*[out,retval]*/ struct AnnotAlignmentShape * * Obj ) = 0;
};

struct __declspec(uuid("a627e691-8d0c-4583-96b2-05e883f3dda7"))
TechnicalRequirement : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetNumberingFormat,put=PutNumberingFormat))
    enum TextNumberFormatConstants NumberingFormat;
    __declspec(property(get=GetNumberType,put=PutNumberType))
    enum TextNumberTypeConstants NumberType;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    IDispatchPtr GetParent ( );
    HRESULT Delete ( );
    HRESULT GetOrigin (
        double * x,
        double * y,
        double * z );
    HRESULT SetOrigin (
        double x,
        double y,
        double z );
    _variant_t GetDisplayedDetails ( );
    _bstr_t GetDisplayedTitle ( );
    enum TextNumberFormatConstants GetNumberingFormat ( );
    void PutNumberingFormat (
        enum TextNumberFormatConstants _arg1 );
    enum TextNumberTypeConstants GetNumberType ( );
    void PutNumberType (
        enum TextNumberTypeConstants _arg1 );
    HRESULT GetReferencedObjectInfo (
        SAFEARRAY * * ReferencedObjects,
        SAFEARRAY * * ReferencedObjectTypes );
};

struct __declspec(uuid("8238ceae-a19c-4efd-91e3-e120dd090a65"))
_ITechnicalRequirementAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetNumberingFormat,put=PutNumberingFormat))
    enum TextNumberFormatConstants NumberingFormat;
    __declspec(property(get=GetNumberType,put=PutNumberType))
    enum TextNumberTypeConstants NumberType;

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    IDispatchPtr GetParent ( );
    HRESULT Delete ( );
    HRESULT GetOrigin (
        double * x,
        double * y,
        double * z );
    HRESULT SetOrigin (
        double x,
        double y,
        double z );
    _variant_t GetDisplayedDetails ( );
    _bstr_t GetDisplayedTitle ( );
    enum TextNumberFormatConstants GetNumberingFormat ( );
    void PutNumberingFormat (
        enum TextNumberFormatConstants numberFormat );
    enum TextNumberTypeConstants GetNumberType ( );
    void PutNumberType (
        enum TextNumberTypeConstants NumberType );
    HRESULT GetReferencedObjectInfo (
        SAFEARRAY * * ReferencedObjects,
        SAFEARRAY * * ReferencedObjectTypes );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_GetOrigin (
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z ) = 0;
      virtual HRESULT __stdcall raw_SetOrigin (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ double z ) = 0;
      virtual HRESULT __stdcall raw_GetDisplayedDetails (
        /*[out,retval]*/ VARIANT * TextNumberMap ) = 0;
      virtual HRESULT __stdcall raw_GetDisplayedTitle (
        /*[out,retval]*/ BSTR * title ) = 0;
      virtual HRESULT __stdcall get_NumberingFormat (
        /*[out,retval]*/ enum TextNumberFormatConstants * numberFormat ) = 0;
      virtual HRESULT __stdcall put_NumberingFormat (
        /*[in]*/ enum TextNumberFormatConstants numberFormat ) = 0;
      virtual HRESULT __stdcall get_NumberType (
        /*[out,retval]*/ enum TextNumberTypeConstants * NumberType ) = 0;
      virtual HRESULT __stdcall put_NumberType (
        /*[in]*/ enum TextNumberTypeConstants NumberType ) = 0;
      virtual HRESULT __stdcall raw_GetReferencedObjectInfo (
        /*[out]*/ SAFEARRAY * * ReferencedObjects,
        /*[out]*/ SAFEARRAY * * ReferencedObjectTypes ) = 0;
};

struct __declspec(uuid("207de73e-967e-489d-904e-64eddd8d1d1f"))
TechnicalRequirements : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    TechnicalRequirementPtr Item (
        const _variant_t & Index );
    TechnicalRequirementPtr Add (
        double x1,
        double y1,
        double z1,
        const _variant_t & techDetails,
        enum TextNumberTypeConstants NumberType,
        enum TextNumberFormatConstants numberFormat,
        _bstr_t title );
};

struct __declspec(uuid("9f5e46e5-363c-4336-ba0b-842fad5adfb0"))
_ITechnicalRequirementsAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    IDispatchPtr Application;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IDispatchPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    TechnicalRequirementPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    TechnicalRequirementPtr Add (
        double x1,
        double y1,
        double z1,
        const _variant_t & techDetails,
        enum TextNumberTypeConstants NumberType,
        enum TextNumberFormatConstants numberFormat,
        _bstr_t title );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ IDispatch * * App ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct TechnicalRequirement * * Item ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Enum ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double z1,
        /*[in]*/ VARIANT techDetails,
        /*[in]*/ enum TextNumberTypeConstants NumberType,
        /*[in]*/ enum TextNumberFormatConstants numberFormat,
        /*[in]*/ BSTR title,
        /*[out,retval]*/ struct TechnicalRequirement * * Item ) = 0;
};

struct __declspec(uuid("69548f7b-81ff-434c-8a6b-58f5967491b8"))
PMIModelViews : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    PMIModelViewPtr Item (
        const _variant_t & Index );
    PMIModelViewPtr Add (
        _bstr_t Text,
        enum PMIRenderModeConstants RenderMode );
    PMIModelViewPtr AddByStandardViewOrientation (
        enum PMIModelViewStandardOrientationConstants ViewOrientation,
        enum PMIRenderModeConstants RenderMode,
        long bReplaceExistingModelView );
};

struct __declspec(uuid("14fc1a6e-80bc-49fa-8b69-b2021b224327"))
PMIModelView : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetRenderMode,put=PutRenderMode))
    enum PMIRenderModeConstants RenderMode;
    __declspec(property(get=GetSectionDisplayMode,put=PutSectionDisplayMode))
    enum TGFramework::PMISectionDisplayModeConstants SectionDisplayMode;
    __declspec(property(get=GetShowCuttingPlane,put=PutShowCuttingPlane))
    long ShowCuttingPlane;
    __declspec(property(get=GetDimensionItem))
    DimensionPtr DimensionItem[];
    __declspec(property(get=GetAnnotationItem))
    IDispatchPtr AnnotationItem[];
    __declspec(property(get=GetSectionItem))
    TGFramework::SectionViewPtr SectionItem[];
    __declspec(property(get=GetDimensionCount))
    long DimensionCount;
    __declspec(property(get=GetAnnotationCount))
    long AnnotationCount;
    __declspec(property(get=GetSectionCount))
    long SectionCount;
    __declspec(property(get=GetIncludeIn3dPdfPublish,put=PutIncludeIn3dPdfPublish))
    VARIANT_BOOL IncludeIn3dPdfPublish;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    _bstr_t GetName ( );
    void PutName (
        _bstr_t _arg1 );
    enum PMIRenderModeConstants GetRenderMode ( );
    void PutRenderMode (
        enum PMIRenderModeConstants _arg1 );
    enum TGFramework::PMISectionDisplayModeConstants GetSectionDisplayMode ( );
    void PutSectionDisplayMode (
        enum TGFramework::PMISectionDisplayModeConstants _arg1 );
    long GetShowCuttingPlane ( );
    void PutShowCuttingPlane (
        long _arg1 );
    DimensionPtr GetDimensionItem (
        const _variant_t & Index );
    IDispatchPtr GetAnnotationItem (
        const _variant_t & Index );
    TGFramework::SectionViewPtr GetSectionItem (
        const _variant_t & Index );
    long GetDimensionCount ( );
    long GetAnnotationCount ( );
    long GetSectionCount ( );
    HRESULT SetShowHidePMISections (
        long bShowPMISections );
    HRESULT SetShowHideDimensions (
        long bShowDimensions );
    HRESULT SetShowHideAnnotations (
        long bShowAnnotations );
    HRESULT AddDimAnnotOrSectionToView (
        IUnknown * DimAnnotOrSection );
    HRESULT RemoveDimAnnotOrSectionFromView (
        IUnknown * DimAnnotOrSection );
    HRESULT Delete ( );
    HRESULT Apply ( );
    HRESULT SetViewOrientationToCurrentView ( );
    enum TGFramework::ObjectType AnnotationItemType (
        const _variant_t & Index );
    HRESULT SetShowHideComponentsToCurrentView (
        IUnknown * ComponentUnknown,
        long bShow );
    HRESULT Update ( );
    VARIANT_BOOL GetIncludeIn3dPdfPublish ( );
    void PutIncludeIn3dPdfPublish (
        VARIANT_BOOL _arg1 );
};

enum PMIRenderModeConstants
{
    sePMIModelViewRenderModeNone = 0,
    sePMIModelViewRenderModeVisibleEdges = 1,
    sePMIModelViewRenderModeVisibleAndHiddenEdges = 2,
    sePMIModelViewRenderModeShaded = 3,
    sePMIModelViewRenderModeShadedWithVisibleEdges = 4
};

struct __declspec(uuid("19282a63-3382-41a6-a63d-44896175d7c9"))
_IPMIModelViewAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetRenderMode,put=PutRenderMode))
    enum PMIRenderModeConstants RenderMode;
    __declspec(property(get=GetSectionDisplayMode,put=PutSectionDisplayMode))
    enum TGFramework::PMISectionDisplayModeConstants SectionDisplayMode;
    __declspec(property(get=GetShowCuttingPlane,put=PutShowCuttingPlane))
    long ShowCuttingPlane;
    __declspec(property(get=GetDimensionItem))
    DimensionPtr DimensionItem[];
    __declspec(property(get=GetAnnotationItem))
    IDispatchPtr AnnotationItem[];
    __declspec(property(get=GetSectionItem))
    TGFramework::SectionViewPtr SectionItem[];
    __declspec(property(get=GetDimensionCount))
    long DimensionCount;
    __declspec(property(get=GetAnnotationCount))
    long AnnotationCount;
    __declspec(property(get=GetSectionCount))
    long SectionCount;
    __declspec(property(get=GetIncludeIn3dPdfPublish,put=PutIncludeIn3dPdfPublish))
    VARIANT_BOOL IncludeIn3dPdfPublish;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t Name );
    enum PMIRenderModeConstants GetRenderMode ( );
    void PutRenderMode (
        enum PMIRenderModeConstants RenderMode );
    enum TGFramework::PMISectionDisplayModeConstants GetSectionDisplayMode ( );
    void PutSectionDisplayMode (
        enum TGFramework::PMISectionDisplayModeConstants SectionDisplayMode );
    long GetShowCuttingPlane ( );
    void PutShowCuttingPlane (
        long pbShowCuttingPlane );
    DimensionPtr GetDimensionItem (
        const _variant_t & Index );
    IDispatchPtr GetAnnotationItem (
        const _variant_t & Index );
    TGFramework::SectionViewPtr GetSectionItem (
        const _variant_t & Index );
    long GetDimensionCount ( );
    long GetAnnotationCount ( );
    long GetSectionCount ( );
    HRESULT SetShowHidePMISections (
        long bShowPMISections );
    HRESULT SetShowHideDimensions (
        long bShowDimensions );
    HRESULT SetShowHideAnnotations (
        long bShowAnnotations );
    HRESULT AddDimAnnotOrSectionToView (
        IUnknown * DimAnnotOrSection );
    HRESULT RemoveDimAnnotOrSectionFromView (
        IUnknown * DimAnnotOrSection );
    HRESULT Delete ( );
    HRESULT Apply ( );
    HRESULT SetViewOrientationToCurrentView ( );
    enum TGFramework::ObjectType AnnotationItemType (
        const _variant_t & Index );
    HRESULT SetShowHideComponentsToCurrentView (
        IUnknown * ComponentUnknown,
        long bShow );
    HRESULT Update ( );
    VARIANT_BOOL GetIncludeIn3dPdfPublish ( );
    void PutIncludeIn3dPdfPublish (
        VARIANT_BOOL IncludeInPublish );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_RenderMode (
        /*[out,retval]*/ enum PMIRenderModeConstants * RenderMode ) = 0;
      virtual HRESULT __stdcall put_RenderMode (
        /*[in]*/ enum PMIRenderModeConstants RenderMode ) = 0;
      virtual HRESULT __stdcall get_SectionDisplayMode (
        /*[out,retval]*/ enum TGFramework::PMISectionDisplayModeConstants * SectionDisplayMode ) = 0;
      virtual HRESULT __stdcall put_SectionDisplayMode (
        /*[in]*/ enum TGFramework::PMISectionDisplayModeConstants SectionDisplayMode ) = 0;
      virtual HRESULT __stdcall get_ShowCuttingPlane (
        /*[out,retval]*/ long * pbShowCuttingPlane ) = 0;
      virtual HRESULT __stdcall put_ShowCuttingPlane (
        /*[in]*/ long pbShowCuttingPlane ) = 0;
      virtual HRESULT __stdcall get_DimensionItem (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Dimension * * Item ) = 0;
      virtual HRESULT __stdcall get_AnnotationItem (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ IDispatch * * Item ) = 0;
      virtual HRESULT __stdcall get_SectionItem (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct TGFramework::SectionView * * Item ) = 0;
      virtual HRESULT __stdcall get_DimensionCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_AnnotationCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_SectionCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_SetShowHidePMISections (
        /*[in]*/ long bShowPMISections ) = 0;
      virtual HRESULT __stdcall raw_SetShowHideDimensions (
        /*[in]*/ long bShowDimensions ) = 0;
      virtual HRESULT __stdcall raw_SetShowHideAnnotations (
        /*[in]*/ long bShowAnnotations ) = 0;
      virtual HRESULT __stdcall raw_AddDimAnnotOrSectionToView (
        /*[in]*/ IUnknown * DimAnnotOrSection ) = 0;
      virtual HRESULT __stdcall raw_RemoveDimAnnotOrSectionFromView (
        /*[in]*/ IUnknown * DimAnnotOrSection ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Apply ( ) = 0;
      virtual HRESULT __stdcall raw_SetViewOrientationToCurrentView ( ) = 0;
      virtual HRESULT __stdcall raw_AnnotationItemType (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ enum TGFramework::ObjectType * AnnotType ) = 0;
      virtual HRESULT __stdcall raw_SetShowHideComponentsToCurrentView (
        /*[in]*/ IUnknown * ComponentUnknown,
        /*[in]*/ long bShow ) = 0;
      virtual HRESULT __stdcall raw_Update ( ) = 0;
      virtual HRESULT __stdcall get_IncludeIn3dPdfPublish (
        /*[out,retval]*/ VARIANT_BOOL * IncludeInPublish ) = 0;
      virtual HRESULT __stdcall put_IncludeIn3dPdfPublish (
        /*[in]*/ VARIANT_BOOL IncludeInPublish ) = 0;
};

enum PMIModelViewStandardOrientationConstants
{
    sePMIModelViewFront = 0,
    sePMIModelViewBack = 1,
    sePMIModelViewLeft = 2,
    sePMIModelViewRight = 3,
    sePMIModelViewTop = 4,
    sePMIModelViewBottom = 5,
    sePMIModelViewDimetric = 6,
    sePMIModelViewIsometric = 7,
    sePMIModelViewTrimetric = 8
};

struct __declspec(uuid("11f657fd-847a-4c91-8ed8-ea934fb11b69"))
_IPMIModelViewsAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    PMIModelViewPtr Item (
        const _variant_t & Index );
    PMIModelViewPtr Add (
        _bstr_t Text,
        enum PMIRenderModeConstants RenderMode );
    PMIModelViewPtr AddByStandardViewOrientation (
        enum PMIModelViewStandardOrientationConstants ViewOrientation,
        enum PMIRenderModeConstants RenderMode,
        long bReplaceExistingModelView );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * App ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct PMIModelView * * Item ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Text,
        /*[in]*/ enum PMIRenderModeConstants RenderMode,
        /*[out,retval]*/ struct PMIModelView * * Obj ) = 0;
      virtual HRESULT __stdcall raw_AddByStandardViewOrientation (
        /*[in]*/ enum PMIModelViewStandardOrientationConstants ViewOrientation,
        /*[in]*/ enum PMIRenderModeConstants RenderMode,
        /*[in]*/ long bReplaceExistingModelView,
        /*[out,retval]*/ struct PMIModelView * * Obj ) = 0;
};

struct __declspec(uuid("7f943b1b-4eb5-11d2-a479-080036ecf202"))
RectangularPatterns2d : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    RectangularPattern2dPtr Item (
        const _variant_t & Index );
    RectangularPattern2dPtr Add (
        double OriginX,
        double OriginY,
        double Width,
        double Height,
        double Angle,
        enum PatternOffsetTypeConstants OffsetType,
        long XCount,
        long YCount,
        double XSpace,
        double YSpace,
        const _variant_t & StaggerType = vtMissing,
        const _variant_t & StaggerOffset = vtMissing,
        const _variant_t & StaggerOffsetHalf = vtMissing,
        const _variant_t & StaggerIncludeLast = vtMissing );
    RectangularPattern2dPtr AddEx (
        SAFEARRAY * * GeomArray,
        long NumOfElements,
        double OriginX,
        double OriginY,
        double Width,
        double Height,
        double Angle,
        enum PatternOffsetTypeConstants OffsetType,
        long XCount,
        long YCount,
        double XSpace,
        double YSpace,
        const _variant_t & StaggerType = vtMissing,
        const _variant_t & StaggerOffset = vtMissing,
        const _variant_t & StaggerOffsetHalf = vtMissing,
        const _variant_t & StaggerIncludeLast = vtMissing );
};

struct __declspec(uuid("7f943b1d-4eb5-11d2-a479-080036ecf202"))
CircularPatterns2d : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    CircularPattern2dPtr Item (
        const _variant_t & Index );
    CircularPattern2dPtr AddByCircle (
        double CenterX,
        double CenterY,
        double StartX,
        double StartY,
        enum Geom2dOrientationConstants Orientation,
        enum PatternOffsetTypeConstants OffsetType,
        long Count,
        double AngularSpacing );
    CircularPattern2dPtr AddByArc (
        double CenterX,
        double CenterY,
        double StartX,
        double StartY,
        double SweepAngle,
        enum Geom2dOrientationConstants Orientation,
        enum PatternOffsetTypeConstants OffsetType,
        long Count,
        double AngularSpacing );
    CircularPattern2dPtr AddByCircleEx (
        SAFEARRAY * * GeomArray,
        long NumOfElements,
        double CenterX,
        double CenterY,
        double StartX,
        double StartY,
        enum Geom2dOrientationConstants Orientation,
        enum PatternOffsetTypeConstants OffsetType,
        long Count,
        double AngularSpacing );
    CircularPattern2dPtr AddByArcEx (
        SAFEARRAY * * GeomArray,
        long NumOfElements,
        double CenterX,
        double CenterY,
        double StartX,
        double StartY,
        double SweepAngle,
        enum Geom2dOrientationConstants Orientation,
        enum PatternOffsetTypeConstants OffsetType,
        long Count,
        double AngularSpacing );
};

struct __declspec(uuid("a60552c7-6df6-4383-a86a-962215700b28"))
Images2d : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    Image2dPtr Item (
        const _variant_t & Index );
    Image2dPtr AddImage (
        VARIANT_BOOL blink,
        _bstr_t ImageDocumentName );
    Image2dPtr AddDecalImage (
        VARIANT_BOOL Link,
        _bstr_t ImageDocumentName );
};

struct __declspec(uuid("d03f8c5e-2688-4d4e-bfc0-7a9d2e241c08"))
ComponentImages2d : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    IDispatchPtr GetParent ( );
    long GetCount ( );
    ComponentImage2dPtr Item (
        const _variant_t & Index );
    ComponentImage2dPtr AddComponentImage (
        enum ComponentImageCreationModeConstants CreationMode,
        const _variant_t & NumElements = vtMissing,
        const _variant_t & Elements = vtMissing );
};

struct __declspec(uuid("3028fb09-dc90-43e3-a533-ea6b07c0b557"))
AreaPropertiesCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    AreaPropertiesPtr Item (
        const _variant_t & Index );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    AreaPropertiesPtr Add (
        long ParentBoundariesCount,
        SAFEARRAY * * ParentBoundaries,
        double xFloodPoint,
        double yFloodPoint );
};

struct __declspec(uuid("5d187e80-7676-402a-ba0e-5e335a191541"))
PMI : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetDimensions))
    IDispatchPtr Dimensions;
    __declspec(property(get=GetAxis,put=PutAxis))
    IDispatchPtr Axis;
    __declspec(property(get=GetActivePlane,put=PutActivePlane))
    IDispatchPtr ActivePlane;
    __declspec(property(get=GetBalloons))
    IDispatchPtr Balloons;
    __declspec(property(get=GetCornerAnnotations))
    IDispatchPtr CornerAnnotations;
    __declspec(property(get=GetDatumFrames))
    IDispatchPtr DatumFrames;
    __declspec(property(get=GetDatumPoints))
    IDispatchPtr DatumPoints;
    __declspec(property(get=GetDatumTargets))
    IDispatchPtr DatumTargets;
    __declspec(property(get=GetFeatureControlFrames))
    IDispatchPtr FeatureControlFrames;
    __declspec(property(get=GetLeaders))
    IDispatchPtr Leaders;
    __declspec(property(get=GetSurfaceFinishSymbols))
    IDispatchPtr SurfaceFinishSymbols;
    __declspec(property(get=GetWeldSymbols))
    IDispatchPtr WeldSymbols;
    __declspec(property(get=GetGostWeldSymbols))
    IDispatchPtr GostWeldSymbols;
    __declspec(property(get=GetSymbolicPMIGroup))
    IDispatchPtr SymbolicPMIGroup;
    __declspec(property(get=GetPMIModelViews))
    IDispatchPtr PMIModelViews;
    __declspec(property(get=GetShowDimensions,put=PutShowDimensions))
    VARIANT_BOOL ShowDimensions;
    __declspec(property(get=GetShowAnnotations,put=PutShowAnnotations))
    VARIANT_BOOL ShowAnnotations;
    __declspec(property(get=GetShow,put=PutShow))
    VARIANT_BOOL Show;
    __declspec(property(get=GetCenterMarks))
    IDispatchPtr CenterMarks;
    __declspec(property(get=GetCenterLines))
    IDispatchPtr CenterLines;
    __declspec(property(get=GetBoltHoleCircles))
    IDispatchPtr BoltHoleCircles;
    __declspec(property(get=GetPMIPixelSize,put=PutPMIPixelSize))
    int PMIPixelSize;
    __declspec(property(get=GetPMIPixelMode,put=PutPMIPixelMode))
    VARIANT_BOOL PMIPixelMode;
    __declspec(property(get=GetTextBoxes))
    IDispatchPtr TextBoxes;
    __declspec(property(get=GetPinSymbols))
    IDispatchPtr PinSymbols;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    IDispatchPtr GetDimensions ( );
    IDispatchPtr GetBalloons ( );
    IDispatchPtr GetCornerAnnotations ( );
    IDispatchPtr GetDatumFrames ( );
    IDispatchPtr GetDatumPoints ( );
    IDispatchPtr GetDatumTargets ( );
    IDispatchPtr GetPinSymbols ( );
    IDispatchPtr GetFeatureControlFrames ( );
    IDispatchPtr GetLeaders ( );
    IDispatchPtr GetSurfaceFinishSymbols ( );
    IDispatchPtr GetWeldSymbols ( );
    IDispatchPtr GetGostWeldSymbols ( );
    IDispatchPtr GetSymbolicPMIGroup ( );
    IDispatchPtr GetPMIModelViews ( );
    IDispatchPtr GetCenterMarks ( );
    IDispatchPtr GetCenterLines ( );
    IDispatchPtr GetBoltHoleCircles ( );
    void PutAxis (
        IDispatch * _arg1 );
    IDispatchPtr GetAxis ( );
    HRESULT ClearAxis ( );
    void PutActivePlane (
        IDispatch * _arg1 );
    IDispatchPtr GetActivePlane ( );
    HRESULT ClearActivePlane ( );
    void PutShowDimensions (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowDimensions ( );
    void PutShowAnnotations (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShowAnnotations ( );
    void PutShow (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetShow ( );
    void PutPMIPixelMode (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetPMIPixelMode ( );
    void PutPMIPixelSize (
        int _arg1 );
    int GetPMIPixelSize ( );
    IDispatchPtr GetTextBoxes ( );
};

struct __declspec(uuid("1d0f4888-d931-45a9-9f9c-bd18ebcd8d27"))
SymbolicPMI : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetName))
    _bstr_t Name[];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetHidePMI,put=PutHidePMI))
    VARIANT_BOOL HidePMI;
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse );
    IDispatchPtr GetParent ( );
    long GetType ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Delete ( );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    HRESULT Select ( );
    void PutHidePMI (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetHidePMI ( );
};

struct __declspec(uuid("82fa3333-215a-4b78-97be-072efe7c14be"))
SymbolicPMIGroup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    IDispatchPtr Item (
        const _variant_t & Index );
};

struct __declspec(uuid("82fa3d95-215a-4b78-97be-072efe7c14be"))
GostWeldSymbols : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetPlane,put=PutPlane))
    IDispatchPtr Plane;
    __declspec(property(get=GetStyle,put=PutStyle))
    DimensionStylePtr Style;
    __declspec(property(get=GetAnnotInitData))
    AnnotInitDataPtr AnnotInitData;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    GostWeldSymbolPtr Item (
        const _variant_t & Index );
    void PutPlane (
        IDispatch * _arg1 );
    IDispatchPtr GetPlane ( );
    void PutStyle (
        struct DimensionStyle * _arg1 );
    DimensionStylePtr GetStyle ( );
    GostWeldSymbolPtr AddByTerminator (
        IDispatch * TerminatorObject,
        double x1,
        double y1,
        double z1,
        VARIANT_BOOL keyPoint1 );
    HRESULT ClearPlane ( );
    HRESULT ClearStyle ( );
    AnnotInitDataPtr GetAnnotInitData ( );
    GostWeldSymbolPtr AddGostWeldSymbol (
        struct AnnotInitData * AnnotInitData );
};

struct __declspec(uuid("dbf79d2d-2501-498c-a16a-c05df0cd4d38"))
TableStyle : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetTitleTextStyle,put=PutTitleTextStyle))
    _bstr_t TitleTextStyle;
    __declspec(property(get=GetHeaderTextStyle,put=PutHeaderTextStyle))
    _bstr_t HeaderTextStyle;
    __declspec(property(get=GetDataTextStyle,put=PutDataTextStyle))
    _bstr_t DataTextStyle;
    __declspec(property(get=GetLineColor,put=PutLineColor))
    long LineColor[];
    __declspec(property(get=GetLineDashType,put=PutLineDashType))
    _bstr_t LineDashType[];
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    double LineWidth[];
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    void PutName (
        _bstr_t _arg1 );
    _bstr_t GetName ( );
    void PutTitleTextStyle (
        _bstr_t _arg1 );
    _bstr_t GetTitleTextStyle ( );
    void PutHeaderTextStyle (
        _bstr_t _arg1 );
    _bstr_t GetHeaderTextStyle ( );
    void PutDataTextStyle (
        _bstr_t _arg1 );
    _bstr_t GetDataTextStyle ( );
    void PutLineColor (
        enum TableStyleLineTypeConstants lineType,
        long _arg2 );
    long GetLineColor (
        enum TableStyleLineTypeConstants lineType );
    void PutLineDashType (
        enum TableStyleLineTypeConstants lineType,
        _bstr_t _arg2 );
    _bstr_t GetLineDashType (
        enum TableStyleLineTypeConstants lineType );
    void PutLineWidth (
        enum TableStyleLineTypeConstants lineType,
        double _arg2 );
    double GetLineWidth (
        enum TableStyleLineTypeConstants lineType );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );
};

enum TableStyleLineTypeConstants
{
    seBorder = 0,
    seTitleSeparator = 1,
    seTitleHeaderSeparator = 2,
    seHeaderDataSeparator = 3,
    seHeaderSeparator = 4,
    seHorizontalGridLine = 5,
    seVerticalGridLine = 6
};

struct __declspec(uuid("d96a47f2-0ffe-4e61-840c-211e0856e53c"))
_ITableStyleAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetTitleTextStyle,put=PutTitleTextStyle))
    _bstr_t TitleTextStyle;
    __declspec(property(get=GetHeaderTextStyle,put=PutHeaderTextStyle))
    _bstr_t HeaderTextStyle;
    __declspec(property(get=GetDataTextStyle,put=PutDataTextStyle))
    _bstr_t DataTextStyle;
    __declspec(property(get=GetLineColor,put=PutLineColor))
    long LineColor[];
    __declspec(property(get=GetLineDashType,put=PutLineDashType))
    _bstr_t LineDashType[];
    __declspec(property(get=GetLineWidth,put=PutLineWidth))
    double LineWidth[];
    __declspec(property(get=GetAttributeSets))
    IDispatchPtr AttributeSets;
    __declspec(property(get=GetIsAttributeSetPresent))
    VARIANT_BOOL IsAttributeSetPresent[];

    //
    // Wrapper methods for error-handling
    //

    void PutName (
        _bstr_t Name );
    _bstr_t GetName ( );
    void PutTitleTextStyle (
        _bstr_t TitleTextStyle );
    _bstr_t GetTitleTextStyle ( );
    void PutHeaderTextStyle (
        _bstr_t HeaderTextStyle );
    _bstr_t GetHeaderTextStyle ( );
    void PutDataTextStyle (
        _bstr_t DataTextStyle );
    _bstr_t GetDataTextStyle ( );
    void PutLineColor (
        enum TableStyleLineTypeConstants lineType,
        long val );
    long GetLineColor (
        enum TableStyleLineTypeConstants lineType );
    void PutLineDashType (
        enum TableStyleLineTypeConstants lineType,
        _bstr_t val );
    _bstr_t GetLineDashType (
        enum TableStyleLineTypeConstants lineType );
    void PutLineWidth (
        enum TableStyleLineTypeConstants lineType,
        double val );
    double GetLineWidth (
        enum TableStyleLineTypeConstants lineType );
    IDispatchPtr GetAttributeSets ( );
    VARIANT_BOOL GetIsAttributeSetPresent (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall put_TitleTextStyle (
        /*[in]*/ BSTR TitleTextStyle ) = 0;
      virtual HRESULT __stdcall get_TitleTextStyle (
        /*[out,retval]*/ BSTR * TitleTextStyle ) = 0;
      virtual HRESULT __stdcall put_HeaderTextStyle (
        /*[in]*/ BSTR HeaderTextStyle ) = 0;
      virtual HRESULT __stdcall get_HeaderTextStyle (
        /*[out,retval]*/ BSTR * HeaderTextStyle ) = 0;
      virtual HRESULT __stdcall put_DataTextStyle (
        /*[in]*/ BSTR DataTextStyle ) = 0;
      virtual HRESULT __stdcall get_DataTextStyle (
        /*[out,retval]*/ BSTR * DataTextStyle ) = 0;
      virtual HRESULT __stdcall put_LineColor (
        /*[in]*/ enum TableStyleLineTypeConstants lineType,
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_LineColor (
        /*[in]*/ enum TableStyleLineTypeConstants lineType,
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_LineDashType (
        /*[in]*/ enum TableStyleLineTypeConstants lineType,
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_LineDashType (
        /*[in]*/ enum TableStyleLineTypeConstants lineType,
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_LineWidth (
        /*[in]*/ enum TableStyleLineTypeConstants lineType,
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_LineWidth (
        /*[in]*/ enum TableStyleLineTypeConstants lineType,
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall get_AttributeSets (
        /*[out,retval]*/ IDispatch * * AttributeSets ) = 0;
      virtual HRESULT __stdcall get_IsAttributeSetPresent (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ VARIANT_BOOL * IsAttributeSetPresent ) = 0;
};

struct __declspec(uuid("677e1d05-a823-489f-a329-2cbf77cd3ca5"))
TableStyles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    TableStylePtr Add (
        _bstr_t Name,
        _bstr_t Parent );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    TableStylePtr Item (
        const _variant_t & Index );
    HRESULT Remove (
        _bstr_t Name );
};

struct __declspec(uuid("6e79cecb-5eaf-4740-ba9b-9e5f1ca93b6b"))
_ITableStylesAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    TableStylePtr Add (
        _bstr_t Name,
        _bstr_t Parent );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    TableStylePtr Item (
        const _variant_t & Index );
    HRESULT Remove (
        _bstr_t Name );
    IUnknownPtr Get_NewEnum ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Name,
        /*[in]*/ BSTR Parent,
        /*[out,retval]*/ struct TableStyle * * pObj ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * App ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct TableStyle * * pItem ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ BSTR Name ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * pEnum ) = 0;
};

struct __declspec(uuid("44c165a7-cac7-40d9-83ac-f8e7ad0d0b9d"))
Conic2d : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetRhoValue,put=PutRhoValue))
    double RhoValue;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetName))
    _bstr_t Name[];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRelationships))
    Relationships2dPtr Relationships;
    __declspec(property(get=GetSegmentedStyleCount))
    long SegmentedStyleCount;
    __declspec(property(get=GetStyle))
    GeometryStyle2dPtr Style;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    GeometryStyle2dPtr GetStyle ( );
    Relationships2dPtr GetRelationships ( );
    _bstr_t GetLayer ( );
    void PutLayer (
        _bstr_t _arg1 );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT SplitAtPoint (
        double x,
        double y,
        VARIANT * OtherSplitElement = &vtMissing );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    long GetSegmentedStyleCount ( );
    HRESULT AddSegmentedStyle (
        double x1,
        double y1,
        double x2,
        double y2,
        IDispatch * Style );
    HRESULT GetSegmentedStyle (
        long Index,
        double * x1,
        double * y1,
        double * x2,
        double * y2,
        IDispatch * * Style );
    HRESULT SetSegmentedStyle (
        long Index,
        IDispatch * Style );
    HRESULT RemoveSegmentedStyle (
        long Index );
    HRESULT RemoveAllSegmentedStyles ( );
    HRESULT RemoveAllSegmentedStylesBetween (
        double x1,
        double y1,
        double x2,
        double y2 );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT Trim (
        double x,
        double y,
        IDispatch * CutObj1,
        const _variant_t & CutObj2 = vtMissing );
    HRESULT GetStartPoint (
        double * x,
        double * y );
    HRESULT SetStartPoint (
        double x,
        double y );
    HRESULT GetEndPoint (
        double * x,
        double * y );
    HRESULT SetEndPoint (
        double x,
        double y );
    HRESULT GetControlPoint (
        double * x,
        double * y );
    HRESULT SetControlPoint (
        double x,
        double y );
    void PutRhoValue (
        double _arg1 );
    double GetRhoValue ( );
};

struct __declspec(uuid("a2e52a76-bd0d-4ebe-9c06-3413abd23aed"))
_IConic2dAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetType))
    long Type;
    __declspec(property(get=GetZOrder))
    long ZOrder;
    __declspec(property(get=GetDocument))
    IDispatchPtr Document;
    __declspec(property(get=GetRhoValue,put=PutRhoValue))
    double RhoValue;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetKey))
    _bstr_t Key[];
    __declspec(property(get=GetLayer,put=PutLayer))
    _bstr_t Layer;
    __declspec(property(get=GetName))
    _bstr_t Name[][];
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=GetRelationships))
    Relationships2dPtr Relationships;
    __declspec(property(get=GetSegmentedStyleCount))
    long SegmentedStyleCount;
    __declspec(property(get=GetStyle))
    GeometryStyle2dPtr Style;

    //
    // Wrapper methods for error-handling
    //

    GeometryStyle2dPtr GetStyle ( );
    Relationships2dPtr GetRelationships ( );
    _bstr_t GetLayer ( );
    void PutLayer (
        _bstr_t Layer );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetIndex ( );
    _bstr_t GetName (
        const _variant_t & Recurse,
        long Lcid = 0 );
    IDispatchPtr GetParent ( );
    long GetType ( );
    long GetZOrder ( );
    _bstr_t GetKey (
        const _variant_t & Recurse = vtMissing );
    IDispatchPtr GetDocument ( );
    HRESULT Copy ( );
    HRESULT Cut ( );
    HRESULT Delete ( );
    HRESULT Move (
        double XFrom,
        double YFrom,
        double XTo,
        double YTo );
    HRESULT Scale (
        double Factor );
    HRESULT Rotate (
        double Angle,
        double x,
        double y );
    IDispatchPtr Duplicate (
        const _variant_t & XDistance = vtMissing,
        const _variant_t & YDistance = vtMissing );
    IDispatchPtr Mirror (
        double x1,
        double y1,
        double x2,
        double y2,
        const _variant_t & BooleanCopyFlag = vtMissing );
    HRESULT SplitAtPoint (
        double x,
        double y,
        VARIANT * OtherSplitElement );
    HRESULT Range (
        double * XMinimum,
        double * YMinimum,
        double * XMaximum,
        double * YMaximum );
    long GetSegmentedStyleCount ( );
    HRESULT AddSegmentedStyle (
        double x1,
        double y1,
        double x2,
        double y2,
        IDispatch * Style );
    HRESULT GetSegmentedStyle (
        long Index,
        double * x1,
        double * y1,
        double * x2,
        double * y2,
        IDispatch * * Style );
    HRESULT SetSegmentedStyle (
        long Index,
        IDispatch * Style );
    HRESULT RemoveSegmentedStyle (
        long Index );
    HRESULT RemoveAllSegmentedStyles ( );
    HRESULT RemoveAllSegmentedStylesBetween (
        double x1,
        double y1,
        double x2,
        double y2 );
    HRESULT BringToFront ( );
    HRESULT BringForward ( );
    HRESULT SendToBack ( );
    HRESULT SendBackward ( );
    HRESULT GetKeyPoint (
        long Index,
        double * x,
        double * y,
        double * z,
        enum TGFramework::KeyPointType * KeypointType,
        long * HandleType );
    HRESULT Trim (
        double x,
        double y,
        IDispatch * CutObj1,
        const _variant_t & CutObj2 = vtMissing );
    HRESULT GetStartPoint (
        double * x,
        double * y );
    HRESULT SetStartPoint (
        double x,
        double y );
    HRESULT GetEndPoint (
        double * x,
        double * y );
    HRESULT SetEndPoint (
        double x,
        double y );
    HRESULT GetControlPoint (
        double * x,
        double * y );
    HRESULT SetControlPoint (
        double x,
        double y );
    void PutRhoValue (
        double RhoValue );
    double GetRhoValue ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ struct GeometryStyle2d * * Style ) = 0;
      virtual HRESULT __stdcall get_Relationships (
        /*[out,retval]*/ struct Relationships2d * * Relationships2d ) = 0;
      virtual HRESULT __stdcall get_Layer (
        /*[out,retval]*/ BSTR * Layer ) = 0;
      virtual HRESULT __stdcall put_Layer (
        /*[in]*/ BSTR Layer ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * Index ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[in]*/ VARIANT Recurse,
        /*[in,lcid]*/ long Lcid,
        /*[out,retval]*/ BSTR * Name ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ long * Type ) = 0;
      virtual HRESULT __stdcall get_ZOrder (
        /*[out,retval]*/ long * ZOrder ) = 0;
      virtual HRESULT __stdcall get_Key (
        /*[in]*/ VARIANT Recurse,
        /*[out,retval]*/ BSTR * Key ) = 0;
      virtual HRESULT __stdcall get_Document (
        /*[out,retval]*/ IDispatch * * Document ) = 0;
      virtual HRESULT __stdcall raw_Copy ( ) = 0;
      virtual HRESULT __stdcall raw_Cut ( ) = 0;
      virtual HRESULT __stdcall raw_Delete ( ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ double XFrom,
        /*[in]*/ double YFrom,
        /*[in]*/ double XTo,
        /*[in]*/ double YTo ) = 0;
      virtual HRESULT __stdcall raw_Scale (
        /*[in]*/ double Factor ) = 0;
      virtual HRESULT __stdcall raw_Rotate (
        /*[in]*/ double Angle,
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_Duplicate (
        /*[in]*/ VARIANT XDistance,
        /*[in]*/ VARIANT YDistance,
        /*[out,retval]*/ IDispatch * * NewObject ) = 0;
      virtual HRESULT __stdcall raw_Mirror (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ VARIANT BooleanCopyFlag,
        /*[out,retval]*/ IDispatch * * Object ) = 0;
      virtual HRESULT __stdcall raw_SplitAtPoint (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[out]*/ VARIANT * OtherSplitElement ) = 0;
      virtual HRESULT __stdcall raw_Range (
        /*[out]*/ double * XMinimum,
        /*[out]*/ double * YMinimum,
        /*[out]*/ double * XMaximum,
        /*[out]*/ double * YMaximum ) = 0;
      virtual HRESULT __stdcall get_SegmentedStyleCount (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall raw_AddSegmentedStyle (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2,
        /*[in]*/ IDispatch * Style ) = 0;
      virtual HRESULT __stdcall raw_GetSegmentedStyle (
        /*[in]*/ long Index,
        /*[out]*/ double * x1,
        /*[out]*/ double * y1,
        /*[out]*/ double * x2,
        /*[out]*/ double * y2,
        /*[out]*/ IDispatch * * Style ) = 0;
      virtual HRESULT __stdcall raw_SetSegmentedStyle (
        /*[in]*/ long Index,
        /*[in]*/ IDispatch * Style ) = 0;
      virtual HRESULT __stdcall raw_RemoveSegmentedStyle (
        /*[in]*/ long Index ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllSegmentedStyles ( ) = 0;
      virtual HRESULT __stdcall raw_RemoveAllSegmentedStylesBetween (
        /*[in]*/ double x1,
        /*[in]*/ double y1,
        /*[in]*/ double x2,
        /*[in]*/ double y2 ) = 0;
      virtual HRESULT __stdcall raw_BringToFront ( ) = 0;
      virtual HRESULT __stdcall raw_BringForward ( ) = 0;
      virtual HRESULT __stdcall raw_SendToBack ( ) = 0;
      virtual HRESULT __stdcall raw_SendBackward ( ) = 0;
      virtual HRESULT __stdcall raw_GetKeyPoint (
        /*[in]*/ long Index,
        /*[out]*/ double * x,
        /*[out]*/ double * y,
        /*[out]*/ double * z,
        /*[out]*/ enum TGFramework::KeyPointType * KeypointType,
        /*[out]*/ long * HandleType ) = 0;
      virtual HRESULT __stdcall raw_Trim (
        /*[in]*/ double x,
        /*[in]*/ double y,
        /*[in]*/ IDispatch * CutObj1,
        /*[in]*/ VARIANT CutObj2 = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_GetStartPoint (
        /*[out]*/ double * x,
        /*[out]*/ double * y ) = 0;
      virtual HRESULT __stdcall raw_SetStartPoint (
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_GetEndPoint (
        /*[out]*/ double * x,
        /*[out]*/ double * y ) = 0;
      virtual HRESULT __stdcall raw_SetEndPoint (
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall raw_GetControlPoint (
        /*[out]*/ double * x,
        /*[out]*/ double * y ) = 0;
      virtual HRESULT __stdcall raw_SetControlPoint (
        /*[in]*/ double x,
        /*[in]*/ double y ) = 0;
      virtual HRESULT __stdcall put_RhoValue (
        /*[in]*/ double RhoValue ) = 0;
      virtual HRESULT __stdcall get_RhoValue (
        /*[out,retval]*/ double * RhoValue ) = 0;
};

struct __declspec(uuid("0db65788-1a71-43ea-8867-8b18b8ff7909"))
Conics2d : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    Conic2dPtr Item (
        const _variant_t & Index );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    Conic2dPtr AddByThreePointsAndRhoValue (
        double xStart,
        double yStart,
        double xEnd,
        double yEnd,
        double xControl,
        double yControl,
        double RhoValue );
};

struct __declspec(uuid("66ab0bce-da30-4d8f-af34-f08c5bf03b69"))
_IConics2dAuto : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetApplication))
    TGFramework::ApplicationPtr Application;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;

    //
    // Wrapper methods for error-handling
    //

    Conic2dPtr Item (
        const _variant_t & Index );
    IUnknownPtr Get_NewEnum ( );
    TGFramework::ApplicationPtr GetApplication ( );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    Conic2dPtr AddByThreePointsAndRhoValue (
        double xStart,
        double yStart,
        double xEnd,
        double yEnd,
        double xControl,
        double yControl,
        double RhoValue );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Item (
        /*[in]*/ VARIANT Index,
        /*[out,retval]*/ struct Conic2d * * Object ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * Enum ) = 0;
      virtual HRESULT __stdcall get_Application (
        /*[out,retval]*/ struct TGFramework::Application * * Application ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * Count ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ IDispatch * * Parent ) = 0;
      virtual HRESULT __stdcall raw_AddByThreePointsAndRhoValue (
        /*[in]*/ double xStart,
        /*[in]*/ double yStart,
        /*[in]*/ double xEnd,
        /*[in]*/ double yEnd,
        /*[in]*/ double xControl,
        /*[in]*/ double yControl,
        /*[in]*/ double RhoValue,
        /*[out,retval]*/ struct Conic2d * * Obj ) = 0;
};

//
// Function implementation mapping
//

#pragma start_map_region("D:\visualstudio\project\TGCAD\TGCAD\x64\Debug\tgfwksupp.tli")
__declspec(implementation_key(1)) TGFramework::ApplicationPtr _IRelation2dAuto::GetApplication ( );
__declspec(implementation_key(2)) long _IRelation2dAuto::GetIndex ( );
__declspec(implementation_key(3)) _bstr_t _IRelation2dAuto::GetName ( const _variant_t & Recurse, long Lcid );
__declspec(implementation_key(4)) IDispatchPtr _IRelation2dAuto::GetParent ( );
__declspec(implementation_key(5)) long _IRelation2dAuto::GetType ( );
__declspec(implementation_key(6)) long _IRelation2dAuto::GetZOrder ( );
__declspec(implementation_key(7)) _bstr_t _IRelation2dAuto::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(8)) IDispatchPtr _IRelation2dAuto::GetDocument ( );
__declspec(implementation_key(9)) HRESULT _IRelation2dAuto::Delete ( );
__declspec(implementation_key(10)) HRESULT _IRelation2dAuto::Select ( );
__declspec(implementation_key(11)) HRESULT _IRelation2dAuto::GetRelatedObjectCount ( long * Count );
__declspec(implementation_key(12)) HRESULT _IRelation2dAuto::GetRelatedObject ( long Index, IDispatch * * GraphicObject, long * Keypoint_Index );
__declspec(implementation_key(13)) IDispatchPtr _IRelation2dAuto::GetAttributeSets ( );
__declspec(implementation_key(14)) VARIANT_BOOL _IRelation2dAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(15)) TGFramework::ApplicationPtr Relation2d::GetApplication ( );
__declspec(implementation_key(16)) long Relation2d::GetIndex ( );
__declspec(implementation_key(17)) _bstr_t Relation2d::GetName ( const _variant_t & Recurse );
__declspec(implementation_key(18)) IDispatchPtr Relation2d::GetParent ( );
__declspec(implementation_key(19)) long Relation2d::GetType ( );
__declspec(implementation_key(20)) long Relation2d::GetZOrder ( );
__declspec(implementation_key(21)) _bstr_t Relation2d::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(22)) IDispatchPtr Relation2d::GetDocument ( );
__declspec(implementation_key(23)) HRESULT Relation2d::Delete ( );
__declspec(implementation_key(24)) HRESULT Relation2d::Select ( );
__declspec(implementation_key(25)) HRESULT Relation2d::GetRelatedObjectCount ( long * Count );
__declspec(implementation_key(26)) HRESULT Relation2d::GetRelatedObject ( long Index, IDispatch * * GraphicObject, long * Keypoint_Index );
__declspec(implementation_key(27)) IDispatchPtr Relation2d::GetAttributeSets ( );
__declspec(implementation_key(28)) VARIANT_BOOL Relation2d::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(29)) Relation2dPtr _IRelations2dAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(30)) IUnknownPtr _IRelations2dAuto::Get_NewEnum ( );
__declspec(implementation_key(31)) long _IRelations2dAuto::GetCount ( );
__declspec(implementation_key(32)) Relation2dPtr _IRelations2dAuto::AddHorizontalAlign ( IDispatch * Object1, long Index1, IDispatch * Object2, long Index2, const _variant_t & guaranteed_ok );
__declspec(implementation_key(33)) Relation2dPtr _IRelations2dAuto::AddVerticalAlign ( IDispatch * Object1, long Index1, IDispatch * Object2, long Index2, const _variant_t & guaranteed_ok );
__declspec(implementation_key(34)) Relation2dPtr _IRelations2dAuto::AddConcentric ( IDispatch * Object1, IDispatch * Object2, const _variant_t & guaranteed_ok );
__declspec(implementation_key(35)) Relation2dPtr _IRelations2dAuto::AddFix ( IDispatch * Object, const _variant_t & guaranteed_ok );
__declspec(implementation_key(36)) Relation2dPtr _IRelations2dAuto::AddKeypointFix ( IDispatch * Object, long Index, const _variant_t & guaranteed_ok );
__declspec(implementation_key(37)) Relation2dPtr _IRelations2dAuto::AddHorizontal ( IDispatch * Object, const _variant_t & guaranteed_ok );
__declspec(implementation_key(38)) Relation2dPtr _IRelations2dAuto::AddVertical ( IDispatch * Object, const _variant_t & guaranteed_ok );
__declspec(implementation_key(39)) Relation2dPtr _IRelations2dAuto::AddParallel ( IDispatch * Object1, IDispatch * Object2, const _variant_t & guaranteed_ok );
__declspec(implementation_key(40)) Relation2dPtr _IRelations2dAuto::AddPerpendicular ( IDispatch * Object1, IDispatch * Object2, const _variant_t & guaranteed_ok );
__declspec(implementation_key(41)) Relation2dPtr _IRelations2dAuto::AddTangent ( IDispatch * Object1, IDispatch * Object2, const _variant_t & guaranteed_ok );
__declspec(implementation_key(42)) Relation2dPtr _IRelations2dAuto::AddEqualDirection ( IDispatch * Object1, long Index1, IDispatch * Object2, long Index2, const _variant_t & guaranteed_ok );
__declspec(implementation_key(43)) Relation2dPtr _IRelations2dAuto::AddTangentEqualCurvature ( IDispatch * Object1, long Index1, IDispatch * Object2, long Index2, const _variant_t & guaranteed_ok );
__declspec(implementation_key(44)) Relation2dPtr _IRelations2dAuto::AddEqualDirectionEqualCurvature ( IDispatch * Object1, long Index1, IDispatch * Object2, long Index2, const _variant_t & guaranteed_ok );
__declspec(implementation_key(45)) Relation2dPtr _IRelations2dAuto::AddTangentBetweenCompoundCurves ( long NumberElements1, SAFEARRAY * * Elements1, long NumberElements2, SAFEARRAY * * Elements2, const _variant_t & guaranteed_ok );
__declspec(implementation_key(46)) Relation2dPtr _IRelations2dAuto::AddIntersection ( IDispatch * Object1, long Index, IDispatch * Object2, IDispatch * Object3, const _variant_t & guaranteed_ok );
__declspec(implementation_key(47)) Relation2dPtr _IRelations2dAuto::AddPointOn ( IDispatch * Object1, long Index, IDispatch * Object2, const _variant_t & guaranteed_ok );
__declspec(implementation_key(48)) Relation2dPtr _IRelations2dAuto::AddPointOnCompoundCurve ( IDispatch * Object1, long Index, long NumberElements, SAFEARRAY * * Elements, const _variant_t & guaranteed_ok );
__declspec(implementation_key(49)) Relation2dPtr _IRelations2dAuto::AddKeypoint ( IDispatch * Object1, long Index1, IDispatch * Object2, long Index2, const _variant_t & guaranteed_ok );
__declspec(implementation_key(50)) Relation2dPtr _IRelations2dAuto::AddSymmetric ( IDispatch * pLine, IDispatch * Object2, IDispatch * Object3, const _variant_t & guaranteed_ok );
__declspec(implementation_key(51)) Relation2dPtr _IRelations2dAuto::AddEqual ( IDispatch * Object1, IDispatch * Object2, const _variant_t & guaranteed_ok );
__declspec(implementation_key(52)) Relation2dPtr _IRelations2dAuto::AddSet ( long NumberElements, SAFEARRAY * * Elements );
__declspec(implementation_key(53)) Relation2dPtr _IRelations2dAuto::AddColinear ( IDispatch * Object1, IDispatch * Object2, const _variant_t & guaranteed_ok );
__declspec(implementation_key(54)) Relation2dPtr _IRelations2dAuto::AddFillet ( IDispatch * Object1, long Index1, IDispatch * Arc, long arc_index, IDispatch * Object2, long Index2, const _variant_t & guaranteed_ok );
__declspec(implementation_key(55)) Relation2dPtr _IRelations2dAuto::AddLink ( IDispatch * Object1, IDispatch * Object2, const _variant_t & guaranteed_ok );
__declspec(implementation_key(56)) Relation2dPtr _IRelations2dAuto::AddChamfer ( IDispatch * Object1, long Index1, IDispatch * Line, long line_index, IDispatch * Object2, long Index2, const _variant_t & guaranteed_ok );
__declspec(implementation_key(57)) HRESULT _IRelations2dAuto::AddAutoConstraints ( double dist_tol, double angle_tol, long NumElements, SAFEARRAY * * Elements, long NumCnstrTypes, SAFEARRAY * * CnstrTypes, long * NumCnstrs, SAFEARRAY * * Cnstrs, const _variant_t & varXOriginUnk, const _variant_t & varYOriginUnk, const _variant_t & Xdim_pos_x, const _variant_t & Xdim_pos_y, const _variant_t & Ydim_pos_x, const _variant_t & Ydim_pos_y, const _variant_t & DimPlacementOptions, const _variant_t & LinearDimOptions, VARIANT_BOOL PlaceRadiusDimOnCircle, VARIANT_BOOL PlaceRadiusDimOnArc, VARIANT_BOOL PlaceDistanceDimFromCircleCenter );
__declspec(implementation_key(58)) long _IBackDropAuto::GetMarginColor ( );
__declspec(implementation_key(59)) void _IBackDropAuto::PutMarginColor ( long Color );
__declspec(implementation_key(60)) void _IBackDropAuto::PutMarginDisplay ( VARIANT_BOOL Visible );
__declspec(implementation_key(61)) VARIANT_BOOL _IBackDropAuto::GetMarginDisplay ( );
__declspec(implementation_key(62)) long _IBackDropAuto::GetGridColor ( );
__declspec(implementation_key(63)) void _IBackDropAuto::PutGridColor ( long Color );
__declspec(implementation_key(64)) enum GridTypeConstants _IBackDropAuto::GetGridType ( );
__declspec(implementation_key(65)) void _IBackDropAuto::PutGridType ( enum GridTypeConstants Type );
__declspec(implementation_key(66)) void _IBackDropAuto::PutDynamicGridSpacing ( enum DynamicGridSpacingConstants spacing );
__declspec(implementation_key(67)) enum DynamicGridSpacingConstants _IBackDropAuto::GetDynamicGridSpacing ( );
__declspec(implementation_key(68)) double _IBackDropAuto::GetStaticGridSpacing ( );
__declspec(implementation_key(69)) void _IBackDropAuto::PutStaticGridSpacing ( double spacing );
__declspec(implementation_key(70)) VARIANT_BOOL _IBackDropAuto::GetGridDisplay ( );
__declspec(implementation_key(71)) void _IBackDropAuto::PutGridDisplay ( VARIANT_BOOL Visible );
__declspec(implementation_key(72)) void _IBackDropAuto::PutUseCustomSheetColor ( VARIANT_BOOL UseCustom );
__declspec(implementation_key(73)) VARIANT_BOOL _IBackDropAuto::GetUseCustomSheetColor ( );
__declspec(implementation_key(74)) long _IBackDropAuto::GetCustomSheetColor ( );
__declspec(implementation_key(75)) void _IBackDropAuto::PutCustomSheetColor ( long Color );
__declspec(implementation_key(76)) IDispatchPtr _IBackDropAuto::GetAttributeSets ( );
__declspec(implementation_key(77)) VARIANT_BOOL _IBackDropAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(78)) TGFramework::ApplicationPtr _IDrawingObjectsAuto::GetApplication ( );
__declspec(implementation_key(79)) IDispatchPtr _IDrawingObjectsAuto::GetParent ( );
__declspec(implementation_key(80)) long _IDrawingObjectsAuto::GetCount ( );
__declspec(implementation_key(81)) IDispatchPtr _IDrawingObjectsAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(82)) IUnknownPtr _IDrawingObjectsAuto::Get_NewEnum ( );
__declspec(implementation_key(83)) TGFramework::ApplicationPtr Dimensions::GetApplication ( );
__declspec(implementation_key(84)) long Dimensions::GetCount ( );
__declspec(implementation_key(85)) IDispatchPtr Dimensions::GetParent ( );
__declspec(implementation_key(86)) DimensionPtr Dimensions::Item ( const _variant_t & Index );
__declspec(implementation_key(87)) void Dimensions::PutConstraint ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(88)) VARIANT_BOOL Dimensions::GetConstraint ( );
__declspec(implementation_key(89)) void Dimensions::PutAxisMode ( enum DimAxisModeConstants _arg1 );
__declspec(implementation_key(90)) enum DimAxisModeConstants Dimensions::GetAxisMode ( );
__declspec(implementation_key(91)) void Dimensions::PutAngleCompliment ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(92)) VARIANT_BOOL Dimensions::GetAngleCompliment ( );
__declspec(implementation_key(93)) void Dimensions::PutPlane ( IDispatch * _arg1 );
__declspec(implementation_key(94)) IDispatchPtr Dimensions::GetPlane ( );
__declspec(implementation_key(95)) void Dimensions::PutStyle ( struct DimensionStyle * _arg1 );
__declspec(implementation_key(96)) DimensionStylePtr Dimensions::GetStyle ( );
__declspec(implementation_key(97)) void Dimensions::PutAxis ( IDispatch * _arg1 );
__declspec(implementation_key(98)) IDispatchPtr Dimensions::GetAxis ( );
__declspec(implementation_key(99)) DimensionPtr Dimensions::AddLength ( IDispatch * Object );
__declspec(implementation_key(100)) DimensionPtr Dimensions::AddAngle ( IDispatch * Object );
__declspec(implementation_key(101)) DimensionPtr Dimensions::AddRadius ( IDispatch * Object );
__declspec(implementation_key(102)) DimensionPtr Dimensions::AddRadialDiameter ( IDispatch * Object );
__declspec(implementation_key(103)) DimensionPtr Dimensions::AddCircularDiameter ( IDispatch * Object );
__declspec(implementation_key(104)) DimensionPtr Dimensions::AddSymmetricalDiameter ( IDispatch * Object1, double x1, double y1, double z1, VARIANT_BOOL keyPoint1, IDispatch * Object2, double x2, double y2, double z2, VARIANT_BOOL keyPoint2 );
__declspec(implementation_key(105)) DimensionPtr Dimensions::AddDistanceBetweenObjects ( IDispatch * Object1, double x1, double y1, double z1, VARIANT_BOOL keyPoint1, IDispatch * Object2, double x2, double y2, double z2, VARIANT_BOOL keyPoint2 );
__declspec(implementation_key(106)) DimensionPtr Dimensions::AddDistanceObjectToIntersection ( IDispatch * Object1, double x1, double y1, double z1, VARIANT_BOOL keyPoint1, IDispatch * Object21, double x21, double y21, double z21, IDispatch * Object22, double x22, double y22, double z22 );
__declspec(implementation_key(107)) DimensionPtr Dimensions::AddDistanceIntersectionToObject ( IDispatch * Object11, double x11, double y11, double z11, IDispatch * Object12, double x12, double y12, double z12, IDispatch * Object2, double x2, double y2, double z2, VARIANT_BOOL keyPoint2 );
__declspec(implementation_key(108)) DimensionPtr Dimensions::AddDistanceIntersectionToIntersection ( IDispatch * Object11, double x11, double y11, double z11, IDispatch * Object12, double x12, double y12, double z12, IDispatch * Object21, double x21, double y21, double z21, IDispatch * Object22, double x22, double y22, double z22 );
__declspec(implementation_key(109)) DimensionPtr Dimensions::AddAngleBetweenObjects ( IDispatch * ele1, double x1, double y1, double z1, VARIANT_BOOL keyPoint1, IDispatch * ele2, double x2, double y2, double z2, VARIANT_BOOL keyPoint2 );
__declspec(implementation_key(110)) DimensionPtr Dimensions::AddAngleBetween3Objects ( IDispatch * ele1, double x1, double y1, double z1, VARIANT_BOOL keyPoint1, IDispatch * ele2, double x2, double y2, double z2, VARIANT_BOOL keyPoint2, IDispatch * ele3, double x3, double y3, double z3, VARIANT_BOOL keyPoint3 );
__declspec(implementation_key(111)) DimensionPtr Dimensions::AddCoordinateOrigin ( IDispatch * Object, double x, double y, double z, VARIANT_BOOL keyPoint );
__declspec(implementation_key(112)) DimensionPtr Dimensions::AddCoordinate ( IDispatch * Obj1, double x1, double y1, double z1, VARIANT_BOOL keyPoint1, IDispatch * Obj2, double x2, double y2, double z2, VARIANT_BOOL keyPoint2 );
__declspec(implementation_key(113)) HRESULT Dimensions::ClearPlane ( );
__declspec(implementation_key(114)) HRESULT Dimensions::ClearStyle ( );
__declspec(implementation_key(115)) HRESULT Dimensions::ClearAxis ( );
__declspec(implementation_key(116)) DimensionPtr Dimensions::AddChamfer ( IDispatch * Object1, double x1, double y1, double z1, VARIANT_BOOL keyPoint1, IDispatch * Object2, double x2, double y2, double z2, VARIANT_BOOL keyPoint2, enum DimChamferModeConstants valChamferMode );
__declspec(implementation_key(117)) DimensionPtr Dimensions::AddAngularCoordinateOrigin ( IDispatch * Obj1, double x1, double y1, double z1, VARIANT_BOOL keyPoint1, IDispatch * Obj2, double x2, double y2, double z2, VARIANT_BOOL keyPoint2, double x3, double y3, double z3 );
__declspec(implementation_key(118)) DimensionPtr Dimensions::AddAngularCoordinate ( IDispatch * Obj1, IDispatch * Obj2, double x2, double y2, double z2, VARIANT_BOOL keyPoint2, double x3, double y3, double z3, enum DimAngularCoordnateOrientationConstants valAngCoordMode );
__declspec(implementation_key(119)) DimensionPtr Dimensions::AddCoordinateOriginEx ( IDispatch * Object, double x, double y, double z, VARIANT_BOOL keyPoint1, double x3, double y3, double z3 );
__declspec(implementation_key(120)) DimensionPtr Dimensions::AddCoordinateEx ( IDispatch * Obj1, IDispatch * Obj2, double x2, double y2, double z2, VARIANT_BOOL keyPoint2, double x3, double y3, double z3 );
__declspec(implementation_key(121)) DimensionPtr Dimensions::AddDistanceBetweenObjectsEX ( IDispatch * Object1, double x1, double y1, double z1, VARIANT_BOOL keyPoint1, VARIANT_BOOL bTangent1, IDispatch * Object2, double x2, double y2, double z2, VARIANT_BOOL keyPoint2, VARIANT_BOOL bTangent2 );
__declspec(implementation_key(122)) DimInitDataPtr Dimensions::GetDimInitData ( );
__declspec(implementation_key(123)) DimensionPtr Dimensions::AddDimension ( struct DimInitData * DimInitData );
__declspec(implementation_key(124)) void Dimension::PutValue ( double _arg1 );
__declspec(implementation_key(125)) double Dimension::GetValue ( );
__declspec(implementation_key(126)) DimStylePtr Dimension::GetStyle ( );
__declspec(implementation_key(127)) enum DimTypeConstants Dimension::GetDimensionType ( );
__declspec(implementation_key(128)) void Dimension::PutConstraint ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(129)) VARIANT_BOOL Dimension::GetConstraint ( );
__declspec(implementation_key(130)) VARIANT_BOOL Dimension::GetLeader ( );
__declspec(implementation_key(131)) void Dimension::PutJogged ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(132)) VARIANT_BOOL Dimension::GetJogged ( );
__declspec(implementation_key(133)) void Dimension::PutTerminatorPosition ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(134)) VARIANT_BOOL Dimension::GetTerminatorPosition ( );
__declspec(implementation_key(135)) VARIANT_BOOL Dimension::GetOffsetLeader ( );
__declspec(implementation_key(136)) void Dimension::PutBreakPosition ( enum DimBreakPositionConstants _arg1 );
__declspec(implementation_key(137)) enum DimBreakPositionConstants Dimension::GetBreakPosition ( );
__declspec(implementation_key(138)) void Dimension::PutBreakDistance ( double _arg1 );
__declspec(implementation_key(139)) double Dimension::GetBreakDistance ( );
__declspec(implementation_key(140)) void Dimension::PutMeasurementAxis ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(141)) VARIANT_BOOL Dimension::GetMeasurementAxis ( );
__declspec(implementation_key(142)) void Dimension::PutMeasurementAxisDirection ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(143)) VARIANT_BOOL Dimension::GetMeasurementAxisDirection ( );
__declspec(implementation_key(144)) void Dimension::PutProjectionLineDirection ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(145)) VARIANT_BOOL Dimension::GetProjectionLineDirection ( );
__declspec(implementation_key(146)) void Dimension::PutProjectionArc ( enum DimProjArcConstants _arg1 );
__declspec(implementation_key(147)) enum DimProjArcConstants Dimension::GetProjectionArc ( );
__declspec(implementation_key(148)) void Dimension::PutOriginLineDirection ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(149)) VARIANT_BOOL Dimension::GetOriginLineDirection ( );
__declspec(implementation_key(150)) void Dimension::PutMeasureLineDirection ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(151)) VARIANT_BOOL Dimension::GetMeasureLineDirection ( );
__declspec(implementation_key(152)) void Dimension::PutAngleClockwise ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(153)) VARIANT_BOOL Dimension::GetAngleClockwise ( );
__declspec(implementation_key(154)) void Dimension::PutTrackDistance ( double _arg1 );
__declspec(implementation_key(155)) double Dimension::GetTrackDistance ( );
__declspec(implementation_key(156)) void Dimension::PutLeaderDistance ( double _arg1 );
__declspec(implementation_key(157)) double Dimension::GetLeaderDistance ( );
__declspec(implementation_key(158)) void Dimension::PutPrefixString ( _bstr_t _arg1 );
__declspec(implementation_key(159)) _bstr_t Dimension::GetPrefixString ( );
__declspec(implementation_key(160)) void Dimension::PutSuffixString ( _bstr_t _arg1 );
__declspec(implementation_key(161)) _bstr_t Dimension::GetSuffixString ( );
__declspec(implementation_key(162)) void Dimension::PutSubfixString ( _bstr_t _arg1 );
__declspec(implementation_key(163)) _bstr_t Dimension::GetSubfixString ( );
__declspec(implementation_key(164)) void Dimension::PutSuperfixString ( _bstr_t _arg1 );
__declspec(implementation_key(165)) _bstr_t Dimension::GetSuperfixString ( );
__declspec(implementation_key(166)) void Dimension::PutOverrideString ( _bstr_t _arg1 );
__declspec(implementation_key(167)) _bstr_t Dimension::GetOverrideString ( );
__declspec(implementation_key(168)) void Dimension::PutPrimaryUpperTolerance ( _bstr_t _arg1 );
__declspec(implementation_key(169)) _bstr_t Dimension::GetPrimaryUpperTolerance ( );
__declspec(implementation_key(170)) void Dimension::PutPrimaryLowerTolerance ( _bstr_t _arg1 );
__declspec(implementation_key(171)) _bstr_t Dimension::GetPrimaryLowerTolerance ( );
__declspec(implementation_key(172)) void Dimension::PutPrimaryToleranceSymbol ( _bstr_t _arg1 );
__declspec(implementation_key(173)) _bstr_t Dimension::GetPrimaryToleranceSymbol ( );
__declspec(implementation_key(174)) void Dimension::PutSecondaryUpperTolerance ( _bstr_t _arg1 );
__declspec(implementation_key(175)) _bstr_t Dimension::GetSecondaryUpperTolerance ( );
__declspec(implementation_key(176)) void Dimension::PutSecondaryLowerTolerance ( _bstr_t _arg1 );
__declspec(implementation_key(177)) _bstr_t Dimension::GetSecondaryLowerTolerance ( );
__declspec(implementation_key(178)) void Dimension::PutSecondaryToleranceSymbol ( _bstr_t _arg1 );
__declspec(implementation_key(179)) _bstr_t Dimension::GetSecondaryToleranceSymbol ( );
__declspec(implementation_key(180)) void Dimension::PutDisplayType ( enum DimDispTypeConstants _arg1 );
__declspec(implementation_key(181)) enum DimDispTypeConstants Dimension::GetDisplayType ( );
__declspec(implementation_key(182)) void Dimension::PutTrackAngle ( double _arg1 );
__declspec(implementation_key(183)) double Dimension::GetTrackAngle ( );
__declspec(implementation_key(184)) void Dimension::PutTextScale ( double _arg1 );
__declspec(implementation_key(185)) double Dimension::GetTextScale ( );
__declspec(implementation_key(186)) void Dimension::PutAngleCompliment ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(187)) VARIANT_BOOL Dimension::GetAngleCompliment ( );
__declspec(implementation_key(188)) void Dimension::PutDisplayHalf ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(189)) VARIANT_BOOL Dimension::GetDisplayHalf ( );
__declspec(implementation_key(190)) void Dimension::PutDisplayByName ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(191)) VARIANT_BOOL Dimension::GetDisplayByName ( );
__declspec(implementation_key(192)) void Dimension::PutInspection ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(193)) VARIANT_BOOL Dimension::GetInspection ( );
__declspec(implementation_key(194)) HRESULT Dimension::SetJogPoint1Distance ( double Value );
__declspec(implementation_key(195)) HRESULT Dimension::GetJogPoint1Distance ( double * Value );
__declspec(implementation_key(196)) HRESULT Dimension::SetJogPoint2 ( double x, double y );
__declspec(implementation_key(197)) HRESULT Dimension::GetJogPoint2 ( double * x, double * y );
__declspec(implementation_key(198)) HRESULT Dimension::SetJogPoint3Distance ( double Value );
__declspec(implementation_key(199)) HRESULT Dimension::GetJogPoint3Distance ( double * Value );
__declspec(implementation_key(200)) HRESULT Dimension::SetTextOffsets ( double x, double y );
__declspec(implementation_key(201)) HRESULT Dimension::GetTextOffsets ( double * x, double * y );
__declspec(implementation_key(202)) HRESULT Dimension::GetRelatedCount ( long * Count );
__declspec(implementation_key(203)) HRESULT Dimension::GetRelated ( long Index, IDispatch * * GraphicObject, double * x, double * y, double * z, VARIANT_BOOL * keyPoint );
__declspec(implementation_key(204)) IDispatchPtr Dimension::GetPlane ( );
__declspec(implementation_key(205)) IDispatchPtr Dimension::GetAxis ( );
__declspec(implementation_key(206)) void Dimension::PutAxis ( IDispatch * _arg1 );
__declspec(implementation_key(207)) void Dimension::PutPrefixInside ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(208)) VARIANT_BOOL Dimension::GetPrefixInside ( );
__declspec(implementation_key(209)) enum DimStatusConstants Dimension::GetStatusOfDimension ( );
__declspec(implementation_key(210)) enum DimGroupMemberTypeConstants Dimension::GetGroupMemberType ( );
__declspec(implementation_key(211)) TGFramework::ApplicationPtr Dimension::GetApplication ( );
__declspec(implementation_key(212)) long Dimension::GetIndex ( );
__declspec(implementation_key(213)) _bstr_t Dimension::GetName ( const _variant_t & Recurse );
__declspec(implementation_key(214)) IDispatchPtr Dimension::GetParent ( );
__declspec(implementation_key(215)) long Dimension::GetType ( );
__declspec(implementation_key(216)) long Dimension::GetZOrder ( );
__declspec(implementation_key(217)) _bstr_t Dimension::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(218)) IDispatchPtr Dimension::GetDocument ( );
__declspec(implementation_key(219)) HRESULT Dimension::Copy ( );
__declspec(implementation_key(220)) HRESULT Dimension::Cut ( );
__declspec(implementation_key(221)) HRESULT Dimension::Delete ( );
__declspec(implementation_key(222)) HRESULT Dimension::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(223)) HRESULT Dimension::Scale ( double Factor );
__declspec(implementation_key(224)) HRESULT Dimension::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(225)) HRESULT Dimension::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(226)) IDispatchPtr Dimension::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(227)) IDispatchPtr Dimension::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(228)) HRESULT Dimension::BringToFront ( );
__declspec(implementation_key(229)) HRESULT Dimension::BringForward ( );
__declspec(implementation_key(230)) HRESULT Dimension::SendToBack ( );
__declspec(implementation_key(231)) HRESULT Dimension::SendBackward ( );
__declspec(implementation_key(232)) HRESULT Dimension::Select ( );
__declspec(implementation_key(233)) long Dimension::GetKeyPointCount ( );
__declspec(implementation_key(234)) HRESULT Dimension::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(235)) HRESULT Dimension::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(236)) IDispatchPtr Dimension::GetAttributeSets ( );
__declspec(implementation_key(237)) VARIANT_BOOL Dimension::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(238)) void Dimension::PutSecondValue ( double _arg1 );
__declspec(implementation_key(239)) double Dimension::GetSecondValue ( );
__declspec(implementation_key(240)) void Dimension::PutOverrideChamferAngleString ( _bstr_t _arg1 );
__declspec(implementation_key(241)) _bstr_t Dimension::GetOverrideChamferAngleString ( );
__declspec(implementation_key(242)) enum DimChamferModeConstants Dimension::GetChamferDimensionMode ( );
__declspec(implementation_key(243)) void Dimension::PutVariableTableName ( _bstr_t _arg1 );
__declspec(implementation_key(244)) _bstr_t Dimension::GetVariableTableName ( );
__declspec(implementation_key(245)) void Dimension::PutMeasurementAxisEx ( enum DimAxisModeConstants _arg1 );
__declspec(implementation_key(246)) enum DimAxisModeConstants Dimension::GetMeasurementAxisEx ( );
__declspec(implementation_key(247)) double Dimension::GetProjectionLineAngle1 ( );
__declspec(implementation_key(248)) double Dimension::GetProjectionLineAngle2 ( );
__declspec(implementation_key(249)) void Dimension::PutFormula ( _bstr_t _arg1 );
__declspec(implementation_key(250)) _bstr_t Dimension::GetFormula ( );
__declspec(implementation_key(251)) DisplayDataPtr Dimension::GetDisplayData ( );
__declspec(implementation_key(252)) _bstr_t Dimension::GetDisplayName ( );
__declspec(implementation_key(253)) _bstr_t Dimension::GetSystemName ( );
__declspec(implementation_key(254)) void Dimension::PutExpose ( long _arg1 );
__declspec(implementation_key(255)) long Dimension::GetExpose ( );
__declspec(implementation_key(256)) void Dimension::PutExposeName ( _bstr_t _arg1 );
__declspec(implementation_key(257)) _bstr_t Dimension::GetExposeName ( );
__declspec(implementation_key(258)) void Dimension::PutSubfixString2 ( _bstr_t _arg1 );
__declspec(implementation_key(259)) _bstr_t Dimension::GetSubfixString2 ( );
__declspec(implementation_key(260)) void Dimension::PutSubfixAlignment ( enum SubfixAlignmentConstants _arg1 );
__declspec(implementation_key(261)) enum SubfixAlignmentConstants Dimension::GetSubfixAlignment ( );
__declspec(implementation_key(262)) HRESULT Dimension::AddProjectionLineBreaks ( );
__declspec(implementation_key(263)) HRESULT Dimension::ClearProjectionLineBreaks ( );
__declspec(implementation_key(264)) long Dimension::GetBreakingDimensionsCount ( );
__declspec(implementation_key(265)) void Dimension::PutLayer ( _bstr_t _arg1 );
__declspec(implementation_key(266)) _bstr_t Dimension::GetLayer ( );
__declspec(implementation_key(267)) double Dimension::GetAbsoluteTrackDistance ( );
__declspec(implementation_key(268)) IDispatchPtr Dimension::GetPMIPlane ( );
__declspec(implementation_key(269)) double Dimension::GetPMITrackDistance ( );
__declspec(implementation_key(270)) void Dimension::PutPMITrackDistance ( double _arg1 );
__declspec(implementation_key(271)) void Dimension::PutUseStandardLimitAndFitTolerance ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(272)) VARIANT_BOOL Dimension::GetUseStandardLimitAndFitTolerance ( );
__declspec(implementation_key(273)) void Dimension::PutHoleClassString ( _bstr_t _arg1 );
__declspec(implementation_key(274)) _bstr_t Dimension::GetHoleClassString ( );
__declspec(implementation_key(275)) void Dimension::PutShaftClassString ( _bstr_t _arg1 );
__declspec(implementation_key(276)) _bstr_t Dimension::GetShaftClassString ( );
__declspec(implementation_key(277)) void Dimension::PutInhibitZeroToleranceDisplay ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(278)) VARIANT_BOOL Dimension::GetInhibitZeroToleranceDisplay ( );
__declspec(implementation_key(279)) HRESULT Dimension::SetPMIEditDirection ( enum PMIEditDirectionConstants editDirectionConst );
__declspec(implementation_key(280)) void Dimension::PutHidePMI ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(281)) VARIANT_BOOL Dimension::GetHidePMI ( );
__declspec(implementation_key(282)) _bstr_t Dimension::GetPrefixDisplayedText ( );
__declspec(implementation_key(283)) _bstr_t Dimension::GetSuperfixDisplayedText ( );
__declspec(implementation_key(284)) _bstr_t Dimension::GetSuffixDisplayedText ( );
__declspec(implementation_key(285)) _bstr_t Dimension::GetSubfixDisplayedText ( );
__declspec(implementation_key(286)) _bstr_t Dimension::GetSubfix2DisplayedText ( );
__declspec(implementation_key(287)) void Dimension::PutStyle ( struct DimStyle * _arg1 );
__declspec(implementation_key(288)) void Dimension::PutRadialExtensionDistance ( double _arg1 );
__declspec(implementation_key(289)) double Dimension::GetRadialExtensionDistance ( );
__declspec(implementation_key(290)) HRESULT Dimension::GetDiscreteValues ( int * pnumDiscreteValues, SAFEARRAY * * DiscreteValues );
__declspec(implementation_key(291)) HRESULT Dimension::SetDiscreteValues ( int numDiscreteValues, SAFEARRAY * * DiscreteValues );
__declspec(implementation_key(292)) HRESULT Dimension::GetMultipleJogPoints ( int * numJogPoints, double * initialYOffset, SAFEARRAY * * XOffsets, SAFEARRAY * * YOffsets, SAFEARRAY * * DistBet2Jogs );
__declspec(implementation_key(293)) HRESULT Dimension::SetMultipleJogPoints ( int numJogPoints, double initialYOffset, SAFEARRAY * * XOffsets, SAFEARRAY * * YOffsets, SAFEARRAY * * DistBet2Jogs );
__declspec(implementation_key(294)) _bstr_t Dimension::GetComment ( );
__declspec(implementation_key(295)) HRESULT Dimension::SetComment ( _bstr_t Comment );
__declspec(implementation_key(296)) enum DimStatusConstants Dimension::UpdateStatus ( );
__declspec(implementation_key(297)) HRESULT Dimension::RemoveFromAlignmentSet ( );
__declspec(implementation_key(298)) HRESULT Dimension::BreakAlignmentSet ( );
__declspec(implementation_key(299)) void Dimension::PutTrue3DSketchDimension ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(300)) VARIANT_BOOL Dimension::GetTrue3DSketchDimension ( );
__declspec(implementation_key(301)) enum DimReattachStatusConstants Dimension::ReattachToDrawingView ( IDispatch * DrawingView );
__declspec(implementation_key(302)) HRESULT Dimension::GetValueDiscreteValues ( SAFEARRAY * * DiscreteValues );
__declspec(implementation_key(303)) HRESULT Dimension::SetValueDiscreteValues ( SAFEARRAY * * DiscreteValues );
__declspec(implementation_key(304)) HRESULT Dimension::AddDiscreteValue ( double DiscreteValue );
__declspec(implementation_key(305)) HRESULT Dimension::RemoveDiscreteValue ( double DiscreteValue );
__declspec(implementation_key(306)) HRESULT Dimension::SetValueRangeValues ( double LowValue, int Condition, double HighValue );
__declspec(implementation_key(307)) HRESULT Dimension::GetValueRangeValues ( double * LowValue, int * Condition, double * HighValue );
__declspec(implementation_key(308)) void Dimension::PutUnitsType ( int _arg1 );
__declspec(implementation_key(309)) int Dimension::GetUnitsType ( );
__declspec(implementation_key(310)) HRESULT Dimension::GetValueRangeHighValue ( double * pdHighValue );
__declspec(implementation_key(311)) HRESULT Dimension::SetValueRangeHighValue ( double dHighValue );
__declspec(implementation_key(312)) HRESULT Dimension::GetValueRangeLowValue ( double * pdHighValue );
__declspec(implementation_key(313)) HRESULT Dimension::SetValueRangeLowValue ( double dHighValue );
__declspec(implementation_key(314)) HRESULT Dimension::ClearLimitsOrDiscreteValues ( );
__declspec(implementation_key(315)) double Dimension::GetValueOutOfRange ( );
__declspec(implementation_key(316)) VARIANT_BOOL Dimension::GetIsReadOnly ( );
__declspec(implementation_key(317)) HRESULT Dimension::GetValueEx ( double * pdValue, enum TGFramework::seUnitsTypeConstants seUnitsType );
__declspec(implementation_key(318)) HRESULT Dimension::SetValueEx ( double dValue, enum TGFramework::seUnitsTypeConstants seUnitsType );
__declspec(implementation_key(319)) void Dimension::PutEnablePrefix ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(320)) VARIANT_BOOL Dimension::GetEnablePrefix ( );
__declspec(implementation_key(321)) HRESULT Dimension::AutoScaleSketch ( double dValue, VARIANT_BOOL * Value );
__declspec(implementation_key(322)) HRESULT Dimension::SetValueAndUpdateCache ( double dValue, enum TGFramework::seUnitsTypeConstants seUnitsType );
__declspec(implementation_key(323)) HRESULT Dimension::ConvertCDiameterToRDiameter ( enum DimTypeConstants Type );
__declspec(implementation_key(324)) void DimStyle::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(325)) _bstr_t DimStyle::GetName ( );
__declspec(implementation_key(326)) void DimStyle::PutPrimaryUnits ( enum DimLinearUnitConstants _arg1 );
__declspec(implementation_key(327)) enum DimLinearUnitConstants DimStyle::GetPrimaryUnits ( );
__declspec(implementation_key(328)) void DimStyle::PutRoundOffType ( enum DimRoundOffTypeConstants _arg1 );
__declspec(implementation_key(329)) enum DimRoundOffTypeConstants DimStyle::GetRoundOffType ( );
__declspec(implementation_key(330)) void DimStyle::PutDelimiter ( enum DimDelimiterTypeConstants _arg1 );
__declspec(implementation_key(331)) enum DimDelimiterTypeConstants DimStyle::GetDelimiter ( );
__declspec(implementation_key(332)) void DimStyle::PutPrimaryDecimalRoundOff ( enum DimDecimalRoundOffTypeConstants _arg1 );
__declspec(implementation_key(333)) enum DimDecimalRoundOffTypeConstants DimStyle::GetPrimaryDecimalRoundOff ( );
__declspec(implementation_key(334)) void DimStyle::PutPrimaryFractionRoundOff ( enum DimFractionRoundOffTypeConstants _arg1 );
__declspec(implementation_key(335)) enum DimFractionRoundOffTypeConstants DimStyle::GetPrimaryFractionRoundOff ( );
__declspec(implementation_key(336)) void DimStyle::PutAngularUnits ( enum DimAngularUnitConstants _arg1 );
__declspec(implementation_key(337)) enum DimAngularUnitConstants DimStyle::GetAngularUnits ( );
__declspec(implementation_key(338)) void DimStyle::PutAngularDMSRoundOff ( enum DimDMSRoundOffTypeConstants _arg1 );
__declspec(implementation_key(339)) enum DimDMSRoundOffTypeConstants DimStyle::GetAngularDMSRoundOff ( );
__declspec(implementation_key(340)) void DimStyle::PutAngularDecimalRoundOff ( enum DimDecimalRoundOffTypeConstants _arg1 );
__declspec(implementation_key(341)) enum DimDecimalRoundOffTypeConstants DimStyle::GetAngularDecimalRoundOff ( );
__declspec(implementation_key(342)) void DimStyle::PutAngularFractionRoundOff ( enum DimFractionRoundOffTypeConstants _arg1 );
__declspec(implementation_key(343)) enum DimFractionRoundOffTypeConstants DimStyle::GetAngularFractionRoundOff ( );
__declspec(implementation_key(344)) void DimStyle::PutPrimaryLeadingZeros ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(345)) VARIANT_BOOL DimStyle::GetPrimaryLeadingZeros ( );
__declspec(implementation_key(346)) void DimStyle::PutPrimaryTrailingZeros ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(347)) VARIANT_BOOL DimStyle::GetPrimaryTrailingZeros ( );
__declspec(implementation_key(348)) void DimStyle::PutPrimaryUnitLabel ( _bstr_t _arg1 );
__declspec(implementation_key(349)) _bstr_t DimStyle::GetPrimaryUnitLabel ( );
__declspec(implementation_key(350)) void DimStyle::PutPrimarySubunitsLabel ( _bstr_t _arg1 );
__declspec(implementation_key(351)) _bstr_t DimStyle::GetPrimarySubunitsLabel ( );
__declspec(implementation_key(352)) void DimStyle::PutMaximumSubunits ( int _arg1 );
__declspec(implementation_key(353)) int DimStyle::GetMaximumSubunits ( );
__declspec(implementation_key(354)) void DimStyle::PutDualDisplay ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(355)) VARIANT_BOOL DimStyle::GetDualDisplay ( );
__declspec(implementation_key(356)) void DimStyle::PutSecondaryUnits ( enum DimLinearUnitConstants _arg1 );
__declspec(implementation_key(357)) enum DimLinearUnitConstants DimStyle::GetSecondaryUnits ( );
__declspec(implementation_key(358)) void DimStyle::PutSecondaryUnitRoundOff ( enum DimRoundOffTypeConstants _arg1 );
__declspec(implementation_key(359)) enum DimRoundOffTypeConstants DimStyle::GetSecondaryUnitRoundOff ( );
__declspec(implementation_key(360)) void DimStyle::PutSecondaryDecimalRoundOff ( enum DimDecimalRoundOffTypeConstants _arg1 );
__declspec(implementation_key(361)) enum DimDecimalRoundOffTypeConstants DimStyle::GetSecondaryDecimalRoundOff ( );
__declspec(implementation_key(362)) void DimStyle::PutSecondaryFractionRoundOff ( enum DimFractionRoundOffTypeConstants _arg1 );
__declspec(implementation_key(363)) enum DimFractionRoundOffTypeConstants DimStyle::GetSecondaryFractionRoundOff ( );
__declspec(implementation_key(364)) void DimStyle::PutSecondaryLeadingZeros ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(365)) VARIANT_BOOL DimStyle::GetSecondaryLeadingZeros ( );
__declspec(implementation_key(366)) void DimStyle::PutSecondaryTrailingZeros ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(367)) VARIANT_BOOL DimStyle::GetSecondaryTrailingZeros ( );
__declspec(implementation_key(368)) void DimStyle::PutSecondaryUnitLabel ( _bstr_t _arg1 );
__declspec(implementation_key(369)) _bstr_t DimStyle::GetSecondaryUnitLabel ( );
__declspec(implementation_key(370)) void DimStyle::PutSecondarySubunitsLabel ( _bstr_t _arg1 );
__declspec(implementation_key(371)) _bstr_t DimStyle::GetSecondarySubunitsLabel ( );
__declspec(implementation_key(372)) void DimStyle::PutHeight ( double _arg1 );
__declspec(implementation_key(373)) double DimStyle::GetHeight ( );
__declspec(implementation_key(374)) void DimStyle::PutRatio ( double _arg1 );
__declspec(implementation_key(375)) double DimStyle::GetRatio ( );
__declspec(implementation_key(376)) void DimStyle::PutTextWeight ( double _arg1 );
__declspec(implementation_key(377)) double DimStyle::GetTextWeight ( );
__declspec(implementation_key(378)) void DimStyle::PutFont ( _bstr_t _arg1 );
__declspec(implementation_key(379)) _bstr_t DimStyle::GetFont ( );
__declspec(implementation_key(380)) void DimStyle::PutFontStyle ( enum DimTextFontStyleConstants _arg1 );
__declspec(implementation_key(381)) enum DimTextFontStyleConstants DimStyle::GetFontStyle ( );
__declspec(implementation_key(382)) void DimStyle::PutTextOrientation ( enum DimTextOrientationConstants _arg1 );
__declspec(implementation_key(383)) enum DimTextOrientationConstants DimStyle::GetTextOrientation ( );
__declspec(implementation_key(384)) void DimStyle::PutTextPosition ( enum DimTextPositionConstants _arg1 );
__declspec(implementation_key(385)) enum DimTextPositionConstants DimStyle::GetTextPosition ( );
__declspec(implementation_key(386)) void DimStyle::PutLimitTextArrangement ( enum DimLimitTextArrangmentConstants _arg1 );
__declspec(implementation_key(387)) enum DimLimitTextArrangmentConstants DimStyle::GetLimitTextArrangement ( );
__declspec(implementation_key(388)) void DimStyle::PutToleranceHeightRatio ( double _arg1 );
__declspec(implementation_key(389)) double DimStyle::GetToleranceHeightRatio ( );
__declspec(implementation_key(390)) void DimStyle::PutToleranceWeight ( double _arg1 );
__declspec(implementation_key(391)) double DimStyle::GetToleranceWeight ( );
__declspec(implementation_key(392)) void DimStyle::PutNTSSymbol ( enum DimNTSTypeConstants _arg1 );
__declspec(implementation_key(393)) enum DimNTSTypeConstants DimStyle::GetNTSSymbol ( );
__declspec(implementation_key(394)) void DimStyle::PutTerminatorType ( enum DimTermTypeConstants _arg1 );
__declspec(implementation_key(395)) enum DimTermTypeConstants DimStyle::GetTerminatorType ( );
__declspec(implementation_key(396)) void DimStyle::PutTerminatorDisplay ( enum DimTermDisplayTypeConstants _arg1 );
__declspec(implementation_key(397)) enum DimTermDisplayTypeConstants DimStyle::GetTerminatorDisplay ( );
__declspec(implementation_key(398)) void DimStyle::PutOriginTerminatorType ( enum DimTermTypeConstants _arg1 );
__declspec(implementation_key(399)) enum DimTermTypeConstants DimStyle::GetOriginTerminatorType ( );
__declspec(implementation_key(400)) void DimStyle::PutFreeSpaceTerminatorType ( enum DimTermTypeConstants _arg1 );
__declspec(implementation_key(401)) enum DimTermTypeConstants DimStyle::GetFreeSpaceTerminatorType ( );
__declspec(implementation_key(402)) void DimStyle::PutDatumTerminatorType ( enum DimDatumTermTypeConstants _arg1 );
__declspec(implementation_key(403)) enum DimDatumTermTypeConstants DimStyle::GetDatumTerminatorType ( );
__declspec(implementation_key(404)) void DimStyle::PutTerminatorSize ( double _arg1 );
__declspec(implementation_key(405)) double DimStyle::GetTerminatorSize ( );
__declspec(implementation_key(406)) void DimStyle::PutTerminatorInsideLimit ( double _arg1 );
__declspec(implementation_key(407)) double DimStyle::GetTerminatorInsideLimit ( );
__declspec(implementation_key(408)) void DimStyle::PutLineWidth ( double _arg1 );
__declspec(implementation_key(409)) double DimStyle::GetLineWidth ( );
__declspec(implementation_key(410)) void DimStyle::PutProjectionExtensionGap ( double _arg1 );
__declspec(implementation_key(411)) double DimStyle::GetProjectionExtensionGap ( );
__declspec(implementation_key(412)) void DimStyle::PutProjectionOffsetGap ( double _arg1 );
__declspec(implementation_key(413)) double DimStyle::GetProjectionOffsetGap ( );
__declspec(implementation_key(414)) void DimStyle::PutProjectionOffsetGapAlignment ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(415)) VARIANT_BOOL DimStyle::GetProjectionOffsetGapAlignment ( );
__declspec(implementation_key(416)) void DimStyle::PutProjectionAngle ( double _arg1 );
__declspec(implementation_key(417)) double DimStyle::GetProjectionAngle ( );
__declspec(implementation_key(418)) void DimStyle::PutLineConnect ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(419)) VARIANT_BOOL DimStyle::GetLineConnect ( );
__declspec(implementation_key(420)) void DimStyle::PutStackPitch ( double _arg1 );
__declspec(implementation_key(421)) double DimStyle::GetStackPitch ( );
__declspec(implementation_key(422)) void DimStyle::PutLeaderLineLength ( double _arg1 );
__declspec(implementation_key(423)) double DimStyle::GetLeaderLineLength ( );
__declspec(implementation_key(424)) void DimStyle::PutCoordinateAutoJog ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(425)) VARIANT_BOOL DimStyle::GetCoordinateAutoJog ( );
__declspec(implementation_key(426)) void DimStyle::PutCoordinateStackPitch ( double _arg1 );
__declspec(implementation_key(427)) double DimStyle::GetCoordinateStackPitch ( );
__declspec(implementation_key(428)) void DimStyle::PutCommonOrigin ( enum DimCommonOriginTypeConstants _arg1 );
__declspec(implementation_key(429)) enum DimCommonOriginTypeConstants DimStyle::GetCommonOrigin ( );
__declspec(implementation_key(430)) void DimStyle::PutCoordinateTextPosition ( enum DimCoordTextPositionConstants _arg1 );
__declspec(implementation_key(431)) enum DimCoordTextPositionConstants DimStyle::GetCoordinateTextPosition ( );
__declspec(implementation_key(432)) void DimStyle::PutSymbolPosition ( enum DimSymbolPositionConstants _arg1 );
__declspec(implementation_key(433)) enum DimSymbolPositionConstants DimStyle::GetSymbolPosition ( );
__declspec(implementation_key(434)) void DimStyle::PutAutoSuppressDiameter ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(435)) VARIANT_BOOL DimStyle::GetAutoSuppressDiameter ( );
__declspec(implementation_key(436)) void DimStyle::PutDimensionScaleMode ( enum DimScaleModeConstants _arg1 );
__declspec(implementation_key(437)) enum DimScaleModeConstants DimStyle::GetDimensionScaleMode ( );
__declspec(implementation_key(438)) void DimStyle::PutDimensionScale ( double _arg1 );
__declspec(implementation_key(439)) double DimStyle::GetDimensionScale ( );
__declspec(implementation_key(440)) void DimStyle::PutErrorColor ( long _arg1 );
__declspec(implementation_key(441)) long DimStyle::GetErrorColor ( );
__declspec(implementation_key(442)) void DimStyle::PutDrivingColor ( long _arg1 );
__declspec(implementation_key(443)) long DimStyle::GetDrivingColor ( );
__declspec(implementation_key(444)) void DimStyle::PutDrivenColor ( long _arg1 );
__declspec(implementation_key(445)) long DimStyle::GetDrivenColor ( );
__declspec(implementation_key(446)) void DimStyle::PutAutoCenterProjectionLine ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(447)) VARIANT_BOOL DimStyle::GetAutoCenterProjectionLine ( );
__declspec(implementation_key(448)) void DimStyle::PutProjectionLineDisplay ( enum DimProjDisplayTypeConstants _arg1 );
__declspec(implementation_key(449)) enum DimProjDisplayTypeConstants DimStyle::GetProjectionLineDisplay ( );
__declspec(implementation_key(450)) void DimStyle::PutProjectionLineDisplayForIntersectionPoint ( enum DimProjDisplayTypeConstants _arg1 );
__declspec(implementation_key(451)) enum DimProjDisplayTypeConstants DimStyle::GetProjectionLineDisplayForIntersectionPoint ( );
__declspec(implementation_key(452)) void DimStyle::PutTextClearanceGap ( double _arg1 );
__declspec(implementation_key(453)) double DimStyle::GetTextClearanceGap ( );
__declspec(implementation_key(454)) void DimStyle::PutDualModeVerticalGap ( double _arg1 );
__declspec(implementation_key(455)) double DimStyle::GetDualModeVerticalGap ( );
__declspec(implementation_key(456)) void DimStyle::PutLineSpacing ( double _arg1 );
__declspec(implementation_key(457)) double DimStyle::GetLineSpacing ( );
__declspec(implementation_key(458)) void DimStyle::PutAboveGap ( double _arg1 );
__declspec(implementation_key(459)) double DimStyle::GetAboveGap ( );
__declspec(implementation_key(460)) void DimStyle::PutHorizontalToleranceGap ( double _arg1 );
__declspec(implementation_key(461)) double DimStyle::GetHorizontalToleranceGap ( );
__declspec(implementation_key(462)) void DimStyle::PutVerticalToleranceGap ( double _arg1 );
__declspec(implementation_key(463)) double DimStyle::GetVerticalToleranceGap ( );
__declspec(implementation_key(464)) void DimStyle::PutVerticalLimitsGap ( double _arg1 );
__declspec(implementation_key(465)) double DimStyle::GetVerticalLimitsGap ( );
__declspec(implementation_key(466)) void DimStyle::PutHorizontalBoxGap ( double _arg1 );
__declspec(implementation_key(467)) double DimStyle::GetHorizontalBoxGap ( );
__declspec(implementation_key(468)) void DimStyle::PutVerticalBoxGap ( double _arg1 );
__declspec(implementation_key(469)) double DimStyle::GetVerticalBoxGap ( );
__declspec(implementation_key(470)) void DimStyle::PutPrefixSuffixGap ( double _arg1 );
__declspec(implementation_key(471)) double DimStyle::GetPrefixSuffixGap ( );
__declspec(implementation_key(472)) void DimStyle::PutSymbolGap ( double _arg1 );
__declspec(implementation_key(473)) double DimStyle::GetSymbolGap ( );
__declspec(implementation_key(474)) void DimStyle::PutMaximumViewAngle ( double _arg1 );
__declspec(implementation_key(475)) double DimStyle::GetMaximumViewAngle ( );
__declspec(implementation_key(476)) void DimStyle::PutProjectionToleranceZonePosition ( enum DimProjTolZonePositionConstants _arg1 );
__declspec(implementation_key(477)) enum DimProjTolZonePositionConstants DimStyle::GetProjectionToleranceZonePosition ( );
__declspec(implementation_key(478)) void DimStyle::PutDatumFrameDashes ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(479)) VARIANT_BOOL DimStyle::GetDatumFrameDashes ( );
__declspec(implementation_key(480)) void DimStyle::PutViewTextRatio ( double _arg1 );
__declspec(implementation_key(481)) double DimStyle::GetViewTextRatio ( );
__declspec(implementation_key(482)) void DimStyle::PutViewTerminatorRatio ( double _arg1 );
__declspec(implementation_key(483)) double DimStyle::GetViewTerminatorRatio ( );
__declspec(implementation_key(484)) void DimStyle::PutViewLineWidth ( double _arg1 );
__declspec(implementation_key(485)) double DimStyle::GetViewLineWidth ( );
__declspec(implementation_key(486)) void DimStyle::PutViewLineType ( _bstr_t _arg1 );
__declspec(implementation_key(487)) _bstr_t DimStyle::GetViewLineType ( );
__declspec(implementation_key(488)) void DimStyle::PutViewCuttingPlaneLineDisplay ( enum DimViewCuttingPlaneDisplayTypeConstants _arg1 );
__declspec(implementation_key(489)) enum DimViewCuttingPlaneDisplayTypeConstants DimStyle::GetViewCuttingPlaneLineDisplay ( );
__declspec(implementation_key(490)) void DimStyle::PutViewPlaneLineDisplay ( enum DimViewPlaneDisplayTypeConstants _arg1 );
__declspec(implementation_key(491)) enum DimViewPlaneDisplayTypeConstants DimStyle::GetViewPlaneLineDisplay ( );
__declspec(implementation_key(492)) void DimStyle::PutOffsetLeaderType ( enum DimOffsetLeaderTypeConstants _arg1 );
__declspec(implementation_key(493)) enum DimOffsetLeaderTypeConstants DimStyle::GetOffsetLeaderType ( );
__declspec(implementation_key(494)) void DimStyle::PutSecondaryToleranceEquivalent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(495)) VARIANT_BOOL DimStyle::GetSecondaryToleranceEquivalent ( );
__declspec(implementation_key(496)) void DimStyle::PutCenterLineType ( _bstr_t _arg1 );
__declspec(implementation_key(497)) _bstr_t DimStyle::GetCenterLineType ( );
__declspec(implementation_key(498)) void DimStyle::PutCenterMarkSize ( double _arg1 );
__declspec(implementation_key(499)) double DimStyle::GetCenterMarkSize ( );
__declspec(implementation_key(500)) void DimStyle::PutAutoPhase ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(501)) VARIANT_BOOL DimStyle::GetAutoPhase ( );
__declspec(implementation_key(502)) HRESULT DimStyle::UseActiveStyle ( );
__declspec(implementation_key(503)) void DimStyle::PutRoundUp ( enum DimRoundUpTypeConstants _arg1 );
__declspec(implementation_key(504)) enum DimRoundUpTypeConstants DimStyle::GetRoundUp ( );
__declspec(implementation_key(505)) void DimStyle::PutSecondaryLinearRoundOffType ( enum DimRoundOffTypeConstants _arg1 );
__declspec(implementation_key(506)) enum DimRoundOffTypeConstants DimStyle::GetSecondaryLinearRoundOffType ( );
__declspec(implementation_key(507)) void DimStyle::PutAngularRoundOffType ( enum DimRoundOffTypeConstants _arg1 );
__declspec(implementation_key(508)) enum DimRoundOffTypeConstants DimStyle::GetAngularRoundOffType ( );
__declspec(implementation_key(509)) void DimStyle::PutCenterMarkExtension ( double _arg1 );
__declspec(implementation_key(510)) double DimStyle::GetCenterMarkExtension ( );
__declspec(implementation_key(511)) void DimStyle::PutChamferUse45DegreeCharacter ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(512)) VARIANT_BOOL DimStyle::GetChamferUse45DegreeCharacter ( );
__declspec(implementation_key(513)) void DimStyle::PutSmartDepthHoleThru ( _bstr_t _arg1 );
__declspec(implementation_key(514)) _bstr_t DimStyle::GetSmartDepthHoleThru ( );
__declspec(implementation_key(515)) void DimStyle::PutSmartDepthHoleFinite ( _bstr_t _arg1 );
__declspec(implementation_key(516)) _bstr_t DimStyle::GetSmartDepthHoleFinite ( );
__declspec(implementation_key(517)) void DimStyle::PutSmartDepthThreadThru ( _bstr_t _arg1 );
__declspec(implementation_key(518)) _bstr_t DimStyle::GetSmartDepthThreadThru ( );
__declspec(implementation_key(519)) void DimStyle::PutSmartDepthThreadFinite ( _bstr_t _arg1 );
__declspec(implementation_key(520)) _bstr_t DimStyle::GetSmartDepthThreadFinite ( );
__declspec(implementation_key(521)) void DimStyle::PutLowerCaseMultiplicationSymbol ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(522)) VARIANT_BOOL DimStyle::GetLowerCaseMultiplicationSymbol ( );
__declspec(implementation_key(523)) void DimStyle::PutHoleCalloutSimple ( _bstr_t _arg1 );
__declspec(implementation_key(524)) _bstr_t DimStyle::GetHoleCalloutSimple ( );
__declspec(implementation_key(525)) void DimStyle::PutHoleCalloutCounterbore ( _bstr_t _arg1 );
__declspec(implementation_key(526)) _bstr_t DimStyle::GetHoleCalloutCounterbore ( );
__declspec(implementation_key(527)) void DimStyle::PutHoleCalloutCountersink ( _bstr_t _arg1 );
__declspec(implementation_key(528)) _bstr_t DimStyle::GetHoleCalloutCountersink ( );
__declspec(implementation_key(529)) void DimStyle::PutHoleCalloutSimpleThreaded ( _bstr_t _arg1 );
__declspec(implementation_key(530)) _bstr_t DimStyle::GetHoleCalloutSimpleThreaded ( );
__declspec(implementation_key(531)) void DimStyle::PutHoleCalloutCounterboreThreaded ( _bstr_t _arg1 );
__declspec(implementation_key(532)) _bstr_t DimStyle::GetHoleCalloutCounterboreThreaded ( );
__declspec(implementation_key(533)) void DimStyle::PutHoleCalloutCountersinkThreaded ( _bstr_t _arg1 );
__declspec(implementation_key(534)) _bstr_t DimStyle::GetHoleCalloutCountersinkThreaded ( );
__declspec(implementation_key(535)) void DimStyle::PutApplyBreakLineGap ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(536)) VARIANT_BOOL DimStyle::GetApplyBreakLineGap ( );
__declspec(implementation_key(537)) void DimStyle::PutTextAutoFillBackground ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(538)) VARIANT_BOOL DimStyle::GetTextAutoFillBackground ( );
__declspec(implementation_key(539)) void DimStyle::PutPulledOutTextOrientation ( enum DimTextOrientationConstants _arg1 );
__declspec(implementation_key(540)) enum DimTextOrientationConstants DimStyle::GetPulledOutTextOrientation ( );
__declspec(implementation_key(541)) void DimStyle::PutPulledOutTextPosition ( enum DimTextPositionConstants _arg1 );
__declspec(implementation_key(542)) enum DimTextPositionConstants DimStyle::GetPulledOutTextPosition ( );
__declspec(implementation_key(543)) void DimStyle::PutOverridePulledOutText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(544)) VARIANT_BOOL DimStyle::GetOverridePulledOutText ( );
__declspec(implementation_key(545)) void DimStyle::PutViewLineArrowOffset ( double _arg1 );
__declspec(implementation_key(546)) double DimStyle::GetViewLineArrowOffset ( );
__declspec(implementation_key(547)) void DimStyle::PutViewThickLineLength ( double _arg1 );
__declspec(implementation_key(548)) double DimStyle::GetViewThickLineLength ( );
__declspec(implementation_key(549)) void DimStyle::PutOrigTerminatorSize ( double _arg1 );
__declspec(implementation_key(550)) double DimStyle::GetOrigTerminatorSize ( );
__declspec(implementation_key(551)) void DimStyle::PutConnectorLineType ( _bstr_t _arg1 );
__declspec(implementation_key(552)) _bstr_t DimStyle::GetConnectorLineType ( );
__declspec(implementation_key(553)) void DimStyle::PutConnectorColor ( long _arg1 );
__declspec(implementation_key(554)) long DimStyle::GetConnectorColor ( );
__declspec(implementation_key(555)) void DimStyle::PutConnectorWidth ( double _arg1 );
__declspec(implementation_key(556)) double DimStyle::GetConnectorWidth ( );
__declspec(implementation_key(557)) void DimStyle::PutFractionSeparator ( _bstr_t _arg1 );
__declspec(implementation_key(558)) _bstr_t DimStyle::GetFractionSeparator ( );
__declspec(implementation_key(559)) void DimStyle::PutHeightPMI ( double _arg1 );
__declspec(implementation_key(560)) double DimStyle::GetHeightPMI ( );
__declspec(implementation_key(561)) void DimStyle::PutProjectionBreakGap ( double _arg1 );
__declspec(implementation_key(562)) double DimStyle::GetProjectionBreakGap ( );
__declspec(implementation_key(563)) void DimStyle::PutSecondaryDelimiter ( enum DimDelimiterTypeConstants _arg1 );
__declspec(implementation_key(564)) enum DimDelimiterTypeConstants DimStyle::GetSecondaryDelimiter ( );
__declspec(implementation_key(565)) void DimStyle::PutMatchPrimaryDelimiter ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(566)) VARIANT_BOOL DimStyle::GetMatchPrimaryDelimiter ( );
__declspec(implementation_key(567)) void DimStyle::PutInhibitZeroToleranceDisplay ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(568)) VARIANT_BOOL DimStyle::GetInhibitZeroToleranceDisplay ( );
__declspec(implementation_key(569)) void DimStyle::PutAllAroundMultiplier ( double _arg1 );
__declspec(implementation_key(570)) double DimStyle::GetAllAroundMultiplier ( );
__declspec(implementation_key(571)) void DimStyle::PutOverridePulledOutText2 ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(572)) VARIANT_BOOL DimStyle::GetOverridePulledOutText2 ( );
__declspec(implementation_key(573)) void DimStyle::PutPulledOutText2Orientation ( enum DimTextOrientationConstants _arg1 );
__declspec(implementation_key(574)) enum DimTextOrientationConstants DimStyle::GetPulledOutText2Orientation ( );
__declspec(implementation_key(575)) void DimStyle::PutPulledOutText2Position ( enum DimTextPositionConstants _arg1 );
__declspec(implementation_key(576)) enum DimTextPositionConstants DimStyle::GetPulledOutText2Position ( );
__declspec(implementation_key(577)) void DimStyle::PutDisplayDegreeSymbolOnNumericTolerance ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(578)) VARIANT_BOOL DimStyle::GetDisplayDegreeSymbolOnNumericTolerance ( );
__declspec(implementation_key(579)) void DimStyle::PutZeroInchesForFTIN ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(580)) VARIANT_BOOL DimStyle::GetZeroInchesForFTIN ( );
__declspec(implementation_key(581)) void DimStyle::PutSymbolFont ( enum DimStyleSymbolFontConstants _arg1 );
__declspec(implementation_key(582)) enum DimStyleSymbolFontConstants DimStyle::GetSymbolFont ( );
__declspec(implementation_key(583)) void DimStyle::PutDatumTerminatorGap ( double _arg1 );
__declspec(implementation_key(584)) double DimStyle::GetDatumTerminatorGap ( );
__declspec(implementation_key(585)) void DimStyle::PutDatumFrameShape ( enum DimStyleDatumFrameShapeConstants _arg1 );
__declspec(implementation_key(586)) enum DimStyleDatumFrameShapeConstants DimStyle::GetDatumFrameShape ( );
__declspec(implementation_key(587)) void DimStyle::PutDisplayCoordinateOriginText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(588)) VARIANT_BOOL DimStyle::GetDisplayCoordinateOriginText ( );
__declspec(implementation_key(589)) void DimStyle::PutPlacePrefixInsideBasicDimensionBox ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(590)) VARIANT_BOOL DimStyle::GetPlacePrefixInsideBasicDimensionBox ( );
__declspec(implementation_key(591)) void DimStyle::PutSecondaryUnitSeparator ( enum DimStyleSecondaryUnitSeparatorConstants _arg1 );
__declspec(implementation_key(592)) enum DimStyleSecondaryUnitSeparatorConstants DimStyle::GetSecondaryUnitSeparator ( );
__declspec(implementation_key(593)) void DimStyle::PutWeldSymbolLineWidth ( double _arg1 );
__declspec(implementation_key(594)) double DimStyle::GetWeldSymbolLineWidth ( );
__declspec(implementation_key(595)) void DimStyle::PutThreeSidedSymbolOffsetGap ( double _arg1 );
__declspec(implementation_key(596)) double DimStyle::GetThreeSidedSymbolOffsetGap ( );
__declspec(implementation_key(597)) void DimStyle::PutHoleShaftToleranceSeparatorType ( enum DimHoleShaftSeparatorTypeConstants _arg1 );
__declspec(implementation_key(598)) enum DimHoleShaftSeparatorTypeConstants DimStyle::GetHoleShaftToleranceSeparatorType ( );
__declspec(implementation_key(599)) void DimStyle::PutToleranceTextVerticalAlignment ( enum TextVerticalAlignmentConstants _arg1 );
__declspec(implementation_key(600)) enum TextVerticalAlignmentConstants DimStyle::GetToleranceTextVerticalAlignment ( );
__declspec(implementation_key(601)) void DimStyle::PutToleranceTextHorizontalAlignment ( enum DimToleranceTextHorizontalAlignOptionsConstants _arg1 );
__declspec(implementation_key(602)) enum DimToleranceTextHorizontalAlignOptionsConstants DimStyle::GetToleranceTextHorizontalAlignment ( );
__declspec(implementation_key(603)) void DimStyle::PutUseTextSizeForCombinedTolValueDisplay ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(604)) VARIANT_BOOL DimStyle::GetUseTextSizeForCombinedTolValueDisplay ( );
__declspec(implementation_key(605)) void DimStyle::PutDatumFrameLineTermThickness ( double _arg1 );
__declspec(implementation_key(606)) double DimStyle::GetDatumFrameLineTermThickness ( );
__declspec(implementation_key(607)) void DimStyle::PutDatumTargetTerminatorType ( enum DimDatumTargetTermTypeConstants _arg1 );
__declspec(implementation_key(608)) enum DimDatumTargetTermTypeConstants DimStyle::GetDatumTargetTerminatorType ( );
__declspec(implementation_key(609)) void DimStyle::PutPinSymbolTerminatorType ( enum DimPinSymbolTermTypeConstants _arg1 );
__declspec(implementation_key(610)) enum DimPinSymbolTermTypeConstants DimStyle::GetPinSymbolTerminatorType ( );
__declspec(implementation_key(611)) void DimStyle::PutPrimaryLinearToleranceUnits ( enum DimLinearUnitConstants _arg1 );
__declspec(implementation_key(612)) enum DimLinearUnitConstants DimStyle::GetPrimaryLinearToleranceUnits ( );
__declspec(implementation_key(613)) void DimStyle::PutPrimaryLinearToleranceRoundOffType ( enum DimRoundOffTypeConstants _arg1 );
__declspec(implementation_key(614)) enum DimRoundOffTypeConstants DimStyle::GetPrimaryLinearToleranceRoundOffType ( );
__declspec(implementation_key(615)) void DimStyle::PutPrimaryLinearToleranceDecimalRoundOff ( enum DimDecimalRoundOffTypeConstants _arg1 );
__declspec(implementation_key(616)) enum DimDecimalRoundOffTypeConstants DimStyle::GetPrimaryLinearToleranceDecimalRoundOff ( );
__declspec(implementation_key(617)) void DimStyle::PutPrimaryLinearToleranceFractionRoundOff ( enum DimFractionRoundOffTypeConstants _arg1 );
__declspec(implementation_key(618)) enum DimFractionRoundOffTypeConstants DimStyle::GetPrimaryLinearToleranceFractionRoundOff ( );
__declspec(implementation_key(619)) void DimStyle::PutPrimaryLinearToleranceUnitLabel ( _bstr_t _arg1 );
__declspec(implementation_key(620)) _bstr_t DimStyle::GetPrimaryLinearToleranceUnitLabel ( );
__declspec(implementation_key(621)) void DimStyle::PutPrimaryLinearToleranceSubunitsLabel ( _bstr_t _arg1 );
__declspec(implementation_key(622)) _bstr_t DimStyle::GetPrimaryLinearToleranceSubunitsLabel ( );
__declspec(implementation_key(623)) void DimStyle::PutPrimaryLinearToleranceMaximumSubunits ( int _arg1 );
__declspec(implementation_key(624)) int DimStyle::GetPrimaryLinearToleranceMaximumSubunits ( );
__declspec(implementation_key(625)) void DimStyle::PutPrimaryLinearToleranceFractionSeparator ( _bstr_t _arg1 );
__declspec(implementation_key(626)) _bstr_t DimStyle::GetPrimaryLinearToleranceFractionSeparator ( );
__declspec(implementation_key(627)) void DimStyle::PutAngularToleranceUnits ( enum DimAngularUnitConstants _arg1 );
__declspec(implementation_key(628)) enum DimAngularUnitConstants DimStyle::GetAngularToleranceUnits ( );
__declspec(implementation_key(629)) void DimStyle::PutAngularToleranceRoundOffType ( enum DimRoundOffTypeConstants _arg1 );
__declspec(implementation_key(630)) enum DimRoundOffTypeConstants DimStyle::GetAngularToleranceRoundOffType ( );
__declspec(implementation_key(631)) void DimStyle::PutAngularToleranceDMSRoundOff ( enum DimDMSRoundOffTypeConstants _arg1 );
__declspec(implementation_key(632)) enum DimDMSRoundOffTypeConstants DimStyle::GetAngularToleranceDMSRoundOff ( );
__declspec(implementation_key(633)) void DimStyle::PutAngularToleranceDecimalRoundOff ( enum DimDecimalRoundOffTypeConstants _arg1 );
__declspec(implementation_key(634)) enum DimDecimalRoundOffTypeConstants DimStyle::GetAngularToleranceDecimalRoundOff ( );
__declspec(implementation_key(635)) void DimStyle::PutAngularToleranceFractionRoundOff ( enum DimFractionRoundOffTypeConstants _arg1 );
__declspec(implementation_key(636)) enum DimFractionRoundOffTypeConstants DimStyle::GetAngularToleranceFractionRoundOff ( );
__declspec(implementation_key(637)) void DimStyle::PutSecondaryLinearToleranceUnits ( enum DimLinearUnitConstants _arg1 );
__declspec(implementation_key(638)) enum DimLinearUnitConstants DimStyle::GetSecondaryLinearToleranceUnits ( );
__declspec(implementation_key(639)) void DimStyle::PutSecondaryLinearToleranceRoundOffType ( enum DimRoundOffTypeConstants _arg1 );
__declspec(implementation_key(640)) enum DimRoundOffTypeConstants DimStyle::GetSecondaryLinearToleranceRoundOffType ( );
__declspec(implementation_key(641)) void DimStyle::PutSecondaryLinearToleranceDecimalRoundOff ( enum DimDecimalRoundOffTypeConstants _arg1 );
__declspec(implementation_key(642)) enum DimDecimalRoundOffTypeConstants DimStyle::GetSecondaryLinearToleranceDecimalRoundOff ( );
__declspec(implementation_key(643)) void DimStyle::PutSecondaryLinearToleranceFractionRoundOff ( enum DimFractionRoundOffTypeConstants _arg1 );
__declspec(implementation_key(644)) enum DimFractionRoundOffTypeConstants DimStyle::GetSecondaryLinearToleranceFractionRoundOff ( );
__declspec(implementation_key(645)) void DimStyle::PutSecondaryLinearToleranceUnitLabel ( _bstr_t _arg1 );
__declspec(implementation_key(646)) _bstr_t DimStyle::GetSecondaryLinearToleranceUnitLabel ( );
__declspec(implementation_key(647)) void DimStyle::PutSecondaryLinearToleranceSubunitsLabel ( _bstr_t _arg1 );
__declspec(implementation_key(648)) _bstr_t DimStyle::GetSecondaryLinearToleranceSubunitsLabel ( );
__declspec(implementation_key(649)) void DimStyle::PutSecondaryLinearToleranceMaximumSubunits ( int _arg1 );
__declspec(implementation_key(650)) int DimStyle::GetSecondaryLinearToleranceMaximumSubunits ( );
__declspec(implementation_key(651)) void DimStyle::PutSecondaryLinearToleranceFractionSeparator ( _bstr_t _arg1 );
__declspec(implementation_key(652)) _bstr_t DimStyle::GetSecondaryLinearToleranceFractionSeparator ( );
__declspec(implementation_key(653)) void DimStyle::PutSecondaryLinearFractionSeparator ( _bstr_t _arg1 );
__declspec(implementation_key(654)) _bstr_t DimStyle::GetSecondaryLinearFractionSeparator ( );
__declspec(implementation_key(655)) void DimStyle::PutDualUnitPosition ( enum DimDualUnitPositionConstants _arg1 );
__declspec(implementation_key(656)) enum DimDualUnitPositionConstants DimStyle::GetDualUnitPosition ( );
__declspec(implementation_key(657)) void DimStyle::PutDualUnitJustification ( enum TextHorizontalAlignmentConstants _arg1 );
__declspec(implementation_key(658)) enum TextHorizontalAlignmentConstants DimStyle::GetDualUnitJustification ( );
__declspec(implementation_key(659)) void DimStyle::PutSmartDepthSlotThru ( _bstr_t _arg1 );
__declspec(implementation_key(660)) _bstr_t DimStyle::GetSmartDepthSlotThru ( );
__declspec(implementation_key(661)) void DimStyle::PutSmartDepthSlotFinite ( _bstr_t _arg1 );
__declspec(implementation_key(662)) _bstr_t DimStyle::GetSmartDepthSlotFinite ( );
__declspec(implementation_key(663)) void DimStyle::PutSlotCalloutSimple ( _bstr_t _arg1 );
__declspec(implementation_key(664)) _bstr_t DimStyle::GetSlotCalloutSimple ( );
__declspec(implementation_key(665)) void DimStyle::PutSlotCalloutCounterbore ( _bstr_t _arg1 );
__declspec(implementation_key(666)) _bstr_t DimStyle::GetSlotCalloutCounterbore ( );
__declspec(implementation_key(667)) void DimStyle::PutCoordinateTextOrientation ( enum DimTextOrientationConstants _arg1 );
__declspec(implementation_key(668)) enum DimTextOrientationConstants DimStyle::GetCoordinateTextOrientation ( );
__declspec(implementation_key(669)) void DimStyle::PutEnableAutoJogForCoordinate ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(670)) VARIANT_BOOL DimStyle::GetEnableAutoJogForCoordinate ( );
__declspec(implementation_key(671)) void DimStyle::PutAllowNegativeValueForCoordinate ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(672)) VARIANT_BOOL DimStyle::GetAllowNegativeValueForCoordinate ( );
__declspec(implementation_key(673)) void DimStyle::PutAllowOriginValueChangeForCoordinate ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(674)) VARIANT_BOOL DimStyle::GetAllowOriginValueChangeForCoordinate ( );
__declspec(implementation_key(675)) void DimStyle::PutShowOriginLineForCoordinate ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(676)) VARIANT_BOOL DimStyle::GetShowOriginLineForCoordinate ( );
__declspec(implementation_key(677)) void DimStyle::PutOverlineExtension ( double _arg1 );
__declspec(implementation_key(678)) double DimStyle::GetOverlineExtension ( );
__declspec(implementation_key(679)) void DimStyle::PutSuppressSymmetricDiameterSymbol ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(680)) VARIANT_BOOL DimStyle::GetSuppressSymmetricDiameterSymbol ( );
__declspec(implementation_key(681)) void DimStyle::PutUnderlineSymbolAndPrefix ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(682)) VARIANT_BOOL DimStyle::GetUnderlineSymbolAndPrefix ( );
__declspec(implementation_key(683)) void DimStyle::PutInitialStackPitch ( double _arg1 );
__declspec(implementation_key(684)) double DimStyle::GetInitialStackPitch ( );
__declspec(implementation_key(685)) void DimStyle::PutHoleCalloutCounterdrill ( _bstr_t _arg1 );
__declspec(implementation_key(686)) _bstr_t DimStyle::GetHoleCalloutCounterdrill ( );
__declspec(implementation_key(687)) void DimStyle::PutHoleCalloutCounterdrillThreaded ( _bstr_t _arg1 );
__declspec(implementation_key(688)) _bstr_t DimStyle::GetHoleCalloutCounterdrillThreaded ( );
__declspec(implementation_key(689)) void DimStyle::PutPrimaryStackFraction ( enum DimStackFractionTypeConstants _arg1 );
__declspec(implementation_key(690)) enum DimStackFractionTypeConstants DimStyle::GetPrimaryStackFraction ( );
__declspec(implementation_key(691)) void DimStyle::PutSecondaryStackFraction ( enum DimStackFractionTypeConstants _arg1 );
__declspec(implementation_key(692)) enum DimStackFractionTypeConstants DimStyle::GetSecondaryStackFraction ( );
__declspec(implementation_key(693)) void DimStyle::PutPrimaryStackFractionSize ( enum DimStackFractionSizeConstants _arg1 );
__declspec(implementation_key(694)) enum DimStackFractionSizeConstants DimStyle::GetPrimaryStackFractionSize ( );
__declspec(implementation_key(695)) void DimStyle::PutSecondaryStackFractionSize ( enum DimStackFractionSizeConstants _arg1 );
__declspec(implementation_key(696)) enum DimStackFractionSizeConstants DimStyle::GetSecondaryStackFractionSize ( );
__declspec(implementation_key(697)) void DimStyle::PutShowHideReferenceGeometry ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(698)) VARIANT_BOOL DimStyle::GetShowHideReferenceGeometry ( );
__declspec(implementation_key(699)) void DimStyle::PutEnableAngularJog ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(700)) VARIANT_BOOL DimStyle::GetEnableAngularJog ( );
__declspec(implementation_key(701)) void _IDimStyleAuto::PutName ( _bstr_t Name );
__declspec(implementation_key(702)) _bstr_t _IDimStyleAuto::GetName ( );
__declspec(implementation_key(703)) void _IDimStyleAuto::PutPrimaryUnits ( enum DimLinearUnitConstants val );
__declspec(implementation_key(704)) enum DimLinearUnitConstants _IDimStyleAuto::GetPrimaryUnits ( );
__declspec(implementation_key(705)) void _IDimStyleAuto::PutRoundOffType ( enum DimRoundOffTypeConstants val );
__declspec(implementation_key(706)) enum DimRoundOffTypeConstants _IDimStyleAuto::GetRoundOffType ( );
__declspec(implementation_key(707)) void _IDimStyleAuto::PutDelimiter ( enum DimDelimiterTypeConstants val );
__declspec(implementation_key(708)) enum DimDelimiterTypeConstants _IDimStyleAuto::GetDelimiter ( );
__declspec(implementation_key(709)) void _IDimStyleAuto::PutPrimaryDecimalRoundOff ( enum DimDecimalRoundOffTypeConstants val );
__declspec(implementation_key(710)) enum DimDecimalRoundOffTypeConstants _IDimStyleAuto::GetPrimaryDecimalRoundOff ( );
__declspec(implementation_key(711)) void _IDimStyleAuto::PutPrimaryFractionRoundOff ( enum DimFractionRoundOffTypeConstants val );
__declspec(implementation_key(712)) enum DimFractionRoundOffTypeConstants _IDimStyleAuto::GetPrimaryFractionRoundOff ( );
__declspec(implementation_key(713)) void _IDimStyleAuto::PutAngularUnits ( enum DimAngularUnitConstants val );
__declspec(implementation_key(714)) enum DimAngularUnitConstants _IDimStyleAuto::GetAngularUnits ( );
__declspec(implementation_key(715)) void _IDimStyleAuto::PutAngularDMSRoundOff ( enum DimDMSRoundOffTypeConstants val );
__declspec(implementation_key(716)) enum DimDMSRoundOffTypeConstants _IDimStyleAuto::GetAngularDMSRoundOff ( );
__declspec(implementation_key(717)) void _IDimStyleAuto::PutAngularDecimalRoundOff ( enum DimDecimalRoundOffTypeConstants val );
__declspec(implementation_key(718)) enum DimDecimalRoundOffTypeConstants _IDimStyleAuto::GetAngularDecimalRoundOff ( );
__declspec(implementation_key(719)) void _IDimStyleAuto::PutAngularFractionRoundOff ( enum DimFractionRoundOffTypeConstants val );
__declspec(implementation_key(720)) enum DimFractionRoundOffTypeConstants _IDimStyleAuto::GetAngularFractionRoundOff ( );
__declspec(implementation_key(721)) void _IDimStyleAuto::PutPrimaryLeadingZeros ( VARIANT_BOOL val );
__declspec(implementation_key(722)) VARIANT_BOOL _IDimStyleAuto::GetPrimaryLeadingZeros ( );
__declspec(implementation_key(723)) void _IDimStyleAuto::PutPrimaryTrailingZeros ( VARIANT_BOOL val );
__declspec(implementation_key(724)) VARIANT_BOOL _IDimStyleAuto::GetPrimaryTrailingZeros ( );
__declspec(implementation_key(725)) void _IDimStyleAuto::PutPrimaryUnitLabel ( _bstr_t val );
__declspec(implementation_key(726)) _bstr_t _IDimStyleAuto::GetPrimaryUnitLabel ( );
__declspec(implementation_key(727)) void _IDimStyleAuto::PutPrimarySubunitsLabel ( _bstr_t val );
__declspec(implementation_key(728)) _bstr_t _IDimStyleAuto::GetPrimarySubunitsLabel ( );
__declspec(implementation_key(729)) void _IDimStyleAuto::PutMaximumSubunits ( int val );
__declspec(implementation_key(730)) int _IDimStyleAuto::GetMaximumSubunits ( );
__declspec(implementation_key(731)) void _IDimStyleAuto::PutDualDisplay ( VARIANT_BOOL val );
__declspec(implementation_key(732)) VARIANT_BOOL _IDimStyleAuto::GetDualDisplay ( );
__declspec(implementation_key(733)) void _IDimStyleAuto::PutSecondaryUnits ( enum DimLinearUnitConstants val );
__declspec(implementation_key(734)) enum DimLinearUnitConstants _IDimStyleAuto::GetSecondaryUnits ( );
__declspec(implementation_key(735)) void _IDimStyleAuto::PutSecondaryUnitRoundOff ( enum DimRoundOffTypeConstants val );
__declspec(implementation_key(736)) enum DimRoundOffTypeConstants _IDimStyleAuto::GetSecondaryUnitRoundOff ( );
__declspec(implementation_key(737)) void _IDimStyleAuto::PutSecondaryDecimalRoundOff ( enum DimDecimalRoundOffTypeConstants val );
__declspec(implementation_key(738)) enum DimDecimalRoundOffTypeConstants _IDimStyleAuto::GetSecondaryDecimalRoundOff ( );
__declspec(implementation_key(739)) void _IDimStyleAuto::PutSecondaryFractionRoundOff ( enum DimFractionRoundOffTypeConstants val );
__declspec(implementation_key(740)) enum DimFractionRoundOffTypeConstants _IDimStyleAuto::GetSecondaryFractionRoundOff ( );
__declspec(implementation_key(741)) void _IDimStyleAuto::PutSecondaryLeadingZeros ( VARIANT_BOOL val );
__declspec(implementation_key(742)) VARIANT_BOOL _IDimStyleAuto::GetSecondaryLeadingZeros ( );
__declspec(implementation_key(743)) void _IDimStyleAuto::PutSecondaryTrailingZeros ( VARIANT_BOOL val );
__declspec(implementation_key(744)) VARIANT_BOOL _IDimStyleAuto::GetSecondaryTrailingZeros ( );
__declspec(implementation_key(745)) void _IDimStyleAuto::PutSecondaryUnitLabel ( _bstr_t val );
__declspec(implementation_key(746)) _bstr_t _IDimStyleAuto::GetSecondaryUnitLabel ( );
__declspec(implementation_key(747)) void _IDimStyleAuto::PutSecondarySubunitsLabel ( _bstr_t val );
__declspec(implementation_key(748)) _bstr_t _IDimStyleAuto::GetSecondarySubunitsLabel ( );
__declspec(implementation_key(749)) void _IDimStyleAuto::PutHeight ( double val );
__declspec(implementation_key(750)) double _IDimStyleAuto::GetHeight ( );
__declspec(implementation_key(751)) void _IDimStyleAuto::PutRatio ( double val );
__declspec(implementation_key(752)) double _IDimStyleAuto::GetRatio ( );
__declspec(implementation_key(753)) void _IDimStyleAuto::PutTextWeight ( double val );
__declspec(implementation_key(754)) double _IDimStyleAuto::GetTextWeight ( );
__declspec(implementation_key(755)) void _IDimStyleAuto::PutFont ( _bstr_t val );
__declspec(implementation_key(756)) _bstr_t _IDimStyleAuto::GetFont ( );
__declspec(implementation_key(757)) void _IDimStyleAuto::PutFontStyle ( enum DimTextFontStyleConstants val );
__declspec(implementation_key(758)) enum DimTextFontStyleConstants _IDimStyleAuto::GetFontStyle ( );
__declspec(implementation_key(759)) void _IDimStyleAuto::PutTextOrientation ( enum DimTextOrientationConstants val );
__declspec(implementation_key(760)) enum DimTextOrientationConstants _IDimStyleAuto::GetTextOrientation ( );
__declspec(implementation_key(761)) void _IDimStyleAuto::PutTextPosition ( enum DimTextPositionConstants val );
__declspec(implementation_key(762)) enum DimTextPositionConstants _IDimStyleAuto::GetTextPosition ( );
__declspec(implementation_key(763)) void _IDimStyleAuto::PutLimitTextArrangement ( enum DimLimitTextArrangmentConstants val );
__declspec(implementation_key(764)) enum DimLimitTextArrangmentConstants _IDimStyleAuto::GetLimitTextArrangement ( );
__declspec(implementation_key(765)) void _IDimStyleAuto::PutToleranceHeightRatio ( double val );
__declspec(implementation_key(766)) double _IDimStyleAuto::GetToleranceHeightRatio ( );
__declspec(implementation_key(767)) void _IDimStyleAuto::PutToleranceWeight ( double val );
__declspec(implementation_key(768)) double _IDimStyleAuto::GetToleranceWeight ( );
__declspec(implementation_key(769)) void _IDimStyleAuto::PutNTSSymbol ( enum DimNTSTypeConstants val );
__declspec(implementation_key(770)) enum DimNTSTypeConstants _IDimStyleAuto::GetNTSSymbol ( );
__declspec(implementation_key(771)) void _IDimStyleAuto::PutTerminatorType ( enum DimTermTypeConstants val );
__declspec(implementation_key(772)) enum DimTermTypeConstants _IDimStyleAuto::GetTerminatorType ( );
__declspec(implementation_key(773)) void _IDimStyleAuto::PutTerminatorDisplay ( enum DimTermDisplayTypeConstants val );
__declspec(implementation_key(774)) enum DimTermDisplayTypeConstants _IDimStyleAuto::GetTerminatorDisplay ( );
__declspec(implementation_key(775)) void _IDimStyleAuto::PutOriginTerminatorType ( enum DimTermTypeConstants val );
__declspec(implementation_key(776)) enum DimTermTypeConstants _IDimStyleAuto::GetOriginTerminatorType ( );
__declspec(implementation_key(777)) void _IDimStyleAuto::PutFreeSpaceTerminatorType ( enum DimTermTypeConstants val );
__declspec(implementation_key(778)) enum DimTermTypeConstants _IDimStyleAuto::GetFreeSpaceTerminatorType ( );
__declspec(implementation_key(779)) void _IDimStyleAuto::PutDatumTerminatorType ( enum DimDatumTermTypeConstants val );
__declspec(implementation_key(780)) enum DimDatumTermTypeConstants _IDimStyleAuto::GetDatumTerminatorType ( );
__declspec(implementation_key(781)) void _IDimStyleAuto::PutTerminatorSize ( double val );
__declspec(implementation_key(782)) double _IDimStyleAuto::GetTerminatorSize ( );
__declspec(implementation_key(783)) void _IDimStyleAuto::PutTerminatorInsideLimit ( double val );
__declspec(implementation_key(784)) double _IDimStyleAuto::GetTerminatorInsideLimit ( );
__declspec(implementation_key(785)) void _IDimStyleAuto::PutLineWidth ( double val );
__declspec(implementation_key(786)) double _IDimStyleAuto::GetLineWidth ( );
__declspec(implementation_key(787)) void _IDimStyleAuto::PutProjectionExtensionGap ( double val );
__declspec(implementation_key(788)) double _IDimStyleAuto::GetProjectionExtensionGap ( );
__declspec(implementation_key(789)) void _IDimStyleAuto::PutProjectionOffsetGap ( double val );
__declspec(implementation_key(790)) double _IDimStyleAuto::GetProjectionOffsetGap ( );
__declspec(implementation_key(791)) void _IDimStyleAuto::PutProjectionOffsetGapAlignment ( VARIANT_BOOL val );
__declspec(implementation_key(792)) VARIANT_BOOL _IDimStyleAuto::GetProjectionOffsetGapAlignment ( );
__declspec(implementation_key(793)) void _IDimStyleAuto::PutProjectionAngle ( double val );
__declspec(implementation_key(794)) double _IDimStyleAuto::GetProjectionAngle ( );
__declspec(implementation_key(795)) void _IDimStyleAuto::PutLineConnect ( VARIANT_BOOL val );
__declspec(implementation_key(796)) VARIANT_BOOL _IDimStyleAuto::GetLineConnect ( );
__declspec(implementation_key(797)) void _IDimStyleAuto::PutStackPitch ( double val );
__declspec(implementation_key(798)) double _IDimStyleAuto::GetStackPitch ( );
__declspec(implementation_key(799)) void _IDimStyleAuto::PutLeaderLineLength ( double val );
__declspec(implementation_key(800)) double _IDimStyleAuto::GetLeaderLineLength ( );
__declspec(implementation_key(801)) void _IDimStyleAuto::PutCoordinateAutoJog ( VARIANT_BOOL val );
__declspec(implementation_key(802)) VARIANT_BOOL _IDimStyleAuto::GetCoordinateAutoJog ( );
__declspec(implementation_key(803)) void _IDimStyleAuto::PutCoordinateStackPitch ( double val );
__declspec(implementation_key(804)) double _IDimStyleAuto::GetCoordinateStackPitch ( );
__declspec(implementation_key(805)) void _IDimStyleAuto::PutCommonOrigin ( enum DimCommonOriginTypeConstants val );
__declspec(implementation_key(806)) enum DimCommonOriginTypeConstants _IDimStyleAuto::GetCommonOrigin ( );
__declspec(implementation_key(807)) void _IDimStyleAuto::PutCoordinateTextPosition ( enum DimCoordTextPositionConstants val );
__declspec(implementation_key(808)) enum DimCoordTextPositionConstants _IDimStyleAuto::GetCoordinateTextPosition ( );
__declspec(implementation_key(809)) void _IDimStyleAuto::PutSymbolPosition ( enum DimSymbolPositionConstants val );
__declspec(implementation_key(810)) enum DimSymbolPositionConstants _IDimStyleAuto::GetSymbolPosition ( );
__declspec(implementation_key(811)) void _IDimStyleAuto::PutAutoSuppressDiameter ( VARIANT_BOOL val );
__declspec(implementation_key(812)) VARIANT_BOOL _IDimStyleAuto::GetAutoSuppressDiameter ( );
__declspec(implementation_key(813)) void _IDimStyleAuto::PutDimensionScaleMode ( enum DimScaleModeConstants val );
__declspec(implementation_key(814)) enum DimScaleModeConstants _IDimStyleAuto::GetDimensionScaleMode ( );
__declspec(implementation_key(815)) void _IDimStyleAuto::PutDimensionScale ( double val );
__declspec(implementation_key(816)) double _IDimStyleAuto::GetDimensionScale ( );
__declspec(implementation_key(817)) void _IDimStyleAuto::PutErrorColor ( long val );
__declspec(implementation_key(818)) long _IDimStyleAuto::GetErrorColor ( );
__declspec(implementation_key(819)) void _IDimStyleAuto::PutDrivingColor ( long val );
__declspec(implementation_key(820)) long _IDimStyleAuto::GetDrivingColor ( );
__declspec(implementation_key(821)) void _IDimStyleAuto::PutDrivenColor ( long val );
__declspec(implementation_key(822)) long _IDimStyleAuto::GetDrivenColor ( );
__declspec(implementation_key(823)) void _IDimStyleAuto::PutAutoCenterLine ( VARIANT_BOOL val );
__declspec(implementation_key(824)) VARIANT_BOOL _IDimStyleAuto::GetAutoCenterLine ( );
__declspec(implementation_key(825)) void _IDimStyleAuto::PutAutoCenterProjectionLine ( VARIANT_BOOL val );
__declspec(implementation_key(826)) VARIANT_BOOL _IDimStyleAuto::GetAutoCenterProjectionLine ( );
__declspec(implementation_key(827)) void _IDimStyleAuto::PutProjectionLineDisplay ( enum DimProjDisplayTypeConstants val );
__declspec(implementation_key(828)) enum DimProjDisplayTypeConstants _IDimStyleAuto::GetProjectionLineDisplay ( );
__declspec(implementation_key(829)) void _IDimStyleAuto::PutProjectionLineDisplayForIntersectionPoint ( enum DimProjDisplayTypeConstants val );
__declspec(implementation_key(830)) enum DimProjDisplayTypeConstants _IDimStyleAuto::GetProjectionLineDisplayForIntersectionPoint ( );
__declspec(implementation_key(831)) void _IDimStyleAuto::PutTextClearanceGap ( double val );
__declspec(implementation_key(832)) double _IDimStyleAuto::GetTextClearanceGap ( );
__declspec(implementation_key(833)) void _IDimStyleAuto::PutDualModeVerticalGap ( double val );
__declspec(implementation_key(834)) double _IDimStyleAuto::GetDualModeVerticalGap ( );
__declspec(implementation_key(835)) void _IDimStyleAuto::PutCharacterPitch ( double val );
__declspec(implementation_key(836)) double _IDimStyleAuto::GetCharacterPitch ( );
__declspec(implementation_key(837)) void _IDimStyleAuto::PutLineSpacing ( double val );
__declspec(implementation_key(838)) double _IDimStyleAuto::GetLineSpacing ( );
__declspec(implementation_key(839)) void _IDimStyleAuto::PutAboveGap ( double val );
__declspec(implementation_key(840)) double _IDimStyleAuto::GetAboveGap ( );
__declspec(implementation_key(841)) void _IDimStyleAuto::PutHorizontalToleranceGap ( double val );
__declspec(implementation_key(842)) double _IDimStyleAuto::GetHorizontalToleranceGap ( );
__declspec(implementation_key(843)) void _IDimStyleAuto::PutVerticalToleranceGap ( double val );
__declspec(implementation_key(844)) double _IDimStyleAuto::GetVerticalToleranceGap ( );
__declspec(implementation_key(845)) void _IDimStyleAuto::PutVerticalLimitsGap ( double val );
__declspec(implementation_key(846)) double _IDimStyleAuto::GetVerticalLimitsGap ( );
__declspec(implementation_key(847)) void _IDimStyleAuto::PutHorizontalBoxGap ( double val );
__declspec(implementation_key(848)) double _IDimStyleAuto::GetHorizontalBoxGap ( );
__declspec(implementation_key(849)) void _IDimStyleAuto::PutVerticalBoxGap ( double val );
__declspec(implementation_key(850)) double _IDimStyleAuto::GetVerticalBoxGap ( );
__declspec(implementation_key(851)) void _IDimStyleAuto::PutPrefixSuffixGap ( double val );
__declspec(implementation_key(852)) double _IDimStyleAuto::GetPrefixSuffixGap ( );
__declspec(implementation_key(853)) void _IDimStyleAuto::PutSymbolGap ( double val );
__declspec(implementation_key(854)) double _IDimStyleAuto::GetSymbolGap ( );
__declspec(implementation_key(855)) void _IDimStyleAuto::PutMaximumViewAngle ( double val );
__declspec(implementation_key(856)) double _IDimStyleAuto::GetMaximumViewAngle ( );
__declspec(implementation_key(857)) void _IDimStyleAuto::PutProjectionToleranceZonePosition ( enum DimProjTolZonePositionConstants val );
__declspec(implementation_key(858)) enum DimProjTolZonePositionConstants _IDimStyleAuto::GetProjectionToleranceZonePosition ( );
__declspec(implementation_key(859)) void _IDimStyleAuto::PutDatumFrameDashes ( VARIANT_BOOL val );
__declspec(implementation_key(860)) VARIANT_BOOL _IDimStyleAuto::GetDatumFrameDashes ( );
__declspec(implementation_key(861)) void _IDimStyleAuto::PutViewTextRatio ( double val );
__declspec(implementation_key(862)) double _IDimStyleAuto::GetViewTextRatio ( );
__declspec(implementation_key(863)) void _IDimStyleAuto::PutViewTerminatorRatio ( double val );
__declspec(implementation_key(864)) double _IDimStyleAuto::GetViewTerminatorRatio ( );
__declspec(implementation_key(865)) void _IDimStyleAuto::PutViewLineWidth ( double val );
__declspec(implementation_key(866)) double _IDimStyleAuto::GetViewLineWidth ( );
__declspec(implementation_key(867)) void _IDimStyleAuto::PutViewLineType ( _bstr_t val );
__declspec(implementation_key(868)) _bstr_t _IDimStyleAuto::GetViewLineType ( );
__declspec(implementation_key(869)) void _IDimStyleAuto::PutViewCuttingPlaneLineDisplay ( enum DimViewCuttingPlaneDisplayTypeConstants val );
__declspec(implementation_key(870)) enum DimViewCuttingPlaneDisplayTypeConstants _IDimStyleAuto::GetViewCuttingPlaneLineDisplay ( );
__declspec(implementation_key(871)) void _IDimStyleAuto::PutViewPlaneLineDisplay ( enum DimViewPlaneDisplayTypeConstants val );
__declspec(implementation_key(872)) enum DimViewPlaneDisplayTypeConstants _IDimStyleAuto::GetViewPlaneLineDisplay ( );
__declspec(implementation_key(873)) void _IDimStyleAuto::PutOffsetLeaderType ( enum DimOffsetLeaderTypeConstants val );
__declspec(implementation_key(874)) enum DimOffsetLeaderTypeConstants _IDimStyleAuto::GetOffsetLeaderType ( );
__declspec(implementation_key(875)) void _IDimStyleAuto::PutSecondaryToleranceEquivalent ( VARIANT_BOOL val );
__declspec(implementation_key(876)) VARIANT_BOOL _IDimStyleAuto::GetSecondaryToleranceEquivalent ( );
__declspec(implementation_key(877)) void _IDimStyleAuto::PutCenterLineType ( _bstr_t val );
__declspec(implementation_key(878)) _bstr_t _IDimStyleAuto::GetCenterLineType ( );
__declspec(implementation_key(879)) void _IDimStyleAuto::PutCenterMarkSize ( double val );
__declspec(implementation_key(880)) double _IDimStyleAuto::GetCenterMarkSize ( );
__declspec(implementation_key(881)) void _IDimStyleAuto::PutAutoPhase ( VARIANT_BOOL val );
__declspec(implementation_key(882)) VARIANT_BOOL _IDimStyleAuto::GetAutoPhase ( );
__declspec(implementation_key(883)) HRESULT _IDimStyleAuto::UseActiveStyle ( );
__declspec(implementation_key(884)) void _IDimStyleAuto::PutRoundUp ( enum DimRoundUpTypeConstants val );
__declspec(implementation_key(885)) enum DimRoundUpTypeConstants _IDimStyleAuto::GetRoundUp ( );
__declspec(implementation_key(886)) void _IDimStyleAuto::PutSecondaryLinearRoundOffType ( enum DimRoundOffTypeConstants val );
__declspec(implementation_key(887)) enum DimRoundOffTypeConstants _IDimStyleAuto::GetSecondaryLinearRoundOffType ( );
__declspec(implementation_key(888)) void _IDimStyleAuto::PutAngularRoundOffType ( enum DimRoundOffTypeConstants val );
__declspec(implementation_key(889)) enum DimRoundOffTypeConstants _IDimStyleAuto::GetAngularRoundOffType ( );
__declspec(implementation_key(890)) void _IDimStyleAuto::PutCenterMarkExtension ( double val );
__declspec(implementation_key(891)) double _IDimStyleAuto::GetCenterMarkExtension ( );
__declspec(implementation_key(892)) void _IDimStyleAuto::PutChamferUse45DegreeCharacter ( VARIANT_BOOL val );
__declspec(implementation_key(893)) VARIANT_BOOL _IDimStyleAuto::GetChamferUse45DegreeCharacter ( );
__declspec(implementation_key(894)) void _IDimStyleAuto::PutSmartDepthHoleThru ( _bstr_t val );
__declspec(implementation_key(895)) _bstr_t _IDimStyleAuto::GetSmartDepthHoleThru ( );
__declspec(implementation_key(896)) void _IDimStyleAuto::PutSmartDepthHoleFinite ( _bstr_t val );
__declspec(implementation_key(897)) _bstr_t _IDimStyleAuto::GetSmartDepthHoleFinite ( );
__declspec(implementation_key(898)) void _IDimStyleAuto::PutSmartDepthThreadThru ( _bstr_t val );
__declspec(implementation_key(899)) _bstr_t _IDimStyleAuto::GetSmartDepthThreadThru ( );
__declspec(implementation_key(900)) void _IDimStyleAuto::PutSmartDepthThreadFinite ( _bstr_t val );
__declspec(implementation_key(901)) _bstr_t _IDimStyleAuto::GetSmartDepthThreadFinite ( );
__declspec(implementation_key(902)) void _IDimStyleAuto::PutLowerCaseMultiplicationSymbol ( VARIANT_BOOL val );
__declspec(implementation_key(903)) VARIANT_BOOL _IDimStyleAuto::GetLowerCaseMultiplicationSymbol ( );
__declspec(implementation_key(904)) void _IDimStyleAuto::PutHoleCalloutSimple ( _bstr_t val );
__declspec(implementation_key(905)) _bstr_t _IDimStyleAuto::GetHoleCalloutSimple ( );
__declspec(implementation_key(906)) void _IDimStyleAuto::PutHoleCalloutCounterbore ( _bstr_t val );
__declspec(implementation_key(907)) _bstr_t _IDimStyleAuto::GetHoleCalloutCounterbore ( );
__declspec(implementation_key(908)) void _IDimStyleAuto::PutHoleCalloutCountersink ( _bstr_t val );
__declspec(implementation_key(909)) _bstr_t _IDimStyleAuto::GetHoleCalloutCountersink ( );
__declspec(implementation_key(910)) void _IDimStyleAuto::PutHoleCalloutSimpleThreaded ( _bstr_t val );
__declspec(implementation_key(911)) _bstr_t _IDimStyleAuto::GetHoleCalloutSimpleThreaded ( );
__declspec(implementation_key(912)) void _IDimStyleAuto::PutHoleCalloutCounterboreThreaded ( _bstr_t val );
__declspec(implementation_key(913)) _bstr_t _IDimStyleAuto::GetHoleCalloutCounterboreThreaded ( );
__declspec(implementation_key(914)) void _IDimStyleAuto::PutHoleCalloutCountersinkThreaded ( _bstr_t val );
__declspec(implementation_key(915)) _bstr_t _IDimStyleAuto::GetHoleCalloutCountersinkThreaded ( );
__declspec(implementation_key(916)) void _IDimStyleAuto::PutApplyBreakLineGap ( VARIANT_BOOL val );
__declspec(implementation_key(917)) VARIANT_BOOL _IDimStyleAuto::GetApplyBreakLineGap ( );
__declspec(implementation_key(918)) void _IDimStyleAuto::PutTextAutoFillBackground ( VARIANT_BOOL val );
__declspec(implementation_key(919)) VARIANT_BOOL _IDimStyleAuto::GetTextAutoFillBackground ( );
__declspec(implementation_key(920)) void _IDimStyleAuto::PutPulledOutTextOrientation ( enum DimTextOrientationConstants val );
__declspec(implementation_key(921)) enum DimTextOrientationConstants _IDimStyleAuto::GetPulledOutTextOrientation ( );
__declspec(implementation_key(922)) void _IDimStyleAuto::PutPulledOutTextPosition ( enum DimTextPositionConstants val );
__declspec(implementation_key(923)) enum DimTextPositionConstants _IDimStyleAuto::GetPulledOutTextPosition ( );
__declspec(implementation_key(924)) void _IDimStyleAuto::PutOverridePulledOutText ( VARIANT_BOOL val );
__declspec(implementation_key(925)) VARIANT_BOOL _IDimStyleAuto::GetOverridePulledOutText ( );
__declspec(implementation_key(926)) void _IDimStyleAuto::PutViewLineArrowOffset ( double val );
__declspec(implementation_key(927)) double _IDimStyleAuto::GetViewLineArrowOffset ( );
__declspec(implementation_key(928)) void _IDimStyleAuto::PutViewThickLineLength ( double val );
__declspec(implementation_key(929)) double _IDimStyleAuto::GetViewThickLineLength ( );
__declspec(implementation_key(930)) void _IDimStyleAuto::PutOrigTerminatorSize ( double val );
__declspec(implementation_key(931)) double _IDimStyleAuto::GetOrigTerminatorSize ( );
__declspec(implementation_key(932)) void _IDimStyleAuto::PutConnectorLineType ( _bstr_t val );
__declspec(implementation_key(933)) _bstr_t _IDimStyleAuto::GetConnectorLineType ( );
__declspec(implementation_key(934)) void _IDimStyleAuto::PutConnectorColor ( long val );
__declspec(implementation_key(935)) long _IDimStyleAuto::GetConnectorColor ( );
__declspec(implementation_key(936)) void _IDimStyleAuto::PutConnectorWidth ( double val );
__declspec(implementation_key(937)) double _IDimStyleAuto::GetConnectorWidth ( );
__declspec(implementation_key(938)) void _IDimStyleAuto::PutFractionSeparator ( _bstr_t val );
__declspec(implementation_key(939)) _bstr_t _IDimStyleAuto::GetFractionSeparator ( );
__declspec(implementation_key(940)) void _IDimStyleAuto::PutHeightPMI ( double val );
__declspec(implementation_key(941)) double _IDimStyleAuto::GetHeightPMI ( );
__declspec(implementation_key(942)) void _IDimStyleAuto::PutProjectionBreakGap ( double val );
__declspec(implementation_key(943)) double _IDimStyleAuto::GetProjectionBreakGap ( );
__declspec(implementation_key(944)) void _IDimStyleAuto::PutSecondaryDelimiter ( enum DimDelimiterTypeConstants val );
__declspec(implementation_key(945)) enum DimDelimiterTypeConstants _IDimStyleAuto::GetSecondaryDelimiter ( );
__declspec(implementation_key(946)) void _IDimStyleAuto::PutMatchPrimaryDelimiter ( VARIANT_BOOL val );
__declspec(implementation_key(947)) VARIANT_BOOL _IDimStyleAuto::GetMatchPrimaryDelimiter ( );
__declspec(implementation_key(948)) void _IDimStyleAuto::PutInhibitZeroToleranceDisplay ( VARIANT_BOOL val );
__declspec(implementation_key(949)) VARIANT_BOOL _IDimStyleAuto::GetInhibitZeroToleranceDisplay ( );
__declspec(implementation_key(950)) void _IDimStyleAuto::PutAllAroundMultiplier ( double val );
__declspec(implementation_key(951)) double _IDimStyleAuto::GetAllAroundMultiplier ( );
__declspec(implementation_key(952)) void _IDimStyleAuto::PutOverridePulledOutText2 ( VARIANT_BOOL val );
__declspec(implementation_key(953)) VARIANT_BOOL _IDimStyleAuto::GetOverridePulledOutText2 ( );
__declspec(implementation_key(954)) void _IDimStyleAuto::PutPulledOutText2Orientation ( enum DimTextOrientationConstants val );
__declspec(implementation_key(955)) enum DimTextOrientationConstants _IDimStyleAuto::GetPulledOutText2Orientation ( );
__declspec(implementation_key(956)) void _IDimStyleAuto::PutPulledOutText2Position ( enum DimTextPositionConstants val );
__declspec(implementation_key(957)) enum DimTextPositionConstants _IDimStyleAuto::GetPulledOutText2Position ( );
__declspec(implementation_key(958)) void _IDimStyleAuto::PutDisplayDegreeSymbolOnNumericTolerance ( VARIANT_BOOL val );
__declspec(implementation_key(959)) VARIANT_BOOL _IDimStyleAuto::GetDisplayDegreeSymbolOnNumericTolerance ( );
__declspec(implementation_key(960)) void _IDimStyleAuto::PutZeroInchesForFTIN ( VARIANT_BOOL val );
__declspec(implementation_key(961)) VARIANT_BOOL _IDimStyleAuto::GetZeroInchesForFTIN ( );
__declspec(implementation_key(962)) void _IDimStyleAuto::PutSymbolFont ( enum DimStyleSymbolFontConstants val );
__declspec(implementation_key(963)) enum DimStyleSymbolFontConstants _IDimStyleAuto::GetSymbolFont ( );
__declspec(implementation_key(964)) void _IDimStyleAuto::PutDatumTerminatorGap ( double val );
__declspec(implementation_key(965)) double _IDimStyleAuto::GetDatumTerminatorGap ( );
__declspec(implementation_key(966)) void _IDimStyleAuto::PutDatumFrameShape ( enum DimStyleDatumFrameShapeConstants val );
__declspec(implementation_key(967)) enum DimStyleDatumFrameShapeConstants _IDimStyleAuto::GetDatumFrameShape ( );
__declspec(implementation_key(968)) void _IDimStyleAuto::PutDisplayCoordinateOriginText ( VARIANT_BOOL val );
__declspec(implementation_key(969)) VARIANT_BOOL _IDimStyleAuto::GetDisplayCoordinateOriginText ( );
__declspec(implementation_key(970)) void _IDimStyleAuto::PutPlacePrefixInsideBasicDimensionBox ( VARIANT_BOOL val );
__declspec(implementation_key(971)) VARIANT_BOOL _IDimStyleAuto::GetPlacePrefixInsideBasicDimensionBox ( );
__declspec(implementation_key(972)) void _IDimStyleAuto::PutSecondaryUnitSeparator ( enum DimStyleSecondaryUnitSeparatorConstants val );
__declspec(implementation_key(973)) enum DimStyleSecondaryUnitSeparatorConstants _IDimStyleAuto::GetSecondaryUnitSeparator ( );
__declspec(implementation_key(974)) void _IDimStyleAuto::PutWeldSymbolLineWidth ( double val );
__declspec(implementation_key(975)) double _IDimStyleAuto::GetWeldSymbolLineWidth ( );
__declspec(implementation_key(976)) void _IDimStyleAuto::PutThreeSidedSymbolOffsetGap ( double val );
__declspec(implementation_key(977)) double _IDimStyleAuto::GetThreeSidedSymbolOffsetGap ( );
__declspec(implementation_key(978)) void _IDimStyleAuto::PutHoleShaftToleranceSeparatorType ( enum DimHoleShaftSeparatorTypeConstants val );
__declspec(implementation_key(979)) enum DimHoleShaftSeparatorTypeConstants _IDimStyleAuto::GetHoleShaftToleranceSeparatorType ( );
__declspec(implementation_key(980)) void _IDimStyleAuto::PutToleranceTextVerticalAlignment ( enum TextVerticalAlignmentConstants val );
__declspec(implementation_key(981)) enum TextVerticalAlignmentConstants _IDimStyleAuto::GetToleranceTextVerticalAlignment ( );
__declspec(implementation_key(982)) void _IDimStyleAuto::PutToleranceTextHorizontalAlignment ( enum DimToleranceTextHorizontalAlignOptionsConstants val );
__declspec(implementation_key(983)) enum DimToleranceTextHorizontalAlignOptionsConstants _IDimStyleAuto::GetToleranceTextHorizontalAlignment ( );
__declspec(implementation_key(984)) void _IDimStyleAuto::PutUseTextSizeForCombinedTolValueDisplay ( VARIANT_BOOL val );
__declspec(implementation_key(985)) VARIANT_BOOL _IDimStyleAuto::GetUseTextSizeForCombinedTolValueDisplay ( );
__declspec(implementation_key(986)) void _IDimStyleAuto::PutDatumFrameLineTermThickness ( double pdDatumFrameLineTermThickness );
__declspec(implementation_key(987)) double _IDimStyleAuto::GetDatumFrameLineTermThickness ( );
__declspec(implementation_key(988)) void _IDimStyleAuto::PutDatumTargetTerminatorType ( enum DimDatumTargetTermTypeConstants val );
__declspec(implementation_key(989)) enum DimDatumTargetTermTypeConstants _IDimStyleAuto::GetDatumTargetTerminatorType ( );
__declspec(implementation_key(990)) void _IDimStyleAuto::PutPinSymbolTerminatorType ( enum DimPinSymbolTermTypeConstants val );
__declspec(implementation_key(991)) enum DimPinSymbolTermTypeConstants _IDimStyleAuto::GetPinSymbolTerminatorType ( );
__declspec(implementation_key(992)) void _IDimStyleAuto::PutPrimaryLinearToleranceUnits ( enum DimLinearUnitConstants val );
__declspec(implementation_key(993)) enum DimLinearUnitConstants _IDimStyleAuto::GetPrimaryLinearToleranceUnits ( );
__declspec(implementation_key(994)) void _IDimStyleAuto::PutPrimaryLinearToleranceRoundOffType ( enum DimRoundOffTypeConstants val );
__declspec(implementation_key(995)) enum DimRoundOffTypeConstants _IDimStyleAuto::GetPrimaryLinearToleranceRoundOffType ( );
__declspec(implementation_key(996)) void _IDimStyleAuto::PutPrimaryLinearToleranceDecimalRoundOff ( enum DimDecimalRoundOffTypeConstants val );
__declspec(implementation_key(997)) enum DimDecimalRoundOffTypeConstants _IDimStyleAuto::GetPrimaryLinearToleranceDecimalRoundOff ( );
__declspec(implementation_key(998)) void _IDimStyleAuto::PutPrimaryLinearToleranceFractionRoundOff ( enum DimFractionRoundOffTypeConstants val );
__declspec(implementation_key(999)) enum DimFractionRoundOffTypeConstants _IDimStyleAuto::GetPrimaryLinearToleranceFractionRoundOff ( );
__declspec(implementation_key(1000)) void _IDimStyleAuto::PutPrimaryLinearToleranceUnitLabel ( _bstr_t val );
__declspec(implementation_key(1001)) _bstr_t _IDimStyleAuto::GetPrimaryLinearToleranceUnitLabel ( );
__declspec(implementation_key(1002)) void _IDimStyleAuto::PutPrimaryLinearToleranceSubunitsLabel ( _bstr_t val );
__declspec(implementation_key(1003)) _bstr_t _IDimStyleAuto::GetPrimaryLinearToleranceSubunitsLabel ( );
__declspec(implementation_key(1004)) void _IDimStyleAuto::PutPrimaryLinearToleranceMaximumSubunits ( int val );
__declspec(implementation_key(1005)) int _IDimStyleAuto::GetPrimaryLinearToleranceMaximumSubunits ( );
__declspec(implementation_key(1006)) void _IDimStyleAuto::PutPrimaryLinearToleranceFractionSeparator ( _bstr_t val );
__declspec(implementation_key(1007)) _bstr_t _IDimStyleAuto::GetPrimaryLinearToleranceFractionSeparator ( );
__declspec(implementation_key(1008)) void _IDimStyleAuto::PutAngularToleranceUnits ( enum DimAngularUnitConstants val );
__declspec(implementation_key(1009)) enum DimAngularUnitConstants _IDimStyleAuto::GetAngularToleranceUnits ( );
__declspec(implementation_key(1010)) void _IDimStyleAuto::PutAngularToleranceRoundOffType ( enum DimRoundOffTypeConstants val );
__declspec(implementation_key(1011)) enum DimRoundOffTypeConstants _IDimStyleAuto::GetAngularToleranceRoundOffType ( );
__declspec(implementation_key(1012)) void _IDimStyleAuto::PutAngularToleranceDMSRoundOff ( enum DimDMSRoundOffTypeConstants val );
__declspec(implementation_key(1013)) enum DimDMSRoundOffTypeConstants _IDimStyleAuto::GetAngularToleranceDMSRoundOff ( );
__declspec(implementation_key(1014)) void _IDimStyleAuto::PutAngularToleranceDecimalRoundOff ( enum DimDecimalRoundOffTypeConstants val );
__declspec(implementation_key(1015)) enum DimDecimalRoundOffTypeConstants _IDimStyleAuto::GetAngularToleranceDecimalRoundOff ( );
__declspec(implementation_key(1016)) void _IDimStyleAuto::PutAngularToleranceFractionRoundOff ( enum DimFractionRoundOffTypeConstants val );
__declspec(implementation_key(1017)) enum DimFractionRoundOffTypeConstants _IDimStyleAuto::GetAngularToleranceFractionRoundOff ( );
__declspec(implementation_key(1018)) void _IDimStyleAuto::PutSecondaryLinearToleranceUnits ( enum DimLinearUnitConstants val );
__declspec(implementation_key(1019)) enum DimLinearUnitConstants _IDimStyleAuto::GetSecondaryLinearToleranceUnits ( );
__declspec(implementation_key(1020)) void _IDimStyleAuto::PutSecondaryLinearToleranceRoundOffType ( enum DimRoundOffTypeConstants val );
__declspec(implementation_key(1021)) enum DimRoundOffTypeConstants _IDimStyleAuto::GetSecondaryLinearToleranceRoundOffType ( );
__declspec(implementation_key(1022)) void _IDimStyleAuto::PutSecondaryLinearToleranceDecimalRoundOff ( enum DimDecimalRoundOffTypeConstants val );
__declspec(implementation_key(1023)) enum DimDecimalRoundOffTypeConstants _IDimStyleAuto::GetSecondaryLinearToleranceDecimalRoundOff ( );
__declspec(implementation_key(1024)) void _IDimStyleAuto::PutSecondaryLinearToleranceFractionRoundOff ( enum DimFractionRoundOffTypeConstants val );
__declspec(implementation_key(1025)) enum DimFractionRoundOffTypeConstants _IDimStyleAuto::GetSecondaryLinearToleranceFractionRoundOff ( );
__declspec(implementation_key(1026)) void _IDimStyleAuto::PutSecondaryLinearToleranceUnitLabel ( _bstr_t val );
__declspec(implementation_key(1027)) _bstr_t _IDimStyleAuto::GetSecondaryLinearToleranceUnitLabel ( );
__declspec(implementation_key(1028)) void _IDimStyleAuto::PutSecondaryLinearToleranceSubunitsLabel ( _bstr_t val );
__declspec(implementation_key(1029)) _bstr_t _IDimStyleAuto::GetSecondaryLinearToleranceSubunitsLabel ( );
__declspec(implementation_key(1030)) void _IDimStyleAuto::PutSecondaryLinearToleranceMaximumSubunits ( int val );
__declspec(implementation_key(1031)) int _IDimStyleAuto::GetSecondaryLinearToleranceMaximumSubunits ( );
__declspec(implementation_key(1032)) void _IDimStyleAuto::PutSecondaryLinearToleranceFractionSeparator ( _bstr_t val );
__declspec(implementation_key(1033)) _bstr_t _IDimStyleAuto::GetSecondaryLinearToleranceFractionSeparator ( );
__declspec(implementation_key(1034)) void _IDimStyleAuto::PutSecondaryLinearFractionSeparator ( _bstr_t val );
__declspec(implementation_key(1035)) _bstr_t _IDimStyleAuto::GetSecondaryLinearFractionSeparator ( );
__declspec(implementation_key(1036)) void _IDimStyleAuto::PutDualUnitPosition ( enum DimDualUnitPositionConstants val );
__declspec(implementation_key(1037)) enum DimDualUnitPositionConstants _IDimStyleAuto::GetDualUnitPosition ( );
__declspec(implementation_key(1038)) void _IDimStyleAuto::PutDualUnitJustification ( enum TextHorizontalAlignmentConstants val );
__declspec(implementation_key(1039)) enum TextHorizontalAlignmentConstants _IDimStyleAuto::GetDualUnitJustification ( );
__declspec(implementation_key(1040)) void _IDimStyleAuto::PutSmartDepthSlotThru ( _bstr_t val );
__declspec(implementation_key(1041)) _bstr_t _IDimStyleAuto::GetSmartDepthSlotThru ( );
__declspec(implementation_key(1042)) void _IDimStyleAuto::PutSmartDepthSlotFinite ( _bstr_t val );
__declspec(implementation_key(1043)) _bstr_t _IDimStyleAuto::GetSmartDepthSlotFinite ( );
__declspec(implementation_key(1044)) void _IDimStyleAuto::PutSlotCalloutSimple ( _bstr_t val );
__declspec(implementation_key(1045)) _bstr_t _IDimStyleAuto::GetSlotCalloutSimple ( );
__declspec(implementation_key(1046)) void _IDimStyleAuto::PutSlotCalloutCounterbore ( _bstr_t val );
__declspec(implementation_key(1047)) _bstr_t _IDimStyleAuto::GetSlotCalloutCounterbore ( );
__declspec(implementation_key(1048)) void _IDimStyleAuto::PutCoordinateTextOrientation ( enum DimTextOrientationConstants val );
__declspec(implementation_key(1049)) enum DimTextOrientationConstants _IDimStyleAuto::GetCoordinateTextOrientation ( );
__declspec(implementation_key(1050)) void _IDimStyleAuto::PutEnableAutoJogForCoordinate ( VARIANT_BOOL val );
__declspec(implementation_key(1051)) VARIANT_BOOL _IDimStyleAuto::GetEnableAutoJogForCoordinate ( );
__declspec(implementation_key(1052)) void _IDimStyleAuto::PutAllowNegativeValueForCoordinate ( VARIANT_BOOL val );
__declspec(implementation_key(1053)) VARIANT_BOOL _IDimStyleAuto::GetAllowNegativeValueForCoordinate ( );
__declspec(implementation_key(1054)) void _IDimStyleAuto::PutAllowOriginValueChangeForCoordinate ( VARIANT_BOOL val );
__declspec(implementation_key(1055)) VARIANT_BOOL _IDimStyleAuto::GetAllowOriginValueChangeForCoordinate ( );
__declspec(implementation_key(1056)) void _IDimStyleAuto::PutShowOriginLineForCoordinate ( VARIANT_BOOL val );
__declspec(implementation_key(1057)) VARIANT_BOOL _IDimStyleAuto::GetShowOriginLineForCoordinate ( );
__declspec(implementation_key(1058)) void _IDimStyleAuto::PutOverlineExtension ( double val );
__declspec(implementation_key(1059)) double _IDimStyleAuto::GetOverlineExtension ( );
__declspec(implementation_key(1060)) void _IDimStyleAuto::PutSuppressSymmetricDiameterSymbol ( VARIANT_BOOL val );
__declspec(implementation_key(1061)) VARIANT_BOOL _IDimStyleAuto::GetSuppressSymmetricDiameterSymbol ( );
__declspec(implementation_key(1062)) void _IDimStyleAuto::PutUnderlineSymbolAndPrefix ( VARIANT_BOOL val );
__declspec(implementation_key(1063)) VARIANT_BOOL _IDimStyleAuto::GetUnderlineSymbolAndPrefix ( );
__declspec(implementation_key(1064)) void _IDimStyleAuto::PutInitialStackPitch ( double val );
__declspec(implementation_key(1065)) double _IDimStyleAuto::GetInitialStackPitch ( );
__declspec(implementation_key(1066)) void _IDimStyleAuto::PutHoleCalloutCounterdrill ( _bstr_t val );
__declspec(implementation_key(1067)) _bstr_t _IDimStyleAuto::GetHoleCalloutCounterdrill ( );
__declspec(implementation_key(1068)) void _IDimStyleAuto::PutHoleCalloutCounterdrillThreaded ( _bstr_t val );
__declspec(implementation_key(1069)) _bstr_t _IDimStyleAuto::GetHoleCalloutCounterdrillThreaded ( );
__declspec(implementation_key(1070)) void _IDimStyleAuto::PutPrimaryStackFraction ( enum DimStackFractionTypeConstants val );
__declspec(implementation_key(1071)) enum DimStackFractionTypeConstants _IDimStyleAuto::GetPrimaryStackFraction ( );
__declspec(implementation_key(1072)) void _IDimStyleAuto::PutSecondaryStackFraction ( enum DimStackFractionTypeConstants val );
__declspec(implementation_key(1073)) enum DimStackFractionTypeConstants _IDimStyleAuto::GetSecondaryStackFraction ( );
__declspec(implementation_key(1074)) void _IDimStyleAuto::PutPrimaryStackFractionSize ( enum DimStackFractionSizeConstants val );
__declspec(implementation_key(1075)) enum DimStackFractionSizeConstants _IDimStyleAuto::GetPrimaryStackFractionSize ( );
__declspec(implementation_key(1076)) void _IDimStyleAuto::PutSecondaryStackFractionSize ( enum DimStackFractionSizeConstants val );
__declspec(implementation_key(1077)) enum DimStackFractionSizeConstants _IDimStyleAuto::GetSecondaryStackFractionSize ( );
__declspec(implementation_key(1078)) void _IDimStyleAuto::PutShowHideReferenceGeometry ( VARIANT_BOOL val );
__declspec(implementation_key(1079)) VARIANT_BOOL _IDimStyleAuto::GetShowHideReferenceGeometry ( );
__declspec(implementation_key(1080)) void _IDimStyleAuto::PutEnableAngularJog ( VARIANT_BOOL val );
__declspec(implementation_key(1081)) VARIANT_BOOL _IDimStyleAuto::GetEnableAngularJog ( );
__declspec(implementation_key(1082)) long DisplayData::GetLineCount ( );
__declspec(implementation_key(1083)) HRESULT DisplayData::GetLineAtIndex ( long Index, double * StartX, double * StartY, double * StartZ, double * EndX, double * EndY, double * EndZ );
__declspec(implementation_key(1084)) long DisplayData::GetArcCount ( );
__declspec(implementation_key(1085)) HRESULT DisplayData::GetArcAtIndex ( long Index, double * StartX, double * StartY, double * StartZ, double * MidX, double * MidY, double * MidZ, double * EndX, double * EndY, double * EndZ );
__declspec(implementation_key(1086)) long DisplayData::GetTerminatorCount ( );
__declspec(implementation_key(1087)) HRESULT DisplayData::GetTerminatorAtIndex ( long Index, enum DimTermTypeConstants * TermType, VARIANT_BOOL * IsFilled, double * OriginX, double * OriginY, double * OriginZ, double * Point1X, double * Point1Y, double * Point1Z, double * Point2X, double * Point2Y, double * Point2Z, double * Radius );
__declspec(implementation_key(1088)) long DisplayData::GetTextCount ( );
__declspec(implementation_key(1089)) HRESULT DisplayData::GetTextAtIndex ( long Index, BSTR * TextString, double * OriginX, double * OriginY, double * OriginZ, double * X_DirX, double * X_DirY, double * X_DirZ, double * Z_DirX, double * Z_DirY, double * Z_DirZ );
__declspec(implementation_key(1090)) HRESULT DisplayData::GetTextAndFontAtIndex ( long Index, BSTR * TextString, BSTR * FontName, double * OriginX, double * OriginY, double * OriginZ, double * X_DirX, double * X_DirY, double * X_DirZ, double * Z_DirX, double * Z_DirY, double * Z_DirZ );
__declspec(implementation_key(1091)) long DisplayData::GetEllipseCount ( );
__declspec(implementation_key(1092)) HRESULT DisplayData::GetEllipseAtIndex ( long Index, double * CenterX, double * CenterY, double * CenterZ, double * MajorX, double * MajorY, double * MajorZ, double * MinorX, double * MinorY, double * MinorZ );
__declspec(implementation_key(1093)) long DisplayData::GetLinestringCount ( );
__declspec(implementation_key(1094)) long DisplayData::GetLinestringSizeAtIndex ( long Index );
__declspec(implementation_key(1095)) HRESULT DisplayData::GetLinestringAtIndex ( long Index, long * nLinestrSize, SAFEARRAY * * Vertices );
__declspec(implementation_key(1096)) HRESULT DisplayData::GetTextAtIndexEx ( long Index, BSTR * TextString, double * OriginX, double * OriginY, double * OriginZ, double * X_DirX, double * X_DirY, double * X_DirZ, double * Z_DirX, double * Z_DirY, double * Z_DirZ );
__declspec(implementation_key(1097)) HRESULT DisplayData::GetTextAndFontAtIndexEx ( long Index, BSTR * TextString, BSTR * FontName, double * OriginX, double * OriginY, double * OriginZ, double * X_DirX, double * X_DirY, double * X_DirZ, double * Z_DirX, double * Z_DirY, double * Z_DirZ );
__declspec(implementation_key(1098)) long DisplayData::GetTextCountEx ( );
__declspec(implementation_key(1099)) long _IDisplayDataAuto::GetLineCount ( );
__declspec(implementation_key(1100)) HRESULT _IDisplayDataAuto::GetLineAtIndex ( long Index, double * StartX, double * StartY, double * StartZ, double * EndX, double * EndY, double * EndZ );
__declspec(implementation_key(1101)) long _IDisplayDataAuto::GetArcCount ( );
__declspec(implementation_key(1102)) HRESULT _IDisplayDataAuto::GetArcAtIndex ( long Index, double * StartX, double * StartY, double * StartZ, double * MidX, double * MidY, double * MidZ, double * EndX, double * EndY, double * EndZ );
__declspec(implementation_key(1103)) long _IDisplayDataAuto::GetTerminatorCount ( );
__declspec(implementation_key(1104)) HRESULT _IDisplayDataAuto::GetTerminatorAtIndex ( long Index, enum DimTermTypeConstants * TermType, VARIANT_BOOL * IsFilled, double * OriginX, double * OriginY, double * OriginZ, double * Point1X, double * Point1Y, double * Point1Z, double * Point2X, double * Point2Y, double * Point2Z, double * Radius );
__declspec(implementation_key(1105)) long _IDisplayDataAuto::GetTextCount ( );
__declspec(implementation_key(1106)) HRESULT _IDisplayDataAuto::GetTextAtIndex ( long Index, BSTR * TextString, double * OriginX, double * OriginY, double * OriginZ, double * X_DirX, double * X_DirY, double * X_DirZ, double * Z_DirX, double * Z_DirY, double * Z_DirZ );
__declspec(implementation_key(1107)) HRESULT _IDisplayDataAuto::GetTextAndFontAtIndex ( long Index, BSTR * TextString, BSTR * FontName, double * OriginX, double * OriginY, double * OriginZ, double * X_DirX, double * X_DirY, double * X_DirZ, double * Z_DirX, double * Z_DirY, double * Z_DirZ );
__declspec(implementation_key(1108)) long _IDisplayDataAuto::GetEllipseCount ( );
__declspec(implementation_key(1109)) HRESULT _IDisplayDataAuto::GetEllipseAtIndex ( long Index, double * CenterX, double * CenterY, double * CenterZ, double * MajorX, double * MajorY, double * MajorZ, double * MinorX, double * MinorY, double * MinorZ );
__declspec(implementation_key(1110)) long _IDisplayDataAuto::GetLinestringCount ( );
__declspec(implementation_key(1111)) long _IDisplayDataAuto::GetLinestringSizeAtIndex ( long Index );
__declspec(implementation_key(1112)) HRESULT _IDisplayDataAuto::GetLinestringAtIndex ( long Index, long * nLinestrSize, SAFEARRAY * * Vertices );
__declspec(implementation_key(1113)) HRESULT _IDisplayDataAuto::GetTextAtIndexEx ( long Index, BSTR * TextString, double * OriginX, double * OriginY, double * OriginZ, double * X_DirX, double * X_DirY, double * X_DirZ, double * Z_DirX, double * Z_DirY, double * Z_DirZ );
__declspec(implementation_key(1114)) HRESULT _IDisplayDataAuto::GetTextAndFontAtIndexEx ( long Index, BSTR * TextString, BSTR * FontName, double * OriginX, double * OriginY, double * OriginZ, double * X_DirX, double * X_DirY, double * X_DirZ, double * Z_DirX, double * Z_DirY, double * Z_DirZ );
__declspec(implementation_key(1115)) long _IDisplayDataAuto::GetTextCountEx ( );
__declspec(implementation_key(1116)) void _IDimensionAuto::PutValue ( double Value );
__declspec(implementation_key(1117)) double _IDimensionAuto::GetValue ( );
__declspec(implementation_key(1118)) DimStylePtr _IDimensionAuto::GetStyle ( );
__declspec(implementation_key(1119)) enum DimTypeConstants _IDimensionAuto::GetDimensionType ( );
__declspec(implementation_key(1120)) void _IDimensionAuto::PutConstraint ( VARIANT_BOOL Value );
__declspec(implementation_key(1121)) VARIANT_BOOL _IDimensionAuto::GetConstraint ( );
__declspec(implementation_key(1122)) VARIANT_BOOL _IDimensionAuto::GetLeader ( );
__declspec(implementation_key(1123)) void _IDimensionAuto::PutJogged ( VARIANT_BOOL Value );
__declspec(implementation_key(1124)) VARIANT_BOOL _IDimensionAuto::GetJogged ( );
__declspec(implementation_key(1125)) void _IDimensionAuto::PutTerminatorPosition ( VARIANT_BOOL Value );
__declspec(implementation_key(1126)) VARIANT_BOOL _IDimensionAuto::GetTerminatorPosition ( );
__declspec(implementation_key(1127)) VARIANT_BOOL _IDimensionAuto::GetOffsetLeader ( );
__declspec(implementation_key(1128)) void _IDimensionAuto::PutBreakPosition ( enum DimBreakPositionConstants Value );
__declspec(implementation_key(1129)) enum DimBreakPositionConstants _IDimensionAuto::GetBreakPosition ( );
__declspec(implementation_key(1130)) void _IDimensionAuto::PutBreakDistance ( double Value );
__declspec(implementation_key(1131)) double _IDimensionAuto::GetBreakDistance ( );
__declspec(implementation_key(1132)) void _IDimensionAuto::PutMeasurementAxis ( VARIANT_BOOL Value );
__declspec(implementation_key(1133)) VARIANT_BOOL _IDimensionAuto::GetMeasurementAxis ( );
__declspec(implementation_key(1134)) void _IDimensionAuto::PutMeasurementAxisDirection ( VARIANT_BOOL Value );
__declspec(implementation_key(1135)) VARIANT_BOOL _IDimensionAuto::GetMeasurementAxisDirection ( );
__declspec(implementation_key(1136)) void _IDimensionAuto::PutProjectionLineDirection ( VARIANT_BOOL Value );
__declspec(implementation_key(1137)) VARIANT_BOOL _IDimensionAuto::GetProjectionLineDirection ( );
__declspec(implementation_key(1138)) void _IDimensionAuto::PutProjectionArc ( enum DimProjArcConstants Value );
__declspec(implementation_key(1139)) enum DimProjArcConstants _IDimensionAuto::GetProjectionArc ( );
__declspec(implementation_key(1140)) void _IDimensionAuto::PutOriginLineDirection ( VARIANT_BOOL Value );
__declspec(implementation_key(1141)) VARIANT_BOOL _IDimensionAuto::GetOriginLineDirection ( );
__declspec(implementation_key(1142)) void _IDimensionAuto::PutMeasureLineDirection ( VARIANT_BOOL Value );
__declspec(implementation_key(1143)) VARIANT_BOOL _IDimensionAuto::GetMeasureLineDirection ( );
__declspec(implementation_key(1144)) void _IDimensionAuto::PutAngleClockwise ( VARIANT_BOOL Value );
__declspec(implementation_key(1145)) VARIANT_BOOL _IDimensionAuto::GetAngleClockwise ( );
__declspec(implementation_key(1146)) void _IDimensionAuto::PutTrackDistance ( double Value );
__declspec(implementation_key(1147)) double _IDimensionAuto::GetTrackDistance ( );
__declspec(implementation_key(1148)) void _IDimensionAuto::PutLeaderDistance ( double Value );
__declspec(implementation_key(1149)) double _IDimensionAuto::GetLeaderDistance ( );
__declspec(implementation_key(1150)) void _IDimensionAuto::PutPrefixString ( _bstr_t val );
__declspec(implementation_key(1151)) _bstr_t _IDimensionAuto::GetPrefixString ( );
__declspec(implementation_key(1152)) void _IDimensionAuto::PutSuffixString ( _bstr_t val );
__declspec(implementation_key(1153)) _bstr_t _IDimensionAuto::GetSuffixString ( );
__declspec(implementation_key(1154)) void _IDimensionAuto::PutSubfixString ( _bstr_t val );
__declspec(implementation_key(1155)) _bstr_t _IDimensionAuto::GetSubfixString ( );
__declspec(implementation_key(1156)) void _IDimensionAuto::PutSuperfixString ( _bstr_t val );
__declspec(implementation_key(1157)) _bstr_t _IDimensionAuto::GetSuperfixString ( );
__declspec(implementation_key(1158)) void _IDimensionAuto::PutOverrideString ( _bstr_t val );
__declspec(implementation_key(1159)) _bstr_t _IDimensionAuto::GetOverrideString ( );
__declspec(implementation_key(1160)) void _IDimensionAuto::PutPrimaryUpperTolerance ( _bstr_t val );
__declspec(implementation_key(1161)) _bstr_t _IDimensionAuto::GetPrimaryUpperTolerance ( );
__declspec(implementation_key(1162)) void _IDimensionAuto::PutPrimaryLowerTolerance ( _bstr_t val );
__declspec(implementation_key(1163)) _bstr_t _IDimensionAuto::GetPrimaryLowerTolerance ( );
__declspec(implementation_key(1164)) void _IDimensionAuto::PutPrimaryToleranceSymbol ( _bstr_t val );
__declspec(implementation_key(1165)) _bstr_t _IDimensionAuto::GetPrimaryToleranceSymbol ( );
__declspec(implementation_key(1166)) void _IDimensionAuto::PutSecondaryUpperTolerance ( _bstr_t val );
__declspec(implementation_key(1167)) _bstr_t _IDimensionAuto::GetSecondaryUpperTolerance ( );
__declspec(implementation_key(1168)) void _IDimensionAuto::PutSecondaryLowerTolerance ( _bstr_t val );
__declspec(implementation_key(1169)) _bstr_t _IDimensionAuto::GetSecondaryLowerTolerance ( );
__declspec(implementation_key(1170)) void _IDimensionAuto::PutSecondaryToleranceSymbol ( _bstr_t val );
__declspec(implementation_key(1171)) _bstr_t _IDimensionAuto::GetSecondaryToleranceSymbol ( );
__declspec(implementation_key(1172)) void _IDimensionAuto::PutDisplayType ( enum DimDispTypeConstants val );
__declspec(implementation_key(1173)) enum DimDispTypeConstants _IDimensionAuto::GetDisplayType ( );
__declspec(implementation_key(1174)) void _IDimensionAuto::PutTrackAngle ( double val );
__declspec(implementation_key(1175)) double _IDimensionAuto::GetTrackAngle ( );
__declspec(implementation_key(1176)) void _IDimensionAuto::PutTextScale ( double val );
__declspec(implementation_key(1177)) double _IDimensionAuto::GetTextScale ( );
__declspec(implementation_key(1178)) void _IDimensionAuto::PutAngleCompliment ( VARIANT_BOOL Value );
__declspec(implementation_key(1179)) VARIANT_BOOL _IDimensionAuto::GetAngleCompliment ( );
__declspec(implementation_key(1180)) void _IDimensionAuto::PutDisplayHalf ( VARIANT_BOOL Value );
__declspec(implementation_key(1181)) VARIANT_BOOL _IDimensionAuto::GetDisplayHalf ( );
__declspec(implementation_key(1182)) void _IDimensionAuto::PutDisplayByName ( VARIANT_BOOL Value );
__declspec(implementation_key(1183)) VARIANT_BOOL _IDimensionAuto::GetDisplayByName ( );
__declspec(implementation_key(1184)) void _IDimensionAuto::PutInspection ( VARIANT_BOOL Value );
__declspec(implementation_key(1185)) VARIANT_BOOL _IDimensionAuto::GetInspection ( );
__declspec(implementation_key(1186)) HRESULT _IDimensionAuto::SetJogPoint1Distance ( double Value );
__declspec(implementation_key(1187)) HRESULT _IDimensionAuto::GetJogPoint1Distance ( double * Value );
__declspec(implementation_key(1188)) HRESULT _IDimensionAuto::SetJogPoint2 ( double x, double y );
__declspec(implementation_key(1189)) HRESULT _IDimensionAuto::GetJogPoint2 ( double * x, double * y );
__declspec(implementation_key(1190)) HRESULT _IDimensionAuto::SetJogPoint3Distance ( double Value );
__declspec(implementation_key(1191)) HRESULT _IDimensionAuto::GetJogPoint3Distance ( double * Value );
__declspec(implementation_key(1192)) HRESULT _IDimensionAuto::SetTextOffsets ( double x, double y );
__declspec(implementation_key(1193)) HRESULT _IDimensionAuto::GetTextOffsets ( double * x, double * y );
__declspec(implementation_key(1194)) HRESULT _IDimensionAuto::GetRelatedCount ( long * Count );
__declspec(implementation_key(1195)) HRESULT _IDimensionAuto::GetRelated ( long Index, IDispatch * * GraphicObject, double * x, double * y, double * z, VARIANT_BOOL * keyPoint );
__declspec(implementation_key(1196)) IDispatchPtr _IDimensionAuto::GetPlane ( );
__declspec(implementation_key(1197)) IDispatchPtr _IDimensionAuto::GetAxis ( );
__declspec(implementation_key(1198)) void _IDimensionAuto::PutAxis ( IDispatch * Axis );
__declspec(implementation_key(1199)) void _IDimensionAuto::PutPrefixInside ( VARIANT_BOOL Value );
__declspec(implementation_key(1200)) VARIANT_BOOL _IDimensionAuto::GetPrefixInside ( );
__declspec(implementation_key(1201)) enum DimStatusConstants _IDimensionAuto::GetStatusOfDimension ( );
__declspec(implementation_key(1202)) enum DimGroupMemberTypeConstants _IDimensionAuto::GetGroupMemberType ( );
__declspec(implementation_key(1203)) TGFramework::ApplicationPtr _IDimensionAuto::GetApplication ( );
__declspec(implementation_key(1204)) long _IDimensionAuto::GetIndex ( );
__declspec(implementation_key(1205)) _bstr_t _IDimensionAuto::GetName ( const _variant_t & Recurse, long Lcid );
__declspec(implementation_key(1206)) IDispatchPtr _IDimensionAuto::GetParent ( );
__declspec(implementation_key(1207)) long _IDimensionAuto::GetType ( );
__declspec(implementation_key(1208)) long _IDimensionAuto::GetZOrder ( );
__declspec(implementation_key(1209)) _bstr_t _IDimensionAuto::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(1210)) IDispatchPtr _IDimensionAuto::GetDocument ( );
__declspec(implementation_key(1211)) HRESULT _IDimensionAuto::Copy ( );
__declspec(implementation_key(1212)) HRESULT _IDimensionAuto::Cut ( );
__declspec(implementation_key(1213)) HRESULT _IDimensionAuto::Delete ( );
__declspec(implementation_key(1214)) HRESULT _IDimensionAuto::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(1215)) HRESULT _IDimensionAuto::Scale ( double Factor );
__declspec(implementation_key(1216)) HRESULT _IDimensionAuto::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(1217)) HRESULT _IDimensionAuto::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(1218)) IDispatchPtr _IDimensionAuto::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(1219)) IDispatchPtr _IDimensionAuto::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(1220)) HRESULT _IDimensionAuto::BringToFront ( );
__declspec(implementation_key(1221)) HRESULT _IDimensionAuto::BringForward ( );
__declspec(implementation_key(1222)) HRESULT _IDimensionAuto::SendToBack ( );
__declspec(implementation_key(1223)) HRESULT _IDimensionAuto::SendBackward ( );
__declspec(implementation_key(1224)) HRESULT _IDimensionAuto::Select ( );
__declspec(implementation_key(1225)) long _IDimensionAuto::GetKeyPointCount ( );
__declspec(implementation_key(1226)) HRESULT _IDimensionAuto::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(1227)) HRESULT _IDimensionAuto::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(1228)) IDispatchPtr _IDimensionAuto::GetAttributeSets ( );
__declspec(implementation_key(1229)) VARIANT_BOOL _IDimensionAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(1230)) void _IDimensionAuto::PutSecondValue ( double Value );
__declspec(implementation_key(1231)) double _IDimensionAuto::GetSecondValue ( );
__declspec(implementation_key(1232)) void _IDimensionAuto::PutOverrideChamferAngleString ( _bstr_t val );
__declspec(implementation_key(1233)) _bstr_t _IDimensionAuto::GetOverrideChamferAngleString ( );
__declspec(implementation_key(1234)) enum DimChamferModeConstants _IDimensionAuto::GetChamferDimensionMode ( );
__declspec(implementation_key(1235)) void _IDimensionAuto::PutVariableTableName ( _bstr_t VTableName );
__declspec(implementation_key(1236)) _bstr_t _IDimensionAuto::GetVariableTableName ( );
__declspec(implementation_key(1237)) void _IDimensionAuto::PutMeasurementAxisEx ( enum DimAxisModeConstants Value );
__declspec(implementation_key(1238)) enum DimAxisModeConstants _IDimensionAuto::GetMeasurementAxisEx ( );
__declspec(implementation_key(1239)) double _IDimensionAuto::GetProjectionLineAngle1 ( );
__declspec(implementation_key(1240)) double _IDimensionAuto::GetProjectionLineAngle2 ( );
__declspec(implementation_key(1241)) void _IDimensionAuto::PutFormula ( _bstr_t pFormula );
__declspec(implementation_key(1242)) _bstr_t _IDimensionAuto::GetFormula ( );
__declspec(implementation_key(1243)) DisplayDataPtr _IDimensionAuto::GetDisplayData ( );
__declspec(implementation_key(1244)) _bstr_t _IDimensionAuto::GetDisplayName ( );
__declspec(implementation_key(1245)) _bstr_t _IDimensionAuto::GetSystemName ( );
__declspec(implementation_key(1246)) void _IDimensionAuto::PutExpose ( long pbExpose );
__declspec(implementation_key(1247)) long _IDimensionAuto::GetExpose ( );
__declspec(implementation_key(1248)) void _IDimensionAuto::PutExposeName ( _bstr_t pbsName );
__declspec(implementation_key(1249)) _bstr_t _IDimensionAuto::GetExposeName ( );
__declspec(implementation_key(1250)) void _IDimensionAuto::PutSubfixString2 ( _bstr_t val );
__declspec(implementation_key(1251)) _bstr_t _IDimensionAuto::GetSubfixString2 ( );
__declspec(implementation_key(1252)) void _IDimensionAuto::PutSubfixAlignment ( enum SubfixAlignmentConstants Value );
__declspec(implementation_key(1253)) enum SubfixAlignmentConstants _IDimensionAuto::GetSubfixAlignment ( );
__declspec(implementation_key(1254)) HRESULT _IDimensionAuto::AddProjectionLineBreaks ( );
__declspec(implementation_key(1255)) HRESULT _IDimensionAuto::ClearProjectionLineBreaks ( );
__declspec(implementation_key(1256)) long _IDimensionAuto::GetBreakingDimensionsCount ( );
__declspec(implementation_key(1257)) void _IDimensionAuto::PutLayer ( _bstr_t Layer );
__declspec(implementation_key(1258)) _bstr_t _IDimensionAuto::GetLayer ( );
__declspec(implementation_key(1259)) double _IDimensionAuto::GetAbsoluteTrackDistance ( );
__declspec(implementation_key(1260)) IDispatchPtr _IDimensionAuto::GetPMIPlane ( );
__declspec(implementation_key(1261)) double _IDimensionAuto::GetPMITrackDistance ( );
__declspec(implementation_key(1262)) void _IDimensionAuto::PutPMITrackDistance ( double pdPMITrackDistance );
__declspec(implementation_key(1263)) void _IDimensionAuto::PutUseStandardLimitAndFitTolerance ( VARIANT_BOOL Value );
__declspec(implementation_key(1264)) VARIANT_BOOL _IDimensionAuto::GetUseStandardLimitAndFitTolerance ( );
__declspec(implementation_key(1265)) void _IDimensionAuto::PutHoleClassString ( _bstr_t Value );
__declspec(implementation_key(1266)) _bstr_t _IDimensionAuto::GetHoleClassString ( );
__declspec(implementation_key(1267)) void _IDimensionAuto::PutShaftClassString ( _bstr_t Value );
__declspec(implementation_key(1268)) _bstr_t _IDimensionAuto::GetShaftClassString ( );
__declspec(implementation_key(1269)) void _IDimensionAuto::PutInhibitZeroToleranceDisplay ( VARIANT_BOOL Value );
__declspec(implementation_key(1270)) VARIANT_BOOL _IDimensionAuto::GetInhibitZeroToleranceDisplay ( );
__declspec(implementation_key(1271)) HRESULT _IDimensionAuto::SetPMIEditDirection ( enum PMIEditDirectionConstants editDirectionConst );
__declspec(implementation_key(1272)) void _IDimensionAuto::PutHidePMI ( VARIANT_BOOL Value );
__declspec(implementation_key(1273)) VARIANT_BOOL _IDimensionAuto::GetHidePMI ( );
__declspec(implementation_key(1274)) _bstr_t _IDimensionAuto::GetPrefixDisplayedText ( );
__declspec(implementation_key(1275)) _bstr_t _IDimensionAuto::GetSuperfixDisplayedText ( );
__declspec(implementation_key(1276)) _bstr_t _IDimensionAuto::GetSuffixDisplayedText ( );
__declspec(implementation_key(1277)) _bstr_t _IDimensionAuto::GetSubfixDisplayedText ( );
__declspec(implementation_key(1278)) _bstr_t _IDimensionAuto::GetSubfix2DisplayedText ( );
__declspec(implementation_key(1279)) void _IDimensionAuto::PutStyle ( struct DimStyle * pStyle );
__declspec(implementation_key(1280)) void _IDimensionAuto::PutRadialExtensionDistance ( double pdRadialExtensionDistance );
__declspec(implementation_key(1281)) double _IDimensionAuto::GetRadialExtensionDistance ( );
__declspec(implementation_key(1282)) HRESULT _IDimensionAuto::GetDiscreteValues ( int * pnumDiscreteValues, SAFEARRAY * * DiscreteValues );
__declspec(implementation_key(1283)) HRESULT _IDimensionAuto::SetDiscreteValues ( int numDiscreteValues, SAFEARRAY * * DiscreteValues );
__declspec(implementation_key(1284)) HRESULT _IDimensionAuto::GetMultipleJogPoints ( int * numJogPoints, double * initialYOffset, SAFEARRAY * * XOffsets, SAFEARRAY * * YOffsets, SAFEARRAY * * DistBet2Jogs );
__declspec(implementation_key(1285)) HRESULT _IDimensionAuto::SetMultipleJogPoints ( int numJogPoints, double initialYOffset, SAFEARRAY * * XOffsets, SAFEARRAY * * YOffsets, SAFEARRAY * * DistBet2Jogs );
__declspec(implementation_key(1286)) _bstr_t _IDimensionAuto::GetComment ( );
__declspec(implementation_key(1287)) HRESULT _IDimensionAuto::SetComment ( _bstr_t Comment );
__declspec(implementation_key(1288)) enum DimStatusConstants _IDimensionAuto::UpdateStatus ( );
__declspec(implementation_key(1289)) HRESULT _IDimensionAuto::RemoveFromAlignmentSet ( );
__declspec(implementation_key(1290)) HRESULT _IDimensionAuto::BreakAlignmentSet ( );
__declspec(implementation_key(1291)) void _IDimensionAuto::PutTrue3DSketchDimension ( VARIANT_BOOL Value );
__declspec(implementation_key(1292)) VARIANT_BOOL _IDimensionAuto::GetTrue3DSketchDimension ( );
__declspec(implementation_key(1293)) enum DimReattachStatusConstants _IDimensionAuto::ReattachToDrawingView ( IDispatch * DrawingView );
__declspec(implementation_key(1294)) HRESULT _IDimensionAuto::GetValueDiscreteValues ( SAFEARRAY * * DiscreteValues );
__declspec(implementation_key(1295)) HRESULT _IDimensionAuto::SetValueDiscreteValues ( SAFEARRAY * * DiscreteValues );
__declspec(implementation_key(1296)) HRESULT _IDimensionAuto::AddDiscreteValue ( double DiscreteValue );
__declspec(implementation_key(1297)) HRESULT _IDimensionAuto::RemoveDiscreteValue ( double DiscreteValue );
__declspec(implementation_key(1298)) HRESULT _IDimensionAuto::SetValueRangeValues ( double LowValue, int Condition, double HighValue );
__declspec(implementation_key(1299)) HRESULT _IDimensionAuto::GetValueRangeValues ( double * LowValue, int * Condition, double * HighValue );
__declspec(implementation_key(1300)) void _IDimensionAuto::PutUnitsType ( int pUnitType );
__declspec(implementation_key(1301)) int _IDimensionAuto::GetUnitsType ( );
__declspec(implementation_key(1302)) HRESULT _IDimensionAuto::GetValueRangeHighValue ( double * pdHighValue );
__declspec(implementation_key(1303)) HRESULT _IDimensionAuto::SetValueRangeHighValue ( double dHighValue );
__declspec(implementation_key(1304)) HRESULT _IDimensionAuto::GetValueRangeLowValue ( double * pdHighValue );
__declspec(implementation_key(1305)) HRESULT _IDimensionAuto::SetValueRangeLowValue ( double dHighValue );
__declspec(implementation_key(1306)) HRESULT _IDimensionAuto::ClearLimitsOrDiscreteValues ( );
__declspec(implementation_key(1307)) double _IDimensionAuto::GetValueOutOfRange ( );
__declspec(implementation_key(1308)) VARIANT_BOOL _IDimensionAuto::GetIsReadOnly ( );
__declspec(implementation_key(1309)) HRESULT _IDimensionAuto::GetValueEx ( double * pdValue, enum TGFramework::seUnitsTypeConstants seUnitsType );
__declspec(implementation_key(1310)) HRESULT _IDimensionAuto::SetValueEx ( double dValue, enum TGFramework::seUnitsTypeConstants seUnitsType );
__declspec(implementation_key(1311)) void _IDimensionAuto::PutEnablePrefix ( VARIANT_BOOL Value );
__declspec(implementation_key(1312)) VARIANT_BOOL _IDimensionAuto::GetEnablePrefix ( );
__declspec(implementation_key(1313)) HRESULT _IDimensionAuto::AutoScaleSketch ( double dValue, VARIANT_BOOL * Value );
__declspec(implementation_key(1314)) HRESULT _IDimensionAuto::SetValueAndUpdateCache ( double dValue, enum TGFramework::seUnitsTypeConstants seUnitsType );
__declspec(implementation_key(1315)) HRESULT _IDimensionAuto::ConvertCDiameterToRDiameter ( enum DimTypeConstants Type );
__declspec(implementation_key(1316)) void DimensionStyle::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(1317)) _bstr_t DimensionStyle::GetName ( );
__declspec(implementation_key(1318)) void DimensionStyle::PutPrimaryUnits ( enum DimLinearUnitConstants _arg1 );
__declspec(implementation_key(1319)) enum DimLinearUnitConstants DimensionStyle::GetPrimaryUnits ( );
__declspec(implementation_key(1320)) void DimensionStyle::PutRoundOffType ( enum DimRoundOffTypeConstants _arg1 );
__declspec(implementation_key(1321)) enum DimRoundOffTypeConstants DimensionStyle::GetRoundOffType ( );
__declspec(implementation_key(1322)) void DimensionStyle::PutDelimiter ( enum DimDelimiterTypeConstants _arg1 );
__declspec(implementation_key(1323)) enum DimDelimiterTypeConstants DimensionStyle::GetDelimiter ( );
__declspec(implementation_key(1324)) void DimensionStyle::PutPrimaryDecimalRoundOff ( enum DimDecimalRoundOffTypeConstants _arg1 );
__declspec(implementation_key(1325)) enum DimDecimalRoundOffTypeConstants DimensionStyle::GetPrimaryDecimalRoundOff ( );
__declspec(implementation_key(1326)) void DimensionStyle::PutPrimaryFractionRoundOff ( enum DimFractionRoundOffTypeConstants _arg1 );
__declspec(implementation_key(1327)) enum DimFractionRoundOffTypeConstants DimensionStyle::GetPrimaryFractionRoundOff ( );
__declspec(implementation_key(1328)) void DimensionStyle::PutAngularUnits ( enum DimAngularUnitConstants _arg1 );
__declspec(implementation_key(1329)) enum DimAngularUnitConstants DimensionStyle::GetAngularUnits ( );
__declspec(implementation_key(1330)) void DimensionStyle::PutAngularDMSRoundOff ( enum DimDMSRoundOffTypeConstants _arg1 );
__declspec(implementation_key(1331)) enum DimDMSRoundOffTypeConstants DimensionStyle::GetAngularDMSRoundOff ( );
__declspec(implementation_key(1332)) void DimensionStyle::PutAngularDecimalRoundOff ( enum DimDecimalRoundOffTypeConstants _arg1 );
__declspec(implementation_key(1333)) enum DimDecimalRoundOffTypeConstants DimensionStyle::GetAngularDecimalRoundOff ( );
__declspec(implementation_key(1334)) void DimensionStyle::PutAngularFractionRoundOff ( enum DimFractionRoundOffTypeConstants _arg1 );
__declspec(implementation_key(1335)) enum DimFractionRoundOffTypeConstants DimensionStyle::GetAngularFractionRoundOff ( );
__declspec(implementation_key(1336)) void DimensionStyle::PutPrimaryLeadingZeros ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1337)) VARIANT_BOOL DimensionStyle::GetPrimaryLeadingZeros ( );
__declspec(implementation_key(1338)) void DimensionStyle::PutPrimaryTrailingZeros ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1339)) VARIANT_BOOL DimensionStyle::GetPrimaryTrailingZeros ( );
__declspec(implementation_key(1340)) void DimensionStyle::PutPrimaryUnitLabel ( _bstr_t _arg1 );
__declspec(implementation_key(1341)) _bstr_t DimensionStyle::GetPrimaryUnitLabel ( );
__declspec(implementation_key(1342)) void DimensionStyle::PutPrimarySubunitsLabel ( _bstr_t _arg1 );
__declspec(implementation_key(1343)) _bstr_t DimensionStyle::GetPrimarySubunitsLabel ( );
__declspec(implementation_key(1344)) void DimensionStyle::PutMaximumSubunits ( int _arg1 );
__declspec(implementation_key(1345)) int DimensionStyle::GetMaximumSubunits ( );
__declspec(implementation_key(1346)) void DimensionStyle::PutDualDisplay ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1347)) VARIANT_BOOL DimensionStyle::GetDualDisplay ( );
__declspec(implementation_key(1348)) void DimensionStyle::PutSecondaryUnits ( enum DimLinearUnitConstants _arg1 );
__declspec(implementation_key(1349)) enum DimLinearUnitConstants DimensionStyle::GetSecondaryUnits ( );
__declspec(implementation_key(1350)) void DimensionStyle::PutSecondaryUnitRoundOff ( enum DimRoundOffTypeConstants _arg1 );
__declspec(implementation_key(1351)) enum DimRoundOffTypeConstants DimensionStyle::GetSecondaryUnitRoundOff ( );
__declspec(implementation_key(1352)) void DimensionStyle::PutSecondaryDecimalRoundOff ( enum DimDecimalRoundOffTypeConstants _arg1 );
__declspec(implementation_key(1353)) enum DimDecimalRoundOffTypeConstants DimensionStyle::GetSecondaryDecimalRoundOff ( );
__declspec(implementation_key(1354)) void DimensionStyle::PutSecondaryFractionRoundOff ( enum DimFractionRoundOffTypeConstants _arg1 );
__declspec(implementation_key(1355)) enum DimFractionRoundOffTypeConstants DimensionStyle::GetSecondaryFractionRoundOff ( );
__declspec(implementation_key(1356)) void DimensionStyle::PutSecondaryLeadingZeros ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1357)) VARIANT_BOOL DimensionStyle::GetSecondaryLeadingZeros ( );
__declspec(implementation_key(1358)) void DimensionStyle::PutSecondaryTrailingZeros ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1359)) VARIANT_BOOL DimensionStyle::GetSecondaryTrailingZeros ( );
__declspec(implementation_key(1360)) void DimensionStyle::PutSecondaryUnitLabel ( _bstr_t _arg1 );
__declspec(implementation_key(1361)) _bstr_t DimensionStyle::GetSecondaryUnitLabel ( );
__declspec(implementation_key(1362)) void DimensionStyle::PutSecondarySubunitsLabel ( _bstr_t _arg1 );
__declspec(implementation_key(1363)) _bstr_t DimensionStyle::GetSecondarySubunitsLabel ( );
__declspec(implementation_key(1364)) void DimensionStyle::PutHeight ( double _arg1 );
__declspec(implementation_key(1365)) double DimensionStyle::GetHeight ( );
__declspec(implementation_key(1366)) void DimensionStyle::PutRatio ( double _arg1 );
__declspec(implementation_key(1367)) double DimensionStyle::GetRatio ( );
__declspec(implementation_key(1368)) void DimensionStyle::PutTextWeight ( double _arg1 );
__declspec(implementation_key(1369)) double DimensionStyle::GetTextWeight ( );
__declspec(implementation_key(1370)) void DimensionStyle::PutFont ( _bstr_t _arg1 );
__declspec(implementation_key(1371)) _bstr_t DimensionStyle::GetFont ( );
__declspec(implementation_key(1372)) void DimensionStyle::PutFontStyle ( enum DimTextFontStyleConstants _arg1 );
__declspec(implementation_key(1373)) enum DimTextFontStyleConstants DimensionStyle::GetFontStyle ( );
__declspec(implementation_key(1374)) void DimensionStyle::PutTextOrientation ( enum DimTextOrientationConstants _arg1 );
__declspec(implementation_key(1375)) enum DimTextOrientationConstants DimensionStyle::GetTextOrientation ( );
__declspec(implementation_key(1376)) void DimensionStyle::PutTextPosition ( enum DimTextPositionConstants _arg1 );
__declspec(implementation_key(1377)) enum DimTextPositionConstants DimensionStyle::GetTextPosition ( );
__declspec(implementation_key(1378)) void DimensionStyle::PutLimitTextArrangement ( enum DimLimitTextArrangmentConstants _arg1 );
__declspec(implementation_key(1379)) enum DimLimitTextArrangmentConstants DimensionStyle::GetLimitTextArrangement ( );
__declspec(implementation_key(1380)) void DimensionStyle::PutToleranceHeightRatio ( double _arg1 );
__declspec(implementation_key(1381)) double DimensionStyle::GetToleranceHeightRatio ( );
__declspec(implementation_key(1382)) void DimensionStyle::PutToleranceWeight ( double _arg1 );
__declspec(implementation_key(1383)) double DimensionStyle::GetToleranceWeight ( );
__declspec(implementation_key(1384)) void DimensionStyle::PutNTSSymbol ( enum DimNTSTypeConstants _arg1 );
__declspec(implementation_key(1385)) enum DimNTSTypeConstants DimensionStyle::GetNTSSymbol ( );
__declspec(implementation_key(1386)) void DimensionStyle::PutTerminatorType ( enum DimTermTypeConstants _arg1 );
__declspec(implementation_key(1387)) enum DimTermTypeConstants DimensionStyle::GetTerminatorType ( );
__declspec(implementation_key(1388)) void DimensionStyle::PutTerminatorDisplay ( enum DimTermDisplayTypeConstants _arg1 );
__declspec(implementation_key(1389)) enum DimTermDisplayTypeConstants DimensionStyle::GetTerminatorDisplay ( );
__declspec(implementation_key(1390)) void DimensionStyle::PutOriginTerminatorType ( enum DimTermTypeConstants _arg1 );
__declspec(implementation_key(1391)) enum DimTermTypeConstants DimensionStyle::GetOriginTerminatorType ( );
__declspec(implementation_key(1392)) void DimensionStyle::PutFreeSpaceTerminatorType ( enum DimTermTypeConstants _arg1 );
__declspec(implementation_key(1393)) enum DimTermTypeConstants DimensionStyle::GetFreeSpaceTerminatorType ( );
__declspec(implementation_key(1394)) void DimensionStyle::PutDatumTerminatorType ( enum DimDatumTermTypeConstants _arg1 );
__declspec(implementation_key(1395)) enum DimDatumTermTypeConstants DimensionStyle::GetDatumTerminatorType ( );
__declspec(implementation_key(1396)) void DimensionStyle::PutTerminatorSize ( double _arg1 );
__declspec(implementation_key(1397)) double DimensionStyle::GetTerminatorSize ( );
__declspec(implementation_key(1398)) void DimensionStyle::PutTerminatorInsideLimit ( double _arg1 );
__declspec(implementation_key(1399)) double DimensionStyle::GetTerminatorInsideLimit ( );
__declspec(implementation_key(1400)) void DimensionStyle::PutLineWidth ( double _arg1 );
__declspec(implementation_key(1401)) double DimensionStyle::GetLineWidth ( );
__declspec(implementation_key(1402)) void DimensionStyle::PutProjectionExtensionGap ( double _arg1 );
__declspec(implementation_key(1403)) double DimensionStyle::GetProjectionExtensionGap ( );
__declspec(implementation_key(1404)) void DimensionStyle::PutProjectionOffsetGap ( double _arg1 );
__declspec(implementation_key(1405)) double DimensionStyle::GetProjectionOffsetGap ( );
__declspec(implementation_key(1406)) void DimensionStyle::PutProjectionOffsetGapAlignment ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1407)) VARIANT_BOOL DimensionStyle::GetProjectionOffsetGapAlignment ( );
__declspec(implementation_key(1408)) void DimensionStyle::PutProjectionAngle ( double _arg1 );
__declspec(implementation_key(1409)) double DimensionStyle::GetProjectionAngle ( );
__declspec(implementation_key(1410)) void DimensionStyle::PutLineConnect ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1411)) VARIANT_BOOL DimensionStyle::GetLineConnect ( );
__declspec(implementation_key(1412)) void DimensionStyle::PutStackPitch ( double _arg1 );
__declspec(implementation_key(1413)) double DimensionStyle::GetStackPitch ( );
__declspec(implementation_key(1414)) void DimensionStyle::PutLeaderLineLength ( double _arg1 );
__declspec(implementation_key(1415)) double DimensionStyle::GetLeaderLineLength ( );
__declspec(implementation_key(1416)) void DimensionStyle::PutCoordinateAutoJog ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1417)) VARIANT_BOOL DimensionStyle::GetCoordinateAutoJog ( );
__declspec(implementation_key(1418)) void DimensionStyle::PutCoordinateStackPitch ( double _arg1 );
__declspec(implementation_key(1419)) double DimensionStyle::GetCoordinateStackPitch ( );
__declspec(implementation_key(1420)) void DimensionStyle::PutCommonOrigin ( enum DimCommonOriginTypeConstants _arg1 );
__declspec(implementation_key(1421)) enum DimCommonOriginTypeConstants DimensionStyle::GetCommonOrigin ( );
__declspec(implementation_key(1422)) void DimensionStyle::PutCoordinateTextPosition ( enum DimCoordTextPositionConstants _arg1 );
__declspec(implementation_key(1423)) enum DimCoordTextPositionConstants DimensionStyle::GetCoordinateTextPosition ( );
__declspec(implementation_key(1424)) void DimensionStyle::PutSymbolPosition ( enum DimSymbolPositionConstants _arg1 );
__declspec(implementation_key(1425)) enum DimSymbolPositionConstants DimensionStyle::GetSymbolPosition ( );
__declspec(implementation_key(1426)) void DimensionStyle::PutAutoSuppressDiameter ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1427)) VARIANT_BOOL DimensionStyle::GetAutoSuppressDiameter ( );
__declspec(implementation_key(1428)) void DimensionStyle::PutDimensionScaleMode ( enum DimScaleModeConstants _arg1 );
__declspec(implementation_key(1429)) enum DimScaleModeConstants DimensionStyle::GetDimensionScaleMode ( );
__declspec(implementation_key(1430)) void DimensionStyle::PutDimensionScale ( double _arg1 );
__declspec(implementation_key(1431)) double DimensionStyle::GetDimensionScale ( );
__declspec(implementation_key(1432)) void DimensionStyle::PutErrorColor ( long _arg1 );
__declspec(implementation_key(1433)) long DimensionStyle::GetErrorColor ( );
__declspec(implementation_key(1434)) void DimensionStyle::PutDrivingColor ( long _arg1 );
__declspec(implementation_key(1435)) long DimensionStyle::GetDrivingColor ( );
__declspec(implementation_key(1436)) void DimensionStyle::PutDrivenColor ( long _arg1 );
__declspec(implementation_key(1437)) long DimensionStyle::GetDrivenColor ( );
__declspec(implementation_key(1438)) void DimensionStyle::PutAutoCenterProjectionLine ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1439)) VARIANT_BOOL DimensionStyle::GetAutoCenterProjectionLine ( );
__declspec(implementation_key(1440)) void DimensionStyle::PutProjectionLineDisplay ( enum DimProjDisplayTypeConstants _arg1 );
__declspec(implementation_key(1441)) enum DimProjDisplayTypeConstants DimensionStyle::GetProjectionLineDisplay ( );
__declspec(implementation_key(1442)) void DimensionStyle::PutProjectionLineDisplayForIntersectionPoint ( enum DimProjDisplayTypeConstants _arg1 );
__declspec(implementation_key(1443)) enum DimProjDisplayTypeConstants DimensionStyle::GetProjectionLineDisplayForIntersectionPoint ( );
__declspec(implementation_key(1444)) void DimensionStyle::PutTextClearanceGap ( double _arg1 );
__declspec(implementation_key(1445)) double DimensionStyle::GetTextClearanceGap ( );
__declspec(implementation_key(1446)) void DimensionStyle::PutDualModeVerticalGap ( double _arg1 );
__declspec(implementation_key(1447)) double DimensionStyle::GetDualModeVerticalGap ( );
__declspec(implementation_key(1448)) void DimensionStyle::PutLineSpacing ( double _arg1 );
__declspec(implementation_key(1449)) double DimensionStyle::GetLineSpacing ( );
__declspec(implementation_key(1450)) void DimensionStyle::PutAboveGap ( double _arg1 );
__declspec(implementation_key(1451)) double DimensionStyle::GetAboveGap ( );
__declspec(implementation_key(1452)) void DimensionStyle::PutHorizontalToleranceGap ( double _arg1 );
__declspec(implementation_key(1453)) double DimensionStyle::GetHorizontalToleranceGap ( );
__declspec(implementation_key(1454)) void DimensionStyle::PutVerticalToleranceGap ( double _arg1 );
__declspec(implementation_key(1455)) double DimensionStyle::GetVerticalToleranceGap ( );
__declspec(implementation_key(1456)) void DimensionStyle::PutVerticalLimitsGap ( double _arg1 );
__declspec(implementation_key(1457)) double DimensionStyle::GetVerticalLimitsGap ( );
__declspec(implementation_key(1458)) void DimensionStyle::PutHorizontalBoxGap ( double _arg1 );
__declspec(implementation_key(1459)) double DimensionStyle::GetHorizontalBoxGap ( );
__declspec(implementation_key(1460)) void DimensionStyle::PutVerticalBoxGap ( double _arg1 );
__declspec(implementation_key(1461)) double DimensionStyle::GetVerticalBoxGap ( );
__declspec(implementation_key(1462)) void DimensionStyle::PutPrefixSuffixGap ( double _arg1 );
__declspec(implementation_key(1463)) double DimensionStyle::GetPrefixSuffixGap ( );
__declspec(implementation_key(1464)) void DimensionStyle::PutSymbolGap ( double _arg1 );
__declspec(implementation_key(1465)) double DimensionStyle::GetSymbolGap ( );
__declspec(implementation_key(1466)) void DimensionStyle::PutMaximumViewAngle ( double _arg1 );
__declspec(implementation_key(1467)) double DimensionStyle::GetMaximumViewAngle ( );
__declspec(implementation_key(1468)) void DimensionStyle::PutProjectionToleranceZonePosition ( enum DimProjTolZonePositionConstants _arg1 );
__declspec(implementation_key(1469)) enum DimProjTolZonePositionConstants DimensionStyle::GetProjectionToleranceZonePosition ( );
__declspec(implementation_key(1470)) void DimensionStyle::PutDatumFrameDashes ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1471)) VARIANT_BOOL DimensionStyle::GetDatumFrameDashes ( );
__declspec(implementation_key(1472)) void DimensionStyle::PutViewTextRatio ( double _arg1 );
__declspec(implementation_key(1473)) double DimensionStyle::GetViewTextRatio ( );
__declspec(implementation_key(1474)) void DimensionStyle::PutViewTerminatorRatio ( double _arg1 );
__declspec(implementation_key(1475)) double DimensionStyle::GetViewTerminatorRatio ( );
__declspec(implementation_key(1476)) void DimensionStyle::PutViewLineWidth ( double _arg1 );
__declspec(implementation_key(1477)) double DimensionStyle::GetViewLineWidth ( );
__declspec(implementation_key(1478)) void DimensionStyle::PutViewLineType ( _bstr_t _arg1 );
__declspec(implementation_key(1479)) _bstr_t DimensionStyle::GetViewLineType ( );
__declspec(implementation_key(1480)) void DimensionStyle::PutViewCuttingPlaneLineDisplay ( enum DimViewCuttingPlaneDisplayTypeConstants _arg1 );
__declspec(implementation_key(1481)) enum DimViewCuttingPlaneDisplayTypeConstants DimensionStyle::GetViewCuttingPlaneLineDisplay ( );
__declspec(implementation_key(1482)) void DimensionStyle::PutViewPlaneLineDisplay ( enum DimViewPlaneDisplayTypeConstants _arg1 );
__declspec(implementation_key(1483)) enum DimViewPlaneDisplayTypeConstants DimensionStyle::GetViewPlaneLineDisplay ( );
__declspec(implementation_key(1484)) void DimensionStyle::PutViewCaptionLocation ( enum DimViewCaptionLocationConstants _arg1 );
__declspec(implementation_key(1485)) enum DimViewCaptionLocationConstants DimensionStyle::GetViewCaptionLocation ( );
__declspec(implementation_key(1486)) void DimensionStyle::PutViewCPLCaptionLocation ( enum DimViewCPLCaptionLocationConstants _arg1 );
__declspec(implementation_key(1487)) enum DimViewCPLCaptionLocationConstants DimensionStyle::GetViewCPLCaptionLocation ( );
__declspec(implementation_key(1488)) void DimensionStyle::PutViewSuffixAsPrefix ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1489)) VARIANT_BOOL DimensionStyle::GetViewSuffixAsPrefix ( );
__declspec(implementation_key(1490)) void DimensionStyle::PutViewThinTerminator ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1491)) VARIANT_BOOL DimensionStyle::GetViewThinTerminator ( );
__declspec(implementation_key(1492)) void DimensionStyle::PutViewVPLCaptionAtEnd ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1493)) VARIANT_BOOL DimensionStyle::GetViewVPLCaptionAtEnd ( );
__declspec(implementation_key(1494)) void DimensionStyle::PutOffsetLeaderType ( enum DimOffsetLeaderTypeConstants _arg1 );
__declspec(implementation_key(1495)) enum DimOffsetLeaderTypeConstants DimensionStyle::GetOffsetLeaderType ( );
__declspec(implementation_key(1496)) void DimensionStyle::PutSecondaryToleranceEquivalent ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1497)) VARIANT_BOOL DimensionStyle::GetSecondaryToleranceEquivalent ( );
__declspec(implementation_key(1498)) void DimensionStyle::PutCenterLineType ( _bstr_t _arg1 );
__declspec(implementation_key(1499)) _bstr_t DimensionStyle::GetCenterLineType ( );
__declspec(implementation_key(1500)) _bstr_t DimensionStyle::GetDescription ( );
__declspec(implementation_key(1501)) void DimensionStyle::PutParent ( _bstr_t _arg1 );
__declspec(implementation_key(1502)) _bstr_t DimensionStyle::GetParent ( );
__declspec(implementation_key(1503)) void DimensionStyle::PutCenterMarkSize ( double _arg1 );
__declspec(implementation_key(1504)) double DimensionStyle::GetCenterMarkSize ( );
__declspec(implementation_key(1505)) void DimensionStyle::PutAutoPhase ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1506)) VARIANT_BOOL DimensionStyle::GetAutoPhase ( );
__declspec(implementation_key(1507)) void DimensionStyle::PutRoundUp ( enum DimRoundUpTypeConstants _arg1 );
__declspec(implementation_key(1508)) enum DimRoundUpTypeConstants DimensionStyle::GetRoundUp ( );
__declspec(implementation_key(1509)) void DimensionStyle::PutSecondaryLinearRoundOffType ( enum DimRoundOffTypeConstants _arg1 );
__declspec(implementation_key(1510)) enum DimRoundOffTypeConstants DimensionStyle::GetSecondaryLinearRoundOffType ( );
__declspec(implementation_key(1511)) void DimensionStyle::PutAngularRoundOffType ( enum DimRoundOffTypeConstants _arg1 );
__declspec(implementation_key(1512)) enum DimRoundOffTypeConstants DimensionStyle::GetAngularRoundOffType ( );
__declspec(implementation_key(1513)) void DimensionStyle::PutCenterMarkExtension ( double _arg1 );
__declspec(implementation_key(1514)) double DimensionStyle::GetCenterMarkExtension ( );
__declspec(implementation_key(1515)) void DimensionStyle::PutChamferUse45DegreeCharacter ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1516)) VARIANT_BOOL DimensionStyle::GetChamferUse45DegreeCharacter ( );
__declspec(implementation_key(1517)) void DimensionStyle::PutSmartDepthHoleThru ( _bstr_t _arg1 );
__declspec(implementation_key(1518)) _bstr_t DimensionStyle::GetSmartDepthHoleThru ( );
__declspec(implementation_key(1519)) void DimensionStyle::PutSmartDepthHoleFinite ( _bstr_t _arg1 );
__declspec(implementation_key(1520)) _bstr_t DimensionStyle::GetSmartDepthHoleFinite ( );
__declspec(implementation_key(1521)) void DimensionStyle::PutSmartDepthThreadThru ( _bstr_t _arg1 );
__declspec(implementation_key(1522)) _bstr_t DimensionStyle::GetSmartDepthThreadThru ( );
__declspec(implementation_key(1523)) void DimensionStyle::PutSmartDepthThreadFinite ( _bstr_t _arg1 );
__declspec(implementation_key(1524)) _bstr_t DimensionStyle::GetSmartDepthThreadFinite ( );
__declspec(implementation_key(1525)) void DimensionStyle::PutLowerCaseMultiplicationSymbol ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1526)) VARIANT_BOOL DimensionStyle::GetLowerCaseMultiplicationSymbol ( );
__declspec(implementation_key(1527)) void DimensionStyle::PutHoleCalloutSimple ( _bstr_t _arg1 );
__declspec(implementation_key(1528)) _bstr_t DimensionStyle::GetHoleCalloutSimple ( );
__declspec(implementation_key(1529)) void DimensionStyle::PutHoleCalloutCounterbore ( _bstr_t _arg1 );
__declspec(implementation_key(1530)) _bstr_t DimensionStyle::GetHoleCalloutCounterbore ( );
__declspec(implementation_key(1531)) void DimensionStyle::PutHoleCalloutCountersink ( _bstr_t _arg1 );
__declspec(implementation_key(1532)) _bstr_t DimensionStyle::GetHoleCalloutCountersink ( );
__declspec(implementation_key(1533)) void DimensionStyle::PutHoleCalloutSimpleThreaded ( _bstr_t _arg1 );
__declspec(implementation_key(1534)) _bstr_t DimensionStyle::GetHoleCalloutSimpleThreaded ( );
__declspec(implementation_key(1535)) void DimensionStyle::PutHoleCalloutCounterboreThreaded ( _bstr_t _arg1 );
__declspec(implementation_key(1536)) _bstr_t DimensionStyle::GetHoleCalloutCounterboreThreaded ( );
__declspec(implementation_key(1537)) void DimensionStyle::PutHoleCalloutCountersinkThreaded ( _bstr_t _arg1 );
__declspec(implementation_key(1538)) _bstr_t DimensionStyle::GetHoleCalloutCountersinkThreaded ( );
__declspec(implementation_key(1539)) void DimensionStyle::PutApplyBreakLineGap ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1540)) VARIANT_BOOL DimensionStyle::GetApplyBreakLineGap ( );
__declspec(implementation_key(1541)) void DimensionStyle::PutTextAutoFillBackground ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1542)) VARIANT_BOOL DimensionStyle::GetTextAutoFillBackground ( );
__declspec(implementation_key(1543)) void DimensionStyle::PutPulledOutTextOrientation ( enum DimTextOrientationConstants _arg1 );
__declspec(implementation_key(1544)) enum DimTextOrientationConstants DimensionStyle::GetPulledOutTextOrientation ( );
__declspec(implementation_key(1545)) void DimensionStyle::PutPulledOutTextPosition ( enum DimTextPositionConstants _arg1 );
__declspec(implementation_key(1546)) enum DimTextPositionConstants DimensionStyle::GetPulledOutTextPosition ( );
__declspec(implementation_key(1547)) void DimensionStyle::PutOverridePulledOutText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1548)) VARIANT_BOOL DimensionStyle::GetOverridePulledOutText ( );
__declspec(implementation_key(1549)) void DimensionStyle::PutViewLineArrowOffset ( double _arg1 );
__declspec(implementation_key(1550)) double DimensionStyle::GetViewLineArrowOffset ( );
__declspec(implementation_key(1551)) void DimensionStyle::PutViewThickLineLength ( double _arg1 );
__declspec(implementation_key(1552)) double DimensionStyle::GetViewThickLineLength ( );
__declspec(implementation_key(1553)) void DimensionStyle::PutOrigTerminatorSize ( double _arg1 );
__declspec(implementation_key(1554)) double DimensionStyle::GetOrigTerminatorSize ( );
__declspec(implementation_key(1555)) void DimensionStyle::PutConnectorLineType ( _bstr_t _arg1 );
__declspec(implementation_key(1556)) _bstr_t DimensionStyle::GetConnectorLineType ( );
__declspec(implementation_key(1557)) void DimensionStyle::PutConnectorColor ( long _arg1 );
__declspec(implementation_key(1558)) long DimensionStyle::GetConnectorColor ( );
__declspec(implementation_key(1559)) void DimensionStyle::PutConnectorWidth ( double _arg1 );
__declspec(implementation_key(1560)) double DimensionStyle::GetConnectorWidth ( );
__declspec(implementation_key(1561)) void DimensionStyle::PutFractionSeparator ( _bstr_t _arg1 );
__declspec(implementation_key(1562)) _bstr_t DimensionStyle::GetFractionSeparator ( );
__declspec(implementation_key(1563)) void DimensionStyle::PutHeightPMI ( double _arg1 );
__declspec(implementation_key(1564)) double DimensionStyle::GetHeightPMI ( );
__declspec(implementation_key(1565)) void DimensionStyle::PutProjectionBreakGap ( double _arg1 );
__declspec(implementation_key(1566)) double DimensionStyle::GetProjectionBreakGap ( );
__declspec(implementation_key(1567)) void DimensionStyle::PutSecondaryDelimiter ( enum DimDelimiterTypeConstants _arg1 );
__declspec(implementation_key(1568)) enum DimDelimiterTypeConstants DimensionStyle::GetSecondaryDelimiter ( );
__declspec(implementation_key(1569)) void DimensionStyle::PutMatchPrimaryDelimiter ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1570)) VARIANT_BOOL DimensionStyle::GetMatchPrimaryDelimiter ( );
__declspec(implementation_key(1571)) void DimensionStyle::PutInhibitZeroToleranceDisplay ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1572)) VARIANT_BOOL DimensionStyle::GetInhibitZeroToleranceDisplay ( );
__declspec(implementation_key(1573)) void DimensionStyle::PutAllAroundMultiplier ( double _arg1 );
__declspec(implementation_key(1574)) double DimensionStyle::GetAllAroundMultiplier ( );
__declspec(implementation_key(1575)) void DimensionStyle::PutOverridePulledOutText2 ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1576)) VARIANT_BOOL DimensionStyle::GetOverridePulledOutText2 ( );
__declspec(implementation_key(1577)) void DimensionStyle::PutPulledOutText2Orientation ( enum DimTextOrientationConstants _arg1 );
__declspec(implementation_key(1578)) enum DimTextOrientationConstants DimensionStyle::GetPulledOutText2Orientation ( );
__declspec(implementation_key(1579)) void DimensionStyle::PutPulledOutText2Position ( enum DimTextPositionConstants _arg1 );
__declspec(implementation_key(1580)) enum DimTextPositionConstants DimensionStyle::GetPulledOutText2Position ( );
__declspec(implementation_key(1581)) void DimensionStyle::PutDisplayDegreeSymbolOnNumericTolerance ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1582)) VARIANT_BOOL DimensionStyle::GetDisplayDegreeSymbolOnNumericTolerance ( );
__declspec(implementation_key(1583)) void DimensionStyle::PutZeroInchesForFTIN ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1584)) VARIANT_BOOL DimensionStyle::GetZeroInchesForFTIN ( );
__declspec(implementation_key(1585)) void DimensionStyle::PutSymbolFont ( enum DimStyleSymbolFontConstants _arg1 );
__declspec(implementation_key(1586)) enum DimStyleSymbolFontConstants DimensionStyle::GetSymbolFont ( );
__declspec(implementation_key(1587)) void DimensionStyle::PutCalloutTextAspectRatio ( double _arg1 );
__declspec(implementation_key(1588)) double DimensionStyle::GetCalloutTextAspectRatio ( );
__declspec(implementation_key(1589)) void DimensionStyle::PutDatumTerminatorGap ( double _arg1 );
__declspec(implementation_key(1590)) double DimensionStyle::GetDatumTerminatorGap ( );
__declspec(implementation_key(1591)) void DimensionStyle::PutDatumFrameShape ( enum DimStyleDatumFrameShapeConstants _arg1 );
__declspec(implementation_key(1592)) enum DimStyleDatumFrameShapeConstants DimensionStyle::GetDatumFrameShape ( );
__declspec(implementation_key(1593)) void DimensionStyle::PutDisplayCoordinateOriginText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1594)) VARIANT_BOOL DimensionStyle::GetDisplayCoordinateOriginText ( );
__declspec(implementation_key(1595)) void DimensionStyle::PutPlacePrefixInsideBasicDimensionBox ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1596)) VARIANT_BOOL DimensionStyle::GetPlacePrefixInsideBasicDimensionBox ( );
__declspec(implementation_key(1597)) void DimensionStyle::PutSecondaryUnitSeparator ( enum DimStyleSecondaryUnitSeparatorConstants _arg1 );
__declspec(implementation_key(1598)) enum DimStyleSecondaryUnitSeparatorConstants DimensionStyle::GetSecondaryUnitSeparator ( );
__declspec(implementation_key(1599)) void DimensionStyle::PutWeldSymbolLineWidth ( double _arg1 );
__declspec(implementation_key(1600)) double DimensionStyle::GetWeldSymbolLineWidth ( );
__declspec(implementation_key(1601)) void DimensionStyle::PutThreeSidedSymbolOffsetGap ( double _arg1 );
__declspec(implementation_key(1602)) double DimensionStyle::GetThreeSidedSymbolOffsetGap ( );
__declspec(implementation_key(1603)) void DimensionStyle::PutHoleShaftToleranceSeparatorType ( enum DimHoleShaftSeparatorTypeConstants _arg1 );
__declspec(implementation_key(1604)) enum DimHoleShaftSeparatorTypeConstants DimensionStyle::GetHoleShaftToleranceSeparatorType ( );
__declspec(implementation_key(1605)) void DimensionStyle::PutToleranceTextVerticalAlignment ( enum TextVerticalAlignmentConstants _arg1 );
__declspec(implementation_key(1606)) enum TextVerticalAlignmentConstants DimensionStyle::GetToleranceTextVerticalAlignment ( );
__declspec(implementation_key(1607)) void DimensionStyle::PutToleranceTextHorizontalAlignment ( enum DimToleranceTextHorizontalAlignOptionsConstants _arg1 );
__declspec(implementation_key(1608)) enum DimToleranceTextHorizontalAlignOptionsConstants DimensionStyle::GetToleranceTextHorizontalAlignment ( );
__declspec(implementation_key(1609)) void DimensionStyle::PutUseTextSizeForCombinedTolValueDisplay ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1610)) VARIANT_BOOL DimensionStyle::GetUseTextSizeForCombinedTolValueDisplay ( );
__declspec(implementation_key(1611)) void DimensionStyle::PutDatumFrameLineTermThickness ( double _arg1 );
__declspec(implementation_key(1612)) double DimensionStyle::GetDatumFrameLineTermThickness ( );
__declspec(implementation_key(1613)) void DimensionStyle::PutDatumTargetTerminatorType ( enum DimDatumTargetTermTypeConstants _arg1 );
__declspec(implementation_key(1614)) enum DimDatumTargetTermTypeConstants DimensionStyle::GetDatumTargetTerminatorType ( );
__declspec(implementation_key(1615)) void DimensionStyle::PutPinSymbolTerminatorType ( enum DimPinSymbolTermTypeConstants _arg1 );
__declspec(implementation_key(1616)) enum DimPinSymbolTermTypeConstants DimensionStyle::GetPinSymbolTerminatorType ( );
__declspec(implementation_key(1617)) void DimensionStyle::PutPrimaryLinearToleranceUnits ( enum DimLinearUnitConstants _arg1 );
__declspec(implementation_key(1618)) enum DimLinearUnitConstants DimensionStyle::GetPrimaryLinearToleranceUnits ( );
__declspec(implementation_key(1619)) void DimensionStyle::PutPrimaryLinearToleranceRoundOffType ( enum DimRoundOffTypeConstants _arg1 );
__declspec(implementation_key(1620)) enum DimRoundOffTypeConstants DimensionStyle::GetPrimaryLinearToleranceRoundOffType ( );
__declspec(implementation_key(1621)) void DimensionStyle::PutPrimaryLinearToleranceDecimalRoundOff ( enum DimDecimalRoundOffTypeConstants _arg1 );
__declspec(implementation_key(1622)) enum DimDecimalRoundOffTypeConstants DimensionStyle::GetPrimaryLinearToleranceDecimalRoundOff ( );
__declspec(implementation_key(1623)) void DimensionStyle::PutPrimaryLinearToleranceFractionRoundOff ( enum DimFractionRoundOffTypeConstants _arg1 );
__declspec(implementation_key(1624)) enum DimFractionRoundOffTypeConstants DimensionStyle::GetPrimaryLinearToleranceFractionRoundOff ( );
__declspec(implementation_key(1625)) void DimensionStyle::PutPrimaryLinearToleranceUnitLabel ( _bstr_t _arg1 );
__declspec(implementation_key(1626)) _bstr_t DimensionStyle::GetPrimaryLinearToleranceUnitLabel ( );
__declspec(implementation_key(1627)) void DimensionStyle::PutPrimaryLinearToleranceSubunitsLabel ( _bstr_t _arg1 );
__declspec(implementation_key(1628)) _bstr_t DimensionStyle::GetPrimaryLinearToleranceSubunitsLabel ( );
__declspec(implementation_key(1629)) void DimensionStyle::PutPrimaryLinearToleranceMaximumSubunits ( int _arg1 );
__declspec(implementation_key(1630)) int DimensionStyle::GetPrimaryLinearToleranceMaximumSubunits ( );
__declspec(implementation_key(1631)) void DimensionStyle::PutPrimaryLinearToleranceFractionSeparator ( _bstr_t _arg1 );
__declspec(implementation_key(1632)) _bstr_t DimensionStyle::GetPrimaryLinearToleranceFractionSeparator ( );
__declspec(implementation_key(1633)) void DimensionStyle::PutAngularToleranceUnits ( enum DimAngularUnitConstants _arg1 );
__declspec(implementation_key(1634)) enum DimAngularUnitConstants DimensionStyle::GetAngularToleranceUnits ( );
__declspec(implementation_key(1635)) void DimensionStyle::PutAngularToleranceRoundOffType ( enum DimRoundOffTypeConstants _arg1 );
__declspec(implementation_key(1636)) enum DimRoundOffTypeConstants DimensionStyle::GetAngularToleranceRoundOffType ( );
__declspec(implementation_key(1637)) void DimensionStyle::PutAngularToleranceDMSRoundOff ( enum DimDMSRoundOffTypeConstants _arg1 );
__declspec(implementation_key(1638)) enum DimDMSRoundOffTypeConstants DimensionStyle::GetAngularToleranceDMSRoundOff ( );
__declspec(implementation_key(1639)) void DimensionStyle::PutAngularToleranceDecimalRoundOff ( enum DimDecimalRoundOffTypeConstants _arg1 );
__declspec(implementation_key(1640)) enum DimDecimalRoundOffTypeConstants DimensionStyle::GetAngularToleranceDecimalRoundOff ( );
__declspec(implementation_key(1641)) void DimensionStyle::PutAngularToleranceFractionRoundOff ( enum DimFractionRoundOffTypeConstants _arg1 );
__declspec(implementation_key(1642)) enum DimFractionRoundOffTypeConstants DimensionStyle::GetAngularToleranceFractionRoundOff ( );
__declspec(implementation_key(1643)) void DimensionStyle::PutSecondaryLinearToleranceUnits ( enum DimLinearUnitConstants _arg1 );
__declspec(implementation_key(1644)) enum DimLinearUnitConstants DimensionStyle::GetSecondaryLinearToleranceUnits ( );
__declspec(implementation_key(1645)) void DimensionStyle::PutSecondaryLinearToleranceRoundOffType ( enum DimRoundOffTypeConstants _arg1 );
__declspec(implementation_key(1646)) enum DimRoundOffTypeConstants DimensionStyle::GetSecondaryLinearToleranceRoundOffType ( );
__declspec(implementation_key(1647)) void DimensionStyle::PutSecondaryLinearToleranceDecimalRoundOff ( enum DimDecimalRoundOffTypeConstants _arg1 );
__declspec(implementation_key(1648)) enum DimDecimalRoundOffTypeConstants DimensionStyle::GetSecondaryLinearToleranceDecimalRoundOff ( );
__declspec(implementation_key(1649)) void DimensionStyle::PutSecondaryLinearToleranceFractionRoundOff ( enum DimFractionRoundOffTypeConstants _arg1 );
__declspec(implementation_key(1650)) enum DimFractionRoundOffTypeConstants DimensionStyle::GetSecondaryLinearToleranceFractionRoundOff ( );
__declspec(implementation_key(1651)) void DimensionStyle::PutSecondaryLinearToleranceUnitLabel ( _bstr_t _arg1 );
__declspec(implementation_key(1652)) _bstr_t DimensionStyle::GetSecondaryLinearToleranceUnitLabel ( );
__declspec(implementation_key(1653)) void DimensionStyle::PutSecondaryLinearToleranceSubunitsLabel ( _bstr_t _arg1 );
__declspec(implementation_key(1654)) _bstr_t DimensionStyle::GetSecondaryLinearToleranceSubunitsLabel ( );
__declspec(implementation_key(1655)) void DimensionStyle::PutSecondaryLinearToleranceMaximumSubunits ( int _arg1 );
__declspec(implementation_key(1656)) int DimensionStyle::GetSecondaryLinearToleranceMaximumSubunits ( );
__declspec(implementation_key(1657)) void DimensionStyle::PutSecondaryLinearToleranceFractionSeparator ( _bstr_t _arg1 );
__declspec(implementation_key(1658)) _bstr_t DimensionStyle::GetSecondaryLinearToleranceFractionSeparator ( );
__declspec(implementation_key(1659)) void DimensionStyle::PutSecondaryLinearFractionSeparator ( _bstr_t _arg1 );
__declspec(implementation_key(1660)) _bstr_t DimensionStyle::GetSecondaryLinearFractionSeparator ( );
__declspec(implementation_key(1661)) void DimensionStyle::PutDualUnitPosition ( enum DimDualUnitPositionConstants _arg1 );
__declspec(implementation_key(1662)) enum DimDualUnitPositionConstants DimensionStyle::GetDualUnitPosition ( );
__declspec(implementation_key(1663)) void DimensionStyle::PutDualUnitJustification ( enum TextHorizontalAlignmentConstants _arg1 );
__declspec(implementation_key(1664)) enum TextHorizontalAlignmentConstants DimensionStyle::GetDualUnitJustification ( );
__declspec(implementation_key(1665)) void DimensionStyle::PutSmartDepthSlotThru ( _bstr_t _arg1 );
__declspec(implementation_key(1666)) _bstr_t DimensionStyle::GetSmartDepthSlotThru ( );
__declspec(implementation_key(1667)) void DimensionStyle::PutSmartDepthSlotFinite ( _bstr_t _arg1 );
__declspec(implementation_key(1668)) _bstr_t DimensionStyle::GetSmartDepthSlotFinite ( );
__declspec(implementation_key(1669)) void DimensionStyle::PutSlotCalloutSimple ( _bstr_t _arg1 );
__declspec(implementation_key(1670)) _bstr_t DimensionStyle::GetSlotCalloutSimple ( );
__declspec(implementation_key(1671)) void DimensionStyle::PutSlotCalloutCounterbore ( _bstr_t _arg1 );
__declspec(implementation_key(1672)) _bstr_t DimensionStyle::GetSlotCalloutCounterbore ( );
__declspec(implementation_key(1673)) void DimensionStyle::PutCoordinateTextOrientation ( enum DimTextOrientationConstants _arg1 );
__declspec(implementation_key(1674)) enum DimTextOrientationConstants DimensionStyle::GetCoordinateTextOrientation ( );
__declspec(implementation_key(1675)) void DimensionStyle::PutEnableAutoJogForCoordinate ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1676)) VARIANT_BOOL DimensionStyle::GetEnableAutoJogForCoordinate ( );
__declspec(implementation_key(1677)) void DimensionStyle::PutAllowNegativeValueForCoordinate ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1678)) VARIANT_BOOL DimensionStyle::GetAllowNegativeValueForCoordinate ( );
__declspec(implementation_key(1679)) void DimensionStyle::PutAllowOriginValueChangeForCoordinate ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1680)) VARIANT_BOOL DimensionStyle::GetAllowOriginValueChangeForCoordinate ( );
__declspec(implementation_key(1681)) void DimensionStyle::PutShowOriginLineForCoordinate ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1682)) VARIANT_BOOL DimensionStyle::GetShowOriginLineForCoordinate ( );
__declspec(implementation_key(1683)) void DimensionStyle::PutOverlineExtension ( double _arg1 );
__declspec(implementation_key(1684)) double DimensionStyle::GetOverlineExtension ( );
__declspec(implementation_key(1685)) void DimensionStyle::PutSuppressSymmetricDiameterSymbol ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1686)) VARIANT_BOOL DimensionStyle::GetSuppressSymmetricDiameterSymbol ( );
__declspec(implementation_key(1687)) void DimensionStyle::PutUnderlineSymbolAndPrefix ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1688)) VARIANT_BOOL DimensionStyle::GetUnderlineSymbolAndPrefix ( );
__declspec(implementation_key(1689)) void DimensionStyle::PutInitialStackPitch ( double _arg1 );
__declspec(implementation_key(1690)) double DimensionStyle::GetInitialStackPitch ( );
__declspec(implementation_key(1691)) IDispatchPtr DimensionStyle::GetAttributeSets ( );
__declspec(implementation_key(1692)) VARIANT_BOOL DimensionStyle::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(1693)) void DimensionStyle::PutHoleCalloutCounterdrill ( _bstr_t _arg1 );
__declspec(implementation_key(1694)) _bstr_t DimensionStyle::GetHoleCalloutCounterdrill ( );
__declspec(implementation_key(1695)) void DimensionStyle::PutHoleCalloutCounterdrillThreaded ( _bstr_t _arg1 );
__declspec(implementation_key(1696)) _bstr_t DimensionStyle::GetHoleCalloutCounterdrillThreaded ( );
__declspec(implementation_key(1697)) void DimensionStyle::PutPrimaryStackFraction ( enum DimStackFractionTypeConstants _arg1 );
__declspec(implementation_key(1698)) enum DimStackFractionTypeConstants DimensionStyle::GetPrimaryStackFraction ( );
__declspec(implementation_key(1699)) void DimensionStyle::PutSecondaryStackFraction ( enum DimStackFractionTypeConstants _arg1 );
__declspec(implementation_key(1700)) enum DimStackFractionTypeConstants DimensionStyle::GetSecondaryStackFraction ( );
__declspec(implementation_key(1701)) void DimensionStyle::PutPrimaryStackFractionSize ( enum DimStackFractionSizeConstants _arg1 );
__declspec(implementation_key(1702)) enum DimStackFractionSizeConstants DimensionStyle::GetPrimaryStackFractionSize ( );
__declspec(implementation_key(1703)) void DimensionStyle::PutSecondaryStackFractionSize ( enum DimStackFractionSizeConstants _arg1 );
__declspec(implementation_key(1704)) enum DimStackFractionSizeConstants DimensionStyle::GetSecondaryStackFractionSize ( );
__declspec(implementation_key(1705)) void DimensionStyle::PutShowHideReferenceGeometry ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1706)) VARIANT_BOOL DimensionStyle::GetShowHideReferenceGeometry ( );
__declspec(implementation_key(1707)) void DimensionStyle::PutEnableAngularJog ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(1708)) VARIANT_BOOL DimensionStyle::GetEnableAngularJog ( );
__declspec(implementation_key(1709)) void _IDimensionStyleAuto::PutName ( _bstr_t Name );
__declspec(implementation_key(1710)) _bstr_t _IDimensionStyleAuto::GetName ( );
__declspec(implementation_key(1711)) void _IDimensionStyleAuto::PutPrimaryUnits ( enum DimLinearUnitConstants val );
__declspec(implementation_key(1712)) enum DimLinearUnitConstants _IDimensionStyleAuto::GetPrimaryUnits ( );
__declspec(implementation_key(1713)) void _IDimensionStyleAuto::PutRoundOffType ( enum DimRoundOffTypeConstants val );
__declspec(implementation_key(1714)) enum DimRoundOffTypeConstants _IDimensionStyleAuto::GetRoundOffType ( );
__declspec(implementation_key(1715)) void _IDimensionStyleAuto::PutDelimiter ( enum DimDelimiterTypeConstants val );
__declspec(implementation_key(1716)) enum DimDelimiterTypeConstants _IDimensionStyleAuto::GetDelimiter ( );
__declspec(implementation_key(1717)) void _IDimensionStyleAuto::PutPrimaryDecimalRoundOff ( enum DimDecimalRoundOffTypeConstants val );
__declspec(implementation_key(1718)) enum DimDecimalRoundOffTypeConstants _IDimensionStyleAuto::GetPrimaryDecimalRoundOff ( );
__declspec(implementation_key(1719)) void _IDimensionStyleAuto::PutPrimaryFractionRoundOff ( enum DimFractionRoundOffTypeConstants val );
__declspec(implementation_key(1720)) enum DimFractionRoundOffTypeConstants _IDimensionStyleAuto::GetPrimaryFractionRoundOff ( );
__declspec(implementation_key(1721)) void _IDimensionStyleAuto::PutAngularUnits ( enum DimAngularUnitConstants val );
__declspec(implementation_key(1722)) enum DimAngularUnitConstants _IDimensionStyleAuto::GetAngularUnits ( );
__declspec(implementation_key(1723)) void _IDimensionStyleAuto::PutAngularDMSRoundOff ( enum DimDMSRoundOffTypeConstants val );
__declspec(implementation_key(1724)) enum DimDMSRoundOffTypeConstants _IDimensionStyleAuto::GetAngularDMSRoundOff ( );
__declspec(implementation_key(1725)) void _IDimensionStyleAuto::PutAngularDecimalRoundOff ( enum DimDecimalRoundOffTypeConstants val );
__declspec(implementation_key(1726)) enum DimDecimalRoundOffTypeConstants _IDimensionStyleAuto::GetAngularDecimalRoundOff ( );
__declspec(implementation_key(1727)) void _IDimensionStyleAuto::PutAngularFractionRoundOff ( enum DimFractionRoundOffTypeConstants val );
__declspec(implementation_key(1728)) enum DimFractionRoundOffTypeConstants _IDimensionStyleAuto::GetAngularFractionRoundOff ( );
__declspec(implementation_key(1729)) void _IDimensionStyleAuto::PutPrimaryLeadingZeros ( VARIANT_BOOL val );
__declspec(implementation_key(1730)) VARIANT_BOOL _IDimensionStyleAuto::GetPrimaryLeadingZeros ( );
__declspec(implementation_key(1731)) void _IDimensionStyleAuto::PutPrimaryTrailingZeros ( VARIANT_BOOL val );
__declspec(implementation_key(1732)) VARIANT_BOOL _IDimensionStyleAuto::GetPrimaryTrailingZeros ( );
__declspec(implementation_key(1733)) void _IDimensionStyleAuto::PutPrimaryUnitLabel ( _bstr_t val );
__declspec(implementation_key(1734)) _bstr_t _IDimensionStyleAuto::GetPrimaryUnitLabel ( );
__declspec(implementation_key(1735)) void _IDimensionStyleAuto::PutPrimarySubunitsLabel ( _bstr_t val );
__declspec(implementation_key(1736)) _bstr_t _IDimensionStyleAuto::GetPrimarySubunitsLabel ( );
__declspec(implementation_key(1737)) void _IDimensionStyleAuto::PutMaximumSubunits ( int val );
__declspec(implementation_key(1738)) int _IDimensionStyleAuto::GetMaximumSubunits ( );
__declspec(implementation_key(1739)) void _IDimensionStyleAuto::PutDualDisplay ( VARIANT_BOOL val );
__declspec(implementation_key(1740)) VARIANT_BOOL _IDimensionStyleAuto::GetDualDisplay ( );
__declspec(implementation_key(1741)) void _IDimensionStyleAuto::PutSecondaryUnits ( enum DimLinearUnitConstants val );
__declspec(implementation_key(1742)) enum DimLinearUnitConstants _IDimensionStyleAuto::GetSecondaryUnits ( );
__declspec(implementation_key(1743)) void _IDimensionStyleAuto::PutSecondaryUnitRoundOff ( enum DimRoundOffTypeConstants val );
__declspec(implementation_key(1744)) enum DimRoundOffTypeConstants _IDimensionStyleAuto::GetSecondaryUnitRoundOff ( );
__declspec(implementation_key(1745)) void _IDimensionStyleAuto::PutSecondaryDecimalRoundOff ( enum DimDecimalRoundOffTypeConstants val );
__declspec(implementation_key(1746)) enum DimDecimalRoundOffTypeConstants _IDimensionStyleAuto::GetSecondaryDecimalRoundOff ( );
__declspec(implementation_key(1747)) void _IDimensionStyleAuto::PutSecondaryFractionRoundOff ( enum DimFractionRoundOffTypeConstants val );
__declspec(implementation_key(1748)) enum DimFractionRoundOffTypeConstants _IDimensionStyleAuto::GetSecondaryFractionRoundOff ( );
__declspec(implementation_key(1749)) void _IDimensionStyleAuto::PutSecondaryLeadingZeros ( VARIANT_BOOL val );
__declspec(implementation_key(1750)) VARIANT_BOOL _IDimensionStyleAuto::GetSecondaryLeadingZeros ( );
__declspec(implementation_key(1751)) void _IDimensionStyleAuto::PutSecondaryTrailingZeros ( VARIANT_BOOL val );
__declspec(implementation_key(1752)) VARIANT_BOOL _IDimensionStyleAuto::GetSecondaryTrailingZeros ( );
__declspec(implementation_key(1753)) void _IDimensionStyleAuto::PutSecondaryUnitLabel ( _bstr_t val );
__declspec(implementation_key(1754)) _bstr_t _IDimensionStyleAuto::GetSecondaryUnitLabel ( );
__declspec(implementation_key(1755)) void _IDimensionStyleAuto::PutSecondarySubunitsLabel ( _bstr_t val );
__declspec(implementation_key(1756)) _bstr_t _IDimensionStyleAuto::GetSecondarySubunitsLabel ( );
__declspec(implementation_key(1757)) void _IDimensionStyleAuto::PutHeight ( double val );
__declspec(implementation_key(1758)) double _IDimensionStyleAuto::GetHeight ( );
__declspec(implementation_key(1759)) void _IDimensionStyleAuto::PutRatio ( double val );
__declspec(implementation_key(1760)) double _IDimensionStyleAuto::GetRatio ( );
__declspec(implementation_key(1761)) void _IDimensionStyleAuto::PutTextWeight ( double val );
__declspec(implementation_key(1762)) double _IDimensionStyleAuto::GetTextWeight ( );
__declspec(implementation_key(1763)) void _IDimensionStyleAuto::PutFont ( _bstr_t val );
__declspec(implementation_key(1764)) _bstr_t _IDimensionStyleAuto::GetFont ( );
__declspec(implementation_key(1765)) void _IDimensionStyleAuto::PutFontStyle ( enum DimTextFontStyleConstants val );
__declspec(implementation_key(1766)) enum DimTextFontStyleConstants _IDimensionStyleAuto::GetFontStyle ( );
__declspec(implementation_key(1767)) void _IDimensionStyleAuto::PutTextOrientation ( enum DimTextOrientationConstants val );
__declspec(implementation_key(1768)) enum DimTextOrientationConstants _IDimensionStyleAuto::GetTextOrientation ( );
__declspec(implementation_key(1769)) void _IDimensionStyleAuto::PutTextPosition ( enum DimTextPositionConstants val );
__declspec(implementation_key(1770)) enum DimTextPositionConstants _IDimensionStyleAuto::GetTextPosition ( );
__declspec(implementation_key(1771)) void _IDimensionStyleAuto::PutLimitTextArrangement ( enum DimLimitTextArrangmentConstants val );
__declspec(implementation_key(1772)) enum DimLimitTextArrangmentConstants _IDimensionStyleAuto::GetLimitTextArrangement ( );
__declspec(implementation_key(1773)) void _IDimensionStyleAuto::PutToleranceHeightRatio ( double val );
__declspec(implementation_key(1774)) double _IDimensionStyleAuto::GetToleranceHeightRatio ( );
__declspec(implementation_key(1775)) void _IDimensionStyleAuto::PutToleranceWeight ( double val );
__declspec(implementation_key(1776)) double _IDimensionStyleAuto::GetToleranceWeight ( );
__declspec(implementation_key(1777)) void _IDimensionStyleAuto::PutNTSSymbol ( enum DimNTSTypeConstants val );
__declspec(implementation_key(1778)) enum DimNTSTypeConstants _IDimensionStyleAuto::GetNTSSymbol ( );
__declspec(implementation_key(1779)) void _IDimensionStyleAuto::PutTerminatorType ( enum DimTermTypeConstants val );
__declspec(implementation_key(1780)) enum DimTermTypeConstants _IDimensionStyleAuto::GetTerminatorType ( );
__declspec(implementation_key(1781)) void _IDimensionStyleAuto::PutTerminatorDisplay ( enum DimTermDisplayTypeConstants val );
__declspec(implementation_key(1782)) enum DimTermDisplayTypeConstants _IDimensionStyleAuto::GetTerminatorDisplay ( );
__declspec(implementation_key(1783)) void _IDimensionStyleAuto::PutOriginTerminatorType ( enum DimTermTypeConstants val );
__declspec(implementation_key(1784)) enum DimTermTypeConstants _IDimensionStyleAuto::GetOriginTerminatorType ( );
__declspec(implementation_key(1785)) void _IDimensionStyleAuto::PutFreeSpaceTerminatorType ( enum DimTermTypeConstants val );
__declspec(implementation_key(1786)) enum DimTermTypeConstants _IDimensionStyleAuto::GetFreeSpaceTerminatorType ( );
__declspec(implementation_key(1787)) void _IDimensionStyleAuto::PutDatumTerminatorType ( enum DimDatumTermTypeConstants val );
__declspec(implementation_key(1788)) enum DimDatumTermTypeConstants _IDimensionStyleAuto::GetDatumTerminatorType ( );
__declspec(implementation_key(1789)) void _IDimensionStyleAuto::PutTerminatorSize ( double val );
__declspec(implementation_key(1790)) double _IDimensionStyleAuto::GetTerminatorSize ( );
__declspec(implementation_key(1791)) void _IDimensionStyleAuto::PutTerminatorInsideLimit ( double val );
__declspec(implementation_key(1792)) double _IDimensionStyleAuto::GetTerminatorInsideLimit ( );
__declspec(implementation_key(1793)) void _IDimensionStyleAuto::PutLineWidth ( double val );
__declspec(implementation_key(1794)) double _IDimensionStyleAuto::GetLineWidth ( );
__declspec(implementation_key(1795)) void _IDimensionStyleAuto::PutProjectionExtensionGap ( double val );
__declspec(implementation_key(1796)) double _IDimensionStyleAuto::GetProjectionExtensionGap ( );
__declspec(implementation_key(1797)) void _IDimensionStyleAuto::PutProjectionOffsetGap ( double val );
__declspec(implementation_key(1798)) double _IDimensionStyleAuto::GetProjectionOffsetGap ( );
__declspec(implementation_key(1799)) void _IDimensionStyleAuto::PutProjectionOffsetGapAlignment ( VARIANT_BOOL val );
__declspec(implementation_key(1800)) VARIANT_BOOL _IDimensionStyleAuto::GetProjectionOffsetGapAlignment ( );
__declspec(implementation_key(1801)) void _IDimensionStyleAuto::PutProjectionAngle ( double val );
__declspec(implementation_key(1802)) double _IDimensionStyleAuto::GetProjectionAngle ( );
__declspec(implementation_key(1803)) void _IDimensionStyleAuto::PutLineConnect ( VARIANT_BOOL val );
__declspec(implementation_key(1804)) VARIANT_BOOL _IDimensionStyleAuto::GetLineConnect ( );
__declspec(implementation_key(1805)) void _IDimensionStyleAuto::PutStackPitch ( double val );
__declspec(implementation_key(1806)) double _IDimensionStyleAuto::GetStackPitch ( );
__declspec(implementation_key(1807)) void _IDimensionStyleAuto::PutLeaderLineLength ( double val );
__declspec(implementation_key(1808)) double _IDimensionStyleAuto::GetLeaderLineLength ( );
__declspec(implementation_key(1809)) void _IDimensionStyleAuto::PutCoordinateAutoJog ( VARIANT_BOOL val );
__declspec(implementation_key(1810)) VARIANT_BOOL _IDimensionStyleAuto::GetCoordinateAutoJog ( );
__declspec(implementation_key(1811)) void _IDimensionStyleAuto::PutCoordinateStackPitch ( double val );
__declspec(implementation_key(1812)) double _IDimensionStyleAuto::GetCoordinateStackPitch ( );
__declspec(implementation_key(1813)) void _IDimensionStyleAuto::PutCommonOrigin ( enum DimCommonOriginTypeConstants val );
__declspec(implementation_key(1814)) enum DimCommonOriginTypeConstants _IDimensionStyleAuto::GetCommonOrigin ( );
__declspec(implementation_key(1815)) void _IDimensionStyleAuto::PutCoordinateTextPosition ( enum DimCoordTextPositionConstants val );
__declspec(implementation_key(1816)) enum DimCoordTextPositionConstants _IDimensionStyleAuto::GetCoordinateTextPosition ( );
__declspec(implementation_key(1817)) void _IDimensionStyleAuto::PutSymbolPosition ( enum DimSymbolPositionConstants val );
__declspec(implementation_key(1818)) enum DimSymbolPositionConstants _IDimensionStyleAuto::GetSymbolPosition ( );
__declspec(implementation_key(1819)) void _IDimensionStyleAuto::PutAutoSuppressDiameter ( VARIANT_BOOL val );
__declspec(implementation_key(1820)) VARIANT_BOOL _IDimensionStyleAuto::GetAutoSuppressDiameter ( );
__declspec(implementation_key(1821)) void _IDimensionStyleAuto::PutDimensionScaleMode ( enum DimScaleModeConstants val );
__declspec(implementation_key(1822)) enum DimScaleModeConstants _IDimensionStyleAuto::GetDimensionScaleMode ( );
__declspec(implementation_key(1823)) void _IDimensionStyleAuto::PutDimensionScale ( double val );
__declspec(implementation_key(1824)) double _IDimensionStyleAuto::GetDimensionScale ( );
__declspec(implementation_key(1825)) void _IDimensionStyleAuto::PutErrorColor ( long val );
__declspec(implementation_key(1826)) long _IDimensionStyleAuto::GetErrorColor ( );
__declspec(implementation_key(1827)) void _IDimensionStyleAuto::PutDrivingColor ( long val );
__declspec(implementation_key(1828)) long _IDimensionStyleAuto::GetDrivingColor ( );
__declspec(implementation_key(1829)) void _IDimensionStyleAuto::PutDrivenColor ( long val );
__declspec(implementation_key(1830)) long _IDimensionStyleAuto::GetDrivenColor ( );
__declspec(implementation_key(1831)) void _IDimensionStyleAuto::PutAutoCenterLine ( VARIANT_BOOL val );
__declspec(implementation_key(1832)) VARIANT_BOOL _IDimensionStyleAuto::GetAutoCenterLine ( );
__declspec(implementation_key(1833)) void _IDimensionStyleAuto::PutAutoCenterProjectionLine ( VARIANT_BOOL val );
__declspec(implementation_key(1834)) VARIANT_BOOL _IDimensionStyleAuto::GetAutoCenterProjectionLine ( );
__declspec(implementation_key(1835)) void _IDimensionStyleAuto::PutProjectionLineDisplay ( enum DimProjDisplayTypeConstants val );
__declspec(implementation_key(1836)) enum DimProjDisplayTypeConstants _IDimensionStyleAuto::GetProjectionLineDisplay ( );
__declspec(implementation_key(1837)) void _IDimensionStyleAuto::PutProjectionLineDisplayForIntersectionPoint ( enum DimProjDisplayTypeConstants val );
__declspec(implementation_key(1838)) enum DimProjDisplayTypeConstants _IDimensionStyleAuto::GetProjectionLineDisplayForIntersectionPoint ( );
__declspec(implementation_key(1839)) void _IDimensionStyleAuto::PutTextClearanceGap ( double val );
__declspec(implementation_key(1840)) double _IDimensionStyleAuto::GetTextClearanceGap ( );
__declspec(implementation_key(1841)) void _IDimensionStyleAuto::PutDualModeVerticalGap ( double val );
__declspec(implementation_key(1842)) double _IDimensionStyleAuto::GetDualModeVerticalGap ( );
__declspec(implementation_key(1843)) void _IDimensionStyleAuto::PutCharacterPitch ( double val );
__declspec(implementation_key(1844)) double _IDimensionStyleAuto::GetCharacterPitch ( );
__declspec(implementation_key(1845)) void _IDimensionStyleAuto::PutLineSpacing ( double val );
__declspec(implementation_key(1846)) double _IDimensionStyleAuto::GetLineSpacing ( );
__declspec(implementation_key(1847)) void _IDimensionStyleAuto::PutAboveGap ( double val );
__declspec(implementation_key(1848)) double _IDimensionStyleAuto::GetAboveGap ( );
__declspec(implementation_key(1849)) void _IDimensionStyleAuto::PutHorizontalToleranceGap ( double val );
__declspec(implementation_key(1850)) double _IDimensionStyleAuto::GetHorizontalToleranceGap ( );
__declspec(implementation_key(1851)) void _IDimensionStyleAuto::PutVerticalToleranceGap ( double val );
__declspec(implementation_key(1852)) double _IDimensionStyleAuto::GetVerticalToleranceGap ( );
__declspec(implementation_key(1853)) void _IDimensionStyleAuto::PutVerticalLimitsGap ( double val );
__declspec(implementation_key(1854)) double _IDimensionStyleAuto::GetVerticalLimitsGap ( );
__declspec(implementation_key(1855)) void _IDimensionStyleAuto::PutHorizontalBoxGap ( double val );
__declspec(implementation_key(1856)) double _IDimensionStyleAuto::GetHorizontalBoxGap ( );
__declspec(implementation_key(1857)) void _IDimensionStyleAuto::PutVerticalBoxGap ( double val );
__declspec(implementation_key(1858)) double _IDimensionStyleAuto::GetVerticalBoxGap ( );
__declspec(implementation_key(1859)) void _IDimensionStyleAuto::PutPrefixSuffixGap ( double val );
__declspec(implementation_key(1860)) double _IDimensionStyleAuto::GetPrefixSuffixGap ( );
__declspec(implementation_key(1861)) void _IDimensionStyleAuto::PutSymbolGap ( double val );
__declspec(implementation_key(1862)) double _IDimensionStyleAuto::GetSymbolGap ( );
__declspec(implementation_key(1863)) void _IDimensionStyleAuto::PutMaximumViewAngle ( double val );
__declspec(implementation_key(1864)) double _IDimensionStyleAuto::GetMaximumViewAngle ( );
__declspec(implementation_key(1865)) void _IDimensionStyleAuto::PutProjectionToleranceZonePosition ( enum DimProjTolZonePositionConstants val );
__declspec(implementation_key(1866)) enum DimProjTolZonePositionConstants _IDimensionStyleAuto::GetProjectionToleranceZonePosition ( );
__declspec(implementation_key(1867)) void _IDimensionStyleAuto::PutDatumFrameDashes ( VARIANT_BOOL val );
__declspec(implementation_key(1868)) VARIANT_BOOL _IDimensionStyleAuto::GetDatumFrameDashes ( );
__declspec(implementation_key(1869)) void _IDimensionStyleAuto::PutViewTextRatio ( double val );
__declspec(implementation_key(1870)) double _IDimensionStyleAuto::GetViewTextRatio ( );
__declspec(implementation_key(1871)) void _IDimensionStyleAuto::PutViewTerminatorRatio ( double val );
__declspec(implementation_key(1872)) double _IDimensionStyleAuto::GetViewTerminatorRatio ( );
__declspec(implementation_key(1873)) void _IDimensionStyleAuto::PutViewLineWidth ( double val );
__declspec(implementation_key(1874)) double _IDimensionStyleAuto::GetViewLineWidth ( );
__declspec(implementation_key(1875)) void _IDimensionStyleAuto::PutViewLineType ( _bstr_t val );
__declspec(implementation_key(1876)) _bstr_t _IDimensionStyleAuto::GetViewLineType ( );
__declspec(implementation_key(1877)) void _IDimensionStyleAuto::PutViewCuttingPlaneLineDisplay ( enum DimViewCuttingPlaneDisplayTypeConstants val );
__declspec(implementation_key(1878)) enum DimViewCuttingPlaneDisplayTypeConstants _IDimensionStyleAuto::GetViewCuttingPlaneLineDisplay ( );
__declspec(implementation_key(1879)) void _IDimensionStyleAuto::PutViewPlaneLineDisplay ( enum DimViewPlaneDisplayTypeConstants val );
__declspec(implementation_key(1880)) enum DimViewPlaneDisplayTypeConstants _IDimensionStyleAuto::GetViewPlaneLineDisplay ( );
__declspec(implementation_key(1881)) void _IDimensionStyleAuto::PutViewCaptionLocation ( enum DimViewCaptionLocationConstants val );
__declspec(implementation_key(1882)) enum DimViewCaptionLocationConstants _IDimensionStyleAuto::GetViewCaptionLocation ( );
__declspec(implementation_key(1883)) void _IDimensionStyleAuto::PutViewCPLCaptionLocation ( enum DimViewCPLCaptionLocationConstants val );
__declspec(implementation_key(1884)) enum DimViewCPLCaptionLocationConstants _IDimensionStyleAuto::GetViewCPLCaptionLocation ( );
__declspec(implementation_key(1885)) void _IDimensionStyleAuto::PutViewSuffixAsPrefix ( VARIANT_BOOL val );
__declspec(implementation_key(1886)) VARIANT_BOOL _IDimensionStyleAuto::GetViewSuffixAsPrefix ( );
__declspec(implementation_key(1887)) void _IDimensionStyleAuto::PutViewThinTerminator ( VARIANT_BOOL val );
__declspec(implementation_key(1888)) VARIANT_BOOL _IDimensionStyleAuto::GetViewThinTerminator ( );
__declspec(implementation_key(1889)) void _IDimensionStyleAuto::PutViewVPLCaptionAtEnd ( VARIANT_BOOL val );
__declspec(implementation_key(1890)) VARIANT_BOOL _IDimensionStyleAuto::GetViewVPLCaptionAtEnd ( );
__declspec(implementation_key(1891)) void _IDimensionStyleAuto::PutOffsetLeaderType ( enum DimOffsetLeaderTypeConstants val );
__declspec(implementation_key(1892)) enum DimOffsetLeaderTypeConstants _IDimensionStyleAuto::GetOffsetLeaderType ( );
__declspec(implementation_key(1893)) void _IDimensionStyleAuto::PutSecondaryToleranceEquivalent ( VARIANT_BOOL val );
__declspec(implementation_key(1894)) VARIANT_BOOL _IDimensionStyleAuto::GetSecondaryToleranceEquivalent ( );
__declspec(implementation_key(1895)) void _IDimensionStyleAuto::PutCenterLineType ( _bstr_t val );
__declspec(implementation_key(1896)) _bstr_t _IDimensionStyleAuto::GetCenterLineType ( );
__declspec(implementation_key(1897)) _bstr_t _IDimensionStyleAuto::GetDescription ( );
__declspec(implementation_key(1898)) void _IDimensionStyleAuto::PutParent ( _bstr_t Name );
__declspec(implementation_key(1899)) _bstr_t _IDimensionStyleAuto::GetParent ( );
__declspec(implementation_key(1900)) void _IDimensionStyleAuto::PutCenterMarkSize ( double val );
__declspec(implementation_key(1901)) double _IDimensionStyleAuto::GetCenterMarkSize ( );
__declspec(implementation_key(1902)) void _IDimensionStyleAuto::PutAutoPhase ( VARIANT_BOOL val );
__declspec(implementation_key(1903)) VARIANT_BOOL _IDimensionStyleAuto::GetAutoPhase ( );
__declspec(implementation_key(1904)) void _IDimensionStyleAuto::PutRoundUp ( enum DimRoundUpTypeConstants val );
__declspec(implementation_key(1905)) enum DimRoundUpTypeConstants _IDimensionStyleAuto::GetRoundUp ( );
__declspec(implementation_key(1906)) void _IDimensionStyleAuto::PutSecondaryLinearRoundOffType ( enum DimRoundOffTypeConstants val );
__declspec(implementation_key(1907)) enum DimRoundOffTypeConstants _IDimensionStyleAuto::GetSecondaryLinearRoundOffType ( );
__declspec(implementation_key(1908)) void _IDimensionStyleAuto::PutAngularRoundOffType ( enum DimRoundOffTypeConstants val );
__declspec(implementation_key(1909)) enum DimRoundOffTypeConstants _IDimensionStyleAuto::GetAngularRoundOffType ( );
__declspec(implementation_key(1910)) void _IDimensionStyleAuto::PutCenterMarkExtension ( double val );
__declspec(implementation_key(1911)) double _IDimensionStyleAuto::GetCenterMarkExtension ( );
__declspec(implementation_key(1912)) void _IDimensionStyleAuto::PutChamferUse45DegreeCharacter ( VARIANT_BOOL val );
__declspec(implementation_key(1913)) VARIANT_BOOL _IDimensionStyleAuto::GetChamferUse45DegreeCharacter ( );
__declspec(implementation_key(1914)) void _IDimensionStyleAuto::PutSmartDepthHoleThru ( _bstr_t val );
__declspec(implementation_key(1915)) _bstr_t _IDimensionStyleAuto::GetSmartDepthHoleThru ( );
__declspec(implementation_key(1916)) void _IDimensionStyleAuto::PutSmartDepthHoleFinite ( _bstr_t val );
__declspec(implementation_key(1917)) _bstr_t _IDimensionStyleAuto::GetSmartDepthHoleFinite ( );
__declspec(implementation_key(1918)) void _IDimensionStyleAuto::PutSmartDepthThreadThru ( _bstr_t val );
__declspec(implementation_key(1919)) _bstr_t _IDimensionStyleAuto::GetSmartDepthThreadThru ( );
__declspec(implementation_key(1920)) void _IDimensionStyleAuto::PutSmartDepthThreadFinite ( _bstr_t val );
__declspec(implementation_key(1921)) _bstr_t _IDimensionStyleAuto::GetSmartDepthThreadFinite ( );
__declspec(implementation_key(1922)) void _IDimensionStyleAuto::PutLowerCaseMultiplicationSymbol ( VARIANT_BOOL val );
__declspec(implementation_key(1923)) VARIANT_BOOL _IDimensionStyleAuto::GetLowerCaseMultiplicationSymbol ( );
__declspec(implementation_key(1924)) void _IDimensionStyleAuto::PutHoleCalloutSimple ( _bstr_t val );
__declspec(implementation_key(1925)) _bstr_t _IDimensionStyleAuto::GetHoleCalloutSimple ( );
__declspec(implementation_key(1926)) void _IDimensionStyleAuto::PutHoleCalloutCounterbore ( _bstr_t val );
__declspec(implementation_key(1927)) _bstr_t _IDimensionStyleAuto::GetHoleCalloutCounterbore ( );
__declspec(implementation_key(1928)) void _IDimensionStyleAuto::PutHoleCalloutCountersink ( _bstr_t val );
__declspec(implementation_key(1929)) _bstr_t _IDimensionStyleAuto::GetHoleCalloutCountersink ( );
__declspec(implementation_key(1930)) void _IDimensionStyleAuto::PutHoleCalloutSimpleThreaded ( _bstr_t val );
__declspec(implementation_key(1931)) _bstr_t _IDimensionStyleAuto::GetHoleCalloutSimpleThreaded ( );
__declspec(implementation_key(1932)) void _IDimensionStyleAuto::PutHoleCalloutCounterboreThreaded ( _bstr_t val );
__declspec(implementation_key(1933)) _bstr_t _IDimensionStyleAuto::GetHoleCalloutCounterboreThreaded ( );
__declspec(implementation_key(1934)) void _IDimensionStyleAuto::PutHoleCalloutCountersinkThreaded ( _bstr_t val );
__declspec(implementation_key(1935)) _bstr_t _IDimensionStyleAuto::GetHoleCalloutCountersinkThreaded ( );
__declspec(implementation_key(1936)) void _IDimensionStyleAuto::PutApplyBreakLineGap ( VARIANT_BOOL val );
__declspec(implementation_key(1937)) VARIANT_BOOL _IDimensionStyleAuto::GetApplyBreakLineGap ( );
__declspec(implementation_key(1938)) void _IDimensionStyleAuto::PutTextAutoFillBackground ( VARIANT_BOOL val );
__declspec(implementation_key(1939)) VARIANT_BOOL _IDimensionStyleAuto::GetTextAutoFillBackground ( );
__declspec(implementation_key(1940)) void _IDimensionStyleAuto::PutPulledOutTextOrientation ( enum DimTextOrientationConstants val );
__declspec(implementation_key(1941)) enum DimTextOrientationConstants _IDimensionStyleAuto::GetPulledOutTextOrientation ( );
__declspec(implementation_key(1942)) void _IDimensionStyleAuto::PutPulledOutTextPosition ( enum DimTextPositionConstants val );
__declspec(implementation_key(1943)) enum DimTextPositionConstants _IDimensionStyleAuto::GetPulledOutTextPosition ( );
__declspec(implementation_key(1944)) void _IDimensionStyleAuto::PutOverridePulledOutText ( VARIANT_BOOL val );
__declspec(implementation_key(1945)) VARIANT_BOOL _IDimensionStyleAuto::GetOverridePulledOutText ( );
__declspec(implementation_key(1946)) void _IDimensionStyleAuto::PutViewLineArrowOffset ( double val );
__declspec(implementation_key(1947)) double _IDimensionStyleAuto::GetViewLineArrowOffset ( );
__declspec(implementation_key(1948)) void _IDimensionStyleAuto::PutViewThickLineLength ( double val );
__declspec(implementation_key(1949)) double _IDimensionStyleAuto::GetViewThickLineLength ( );
__declspec(implementation_key(1950)) void _IDimensionStyleAuto::PutOrigTerminatorSize ( double val );
__declspec(implementation_key(1951)) double _IDimensionStyleAuto::GetOrigTerminatorSize ( );
__declspec(implementation_key(1952)) void _IDimensionStyleAuto::PutConnectorLineType ( _bstr_t val );
__declspec(implementation_key(1953)) _bstr_t _IDimensionStyleAuto::GetConnectorLineType ( );
__declspec(implementation_key(1954)) void _IDimensionStyleAuto::PutConnectorColor ( long val );
__declspec(implementation_key(1955)) long _IDimensionStyleAuto::GetConnectorColor ( );
__declspec(implementation_key(1956)) void _IDimensionStyleAuto::PutConnectorWidth ( double val );
__declspec(implementation_key(1957)) double _IDimensionStyleAuto::GetConnectorWidth ( );
__declspec(implementation_key(1958)) void _IDimensionStyleAuto::PutFractionSeparator ( _bstr_t val );
__declspec(implementation_key(1959)) _bstr_t _IDimensionStyleAuto::GetFractionSeparator ( );
__declspec(implementation_key(1960)) void _IDimensionStyleAuto::PutHeightPMI ( double val );
__declspec(implementation_key(1961)) double _IDimensionStyleAuto::GetHeightPMI ( );
__declspec(implementation_key(1962)) void _IDimensionStyleAuto::PutProjectionBreakGap ( double val );
__declspec(implementation_key(1963)) double _IDimensionStyleAuto::GetProjectionBreakGap ( );
__declspec(implementation_key(1964)) void _IDimensionStyleAuto::PutSecondaryDelimiter ( enum DimDelimiterTypeConstants val );
__declspec(implementation_key(1965)) enum DimDelimiterTypeConstants _IDimensionStyleAuto::GetSecondaryDelimiter ( );
__declspec(implementation_key(1966)) void _IDimensionStyleAuto::PutMatchPrimaryDelimiter ( VARIANT_BOOL val );
__declspec(implementation_key(1967)) VARIANT_BOOL _IDimensionStyleAuto::GetMatchPrimaryDelimiter ( );
__declspec(implementation_key(1968)) void _IDimensionStyleAuto::PutInhibitZeroToleranceDisplay ( VARIANT_BOOL val );
__declspec(implementation_key(1969)) VARIANT_BOOL _IDimensionStyleAuto::GetInhibitZeroToleranceDisplay ( );
__declspec(implementation_key(1970)) void _IDimensionStyleAuto::PutAllAroundMultiplier ( double val );
__declspec(implementation_key(1971)) double _IDimensionStyleAuto::GetAllAroundMultiplier ( );
__declspec(implementation_key(1972)) void _IDimensionStyleAuto::PutOverridePulledOutText2 ( VARIANT_BOOL val );
__declspec(implementation_key(1973)) VARIANT_BOOL _IDimensionStyleAuto::GetOverridePulledOutText2 ( );
__declspec(implementation_key(1974)) void _IDimensionStyleAuto::PutPulledOutText2Orientation ( enum DimTextOrientationConstants val );
__declspec(implementation_key(1975)) enum DimTextOrientationConstants _IDimensionStyleAuto::GetPulledOutText2Orientation ( );
__declspec(implementation_key(1976)) void _IDimensionStyleAuto::PutPulledOutText2Position ( enum DimTextPositionConstants val );
__declspec(implementation_key(1977)) enum DimTextPositionConstants _IDimensionStyleAuto::GetPulledOutText2Position ( );
__declspec(implementation_key(1978)) void _IDimensionStyleAuto::PutDisplayDegreeSymbolOnNumericTolerance ( VARIANT_BOOL val );
__declspec(implementation_key(1979)) VARIANT_BOOL _IDimensionStyleAuto::GetDisplayDegreeSymbolOnNumericTolerance ( );
__declspec(implementation_key(1980)) void _IDimensionStyleAuto::PutZeroInchesForFTIN ( VARIANT_BOOL val );
__declspec(implementation_key(1981)) VARIANT_BOOL _IDimensionStyleAuto::GetZeroInchesForFTIN ( );
__declspec(implementation_key(1982)) void _IDimensionStyleAuto::PutSymbolFont ( enum DimStyleSymbolFontConstants val );
__declspec(implementation_key(1983)) enum DimStyleSymbolFontConstants _IDimensionStyleAuto::GetSymbolFont ( );
__declspec(implementation_key(1984)) void _IDimensionStyleAuto::PutCalloutTextAspectRatio ( double val );
__declspec(implementation_key(1985)) double _IDimensionStyleAuto::GetCalloutTextAspectRatio ( );
__declspec(implementation_key(1986)) void _IDimensionStyleAuto::PutDatumTerminatorGap ( double val );
__declspec(implementation_key(1987)) double _IDimensionStyleAuto::GetDatumTerminatorGap ( );
__declspec(implementation_key(1988)) void _IDimensionStyleAuto::PutDatumFrameShape ( enum DimStyleDatumFrameShapeConstants val );
__declspec(implementation_key(1989)) enum DimStyleDatumFrameShapeConstants _IDimensionStyleAuto::GetDatumFrameShape ( );
__declspec(implementation_key(1990)) void _IDimensionStyleAuto::PutDisplayCoordinateOriginText ( VARIANT_BOOL val );
__declspec(implementation_key(1991)) VARIANT_BOOL _IDimensionStyleAuto::GetDisplayCoordinateOriginText ( );
__declspec(implementation_key(1992)) void _IDimensionStyleAuto::PutPlacePrefixInsideBasicDimensionBox ( VARIANT_BOOL val );
__declspec(implementation_key(1993)) VARIANT_BOOL _IDimensionStyleAuto::GetPlacePrefixInsideBasicDimensionBox ( );
__declspec(implementation_key(1994)) void _IDimensionStyleAuto::PutSecondaryUnitSeparator ( enum DimStyleSecondaryUnitSeparatorConstants val );
__declspec(implementation_key(1995)) enum DimStyleSecondaryUnitSeparatorConstants _IDimensionStyleAuto::GetSecondaryUnitSeparator ( );
__declspec(implementation_key(1996)) void _IDimensionStyleAuto::PutWeldSymbolLineWidth ( double val );
__declspec(implementation_key(1997)) double _IDimensionStyleAuto::GetWeldSymbolLineWidth ( );
__declspec(implementation_key(1998)) void _IDimensionStyleAuto::PutThreeSidedSymbolOffsetGap ( double val );
__declspec(implementation_key(1999)) double _IDimensionStyleAuto::GetThreeSidedSymbolOffsetGap ( );
__declspec(implementation_key(2000)) void _IDimensionStyleAuto::PutHoleShaftToleranceSeparatorType ( enum DimHoleShaftSeparatorTypeConstants val );
__declspec(implementation_key(2001)) enum DimHoleShaftSeparatorTypeConstants _IDimensionStyleAuto::GetHoleShaftToleranceSeparatorType ( );
__declspec(implementation_key(2002)) void _IDimensionStyleAuto::PutToleranceTextVerticalAlignment ( enum TextVerticalAlignmentConstants val );
__declspec(implementation_key(2003)) enum TextVerticalAlignmentConstants _IDimensionStyleAuto::GetToleranceTextVerticalAlignment ( );
__declspec(implementation_key(2004)) void _IDimensionStyleAuto::PutToleranceTextHorizontalAlignment ( enum DimToleranceTextHorizontalAlignOptionsConstants val );
__declspec(implementation_key(2005)) enum DimToleranceTextHorizontalAlignOptionsConstants _IDimensionStyleAuto::GetToleranceTextHorizontalAlignment ( );
__declspec(implementation_key(2006)) void _IDimensionStyleAuto::PutUseTextSizeForCombinedTolValueDisplay ( VARIANT_BOOL val );
__declspec(implementation_key(2007)) VARIANT_BOOL _IDimensionStyleAuto::GetUseTextSizeForCombinedTolValueDisplay ( );
__declspec(implementation_key(2008)) void _IDimensionStyleAuto::PutDatumFrameLineTermThickness ( double val );
__declspec(implementation_key(2009)) double _IDimensionStyleAuto::GetDatumFrameLineTermThickness ( );
__declspec(implementation_key(2010)) void _IDimensionStyleAuto::PutDatumTargetTerminatorType ( enum DimDatumTargetTermTypeConstants val );
__declspec(implementation_key(2011)) enum DimDatumTargetTermTypeConstants _IDimensionStyleAuto::GetDatumTargetTerminatorType ( );
__declspec(implementation_key(2012)) void _IDimensionStyleAuto::PutPinSymbolTerminatorType ( enum DimPinSymbolTermTypeConstants val );
__declspec(implementation_key(2013)) enum DimPinSymbolTermTypeConstants _IDimensionStyleAuto::GetPinSymbolTerminatorType ( );
__declspec(implementation_key(2014)) void _IDimensionStyleAuto::PutPrimaryLinearToleranceUnits ( enum DimLinearUnitConstants val );
__declspec(implementation_key(2015)) enum DimLinearUnitConstants _IDimensionStyleAuto::GetPrimaryLinearToleranceUnits ( );
__declspec(implementation_key(2016)) void _IDimensionStyleAuto::PutPrimaryLinearToleranceRoundOffType ( enum DimRoundOffTypeConstants val );
__declspec(implementation_key(2017)) enum DimRoundOffTypeConstants _IDimensionStyleAuto::GetPrimaryLinearToleranceRoundOffType ( );
__declspec(implementation_key(2018)) void _IDimensionStyleAuto::PutPrimaryLinearToleranceDecimalRoundOff ( enum DimDecimalRoundOffTypeConstants val );
__declspec(implementation_key(2019)) enum DimDecimalRoundOffTypeConstants _IDimensionStyleAuto::GetPrimaryLinearToleranceDecimalRoundOff ( );
__declspec(implementation_key(2020)) void _IDimensionStyleAuto::PutPrimaryLinearToleranceFractionRoundOff ( enum DimFractionRoundOffTypeConstants val );
__declspec(implementation_key(2021)) enum DimFractionRoundOffTypeConstants _IDimensionStyleAuto::GetPrimaryLinearToleranceFractionRoundOff ( );
__declspec(implementation_key(2022)) void _IDimensionStyleAuto::PutPrimaryLinearToleranceUnitLabel ( _bstr_t val );
__declspec(implementation_key(2023)) _bstr_t _IDimensionStyleAuto::GetPrimaryLinearToleranceUnitLabel ( );
__declspec(implementation_key(2024)) void _IDimensionStyleAuto::PutPrimaryLinearToleranceSubunitsLabel ( _bstr_t val );
__declspec(implementation_key(2025)) _bstr_t _IDimensionStyleAuto::GetPrimaryLinearToleranceSubunitsLabel ( );
__declspec(implementation_key(2026)) void _IDimensionStyleAuto::PutPrimaryLinearToleranceMaximumSubunits ( int val );
__declspec(implementation_key(2027)) int _IDimensionStyleAuto::GetPrimaryLinearToleranceMaximumSubunits ( );
__declspec(implementation_key(2028)) void _IDimensionStyleAuto::PutPrimaryLinearToleranceFractionSeparator ( _bstr_t val );
__declspec(implementation_key(2029)) _bstr_t _IDimensionStyleAuto::GetPrimaryLinearToleranceFractionSeparator ( );
__declspec(implementation_key(2030)) void _IDimensionStyleAuto::PutAngularToleranceUnits ( enum DimAngularUnitConstants val );
__declspec(implementation_key(2031)) enum DimAngularUnitConstants _IDimensionStyleAuto::GetAngularToleranceUnits ( );
__declspec(implementation_key(2032)) void _IDimensionStyleAuto::PutAngularToleranceRoundOffType ( enum DimRoundOffTypeConstants val );
__declspec(implementation_key(2033)) enum DimRoundOffTypeConstants _IDimensionStyleAuto::GetAngularToleranceRoundOffType ( );
__declspec(implementation_key(2034)) void _IDimensionStyleAuto::PutAngularToleranceDMSRoundOff ( enum DimDMSRoundOffTypeConstants val );
__declspec(implementation_key(2035)) enum DimDMSRoundOffTypeConstants _IDimensionStyleAuto::GetAngularToleranceDMSRoundOff ( );
__declspec(implementation_key(2036)) void _IDimensionStyleAuto::PutAngularToleranceDecimalRoundOff ( enum DimDecimalRoundOffTypeConstants val );
__declspec(implementation_key(2037)) enum DimDecimalRoundOffTypeConstants _IDimensionStyleAuto::GetAngularToleranceDecimalRoundOff ( );
__declspec(implementation_key(2038)) void _IDimensionStyleAuto::PutAngularToleranceFractionRoundOff ( enum DimFractionRoundOffTypeConstants val );
__declspec(implementation_key(2039)) enum DimFractionRoundOffTypeConstants _IDimensionStyleAuto::GetAngularToleranceFractionRoundOff ( );
__declspec(implementation_key(2040)) void _IDimensionStyleAuto::PutSecondaryLinearToleranceUnits ( enum DimLinearUnitConstants val );
__declspec(implementation_key(2041)) enum DimLinearUnitConstants _IDimensionStyleAuto::GetSecondaryLinearToleranceUnits ( );
__declspec(implementation_key(2042)) void _IDimensionStyleAuto::PutSecondaryLinearToleranceRoundOffType ( enum DimRoundOffTypeConstants val );
__declspec(implementation_key(2043)) enum DimRoundOffTypeConstants _IDimensionStyleAuto::GetSecondaryLinearToleranceRoundOffType ( );
__declspec(implementation_key(2044)) void _IDimensionStyleAuto::PutSecondaryLinearToleranceDecimalRoundOff ( enum DimDecimalRoundOffTypeConstants val );
__declspec(implementation_key(2045)) enum DimDecimalRoundOffTypeConstants _IDimensionStyleAuto::GetSecondaryLinearToleranceDecimalRoundOff ( );
__declspec(implementation_key(2046)) void _IDimensionStyleAuto::PutSecondaryLinearToleranceFractionRoundOff ( enum DimFractionRoundOffTypeConstants val );
__declspec(implementation_key(2047)) enum DimFractionRoundOffTypeConstants _IDimensionStyleAuto::GetSecondaryLinearToleranceFractionRoundOff ( );
__declspec(implementation_key(2048)) void _IDimensionStyleAuto::PutSecondaryLinearToleranceUnitLabel ( _bstr_t val );
__declspec(implementation_key(2049)) _bstr_t _IDimensionStyleAuto::GetSecondaryLinearToleranceUnitLabel ( );
__declspec(implementation_key(2050)) void _IDimensionStyleAuto::PutSecondaryLinearToleranceSubunitsLabel ( _bstr_t val );
__declspec(implementation_key(2051)) _bstr_t _IDimensionStyleAuto::GetSecondaryLinearToleranceSubunitsLabel ( );
__declspec(implementation_key(2052)) void _IDimensionStyleAuto::PutSecondaryLinearToleranceMaximumSubunits ( int val );
__declspec(implementation_key(2053)) int _IDimensionStyleAuto::GetSecondaryLinearToleranceMaximumSubunits ( );
__declspec(implementation_key(2054)) void _IDimensionStyleAuto::PutSecondaryLinearToleranceFractionSeparator ( _bstr_t val );
__declspec(implementation_key(2055)) _bstr_t _IDimensionStyleAuto::GetSecondaryLinearToleranceFractionSeparator ( );
__declspec(implementation_key(2056)) void _IDimensionStyleAuto::PutSecondaryLinearFractionSeparator ( _bstr_t val );
__declspec(implementation_key(2057)) _bstr_t _IDimensionStyleAuto::GetSecondaryLinearFractionSeparator ( );
__declspec(implementation_key(2058)) void _IDimensionStyleAuto::PutDualUnitPosition ( enum DimDualUnitPositionConstants val );
__declspec(implementation_key(2059)) enum DimDualUnitPositionConstants _IDimensionStyleAuto::GetDualUnitPosition ( );
__declspec(implementation_key(2060)) void _IDimensionStyleAuto::PutDualUnitJustification ( enum TextHorizontalAlignmentConstants val );
__declspec(implementation_key(2061)) enum TextHorizontalAlignmentConstants _IDimensionStyleAuto::GetDualUnitJustification ( );
__declspec(implementation_key(2062)) void _IDimensionStyleAuto::PutSmartDepthSlotThru ( _bstr_t val );
__declspec(implementation_key(2063)) _bstr_t _IDimensionStyleAuto::GetSmartDepthSlotThru ( );
__declspec(implementation_key(2064)) void _IDimensionStyleAuto::PutSmartDepthSlotFinite ( _bstr_t val );
__declspec(implementation_key(2065)) _bstr_t _IDimensionStyleAuto::GetSmartDepthSlotFinite ( );
__declspec(implementation_key(2066)) void _IDimensionStyleAuto::PutSlotCalloutSimple ( _bstr_t val );
__declspec(implementation_key(2067)) _bstr_t _IDimensionStyleAuto::GetSlotCalloutSimple ( );
__declspec(implementation_key(2068)) void _IDimensionStyleAuto::PutSlotCalloutCounterbore ( _bstr_t val );
__declspec(implementation_key(2069)) _bstr_t _IDimensionStyleAuto::GetSlotCalloutCounterbore ( );
__declspec(implementation_key(2070)) void _IDimensionStyleAuto::PutCoordinateTextOrientation ( enum DimTextOrientationConstants val );
__declspec(implementation_key(2071)) enum DimTextOrientationConstants _IDimensionStyleAuto::GetCoordinateTextOrientation ( );
__declspec(implementation_key(2072)) void _IDimensionStyleAuto::PutEnableAutoJogForCoordinate ( VARIANT_BOOL val );
__declspec(implementation_key(2073)) VARIANT_BOOL _IDimensionStyleAuto::GetEnableAutoJogForCoordinate ( );
__declspec(implementation_key(2074)) void _IDimensionStyleAuto::PutAllowNegativeValueForCoordinate ( VARIANT_BOOL val );
__declspec(implementation_key(2075)) VARIANT_BOOL _IDimensionStyleAuto::GetAllowNegativeValueForCoordinate ( );
__declspec(implementation_key(2076)) void _IDimensionStyleAuto::PutAllowOriginValueChangeForCoordinate ( VARIANT_BOOL val );
__declspec(implementation_key(2077)) VARIANT_BOOL _IDimensionStyleAuto::GetAllowOriginValueChangeForCoordinate ( );
__declspec(implementation_key(2078)) void _IDimensionStyleAuto::PutShowOriginLineForCoordinate ( VARIANT_BOOL val );
__declspec(implementation_key(2079)) VARIANT_BOOL _IDimensionStyleAuto::GetShowOriginLineForCoordinate ( );
__declspec(implementation_key(2080)) void _IDimensionStyleAuto::PutOverlineExtension ( double val );
__declspec(implementation_key(2081)) double _IDimensionStyleAuto::GetOverlineExtension ( );
__declspec(implementation_key(2082)) void _IDimensionStyleAuto::PutSuppressSymmetricDiameterSymbol ( VARIANT_BOOL val );
__declspec(implementation_key(2083)) VARIANT_BOOL _IDimensionStyleAuto::GetSuppressSymmetricDiameterSymbol ( );
__declspec(implementation_key(2084)) void _IDimensionStyleAuto::PutUnderlineSymbolAndPrefix ( VARIANT_BOOL val );
__declspec(implementation_key(2085)) VARIANT_BOOL _IDimensionStyleAuto::GetUnderlineSymbolAndPrefix ( );
__declspec(implementation_key(2086)) void _IDimensionStyleAuto::PutInitialStackPitch ( double val );
__declspec(implementation_key(2087)) double _IDimensionStyleAuto::GetInitialStackPitch ( );
__declspec(implementation_key(2088)) IDispatchPtr _IDimensionStyleAuto::GetAttributeSets ( );
__declspec(implementation_key(2089)) VARIANT_BOOL _IDimensionStyleAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(2090)) void _IDimensionStyleAuto::PutHoleCalloutCounterdrill ( _bstr_t val );
__declspec(implementation_key(2091)) _bstr_t _IDimensionStyleAuto::GetHoleCalloutCounterdrill ( );
__declspec(implementation_key(2092)) void _IDimensionStyleAuto::PutHoleCalloutCounterdrillThreaded ( _bstr_t val );
__declspec(implementation_key(2093)) _bstr_t _IDimensionStyleAuto::GetHoleCalloutCounterdrillThreaded ( );
__declspec(implementation_key(2094)) void _IDimensionStyleAuto::PutPrimaryStackFraction ( enum DimStackFractionTypeConstants val );
__declspec(implementation_key(2095)) enum DimStackFractionTypeConstants _IDimensionStyleAuto::GetPrimaryStackFraction ( );
__declspec(implementation_key(2096)) void _IDimensionStyleAuto::PutSecondaryStackFraction ( enum DimStackFractionTypeConstants val );
__declspec(implementation_key(2097)) enum DimStackFractionTypeConstants _IDimensionStyleAuto::GetSecondaryStackFraction ( );
__declspec(implementation_key(2098)) void _IDimensionStyleAuto::PutPrimaryStackFractionSize ( enum DimStackFractionSizeConstants val );
__declspec(implementation_key(2099)) enum DimStackFractionSizeConstants _IDimensionStyleAuto::GetPrimaryStackFractionSize ( );
__declspec(implementation_key(2100)) void _IDimensionStyleAuto::PutSecondaryStackFractionSize ( enum DimStackFractionSizeConstants val );
__declspec(implementation_key(2101)) enum DimStackFractionSizeConstants _IDimensionStyleAuto::GetSecondaryStackFractionSize ( );
__declspec(implementation_key(2102)) void _IDimensionStyleAuto::PutShowHideReferenceGeometry ( VARIANT_BOOL val );
__declspec(implementation_key(2103)) VARIANT_BOOL _IDimensionStyleAuto::GetShowHideReferenceGeometry ( );
__declspec(implementation_key(2104)) void _IDimensionStyleAuto::PutEnableAngularJog ( VARIANT_BOOL val );
__declspec(implementation_key(2105)) VARIANT_BOOL _IDimensionStyleAuto::GetEnableAngularJog ( );
__declspec(implementation_key(2106)) TGFramework::ApplicationPtr DimInitData::GetApplication ( );
__declspec(implementation_key(2107)) HRESULT DimInitData::SetType ( enum DimTypeConstants DimensionType );
__declspec(implementation_key(2108)) HRESULT DimInitData::SetAxisMode ( enum DimAxisModeConstants AxisMode );
__declspec(implementation_key(2109)) HRESULT DimInitData::SetChamferAxisMode ( enum DimChamferModeConstants chamferAxisMode );
__declspec(implementation_key(2110)) HRESULT DimInitData::SetNumberOfParents ( int numberOfParents );
__declspec(implementation_key(2111)) HRESULT DimInitData::SetParentByIndex ( int Index, IDispatch * Object, VARIANT_BOOL IsKeyPoint, VARIANT_BOOL IsIntersection, VARIANT_BOOL IsTangentPoint, VARIANT_BOOL UseVirtualVertex, double x, double y, double z );
__declspec(implementation_key(2112)) HRESULT DimInitData::ClearParents ( );
__declspec(implementation_key(2113)) HRESULT DimInitData::ClearCreationData ( );
__declspec(implementation_key(2114)) HRESULT DimInitData::SetAxis ( IDispatch * Axis );
__declspec(implementation_key(2115)) HRESULT DimInitData::ClearAxis ( );
__declspec(implementation_key(2116)) HRESULT DimInitData::SetPlane ( IDispatch * Plane );
__declspec(implementation_key(2117)) HRESULT DimInitData::ClearPlane ( );
__declspec(implementation_key(2118)) HRESULT DimInitData::SetAngularCoordinateCounterClockwise ( VARIANT_BOOL bCounterClockWise );
__declspec(implementation_key(2119)) HRESULT DimInitData::SetDimPositionMode ( VARIANT_BOOL bPositionDim );
__declspec(implementation_key(2120)) HRESULT DimInitData::SetDimPosition ( double x, double y, double z );
__declspec(implementation_key(2121)) HRESULT DimInitData::SetAngularCoordOrigin ( VARIANT_BOOL bIsOriginDim );
__declspec(implementation_key(2122)) HRESULT DimInitData::SetTrue3DSketchDimension ( VARIANT_BOOL bTrueDim );
__declspec(implementation_key(2123)) HRESULT DimInitData::SetNormalDiameterMode ( VARIANT_BOOL bNormalDiameterDim );
__declspec(implementation_key(2124)) TGFramework::ApplicationPtr _IDimensionsAuto::GetApplication ( );
__declspec(implementation_key(2125)) long _IDimensionsAuto::GetCount ( );
__declspec(implementation_key(2126)) IDispatchPtr _IDimensionsAuto::GetParent ( );
__declspec(implementation_key(2127)) DimensionPtr _IDimensionsAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(2128)) IUnknownPtr _IDimensionsAuto::Get_NewEnum ( );
__declspec(implementation_key(2129)) void _IDimensionsAuto::PutConstraint ( VARIANT_BOOL Value );
__declspec(implementation_key(2130)) VARIANT_BOOL _IDimensionsAuto::GetConstraint ( );
__declspec(implementation_key(2131)) void _IDimensionsAuto::PutAxisMode ( enum DimAxisModeConstants Value );
__declspec(implementation_key(2132)) enum DimAxisModeConstants _IDimensionsAuto::GetAxisMode ( );
__declspec(implementation_key(2133)) void _IDimensionsAuto::PutAngleCompliment ( VARIANT_BOOL Value );
__declspec(implementation_key(2134)) VARIANT_BOOL _IDimensionsAuto::GetAngleCompliment ( );
__declspec(implementation_key(2135)) void _IDimensionsAuto::PutPlane ( IDispatch * Plane );
__declspec(implementation_key(2136)) IDispatchPtr _IDimensionsAuto::GetPlane ( );
__declspec(implementation_key(2137)) void _IDimensionsAuto::PutStyle ( struct DimensionStyle * Style );
__declspec(implementation_key(2138)) DimensionStylePtr _IDimensionsAuto::GetStyle ( );
__declspec(implementation_key(2139)) void _IDimensionsAuto::PutAxis ( IDispatch * Axis );
__declspec(implementation_key(2140)) IDispatchPtr _IDimensionsAuto::GetAxis ( );
__declspec(implementation_key(2141)) DimensionPtr _IDimensionsAuto::AddLength ( IDispatch * Object );
__declspec(implementation_key(2142)) DimensionPtr _IDimensionsAuto::AddAngle ( IDispatch * Object );
__declspec(implementation_key(2143)) DimensionPtr _IDimensionsAuto::AddRadius ( IDispatch * Object );
__declspec(implementation_key(2144)) DimensionPtr _IDimensionsAuto::AddRadialDiameter ( IDispatch * Object );
__declspec(implementation_key(2145)) DimensionPtr _IDimensionsAuto::AddCircularDiameter ( IDispatch * Object );
__declspec(implementation_key(2146)) DimensionPtr _IDimensionsAuto::AddSymmetricalDiameter ( IDispatch * Object1, double x1, double y1, double z1, VARIANT_BOOL keyPoint1, IDispatch * Object2, double x2, double y2, double z2, VARIANT_BOOL keyPoint2 );
__declspec(implementation_key(2147)) DimensionPtr _IDimensionsAuto::AddDistanceBetweenObjects ( IDispatch * Object1, double x1, double y1, double z1, VARIANT_BOOL keyPoint1, IDispatch * Object2, double x2, double y2, double z2, VARIANT_BOOL keyPoint2 );
__declspec(implementation_key(2148)) DimensionPtr _IDimensionsAuto::AddDistanceObjectToIntersection ( IDispatch * Object1, double x1, double y1, double z1, VARIANT_BOOL keyPoint1, IDispatch * Object21, double x21, double y21, double z21, IDispatch * Object22, double x22, double y22, double z22 );
__declspec(implementation_key(2149)) DimensionPtr _IDimensionsAuto::AddDistanceIntersectionToObject ( IDispatch * Object11, double x11, double y11, double z11, IDispatch * Object12, double x12, double y12, double z12, IDispatch * Object2, double x2, double y2, double z2, VARIANT_BOOL keyPoint2 );
__declspec(implementation_key(2150)) DimensionPtr _IDimensionsAuto::AddDistanceIntersectionToIntersection ( IDispatch * Object11, double x11, double y11, double z11, IDispatch * Object12, double x12, double y12, double z12, IDispatch * Object21, double x21, double y21, double z21, IDispatch * Object22, double x22, double y22, double z22 );
__declspec(implementation_key(2151)) DimensionPtr _IDimensionsAuto::AddAngleBetweenObjects ( IDispatch * ele1, double x1, double y1, double z1, VARIANT_BOOL keyPoint1, IDispatch * ele2, double x2, double y2, double z2, VARIANT_BOOL keyPoint2 );
__declspec(implementation_key(2152)) DimensionPtr _IDimensionsAuto::AddAngleBetween3Objects ( IDispatch * ele1, double x1, double y1, double z1, VARIANT_BOOL keyPoint1, IDispatch * ele2, double x2, double y2, double z2, VARIANT_BOOL keyPoint2, IDispatch * ele3, double x3, double y3, double z3, VARIANT_BOOL keyPoint3 );
__declspec(implementation_key(2153)) DimensionPtr _IDimensionsAuto::AddCoordinateOrigin ( IDispatch * Object, double x, double y, double z, VARIANT_BOOL keyPoint );
__declspec(implementation_key(2154)) DimensionPtr _IDimensionsAuto::AddCoordinate ( IDispatch * Obj1, double x1, double y1, double z1, VARIANT_BOOL keyPoint1, IDispatch * Obj2, double x2, double y2, double z2, VARIANT_BOOL keyPoint2 );
__declspec(implementation_key(2155)) HRESULT _IDimensionsAuto::ClearPlane ( );
__declspec(implementation_key(2156)) HRESULT _IDimensionsAuto::ClearStyle ( );
__declspec(implementation_key(2157)) HRESULT _IDimensionsAuto::ClearAxis ( );
__declspec(implementation_key(2158)) DimensionPtr _IDimensionsAuto::AddChamfer ( IDispatch * Object1, double x1, double y1, double z1, VARIANT_BOOL keyPoint1, IDispatch * Object2, double x2, double y2, double z2, VARIANT_BOOL keyPoint2, enum DimChamferModeConstants valChamferMode );
__declspec(implementation_key(2159)) DimensionPtr _IDimensionsAuto::AddAngularCoordinateOrigin ( IDispatch * Obj1, double x1, double y1, double z1, VARIANT_BOOL keyPoint1, IDispatch * Obj2, double x2, double y2, double z2, VARIANT_BOOL keyPoint2, double x3, double y3, double z3 );
__declspec(implementation_key(2160)) DimensionPtr _IDimensionsAuto::AddAngularCoordinate ( IDispatch * Obj1, IDispatch * Obj2, double x2, double y2, double z2, VARIANT_BOOL keyPoint2, double x3, double y3, double z3, enum DimAngularCoordnateOrientationConstants valAngCoordMode );
__declspec(implementation_key(2161)) DimensionPtr _IDimensionsAuto::AddCoordinateOriginEx ( IDispatch * Object, double x, double y, double z, VARIANT_BOOL keyPoint1, double x3, double y3, double z3 );
__declspec(implementation_key(2162)) DimensionPtr _IDimensionsAuto::AddCoordinateEx ( IDispatch * Obj1, IDispatch * Obj2, double x2, double y2, double z2, VARIANT_BOOL keyPoint2, double x3, double y3, double z3 );
__declspec(implementation_key(2163)) DimensionPtr _IDimensionsAuto::AddDistanceBetweenObjectsEX ( IDispatch * Object1, double x1, double y1, double z1, VARIANT_BOOL keyPoint1, VARIANT_BOOL bTangent1, IDispatch * Object2, double x2, double y2, double z2, VARIANT_BOOL keyPoint2, VARIANT_BOOL bTangent2 );
__declspec(implementation_key(2164)) DimInitDataPtr _IDimensionsAuto::GetDimInitData ( );
__declspec(implementation_key(2165)) DimensionPtr _IDimensionsAuto::AddDimension ( struct DimInitData * DimInitData );
__declspec(implementation_key(2166)) TGFramework::ApplicationPtr _IDimInitDataAuto::GetApplication ( );
__declspec(implementation_key(2167)) HRESULT _IDimInitDataAuto::SetType ( enum DimTypeConstants DimensionType );
__declspec(implementation_key(2168)) HRESULT _IDimInitDataAuto::SetAxisMode ( enum DimAxisModeConstants AxisMode );
__declspec(implementation_key(2169)) HRESULT _IDimInitDataAuto::SetChamferAxisMode ( enum DimChamferModeConstants chamferAxisMode );
__declspec(implementation_key(2170)) HRESULT _IDimInitDataAuto::SetNumberOfParents ( int numberOfParents );
__declspec(implementation_key(2171)) HRESULT _IDimInitDataAuto::SetParentByIndex ( int Index, IDispatch * Object, VARIANT_BOOL IsKeyPoint, VARIANT_BOOL IsIntersection, VARIANT_BOOL IsTangentPoint, VARIANT_BOOL UseVirtualVertex, double x, double y, double z );
__declspec(implementation_key(2172)) HRESULT _IDimInitDataAuto::ClearParents ( );
__declspec(implementation_key(2173)) HRESULT _IDimInitDataAuto::ClearCreationData ( );
__declspec(implementation_key(2174)) HRESULT _IDimInitDataAuto::SetAxis ( IDispatch * Axis );
__declspec(implementation_key(2175)) HRESULT _IDimInitDataAuto::ClearAxis ( );
__declspec(implementation_key(2176)) HRESULT _IDimInitDataAuto::SetPlane ( IDispatch * Plane );
__declspec(implementation_key(2177)) HRESULT _IDimInitDataAuto::ClearPlane ( );
__declspec(implementation_key(2178)) HRESULT _IDimInitDataAuto::SetAngularCoordinateCounterClockwise ( VARIANT_BOOL bCounterClockWise );
__declspec(implementation_key(2179)) HRESULT _IDimInitDataAuto::SetDimPositionMode ( VARIANT_BOOL bPositionDim );
__declspec(implementation_key(2180)) HRESULT _IDimInitDataAuto::SetDimPosition ( double x, double y, double z );
__declspec(implementation_key(2181)) HRESULT _IDimInitDataAuto::SetAngularCoordOrigin ( VARIANT_BOOL bIsOriginDim );
__declspec(implementation_key(2182)) HRESULT _IDimInitDataAuto::SetTrue3DSketchDimension ( VARIANT_BOOL bTrueDim );
__declspec(implementation_key(2183)) HRESULT _IDimInitDataAuto::SetNormalDiameterMode ( VARIANT_BOOL bNormalDiameterDim );
__declspec(implementation_key(2184)) TGFramework::ApplicationPtr Leaders::GetApplication ( );
__declspec(implementation_key(2185)) long Leaders::GetCount ( );
__declspec(implementation_key(2186)) IDispatchPtr Leaders::GetParent ( );
__declspec(implementation_key(2187)) LeaderPtr Leaders::Item ( const _variant_t & Index );
__declspec(implementation_key(2188)) void Leaders::PutPlane ( IDispatch * _arg1 );
__declspec(implementation_key(2189)) IDispatchPtr Leaders::GetPlane ( );
__declspec(implementation_key(2190)) void Leaders::PutStyle ( struct DimensionStyle * _arg1 );
__declspec(implementation_key(2191)) DimensionStylePtr Leaders::GetStyle ( );
__declspec(implementation_key(2192)) LeaderPtr Leaders::Add ( double x1, double y1, double z1, double x2, double y2, double z2 );
__declspec(implementation_key(2193)) LeaderPtr Leaders::AddByConnect ( IDispatch * ConnectObject, double x1, double y1, double z1, VARIANT_BOOL keyPoint, double x2, double y2, double z2 );
__declspec(implementation_key(2194)) LeaderPtr Leaders::AddByTerminator ( IDispatch * TerminatorObject, double x1, double y1, double z1, VARIANT_BOOL keyPoint1, double x2, double y2, double z2 );
__declspec(implementation_key(2195)) LeaderPtr Leaders::AddByTerminatorConnect ( IDispatch * TerminatorObject, double x1, double y1, double z1, VARIANT_BOOL keyPoint1, IDispatch * ConnectObject, double x2, double y2, double z2, VARIANT_BOOL keyPoint2 );
__declspec(implementation_key(2196)) HRESULT Leaders::ClearPlane ( );
__declspec(implementation_key(2197)) HRESULT Leaders::ClearStyle ( );
__declspec(implementation_key(2198)) AnnotInitDataPtr Leaders::GetAnnotInitData ( );
__declspec(implementation_key(2199)) LeaderPtr Leaders::AddLeader ( struct AnnotInitData * AnnotInitData, double x, double y, double z );
__declspec(implementation_key(2200)) DimStylePtr Leader::GetStyle ( );
__declspec(implementation_key(2201)) HRESULT Leader::SetTerminator ( IDispatch * TerminatorObj, double x, double y, double z, VARIANT_BOOL keyPoint );
__declspec(implementation_key(2202)) HRESULT Leader::GetTerminator ( IDispatch * * TerminatorObj, double * x, double * y, double * z, VARIANT_BOOL * keyPoint );
__declspec(implementation_key(2203)) HRESULT Leader::SetFreeSpacePoint ( double x, double y, double z );
__declspec(implementation_key(2204)) HRESULT Leader::GetFreeSpacePoint ( double * x, double * y, double * z );
__declspec(implementation_key(2205)) HRESULT Leader::SetConnect ( IDispatch * ConnectObject, double x, double y, double z, VARIANT_BOOL keyPoint );
__declspec(implementation_key(2206)) HRESULT Leader::GetConnect ( IDispatch * * ConnectObj, double * x, double * y, double * z, VARIANT_BOOL * keyPoint );
__declspec(implementation_key(2207)) HRESULT Leader::SetConnectPoint ( double x, double y, double z );
__declspec(implementation_key(2208)) HRESULT Leader::GetConnectPoint ( double * x, double * y, double * z );
__declspec(implementation_key(2209)) IDispatchPtr Leader::GetPlane ( );
__declspec(implementation_key(2210)) TGFramework::ApplicationPtr Leader::GetApplication ( );
__declspec(implementation_key(2211)) long Leader::GetIndex ( );
__declspec(implementation_key(2212)) _bstr_t Leader::GetName ( const _variant_t & Recurse );
__declspec(implementation_key(2213)) IDispatchPtr Leader::GetParent ( );
__declspec(implementation_key(2214)) long Leader::GetType ( );
__declspec(implementation_key(2215)) long Leader::GetZOrder ( );
__declspec(implementation_key(2216)) _bstr_t Leader::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(2217)) IDispatchPtr Leader::GetDocument ( );
__declspec(implementation_key(2218)) HRESULT Leader::Copy ( );
__declspec(implementation_key(2219)) HRESULT Leader::Cut ( );
__declspec(implementation_key(2220)) HRESULT Leader::Delete ( );
__declspec(implementation_key(2221)) HRESULT Leader::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(2222)) HRESULT Leader::Scale ( double Factor );
__declspec(implementation_key(2223)) HRESULT Leader::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(2224)) HRESULT Leader::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(2225)) IDispatchPtr Leader::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(2226)) IDispatchPtr Leader::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(2227)) HRESULT Leader::BringToFront ( );
__declspec(implementation_key(2228)) HRESULT Leader::BringForward ( );
__declspec(implementation_key(2229)) HRESULT Leader::SendToBack ( );
__declspec(implementation_key(2230)) HRESULT Leader::SendBackward ( );
__declspec(implementation_key(2231)) HRESULT Leader::Select ( );
__declspec(implementation_key(2232)) double Leader::GetBreakLineDistance ( );
__declspec(implementation_key(2233)) void Leader::PutBreakLineDistance ( double _arg1 );
__declspec(implementation_key(2234)) VARIANT_BOOL Leader::GetBreakLine ( );
__declspec(implementation_key(2235)) void Leader::PutBreakLine ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2236)) VARIANT_BOOL Leader::GetBreakLineDirection ( );
__declspec(implementation_key(2237)) void Leader::PutBreakLineDirection ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2238)) VARIANT_BOOL Leader::GetLeader ( );
__declspec(implementation_key(2239)) void Leader::PutLeader ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2240)) long Leader::GetVertexCount ( );
__declspec(implementation_key(2241)) HRESULT Leader::GetVertices ( long * VertexCount, SAFEARRAY * * Vertices );
__declspec(implementation_key(2242)) HRESULT Leader::SetVertices ( long VertexCount, SAFEARRAY * * Vertices );
__declspec(implementation_key(2243)) HRESULT Leader::GetVertex ( long Index, double * x, double * y, double * z );
__declspec(implementation_key(2244)) HRESULT Leader::SetVertex ( long Index, double x, double y, double z );
__declspec(implementation_key(2245)) HRESULT Leader::InsertVertex ( long Index, double x, double y, double z );
__declspec(implementation_key(2246)) HRESULT Leader::AddVertex ( double x, double y, double z );
__declspec(implementation_key(2247)) HRESULT Leader::RemoveVertex ( long Index );
__declspec(implementation_key(2248)) long Leader::GetKeyPointCount ( );
__declspec(implementation_key(2249)) HRESULT Leader::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(2250)) HRESULT Leader::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(2251)) void Leader::PutLayer ( _bstr_t _arg1 );
__declspec(implementation_key(2252)) _bstr_t Leader::GetLayer ( );
__declspec(implementation_key(2253)) IDispatchPtr Leader::GetPMIPlane ( );
__declspec(implementation_key(2254)) double Leader::GetPMITrackDistance ( );
__declspec(implementation_key(2255)) void Leader::PutPMITrackDistance ( double _arg1 );
__declspec(implementation_key(2256)) void Leader::PutHidePMI ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2257)) VARIANT_BOOL Leader::GetHidePMI ( );
__declspec(implementation_key(2258)) void Leader::PutVerticalBreakLine ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2259)) VARIANT_BOOL Leader::GetVerticalBreakLine ( );
__declspec(implementation_key(2260)) DisplayDataPtr Leader::GetDisplayData ( );
__declspec(implementation_key(2261)) HRESULT Leader::PromoteToCurrentVersion ( );
__declspec(implementation_key(2262)) void Leader::PutPMIName ( _bstr_t _arg1 );
__declspec(implementation_key(2263)) _bstr_t Leader::GetPMIName ( );
__declspec(implementation_key(2264)) HRESULT Leader::TransformToModelCoordinates ( double InputX, double InputY, double InputZ, double * ModelX, double * ModelY, double * ModelZ );
__declspec(implementation_key(2265)) VARIANT_BOOL Leader::GetIsTerminatorAttachedToEntity ( );
__declspec(implementation_key(2266)) HRESULT Leader::GetReferencedGeometry ( SAFEARRAY * * ReferencedGeometries );
__declspec(implementation_key(2267)) HRESULT Leader::SetReferencedGeometry ( SAFEARRAY * * ReferencedGeometries );
__declspec(implementation_key(2268)) IDispatchPtr Leader::GetAttributeSets ( );
__declspec(implementation_key(2269)) VARIANT_BOOL Leader::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(2270)) DimStylePtr _ILeaderAuto::GetStyle ( );
__declspec(implementation_key(2271)) HRESULT _ILeaderAuto::SetTerminator ( IDispatch * TerminatorObj, double x, double y, double z, VARIANT_BOOL keyPoint );
__declspec(implementation_key(2272)) HRESULT _ILeaderAuto::GetTerminator ( IDispatch * * TerminatorObj, double * x, double * y, double * z, VARIANT_BOOL * keyPoint );
__declspec(implementation_key(2273)) HRESULT _ILeaderAuto::SetFreeSpacePoint ( double x, double y, double z );
__declspec(implementation_key(2274)) HRESULT _ILeaderAuto::GetFreeSpacePoint ( double * x, double * y, double * z );
__declspec(implementation_key(2275)) HRESULT _ILeaderAuto::SetConnect ( IDispatch * ConnectObject, double x, double y, double z, VARIANT_BOOL keyPoint );
__declspec(implementation_key(2276)) HRESULT _ILeaderAuto::GetConnect ( IDispatch * * ConnectObj, double * x, double * y, double * z, VARIANT_BOOL * keyPoint );
__declspec(implementation_key(2277)) HRESULT _ILeaderAuto::SetConnectPoint ( double x, double y, double z );
__declspec(implementation_key(2278)) HRESULT _ILeaderAuto::GetConnectPoint ( double * x, double * y, double * z );
__declspec(implementation_key(2279)) IDispatchPtr _ILeaderAuto::GetPlane ( );
__declspec(implementation_key(2280)) TGFramework::ApplicationPtr _ILeaderAuto::GetApplication ( );
__declspec(implementation_key(2281)) long _ILeaderAuto::GetIndex ( );
__declspec(implementation_key(2282)) _bstr_t _ILeaderAuto::GetName ( const _variant_t & Recurse, long Lcid );
__declspec(implementation_key(2283)) IDispatchPtr _ILeaderAuto::GetParent ( );
__declspec(implementation_key(2284)) long _ILeaderAuto::GetType ( );
__declspec(implementation_key(2285)) long _ILeaderAuto::GetZOrder ( );
__declspec(implementation_key(2286)) _bstr_t _ILeaderAuto::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(2287)) IDispatchPtr _ILeaderAuto::GetDocument ( );
__declspec(implementation_key(2288)) HRESULT _ILeaderAuto::Copy ( );
__declspec(implementation_key(2289)) HRESULT _ILeaderAuto::Cut ( );
__declspec(implementation_key(2290)) HRESULT _ILeaderAuto::Delete ( );
__declspec(implementation_key(2291)) HRESULT _ILeaderAuto::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(2292)) HRESULT _ILeaderAuto::Scale ( double Factor );
__declspec(implementation_key(2293)) HRESULT _ILeaderAuto::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(2294)) HRESULT _ILeaderAuto::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(2295)) IDispatchPtr _ILeaderAuto::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(2296)) IDispatchPtr _ILeaderAuto::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(2297)) HRESULT _ILeaderAuto::BringToFront ( );
__declspec(implementation_key(2298)) HRESULT _ILeaderAuto::BringForward ( );
__declspec(implementation_key(2299)) HRESULT _ILeaderAuto::SendToBack ( );
__declspec(implementation_key(2300)) HRESULT _ILeaderAuto::SendBackward ( );
__declspec(implementation_key(2301)) HRESULT _ILeaderAuto::Select ( );
__declspec(implementation_key(2302)) double _ILeaderAuto::GetBreakLineDistance ( );
__declspec(implementation_key(2303)) void _ILeaderAuto::PutBreakLineDistance ( double Distance );
__declspec(implementation_key(2304)) VARIANT_BOOL _ILeaderAuto::GetBreakLine ( );
__declspec(implementation_key(2305)) void _ILeaderAuto::PutBreakLine ( VARIANT_BOOL Flag );
__declspec(implementation_key(2306)) VARIANT_BOOL _ILeaderAuto::GetBreakLineDirection ( );
__declspec(implementation_key(2307)) void _ILeaderAuto::PutBreakLineDirection ( VARIANT_BOOL Flag );
__declspec(implementation_key(2308)) VARIANT_BOOL _ILeaderAuto::GetLeader ( );
__declspec(implementation_key(2309)) void _ILeaderAuto::PutLeader ( VARIANT_BOOL Flag );
__declspec(implementation_key(2310)) long _ILeaderAuto::GetVertexCount ( );
__declspec(implementation_key(2311)) HRESULT _ILeaderAuto::GetVertices ( long * VertexCount, SAFEARRAY * * Vertices );
__declspec(implementation_key(2312)) HRESULT _ILeaderAuto::SetVertices ( long VertexCount, SAFEARRAY * * Vertices );
__declspec(implementation_key(2313)) HRESULT _ILeaderAuto::GetVertex ( long Index, double * x, double * y, double * z );
__declspec(implementation_key(2314)) HRESULT _ILeaderAuto::SetVertex ( long Index, double x, double y, double z );
__declspec(implementation_key(2315)) HRESULT _ILeaderAuto::InsertVertex ( long Index, double x, double y, double z );
__declspec(implementation_key(2316)) HRESULT _ILeaderAuto::AddVertex ( double x, double y, double z );
__declspec(implementation_key(2317)) HRESULT _ILeaderAuto::RemoveVertex ( long Index );
__declspec(implementation_key(2318)) long _ILeaderAuto::GetKeyPointCount ( );
__declspec(implementation_key(2319)) HRESULT _ILeaderAuto::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(2320)) HRESULT _ILeaderAuto::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(2321)) void _ILeaderAuto::PutLayer ( _bstr_t Layer );
__declspec(implementation_key(2322)) _bstr_t _ILeaderAuto::GetLayer ( );
__declspec(implementation_key(2323)) IDispatchPtr _ILeaderAuto::GetPMIPlane ( );
__declspec(implementation_key(2324)) double _ILeaderAuto::GetPMITrackDistance ( );
__declspec(implementation_key(2325)) void _ILeaderAuto::PutPMITrackDistance ( double pdPMITrackDistance );
__declspec(implementation_key(2326)) void _ILeaderAuto::PutHidePMI ( VARIANT_BOOL Value );
__declspec(implementation_key(2327)) VARIANT_BOOL _ILeaderAuto::GetHidePMI ( );
__declspec(implementation_key(2328)) void _ILeaderAuto::PutVerticalBreakLine ( VARIANT_BOOL Value );
__declspec(implementation_key(2329)) VARIANT_BOOL _ILeaderAuto::GetVerticalBreakLine ( );
__declspec(implementation_key(2330)) DisplayDataPtr _ILeaderAuto::GetDisplayData ( );
__declspec(implementation_key(2331)) HRESULT _ILeaderAuto::PromoteToCurrentVersion ( );
__declspec(implementation_key(2332)) void _ILeaderAuto::PutPMIName ( _bstr_t Text );
__declspec(implementation_key(2333)) _bstr_t _ILeaderAuto::GetPMIName ( );
__declspec(implementation_key(2334)) HRESULT _ILeaderAuto::TransformToModelCoordinates ( double InputX, double InputY, double InputZ, double * ModelX, double * ModelY, double * ModelZ );
__declspec(implementation_key(2335)) VARIANT_BOOL _ILeaderAuto::GetIsTerminatorAttachedToEntity ( );
__declspec(implementation_key(2336)) HRESULT _ILeaderAuto::GetReferencedGeometry ( SAFEARRAY * * ReferencedGeometries );
__declspec(implementation_key(2337)) HRESULT _ILeaderAuto::SetReferencedGeometry ( SAFEARRAY * * ReferencedGeometries );
__declspec(implementation_key(2338)) IDispatchPtr _ILeaderAuto::GetAttributeSets ( );
__declspec(implementation_key(2339)) VARIANT_BOOL _ILeaderAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(2340)) TGFramework::ApplicationPtr AnnotInitData::GetApplication ( );
__declspec(implementation_key(2341)) HRESULT AnnotInitData::SetTerminatorElement ( IDispatch * Object, VARIANT_BOOL IsKeyPoint, VARIANT_BOOL UseVirtualEdge, double x, double y, double z );
__declspec(implementation_key(2342)) HRESULT AnnotInitData::ClearTerminatorElement ( );
__declspec(implementation_key(2343)) HRESULT AnnotInitData::SetConnectElement ( IDispatch * Object, VARIANT_BOOL IsKeyPoint, VARIANT_BOOL UseVirtualEdge, double x, double y, double z );
__declspec(implementation_key(2344)) HRESULT AnnotInitData::ClearConnectElement ( );
__declspec(implementation_key(2345)) HRESULT AnnotInitData::ClearCreationData ( );
__declspec(implementation_key(2346)) HRESULT AnnotInitData::SetPlane ( IDispatch * Plane );
__declspec(implementation_key(2347)) HRESULT AnnotInitData::ClearPlane ( );
__declspec(implementation_key(2348)) HRESULT AnnotInitData::SetTerminatorElementEx ( IDispatch * Object, VARIANT_BOOL IsKeyPoint, double x, double y, double z );
__declspec(implementation_key(2349)) HRESULT AnnotInitData::SetConnectElementEx ( IDispatch * Object, VARIANT_BOOL IsKeyPoint, double x, double y, double z );
__declspec(implementation_key(2350)) HRESULT AnnotInitData::SetFirstElement ( IDispatch * Object, VARIANT_BOOL IsKeyPoint, double x, double y, double z );
__declspec(implementation_key(2351)) HRESULT AnnotInitData::ClearFirstElement ( );
__declspec(implementation_key(2352)) HRESULT AnnotInitData::SetSecondElement ( IDispatch * Object, VARIANT_BOOL IsKeyPoint, double x, double y, double z );
__declspec(implementation_key(2353)) HRESULT AnnotInitData::ClearSecondElement ( );
__declspec(implementation_key(2354)) HRESULT AnnotInitData::SetThirdElement ( IDispatch * Object, VARIANT_BOOL IsKeyPoint, double x, double y, double z );
__declspec(implementation_key(2355)) HRESULT AnnotInitData::ClearThirdElement ( );
__declspec(implementation_key(2356)) TGFramework::ApplicationPtr _ILeadersAuto::GetApplication ( );
__declspec(implementation_key(2357)) long _ILeadersAuto::GetCount ( );
__declspec(implementation_key(2358)) IDispatchPtr _ILeadersAuto::GetParent ( );
__declspec(implementation_key(2359)) LeaderPtr _ILeadersAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(2360)) IUnknownPtr _ILeadersAuto::Get_NewEnum ( );
__declspec(implementation_key(2361)) void _ILeadersAuto::PutPlane ( IDispatch * Plane );
__declspec(implementation_key(2362)) IDispatchPtr _ILeadersAuto::GetPlane ( );
__declspec(implementation_key(2363)) void _ILeadersAuto::PutStyle ( struct DimensionStyle * Style );
__declspec(implementation_key(2364)) DimensionStylePtr _ILeadersAuto::GetStyle ( );
__declspec(implementation_key(2365)) LeaderPtr _ILeadersAuto::Add ( double x1, double y1, double z1, double x2, double y2, double z2 );
__declspec(implementation_key(2366)) LeaderPtr _ILeadersAuto::AddByConnect ( IDispatch * ConnectObject, double x1, double y1, double z1, VARIANT_BOOL keyPoint, double x2, double y2, double z2 );
__declspec(implementation_key(2367)) LeaderPtr _ILeadersAuto::AddByTerminator ( IDispatch * TerminatorObject, double x1, double y1, double z1, VARIANT_BOOL keyPoint1, double x2, double y2, double z2 );
__declspec(implementation_key(2368)) LeaderPtr _ILeadersAuto::AddByTerminatorConnect ( IDispatch * TerminatorObject, double x1, double y1, double z1, VARIANT_BOOL keyPoint1, IDispatch * ConnectObject, double x2, double y2, double z2, VARIANT_BOOL keyPoint2 );
__declspec(implementation_key(2369)) HRESULT _ILeadersAuto::ClearPlane ( );
__declspec(implementation_key(2370)) HRESULT _ILeadersAuto::ClearStyle ( );
__declspec(implementation_key(2371)) AnnotInitDataPtr _ILeadersAuto::GetAnnotInitData ( );
__declspec(implementation_key(2372)) LeaderPtr _ILeadersAuto::AddLeader ( struct AnnotInitData * AnnotInitData, double x, double y, double z );
__declspec(implementation_key(2373)) TGFramework::ApplicationPtr _IAnnotInitDataAuto::GetApplication ( );
__declspec(implementation_key(2374)) HRESULT _IAnnotInitDataAuto::SetTerminatorElement ( IDispatch * Object, VARIANT_BOOL IsKeyPoint, VARIANT_BOOL UseVirtualEdge, double x, double y, double z );
__declspec(implementation_key(2375)) HRESULT _IAnnotInitDataAuto::ClearTerminatorElement ( );
__declspec(implementation_key(2376)) HRESULT _IAnnotInitDataAuto::SetConnectElement ( IDispatch * Object, VARIANT_BOOL IsKeyPoint, VARIANT_BOOL UseVirtualEdge, double x, double y, double z );
__declspec(implementation_key(2377)) HRESULT _IAnnotInitDataAuto::ClearConnectElement ( );
__declspec(implementation_key(2378)) HRESULT _IAnnotInitDataAuto::ClearCreationData ( );
__declspec(implementation_key(2379)) HRESULT _IAnnotInitDataAuto::SetPlane ( IDispatch * Plane );
__declspec(implementation_key(2380)) HRESULT _IAnnotInitDataAuto::ClearPlane ( );
__declspec(implementation_key(2381)) HRESULT _IAnnotInitDataAuto::SetTerminatorElementEx ( IDispatch * Object, VARIANT_BOOL IsKeyPoint, double x, double y, double z );
__declspec(implementation_key(2382)) HRESULT _IAnnotInitDataAuto::SetConnectElementEx ( IDispatch * Object, VARIANT_BOOL IsKeyPoint, double x, double y, double z );
__declspec(implementation_key(2383)) HRESULT _IAnnotInitDataAuto::SetFirstElement ( IDispatch * Object, VARIANT_BOOL IsKeyPoint, double x, double y, double z );
__declspec(implementation_key(2384)) HRESULT _IAnnotInitDataAuto::ClearFirstElement ( );
__declspec(implementation_key(2385)) HRESULT _IAnnotInitDataAuto::SetSecondElement ( IDispatch * Object, VARIANT_BOOL IsKeyPoint, double x, double y, double z );
__declspec(implementation_key(2386)) HRESULT _IAnnotInitDataAuto::ClearSecondElement ( );
__declspec(implementation_key(2387)) HRESULT _IAnnotInitDataAuto::SetThirdElement ( IDispatch * Object, VARIANT_BOOL IsKeyPoint, double x, double y, double z );
__declspec(implementation_key(2388)) HRESULT _IAnnotInitDataAuto::ClearThirdElement ( );
__declspec(implementation_key(2389)) TGFramework::ApplicationPtr Balloons::GetApplication ( );
__declspec(implementation_key(2390)) long Balloons::GetCount ( );
__declspec(implementation_key(2391)) IDispatchPtr Balloons::GetParent ( );
__declspec(implementation_key(2392)) BalloonPtr Balloons::Item ( const _variant_t & Index );
__declspec(implementation_key(2393)) void Balloons::PutPlane ( IDispatch * _arg1 );
__declspec(implementation_key(2394)) IDispatchPtr Balloons::GetPlane ( );
__declspec(implementation_key(2395)) void Balloons::PutStyle ( struct DimensionStyle * _arg1 );
__declspec(implementation_key(2396)) DimensionStylePtr Balloons::GetStyle ( );
__declspec(implementation_key(2397)) BalloonPtr Balloons::Add ( double x1, double y1, double z1 );
__declspec(implementation_key(2398)) BalloonPtr Balloons::AddByTerminator ( IDispatch * TerminatorObject, double x1, double y1, double z1, VARIANT_BOOL keyPoint1 );
__declspec(implementation_key(2399)) HRESULT Balloons::ClearPlane ( );
__declspec(implementation_key(2400)) HRESULT Balloons::ClearStyle ( );
__declspec(implementation_key(2401)) AnnotInitDataPtr Balloons::GetAnnotInitData ( );
__declspec(implementation_key(2402)) BalloonPtr Balloons::AddBalloon ( struct AnnotInitData * AnnotInitData );
__declspec(implementation_key(2403)) DimStylePtr Balloon::GetStyle ( );
__declspec(implementation_key(2404)) void Balloon::PutBalloonType ( enum DimBalloonTypeConstants _arg1 );
__declspec(implementation_key(2405)) enum DimBalloonTypeConstants Balloon::GetBalloonType ( );
__declspec(implementation_key(2406)) void Balloon::PutBalloonSides ( int _arg1 );
__declspec(implementation_key(2407)) int Balloon::GetBalloonSides ( );
__declspec(implementation_key(2408)) void Balloon::PutBalloonDirection ( enum DimBalloonDirTypeConstants _arg1 );
__declspec(implementation_key(2409)) enum DimBalloonDirTypeConstants Balloon::GetBalloonDirection ( );
__declspec(implementation_key(2410)) void Balloon::PutBalloonSize ( double _arg1 );
__declspec(implementation_key(2411)) double Balloon::GetBalloonSize ( );
__declspec(implementation_key(2412)) void Balloon::PutBalloonText ( _bstr_t _arg1 );
__declspec(implementation_key(2413)) _bstr_t Balloon::GetBalloonText ( );
__declspec(implementation_key(2414)) void Balloon::PutDisplayByItemNumber ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2415)) VARIANT_BOOL Balloon::GetDisplayByItemNumber ( );
__declspec(implementation_key(2416)) HRESULT Balloon::SetTerminator ( IDispatch * TerminatorObj, double x, double y, double z, VARIANT_BOOL keyPoint );
__declspec(implementation_key(2417)) HRESULT Balloon::GetTerminator ( IDispatch * * TerminatorObj, double * x, double * y, double * z, VARIANT_BOOL * keyPoint );
__declspec(implementation_key(2418)) HRESULT Balloon::SetFreeSpacePoint ( double x, double y, double z );
__declspec(implementation_key(2419)) HRESULT Balloon::GetFreeSpacePoint ( double * x, double * y, double * z );
__declspec(implementation_key(2420)) IDispatchPtr Balloon::GetPlane ( );
__declspec(implementation_key(2421)) HRESULT Balloon::SetItemNumber ( long ulItemNumber );
__declspec(implementation_key(2422)) HRESULT Balloon::GetItemNumber ( long * pulItemNumber );
__declspec(implementation_key(2423)) void Balloon::PutCallout ( long _arg1 );
__declspec(implementation_key(2424)) long Balloon::GetCallout ( );
__declspec(implementation_key(2425)) TGFramework::ApplicationPtr Balloon::GetApplication ( );
__declspec(implementation_key(2426)) long Balloon::GetIndex ( );
__declspec(implementation_key(2427)) _bstr_t Balloon::GetName ( const _variant_t & Recurse );
__declspec(implementation_key(2428)) IDispatchPtr Balloon::GetParent ( );
__declspec(implementation_key(2429)) long Balloon::GetType ( );
__declspec(implementation_key(2430)) long Balloon::GetZOrder ( );
__declspec(implementation_key(2431)) _bstr_t Balloon::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(2432)) IDispatchPtr Balloon::GetDocument ( );
__declspec(implementation_key(2433)) HRESULT Balloon::Copy ( );
__declspec(implementation_key(2434)) HRESULT Balloon::Cut ( );
__declspec(implementation_key(2435)) HRESULT Balloon::Delete ( );
__declspec(implementation_key(2436)) HRESULT Balloon::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(2437)) HRESULT Balloon::Scale ( double Factor );
__declspec(implementation_key(2438)) HRESULT Balloon::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(2439)) HRESULT Balloon::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(2440)) IDispatchPtr Balloon::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(2441)) IDispatchPtr Balloon::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(2442)) HRESULT Balloon::BringToFront ( );
__declspec(implementation_key(2443)) HRESULT Balloon::BringForward ( );
__declspec(implementation_key(2444)) HRESULT Balloon::SendToBack ( );
__declspec(implementation_key(2445)) HRESULT Balloon::SendBackward ( );
__declspec(implementation_key(2446)) HRESULT Balloon::Select ( );
__declspec(implementation_key(2447)) double Balloon::GetBreakLineDistance ( );
__declspec(implementation_key(2448)) void Balloon::PutBreakLineDistance ( double _arg1 );
__declspec(implementation_key(2449)) VARIANT_BOOL Balloon::GetBreakLine ( );
__declspec(implementation_key(2450)) void Balloon::PutBreakLine ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2451)) VARIANT_BOOL Balloon::GetBreakLineDirection ( );
__declspec(implementation_key(2452)) void Balloon::PutBreakLineDirection ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2453)) VARIANT_BOOL Balloon::GetLeader ( );
__declspec(implementation_key(2454)) void Balloon::PutLeader ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2455)) long Balloon::GetVertexCount ( );
__declspec(implementation_key(2456)) HRESULT Balloon::GetVertices ( long * VertexCount, SAFEARRAY * * Vertices );
__declspec(implementation_key(2457)) HRESULT Balloon::SetVertices ( long VertexCount, SAFEARRAY * * Vertices );
__declspec(implementation_key(2458)) HRESULT Balloon::GetVertex ( long Index, double * x, double * y, double * z );
__declspec(implementation_key(2459)) HRESULT Balloon::SetVertex ( long Index, double x, double y, double z );
__declspec(implementation_key(2460)) HRESULT Balloon::InsertVertex ( long Index, double x, double y, double z );
__declspec(implementation_key(2461)) HRESULT Balloon::AddVertex ( double x, double y, double z );
__declspec(implementation_key(2462)) HRESULT Balloon::RemoveVertex ( long Index );
__declspec(implementation_key(2463)) long Balloon::GetKeyPointCount ( );
__declspec(implementation_key(2464)) HRESULT Balloon::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(2465)) HRESULT Balloon::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(2466)) void Balloon::PutBalloonTextLower ( _bstr_t _arg1 );
__declspec(implementation_key(2467)) _bstr_t Balloon::GetBalloonTextLower ( );
__declspec(implementation_key(2468)) void Balloon::PutBalloonTextPrefix ( _bstr_t _arg1 );
__declspec(implementation_key(2469)) _bstr_t Balloon::GetBalloonTextPrefix ( );
__declspec(implementation_key(2470)) void Balloon::PutBalloonTextSuffix ( _bstr_t _arg1 );
__declspec(implementation_key(2471)) _bstr_t Balloon::GetBalloonTextSuffix ( );
__declspec(implementation_key(2472)) void Balloon::PutLinkToPartsList ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2473)) VARIANT_BOOL Balloon::GetLinkToPartsList ( );
__declspec(implementation_key(2474)) void Balloon::PutDisplayItemCount ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2475)) VARIANT_BOOL Balloon::GetDisplayItemCount ( );
__declspec(implementation_key(2476)) double Balloon::GetRotationAngle ( );
__declspec(implementation_key(2477)) void Balloon::PutRotationAngle ( double _arg1 );
__declspec(implementation_key(2478)) double Balloon::GetTextScale ( );
__declspec(implementation_key(2479)) void Balloon::PutTextScale ( double _arg1 );
__declspec(implementation_key(2480)) void Balloon::PutLayer ( _bstr_t _arg1 );
__declspec(implementation_key(2481)) _bstr_t Balloon::GetLayer ( );
__declspec(implementation_key(2482)) _bstr_t Balloon::GetBalloonDisplayedText ( );
__declspec(implementation_key(2483)) _bstr_t Balloon::GetBalloonDisplayedTextLower ( );
__declspec(implementation_key(2484)) _bstr_t Balloon::GetBalloonDisplayedTextPrefix ( );
__declspec(implementation_key(2485)) _bstr_t Balloon::GetBalloonDisplayedTextSuffix ( );
__declspec(implementation_key(2486)) IDispatchPtr Balloon::GetPMIPlane ( );
__declspec(implementation_key(2487)) double Balloon::GetPMITrackDistance ( );
__declspec(implementation_key(2488)) void Balloon::PutPMITrackDistance ( double _arg1 );
__declspec(implementation_key(2489)) void Balloon::PutCalloutAllAround ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2490)) VARIANT_BOOL Balloon::GetCalloutAllAround ( );
__declspec(implementation_key(2491)) void Balloon::PutHidePMI ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2492)) VARIANT_BOOL Balloon::GetHidePMI ( );
__declspec(implementation_key(2493)) HRESULT Balloon::AddFSStackBalloon ( enum DimBalloonDirTypeConstants Direction );
__declspec(implementation_key(2494)) HRESULT Balloon::RemoveFSStackBalloon ( );
__declspec(implementation_key(2495)) HRESULT Balloon::BalloonHorizontalAlignment ( enum TextHorizontalAlignmentConstants Alignment );
__declspec(implementation_key(2496)) void Balloon::PutCalloutAllOver ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2497)) VARIANT_BOOL Balloon::GetCalloutAllOver ( );
__declspec(implementation_key(2498)) void Balloon::PutCalloutBorder ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2499)) VARIANT_BOOL Balloon::GetCalloutBorder ( );
__declspec(implementation_key(2500)) void Balloon::PutCalloutBorderHorizontalGap ( double _arg1 );
__declspec(implementation_key(2501)) double Balloon::GetCalloutBorderHorizontalGap ( );
__declspec(implementation_key(2502)) void Balloon::PutCalloutBorderVerticalGap ( double _arg1 );
__declspec(implementation_key(2503)) double Balloon::GetCalloutBorderVerticalGap ( );
__declspec(implementation_key(2504)) void Balloon::PutCalloutTextWidth ( double _arg1 );
__declspec(implementation_key(2505)) double Balloon::GetCalloutTextWidth ( );
__declspec(implementation_key(2506)) void Balloon::PutCalloutTextAspectRatio ( double _arg1 );
__declspec(implementation_key(2507)) double Balloon::GetCalloutTextAspectRatio ( );
__declspec(implementation_key(2508)) void Balloon::PutCalloutTextWidthMode ( enum DimCalloutTextWidthModeConstants _arg1 );
__declspec(implementation_key(2509)) enum DimCalloutTextWidthModeConstants Balloon::GetCalloutTextWidthMode ( );
__declspec(implementation_key(2510)) void Balloon::PutCalloutHorizontalAlignment ( enum TextJustificationConstants _arg1 );
__declspec(implementation_key(2511)) enum TextJustificationConstants Balloon::GetCalloutHorizontalAlignment ( );
__declspec(implementation_key(2512)) DisplayDataPtr Balloon::GetDisplayData ( );
__declspec(implementation_key(2513)) void Balloon::PutCalloutLeaderTextConnectionPoint ( enum DimCalloutLeaderTextConnectionPointConstants _arg1 );
__declspec(implementation_key(2514)) enum DimCalloutLeaderTextConnectionPointConstants Balloon::GetCalloutLeaderTextConnectionPoint ( );
__declspec(implementation_key(2515)) void Balloon::PutBalloonLeaderTextConnectionPoint ( int _arg1 );
__declspec(implementation_key(2516)) int Balloon::GetBalloonLeaderTextConnectionPoint ( );
__declspec(implementation_key(2517)) void Balloon::PutCalloutBalloonBreaklineDirection ( enum DimCalloutBalloonBreaklineDirectionConstants _arg1 );
__declspec(implementation_key(2518)) enum DimCalloutBalloonBreaklineDirectionConstants Balloon::GetCalloutBalloonBreaklineDirection ( );
__declspec(implementation_key(2519)) void Balloon::PutFSBalloonOverridePrefixText ( _bstr_t _arg1 );
__declspec(implementation_key(2520)) _bstr_t Balloon::GetFSBalloonOverridePrefixText ( );
__declspec(implementation_key(2521)) void Balloon::PutFSBalloonOverrideSuffixText ( _bstr_t _arg1 );
__declspec(implementation_key(2522)) _bstr_t Balloon::GetFSBalloonOverrideSuffixText ( );
__declspec(implementation_key(2523)) HRESULT Balloon::FSBalloonClearOverrides ( );
__declspec(implementation_key(2524)) HRESULT Balloon::PromoteToCurrentVersion ( );
__declspec(implementation_key(2525)) HRESULT Balloon::SetAlignmentShape ( IDispatch * AlignmentShapeObj, double x, double y );
__declspec(implementation_key(2526)) HRESULT Balloon::GetAlignmentShape ( IDispatch * * AlignmentShapeObj, double * x, double * y );
__declspec(implementation_key(2527)) void Balloon::PutCalloutParallel ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2528)) VARIANT_BOOL Balloon::GetCalloutParallel ( );
__declspec(implementation_key(2529)) void Balloon::PutPMIName ( _bstr_t _arg1 );
__declspec(implementation_key(2530)) _bstr_t Balloon::GetPMIName ( );
__declspec(implementation_key(2531)) HRESULT Balloon::TransformToModelCoordinates ( double InputX, double InputY, double InputZ, double * ModelX, double * ModelY, double * ModelZ );
__declspec(implementation_key(2532)) VARIANT_BOOL Balloon::GetIsTerminatorAttachedToEntity ( );
__declspec(implementation_key(2533)) HRESULT Balloon::GetReferencedGeometry ( SAFEARRAY * * ReferencedGeometries );
__declspec(implementation_key(2534)) HRESULT Balloon::SetReferencedGeometry ( SAFEARRAY * * ReferencedGeometries );
__declspec(implementation_key(2535)) void Balloon::PutLinkToFOAPartsList ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2536)) VARIANT_BOOL Balloon::GetLinkToFOAPartsList ( );
__declspec(implementation_key(2537)) HRESULT Balloon::GetReferencedObjectInfo ( SAFEARRAY * * ReferencedObjects, SAFEARRAY * * ReferencedObjectTypes );
__declspec(implementation_key(2538)) enum TGBalloonReattachStatusConstants Balloon::TGReattachToDrawingView ( IDispatch * DrawingView );
__declspec(implementation_key(2539)) IDispatchPtr Balloon::GetAttributeSets ( );
__declspec(implementation_key(2540)) VARIANT_BOOL Balloon::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(2541)) TGFramework::ApplicationPtr _IBalloonsAuto::GetApplication ( );
__declspec(implementation_key(2542)) long _IBalloonsAuto::GetCount ( );
__declspec(implementation_key(2543)) IDispatchPtr _IBalloonsAuto::GetParent ( );
__declspec(implementation_key(2544)) BalloonPtr _IBalloonsAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(2545)) IUnknownPtr _IBalloonsAuto::Get_NewEnum ( );
__declspec(implementation_key(2546)) void _IBalloonsAuto::PutPlane ( IDispatch * Plane );
__declspec(implementation_key(2547)) IDispatchPtr _IBalloonsAuto::GetPlane ( );
__declspec(implementation_key(2548)) void _IBalloonsAuto::PutStyle ( struct DimensionStyle * Style );
__declspec(implementation_key(2549)) DimensionStylePtr _IBalloonsAuto::GetStyle ( );
__declspec(implementation_key(2550)) BalloonPtr _IBalloonsAuto::Add ( double x1, double y1, double z1 );
__declspec(implementation_key(2551)) BalloonPtr _IBalloonsAuto::AddByTerminator ( IDispatch * TerminatorObject, double x1, double y1, double z1, VARIANT_BOOL keyPoint1 );
__declspec(implementation_key(2552)) HRESULT _IBalloonsAuto::ClearPlane ( );
__declspec(implementation_key(2553)) HRESULT _IBalloonsAuto::ClearStyle ( );
__declspec(implementation_key(2554)) AnnotInitDataPtr _IBalloonsAuto::GetAnnotInitData ( );
__declspec(implementation_key(2555)) BalloonPtr _IBalloonsAuto::AddBalloon ( struct AnnotInitData * AnnotInitData );
__declspec(implementation_key(2556)) DimStylePtr _IBalloonAuto::GetStyle ( );
__declspec(implementation_key(2557)) void _IBalloonAuto::PutBalloonType ( enum DimBalloonTypeConstants Type );
__declspec(implementation_key(2558)) enum DimBalloonTypeConstants _IBalloonAuto::GetBalloonType ( );
__declspec(implementation_key(2559)) void _IBalloonAuto::PutBalloonSides ( int Sides );
__declspec(implementation_key(2560)) int _IBalloonAuto::GetBalloonSides ( );
__declspec(implementation_key(2561)) void _IBalloonAuto::PutBalloonDirection ( enum DimBalloonDirTypeConstants Direction );
__declspec(implementation_key(2562)) enum DimBalloonDirTypeConstants _IBalloonAuto::GetBalloonDirection ( );
__declspec(implementation_key(2563)) void _IBalloonAuto::PutBalloonSize ( double Size );
__declspec(implementation_key(2564)) double _IBalloonAuto::GetBalloonSize ( );
__declspec(implementation_key(2565)) void _IBalloonAuto::PutBalloonText ( _bstr_t Text );
__declspec(implementation_key(2566)) _bstr_t _IBalloonAuto::GetBalloonText ( );
__declspec(implementation_key(2567)) void _IBalloonAuto::PutDisplayByItemNumber ( VARIANT_BOOL pbDisplayByItemNumber );
__declspec(implementation_key(2568)) VARIANT_BOOL _IBalloonAuto::GetDisplayByItemNumber ( );
__declspec(implementation_key(2569)) HRESULT _IBalloonAuto::SetTerminator ( IDispatch * TerminatorObj, double x, double y, double z, VARIANT_BOOL keyPoint );
__declspec(implementation_key(2570)) HRESULT _IBalloonAuto::GetTerminator ( IDispatch * * TerminatorObj, double * x, double * y, double * z, VARIANT_BOOL * keyPoint );
__declspec(implementation_key(2571)) HRESULT _IBalloonAuto::SetFreeSpacePoint ( double x, double y, double z );
__declspec(implementation_key(2572)) HRESULT _IBalloonAuto::GetFreeSpacePoint ( double * x, double * y, double * z );
__declspec(implementation_key(2573)) IDispatchPtr _IBalloonAuto::GetPlane ( );
__declspec(implementation_key(2574)) HRESULT _IBalloonAuto::SetItemNumber ( long ulItemNumber );
__declspec(implementation_key(2575)) HRESULT _IBalloonAuto::GetItemNumber ( long * pulItemNumber );
__declspec(implementation_key(2576)) void _IBalloonAuto::PutCallout ( long pbCallout );
__declspec(implementation_key(2577)) long _IBalloonAuto::GetCallout ( );
__declspec(implementation_key(2578)) TGFramework::ApplicationPtr _IBalloonAuto::GetApplication ( );
__declspec(implementation_key(2579)) long _IBalloonAuto::GetIndex ( );
__declspec(implementation_key(2580)) _bstr_t _IBalloonAuto::GetName ( const _variant_t & Recurse, long Lcid );
__declspec(implementation_key(2581)) IDispatchPtr _IBalloonAuto::GetParent ( );
__declspec(implementation_key(2582)) long _IBalloonAuto::GetType ( );
__declspec(implementation_key(2583)) long _IBalloonAuto::GetZOrder ( );
__declspec(implementation_key(2584)) _bstr_t _IBalloonAuto::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(2585)) IDispatchPtr _IBalloonAuto::GetDocument ( );
__declspec(implementation_key(2586)) HRESULT _IBalloonAuto::Copy ( );
__declspec(implementation_key(2587)) HRESULT _IBalloonAuto::Cut ( );
__declspec(implementation_key(2588)) HRESULT _IBalloonAuto::Delete ( );
__declspec(implementation_key(2589)) HRESULT _IBalloonAuto::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(2590)) HRESULT _IBalloonAuto::Scale ( double Factor );
__declspec(implementation_key(2591)) HRESULT _IBalloonAuto::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(2592)) HRESULT _IBalloonAuto::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(2593)) IDispatchPtr _IBalloonAuto::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(2594)) IDispatchPtr _IBalloonAuto::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(2595)) HRESULT _IBalloonAuto::BringToFront ( );
__declspec(implementation_key(2596)) HRESULT _IBalloonAuto::BringForward ( );
__declspec(implementation_key(2597)) HRESULT _IBalloonAuto::SendToBack ( );
__declspec(implementation_key(2598)) HRESULT _IBalloonAuto::SendBackward ( );
__declspec(implementation_key(2599)) HRESULT _IBalloonAuto::Select ( );
__declspec(implementation_key(2600)) double _IBalloonAuto::GetBreakLineDistance ( );
__declspec(implementation_key(2601)) void _IBalloonAuto::PutBreakLineDistance ( double Distance );
__declspec(implementation_key(2602)) VARIANT_BOOL _IBalloonAuto::GetBreakLine ( );
__declspec(implementation_key(2603)) void _IBalloonAuto::PutBreakLine ( VARIANT_BOOL Flag );
__declspec(implementation_key(2604)) VARIANT_BOOL _IBalloonAuto::GetBreakLineDirection ( );
__declspec(implementation_key(2605)) void _IBalloonAuto::PutBreakLineDirection ( VARIANT_BOOL Flag );
__declspec(implementation_key(2606)) VARIANT_BOOL _IBalloonAuto::GetLeader ( );
__declspec(implementation_key(2607)) void _IBalloonAuto::PutLeader ( VARIANT_BOOL Flag );
__declspec(implementation_key(2608)) long _IBalloonAuto::GetVertexCount ( );
__declspec(implementation_key(2609)) HRESULT _IBalloonAuto::GetVertices ( long * VertexCount, SAFEARRAY * * Vertices );
__declspec(implementation_key(2610)) HRESULT _IBalloonAuto::SetVertices ( long VertexCount, SAFEARRAY * * Vertices );
__declspec(implementation_key(2611)) HRESULT _IBalloonAuto::GetVertex ( long Index, double * x, double * y, double * z );
__declspec(implementation_key(2612)) HRESULT _IBalloonAuto::SetVertex ( long Index, double x, double y, double z );
__declspec(implementation_key(2613)) HRESULT _IBalloonAuto::InsertVertex ( long Index, double x, double y, double z );
__declspec(implementation_key(2614)) HRESULT _IBalloonAuto::AddVertex ( double x, double y, double z );
__declspec(implementation_key(2615)) HRESULT _IBalloonAuto::RemoveVertex ( long Index );
__declspec(implementation_key(2616)) long _IBalloonAuto::GetKeyPointCount ( );
__declspec(implementation_key(2617)) HRESULT _IBalloonAuto::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(2618)) HRESULT _IBalloonAuto::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(2619)) void _IBalloonAuto::PutBalloonTextLower ( _bstr_t Text );
__declspec(implementation_key(2620)) _bstr_t _IBalloonAuto::GetBalloonTextLower ( );
__declspec(implementation_key(2621)) void _IBalloonAuto::PutBalloonTextPrefix ( _bstr_t Text );
__declspec(implementation_key(2622)) _bstr_t _IBalloonAuto::GetBalloonTextPrefix ( );
__declspec(implementation_key(2623)) void _IBalloonAuto::PutBalloonTextSuffix ( _bstr_t Text );
__declspec(implementation_key(2624)) _bstr_t _IBalloonAuto::GetBalloonTextSuffix ( );
__declspec(implementation_key(2625)) void _IBalloonAuto::PutLinkToPartsList ( VARIANT_BOOL pbLinkToPartsList );
__declspec(implementation_key(2626)) VARIANT_BOOL _IBalloonAuto::GetLinkToPartsList ( );
__declspec(implementation_key(2627)) void _IBalloonAuto::PutDisplayItemCount ( VARIANT_BOOL pbDisplayItemCount );
__declspec(implementation_key(2628)) VARIANT_BOOL _IBalloonAuto::GetDisplayItemCount ( );
__declspec(implementation_key(2629)) double _IBalloonAuto::GetRotationAngle ( );
__declspec(implementation_key(2630)) void _IBalloonAuto::PutRotationAngle ( double pdAngle );
__declspec(implementation_key(2631)) double _IBalloonAuto::GetTextScale ( );
__declspec(implementation_key(2632)) void _IBalloonAuto::PutTextScale ( double pdAngle );
__declspec(implementation_key(2633)) void _IBalloonAuto::PutLayer ( _bstr_t Layer );
__declspec(implementation_key(2634)) _bstr_t _IBalloonAuto::GetLayer ( );
__declspec(implementation_key(2635)) _bstr_t _IBalloonAuto::GetBalloonDisplayedText ( );
__declspec(implementation_key(2636)) _bstr_t _IBalloonAuto::GetBalloonDisplayedTextLower ( );
__declspec(implementation_key(2637)) _bstr_t _IBalloonAuto::GetBalloonDisplayedTextPrefix ( );
__declspec(implementation_key(2638)) _bstr_t _IBalloonAuto::GetBalloonDisplayedTextSuffix ( );
__declspec(implementation_key(2639)) IDispatchPtr _IBalloonAuto::GetPMIPlane ( );
__declspec(implementation_key(2640)) double _IBalloonAuto::GetPMITrackDistance ( );
__declspec(implementation_key(2641)) void _IBalloonAuto::PutPMITrackDistance ( double pdPMITrackDistance );
__declspec(implementation_key(2642)) void _IBalloonAuto::PutCalloutAllAround ( VARIANT_BOOL Flag );
__declspec(implementation_key(2643)) VARIANT_BOOL _IBalloonAuto::GetCalloutAllAround ( );
__declspec(implementation_key(2644)) void _IBalloonAuto::PutHidePMI ( VARIANT_BOOL Value );
__declspec(implementation_key(2645)) VARIANT_BOOL _IBalloonAuto::GetHidePMI ( );
__declspec(implementation_key(2646)) HRESULT _IBalloonAuto::AddFSStackBalloon ( enum DimBalloonDirTypeConstants Direction );
__declspec(implementation_key(2647)) HRESULT _IBalloonAuto::RemoveFSStackBalloon ( );
__declspec(implementation_key(2648)) HRESULT _IBalloonAuto::BalloonHorizontalAlignment ( enum TextHorizontalAlignmentConstants Alignment );
__declspec(implementation_key(2649)) void _IBalloonAuto::PutCalloutAllOver ( VARIANT_BOOL Flag );
__declspec(implementation_key(2650)) VARIANT_BOOL _IBalloonAuto::GetCalloutAllOver ( );
__declspec(implementation_key(2651)) void _IBalloonAuto::PutCalloutBorder ( VARIANT_BOOL Flag );
__declspec(implementation_key(2652)) VARIANT_BOOL _IBalloonAuto::GetCalloutBorder ( );
__declspec(implementation_key(2653)) void _IBalloonAuto::PutCalloutBorderHorizontalGap ( double Flag );
__declspec(implementation_key(2654)) double _IBalloonAuto::GetCalloutBorderHorizontalGap ( );
__declspec(implementation_key(2655)) void _IBalloonAuto::PutCalloutBorderVerticalGap ( double Flag );
__declspec(implementation_key(2656)) double _IBalloonAuto::GetCalloutBorderVerticalGap ( );
__declspec(implementation_key(2657)) void _IBalloonAuto::PutCalloutTextWidth ( double Flag );
__declspec(implementation_key(2658)) double _IBalloonAuto::GetCalloutTextWidth ( );
__declspec(implementation_key(2659)) void _IBalloonAuto::PutCalloutTextAspectRatio ( double Flag );
__declspec(implementation_key(2660)) double _IBalloonAuto::GetCalloutTextAspectRatio ( );
__declspec(implementation_key(2661)) void _IBalloonAuto::PutCalloutTextWidthMode ( enum DimCalloutTextWidthModeConstants WidthMode );
__declspec(implementation_key(2662)) enum DimCalloutTextWidthModeConstants _IBalloonAuto::GetCalloutTextWidthMode ( );
__declspec(implementation_key(2663)) void _IBalloonAuto::PutCalloutHorizontalAlignment ( enum TextJustificationConstants Type );
__declspec(implementation_key(2664)) enum TextJustificationConstants _IBalloonAuto::GetCalloutHorizontalAlignment ( );
__declspec(implementation_key(2665)) DisplayDataPtr _IBalloonAuto::GetDisplayData ( );
__declspec(implementation_key(2666)) void _IBalloonAuto::PutCalloutLeaderTextConnectionPoint ( enum DimCalloutLeaderTextConnectionPointConstants piIndex );
__declspec(implementation_key(2667)) enum DimCalloutLeaderTextConnectionPointConstants _IBalloonAuto::GetCalloutLeaderTextConnectionPoint ( );
__declspec(implementation_key(2668)) void _IBalloonAuto::PutBalloonLeaderTextConnectionPoint ( int piIndex );
__declspec(implementation_key(2669)) int _IBalloonAuto::GetBalloonLeaderTextConnectionPoint ( );
__declspec(implementation_key(2670)) void _IBalloonAuto::PutCalloutBalloonBreaklineDirection ( enum DimCalloutBalloonBreaklineDirectionConstants piIndex );
__declspec(implementation_key(2671)) enum DimCalloutBalloonBreaklineDirectionConstants _IBalloonAuto::GetCalloutBalloonBreaklineDirection ( );
__declspec(implementation_key(2672)) void _IBalloonAuto::PutFSBalloonOverridePrefixText ( _bstr_t Text );
__declspec(implementation_key(2673)) _bstr_t _IBalloonAuto::GetFSBalloonOverridePrefixText ( );
__declspec(implementation_key(2674)) void _IBalloonAuto::PutFSBalloonOverrideSuffixText ( _bstr_t Text );
__declspec(implementation_key(2675)) _bstr_t _IBalloonAuto::GetFSBalloonOverrideSuffixText ( );
__declspec(implementation_key(2676)) HRESULT _IBalloonAuto::FSBalloonClearOverrides ( );
__declspec(implementation_key(2677)) HRESULT _IBalloonAuto::PromoteToCurrentVersion ( );
__declspec(implementation_key(2678)) HRESULT _IBalloonAuto::SetAlignmentShape ( IDispatch * AlignmentShapeObj, double x, double y );
__declspec(implementation_key(2679)) HRESULT _IBalloonAuto::GetAlignmentShape ( IDispatch * * AlignmentShapeObj, double * x, double * y );
__declspec(implementation_key(2680)) void _IBalloonAuto::PutCalloutParallel ( VARIANT_BOOL Flag );
__declspec(implementation_key(2681)) VARIANT_BOOL _IBalloonAuto::GetCalloutParallel ( );
__declspec(implementation_key(2682)) void _IBalloonAuto::PutPMIName ( _bstr_t Text );
__declspec(implementation_key(2683)) _bstr_t _IBalloonAuto::GetPMIName ( );
__declspec(implementation_key(2684)) HRESULT _IBalloonAuto::TransformToModelCoordinates ( double InputX, double InputY, double InputZ, double * ModelX, double * ModelY, double * ModelZ );
__declspec(implementation_key(2685)) VARIANT_BOOL _IBalloonAuto::GetIsTerminatorAttachedToEntity ( );
__declspec(implementation_key(2686)) HRESULT _IBalloonAuto::GetReferencedGeometry ( SAFEARRAY * * ReferencedGeometries );
__declspec(implementation_key(2687)) HRESULT _IBalloonAuto::SetReferencedGeometry ( SAFEARRAY * * ReferencedGeometries );
__declspec(implementation_key(2688)) void _IBalloonAuto::PutLinkToFOAPartsList ( VARIANT_BOOL pvbLinkToFOAPartsList );
__declspec(implementation_key(2689)) VARIANT_BOOL _IBalloonAuto::GetLinkToFOAPartsList ( );
__declspec(implementation_key(2690)) HRESULT _IBalloonAuto::GetReferencedObjectInfo ( SAFEARRAY * * ReferencedObjects, SAFEARRAY * * ReferencedObjectTypes );
__declspec(implementation_key(2691)) enum TGBalloonReattachStatusConstants _IBalloonAuto::TGReattachToDrawingView ( IDispatch * DrawingView );
__declspec(implementation_key(2692)) IDispatchPtr _IBalloonAuto::GetAttributeSets ( );
__declspec(implementation_key(2693)) VARIANT_BOOL _IBalloonAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(2694)) Line2dPtr Lines2d::Item ( const _variant_t & Index );
__declspec(implementation_key(2695)) TGFramework::ApplicationPtr Lines2d::GetApplication ( );
__declspec(implementation_key(2696)) long Lines2d::GetCount ( );
__declspec(implementation_key(2697)) IDispatchPtr Lines2d::GetParent ( );
__declspec(implementation_key(2698)) Line2dPtr Lines2d::AddBy2Points ( double x1, double y1, double x2, double y2 );
__declspec(implementation_key(2699)) Line2dPtr Lines2d::AddByPointAngleLength ( double x, double y, double Angle, double Length );
__declspec(implementation_key(2700)) Line2dPtr Lines2d::AddAsChamfer ( IDispatch * Obj1, IDispatch * Obj2, double xDirection, double yDirection, double SetBackA, double SetBackB );
__declspec(implementation_key(2701)) SAFEARRAY * Lines2d::AddSlotBy3Points ( double x1, double y1, double x2, double y2, double x3, double y3, long isSlotByCenter );
__declspec(implementation_key(2702)) GeometryStyle2dPtr Line2d::GetStyle ( );
__declspec(implementation_key(2703)) Relationships2dPtr Line2d::GetRelationships ( );
__declspec(implementation_key(2704)) void Line2d::PutLayer ( _bstr_t _arg1 );
__declspec(implementation_key(2705)) _bstr_t Line2d::GetLayer ( );
__declspec(implementation_key(2706)) ChamferGeometry2dPtr Line2d::GetChamfer ( );
__declspec(implementation_key(2707)) TGFramework::ApplicationPtr Line2d::GetApplication ( );
__declspec(implementation_key(2708)) long Line2d::GetIndex ( );
__declspec(implementation_key(2709)) _bstr_t Line2d::GetName ( const _variant_t & Recurse );
__declspec(implementation_key(2710)) IDispatchPtr Line2d::GetParent ( );
__declspec(implementation_key(2711)) long Line2d::GetType ( );
__declspec(implementation_key(2712)) long Line2d::GetZOrder ( );
__declspec(implementation_key(2713)) _bstr_t Line2d::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(2714)) IDispatchPtr Line2d::GetDocument ( );
__declspec(implementation_key(2715)) HRESULT Line2d::Copy ( );
__declspec(implementation_key(2716)) HRESULT Line2d::Cut ( );
__declspec(implementation_key(2717)) HRESULT Line2d::Delete ( );
__declspec(implementation_key(2718)) HRESULT Line2d::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(2719)) HRESULT Line2d::Scale ( double Factor );
__declspec(implementation_key(2720)) HRESULT Line2d::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(2721)) HRESULT Line2d::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(2722)) IDispatchPtr Line2d::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(2723)) IDispatchPtr Line2d::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(2724)) HRESULT Line2d::BringToFront ( );
__declspec(implementation_key(2725)) HRESULT Line2d::BringForward ( );
__declspec(implementation_key(2726)) HRESULT Line2d::SendToBack ( );
__declspec(implementation_key(2727)) HRESULT Line2d::SendBackward ( );
__declspec(implementation_key(2728)) HRESULT Line2d::Select ( );
__declspec(implementation_key(2729)) double Line2d::GetLength ( );
__declspec(implementation_key(2730)) void Line2d::PutLength ( double _arg1 );
__declspec(implementation_key(2731)) double Line2d::GetAngle ( );
__declspec(implementation_key(2732)) void Line2d::PutAngle ( double _arg1 );
__declspec(implementation_key(2733)) VARIANT_BOOL Line2d::GetIsChamfer ( );
__declspec(implementation_key(2734)) HRESULT Line2d::GetStartPoint ( double * x, double * y );
__declspec(implementation_key(2735)) HRESULT Line2d::SetStartPoint ( double x, double y );
__declspec(implementation_key(2736)) HRESULT Line2d::GetEndPoint ( double * x, double * y );
__declspec(implementation_key(2737)) HRESULT Line2d::SetEndPoint ( double x, double y );
__declspec(implementation_key(2738)) HRESULT Line2d::Trim ( double x, double y, IDispatch * CutObj1, const _variant_t & CutObj2 );
__declspec(implementation_key(2739)) long Line2d::GetKeyPointCount ( );
__declspec(implementation_key(2740)) HRESULT Line2d::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(2741)) HRESULT Line2d::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(2742)) HRESULT Line2d::Extend ( double x, double y, IDispatch * TargetObj );
__declspec(implementation_key(2743)) HRESULT Line2d::CornerTrim ( double xKeep, double yKeep, IDispatch * TargetObj, double xTargetKeep, double yTargetKeep );
__declspec(implementation_key(2744)) long Line2d::GetSegmentedStyleCount ( );
__declspec(implementation_key(2745)) HRESULT Line2d::AddSegmentedStyle ( double x1, double y1, double x2, double y2, IDispatch * Style );
__declspec(implementation_key(2746)) HRESULT Line2d::GetSegmentedStyle ( long Index, double * x1, double * y1, double * x2, double * y2, IDispatch * * Style );
__declspec(implementation_key(2747)) HRESULT Line2d::SetSegmentedStyle ( long Index, IDispatch * Style );
__declspec(implementation_key(2748)) HRESULT Line2d::RemoveSegmentedStyle ( long Index );
__declspec(implementation_key(2749)) HRESULT Line2d::RemoveAllSegmentedStyles ( );
__declspec(implementation_key(2750)) HRESULT Line2d::RemoveAllSegmentedStylesBetween ( double x1, double y1, double x2, double y2 );
__declspec(implementation_key(2751)) IDispatchPtr Line2d::GetAttributeSets ( );
__declspec(implementation_key(2752)) VARIANT_BOOL Line2d::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(2753)) VARIANT_BOOL Line2d::GetProjection ( );
__declspec(implementation_key(2754)) void Line2d::PutProjection ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2755)) void Line2d::PutProjectionDashName ( _bstr_t _arg1 );
__declspec(implementation_key(2756)) _bstr_t Line2d::GetProjectionDashName ( );
__declspec(implementation_key(2757)) HRESULT Line2d::SplitAtPoint ( double x, double y, VARIANT * OtherSplitElement );
__declspec(implementation_key(2758)) Line2dPtr _ILines2dAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(2759)) IUnknownPtr _ILines2dAuto::Get_NewEnum ( );
__declspec(implementation_key(2760)) TGFramework::ApplicationPtr _ILines2dAuto::GetApplication ( );
__declspec(implementation_key(2761)) long _ILines2dAuto::GetCount ( );
__declspec(implementation_key(2762)) IDispatchPtr _ILines2dAuto::GetParent ( );
__declspec(implementation_key(2763)) Line2dPtr _ILines2dAuto::AddBy2Points ( double x1, double y1, double x2, double y2 );
__declspec(implementation_key(2764)) Line2dPtr _ILines2dAuto::AddByPointAngleLength ( double x, double y, double Angle, double Length );
__declspec(implementation_key(2765)) Line2dPtr _ILines2dAuto::AddAsChamfer ( IDispatch * Obj1, IDispatch * Obj2, double xDirection, double yDirection, double SetBackA, double SetBackB );
__declspec(implementation_key(2766)) SAFEARRAY * _ILines2dAuto::AddSlotBy3Points ( double x1, double y1, double x2, double y2, double x3, double y3, long isSlotByCenter );
__declspec(implementation_key(2767)) void GeometryStyle2d::PutLinearColor ( long _arg1 );
__declspec(implementation_key(2768)) long GeometryStyle2d::GetLinearColor ( );
__declspec(implementation_key(2769)) double GeometryStyle2d::GetWidth ( );
__declspec(implementation_key(2770)) void GeometryStyle2d::PutWidth ( double _arg1 );
__declspec(implementation_key(2771)) void GeometryStyle2d::PutUnits ( long _arg1 );
__declspec(implementation_key(2772)) long GeometryStyle2d::GetUnits ( );
__declspec(implementation_key(2773)) VARIANT_BOOL GeometryStyle2d::GetAutoPhase ( );
__declspec(implementation_key(2774)) void GeometryStyle2d::PutAutoPhase ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2775)) long GeometryStyle2d::GetDashGapCount ( );
__declspec(implementation_key(2776)) double GeometryStyle2d::GetDashStrokePercent ( );
__declspec(implementation_key(2777)) void GeometryStyle2d::PutDashStrokePercent ( double _arg1 );
__declspec(implementation_key(2778)) void GeometryStyle2d::PutLinearName ( _bstr_t _arg1 );
__declspec(implementation_key(2779)) _bstr_t GeometryStyle2d::GetLinearName ( );
__declspec(implementation_key(2780)) void GeometryStyle2d::PutDashName ( _bstr_t _arg1 );
__declspec(implementation_key(2781)) _bstr_t GeometryStyle2d::GetDashName ( );
__declspec(implementation_key(2782)) HRESULT GeometryStyle2d::UseActiveStyle ( long ForFutureUse );
__declspec(implementation_key(2783)) HRESULT GeometryStyle2d::SetDashGap ( long DashCount, SAFEARRAY * * Dashes );
__declspec(implementation_key(2784)) HRESULT GeometryStyle2d::GetDashGap ( long DashCount, SAFEARRAY * * Dashes );
__declspec(implementation_key(2785)) void _IGeometryStyle2dAuto::PutLinearColor ( long Color );
__declspec(implementation_key(2786)) long _IGeometryStyle2dAuto::GetLinearColor ( );
__declspec(implementation_key(2787)) double _IGeometryStyle2dAuto::GetWidth ( );
__declspec(implementation_key(2788)) void _IGeometryStyle2dAuto::PutWidth ( double PenWidth );
__declspec(implementation_key(2789)) void _IGeometryStyle2dAuto::PutUnits ( long Units );
__declspec(implementation_key(2790)) long _IGeometryStyle2dAuto::GetUnits ( );
__declspec(implementation_key(2791)) VARIANT_BOOL _IGeometryStyle2dAuto::GetAutoPhase ( );
__declspec(implementation_key(2792)) void _IGeometryStyle2dAuto::PutAutoPhase ( VARIANT_BOOL AutoPhase );
__declspec(implementation_key(2793)) long _IGeometryStyle2dAuto::GetDashGapCount ( );
__declspec(implementation_key(2794)) double _IGeometryStyle2dAuto::GetDashStrokePercent ( );
__declspec(implementation_key(2795)) void _IGeometryStyle2dAuto::PutDashStrokePercent ( double DashStrokePercent );
__declspec(implementation_key(2796)) void _IGeometryStyle2dAuto::PutLinearName ( _bstr_t StyleName );
__declspec(implementation_key(2797)) _bstr_t _IGeometryStyle2dAuto::GetLinearName ( );
__declspec(implementation_key(2798)) void _IGeometryStyle2dAuto::PutDashName ( _bstr_t StyleName );
__declspec(implementation_key(2799)) _bstr_t _IGeometryStyle2dAuto::GetDashName ( );
__declspec(implementation_key(2800)) HRESULT _IGeometryStyle2dAuto::UseActiveStyle ( long ForFutureUse );
__declspec(implementation_key(2801)) HRESULT _IGeometryStyle2dAuto::SetDashGap ( long DashCount, SAFEARRAY * * Dashes );
__declspec(implementation_key(2802)) HRESULT _IGeometryStyle2dAuto::GetDashGap ( long DashCount, SAFEARRAY * * Dashes );
__declspec(implementation_key(2803)) IDispatchPtr Relationships2d::Item ( const _variant_t & Index );
__declspec(implementation_key(2804)) TGFramework::ApplicationPtr Relationships2d::GetApplication ( );
__declspec(implementation_key(2805)) long Relationships2d::GetCount ( );
__declspec(implementation_key(2806)) IDispatchPtr Relationships2d::GetParent ( );
__declspec(implementation_key(2807)) IDispatchPtr _IRelationships2dAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(2808)) IUnknownPtr _IRelationships2dAuto::Get_NewEnum ( );
__declspec(implementation_key(2809)) TGFramework::ApplicationPtr _IRelationships2dAuto::GetApplication ( );
__declspec(implementation_key(2810)) long _IRelationships2dAuto::GetCount ( );
__declspec(implementation_key(2811)) IDispatchPtr _IRelationships2dAuto::GetParent ( );
__declspec(implementation_key(2812)) double ChamferGeometry2d::GetAngle ( );
__declspec(implementation_key(2813)) void ChamferGeometry2d::PutAngle ( double _arg1 );
__declspec(implementation_key(2814)) double ChamferGeometry2d::GetSetBackA ( );
__declspec(implementation_key(2815)) void ChamferGeometry2d::PutSetBackA ( double _arg1 );
__declspec(implementation_key(2816)) double ChamferGeometry2d::GetSetBackB ( );
__declspec(implementation_key(2817)) void ChamferGeometry2d::PutSetBackB ( double _arg1 );
__declspec(implementation_key(2818)) HRESULT ChamferGeometry2d::GetConnectedObjects ( IDispatch * * Obj1, IDispatch * * Obj2 );
__declspec(implementation_key(2819)) HRESULT ChamferGeometry2d::ModifyByPointAndAngle ( double x, double y, double Angle );
__declspec(implementation_key(2820)) HRESULT ChamferGeometry2d::ModifyBySetBacks ( double SetBackA, double SetBackB );
__declspec(implementation_key(2821)) GeometryStyle2dPtr _ILine2dAuto::GetStyle ( );
__declspec(implementation_key(2822)) Relationships2dPtr _ILine2dAuto::GetRelationships ( );
__declspec(implementation_key(2823)) void _ILine2dAuto::PutLayer ( _bstr_t Layer );
__declspec(implementation_key(2824)) _bstr_t _ILine2dAuto::GetLayer ( );
__declspec(implementation_key(2825)) ChamferGeometry2dPtr _ILine2dAuto::GetChamfer ( );
__declspec(implementation_key(2826)) TGFramework::ApplicationPtr _ILine2dAuto::GetApplication ( );
__declspec(implementation_key(2827)) long _ILine2dAuto::GetIndex ( );
__declspec(implementation_key(2828)) _bstr_t _ILine2dAuto::GetName ( const _variant_t & Recurse, long Lcid );
__declspec(implementation_key(2829)) IDispatchPtr _ILine2dAuto::GetParent ( );
__declspec(implementation_key(2830)) long _ILine2dAuto::GetType ( );
__declspec(implementation_key(2831)) long _ILine2dAuto::GetZOrder ( );
__declspec(implementation_key(2832)) _bstr_t _ILine2dAuto::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(2833)) IDispatchPtr _ILine2dAuto::GetDocument ( );
__declspec(implementation_key(2834)) HRESULT _ILine2dAuto::Copy ( );
__declspec(implementation_key(2835)) HRESULT _ILine2dAuto::Cut ( );
__declspec(implementation_key(2836)) HRESULT _ILine2dAuto::Delete ( );
__declspec(implementation_key(2837)) HRESULT _ILine2dAuto::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(2838)) HRESULT _ILine2dAuto::Scale ( double Factor );
__declspec(implementation_key(2839)) HRESULT _ILine2dAuto::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(2840)) HRESULT _ILine2dAuto::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(2841)) IDispatchPtr _ILine2dAuto::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(2842)) IDispatchPtr _ILine2dAuto::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(2843)) HRESULT _ILine2dAuto::BringToFront ( );
__declspec(implementation_key(2844)) HRESULT _ILine2dAuto::BringForward ( );
__declspec(implementation_key(2845)) HRESULT _ILine2dAuto::SendToBack ( );
__declspec(implementation_key(2846)) HRESULT _ILine2dAuto::SendBackward ( );
__declspec(implementation_key(2847)) HRESULT _ILine2dAuto::Select ( );
__declspec(implementation_key(2848)) double _ILine2dAuto::GetLength ( );
__declspec(implementation_key(2849)) void _ILine2dAuto::PutLength ( double Length );
__declspec(implementation_key(2850)) double _ILine2dAuto::GetAngle ( );
__declspec(implementation_key(2851)) void _ILine2dAuto::PutAngle ( double Angle );
__declspec(implementation_key(2852)) VARIANT_BOOL _ILine2dAuto::GetIsChamfer ( );
__declspec(implementation_key(2853)) HRESULT _ILine2dAuto::GetStartPoint ( double * x, double * y );
__declspec(implementation_key(2854)) HRESULT _ILine2dAuto::SetStartPoint ( double x, double y );
__declspec(implementation_key(2855)) HRESULT _ILine2dAuto::GetEndPoint ( double * x, double * y );
__declspec(implementation_key(2856)) HRESULT _ILine2dAuto::SetEndPoint ( double x, double y );
__declspec(implementation_key(2857)) HRESULT _ILine2dAuto::Trim ( double x, double y, IDispatch * CutObj1, const _variant_t & CutObj2 );
__declspec(implementation_key(2858)) long _ILine2dAuto::GetKeyPointCount ( );
__declspec(implementation_key(2859)) HRESULT _ILine2dAuto::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(2860)) HRESULT _ILine2dAuto::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(2861)) HRESULT _ILine2dAuto::Extend ( double x, double y, IDispatch * TargetObj );
__declspec(implementation_key(2862)) HRESULT _ILine2dAuto::CornerTrim ( double xKeep, double yKeep, IDispatch * TargetObj, double xTargetKeep, double yTargetKeep );
__declspec(implementation_key(2863)) long _ILine2dAuto::GetSegmentedStyleCount ( );
__declspec(implementation_key(2864)) HRESULT _ILine2dAuto::AddSegmentedStyle ( double x1, double y1, double x2, double y2, IDispatch * Style );
__declspec(implementation_key(2865)) HRESULT _ILine2dAuto::GetSegmentedStyle ( long Index, double * x1, double * y1, double * x2, double * y2, IDispatch * * Style );
__declspec(implementation_key(2866)) HRESULT _ILine2dAuto::SetSegmentedStyle ( long Index, IDispatch * Style );
__declspec(implementation_key(2867)) HRESULT _ILine2dAuto::RemoveSegmentedStyle ( long Index );
__declspec(implementation_key(2868)) HRESULT _ILine2dAuto::RemoveAllSegmentedStyles ( );
__declspec(implementation_key(2869)) HRESULT _ILine2dAuto::RemoveAllSegmentedStylesBetween ( double x1, double y1, double x2, double y2 );
__declspec(implementation_key(2870)) IDispatchPtr _ILine2dAuto::GetAttributeSets ( );
__declspec(implementation_key(2871)) VARIANT_BOOL _ILine2dAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(2872)) VARIANT_BOOL _ILine2dAuto::GetProjection ( );
__declspec(implementation_key(2873)) void _ILine2dAuto::PutProjection ( VARIANT_BOOL IsProjection );
__declspec(implementation_key(2874)) void _ILine2dAuto::PutProjectionDashName ( _bstr_t StyleName );
__declspec(implementation_key(2875)) _bstr_t _ILine2dAuto::GetProjectionDashName ( );
__declspec(implementation_key(2876)) HRESULT _ILine2dAuto::SplitAtPoint ( double x, double y, VARIANT * OtherSplitElement );
__declspec(implementation_key(2877)) double _IChamferGeometry2dAuto::GetAngle ( );
__declspec(implementation_key(2878)) void _IChamferGeometry2dAuto::PutAngle ( double Angle );
__declspec(implementation_key(2879)) double _IChamferGeometry2dAuto::GetSetBackA ( );
__declspec(implementation_key(2880)) void _IChamferGeometry2dAuto::PutSetBackA ( double SetBackA );
__declspec(implementation_key(2881)) double _IChamferGeometry2dAuto::GetSetBackB ( );
__declspec(implementation_key(2882)) void _IChamferGeometry2dAuto::PutSetBackB ( double SetBackB );
__declspec(implementation_key(2883)) HRESULT _IChamferGeometry2dAuto::GetConnectedObjects ( IDispatch * * Obj1, IDispatch * * Obj2 );
__declspec(implementation_key(2884)) HRESULT _IChamferGeometry2dAuto::ModifyByPointAndAngle ( double x, double y, double Angle );
__declspec(implementation_key(2885)) HRESULT _IChamferGeometry2dAuto::ModifyBySetBacks ( double SetBackA, double SetBackB );
__declspec(implementation_key(2886)) Circle2dPtr Circles2d::Item ( const _variant_t & Index );
__declspec(implementation_key(2887)) TGFramework::ApplicationPtr Circles2d::GetApplication ( );
__declspec(implementation_key(2888)) long Circles2d::GetCount ( );
__declspec(implementation_key(2889)) IDispatchPtr Circles2d::GetParent ( );
__declspec(implementation_key(2890)) Circle2dPtr Circles2d::AddByCenterRadius ( double x, double y, double Radius );
__declspec(implementation_key(2891)) Circle2dPtr Circles2d::AddBy3Points ( double x1, double y1, double x2, double y2, double x3, double y3 );
__declspec(implementation_key(2892)) GeometryStyle2dPtr Circle2d::GetStyle ( );
__declspec(implementation_key(2893)) Relationships2dPtr Circle2d::GetRelationships ( );
__declspec(implementation_key(2894)) void Circle2d::PutLayer ( _bstr_t _arg1 );
__declspec(implementation_key(2895)) _bstr_t Circle2d::GetLayer ( );
__declspec(implementation_key(2896)) TGFramework::ApplicationPtr Circle2d::GetApplication ( );
__declspec(implementation_key(2897)) long Circle2d::GetIndex ( );
__declspec(implementation_key(2898)) _bstr_t Circle2d::GetName ( const _variant_t & Recurse );
__declspec(implementation_key(2899)) IDispatchPtr Circle2d::GetParent ( );
__declspec(implementation_key(2900)) long Circle2d::GetType ( );
__declspec(implementation_key(2901)) long Circle2d::GetZOrder ( );
__declspec(implementation_key(2902)) _bstr_t Circle2d::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(2903)) IDispatchPtr Circle2d::GetDocument ( );
__declspec(implementation_key(2904)) HRESULT Circle2d::Copy ( );
__declspec(implementation_key(2905)) HRESULT Circle2d::Cut ( );
__declspec(implementation_key(2906)) HRESULT Circle2d::Delete ( );
__declspec(implementation_key(2907)) HRESULT Circle2d::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(2908)) HRESULT Circle2d::Scale ( double Factor );
__declspec(implementation_key(2909)) HRESULT Circle2d::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(2910)) HRESULT Circle2d::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(2911)) IDispatchPtr Circle2d::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(2912)) IDispatchPtr Circle2d::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(2913)) HRESULT Circle2d::BringToFront ( );
__declspec(implementation_key(2914)) HRESULT Circle2d::BringForward ( );
__declspec(implementation_key(2915)) HRESULT Circle2d::SendToBack ( );
__declspec(implementation_key(2916)) HRESULT Circle2d::SendBackward ( );
__declspec(implementation_key(2917)) HRESULT Circle2d::Select ( );
__declspec(implementation_key(2918)) double Circle2d::GetRadius ( );
__declspec(implementation_key(2919)) void Circle2d::PutRadius ( double _arg1 );
__declspec(implementation_key(2920)) double Circle2d::GetDiameter ( );
__declspec(implementation_key(2921)) void Circle2d::PutDiameter ( double _arg1 );
__declspec(implementation_key(2922)) double Circle2d::GetCircumference ( );
__declspec(implementation_key(2923)) double Circle2d::GetArea ( );
__declspec(implementation_key(2924)) HRESULT Circle2d::GetCenterPoint ( double * x, double * y );
__declspec(implementation_key(2925)) HRESULT Circle2d::SetCenterPoint ( double x, double y );
__declspec(implementation_key(2926)) HRESULT Circle2d::GetMajorAxis ( double * x, double * y );
__declspec(implementation_key(2927)) HRESULT Circle2d::SetMajorAxis ( double x, double y );
__declspec(implementation_key(2928)) HRESULT Circle2d::Trim ( double x, double y, IDispatch * CutObj1, const _variant_t & CutObj2 );
__declspec(implementation_key(2929)) long Circle2d::GetKeyPointCount ( );
__declspec(implementation_key(2930)) HRESULT Circle2d::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(2931)) HRESULT Circle2d::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(2932)) long Circle2d::GetSegmentedStyleCount ( );
__declspec(implementation_key(2933)) HRESULT Circle2d::AddSegmentedStyle ( double x1, double y1, double x2, double y2, IDispatch * Style );
__declspec(implementation_key(2934)) HRESULT Circle2d::GetSegmentedStyle ( long Index, double * x1, double * y1, double * x2, double * y2, IDispatch * * Style );
__declspec(implementation_key(2935)) HRESULT Circle2d::SetSegmentedStyle ( long Index, IDispatch * Style );
__declspec(implementation_key(2936)) HRESULT Circle2d::RemoveSegmentedStyle ( long Index );
__declspec(implementation_key(2937)) HRESULT Circle2d::RemoveAllSegmentedStyles ( );
__declspec(implementation_key(2938)) HRESULT Circle2d::RemoveAllSegmentedStylesBetween ( double x1, double y1, double x2, double y2 );
__declspec(implementation_key(2939)) IDispatchPtr Circle2d::GetAttributeSets ( );
__declspec(implementation_key(2940)) VARIANT_BOOL Circle2d::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(2941)) VARIANT_BOOL Circle2d::GetShowCurvatureComb ( );
__declspec(implementation_key(2942)) void Circle2d::PutShowCurvatureComb ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(2943)) HRESULT Circle2d::SplitAtPoints ( double x1, double y1, double x2, double y2, VARIANT * SplitElement1, VARIANT * SplitElement2 );
__declspec(implementation_key(2944)) double Circle2d::GetLength ( );
__declspec(implementation_key(2945)) Circle2dPtr _ICircles2dAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(2946)) IUnknownPtr _ICircles2dAuto::Get_NewEnum ( );
__declspec(implementation_key(2947)) TGFramework::ApplicationPtr _ICircles2dAuto::GetApplication ( );
__declspec(implementation_key(2948)) long _ICircles2dAuto::GetCount ( );
__declspec(implementation_key(2949)) IDispatchPtr _ICircles2dAuto::GetParent ( );
__declspec(implementation_key(2950)) Circle2dPtr _ICircles2dAuto::AddByCenterRadius ( double x, double y, double Radius );
__declspec(implementation_key(2951)) Circle2dPtr _ICircles2dAuto::AddBy3Points ( double x1, double y1, double x2, double y2, double x3, double y3 );
__declspec(implementation_key(2952)) GeometryStyle2dPtr _ICircle2dAuto::GetStyle ( );
__declspec(implementation_key(2953)) Relationships2dPtr _ICircle2dAuto::GetRelationships ( );
__declspec(implementation_key(2954)) void _ICircle2dAuto::PutLayer ( _bstr_t Layer );
__declspec(implementation_key(2955)) _bstr_t _ICircle2dAuto::GetLayer ( );
__declspec(implementation_key(2956)) TGFramework::ApplicationPtr _ICircle2dAuto::GetApplication ( );
__declspec(implementation_key(2957)) long _ICircle2dAuto::GetIndex ( );
__declspec(implementation_key(2958)) _bstr_t _ICircle2dAuto::GetName ( const _variant_t & Recurse, long Lcid );
__declspec(implementation_key(2959)) IDispatchPtr _ICircle2dAuto::GetParent ( );
__declspec(implementation_key(2960)) long _ICircle2dAuto::GetType ( );
__declspec(implementation_key(2961)) long _ICircle2dAuto::GetZOrder ( );
__declspec(implementation_key(2962)) _bstr_t _ICircle2dAuto::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(2963)) IDispatchPtr _ICircle2dAuto::GetDocument ( );
__declspec(implementation_key(2964)) HRESULT _ICircle2dAuto::Copy ( );
__declspec(implementation_key(2965)) HRESULT _ICircle2dAuto::Cut ( );
__declspec(implementation_key(2966)) HRESULT _ICircle2dAuto::Delete ( );
__declspec(implementation_key(2967)) HRESULT _ICircle2dAuto::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(2968)) HRESULT _ICircle2dAuto::Scale ( double Factor );
__declspec(implementation_key(2969)) HRESULT _ICircle2dAuto::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(2970)) HRESULT _ICircle2dAuto::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(2971)) IDispatchPtr _ICircle2dAuto::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(2972)) IDispatchPtr _ICircle2dAuto::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(2973)) HRESULT _ICircle2dAuto::BringToFront ( );
__declspec(implementation_key(2974)) HRESULT _ICircle2dAuto::BringForward ( );
__declspec(implementation_key(2975)) HRESULT _ICircle2dAuto::SendToBack ( );
__declspec(implementation_key(2976)) HRESULT _ICircle2dAuto::SendBackward ( );
__declspec(implementation_key(2977)) HRESULT _ICircle2dAuto::Select ( );
__declspec(implementation_key(2978)) double _ICircle2dAuto::GetRadius ( );
__declspec(implementation_key(2979)) void _ICircle2dAuto::PutRadius ( double Radius );
__declspec(implementation_key(2980)) double _ICircle2dAuto::GetDiameter ( );
__declspec(implementation_key(2981)) void _ICircle2dAuto::PutDiameter ( double Diameter );
__declspec(implementation_key(2982)) double _ICircle2dAuto::GetCircumference ( );
__declspec(implementation_key(2983)) double _ICircle2dAuto::GetArea ( );
__declspec(implementation_key(2984)) HRESULT _ICircle2dAuto::GetCenterPoint ( double * x, double * y );
__declspec(implementation_key(2985)) HRESULT _ICircle2dAuto::SetCenterPoint ( double x, double y );
__declspec(implementation_key(2986)) HRESULT _ICircle2dAuto::GetMajorAxis ( double * x, double * y );
__declspec(implementation_key(2987)) HRESULT _ICircle2dAuto::SetMajorAxis ( double x, double y );
__declspec(implementation_key(2988)) HRESULT _ICircle2dAuto::Trim ( double x, double y, IDispatch * CutObj1, const _variant_t & CutObj2 );
__declspec(implementation_key(2989)) long _ICircle2dAuto::GetKeyPointCount ( );
__declspec(implementation_key(2990)) HRESULT _ICircle2dAuto::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(2991)) HRESULT _ICircle2dAuto::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(2992)) long _ICircle2dAuto::GetSegmentedStyleCount ( );
__declspec(implementation_key(2993)) HRESULT _ICircle2dAuto::AddSegmentedStyle ( double x1, double y1, double x2, double y2, IDispatch * Style );
__declspec(implementation_key(2994)) HRESULT _ICircle2dAuto::GetSegmentedStyle ( long Index, double * x1, double * y1, double * x2, double * y2, IDispatch * * Style );
__declspec(implementation_key(2995)) HRESULT _ICircle2dAuto::SetSegmentedStyle ( long Index, IDispatch * Style );
__declspec(implementation_key(2996)) HRESULT _ICircle2dAuto::RemoveSegmentedStyle ( long Index );
__declspec(implementation_key(2997)) HRESULT _ICircle2dAuto::RemoveAllSegmentedStyles ( );
__declspec(implementation_key(2998)) HRESULT _ICircle2dAuto::RemoveAllSegmentedStylesBetween ( double x1, double y1, double x2, double y2 );
__declspec(implementation_key(2999)) IDispatchPtr _ICircle2dAuto::GetAttributeSets ( );
__declspec(implementation_key(3000)) VARIANT_BOOL _ICircle2dAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(3001)) VARIANT_BOOL _ICircle2dAuto::GetShowCurvatureComb ( );
__declspec(implementation_key(3002)) void _ICircle2dAuto::PutShowCurvatureComb ( VARIANT_BOOL Show );
__declspec(implementation_key(3003)) HRESULT _ICircle2dAuto::SplitAtPoints ( double x1, double y1, double x2, double y2, VARIANT * SplitElement1, VARIANT * SplitElement2 );
__declspec(implementation_key(3004)) double _ICircle2dAuto::GetLength ( );
__declspec(implementation_key(3005)) Arc2dPtr Arcs2d::Item ( const _variant_t & Index );
__declspec(implementation_key(3006)) TGFramework::ApplicationPtr Arcs2d::GetApplication ( );
__declspec(implementation_key(3007)) long Arcs2d::GetCount ( );
__declspec(implementation_key(3008)) IDispatchPtr Arcs2d::GetParent ( );
__declspec(implementation_key(3009)) Arc2dPtr Arcs2d::AddByStartAlongEnd ( double xStart, double yStart, double xAlong, double yAlong, double xEnd, double yEnd );
__declspec(implementation_key(3010)) Arc2dPtr Arcs2d::AddByCenterStartEnd ( double xCenter, double yCenter, double xStart, double yStart, double xEnd, double yEnd );
__declspec(implementation_key(3011)) Arc2dPtr Arcs2d::AddAsFillet ( IDispatch * Obj1, IDispatch * Obj2, double Radius, double xDirection, double yDirection );
__declspec(implementation_key(3012)) Arc2dPtr Arcs2d::AddAsFilletNoTrim ( IDispatch * Obj1, IDispatch * Obj2, double Radius, double xDirection, double yDirection );
__declspec(implementation_key(3013)) GeometryStyle2dPtr Arc2d::GetStyle ( );
__declspec(implementation_key(3014)) Relationships2dPtr Arc2d::GetRelationships ( );
__declspec(implementation_key(3015)) void Arc2d::PutLayer ( _bstr_t _arg1 );
__declspec(implementation_key(3016)) _bstr_t Arc2d::GetLayer ( );
__declspec(implementation_key(3017)) FilletGeometry2dPtr Arc2d::GetFillet ( );
__declspec(implementation_key(3018)) TGFramework::ApplicationPtr Arc2d::GetApplication ( );
__declspec(implementation_key(3019)) long Arc2d::GetIndex ( );
__declspec(implementation_key(3020)) _bstr_t Arc2d::GetName ( const _variant_t & Recurse );
__declspec(implementation_key(3021)) IDispatchPtr Arc2d::GetParent ( );
__declspec(implementation_key(3022)) long Arc2d::GetType ( );
__declspec(implementation_key(3023)) long Arc2d::GetZOrder ( );
__declspec(implementation_key(3024)) _bstr_t Arc2d::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(3025)) IDispatchPtr Arc2d::GetDocument ( );
__declspec(implementation_key(3026)) HRESULT Arc2d::Copy ( );
__declspec(implementation_key(3027)) HRESULT Arc2d::Cut ( );
__declspec(implementation_key(3028)) HRESULT Arc2d::Delete ( );
__declspec(implementation_key(3029)) HRESULT Arc2d::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(3030)) HRESULT Arc2d::Scale ( double Factor );
__declspec(implementation_key(3031)) HRESULT Arc2d::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(3032)) HRESULT Arc2d::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(3033)) IDispatchPtr Arc2d::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(3034)) IDispatchPtr Arc2d::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(3035)) HRESULT Arc2d::BringToFront ( );
__declspec(implementation_key(3036)) HRESULT Arc2d::BringForward ( );
__declspec(implementation_key(3037)) HRESULT Arc2d::SendToBack ( );
__declspec(implementation_key(3038)) HRESULT Arc2d::SendBackward ( );
__declspec(implementation_key(3039)) HRESULT Arc2d::Select ( );
__declspec(implementation_key(3040)) void Arc2d::PutRadius ( double _arg1 );
__declspec(implementation_key(3041)) double Arc2d::GetRadius ( );
__declspec(implementation_key(3042)) double Arc2d::GetStartAngle ( );
__declspec(implementation_key(3043)) void Arc2d::PutStartAngle ( double _arg1 );
__declspec(implementation_key(3044)) double Arc2d::GetSweepAngle ( );
__declspec(implementation_key(3045)) void Arc2d::PutSweepAngle ( double _arg1 );
__declspec(implementation_key(3046)) void Arc2d::PutOrientation ( enum Geom2dOrientationConstants _arg1 );
__declspec(implementation_key(3047)) enum Geom2dOrientationConstants Arc2d::GetOrientation ( );
__declspec(implementation_key(3048)) VARIANT_BOOL Arc2d::GetIsFillet ( );
__declspec(implementation_key(3049)) HRESULT Arc2d::GetStartPoint ( double * x, double * y );
__declspec(implementation_key(3050)) HRESULT Arc2d::SetStartPoint ( double x, double y );
__declspec(implementation_key(3051)) HRESULT Arc2d::GetEndPoint ( double * x, double * y );
__declspec(implementation_key(3052)) HRESULT Arc2d::SetEndPoint ( double x, double y );
__declspec(implementation_key(3053)) HRESULT Arc2d::GetCenterPoint ( double * x, double * y );
__declspec(implementation_key(3054)) HRESULT Arc2d::SetCenterPoint ( double x, double y );
__declspec(implementation_key(3055)) HRESULT Arc2d::GetMajorAxis ( double * x, double * y );
__declspec(implementation_key(3056)) HRESULT Arc2d::SetMajorAxis ( double x, double y );
__declspec(implementation_key(3057)) HRESULT Arc2d::Trim ( double x, double y, IDispatch * CutObj1, const _variant_t & CutObj2 );
__declspec(implementation_key(3058)) long Arc2d::GetKeyPointCount ( );
__declspec(implementation_key(3059)) HRESULT Arc2d::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(3060)) HRESULT Arc2d::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(3061)) HRESULT Arc2d::Extend ( double x, double y, IDispatch * TargetObj );
__declspec(implementation_key(3062)) HRESULT Arc2d::CornerTrim ( double xKeep, double yKeep, IDispatch * TargetObj, double xTargetKeep, double yTargetKeep );
__declspec(implementation_key(3063)) long Arc2d::GetSegmentedStyleCount ( );
__declspec(implementation_key(3064)) HRESULT Arc2d::AddSegmentedStyle ( double x1, double y1, double x2, double y2, IDispatch * Style );
__declspec(implementation_key(3065)) HRESULT Arc2d::GetSegmentedStyle ( long Index, double * x1, double * y1, double * x2, double * y2, IDispatch * * Style );
__declspec(implementation_key(3066)) HRESULT Arc2d::SetSegmentedStyle ( long Index, IDispatch * Style );
__declspec(implementation_key(3067)) HRESULT Arc2d::RemoveSegmentedStyle ( long Index );
__declspec(implementation_key(3068)) HRESULT Arc2d::RemoveAllSegmentedStyles ( );
__declspec(implementation_key(3069)) HRESULT Arc2d::RemoveAllSegmentedStylesBetween ( double x1, double y1, double x2, double y2 );
__declspec(implementation_key(3070)) IDispatchPtr Arc2d::GetAttributeSets ( );
__declspec(implementation_key(3071)) VARIANT_BOOL Arc2d::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(3072)) VARIANT_BOOL Arc2d::GetShowCurvatureComb ( );
__declspec(implementation_key(3073)) void Arc2d::PutShowCurvatureComb ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3074)) HRESULT Arc2d::SplitAtPoint ( double x, double y, VARIANT * OtherSplitElement );
__declspec(implementation_key(3075)) double Arc2d::GetLength ( );
__declspec(implementation_key(3076)) Arc2dPtr _IArcs2dAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(3077)) IUnknownPtr _IArcs2dAuto::Get_NewEnum ( );
__declspec(implementation_key(3078)) TGFramework::ApplicationPtr _IArcs2dAuto::GetApplication ( );
__declspec(implementation_key(3079)) long _IArcs2dAuto::GetCount ( );
__declspec(implementation_key(3080)) IDispatchPtr _IArcs2dAuto::GetParent ( );
__declspec(implementation_key(3081)) Arc2dPtr _IArcs2dAuto::AddByStartAlongEnd ( double xStart, double yStart, double xAlong, double yAlong, double xEnd, double yEnd );
__declspec(implementation_key(3082)) Arc2dPtr _IArcs2dAuto::AddByCenterStartEnd ( double xCenter, double yCenter, double xStart, double yStart, double xEnd, double yEnd );
__declspec(implementation_key(3083)) Arc2dPtr _IArcs2dAuto::AddAsFillet ( IDispatch * Obj1, IDispatch * Obj2, double Radius, double xDirection, double yDirection );
__declspec(implementation_key(3084)) Arc2dPtr _IArcs2dAuto::AddAsFilletNoTrim ( IDispatch * Obj1, IDispatch * Obj2, double Radius, double xDirection, double yDirection );
__declspec(implementation_key(3085)) HRESULT FilletGeometry2d::GetConnectedObjects ( IDispatch * * Obj1, IDispatch * * Obj2 );
__declspec(implementation_key(3086)) HRESULT _IFilletGeom2dAuto::GetConnectedObjects ( IDispatch * * Obj1, IDispatch * * Obj2 );
__declspec(implementation_key(3087)) GeometryStyle2dPtr _IArc2dAuto::GetStyle ( );
__declspec(implementation_key(3088)) Relationships2dPtr _IArc2dAuto::GetRelationships ( );
__declspec(implementation_key(3089)) void _IArc2dAuto::PutLayer ( _bstr_t Layer );
__declspec(implementation_key(3090)) _bstr_t _IArc2dAuto::GetLayer ( );
__declspec(implementation_key(3091)) FilletGeometry2dPtr _IArc2dAuto::GetFillet ( );
__declspec(implementation_key(3092)) TGFramework::ApplicationPtr _IArc2dAuto::GetApplication ( );
__declspec(implementation_key(3093)) long _IArc2dAuto::GetIndex ( );
__declspec(implementation_key(3094)) _bstr_t _IArc2dAuto::GetName ( const _variant_t & Recurse, long Lcid );
__declspec(implementation_key(3095)) IDispatchPtr _IArc2dAuto::GetParent ( );
__declspec(implementation_key(3096)) long _IArc2dAuto::GetType ( );
__declspec(implementation_key(3097)) long _IArc2dAuto::GetZOrder ( );
__declspec(implementation_key(3098)) _bstr_t _IArc2dAuto::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(3099)) IDispatchPtr _IArc2dAuto::GetDocument ( );
__declspec(implementation_key(3100)) HRESULT _IArc2dAuto::Copy ( );
__declspec(implementation_key(3101)) HRESULT _IArc2dAuto::Cut ( );
__declspec(implementation_key(3102)) HRESULT _IArc2dAuto::Delete ( );
__declspec(implementation_key(3103)) HRESULT _IArc2dAuto::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(3104)) HRESULT _IArc2dAuto::Scale ( double Factor );
__declspec(implementation_key(3105)) HRESULT _IArc2dAuto::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(3106)) HRESULT _IArc2dAuto::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(3107)) IDispatchPtr _IArc2dAuto::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(3108)) IDispatchPtr _IArc2dAuto::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(3109)) HRESULT _IArc2dAuto::BringToFront ( );
__declspec(implementation_key(3110)) HRESULT _IArc2dAuto::BringForward ( );
__declspec(implementation_key(3111)) HRESULT _IArc2dAuto::SendToBack ( );
__declspec(implementation_key(3112)) HRESULT _IArc2dAuto::SendBackward ( );
__declspec(implementation_key(3113)) HRESULT _IArc2dAuto::Select ( );
__declspec(implementation_key(3114)) void _IArc2dAuto::PutRadius ( double Radius );
__declspec(implementation_key(3115)) double _IArc2dAuto::GetRadius ( );
__declspec(implementation_key(3116)) double _IArc2dAuto::GetStartAngle ( );
__declspec(implementation_key(3117)) void _IArc2dAuto::PutStartAngle ( double Angle );
__declspec(implementation_key(3118)) double _IArc2dAuto::GetSweepAngle ( );
__declspec(implementation_key(3119)) void _IArc2dAuto::PutSweepAngle ( double Angle );
__declspec(implementation_key(3120)) void _IArc2dAuto::PutOrientation ( enum Geom2dOrientationConstants Orientation );
__declspec(implementation_key(3121)) enum Geom2dOrientationConstants _IArc2dAuto::GetOrientation ( );
__declspec(implementation_key(3122)) VARIANT_BOOL _IArc2dAuto::GetIsFillet ( );
__declspec(implementation_key(3123)) HRESULT _IArc2dAuto::GetStartPoint ( double * x, double * y );
__declspec(implementation_key(3124)) HRESULT _IArc2dAuto::SetStartPoint ( double x, double y );
__declspec(implementation_key(3125)) HRESULT _IArc2dAuto::GetEndPoint ( double * x, double * y );
__declspec(implementation_key(3126)) HRESULT _IArc2dAuto::SetEndPoint ( double x, double y );
__declspec(implementation_key(3127)) HRESULT _IArc2dAuto::GetCenterPoint ( double * x, double * y );
__declspec(implementation_key(3128)) HRESULT _IArc2dAuto::SetCenterPoint ( double x, double y );
__declspec(implementation_key(3129)) HRESULT _IArc2dAuto::GetMajorAxis ( double * x, double * y );
__declspec(implementation_key(3130)) HRESULT _IArc2dAuto::SetMajorAxis ( double x, double y );
__declspec(implementation_key(3131)) HRESULT _IArc2dAuto::Trim ( double x, double y, IDispatch * CutObj1, const _variant_t & CutObj2 );
__declspec(implementation_key(3132)) long _IArc2dAuto::GetKeyPointCount ( );
__declspec(implementation_key(3133)) HRESULT _IArc2dAuto::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(3134)) HRESULT _IArc2dAuto::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(3135)) HRESULT _IArc2dAuto::Extend ( double x, double y, IDispatch * TargetObj );
__declspec(implementation_key(3136)) HRESULT _IArc2dAuto::CornerTrim ( double xKeep, double yKeep, IDispatch * TargetObj, double xTargetKeep, double yTargetKeep );
__declspec(implementation_key(3137)) long _IArc2dAuto::GetSegmentedStyleCount ( );
__declspec(implementation_key(3138)) HRESULT _IArc2dAuto::AddSegmentedStyle ( double x1, double y1, double x2, double y2, IDispatch * Style );
__declspec(implementation_key(3139)) HRESULT _IArc2dAuto::GetSegmentedStyle ( long Index, double * x1, double * y1, double * x2, double * y2, IDispatch * * Style );
__declspec(implementation_key(3140)) HRESULT _IArc2dAuto::SetSegmentedStyle ( long Index, IDispatch * Style );
__declspec(implementation_key(3141)) HRESULT _IArc2dAuto::RemoveSegmentedStyle ( long Index );
__declspec(implementation_key(3142)) HRESULT _IArc2dAuto::RemoveAllSegmentedStyles ( );
__declspec(implementation_key(3143)) HRESULT _IArc2dAuto::RemoveAllSegmentedStylesBetween ( double x1, double y1, double x2, double y2 );
__declspec(implementation_key(3144)) IDispatchPtr _IArc2dAuto::GetAttributeSets ( );
__declspec(implementation_key(3145)) VARIANT_BOOL _IArc2dAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(3146)) VARIANT_BOOL _IArc2dAuto::GetShowCurvatureComb ( );
__declspec(implementation_key(3147)) void _IArc2dAuto::PutShowCurvatureComb ( VARIANT_BOOL Show );
__declspec(implementation_key(3148)) HRESULT _IArc2dAuto::SplitAtPoint ( double x, double y, VARIANT * OtherSplitElement );
__declspec(implementation_key(3149)) double _IArc2dAuto::GetLength ( );
__declspec(implementation_key(3150)) Ellipse2dPtr Ellipses2d::Item ( const _variant_t & Index );
__declspec(implementation_key(3151)) TGFramework::ApplicationPtr Ellipses2d::GetApplication ( );
__declspec(implementation_key(3152)) long Ellipses2d::GetCount ( );
__declspec(implementation_key(3153)) IDispatchPtr Ellipses2d::GetParent ( );
__declspec(implementation_key(3154)) Ellipse2dPtr Ellipses2d::AddByCenter ( double xCenter, double yCenter, double xMajor, double yMajor, double Ratio, enum Geom2dOrientationConstants Orientation );
__declspec(implementation_key(3155)) GeometryStyle2dPtr Ellipse2d::GetStyle ( );
__declspec(implementation_key(3156)) Relationships2dPtr Ellipse2d::GetRelationships ( );
__declspec(implementation_key(3157)) void Ellipse2d::PutLayer ( _bstr_t _arg1 );
__declspec(implementation_key(3158)) _bstr_t Ellipse2d::GetLayer ( );
__declspec(implementation_key(3159)) TGFramework::ApplicationPtr Ellipse2d::GetApplication ( );
__declspec(implementation_key(3160)) long Ellipse2d::GetIndex ( );
__declspec(implementation_key(3161)) _bstr_t Ellipse2d::GetName ( const _variant_t & Recurse );
__declspec(implementation_key(3162)) IDispatchPtr Ellipse2d::GetParent ( );
__declspec(implementation_key(3163)) long Ellipse2d::GetType ( );
__declspec(implementation_key(3164)) long Ellipse2d::GetZOrder ( );
__declspec(implementation_key(3165)) _bstr_t Ellipse2d::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(3166)) IDispatchPtr Ellipse2d::GetDocument ( );
__declspec(implementation_key(3167)) HRESULT Ellipse2d::Copy ( );
__declspec(implementation_key(3168)) HRESULT Ellipse2d::Cut ( );
__declspec(implementation_key(3169)) HRESULT Ellipse2d::Delete ( );
__declspec(implementation_key(3170)) HRESULT Ellipse2d::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(3171)) HRESULT Ellipse2d::Scale ( double Factor );
__declspec(implementation_key(3172)) HRESULT Ellipse2d::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(3173)) HRESULT Ellipse2d::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(3174)) IDispatchPtr Ellipse2d::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(3175)) IDispatchPtr Ellipse2d::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(3176)) HRESULT Ellipse2d::BringToFront ( );
__declspec(implementation_key(3177)) HRESULT Ellipse2d::BringForward ( );
__declspec(implementation_key(3178)) HRESULT Ellipse2d::SendToBack ( );
__declspec(implementation_key(3179)) HRESULT Ellipse2d::SendBackward ( );
__declspec(implementation_key(3180)) HRESULT Ellipse2d::Select ( );
__declspec(implementation_key(3181)) void Ellipse2d::PutMajorRadius ( double _arg1 );
__declspec(implementation_key(3182)) double Ellipse2d::GetMajorRadius ( );
__declspec(implementation_key(3183)) double Ellipse2d::GetMinorRadius ( );
__declspec(implementation_key(3184)) void Ellipse2d::PutMinorRadius ( double _arg1 );
__declspec(implementation_key(3185)) void Ellipse2d::PutOrientation ( enum Geom2dOrientationConstants _arg1 );
__declspec(implementation_key(3186)) enum Geom2dOrientationConstants Ellipse2d::GetOrientation ( );
__declspec(implementation_key(3187)) double Ellipse2d::GetRotationAngle ( );
__declspec(implementation_key(3188)) void Ellipse2d::PutRotationAngle ( double _arg1 );
__declspec(implementation_key(3189)) double Ellipse2d::GetMinorMajorRatio ( );
__declspec(implementation_key(3190)) void Ellipse2d::PutMinorMajorRatio ( double _arg1 );
__declspec(implementation_key(3191)) double Ellipse2d::GetCircumference ( );
__declspec(implementation_key(3192)) double Ellipse2d::GetArea ( );
__declspec(implementation_key(3193)) HRESULT Ellipse2d::GetCenterPoint ( double * x, double * y );
__declspec(implementation_key(3194)) HRESULT Ellipse2d::SetCenterPoint ( double x, double y );
__declspec(implementation_key(3195)) HRESULT Ellipse2d::GetMajorAxis ( double * x, double * y );
__declspec(implementation_key(3196)) HRESULT Ellipse2d::SetMajorAxis ( double x, double y );
__declspec(implementation_key(3197)) HRESULT Ellipse2d::GetMinorAxis ( double * x, double * y );
__declspec(implementation_key(3198)) HRESULT Ellipse2d::SetMinorAxis ( double x, double y );
__declspec(implementation_key(3199)) HRESULT Ellipse2d::Trim ( double x, double y, IDispatch * CutObj1, const _variant_t & CutObj2 );
__declspec(implementation_key(3200)) long Ellipse2d::GetKeyPointCount ( );
__declspec(implementation_key(3201)) HRESULT Ellipse2d::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(3202)) HRESULT Ellipse2d::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(3203)) long Ellipse2d::GetSegmentedStyleCount ( );
__declspec(implementation_key(3204)) HRESULT Ellipse2d::AddSegmentedStyle ( double x1, double y1, double x2, double y2, IDispatch * Style );
__declspec(implementation_key(3205)) HRESULT Ellipse2d::GetSegmentedStyle ( long Index, double * x1, double * y1, double * x2, double * y2, IDispatch * * Style );
__declspec(implementation_key(3206)) HRESULT Ellipse2d::SetSegmentedStyle ( long Index, IDispatch * Style );
__declspec(implementation_key(3207)) HRESULT Ellipse2d::RemoveSegmentedStyle ( long Index );
__declspec(implementation_key(3208)) HRESULT Ellipse2d::RemoveAllSegmentedStyles ( );
__declspec(implementation_key(3209)) HRESULT Ellipse2d::RemoveAllSegmentedStylesBetween ( double x1, double y1, double x2, double y2 );
__declspec(implementation_key(3210)) IDispatchPtr Ellipse2d::GetAttributeSets ( );
__declspec(implementation_key(3211)) VARIANT_BOOL Ellipse2d::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(3212)) VARIANT_BOOL Ellipse2d::GetShowCurvatureComb ( );
__declspec(implementation_key(3213)) void Ellipse2d::PutShowCurvatureComb ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3214)) HRESULT Ellipse2d::SplitAtPoints ( double x1, double y1, double x2, double y2, VARIANT * SplitElement1, VARIANT * SplitElement2 );
__declspec(implementation_key(3215)) double Ellipse2d::GetLength ( );
__declspec(implementation_key(3216)) Ellipse2dPtr _IEllipses2dAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(3217)) IUnknownPtr _IEllipses2dAuto::Get_NewEnum ( );
__declspec(implementation_key(3218)) TGFramework::ApplicationPtr _IEllipses2dAuto::GetApplication ( );
__declspec(implementation_key(3219)) long _IEllipses2dAuto::GetCount ( );
__declspec(implementation_key(3220)) IDispatchPtr _IEllipses2dAuto::GetParent ( );
__declspec(implementation_key(3221)) Ellipse2dPtr _IEllipses2dAuto::AddByCenter ( double xCenter, double yCenter, double xMajor, double yMajor, double Ratio, enum Geom2dOrientationConstants Orientation );
__declspec(implementation_key(3222)) GeometryStyle2dPtr _IEllipse2dAuto::GetStyle ( );
__declspec(implementation_key(3223)) Relationships2dPtr _IEllipse2dAuto::GetRelationships ( );
__declspec(implementation_key(3224)) void _IEllipse2dAuto::PutLayer ( _bstr_t Layer );
__declspec(implementation_key(3225)) _bstr_t _IEllipse2dAuto::GetLayer ( );
__declspec(implementation_key(3226)) TGFramework::ApplicationPtr _IEllipse2dAuto::GetApplication ( );
__declspec(implementation_key(3227)) long _IEllipse2dAuto::GetIndex ( );
__declspec(implementation_key(3228)) _bstr_t _IEllipse2dAuto::GetName ( const _variant_t & Recurse, long Lcid );
__declspec(implementation_key(3229)) IDispatchPtr _IEllipse2dAuto::GetParent ( );
__declspec(implementation_key(3230)) long _IEllipse2dAuto::GetType ( );
__declspec(implementation_key(3231)) long _IEllipse2dAuto::GetZOrder ( );
__declspec(implementation_key(3232)) _bstr_t _IEllipse2dAuto::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(3233)) IDispatchPtr _IEllipse2dAuto::GetDocument ( );
__declspec(implementation_key(3234)) HRESULT _IEllipse2dAuto::Copy ( );
__declspec(implementation_key(3235)) HRESULT _IEllipse2dAuto::Cut ( );
__declspec(implementation_key(3236)) HRESULT _IEllipse2dAuto::Delete ( );
__declspec(implementation_key(3237)) HRESULT _IEllipse2dAuto::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(3238)) HRESULT _IEllipse2dAuto::Scale ( double Factor );
__declspec(implementation_key(3239)) HRESULT _IEllipse2dAuto::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(3240)) HRESULT _IEllipse2dAuto::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(3241)) IDispatchPtr _IEllipse2dAuto::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(3242)) IDispatchPtr _IEllipse2dAuto::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(3243)) HRESULT _IEllipse2dAuto::BringToFront ( );
__declspec(implementation_key(3244)) HRESULT _IEllipse2dAuto::BringForward ( );
__declspec(implementation_key(3245)) HRESULT _IEllipse2dAuto::SendToBack ( );
__declspec(implementation_key(3246)) HRESULT _IEllipse2dAuto::SendBackward ( );
__declspec(implementation_key(3247)) HRESULT _IEllipse2dAuto::Select ( );
__declspec(implementation_key(3248)) void _IEllipse2dAuto::PutMajorRadius ( double MajorRadius );
__declspec(implementation_key(3249)) double _IEllipse2dAuto::GetMajorRadius ( );
__declspec(implementation_key(3250)) double _IEllipse2dAuto::GetMinorRadius ( );
__declspec(implementation_key(3251)) void _IEllipse2dAuto::PutMinorRadius ( double MinorRadius );
__declspec(implementation_key(3252)) void _IEllipse2dAuto::PutOrientation ( enum Geom2dOrientationConstants Orientation );
__declspec(implementation_key(3253)) enum Geom2dOrientationConstants _IEllipse2dAuto::GetOrientation ( );
__declspec(implementation_key(3254)) double _IEllipse2dAuto::GetRotationAngle ( );
__declspec(implementation_key(3255)) void _IEllipse2dAuto::PutRotationAngle ( double Angle );
__declspec(implementation_key(3256)) double _IEllipse2dAuto::GetMinorMajorRatio ( );
__declspec(implementation_key(3257)) void _IEllipse2dAuto::PutMinorMajorRatio ( double Ratio );
__declspec(implementation_key(3258)) double _IEllipse2dAuto::GetCircumference ( );
__declspec(implementation_key(3259)) double _IEllipse2dAuto::GetArea ( );
__declspec(implementation_key(3260)) HRESULT _IEllipse2dAuto::GetCenterPoint ( double * x, double * y );
__declspec(implementation_key(3261)) HRESULT _IEllipse2dAuto::SetCenterPoint ( double x, double y );
__declspec(implementation_key(3262)) HRESULT _IEllipse2dAuto::GetMajorAxis ( double * x, double * y );
__declspec(implementation_key(3263)) HRESULT _IEllipse2dAuto::SetMajorAxis ( double x, double y );
__declspec(implementation_key(3264)) HRESULT _IEllipse2dAuto::GetMinorAxis ( double * x, double * y );
__declspec(implementation_key(3265)) HRESULT _IEllipse2dAuto::SetMinorAxis ( double x, double y );
__declspec(implementation_key(3266)) HRESULT _IEllipse2dAuto::Trim ( double x, double y, IDispatch * CutObj1, const _variant_t & CutObj2 );
__declspec(implementation_key(3267)) long _IEllipse2dAuto::GetKeyPointCount ( );
__declspec(implementation_key(3268)) HRESULT _IEllipse2dAuto::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(3269)) HRESULT _IEllipse2dAuto::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(3270)) long _IEllipse2dAuto::GetSegmentedStyleCount ( );
__declspec(implementation_key(3271)) HRESULT _IEllipse2dAuto::AddSegmentedStyle ( double x1, double y1, double x2, double y2, IDispatch * Style );
__declspec(implementation_key(3272)) HRESULT _IEllipse2dAuto::GetSegmentedStyle ( long Index, double * x1, double * y1, double * x2, double * y2, IDispatch * * Style );
__declspec(implementation_key(3273)) HRESULT _IEllipse2dAuto::SetSegmentedStyle ( long Index, IDispatch * Style );
__declspec(implementation_key(3274)) HRESULT _IEllipse2dAuto::RemoveSegmentedStyle ( long Index );
__declspec(implementation_key(3275)) HRESULT _IEllipse2dAuto::RemoveAllSegmentedStyles ( );
__declspec(implementation_key(3276)) HRESULT _IEllipse2dAuto::RemoveAllSegmentedStylesBetween ( double x1, double y1, double x2, double y2 );
__declspec(implementation_key(3277)) IDispatchPtr _IEllipse2dAuto::GetAttributeSets ( );
__declspec(implementation_key(3278)) VARIANT_BOOL _IEllipse2dAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(3279)) VARIANT_BOOL _IEllipse2dAuto::GetShowCurvatureComb ( );
__declspec(implementation_key(3280)) void _IEllipse2dAuto::PutShowCurvatureComb ( VARIANT_BOOL Show );
__declspec(implementation_key(3281)) HRESULT _IEllipse2dAuto::SplitAtPoints ( double x1, double y1, double x2, double y2, VARIANT * SplitElement1, VARIANT * SplitElement2 );
__declspec(implementation_key(3282)) double _IEllipse2dAuto::GetLength ( );
__declspec(implementation_key(3283)) BSplineCurve2dPtr BSplineCurves2d::Item ( const _variant_t & Index );
__declspec(implementation_key(3284)) TGFramework::ApplicationPtr BSplineCurves2d::GetApplication ( );
__declspec(implementation_key(3285)) long BSplineCurves2d::GetCount ( );
__declspec(implementation_key(3286)) IDispatchPtr BSplineCurves2d::GetParent ( );
__declspec(implementation_key(3287)) BSplineCurve2dPtr BSplineCurves2d::AddByPoints ( long Order, long ArraySize, SAFEARRAY * * Array );
__declspec(implementation_key(3288)) BSplineCurve2dPtr BSplineCurves2d::Add ( long Degree, long NumberOfPoles, SAFEARRAY * * Poles, SAFEARRAY * * Knots, const _variant_t & Weights );
__declspec(implementation_key(3289)) BSplineCurve2dPtr BSplineCurves2d::AddByPointsWithCloseOption ( long Order, long ArraySize, SAFEARRAY * * Array, VARIANT_BOOL bCreateTangentiallyClosedCurve );
__declspec(implementation_key(3290)) GeometryStyle2dPtr BSplineCurve2d::GetStyle ( );
__declspec(implementation_key(3291)) Relationships2dPtr BSplineCurve2d::GetRelationships ( );
__declspec(implementation_key(3292)) _bstr_t BSplineCurve2d::GetLayer ( );
__declspec(implementation_key(3293)) void BSplineCurve2d::PutLayer ( _bstr_t _arg1 );
__declspec(implementation_key(3294)) TGFramework::ApplicationPtr BSplineCurve2d::GetApplication ( );
__declspec(implementation_key(3295)) long BSplineCurve2d::GetIndex ( );
__declspec(implementation_key(3296)) _bstr_t BSplineCurve2d::GetName ( const _variant_t & Recurse );
__declspec(implementation_key(3297)) IDispatchPtr BSplineCurve2d::GetParent ( );
__declspec(implementation_key(3298)) long BSplineCurve2d::GetType ( );
__declspec(implementation_key(3299)) long BSplineCurve2d::GetZOrder ( );
__declspec(implementation_key(3300)) _bstr_t BSplineCurve2d::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(3301)) IDispatchPtr BSplineCurve2d::GetDocument ( );
__declspec(implementation_key(3302)) HRESULT BSplineCurve2d::Copy ( );
__declspec(implementation_key(3303)) HRESULT BSplineCurve2d::Cut ( );
__declspec(implementation_key(3304)) HRESULT BSplineCurve2d::Delete ( );
__declspec(implementation_key(3305)) HRESULT BSplineCurve2d::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(3306)) HRESULT BSplineCurve2d::Scale ( double Factor );
__declspec(implementation_key(3307)) HRESULT BSplineCurve2d::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(3308)) HRESULT BSplineCurve2d::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(3309)) IDispatchPtr BSplineCurve2d::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(3310)) IDispatchPtr BSplineCurve2d::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(3311)) HRESULT BSplineCurve2d::BringToFront ( );
__declspec(implementation_key(3312)) HRESULT BSplineCurve2d::BringForward ( );
__declspec(implementation_key(3313)) HRESULT BSplineCurve2d::SendToBack ( );
__declspec(implementation_key(3314)) HRESULT BSplineCurve2d::SendBackward ( );
__declspec(implementation_key(3315)) HRESULT BSplineCurve2d::Select ( );
__declspec(implementation_key(3316)) long BSplineCurve2d::GetOrder ( );
__declspec(implementation_key(3317)) double BSplineCurve2d::GetLength ( );
__declspec(implementation_key(3318)) enum Geom2dFormConstants BSplineCurve2d::GetForm ( );
__declspec(implementation_key(3319)) enum Geom2dScopeConstants BSplineCurve2d::GetScope ( );
__declspec(implementation_key(3320)) long BSplineCurve2d::GetPoleCount ( );
__declspec(implementation_key(3321)) long BSplineCurve2d::GetNodeCount ( );
__declspec(implementation_key(3322)) double BSplineCurve2d::GetArea ( );
__declspec(implementation_key(3323)) HRESULT BSplineCurve2d::GetPole ( long Index, double * x, double * y );
__declspec(implementation_key(3324)) HRESULT BSplineCurve2d::SetPole ( long Index, double x, double y );
__declspec(implementation_key(3325)) HRESULT BSplineCurve2d::GetNode ( long Index, double * x, double * y );
__declspec(implementation_key(3326)) HRESULT BSplineCurve2d::SetNode ( long Index, double x, double y );
__declspec(implementation_key(3327)) HRESULT BSplineCurve2d::DeleteNode ( long Index );
__declspec(implementation_key(3328)) HRESULT BSplineCurve2d::InsertNode ( long Index, double x, double y );
__declspec(implementation_key(3329)) long BSplineCurve2d::GetNearestNode ( double x, double y );
__declspec(implementation_key(3330)) HRESULT BSplineCurve2d::GetCentroid ( double * x, double * y );
__declspec(implementation_key(3331)) HRESULT BSplineCurve2d::Trim ( double x, double y, IDispatch * CutObj1, const _variant_t & CutObj2 );
__declspec(implementation_key(3332)) long BSplineCurve2d::GetKeyPointCount ( );
__declspec(implementation_key(3333)) HRESULT BSplineCurve2d::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(3334)) HRESULT BSplineCurve2d::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(3335)) HRESULT BSplineCurve2d::Extend ( double x, double y, IDispatch * TargetObj );
__declspec(implementation_key(3336)) HRESULT BSplineCurve2d::CornerTrim ( double xKeep, double yKeep, IDispatch * TargetObj, double xTargetKeep, double yTargetKeep );
__declspec(implementation_key(3337)) long BSplineCurve2d::GetSegmentedStyleCount ( );
__declspec(implementation_key(3338)) HRESULT BSplineCurve2d::AddSegmentedStyle ( double x1, double y1, double x2, double y2, IDispatch * Style );
__declspec(implementation_key(3339)) HRESULT BSplineCurve2d::GetSegmentedStyle ( long Index, double * x1, double * y1, double * x2, double * y2, IDispatch * * Style );
__declspec(implementation_key(3340)) HRESULT BSplineCurve2d::SetSegmentedStyle ( long Index, IDispatch * Style );
__declspec(implementation_key(3341)) HRESULT BSplineCurve2d::RemoveSegmentedStyle ( long Index );
__declspec(implementation_key(3342)) HRESULT BSplineCurve2d::RemoveAllSegmentedStyles ( );
__declspec(implementation_key(3343)) HRESULT BSplineCurve2d::RemoveAllSegmentedStylesBetween ( double x1, double y1, double x2, double y2 );
__declspec(implementation_key(3344)) IDispatchPtr BSplineCurve2d::GetAttributeSets ( );
__declspec(implementation_key(3345)) VARIANT_BOOL BSplineCurve2d::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(3346)) VARIANT_BOOL BSplineCurve2d::GetShowCurvatureComb ( );
__declspec(implementation_key(3347)) void BSplineCurve2d::PutShowCurvatureComb ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3348)) VARIANT_BOOL BSplineCurve2d::GetShowControlPolygon ( );
__declspec(implementation_key(3349)) void BSplineCurve2d::PutShowControlPolygon ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3350)) VARIANT_BOOL BSplineCurve2d::GetFlexible ( );
__declspec(implementation_key(3351)) void BSplineCurve2d::PutFlexible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3352)) VARIANT_BOOL BSplineCurve2d::GetShapeEdit ( );
__declspec(implementation_key(3353)) void BSplineCurve2d::PutShapeEdit ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3354)) VARIANT_BOOL BSplineCurve2d::GetDerived ( );
__declspec(implementation_key(3355)) HRESULT BSplineCurve2d::GetClosestPoint ( double x, double y, VARIANT * Point, VARIANT * Parameter );
__declspec(implementation_key(3356)) HRESULT BSplineCurve2d::InsertNodeAtPoint ( double x, double y, VARIANT * InsertedNodeIndex );
__declspec(implementation_key(3357)) HRESULT BSplineCurve2d::GetParameterRange ( double * Start, double * End );
__declspec(implementation_key(3358)) HRESULT BSplineCurve2d::Reparameterize ( );
__declspec(implementation_key(3359)) HRESULT BSplineCurve2d::Evaluate ( double Parameter, VARIANT * Point, VARIANT * FirstDerivative, VARIANT * SecondDerivative, VARIANT * Curvature );
__declspec(implementation_key(3360)) HRESULT BSplineCurve2d::GetData ( VARIANT * NumberOfNodes, VARIANT * Nodes, VARIANT * NumberOfPoles, VARIANT * Poles, VARIANT * Knots, VARIANT * Rational, VARIANT * Weights, VARIANT * Degree, VARIANT * Form, VARIANT * Scope );
__declspec(implementation_key(3361)) HRESULT BSplineCurve2d::SetDegree ( long Degree );
__declspec(implementation_key(3362)) HRESULT BSplineCurve2d::Simplify ( double Tolerance );
__declspec(implementation_key(3363)) HRESULT BSplineCurve2d::SplitAtPoint ( double x, double y, VARIANT * OtherSplitElement );
__declspec(implementation_key(3364)) HRESULT BSplineCurve2d::SplitAtPoints ( double x1, double y1, double x2, double y2, VARIANT * SplitElement1, VARIANT * SplitElement2 );
__declspec(implementation_key(3365)) VARIANT_BOOL BSplineCurve2d::GetIsTangentiallyClosedCurve ( );
__declspec(implementation_key(3366)) void BSplineCurve2d::PutIsTangentiallyClosedCurve ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3367)) BSplineCurve2dPtr _IBspCurves2dAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(3368)) IUnknownPtr _IBspCurves2dAuto::Get_NewEnum ( );
__declspec(implementation_key(3369)) TGFramework::ApplicationPtr _IBspCurves2dAuto::GetApplication ( );
__declspec(implementation_key(3370)) long _IBspCurves2dAuto::GetCount ( );
__declspec(implementation_key(3371)) IDispatchPtr _IBspCurves2dAuto::GetParent ( );
__declspec(implementation_key(3372)) BSplineCurve2dPtr _IBspCurves2dAuto::AddByPoints ( long Order, long ArraySize, SAFEARRAY * * Array );
__declspec(implementation_key(3373)) BSplineCurve2dPtr _IBspCurves2dAuto::Add ( long Degree, long NumberOfPoles, SAFEARRAY * * Poles, SAFEARRAY * * Knots, const _variant_t & Weights );
__declspec(implementation_key(3374)) BSplineCurve2dPtr _IBspCurves2dAuto::AddByPointsWithCloseOption ( long Order, long ArraySize, SAFEARRAY * * Array, VARIANT_BOOL bCreateTangentiallyClosedCurve );
__declspec(implementation_key(3375)) GeometryStyle2dPtr _IBspCurve2dAuto::GetStyle ( );
__declspec(implementation_key(3376)) Relationships2dPtr _IBspCurve2dAuto::GetRelationships ( );
__declspec(implementation_key(3377)) _bstr_t _IBspCurve2dAuto::GetLayer ( );
__declspec(implementation_key(3378)) void _IBspCurve2dAuto::PutLayer ( _bstr_t Layer );
__declspec(implementation_key(3379)) TGFramework::ApplicationPtr _IBspCurve2dAuto::GetApplication ( );
__declspec(implementation_key(3380)) long _IBspCurve2dAuto::GetIndex ( );
__declspec(implementation_key(3381)) _bstr_t _IBspCurve2dAuto::GetName ( const _variant_t & Recurse, long Lcid );
__declspec(implementation_key(3382)) IDispatchPtr _IBspCurve2dAuto::GetParent ( );
__declspec(implementation_key(3383)) long _IBspCurve2dAuto::GetType ( );
__declspec(implementation_key(3384)) long _IBspCurve2dAuto::GetZOrder ( );
__declspec(implementation_key(3385)) _bstr_t _IBspCurve2dAuto::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(3386)) IDispatchPtr _IBspCurve2dAuto::GetDocument ( );
__declspec(implementation_key(3387)) HRESULT _IBspCurve2dAuto::Copy ( );
__declspec(implementation_key(3388)) HRESULT _IBspCurve2dAuto::Cut ( );
__declspec(implementation_key(3389)) HRESULT _IBspCurve2dAuto::Delete ( );
__declspec(implementation_key(3390)) HRESULT _IBspCurve2dAuto::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(3391)) HRESULT _IBspCurve2dAuto::Scale ( double Factor );
__declspec(implementation_key(3392)) HRESULT _IBspCurve2dAuto::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(3393)) HRESULT _IBspCurve2dAuto::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(3394)) IDispatchPtr _IBspCurve2dAuto::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(3395)) IDispatchPtr _IBspCurve2dAuto::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(3396)) HRESULT _IBspCurve2dAuto::BringToFront ( );
__declspec(implementation_key(3397)) HRESULT _IBspCurve2dAuto::BringForward ( );
__declspec(implementation_key(3398)) HRESULT _IBspCurve2dAuto::SendToBack ( );
__declspec(implementation_key(3399)) HRESULT _IBspCurve2dAuto::SendBackward ( );
__declspec(implementation_key(3400)) HRESULT _IBspCurve2dAuto::Select ( );
__declspec(implementation_key(3401)) long _IBspCurve2dAuto::GetOrder ( );
__declspec(implementation_key(3402)) double _IBspCurve2dAuto::GetLength ( );
__declspec(implementation_key(3403)) enum Geom2dFormConstants _IBspCurve2dAuto::GetForm ( );
__declspec(implementation_key(3404)) enum Geom2dScopeConstants _IBspCurve2dAuto::GetScope ( );
__declspec(implementation_key(3405)) long _IBspCurve2dAuto::GetPoleCount ( );
__declspec(implementation_key(3406)) long _IBspCurve2dAuto::GetNodeCount ( );
__declspec(implementation_key(3407)) double _IBspCurve2dAuto::GetArea ( );
__declspec(implementation_key(3408)) HRESULT _IBspCurve2dAuto::GetPole ( long Index, double * x, double * y );
__declspec(implementation_key(3409)) HRESULT _IBspCurve2dAuto::SetPole ( long Index, double x, double y );
__declspec(implementation_key(3410)) HRESULT _IBspCurve2dAuto::GetNode ( long Index, double * x, double * y );
__declspec(implementation_key(3411)) HRESULT _IBspCurve2dAuto::SetNode ( long Index, double x, double y );
__declspec(implementation_key(3412)) HRESULT _IBspCurve2dAuto::DeleteNode ( long Index );
__declspec(implementation_key(3413)) HRESULT _IBspCurve2dAuto::InsertNode ( long Index, double x, double y );
__declspec(implementation_key(3414)) long _IBspCurve2dAuto::GetNearestNode ( double x, double y );
__declspec(implementation_key(3415)) HRESULT _IBspCurve2dAuto::GetCentroid ( double * x, double * y );
__declspec(implementation_key(3416)) HRESULT _IBspCurve2dAuto::Trim ( double x, double y, IDispatch * CutObj1, const _variant_t & CutObj2 );
__declspec(implementation_key(3417)) long _IBspCurve2dAuto::GetKeyPointCount ( );
__declspec(implementation_key(3418)) HRESULT _IBspCurve2dAuto::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(3419)) HRESULT _IBspCurve2dAuto::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(3420)) HRESULT _IBspCurve2dAuto::Extend ( double x, double y, IDispatch * TargetObj );
__declspec(implementation_key(3421)) HRESULT _IBspCurve2dAuto::CornerTrim ( double xKeep, double yKeep, IDispatch * TargetObj, double xTargetKeep, double yTargetKeep );
__declspec(implementation_key(3422)) long _IBspCurve2dAuto::GetSegmentedStyleCount ( );
__declspec(implementation_key(3423)) HRESULT _IBspCurve2dAuto::AddSegmentedStyle ( double x1, double y1, double x2, double y2, IDispatch * Style );
__declspec(implementation_key(3424)) HRESULT _IBspCurve2dAuto::GetSegmentedStyle ( long Index, double * x1, double * y1, double * x2, double * y2, IDispatch * * Style );
__declspec(implementation_key(3425)) HRESULT _IBspCurve2dAuto::SetSegmentedStyle ( long Index, IDispatch * Style );
__declspec(implementation_key(3426)) HRESULT _IBspCurve2dAuto::RemoveSegmentedStyle ( long Index );
__declspec(implementation_key(3427)) HRESULT _IBspCurve2dAuto::RemoveAllSegmentedStyles ( );
__declspec(implementation_key(3428)) HRESULT _IBspCurve2dAuto::RemoveAllSegmentedStylesBetween ( double x1, double y1, double x2, double y2 );
__declspec(implementation_key(3429)) IDispatchPtr _IBspCurve2dAuto::GetAttributeSets ( );
__declspec(implementation_key(3430)) VARIANT_BOOL _IBspCurve2dAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(3431)) VARIANT_BOOL _IBspCurve2dAuto::GetShowCurvatureComb ( );
__declspec(implementation_key(3432)) void _IBspCurve2dAuto::PutShowCurvatureComb ( VARIANT_BOOL Show );
__declspec(implementation_key(3433)) VARIANT_BOOL _IBspCurve2dAuto::GetShowControlPolygon ( );
__declspec(implementation_key(3434)) void _IBspCurve2dAuto::PutShowControlPolygon ( VARIANT_BOOL Show );
__declspec(implementation_key(3435)) VARIANT_BOOL _IBspCurve2dAuto::GetFlexible ( );
__declspec(implementation_key(3436)) void _IBspCurve2dAuto::PutFlexible ( VARIANT_BOOL Flexible );
__declspec(implementation_key(3437)) VARIANT_BOOL _IBspCurve2dAuto::GetShapeEdit ( );
__declspec(implementation_key(3438)) void _IBspCurve2dAuto::PutShapeEdit ( VARIANT_BOOL ShapeEdit );
__declspec(implementation_key(3439)) VARIANT_BOOL _IBspCurve2dAuto::GetDerived ( );
__declspec(implementation_key(3440)) HRESULT _IBspCurve2dAuto::GetClosestPoint ( double x, double y, VARIANT * Point, VARIANT * Parameter );
__declspec(implementation_key(3441)) HRESULT _IBspCurve2dAuto::InsertNodeAtPoint ( double x, double y, VARIANT * InsertedNodeIndex );
__declspec(implementation_key(3442)) HRESULT _IBspCurve2dAuto::GetParameterRange ( double * Start, double * End );
__declspec(implementation_key(3443)) HRESULT _IBspCurve2dAuto::Reparameterize ( );
__declspec(implementation_key(3444)) HRESULT _IBspCurve2dAuto::Evaluate ( double Parameter, VARIANT * Point, VARIANT * FirstDerivative, VARIANT * SecondDerivative, VARIANT * Curvature );
__declspec(implementation_key(3445)) HRESULT _IBspCurve2dAuto::GetData ( VARIANT * NumberOfNodes, VARIANT * Nodes, VARIANT * NumberOfPoles, VARIANT * Poles, VARIANT * Knots, VARIANT * Rational, VARIANT * Weights, VARIANT * Degree, VARIANT * Form, VARIANT * Scope );
__declspec(implementation_key(3446)) HRESULT _IBspCurve2dAuto::SetDegree ( long Degree );
__declspec(implementation_key(3447)) HRESULT _IBspCurve2dAuto::Simplify ( double Tolerance );
__declspec(implementation_key(3448)) HRESULT _IBspCurve2dAuto::SplitAtPoint ( double x, double y, VARIANT * OtherSplitElement );
__declspec(implementation_key(3449)) HRESULT _IBspCurve2dAuto::SplitAtPoints ( double x1, double y1, double x2, double y2, VARIANT * SplitElement1, VARIANT * SplitElement2 );
__declspec(implementation_key(3450)) VARIANT_BOOL _IBspCurve2dAuto::GetIsTangentiallyClosedCurve ( );
__declspec(implementation_key(3451)) void _IBspCurve2dAuto::PutIsTangentiallyClosedCurve ( VARIANT_BOOL pbIsClosedCurve );
__declspec(implementation_key(3452)) Point2dPtr Points2d::Item ( const _variant_t & Index );
__declspec(implementation_key(3453)) TGFramework::ApplicationPtr Points2d::GetApplication ( );
__declspec(implementation_key(3454)) long Points2d::GetCount ( );
__declspec(implementation_key(3455)) IDispatchPtr Points2d::GetParent ( );
__declspec(implementation_key(3456)) Point2dPtr Points2d::Add ( double x, double y );
__declspec(implementation_key(3457)) GeometryStyle2dPtr Point2d::GetStyle ( );
__declspec(implementation_key(3458)) Relationships2dPtr Point2d::GetRelationships ( );
__declspec(implementation_key(3459)) void Point2d::PutLayer ( _bstr_t _arg1 );
__declspec(implementation_key(3460)) _bstr_t Point2d::GetLayer ( );
__declspec(implementation_key(3461)) TGFramework::ApplicationPtr Point2d::GetApplication ( );
__declspec(implementation_key(3462)) long Point2d::GetIndex ( );
__declspec(implementation_key(3463)) _bstr_t Point2d::GetName ( const _variant_t & Recurse );
__declspec(implementation_key(3464)) IDispatchPtr Point2d::GetParent ( );
__declspec(implementation_key(3465)) long Point2d::GetType ( );
__declspec(implementation_key(3466)) long Point2d::GetZOrder ( );
__declspec(implementation_key(3467)) _bstr_t Point2d::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(3468)) IDispatchPtr Point2d::GetDocument ( );
__declspec(implementation_key(3469)) HRESULT Point2d::Copy ( );
__declspec(implementation_key(3470)) HRESULT Point2d::Cut ( );
__declspec(implementation_key(3471)) HRESULT Point2d::Delete ( );
__declspec(implementation_key(3472)) HRESULT Point2d::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(3473)) HRESULT Point2d::Scale ( double Factor );
__declspec(implementation_key(3474)) HRESULT Point2d::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(3475)) HRESULT Point2d::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(3476)) IDispatchPtr Point2d::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(3477)) IDispatchPtr Point2d::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(3478)) HRESULT Point2d::BringToFront ( );
__declspec(implementation_key(3479)) HRESULT Point2d::BringForward ( );
__declspec(implementation_key(3480)) HRESULT Point2d::SendToBack ( );
__declspec(implementation_key(3481)) HRESULT Point2d::SendBackward ( );
__declspec(implementation_key(3482)) HRESULT Point2d::Select ( );
__declspec(implementation_key(3483)) void Point2d::Putx ( double _arg1 );
__declspec(implementation_key(3484)) double Point2d::Getx ( );
__declspec(implementation_key(3485)) void Point2d::Puty ( double _arg1 );
__declspec(implementation_key(3486)) double Point2d::Gety ( );
__declspec(implementation_key(3487)) HRESULT Point2d::GetPoint ( double * x, double * y );
__declspec(implementation_key(3488)) HRESULT Point2d::SetPoint ( double x, double y );
__declspec(implementation_key(3489)) long Point2d::GetKeyPointCount ( );
__declspec(implementation_key(3490)) HRESULT Point2d::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(3491)) HRESULT Point2d::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(3492)) long Point2d::GetSegmentedStyleCount ( );
__declspec(implementation_key(3493)) HRESULT Point2d::AddSegmentedStyle ( double x1, double y1, double x2, double y2, IDispatch * Style );
__declspec(implementation_key(3494)) HRESULT Point2d::GetSegmentedStyle ( long Index, double * x1, double * y1, double * x2, double * y2, IDispatch * * Style );
__declspec(implementation_key(3495)) HRESULT Point2d::SetSegmentedStyle ( long Index, IDispatch * Style );
__declspec(implementation_key(3496)) HRESULT Point2d::RemoveSegmentedStyle ( long Index );
__declspec(implementation_key(3497)) HRESULT Point2d::RemoveAllSegmentedStyles ( );
__declspec(implementation_key(3498)) HRESULT Point2d::RemoveAllSegmentedStylesBetween ( double x1, double y1, double x2, double y2 );
__declspec(implementation_key(3499)) IDispatchPtr Point2d::GetAttributeSets ( );
__declspec(implementation_key(3500)) VARIANT_BOOL Point2d::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(3501)) Point2dPtr _IPoints2dAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(3502)) IUnknownPtr _IPoints2dAuto::Get_NewEnum ( );
__declspec(implementation_key(3503)) TGFramework::ApplicationPtr _IPoints2dAuto::GetApplication ( );
__declspec(implementation_key(3504)) long _IPoints2dAuto::GetCount ( );
__declspec(implementation_key(3505)) IDispatchPtr _IPoints2dAuto::GetParent ( );
__declspec(implementation_key(3506)) Point2dPtr _IPoints2dAuto::Add ( double x, double y );
__declspec(implementation_key(3507)) GeometryStyle2dPtr _IPoint2dAuto::GetStyle ( );
__declspec(implementation_key(3508)) Relationships2dPtr _IPoint2dAuto::GetRelationships ( );
__declspec(implementation_key(3509)) void _IPoint2dAuto::PutLayer ( _bstr_t Layer );
__declspec(implementation_key(3510)) _bstr_t _IPoint2dAuto::GetLayer ( );
__declspec(implementation_key(3511)) TGFramework::ApplicationPtr _IPoint2dAuto::GetApplication ( );
__declspec(implementation_key(3512)) long _IPoint2dAuto::GetIndex ( );
__declspec(implementation_key(3513)) _bstr_t _IPoint2dAuto::GetName ( const _variant_t & Recurse, long Lcid );
__declspec(implementation_key(3514)) IDispatchPtr _IPoint2dAuto::GetParent ( );
__declspec(implementation_key(3515)) long _IPoint2dAuto::GetType ( );
__declspec(implementation_key(3516)) long _IPoint2dAuto::GetZOrder ( );
__declspec(implementation_key(3517)) _bstr_t _IPoint2dAuto::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(3518)) IDispatchPtr _IPoint2dAuto::GetDocument ( );
__declspec(implementation_key(3519)) HRESULT _IPoint2dAuto::Copy ( );
__declspec(implementation_key(3520)) HRESULT _IPoint2dAuto::Cut ( );
__declspec(implementation_key(3521)) HRESULT _IPoint2dAuto::Delete ( );
__declspec(implementation_key(3522)) HRESULT _IPoint2dAuto::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(3523)) HRESULT _IPoint2dAuto::Scale ( double Factor );
__declspec(implementation_key(3524)) HRESULT _IPoint2dAuto::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(3525)) HRESULT _IPoint2dAuto::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(3526)) IDispatchPtr _IPoint2dAuto::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(3527)) IDispatchPtr _IPoint2dAuto::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(3528)) HRESULT _IPoint2dAuto::BringToFront ( );
__declspec(implementation_key(3529)) HRESULT _IPoint2dAuto::BringForward ( );
__declspec(implementation_key(3530)) HRESULT _IPoint2dAuto::SendToBack ( );
__declspec(implementation_key(3531)) HRESULT _IPoint2dAuto::SendBackward ( );
__declspec(implementation_key(3532)) HRESULT _IPoint2dAuto::Select ( );
__declspec(implementation_key(3533)) void _IPoint2dAuto::Putx ( double x );
__declspec(implementation_key(3534)) double _IPoint2dAuto::Getx ( );
__declspec(implementation_key(3535)) void _IPoint2dAuto::Puty ( double y );
__declspec(implementation_key(3536)) double _IPoint2dAuto::Gety ( );
__declspec(implementation_key(3537)) HRESULT _IPoint2dAuto::GetPoint ( double * x, double * y );
__declspec(implementation_key(3538)) HRESULT _IPoint2dAuto::SetPoint ( double x, double y );
__declspec(implementation_key(3539)) long _IPoint2dAuto::GetKeyPointCount ( );
__declspec(implementation_key(3540)) HRESULT _IPoint2dAuto::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(3541)) HRESULT _IPoint2dAuto::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(3542)) long _IPoint2dAuto::GetSegmentedStyleCount ( );
__declspec(implementation_key(3543)) HRESULT _IPoint2dAuto::AddSegmentedStyle ( double x1, double y1, double x2, double y2, IDispatch * Style );
__declspec(implementation_key(3544)) HRESULT _IPoint2dAuto::GetSegmentedStyle ( long Index, double * x1, double * y1, double * x2, double * y2, IDispatch * * Style );
__declspec(implementation_key(3545)) HRESULT _IPoint2dAuto::SetSegmentedStyle ( long Index, IDispatch * Style );
__declspec(implementation_key(3546)) HRESULT _IPoint2dAuto::RemoveSegmentedStyle ( long Index );
__declspec(implementation_key(3547)) HRESULT _IPoint2dAuto::RemoveAllSegmentedStyles ( );
__declspec(implementation_key(3548)) HRESULT _IPoint2dAuto::RemoveAllSegmentedStylesBetween ( double x1, double y1, double x2, double y2 );
__declspec(implementation_key(3549)) IDispatchPtr _IPoint2dAuto::GetAttributeSets ( );
__declspec(implementation_key(3550)) VARIANT_BOOL _IPoint2dAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(3551)) EllipticalArc2dPtr EllipticalArcs2d::Item ( const _variant_t & Index );
__declspec(implementation_key(3552)) TGFramework::ApplicationPtr EllipticalArcs2d::GetApplication ( );
__declspec(implementation_key(3553)) long EllipticalArcs2d::GetCount ( );
__declspec(implementation_key(3554)) IDispatchPtr EllipticalArcs2d::GetParent ( );
__declspec(implementation_key(3555)) EllipticalArc2dPtr EllipticalArcs2d::AddByCenter ( double xCenter, double yCenter, double xMajorAxis, double yMajorAxis, double Ratio, enum Geom2dOrientationConstants Orientation, double StartAngle, double EndAngle );
__declspec(implementation_key(3556)) EllipticalArc2dPtr EllipticalArcs2d::AddByStartEndEllipse ( double StartAngle, double EndAngle, struct Ellipse2d * Ellipse );
__declspec(implementation_key(3557)) GeometryStyle2dPtr EllipticalArc2d::GetStyle ( );
__declspec(implementation_key(3558)) Relationships2dPtr EllipticalArc2d::GetRelationships ( );
__declspec(implementation_key(3559)) void EllipticalArc2d::PutLayer ( _bstr_t _arg1 );
__declspec(implementation_key(3560)) _bstr_t EllipticalArc2d::GetLayer ( );
__declspec(implementation_key(3561)) TGFramework::ApplicationPtr EllipticalArc2d::GetApplication ( );
__declspec(implementation_key(3562)) long EllipticalArc2d::GetIndex ( );
__declspec(implementation_key(3563)) _bstr_t EllipticalArc2d::GetName ( const _variant_t & Recurse );
__declspec(implementation_key(3564)) IDispatchPtr EllipticalArc2d::GetParent ( );
__declspec(implementation_key(3565)) long EllipticalArc2d::GetType ( );
__declspec(implementation_key(3566)) long EllipticalArc2d::GetZOrder ( );
__declspec(implementation_key(3567)) _bstr_t EllipticalArc2d::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(3568)) IDispatchPtr EllipticalArc2d::GetDocument ( );
__declspec(implementation_key(3569)) HRESULT EllipticalArc2d::Copy ( );
__declspec(implementation_key(3570)) HRESULT EllipticalArc2d::Cut ( );
__declspec(implementation_key(3571)) HRESULT EllipticalArc2d::Delete ( );
__declspec(implementation_key(3572)) HRESULT EllipticalArc2d::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(3573)) HRESULT EllipticalArc2d::Scale ( double Factor );
__declspec(implementation_key(3574)) HRESULT EllipticalArc2d::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(3575)) HRESULT EllipticalArc2d::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(3576)) IDispatchPtr EllipticalArc2d::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(3577)) IDispatchPtr EllipticalArc2d::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(3578)) HRESULT EllipticalArc2d::BringToFront ( );
__declspec(implementation_key(3579)) HRESULT EllipticalArc2d::BringForward ( );
__declspec(implementation_key(3580)) HRESULT EllipticalArc2d::SendToBack ( );
__declspec(implementation_key(3581)) HRESULT EllipticalArc2d::SendBackward ( );
__declspec(implementation_key(3582)) HRESULT EllipticalArc2d::Select ( );
__declspec(implementation_key(3583)) void EllipticalArc2d::PutMajorRadius ( double _arg1 );
__declspec(implementation_key(3584)) double EllipticalArc2d::GetMajorRadius ( );
__declspec(implementation_key(3585)) void EllipticalArc2d::PutMinorRadius ( double _arg1 );
__declspec(implementation_key(3586)) double EllipticalArc2d::GetMinorRadius ( );
__declspec(implementation_key(3587)) enum Geom2dOrientationConstants EllipticalArc2d::GetOrientation ( );
__declspec(implementation_key(3588)) void EllipticalArc2d::PutOrientation ( enum Geom2dOrientationConstants _arg1 );
__declspec(implementation_key(3589)) void EllipticalArc2d::PutStartAngle ( double _arg1 );
__declspec(implementation_key(3590)) double EllipticalArc2d::GetStartAngle ( );
__declspec(implementation_key(3591)) double EllipticalArc2d::GetSweepAngle ( );
__declspec(implementation_key(3592)) void EllipticalArc2d::PutSweepAngle ( double _arg1 );
__declspec(implementation_key(3593)) double EllipticalArc2d::GetRotationAngle ( );
__declspec(implementation_key(3594)) void EllipticalArc2d::PutRotationAngle ( double _arg1 );
__declspec(implementation_key(3595)) HRESULT EllipticalArc2d::GetStartPoint ( double * x, double * y );
__declspec(implementation_key(3596)) HRESULT EllipticalArc2d::SetStartPoint ( double x, double y );
__declspec(implementation_key(3597)) HRESULT EllipticalArc2d::GetEndPoint ( double * x, double * y );
__declspec(implementation_key(3598)) HRESULT EllipticalArc2d::SetEndPoint ( double x, double y );
__declspec(implementation_key(3599)) HRESULT EllipticalArc2d::GetCenterPoint ( double * x, double * y );
__declspec(implementation_key(3600)) HRESULT EllipticalArc2d::SetCenterPoint ( double x, double y );
__declspec(implementation_key(3601)) HRESULT EllipticalArc2d::GetMajorAxis ( double * x, double * y );
__declspec(implementation_key(3602)) HRESULT EllipticalArc2d::SetMajorAxis ( double x, double y );
__declspec(implementation_key(3603)) HRESULT EllipticalArc2d::GetMinorAxis ( double * x, double * y );
__declspec(implementation_key(3604)) HRESULT EllipticalArc2d::SetMinorAxis ( double x, double y );
__declspec(implementation_key(3605)) HRESULT EllipticalArc2d::Trim ( double x, double y, IDispatch * CutObj1, const _variant_t & CutObj2 );
__declspec(implementation_key(3606)) long EllipticalArc2d::GetKeyPointCount ( );
__declspec(implementation_key(3607)) HRESULT EllipticalArc2d::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(3608)) HRESULT EllipticalArc2d::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(3609)) HRESULT EllipticalArc2d::Extend ( double x, double y, IDispatch * TargetObj );
__declspec(implementation_key(3610)) HRESULT EllipticalArc2d::CornerTrim ( double xKeep, double yKeep, IDispatch * TargetObj, double xTargetKeep, double yTargetKeep );
__declspec(implementation_key(3611)) long EllipticalArc2d::GetSegmentedStyleCount ( );
__declspec(implementation_key(3612)) HRESULT EllipticalArc2d::AddSegmentedStyle ( double x1, double y1, double x2, double y2, IDispatch * Style );
__declspec(implementation_key(3613)) HRESULT EllipticalArc2d::GetSegmentedStyle ( long Index, double * x1, double * y1, double * x2, double * y2, IDispatch * * Style );
__declspec(implementation_key(3614)) HRESULT EllipticalArc2d::SetSegmentedStyle ( long Index, IDispatch * Style );
__declspec(implementation_key(3615)) HRESULT EllipticalArc2d::RemoveSegmentedStyle ( long Index );
__declspec(implementation_key(3616)) HRESULT EllipticalArc2d::RemoveAllSegmentedStyles ( );
__declspec(implementation_key(3617)) HRESULT EllipticalArc2d::RemoveAllSegmentedStylesBetween ( double x1, double y1, double x2, double y2 );
__declspec(implementation_key(3618)) IDispatchPtr EllipticalArc2d::GetAttributeSets ( );
__declspec(implementation_key(3619)) VARIANT_BOOL EllipticalArc2d::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(3620)) VARIANT_BOOL EllipticalArc2d::GetShowCurvatureComb ( );
__declspec(implementation_key(3621)) void EllipticalArc2d::PutShowCurvatureComb ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(3622)) HRESULT EllipticalArc2d::SplitAtPoint ( double x, double y, VARIANT * OtherSplitElement );
__declspec(implementation_key(3623)) double EllipticalArc2d::GetLength ( );
__declspec(implementation_key(3624)) EllipticalArc2dPtr _IEllipArcs2dAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(3625)) IUnknownPtr _IEllipArcs2dAuto::Get_NewEnum ( );
__declspec(implementation_key(3626)) TGFramework::ApplicationPtr _IEllipArcs2dAuto::GetApplication ( );
__declspec(implementation_key(3627)) long _IEllipArcs2dAuto::GetCount ( );
__declspec(implementation_key(3628)) IDispatchPtr _IEllipArcs2dAuto::GetParent ( );
__declspec(implementation_key(3629)) EllipticalArc2dPtr _IEllipArcs2dAuto::AddByCenter ( double xCenter, double yCenter, double xMajorAxis, double yMajorAxis, double Ratio, enum Geom2dOrientationConstants Orientation, double StartAngle, double EndAngle );
__declspec(implementation_key(3630)) EllipticalArc2dPtr _IEllipArcs2dAuto::AddByStartEndEllipse ( double StartAngle, double EndAngle, struct Ellipse2d * Ellipse );
__declspec(implementation_key(3631)) GeometryStyle2dPtr _IEllipArc2dAuto::GetStyle ( );
__declspec(implementation_key(3632)) Relationships2dPtr _IEllipArc2dAuto::GetRelationships ( );
__declspec(implementation_key(3633)) void _IEllipArc2dAuto::PutLayer ( _bstr_t Layer );
__declspec(implementation_key(3634)) _bstr_t _IEllipArc2dAuto::GetLayer ( );
__declspec(implementation_key(3635)) TGFramework::ApplicationPtr _IEllipArc2dAuto::GetApplication ( );
__declspec(implementation_key(3636)) long _IEllipArc2dAuto::GetIndex ( );
__declspec(implementation_key(3637)) _bstr_t _IEllipArc2dAuto::GetName ( const _variant_t & Recurse, long Lcid );
__declspec(implementation_key(3638)) IDispatchPtr _IEllipArc2dAuto::GetParent ( );
__declspec(implementation_key(3639)) long _IEllipArc2dAuto::GetType ( );
__declspec(implementation_key(3640)) long _IEllipArc2dAuto::GetZOrder ( );
__declspec(implementation_key(3641)) _bstr_t _IEllipArc2dAuto::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(3642)) IDispatchPtr _IEllipArc2dAuto::GetDocument ( );
__declspec(implementation_key(3643)) HRESULT _IEllipArc2dAuto::Copy ( );
__declspec(implementation_key(3644)) HRESULT _IEllipArc2dAuto::Cut ( );
__declspec(implementation_key(3645)) HRESULT _IEllipArc2dAuto::Delete ( );
__declspec(implementation_key(3646)) HRESULT _IEllipArc2dAuto::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(3647)) HRESULT _IEllipArc2dAuto::Scale ( double Factor );
__declspec(implementation_key(3648)) HRESULT _IEllipArc2dAuto::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(3649)) HRESULT _IEllipArc2dAuto::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(3650)) IDispatchPtr _IEllipArc2dAuto::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(3651)) IDispatchPtr _IEllipArc2dAuto::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(3652)) HRESULT _IEllipArc2dAuto::BringToFront ( );
__declspec(implementation_key(3653)) HRESULT _IEllipArc2dAuto::BringForward ( );
__declspec(implementation_key(3654)) HRESULT _IEllipArc2dAuto::SendToBack ( );
__declspec(implementation_key(3655)) HRESULT _IEllipArc2dAuto::SendBackward ( );
__declspec(implementation_key(3656)) HRESULT _IEllipArc2dAuto::Select ( );
__declspec(implementation_key(3657)) void _IEllipArc2dAuto::PutMajorRadius ( double Radius );
__declspec(implementation_key(3658)) double _IEllipArc2dAuto::GetMajorRadius ( );
__declspec(implementation_key(3659)) void _IEllipArc2dAuto::PutMinorRadius ( double Radius );
__declspec(implementation_key(3660)) double _IEllipArc2dAuto::GetMinorRadius ( );
__declspec(implementation_key(3661)) enum Geom2dOrientationConstants _IEllipArc2dAuto::GetOrientation ( );
__declspec(implementation_key(3662)) void _IEllipArc2dAuto::PutOrientation ( enum Geom2dOrientationConstants Orientation );
__declspec(implementation_key(3663)) void _IEllipArc2dAuto::PutStartAngle ( double Angle );
__declspec(implementation_key(3664)) double _IEllipArc2dAuto::GetStartAngle ( );
__declspec(implementation_key(3665)) double _IEllipArc2dAuto::GetSweepAngle ( );
__declspec(implementation_key(3666)) void _IEllipArc2dAuto::PutSweepAngle ( double Angle );
__declspec(implementation_key(3667)) double _IEllipArc2dAuto::GetRotationAngle ( );
__declspec(implementation_key(3668)) void _IEllipArc2dAuto::PutRotationAngle ( double Angle );
__declspec(implementation_key(3669)) HRESULT _IEllipArc2dAuto::GetStartPoint ( double * x, double * y );
__declspec(implementation_key(3670)) HRESULT _IEllipArc2dAuto::SetStartPoint ( double x, double y );
__declspec(implementation_key(3671)) HRESULT _IEllipArc2dAuto::GetEndPoint ( double * x, double * y );
__declspec(implementation_key(3672)) HRESULT _IEllipArc2dAuto::SetEndPoint ( double x, double y );
__declspec(implementation_key(3673)) HRESULT _IEllipArc2dAuto::GetCenterPoint ( double * x, double * y );
__declspec(implementation_key(3674)) HRESULT _IEllipArc2dAuto::SetCenterPoint ( double x, double y );
__declspec(implementation_key(3675)) HRESULT _IEllipArc2dAuto::GetMajorAxis ( double * x, double * y );
__declspec(implementation_key(3676)) HRESULT _IEllipArc2dAuto::SetMajorAxis ( double x, double y );
__declspec(implementation_key(3677)) HRESULT _IEllipArc2dAuto::GetMinorAxis ( double * x, double * y );
__declspec(implementation_key(3678)) HRESULT _IEllipArc2dAuto::SetMinorAxis ( double x, double y );
__declspec(implementation_key(3679)) HRESULT _IEllipArc2dAuto::Trim ( double x, double y, IDispatch * CutObj1, const _variant_t & CutObj2 );
__declspec(implementation_key(3680)) long _IEllipArc2dAuto::GetKeyPointCount ( );
__declspec(implementation_key(3681)) HRESULT _IEllipArc2dAuto::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(3682)) HRESULT _IEllipArc2dAuto::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(3683)) HRESULT _IEllipArc2dAuto::Extend ( double x, double y, IDispatch * TargetObj );
__declspec(implementation_key(3684)) HRESULT _IEllipArc2dAuto::CornerTrim ( double xKeep, double yKeep, IDispatch * TargetObj, double xTargetKeep, double yTargetKeep );
__declspec(implementation_key(3685)) long _IEllipArc2dAuto::GetSegmentedStyleCount ( );
__declspec(implementation_key(3686)) HRESULT _IEllipArc2dAuto::AddSegmentedStyle ( double x1, double y1, double x2, double y2, IDispatch * Style );
__declspec(implementation_key(3687)) HRESULT _IEllipArc2dAuto::GetSegmentedStyle ( long Index, double * x1, double * y1, double * x2, double * y2, IDispatch * * Style );
__declspec(implementation_key(3688)) HRESULT _IEllipArc2dAuto::SetSegmentedStyle ( long Index, IDispatch * Style );
__declspec(implementation_key(3689)) HRESULT _IEllipArc2dAuto::RemoveSegmentedStyle ( long Index );
__declspec(implementation_key(3690)) HRESULT _IEllipArc2dAuto::RemoveAllSegmentedStyles ( );
__declspec(implementation_key(3691)) HRESULT _IEllipArc2dAuto::RemoveAllSegmentedStylesBetween ( double x1, double y1, double x2, double y2 );
__declspec(implementation_key(3692)) IDispatchPtr _IEllipArc2dAuto::GetAttributeSets ( );
__declspec(implementation_key(3693)) VARIANT_BOOL _IEllipArc2dAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(3694)) VARIANT_BOOL _IEllipArc2dAuto::GetShowCurvatureComb ( );
__declspec(implementation_key(3695)) void _IEllipArc2dAuto::PutShowCurvatureComb ( VARIANT_BOOL Show );
__declspec(implementation_key(3696)) HRESULT _IEllipArc2dAuto::SplitAtPoint ( double x, double y, VARIANT * OtherSplitElement );
__declspec(implementation_key(3697)) double _IEllipArc2dAuto::GetLength ( );
__declspec(implementation_key(3698)) TGFramework::ApplicationPtr Curves2d::GetApplication ( );
__declspec(implementation_key(3699)) long Curves2d::GetCount ( );
__declspec(implementation_key(3700)) IDispatchPtr Curves2d::GetParent ( );
__declspec(implementation_key(3701)) Curve2dPtr Curves2d::Item ( const _variant_t & Index );
__declspec(implementation_key(3702)) Curve2dPtr Curves2d::AddByPoints ( long PointCount, SAFEARRAY * * Points, const _variant_t & FitType, const _variant_t & Closed );
__declspec(implementation_key(3703)) GeometryStyle2dPtr Curve2d::GetStyle ( );
__declspec(implementation_key(3704)) Relationships2dPtr Curve2d::GetRelationships ( );
__declspec(implementation_key(3705)) void Curve2d::PutLayer ( _bstr_t _arg1 );
__declspec(implementation_key(3706)) _bstr_t Curve2d::GetLayer ( );
__declspec(implementation_key(3707)) TGFramework::ApplicationPtr Curve2d::GetApplication ( );
__declspec(implementation_key(3708)) long Curve2d::GetIndex ( );
__declspec(implementation_key(3709)) _bstr_t Curve2d::GetName ( const _variant_t & Recurse );
__declspec(implementation_key(3710)) IDispatchPtr Curve2d::GetParent ( );
__declspec(implementation_key(3711)) long Curve2d::GetType ( );
__declspec(implementation_key(3712)) long Curve2d::GetZOrder ( );
__declspec(implementation_key(3713)) _bstr_t Curve2d::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(3714)) IDispatchPtr Curve2d::GetDocument ( );
__declspec(implementation_key(3715)) HRESULT Curve2d::Copy ( );
__declspec(implementation_key(3716)) HRESULT Curve2d::Cut ( );
__declspec(implementation_key(3717)) HRESULT Curve2d::Delete ( );
__declspec(implementation_key(3718)) HRESULT Curve2d::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(3719)) HRESULT Curve2d::Scale ( double Factor );
__declspec(implementation_key(3720)) HRESULT Curve2d::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(3721)) HRESULT Curve2d::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(3722)) IDispatchPtr Curve2d::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(3723)) IDispatchPtr Curve2d::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(3724)) HRESULT Curve2d::BringToFront ( );
__declspec(implementation_key(3725)) HRESULT Curve2d::BringForward ( );
__declspec(implementation_key(3726)) HRESULT Curve2d::SendToBack ( );
__declspec(implementation_key(3727)) HRESULT Curve2d::SendBackward ( );
__declspec(implementation_key(3728)) HRESULT Curve2d::Select ( );
__declspec(implementation_key(3729)) double Curve2d::GetLength ( );
__declspec(implementation_key(3730)) long Curve2d::GetVertexCount ( );
__declspec(implementation_key(3731)) enum CurveFitTypeConstants Curve2d::GetFitType ( );
__declspec(implementation_key(3732)) void Curve2d::PutFitType ( enum CurveFitTypeConstants _arg1 );
__declspec(implementation_key(3733)) VARIANT_BOOL Curve2d::GetClosed ( );
__declspec(implementation_key(3734)) double Curve2d::GetArea ( );
__declspec(implementation_key(3735)) double Curve2d::GetFitTolerance ( );
__declspec(implementation_key(3736)) void Curve2d::PutFitTolerance ( double _arg1 );
__declspec(implementation_key(3737)) HRESULT Curve2d::GetVertex ( long Index, double * x, double * y );
__declspec(implementation_key(3738)) HRESULT Curve2d::SetVertex ( long Index, double x, double y );
__declspec(implementation_key(3739)) HRESULT Curve2d::AddVertex ( double x, double y );
__declspec(implementation_key(3740)) HRESULT Curve2d::RemoveVertex ( long Index );
__declspec(implementation_key(3741)) HRESULT Curve2d::InsertVertex ( long Index, double x, double y );
__declspec(implementation_key(3742)) HRESULT Curve2d::GetCentroid ( double * x, double * y );
__declspec(implementation_key(3743)) long Curve2d::GetKeyPointCount ( );
__declspec(implementation_key(3744)) HRESULT Curve2d::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(3745)) HRESULT Curve2d::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(3746)) HRESULT Curve2d::Extend ( double x, double y, IDispatch * TargetObj );
__declspec(implementation_key(3747)) HRESULT Curve2d::CornerTrim ( double xKeep, double yKeep, IDispatch * TargetObj, double xTargetKeep, double yTargetKeep );
__declspec(implementation_key(3748)) long Curve2d::GetSegmentedStyleCount ( );
__declspec(implementation_key(3749)) HRESULT Curve2d::AddSegmentedStyle ( double x1, double y1, double x2, double y2, IDispatch * Style );
__declspec(implementation_key(3750)) HRESULT Curve2d::GetSegmentedStyle ( long Index, double * x1, double * y1, double * x2, double * y2, IDispatch * * Style );
__declspec(implementation_key(3751)) HRESULT Curve2d::SetSegmentedStyle ( long Index, IDispatch * Style );
__declspec(implementation_key(3752)) HRESULT Curve2d::RemoveSegmentedStyle ( long Index );
__declspec(implementation_key(3753)) HRESULT Curve2d::RemoveAllSegmentedStyles ( );
__declspec(implementation_key(3754)) HRESULT Curve2d::RemoveAllSegmentedStylesBetween ( double x1, double y1, double x2, double y2 );
__declspec(implementation_key(3755)) IDispatchPtr Curve2d::GetAttributeSets ( );
__declspec(implementation_key(3756)) VARIANT_BOOL Curve2d::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(3757)) TGFramework::ApplicationPtr _ICurves2dAuto::GetApplication ( );
__declspec(implementation_key(3758)) long _ICurves2dAuto::GetCount ( );
__declspec(implementation_key(3759)) IDispatchPtr _ICurves2dAuto::GetParent ( );
__declspec(implementation_key(3760)) Curve2dPtr _ICurves2dAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(3761)) IUnknownPtr _ICurves2dAuto::Get_NewEnum ( );
__declspec(implementation_key(3762)) Curve2dPtr _ICurves2dAuto::AddByPoints ( long PointCount, SAFEARRAY * * Points, const _variant_t & FitType, const _variant_t & Closed );
__declspec(implementation_key(3763)) GeometryStyle2dPtr _ICurve2dAuto::GetStyle ( );
__declspec(implementation_key(3764)) Relationships2dPtr _ICurve2dAuto::GetRelationships ( );
__declspec(implementation_key(3765)) void _ICurve2dAuto::PutLayer ( _bstr_t Layer );
__declspec(implementation_key(3766)) _bstr_t _ICurve2dAuto::GetLayer ( );
__declspec(implementation_key(3767)) TGFramework::ApplicationPtr _ICurve2dAuto::GetApplication ( );
__declspec(implementation_key(3768)) long _ICurve2dAuto::GetIndex ( );
__declspec(implementation_key(3769)) _bstr_t _ICurve2dAuto::GetName ( const _variant_t & Recurse, long Lcid );
__declspec(implementation_key(3770)) IDispatchPtr _ICurve2dAuto::GetParent ( );
__declspec(implementation_key(3771)) long _ICurve2dAuto::GetType ( );
__declspec(implementation_key(3772)) long _ICurve2dAuto::GetZOrder ( );
__declspec(implementation_key(3773)) _bstr_t _ICurve2dAuto::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(3774)) IDispatchPtr _ICurve2dAuto::GetDocument ( );
__declspec(implementation_key(3775)) HRESULT _ICurve2dAuto::Copy ( );
__declspec(implementation_key(3776)) HRESULT _ICurve2dAuto::Cut ( );
__declspec(implementation_key(3777)) HRESULT _ICurve2dAuto::Delete ( );
__declspec(implementation_key(3778)) HRESULT _ICurve2dAuto::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(3779)) HRESULT _ICurve2dAuto::Scale ( double Factor );
__declspec(implementation_key(3780)) HRESULT _ICurve2dAuto::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(3781)) HRESULT _ICurve2dAuto::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(3782)) IDispatchPtr _ICurve2dAuto::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(3783)) IDispatchPtr _ICurve2dAuto::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(3784)) HRESULT _ICurve2dAuto::BringToFront ( );
__declspec(implementation_key(3785)) HRESULT _ICurve2dAuto::BringForward ( );
__declspec(implementation_key(3786)) HRESULT _ICurve2dAuto::SendToBack ( );
__declspec(implementation_key(3787)) HRESULT _ICurve2dAuto::SendBackward ( );
__declspec(implementation_key(3788)) HRESULT _ICurve2dAuto::Select ( );
__declspec(implementation_key(3789)) double _ICurve2dAuto::GetLength ( );
__declspec(implementation_key(3790)) long _ICurve2dAuto::GetVertexCount ( );
__declspec(implementation_key(3791)) enum CurveFitTypeConstants _ICurve2dAuto::GetFitType ( );
__declspec(implementation_key(3792)) void _ICurve2dAuto::PutFitType ( enum CurveFitTypeConstants Fit );
__declspec(implementation_key(3793)) VARIANT_BOOL _ICurve2dAuto::GetClosed ( );
__declspec(implementation_key(3794)) double _ICurve2dAuto::GetArea ( );
__declspec(implementation_key(3795)) double _ICurve2dAuto::GetFitTolerance ( );
__declspec(implementation_key(3796)) void _ICurve2dAuto::PutFitTolerance ( double Tolerance );
__declspec(implementation_key(3797)) HRESULT _ICurve2dAuto::GetVertex ( long Index, double * x, double * y );
__declspec(implementation_key(3798)) HRESULT _ICurve2dAuto::SetVertex ( long Index, double x, double y );
__declspec(implementation_key(3799)) HRESULT _ICurve2dAuto::AddVertex ( double x, double y );
__declspec(implementation_key(3800)) HRESULT _ICurve2dAuto::RemoveVertex ( long Index );
__declspec(implementation_key(3801)) HRESULT _ICurve2dAuto::InsertVertex ( long Index, double x, double y );
__declspec(implementation_key(3802)) HRESULT _ICurve2dAuto::GetCentroid ( double * x, double * y );
__declspec(implementation_key(3803)) long _ICurve2dAuto::GetKeyPointCount ( );
__declspec(implementation_key(3804)) HRESULT _ICurve2dAuto::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(3805)) HRESULT _ICurve2dAuto::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(3806)) HRESULT _ICurve2dAuto::Extend ( double x, double y, IDispatch * TargetObj );
__declspec(implementation_key(3807)) HRESULT _ICurve2dAuto::CornerTrim ( double xKeep, double yKeep, IDispatch * TargetObj, double xTargetKeep, double yTargetKeep );
__declspec(implementation_key(3808)) long _ICurve2dAuto::GetSegmentedStyleCount ( );
__declspec(implementation_key(3809)) HRESULT _ICurve2dAuto::AddSegmentedStyle ( double x1, double y1, double x2, double y2, IDispatch * Style );
__declspec(implementation_key(3810)) HRESULT _ICurve2dAuto::GetSegmentedStyle ( long Index, double * x1, double * y1, double * x2, double * y2, IDispatch * * Style );
__declspec(implementation_key(3811)) HRESULT _ICurve2dAuto::SetSegmentedStyle ( long Index, IDispatch * Style );
__declspec(implementation_key(3812)) HRESULT _ICurve2dAuto::RemoveSegmentedStyle ( long Index );
__declspec(implementation_key(3813)) HRESULT _ICurve2dAuto::RemoveAllSegmentedStyles ( );
__declspec(implementation_key(3814)) HRESULT _ICurve2dAuto::RemoveAllSegmentedStylesBetween ( double x1, double y1, double x2, double y2 );
__declspec(implementation_key(3815)) IDispatchPtr _ICurve2dAuto::GetAttributeSets ( );
__declspec(implementation_key(3816)) VARIANT_BOOL _ICurve2dAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(3817)) LineString2dPtr LineStrings2d::Item ( const _variant_t & Index );
__declspec(implementation_key(3818)) TGFramework::ApplicationPtr LineStrings2d::GetApplication ( );
__declspec(implementation_key(3819)) long LineStrings2d::GetCount ( );
__declspec(implementation_key(3820)) IDispatchPtr LineStrings2d::GetParent ( );
__declspec(implementation_key(3821)) LineString2dPtr LineStrings2d::AddByPoints ( long PointCount, SAFEARRAY * * Points );
__declspec(implementation_key(3822)) GeometryStyle2dPtr LineString2d::GetStyle ( );
__declspec(implementation_key(3823)) void LineString2d::PutLayer ( _bstr_t _arg1 );
__declspec(implementation_key(3824)) _bstr_t LineString2d::GetLayer ( );
__declspec(implementation_key(3825)) HRESULT LineString2d::Drop ( );
__declspec(implementation_key(3826)) TGFramework::ApplicationPtr LineString2d::GetApplication ( );
__declspec(implementation_key(3827)) long LineString2d::GetIndex ( );
__declspec(implementation_key(3828)) _bstr_t LineString2d::GetName ( const _variant_t & Recurse );
__declspec(implementation_key(3829)) IDispatchPtr LineString2d::GetParent ( );
__declspec(implementation_key(3830)) long LineString2d::GetType ( );
__declspec(implementation_key(3831)) long LineString2d::GetZOrder ( );
__declspec(implementation_key(3832)) _bstr_t LineString2d::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(3833)) IDispatchPtr LineString2d::GetDocument ( );
__declspec(implementation_key(3834)) HRESULT LineString2d::Copy ( );
__declspec(implementation_key(3835)) HRESULT LineString2d::Cut ( );
__declspec(implementation_key(3836)) HRESULT LineString2d::Delete ( );
__declspec(implementation_key(3837)) HRESULT LineString2d::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(3838)) HRESULT LineString2d::Scale ( double Factor );
__declspec(implementation_key(3839)) HRESULT LineString2d::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(3840)) HRESULT LineString2d::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(3841)) IDispatchPtr LineString2d::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(3842)) IDispatchPtr LineString2d::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(3843)) HRESULT LineString2d::BringToFront ( );
__declspec(implementation_key(3844)) HRESULT LineString2d::BringForward ( );
__declspec(implementation_key(3845)) HRESULT LineString2d::SendToBack ( );
__declspec(implementation_key(3846)) HRESULT LineString2d::SendBackward ( );
__declspec(implementation_key(3847)) HRESULT LineString2d::Select ( );
__declspec(implementation_key(3848)) double LineString2d::GetLength ( );
__declspec(implementation_key(3849)) long LineString2d::GetVertexCount ( );
__declspec(implementation_key(3850)) VARIANT_BOOL LineString2d::GetClosed ( );
__declspec(implementation_key(3851)) double LineString2d::GetArea ( );
__declspec(implementation_key(3852)) HRESULT LineString2d::GetVertices ( long * VertexCount, SAFEARRAY * * Vertices );
__declspec(implementation_key(3853)) HRESULT LineString2d::SetVertices ( long VertexCount, SAFEARRAY * * Vertices );
__declspec(implementation_key(3854)) HRESULT LineString2d::GetVertex ( long Index, double * x, double * y );
__declspec(implementation_key(3855)) HRESULT LineString2d::SetVertex ( long Index, double x, double y );
__declspec(implementation_key(3856)) HRESULT LineString2d::InsertVertex ( long Index, double x, double y );
__declspec(implementation_key(3857)) HRESULT LineString2d::AddVertex ( double x, double y );
__declspec(implementation_key(3858)) HRESULT LineString2d::RemoveVertex ( long Index );
__declspec(implementation_key(3859)) HRESULT LineString2d::GetCentroid ( double * x, double * y );
__declspec(implementation_key(3860)) long LineString2d::GetKeyPointCount ( );
__declspec(implementation_key(3861)) HRESULT LineString2d::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(3862)) HRESULT LineString2d::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(3863)) HRESULT LineString2d::Extend ( double x, double y, IDispatch * TargetObj );
__declspec(implementation_key(3864)) HRESULT LineString2d::CornerTrim ( double xKeep, double yKeep, IDispatch * TargetObj, double xTargetKeep, double yTargetKeep );
__declspec(implementation_key(3865)) long LineString2d::GetSegmentedStyleCount ( );
__declspec(implementation_key(3866)) HRESULT LineString2d::AddSegmentedStyle ( double x1, double y1, double x2, double y2, IDispatch * Style );
__declspec(implementation_key(3867)) HRESULT LineString2d::GetSegmentedStyle ( long Index, double * x1, double * y1, double * x2, double * y2, IDispatch * * Style );
__declspec(implementation_key(3868)) HRESULT LineString2d::SetSegmentedStyle ( long Index, IDispatch * Style );
__declspec(implementation_key(3869)) HRESULT LineString2d::RemoveSegmentedStyle ( long Index );
__declspec(implementation_key(3870)) HRESULT LineString2d::RemoveAllSegmentedStyles ( );
__declspec(implementation_key(3871)) HRESULT LineString2d::RemoveAllSegmentedStylesBetween ( double x1, double y1, double x2, double y2 );
__declspec(implementation_key(3872)) IDispatchPtr LineString2d::GetAttributeSets ( );
__declspec(implementation_key(3873)) VARIANT_BOOL LineString2d::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(3874)) LineString2dPtr _ILineStrings2dAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(3875)) IUnknownPtr _ILineStrings2dAuto::Get_NewEnum ( );
__declspec(implementation_key(3876)) TGFramework::ApplicationPtr _ILineStrings2dAuto::GetApplication ( );
__declspec(implementation_key(3877)) long _ILineStrings2dAuto::GetCount ( );
__declspec(implementation_key(3878)) IDispatchPtr _ILineStrings2dAuto::GetParent ( );
__declspec(implementation_key(3879)) LineString2dPtr _ILineStrings2dAuto::AddByPoints ( long PointCount, SAFEARRAY * * Points );
__declspec(implementation_key(3880)) GeometryStyle2dPtr _ILineString2dAuto::GetStyle ( );
__declspec(implementation_key(3881)) void _ILineString2dAuto::PutLayer ( _bstr_t Layer );
__declspec(implementation_key(3882)) _bstr_t _ILineString2dAuto::GetLayer ( );
__declspec(implementation_key(3883)) HRESULT _ILineString2dAuto::Drop ( );
__declspec(implementation_key(3884)) TGFramework::ApplicationPtr _ILineString2dAuto::GetApplication ( );
__declspec(implementation_key(3885)) long _ILineString2dAuto::GetIndex ( );
__declspec(implementation_key(3886)) _bstr_t _ILineString2dAuto::GetName ( const _variant_t & Recurse, long Lcid );
__declspec(implementation_key(3887)) IDispatchPtr _ILineString2dAuto::GetParent ( );
__declspec(implementation_key(3888)) long _ILineString2dAuto::GetType ( );
__declspec(implementation_key(3889)) long _ILineString2dAuto::GetZOrder ( );
__declspec(implementation_key(3890)) _bstr_t _ILineString2dAuto::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(3891)) IDispatchPtr _ILineString2dAuto::GetDocument ( );
__declspec(implementation_key(3892)) HRESULT _ILineString2dAuto::Copy ( );
__declspec(implementation_key(3893)) HRESULT _ILineString2dAuto::Cut ( );
__declspec(implementation_key(3894)) HRESULT _ILineString2dAuto::Delete ( );
__declspec(implementation_key(3895)) HRESULT _ILineString2dAuto::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(3896)) HRESULT _ILineString2dAuto::Scale ( double Factor );
__declspec(implementation_key(3897)) HRESULT _ILineString2dAuto::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(3898)) HRESULT _ILineString2dAuto::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(3899)) IDispatchPtr _ILineString2dAuto::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(3900)) IDispatchPtr _ILineString2dAuto::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(3901)) HRESULT _ILineString2dAuto::BringToFront ( );
__declspec(implementation_key(3902)) HRESULT _ILineString2dAuto::BringForward ( );
__declspec(implementation_key(3903)) HRESULT _ILineString2dAuto::SendToBack ( );
__declspec(implementation_key(3904)) HRESULT _ILineString2dAuto::SendBackward ( );
__declspec(implementation_key(3905)) HRESULT _ILineString2dAuto::Select ( );
__declspec(implementation_key(3906)) double _ILineString2dAuto::GetLength ( );
__declspec(implementation_key(3907)) long _ILineString2dAuto::GetVertexCount ( );
__declspec(implementation_key(3908)) VARIANT_BOOL _ILineString2dAuto::GetClosed ( );
__declspec(implementation_key(3909)) double _ILineString2dAuto::GetArea ( );
__declspec(implementation_key(3910)) HRESULT _ILineString2dAuto::GetVertices ( long * VertexCount, SAFEARRAY * * Vertices );
__declspec(implementation_key(3911)) HRESULT _ILineString2dAuto::SetVertices ( long VertexCount, SAFEARRAY * * Vertices );
__declspec(implementation_key(3912)) HRESULT _ILineString2dAuto::GetVertex ( long Index, double * x, double * y );
__declspec(implementation_key(3913)) HRESULT _ILineString2dAuto::SetVertex ( long Index, double x, double y );
__declspec(implementation_key(3914)) HRESULT _ILineString2dAuto::InsertVertex ( long Index, double x, double y );
__declspec(implementation_key(3915)) HRESULT _ILineString2dAuto::AddVertex ( double x, double y );
__declspec(implementation_key(3916)) HRESULT _ILineString2dAuto::RemoveVertex ( long Index );
__declspec(implementation_key(3917)) HRESULT _ILineString2dAuto::GetCentroid ( double * x, double * y );
__declspec(implementation_key(3918)) long _ILineString2dAuto::GetKeyPointCount ( );
__declspec(implementation_key(3919)) HRESULT _ILineString2dAuto::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(3920)) HRESULT _ILineString2dAuto::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(3921)) HRESULT _ILineString2dAuto::Extend ( double x, double y, IDispatch * TargetObj );
__declspec(implementation_key(3922)) HRESULT _ILineString2dAuto::CornerTrim ( double xKeep, double yKeep, IDispatch * TargetObj, double xTargetKeep, double yTargetKeep );
__declspec(implementation_key(3923)) long _ILineString2dAuto::GetSegmentedStyleCount ( );
__declspec(implementation_key(3924)) HRESULT _ILineString2dAuto::AddSegmentedStyle ( double x1, double y1, double x2, double y2, IDispatch * Style );
__declspec(implementation_key(3925)) HRESULT _ILineString2dAuto::GetSegmentedStyle ( long Index, double * x1, double * y1, double * x2, double * y2, IDispatch * * Style );
__declspec(implementation_key(3926)) HRESULT _ILineString2dAuto::SetSegmentedStyle ( long Index, IDispatch * Style );
__declspec(implementation_key(3927)) HRESULT _ILineString2dAuto::RemoveSegmentedStyle ( long Index );
__declspec(implementation_key(3928)) HRESULT _ILineString2dAuto::RemoveAllSegmentedStyles ( );
__declspec(implementation_key(3929)) HRESULT _ILineString2dAuto::RemoveAllSegmentedStylesBetween ( double x1, double y1, double x2, double y2 );
__declspec(implementation_key(3930)) IDispatchPtr _ILineString2dAuto::GetAttributeSets ( );
__declspec(implementation_key(3931)) VARIANT_BOOL _ILineString2dAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(3932)) ComplexString2dPtr ComplexStrings2d::Item ( const _variant_t & Index );
__declspec(implementation_key(3933)) TGFramework::ApplicationPtr ComplexStrings2d::GetApplication ( );
__declspec(implementation_key(3934)) long ComplexStrings2d::GetCount ( );
__declspec(implementation_key(3935)) IDispatchPtr ComplexStrings2d::GetParent ( );
__declspec(implementation_key(3936)) ComplexString2dPtr ComplexStrings2d::AddByObjects ( long ArraySize, SAFEARRAY * * members );
__declspec(implementation_key(3937)) GeometryStyle2dPtr ComplexString2d::GetStyle ( );
__declspec(implementation_key(3938)) DrawingObjectsPtr ComplexString2d::GetDrawingObjects ( );
__declspec(implementation_key(3939)) _bstr_t ComplexString2d::GetLayer ( );
__declspec(implementation_key(3940)) void ComplexString2d::PutLayer ( _bstr_t _arg1 );
__declspec(implementation_key(3941)) HRESULT ComplexString2d::AddMember ( IDispatch * pMember );
__declspec(implementation_key(3942)) HRESULT ComplexString2d::RemoveMember ( IDispatch * pMember );
__declspec(implementation_key(3943)) HRESULT ComplexString2d::Drop ( );
__declspec(implementation_key(3944)) TGFramework::ApplicationPtr ComplexString2d::GetApplication ( );
__declspec(implementation_key(3945)) long ComplexString2d::GetIndex ( );
__declspec(implementation_key(3946)) _bstr_t ComplexString2d::GetName ( const _variant_t & Recurse );
__declspec(implementation_key(3947)) IDispatchPtr ComplexString2d::GetParent ( );
__declspec(implementation_key(3948)) long ComplexString2d::GetType ( );
__declspec(implementation_key(3949)) long ComplexString2d::GetZOrder ( );
__declspec(implementation_key(3950)) _bstr_t ComplexString2d::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(3951)) IDispatchPtr ComplexString2d::GetDocument ( );
__declspec(implementation_key(3952)) HRESULT ComplexString2d::Copy ( );
__declspec(implementation_key(3953)) HRESULT ComplexString2d::Cut ( );
__declspec(implementation_key(3954)) HRESULT ComplexString2d::Delete ( );
__declspec(implementation_key(3955)) HRESULT ComplexString2d::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(3956)) HRESULT ComplexString2d::Scale ( double Factor );
__declspec(implementation_key(3957)) HRESULT ComplexString2d::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(3958)) HRESULT ComplexString2d::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(3959)) IDispatchPtr ComplexString2d::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(3960)) IDispatchPtr ComplexString2d::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(3961)) HRESULT ComplexString2d::BringToFront ( );
__declspec(implementation_key(3962)) HRESULT ComplexString2d::BringForward ( );
__declspec(implementation_key(3963)) HRESULT ComplexString2d::SendToBack ( );
__declspec(implementation_key(3964)) HRESULT ComplexString2d::SendBackward ( );
__declspec(implementation_key(3965)) HRESULT ComplexString2d::Select ( );
__declspec(implementation_key(3966)) int ComplexString2d::GetForm ( );
__declspec(implementation_key(3967)) double ComplexString2d::GetLength ( );
__declspec(implementation_key(3968)) double ComplexString2d::GetArea ( );
__declspec(implementation_key(3969)) HRESULT ComplexString2d::GetCentroid ( double * x, double * y );
__declspec(implementation_key(3970)) long ComplexString2d::GetKeyPointCount ( );
__declspec(implementation_key(3971)) HRESULT ComplexString2d::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(3972)) HRESULT ComplexString2d::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(3973)) long ComplexString2d::GetSegmentedStyleCount ( );
__declspec(implementation_key(3974)) HRESULT ComplexString2d::AddSegmentedStyle ( double x1, double y1, double x2, double y2, IDispatch * Style );
__declspec(implementation_key(3975)) HRESULT ComplexString2d::GetSegmentedStyle ( long Index, double * x1, double * y1, double * x2, double * y2, IDispatch * * Style );
__declspec(implementation_key(3976)) HRESULT ComplexString2d::SetSegmentedStyle ( long Index, IDispatch * Style );
__declspec(implementation_key(3977)) HRESULT ComplexString2d::RemoveSegmentedStyle ( long Index );
__declspec(implementation_key(3978)) HRESULT ComplexString2d::RemoveAllSegmentedStyles ( );
__declspec(implementation_key(3979)) HRESULT ComplexString2d::RemoveAllSegmentedStylesBetween ( double x1, double y1, double x2, double y2 );
__declspec(implementation_key(3980)) IDispatchPtr ComplexString2d::GetAttributeSets ( );
__declspec(implementation_key(3981)) VARIANT_BOOL ComplexString2d::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(3982)) ComplexString2dPtr _IComplexStrings2dAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(3983)) IUnknownPtr _IComplexStrings2dAuto::Get_NewEnum ( );
__declspec(implementation_key(3984)) TGFramework::ApplicationPtr _IComplexStrings2dAuto::GetApplication ( );
__declspec(implementation_key(3985)) long _IComplexStrings2dAuto::GetCount ( );
__declspec(implementation_key(3986)) IDispatchPtr _IComplexStrings2dAuto::GetParent ( );
__declspec(implementation_key(3987)) ComplexString2dPtr _IComplexStrings2dAuto::AddByObjects ( long ArraySize, SAFEARRAY * * members );
__declspec(implementation_key(3988)) TGFramework::ApplicationPtr DrawingObjects::GetApplication ( );
__declspec(implementation_key(3989)) IDispatchPtr DrawingObjects::GetParent ( );
__declspec(implementation_key(3990)) long DrawingObjects::GetCount ( );
__declspec(implementation_key(3991)) IDispatchPtr DrawingObjects::Item ( const _variant_t & Index );
__declspec(implementation_key(3992)) GeometryStyle2dPtr _IComplexString2dAuto::GetStyle ( );
__declspec(implementation_key(3993)) DrawingObjectsPtr _IComplexString2dAuto::GetDrawingObjects ( );
__declspec(implementation_key(3994)) _bstr_t _IComplexString2dAuto::GetLayer ( );
__declspec(implementation_key(3995)) void _IComplexString2dAuto::PutLayer ( _bstr_t Layer );
__declspec(implementation_key(3996)) HRESULT _IComplexString2dAuto::AddMember ( IDispatch * pMember );
__declspec(implementation_key(3997)) HRESULT _IComplexString2dAuto::RemoveMember ( IDispatch * pMember );
__declspec(implementation_key(3998)) HRESULT _IComplexString2dAuto::Drop ( );
__declspec(implementation_key(3999)) TGFramework::ApplicationPtr _IComplexString2dAuto::GetApplication ( );
__declspec(implementation_key(4000)) long _IComplexString2dAuto::GetIndex ( );
__declspec(implementation_key(4001)) _bstr_t _IComplexString2dAuto::GetName ( const _variant_t & Recurse, long Lcid );
__declspec(implementation_key(4002)) IDispatchPtr _IComplexString2dAuto::GetParent ( );
__declspec(implementation_key(4003)) long _IComplexString2dAuto::GetType ( );
__declspec(implementation_key(4004)) long _IComplexString2dAuto::GetZOrder ( );
__declspec(implementation_key(4005)) _bstr_t _IComplexString2dAuto::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(4006)) IDispatchPtr _IComplexString2dAuto::GetDocument ( );
__declspec(implementation_key(4007)) HRESULT _IComplexString2dAuto::Copy ( );
__declspec(implementation_key(4008)) HRESULT _IComplexString2dAuto::Cut ( );
__declspec(implementation_key(4009)) HRESULT _IComplexString2dAuto::Delete ( );
__declspec(implementation_key(4010)) HRESULT _IComplexString2dAuto::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(4011)) HRESULT _IComplexString2dAuto::Scale ( double Factor );
__declspec(implementation_key(4012)) HRESULT _IComplexString2dAuto::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(4013)) HRESULT _IComplexString2dAuto::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(4014)) IDispatchPtr _IComplexString2dAuto::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(4015)) IDispatchPtr _IComplexString2dAuto::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(4016)) HRESULT _IComplexString2dAuto::BringToFront ( );
__declspec(implementation_key(4017)) HRESULT _IComplexString2dAuto::BringForward ( );
__declspec(implementation_key(4018)) HRESULT _IComplexString2dAuto::SendToBack ( );
__declspec(implementation_key(4019)) HRESULT _IComplexString2dAuto::SendBackward ( );
__declspec(implementation_key(4020)) HRESULT _IComplexString2dAuto::Select ( );
__declspec(implementation_key(4021)) int _IComplexString2dAuto::GetForm ( );
__declspec(implementation_key(4022)) double _IComplexString2dAuto::GetLength ( );
__declspec(implementation_key(4023)) double _IComplexString2dAuto::GetArea ( );
__declspec(implementation_key(4024)) HRESULT _IComplexString2dAuto::GetCentroid ( double * x, double * y );
__declspec(implementation_key(4025)) long _IComplexString2dAuto::GetKeyPointCount ( );
__declspec(implementation_key(4026)) HRESULT _IComplexString2dAuto::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(4027)) HRESULT _IComplexString2dAuto::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(4028)) long _IComplexString2dAuto::GetSegmentedStyleCount ( );
__declspec(implementation_key(4029)) HRESULT _IComplexString2dAuto::AddSegmentedStyle ( double x1, double y1, double x2, double y2, IDispatch * Style );
__declspec(implementation_key(4030)) HRESULT _IComplexString2dAuto::GetSegmentedStyle ( long Index, double * x1, double * y1, double * x2, double * y2, IDispatch * * Style );
__declspec(implementation_key(4031)) HRESULT _IComplexString2dAuto::SetSegmentedStyle ( long Index, IDispatch * Style );
__declspec(implementation_key(4032)) HRESULT _IComplexString2dAuto::RemoveSegmentedStyle ( long Index );
__declspec(implementation_key(4033)) HRESULT _IComplexString2dAuto::RemoveAllSegmentedStyles ( );
__declspec(implementation_key(4034)) HRESULT _IComplexString2dAuto::RemoveAllSegmentedStylesBetween ( double x1, double y1, double x2, double y2 );
__declspec(implementation_key(4035)) IDispatchPtr _IComplexString2dAuto::GetAttributeSets ( );
__declspec(implementation_key(4036)) VARIANT_BOOL _IComplexString2dAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(4037)) Boundary2dPtr Boundaries2d::Item ( const _variant_t & Index );
__declspec(implementation_key(4038)) TGFramework::ApplicationPtr Boundaries2d::GetApplication ( );
__declspec(implementation_key(4039)) long Boundaries2d::GetCount ( );
__declspec(implementation_key(4040)) IDispatchPtr Boundaries2d::GetParent ( );
__declspec(implementation_key(4041)) Boundary2dPtr Boundaries2d::AddByObjects ( long ObjectCount, SAFEARRAY * * Objects, double xFlood, double yFlood );
__declspec(implementation_key(4042)) Boundary2dPtr Boundaries2d::AddByPoints ( long PointCount, SAFEARRAY * * Points );
__declspec(implementation_key(4043)) BoundaryStyle2dPtr Boundary2d::GetStyle ( );
__declspec(implementation_key(4044)) BoundingObjects2dPtr Boundary2d::GetBoundingObjects ( );
__declspec(implementation_key(4045)) _bstr_t Boundary2d::GetLayer ( );
__declspec(implementation_key(4046)) void Boundary2d::PutLayer ( _bstr_t _arg1 );
__declspec(implementation_key(4047)) TGFramework::ApplicationPtr Boundary2d::GetApplication ( );
__declspec(implementation_key(4048)) long Boundary2d::GetIndex ( );
__declspec(implementation_key(4049)) _bstr_t Boundary2d::GetName ( const _variant_t & Recurse );
__declspec(implementation_key(4050)) IDispatchPtr Boundary2d::GetParent ( );
__declspec(implementation_key(4051)) long Boundary2d::GetType ( );
__declspec(implementation_key(4052)) long Boundary2d::GetZOrder ( );
__declspec(implementation_key(4053)) _bstr_t Boundary2d::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(4054)) IDispatchPtr Boundary2d::GetDocument ( );
__declspec(implementation_key(4055)) HRESULT Boundary2d::Copy ( );
__declspec(implementation_key(4056)) HRESULT Boundary2d::Cut ( );
__declspec(implementation_key(4057)) HRESULT Boundary2d::Delete ( );
__declspec(implementation_key(4058)) HRESULT Boundary2d::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(4059)) HRESULT Boundary2d::Scale ( double Factor );
__declspec(implementation_key(4060)) HRESULT Boundary2d::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(4061)) HRESULT Boundary2d::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(4062)) IDispatchPtr Boundary2d::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(4063)) IDispatchPtr Boundary2d::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(4064)) HRESULT Boundary2d::BringToFront ( );
__declspec(implementation_key(4065)) HRESULT Boundary2d::BringForward ( );
__declspec(implementation_key(4066)) HRESULT Boundary2d::SendToBack ( );
__declspec(implementation_key(4067)) HRESULT Boundary2d::SendBackward ( );
__declspec(implementation_key(4068)) HRESULT Boundary2d::Select ( );
__declspec(implementation_key(4069)) double Boundary2d::GetPerimeter ( );
__declspec(implementation_key(4070)) double Boundary2d::GetArea ( );
__declspec(implementation_key(4071)) enum Boundary2dStateConstants Boundary2d::GetState ( );
__declspec(implementation_key(4072)) HRESULT Boundary2d::GetFloodPoint ( double * x, double * y );
__declspec(implementation_key(4073)) HRESULT Boundary2d::GetCentroid ( double * x, double * y );
__declspec(implementation_key(4074)) HRESULT Boundary2d::ConstructGeometry ( );
__declspec(implementation_key(4075)) long Boundary2d::GetKeyPointCount ( );
__declspec(implementation_key(4076)) HRESULT Boundary2d::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(4077)) HRESULT Boundary2d::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(4078)) IDispatchPtr Boundary2d::GetAttributeSets ( );
__declspec(implementation_key(4079)) VARIANT_BOOL Boundary2d::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(4080)) Boundary2dPtr _IBoundaries2dAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(4081)) IUnknownPtr _IBoundaries2dAuto::Get_NewEnum ( );
__declspec(implementation_key(4082)) TGFramework::ApplicationPtr _IBoundaries2dAuto::GetApplication ( );
__declspec(implementation_key(4083)) long _IBoundaries2dAuto::GetCount ( );
__declspec(implementation_key(4084)) IDispatchPtr _IBoundaries2dAuto::GetParent ( );
__declspec(implementation_key(4085)) Boundary2dPtr _IBoundaries2dAuto::AddByObjects ( long ObjectCount, SAFEARRAY * * Objects, double xFlood, double yFlood );
__declspec(implementation_key(4086)) Boundary2dPtr _IBoundaries2dAuto::AddByPoints ( long PointCount, SAFEARRAY * * Points );
__declspec(implementation_key(4087)) void BoundaryStyle2d::PutFillColor ( long _arg1 );
__declspec(implementation_key(4088)) long BoundaryStyle2d::GetFillColor ( );
__declspec(implementation_key(4089)) void BoundaryStyle2d::PutLinearColor ( long _arg1 );
__declspec(implementation_key(4090)) long BoundaryStyle2d::GetLinearColor ( );
__declspec(implementation_key(4091)) void BoundaryStyle2d::PutWidth ( double _arg1 );
__declspec(implementation_key(4092)) double BoundaryStyle2d::GetWidth ( );
__declspec(implementation_key(4093)) _bstr_t BoundaryStyle2d::GetDashName ( );
__declspec(implementation_key(4094)) void BoundaryStyle2d::PutDashName ( _bstr_t _arg1 );
__declspec(implementation_key(4095)) double BoundaryStyle2d::GetRotation ( );
__declspec(implementation_key(4096)) void BoundaryStyle2d::PutRotation ( double _arg1 );
__declspec(implementation_key(4097)) double BoundaryStyle2d::GetScale ( );
__declspec(implementation_key(4098)) void BoundaryStyle2d::PutScale ( double _arg1 );
__declspec(implementation_key(4099)) long BoundaryStyle2d::GetUnits ( );
__declspec(implementation_key(4100)) void BoundaryStyle2d::PutUnits ( long _arg1 );
__declspec(implementation_key(4101)) long BoundaryStyle2d::GetFillType ( );
__declspec(implementation_key(4102)) double BoundaryStyle2d::Getspacing ( );
__declspec(implementation_key(4103)) void BoundaryStyle2d::Putspacing ( double _arg1 );
__declspec(implementation_key(4104)) _bstr_t BoundaryStyle2d::GetFillName ( );
__declspec(implementation_key(4105)) void BoundaryStyle2d::PutFillName ( _bstr_t _arg1 );
__declspec(implementation_key(4106)) HRESULT BoundaryStyle2d::UseActiveFillStyle ( );
__declspec(implementation_key(4107)) void _IBoundaryStyle2dAuto::PutFillColor ( long FillColor );
__declspec(implementation_key(4108)) long _IBoundaryStyle2dAuto::GetFillColor ( );
__declspec(implementation_key(4109)) void _IBoundaryStyle2dAuto::PutLinearColor ( long Color );
__declspec(implementation_key(4110)) long _IBoundaryStyle2dAuto::GetLinearColor ( );
__declspec(implementation_key(4111)) void _IBoundaryStyle2dAuto::PutWidth ( double PenWidth );
__declspec(implementation_key(4112)) double _IBoundaryStyle2dAuto::GetWidth ( );
__declspec(implementation_key(4113)) _bstr_t _IBoundaryStyle2dAuto::GetDashName ( );
__declspec(implementation_key(4114)) void _IBoundaryStyle2dAuto::PutDashName ( _bstr_t LineTypeName );
__declspec(implementation_key(4115)) double _IBoundaryStyle2dAuto::GetRotation ( );
__declspec(implementation_key(4116)) void _IBoundaryStyle2dAuto::PutRotation ( double Angle );
__declspec(implementation_key(4117)) double _IBoundaryStyle2dAuto::GetScale ( );
__declspec(implementation_key(4118)) void _IBoundaryStyle2dAuto::PutScale ( double Factor );
__declspec(implementation_key(4119)) long _IBoundaryStyle2dAuto::GetUnits ( );
__declspec(implementation_key(4120)) void _IBoundaryStyle2dAuto::PutUnits ( long Units );
__declspec(implementation_key(4121)) long _IBoundaryStyle2dAuto::GetFillType ( );
__declspec(implementation_key(4122)) double _IBoundaryStyle2dAuto::Getspacing ( );
__declspec(implementation_key(4123)) void _IBoundaryStyle2dAuto::Putspacing ( double Distance );
__declspec(implementation_key(4124)) _bstr_t _IBoundaryStyle2dAuto::GetFillName ( );
__declspec(implementation_key(4125)) void _IBoundaryStyle2dAuto::PutFillName ( _bstr_t FillStyleName );
__declspec(implementation_key(4126)) HRESULT _IBoundaryStyle2dAuto::UseActiveFillStyle ( );
__declspec(implementation_key(4127)) IDispatchPtr BoundingObjects2d::Item ( const _variant_t & Index );
__declspec(implementation_key(4128)) TGFramework::ApplicationPtr BoundingObjects2d::GetApplication ( );
__declspec(implementation_key(4129)) long BoundingObjects2d::GetCount ( );
__declspec(implementation_key(4130)) IDispatchPtr BoundingObjects2d::GetParent ( );
__declspec(implementation_key(4131)) IDispatchPtr _IBoundingObjects2dAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(4132)) IUnknownPtr _IBoundingObjects2dAuto::Get_NewEnum ( );
__declspec(implementation_key(4133)) TGFramework::ApplicationPtr _IBoundingObjects2dAuto::GetApplication ( );
__declspec(implementation_key(4134)) long _IBoundingObjects2dAuto::GetCount ( );
__declspec(implementation_key(4135)) IDispatchPtr _IBoundingObjects2dAuto::GetParent ( );
__declspec(implementation_key(4136)) BoundaryStyle2dPtr _IBoundary2dAuto::GetStyle ( );
__declspec(implementation_key(4137)) BoundingObjects2dPtr _IBoundary2dAuto::GetBoundingObjects ( );
__declspec(implementation_key(4138)) _bstr_t _IBoundary2dAuto::GetLayer ( );
__declspec(implementation_key(4139)) void _IBoundary2dAuto::PutLayer ( _bstr_t Layer );
__declspec(implementation_key(4140)) TGFramework::ApplicationPtr _IBoundary2dAuto::GetApplication ( );
__declspec(implementation_key(4141)) long _IBoundary2dAuto::GetIndex ( );
__declspec(implementation_key(4142)) _bstr_t _IBoundary2dAuto::GetName ( const _variant_t & Recurse, long Lcid );
__declspec(implementation_key(4143)) IDispatchPtr _IBoundary2dAuto::GetParent ( );
__declspec(implementation_key(4144)) long _IBoundary2dAuto::GetType ( );
__declspec(implementation_key(4145)) long _IBoundary2dAuto::GetZOrder ( );
__declspec(implementation_key(4146)) _bstr_t _IBoundary2dAuto::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(4147)) IDispatchPtr _IBoundary2dAuto::GetDocument ( );
__declspec(implementation_key(4148)) HRESULT _IBoundary2dAuto::Copy ( );
__declspec(implementation_key(4149)) HRESULT _IBoundary2dAuto::Cut ( );
__declspec(implementation_key(4150)) HRESULT _IBoundary2dAuto::Delete ( );
__declspec(implementation_key(4151)) HRESULT _IBoundary2dAuto::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(4152)) HRESULT _IBoundary2dAuto::Scale ( double Factor );
__declspec(implementation_key(4153)) HRESULT _IBoundary2dAuto::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(4154)) HRESULT _IBoundary2dAuto::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(4155)) IDispatchPtr _IBoundary2dAuto::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(4156)) IDispatchPtr _IBoundary2dAuto::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(4157)) HRESULT _IBoundary2dAuto::BringToFront ( );
__declspec(implementation_key(4158)) HRESULT _IBoundary2dAuto::BringForward ( );
__declspec(implementation_key(4159)) HRESULT _IBoundary2dAuto::SendToBack ( );
__declspec(implementation_key(4160)) HRESULT _IBoundary2dAuto::SendBackward ( );
__declspec(implementation_key(4161)) HRESULT _IBoundary2dAuto::Select ( );
__declspec(implementation_key(4162)) double _IBoundary2dAuto::GetPerimeter ( );
__declspec(implementation_key(4163)) double _IBoundary2dAuto::GetArea ( );
__declspec(implementation_key(4164)) enum Boundary2dStateConstants _IBoundary2dAuto::GetState ( );
__declspec(implementation_key(4165)) HRESULT _IBoundary2dAuto::GetFloodPoint ( double * x, double * y );
__declspec(implementation_key(4166)) HRESULT _IBoundary2dAuto::GetCentroid ( double * x, double * y );
__declspec(implementation_key(4167)) HRESULT _IBoundary2dAuto::ConstructGeometry ( );
__declspec(implementation_key(4168)) long _IBoundary2dAuto::GetKeyPointCount ( );
__declspec(implementation_key(4169)) HRESULT _IBoundary2dAuto::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(4170)) HRESULT _IBoundary2dAuto::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(4171)) IDispatchPtr _IBoundary2dAuto::GetAttributeSets ( );
__declspec(implementation_key(4172)) VARIANT_BOOL _IBoundary2dAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(4173)) IDispatchPtr TextBoxes::GetApplication ( );
__declspec(implementation_key(4174)) long TextBoxes::GetCount ( );
__declspec(implementation_key(4175)) IDispatchPtr TextBoxes::GetParent ( );
__declspec(implementation_key(4176)) TextBoxPtr TextBoxes::Item ( const _variant_t & Index );
__declspec(implementation_key(4177)) TextBoxPtr TextBoxes::AddByTwoPoints ( double x1, double y1, double z1, double x2, double y2, double z2 );
__declspec(implementation_key(4178)) TextBoxPtr TextBoxes::Add ( double x1, double y1, double z1 );
__declspec(implementation_key(4179)) TextBoxPtr TextBoxes::AddByHtWdAng ( double x1, double y1, double z1, double ht, double wd, double ang );
__declspec(implementation_key(4180)) TextBoxPtr TextBoxes::AddWatermark ( double x1, double y1, double z1 );
__declspec(implementation_key(4181)) TextBoxPtr TextBoxes::AddPMITextBox ( IUnknown * unkPlane, double x1, double y1, double z1 );
__declspec(implementation_key(4182)) TextEditPtr TextBox::GetEdit ( );
__declspec(implementation_key(4183)) void TextBox::PutHeight ( double _arg1 );
__declspec(implementation_key(4184)) double TextBox::GetHeight ( );
__declspec(implementation_key(4185)) void TextBox::PutWidth ( double _arg1 );
__declspec(implementation_key(4186)) double TextBox::GetWidth ( );
__declspec(implementation_key(4187)) void TextBox::PutRotationAngle ( double _arg1 );
__declspec(implementation_key(4188)) double TextBox::GetRotationAngle ( );
__declspec(implementation_key(4189)) void TextBox::PutBorderType ( enum TextBorderTypeConstants _arg1 );
__declspec(implementation_key(4190)) enum TextBorderTypeConstants TextBox::GetBorderType ( );
__declspec(implementation_key(4191)) void TextBox::PutBorderLineStyle ( _bstr_t _arg1 );
__declspec(implementation_key(4192)) _bstr_t TextBox::GetBorderLineStyle ( );
__declspec(implementation_key(4193)) void TextBox::PutBorderLineWidth ( double _arg1 );
__declspec(implementation_key(4194)) double TextBox::GetBorderLineWidth ( );
__declspec(implementation_key(4195)) void TextBox::PutBorderLineColor ( long _arg1 );
__declspec(implementation_key(4196)) long TextBox::GetBorderLineColor ( );
__declspec(implementation_key(4197)) void TextBox::PutBorderOffset ( double _arg1 );
__declspec(implementation_key(4198)) double TextBox::GetBorderOffset ( );
__declspec(implementation_key(4199)) void TextBox::PutVerticalAlignment ( enum TextVerticalAlignmentConstants _arg1 );
__declspec(implementation_key(4200)) enum TextVerticalAlignmentConstants TextBox::GetVerticalAlignment ( );
__declspec(implementation_key(4201)) void TextBox::PutJustification ( enum TextJustificationConstants _arg1 );
__declspec(implementation_key(4202)) enum TextJustificationConstants TextBox::GetJustification ( );
__declspec(implementation_key(4203)) HRESULT TextBox::SetOrigin ( double x, double y, double z );
__declspec(implementation_key(4204)) HRESULT TextBox::GetOrigin ( double * x, double * y, double * z );
__declspec(implementation_key(4205)) void TextBox::PutFill ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4206)) VARIANT_BOOL TextBox::GetFill ( );
__declspec(implementation_key(4207)) void TextBox::PutShadow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4208)) VARIANT_BOOL TextBox::GetShadow ( );
__declspec(implementation_key(4209)) void TextBox::PutFillColor ( long _arg1 );
__declspec(implementation_key(4210)) long TextBox::GetFillColor ( );
__declspec(implementation_key(4211)) void TextBox::PutShadowOffset ( double _arg1 );
__declspec(implementation_key(4212)) double TextBox::GetShadowOffset ( );
__declspec(implementation_key(4213)) void TextBox::PutFlowDirection ( enum TextFlowDirectionConstants _arg1 );
__declspec(implementation_key(4214)) enum TextFlowDirectionConstants TextBox::GetFlowDirection ( );
__declspec(implementation_key(4215)) void TextBox::PutFlowOrientation ( enum TextFlowOrientationConstants _arg1 );
__declspec(implementation_key(4216)) enum TextFlowOrientationConstants TextBox::GetFlowOrientation ( );
__declspec(implementation_key(4217)) void TextBox::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(4218)) _bstr_t TextBox::GetText ( );
__declspec(implementation_key(4219)) void TextBox::PutPropertyText ( _bstr_t _arg1 );
__declspec(implementation_key(4220)) HRESULT TextBox::FindAndReplacePropertyText ( _bstr_t findText, _bstr_t propText, VARIANT_BOOL ReplaceAll );
__declspec(implementation_key(4221)) void TextBox::PutLayer ( _bstr_t _arg1 );
__declspec(implementation_key(4222)) _bstr_t TextBox::GetLayer ( );
__declspec(implementation_key(4223)) void TextBox::PutPlacementType ( enum TextPlacementTypeConstants _arg1 );
__declspec(implementation_key(4224)) enum TextPlacementTypeConstants TextBox::GetPlacementType ( );
__declspec(implementation_key(4225)) TGFramework::ApplicationPtr TextBox::GetApplication ( );
__declspec(implementation_key(4226)) long TextBox::GetIndex ( );
__declspec(implementation_key(4227)) _bstr_t TextBox::GetName ( const _variant_t & Recurse );
__declspec(implementation_key(4228)) IDispatchPtr TextBox::GetParent ( );
__declspec(implementation_key(4229)) long TextBox::GetType ( );
__declspec(implementation_key(4230)) long TextBox::GetZOrder ( );
__declspec(implementation_key(4231)) _bstr_t TextBox::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(4232)) IDispatchPtr TextBox::GetDocument ( );
__declspec(implementation_key(4233)) HRESULT TextBox::Copy ( );
__declspec(implementation_key(4234)) HRESULT TextBox::Cut ( );
__declspec(implementation_key(4235)) HRESULT TextBox::Delete ( );
__declspec(implementation_key(4236)) HRESULT TextBox::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(4237)) HRESULT TextBox::Scale ( double Factor );
__declspec(implementation_key(4238)) HRESULT TextBox::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(4239)) HRESULT TextBox::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(4240)) IDispatchPtr TextBox::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(4241)) IDispatchPtr TextBox::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(4242)) HRESULT TextBox::BringToFront ( );
__declspec(implementation_key(4243)) HRESULT TextBox::BringForward ( );
__declspec(implementation_key(4244)) HRESULT TextBox::SendToBack ( );
__declspec(implementation_key(4245)) HRESULT TextBox::SendBackward ( );
__declspec(implementation_key(4246)) HRESULT TextBox::Select ( );
__declspec(implementation_key(4247)) long TextBox::GetKeyPointCount ( );
__declspec(implementation_key(4248)) HRESULT TextBox::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(4249)) HRESULT TextBox::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(4250)) IDispatchPtr TextBox::GetAttributeSets ( );
__declspec(implementation_key(4251)) VARIANT_BOOL TextBox::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(4252)) double TextBox::GetTextScale ( );
__declspec(implementation_key(4253)) void TextBox::PutTextScale ( double _arg1 );
__declspec(implementation_key(4254)) void TextBox::PutHorizontalAlignment ( enum TextHorizontalAlignmentConstants _arg1 );
__declspec(implementation_key(4255)) enum TextHorizontalAlignmentConstants TextBox::GetHorizontalAlignment ( );
__declspec(implementation_key(4256)) HRESULT TextBox::PromoteToCurrentVersion ( );
__declspec(implementation_key(4257)) void TextBox::PutTabStopWidth ( double _arg1 );
__declspec(implementation_key(4258)) double TextBox::GetTabStopWidth ( );
__declspec(implementation_key(4259)) void TextBox::PutMinimumAspectRatio ( double _arg1 );
__declspec(implementation_key(4260)) double TextBox::GetMinimumAspectRatio ( );
__declspec(implementation_key(4261)) void TextBox::PutLineSpacingType ( enum TextLineSpacingTypeConstants _arg1 );
__declspec(implementation_key(4262)) enum TextLineSpacingTypeConstants TextBox::GetLineSpacingType ( );
__declspec(implementation_key(4263)) void TextBox::PutTextControlType ( enum TextControlTypeConstants _arg1 );
__declspec(implementation_key(4264)) enum TextControlTypeConstants TextBox::GetTextControlType ( );
__declspec(implementation_key(4265)) void TextBox::PutLineSpacing ( double _arg1 );
__declspec(implementation_key(4266)) double TextBox::GetLineSpacing ( );
__declspec(implementation_key(4267)) double TextBox::GetActualTextLength ( );
__declspec(implementation_key(4268)) void TextBox::PutFillBackgroundColor ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4269)) VARIANT_BOOL TextBox::GetFillBackgroundColor ( );
__declspec(implementation_key(4270)) HRESULT TextBox::GetReferencedObjectInfo ( SAFEARRAY * * ReferencedObjects, SAFEARRAY * * ReferencedObjectTypes );
__declspec(implementation_key(4271)) void TextBox::PutWatermark ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4272)) VARIANT_BOOL TextBox::GetWatermark ( );
__declspec(implementation_key(4273)) HRESULT TextBox::ReplaceTextWithSymbol ( _bstr_t Text );
__declspec(implementation_key(4274)) HRESULT TextBox::SaveAsNote ( _bstr_t NoteName, VARIANT_BOOL bNoteOverWrite );
__declspec(implementation_key(4275)) void TextBox::PutParallelToScreen ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4276)) long TextBox::GetParallelToScreen ( );
__declspec(implementation_key(4277)) IDispatchPtr _ITextBoxesAuto::GetApplication ( );
__declspec(implementation_key(4278)) long _ITextBoxesAuto::GetCount ( );
__declspec(implementation_key(4279)) IDispatchPtr _ITextBoxesAuto::GetParent ( );
__declspec(implementation_key(4280)) TextBoxPtr _ITextBoxesAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(4281)) IUnknownPtr _ITextBoxesAuto::Get_NewEnum ( );
__declspec(implementation_key(4282)) TextBoxPtr _ITextBoxesAuto::AddByTwoPoints ( double x1, double y1, double z1, double x2, double y2, double z2 );
__declspec(implementation_key(4283)) TextBoxPtr _ITextBoxesAuto::Add ( double x1, double y1, double z1 );
__declspec(implementation_key(4284)) TextBoxPtr _ITextBoxesAuto::AddByHtWdAng ( double x1, double y1, double z1, double ht, double wd, double ang );
__declspec(implementation_key(4285)) TextBoxPtr _ITextBoxesAuto::AddWatermark ( double x1, double y1, double z1 );
__declspec(implementation_key(4286)) TextBoxPtr _ITextBoxesAuto::AddPMITextBox ( IUnknown * unkPlane, double x1, double y1, double z1 );
__declspec(implementation_key(4287)) void TextEdit::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(4288)) _bstr_t TextEdit::GetName ( );
__declspec(implementation_key(4289)) void TextEdit::PutLanguage ( long _arg1 );
__declspec(implementation_key(4290)) long TextEdit::GetLanguage ( );
__declspec(implementation_key(4291)) void TextEdit::PutTextSize ( double _arg1 );
__declspec(implementation_key(4292)) double TextEdit::GetTextSize ( );
__declspec(implementation_key(4293)) void TextEdit::PutAspectRatio ( double _arg1 );
__declspec(implementation_key(4294)) double TextEdit::GetAspectRatio ( );
__declspec(implementation_key(4295)) void TextEdit::PutBold ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4296)) VARIANT_BOOL TextEdit::GetBold ( );
__declspec(implementation_key(4297)) void TextEdit::PutItalic ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4298)) VARIANT_BOOL TextEdit::GetItalic ( );
__declspec(implementation_key(4299)) void TextEdit::PutUnderLine ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4300)) VARIANT_BOOL TextEdit::GetUnderLine ( );
__declspec(implementation_key(4301)) void TextEdit::PutSubScript ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4302)) VARIANT_BOOL TextEdit::GetSubScript ( );
__declspec(implementation_key(4303)) void TextEdit::PutSuperScript ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4304)) VARIANT_BOOL TextEdit::GetSuperScript ( );
__declspec(implementation_key(4305)) void TextEdit::PutFont ( _bstr_t _arg1 );
__declspec(implementation_key(4306)) _bstr_t TextEdit::GetFont ( );
__declspec(implementation_key(4307)) void TextEdit::PutCharacterSpacing ( double _arg1 );
__declspec(implementation_key(4308)) double TextEdit::GetCharacterSpacing ( );
__declspec(implementation_key(4309)) void TextEdit::PutVerticalPosition ( double _arg1 );
__declspec(implementation_key(4310)) double TextEdit::GetVerticalPosition ( );
__declspec(implementation_key(4311)) void TextEdit::PutColor ( long _arg1 );
__declspec(implementation_key(4312)) long TextEdit::GetColor ( );
__declspec(implementation_key(4313)) void TextEdit::PutHorizontalAlignment ( enum TextHorizontalAlignmentConstants _arg1 );
__declspec(implementation_key(4314)) enum TextHorizontalAlignmentConstants TextEdit::GetHorizontalAlignment ( );
__declspec(implementation_key(4315)) void TextEdit::PutBullet ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4316)) VARIANT_BOOL TextEdit::GetBullet ( );
__declspec(implementation_key(4317)) void TextEdit::PutNumber ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4318)) VARIANT_BOOL TextEdit::GetNumber ( );
__declspec(implementation_key(4319)) void TextEdit::PutRightIndent ( double _arg1 );
__declspec(implementation_key(4320)) double TextEdit::GetRightIndent ( );
__declspec(implementation_key(4321)) void TextEdit::PutLeftIndent ( double _arg1 );
__declspec(implementation_key(4322)) double TextEdit::GetLeftIndent ( );
__declspec(implementation_key(4323)) void TextEdit::PutFirstLineIndent ( double _arg1 );
__declspec(implementation_key(4324)) double TextEdit::GetFirstLineIndent ( );
__declspec(implementation_key(4325)) void TextEdit::PutLineSpacing ( double _arg1 );
__declspec(implementation_key(4326)) double TextEdit::GetLineSpacing ( );
__declspec(implementation_key(4327)) void TextEdit::PutBeforeSpacing ( double _arg1 );
__declspec(implementation_key(4328)) double TextEdit::GetBeforeSpacing ( );
__declspec(implementation_key(4329)) void TextEdit::PutAfterSpacing ( double _arg1 );
__declspec(implementation_key(4330)) double TextEdit::GetAfterSpacing ( );
__declspec(implementation_key(4331)) VARIANT_BOOL TextEdit::GetIsEmpty ( );
__declspec(implementation_key(4332)) void TextEdit::PutCharacters ( _bstr_t _arg1 );
__declspec(implementation_key(4333)) _bstr_t TextEdit::GetCharacters ( );
__declspec(implementation_key(4334)) void TextEdit::PutInsertIndex ( long _arg1 );
__declspec(implementation_key(4335)) long TextEdit::GetInsertIndex ( );
__declspec(implementation_key(4336)) int TextEdit::GetTabCount ( );
__declspec(implementation_key(4337)) HRESULT TextEdit::TabStop ( enum TextTabTypeConstants Type, double Distance );
__declspec(implementation_key(4338)) HRESULT TextEdit::SetTabStop ( int Index, enum TextTabTypeConstants Type, double Distance );
__declspec(implementation_key(4339)) HRESULT TextEdit::GetTabStop ( int Index, enum TextTabTypeConstants * Type, double * Distance );
__declspec(implementation_key(4340)) HRESULT TextEdit::ClearTabStops ( );
__declspec(implementation_key(4341)) HRESULT TextEdit::SetSelect ( long Start, long End, enum TextSelectConstants option );
__declspec(implementation_key(4342)) HRESULT TextEdit::GetSelect ( long * Start, long * End );
__declspec(implementation_key(4343)) HRESULT TextEdit::Cut ( );
__declspec(implementation_key(4344)) HRESULT TextEdit::Paste ( );
__declspec(implementation_key(4345)) HRESULT TextEdit::Copy ( );
__declspec(implementation_key(4346)) HRESULT TextEdit::Clear ( );
__declspec(implementation_key(4347)) VARIANT_BOOL TextEdit::PointInsideBox ( double x, double y, double z );
__declspec(implementation_key(4348)) double TextEdit::GetTextScale ( );
__declspec(implementation_key(4349)) void TextEdit::PutTextScale ( double _arg1 );
__declspec(implementation_key(4350)) void TextEdit::PutSpecialIndentType ( enum TextSpecialIndentTypeConstants _arg1 );
__declspec(implementation_key(4351)) enum TextSpecialIndentTypeConstants TextEdit::GetSpecialIndentType ( );
__declspec(implementation_key(4352)) void TextEdit::PutLineSpacingType ( enum TextLineSpacingTypeConstants _arg1 );
__declspec(implementation_key(4353)) enum TextLineSpacingTypeConstants TextEdit::GetLineSpacingType ( );
__declspec(implementation_key(4354)) HRESULT TextEdit::InsertFraction ( _bstr_t UpperText, _bstr_t LowerText, enum TextFractionTypeConstants typeOption, enum TextFractionAlignConstants alignOption, enum TextFractionSizeConstants fractionSize );
__declspec(implementation_key(4355)) HRESULT TextEdit::GetFraction ( VARIANT_BOOL * Flag, BSTR * UpperText, BSTR * LowerText, enum TextFractionTypeConstants * typeOption, enum TextFractionAlignConstants * alignOption, enum TextFractionSizeConstants * fractionSize );
__declspec(implementation_key(4356)) HRESULT TextEdit::SetBulletList ( enum TextBulletTypeConstants Value );
__declspec(implementation_key(4357)) HRESULT TextEdit::GetBulletList ( VARIANT_BOOL * Flag, enum TextBulletTypeConstants * Value );
__declspec(implementation_key(4358)) HRESULT TextEdit::SetNumberList ( enum TextNumberTypeConstants Type, enum TextNumberFormatConstants format, enum TextNumberJustificationConstants align );
__declspec(implementation_key(4359)) HRESULT TextEdit::GetNumberList ( VARIANT_BOOL * Flag, enum TextNumberTypeConstants * Type, enum TextNumberFormatConstants * format, enum TextNumberJustificationConstants * align );
__declspec(implementation_key(4360)) HRESULT TextEdit::SetNoList ( );
__declspec(implementation_key(4361)) HRESULT TextEdit::IncreaseIndent ( );
__declspec(implementation_key(4362)) HRESULT TextEdit::DecreaseIndent ( );
__declspec(implementation_key(4363)) HRESULT TextEdit::RestartNumbering ( );
__declspec(implementation_key(4364)) HRESULT TextEdit::ContinueNumbering ( );
__declspec(implementation_key(4365)) void TextEdit::PutNumberingStartValue ( int _arg1 );
__declspec(implementation_key(4366)) int TextEdit::GetNumberingStartValue ( );
__declspec(implementation_key(4367)) void _ITextEditAuto::PutName ( _bstr_t Name );
__declspec(implementation_key(4368)) _bstr_t _ITextEditAuto::GetName ( );
__declspec(implementation_key(4369)) void _ITextEditAuto::PutLanguage ( long Lcid );
__declspec(implementation_key(4370)) long _ITextEditAuto::GetLanguage ( );
__declspec(implementation_key(4371)) void _ITextEditAuto::PutTextSize ( double TextSize );
__declspec(implementation_key(4372)) double _ITextEditAuto::GetTextSize ( );
__declspec(implementation_key(4373)) void _ITextEditAuto::PutAspectRatio ( double Ratio );
__declspec(implementation_key(4374)) double _ITextEditAuto::GetAspectRatio ( );
__declspec(implementation_key(4375)) void _ITextEditAuto::PutBold ( VARIANT_BOOL Bold );
__declspec(implementation_key(4376)) VARIANT_BOOL _ITextEditAuto::GetBold ( );
__declspec(implementation_key(4377)) void _ITextEditAuto::PutItalic ( VARIANT_BOOL Italic );
__declspec(implementation_key(4378)) VARIANT_BOOL _ITextEditAuto::GetItalic ( );
__declspec(implementation_key(4379)) void _ITextEditAuto::PutUnderLine ( VARIANT_BOOL uline );
__declspec(implementation_key(4380)) VARIANT_BOOL _ITextEditAuto::GetUnderLine ( );
__declspec(implementation_key(4381)) void _ITextEditAuto::PutSubScript ( VARIANT_BOOL SubScript );
__declspec(implementation_key(4382)) VARIANT_BOOL _ITextEditAuto::GetSubScript ( );
__declspec(implementation_key(4383)) void _ITextEditAuto::PutSuperScript ( VARIANT_BOOL SuperScript );
__declspec(implementation_key(4384)) VARIANT_BOOL _ITextEditAuto::GetSuperScript ( );
__declspec(implementation_key(4385)) void _ITextEditAuto::PutFont ( _bstr_t FontName );
__declspec(implementation_key(4386)) _bstr_t _ITextEditAuto::GetFont ( );
__declspec(implementation_key(4387)) void _ITextEditAuto::PutCharacterSpacing ( double space );
__declspec(implementation_key(4388)) double _ITextEditAuto::GetCharacterSpacing ( );
__declspec(implementation_key(4389)) void _ITextEditAuto::PutVerticalPosition ( double space );
__declspec(implementation_key(4390)) double _ITextEditAuto::GetVerticalPosition ( );
__declspec(implementation_key(4391)) void _ITextEditAuto::PutColor ( long Color );
__declspec(implementation_key(4392)) long _ITextEditAuto::GetColor ( );
__declspec(implementation_key(4393)) void _ITextEditAuto::PutHorizontalAlignment ( enum TextHorizontalAlignmentConstants align );
__declspec(implementation_key(4394)) enum TextHorizontalAlignmentConstants _ITextEditAuto::GetHorizontalAlignment ( );
__declspec(implementation_key(4395)) void _ITextEditAuto::PutBullet ( VARIANT_BOOL Bullet );
__declspec(implementation_key(4396)) VARIANT_BOOL _ITextEditAuto::GetBullet ( );
__declspec(implementation_key(4397)) void _ITextEditAuto::PutNumber ( VARIANT_BOOL Number );
__declspec(implementation_key(4398)) VARIANT_BOOL _ITextEditAuto::GetNumber ( );
__declspec(implementation_key(4399)) void _ITextEditAuto::PutRightIndent ( double Distance );
__declspec(implementation_key(4400)) double _ITextEditAuto::GetRightIndent ( );
__declspec(implementation_key(4401)) void _ITextEditAuto::PutLeftIndent ( double Distance );
__declspec(implementation_key(4402)) double _ITextEditAuto::GetLeftIndent ( );
__declspec(implementation_key(4403)) void _ITextEditAuto::PutFirstLineIndent ( double Distance );
__declspec(implementation_key(4404)) double _ITextEditAuto::GetFirstLineIndent ( );
__declspec(implementation_key(4405)) void _ITextEditAuto::PutLineSpacing ( double Distance );
__declspec(implementation_key(4406)) double _ITextEditAuto::GetLineSpacing ( );
__declspec(implementation_key(4407)) void _ITextEditAuto::PutBeforeSpacing ( double Distance );
__declspec(implementation_key(4408)) double _ITextEditAuto::GetBeforeSpacing ( );
__declspec(implementation_key(4409)) void _ITextEditAuto::PutAfterSpacing ( double Distance );
__declspec(implementation_key(4410)) double _ITextEditAuto::GetAfterSpacing ( );
__declspec(implementation_key(4411)) VARIANT_BOOL _ITextEditAuto::GetIsEmpty ( );
__declspec(implementation_key(4412)) void _ITextEditAuto::PutCharacters ( _bstr_t Text );
__declspec(implementation_key(4413)) _bstr_t _ITextEditAuto::GetCharacters ( );
__declspec(implementation_key(4414)) void _ITextEditAuto::PutInsertIndex ( long Index );
__declspec(implementation_key(4415)) long _ITextEditAuto::GetInsertIndex ( );
__declspec(implementation_key(4416)) int _ITextEditAuto::GetTabCount ( );
__declspec(implementation_key(4417)) HRESULT _ITextEditAuto::TabStop ( enum TextTabTypeConstants Type, double Distance );
__declspec(implementation_key(4418)) HRESULT _ITextEditAuto::SetTabStop ( int Index, enum TextTabTypeConstants Type, double Distance );
__declspec(implementation_key(4419)) HRESULT _ITextEditAuto::GetTabStop ( int Index, enum TextTabTypeConstants * Type, double * Distance );
__declspec(implementation_key(4420)) HRESULT _ITextEditAuto::ClearTabStops ( );
__declspec(implementation_key(4421)) HRESULT _ITextEditAuto::SetSelect ( long Start, long End, enum TextSelectConstants option );
__declspec(implementation_key(4422)) HRESULT _ITextEditAuto::GetSelect ( long * Start, long * End );
__declspec(implementation_key(4423)) HRESULT _ITextEditAuto::Cut ( );
__declspec(implementation_key(4424)) HRESULT _ITextEditAuto::Paste ( );
__declspec(implementation_key(4425)) HRESULT _ITextEditAuto::Copy ( );
__declspec(implementation_key(4426)) HRESULT _ITextEditAuto::Clear ( );
__declspec(implementation_key(4427)) VARIANT_BOOL _ITextEditAuto::PointInsideBox ( double x, double y, double z );
__declspec(implementation_key(4428)) double _ITextEditAuto::GetTextScale ( );
__declspec(implementation_key(4429)) void _ITextEditAuto::PutTextScale ( double pdAngle );
__declspec(implementation_key(4430)) void _ITextEditAuto::PutSpecialIndentType ( enum TextSpecialIndentTypeConstants Value );
__declspec(implementation_key(4431)) enum TextSpecialIndentTypeConstants _ITextEditAuto::GetSpecialIndentType ( );
__declspec(implementation_key(4432)) void _ITextEditAuto::PutLineSpacingType ( enum TextLineSpacingTypeConstants Value );
__declspec(implementation_key(4433)) enum TextLineSpacingTypeConstants _ITextEditAuto::GetLineSpacingType ( );
__declspec(implementation_key(4434)) HRESULT _ITextEditAuto::InsertFraction ( _bstr_t UpperText, _bstr_t LowerText, enum TextFractionTypeConstants typeOption, enum TextFractionAlignConstants alignOption, enum TextFractionSizeConstants fractionSize );
__declspec(implementation_key(4435)) HRESULT _ITextEditAuto::GetFraction ( VARIANT_BOOL * Flag, BSTR * UpperText, BSTR * LowerText, enum TextFractionTypeConstants * typeOption, enum TextFractionAlignConstants * alignOption, enum TextFractionSizeConstants * fractionSize );
__declspec(implementation_key(4436)) HRESULT _ITextEditAuto::SetBulletList ( enum TextBulletTypeConstants Value );
__declspec(implementation_key(4437)) HRESULT _ITextEditAuto::GetBulletList ( VARIANT_BOOL * Flag, enum TextBulletTypeConstants * Value );
__declspec(implementation_key(4438)) HRESULT _ITextEditAuto::SetNumberList ( enum TextNumberTypeConstants Type, enum TextNumberFormatConstants format, enum TextNumberJustificationConstants align );
__declspec(implementation_key(4439)) HRESULT _ITextEditAuto::GetNumberList ( VARIANT_BOOL * Flag, enum TextNumberTypeConstants * Type, enum TextNumberFormatConstants * format, enum TextNumberJustificationConstants * align );
__declspec(implementation_key(4440)) HRESULT _ITextEditAuto::SetNoList ( );
__declspec(implementation_key(4441)) HRESULT _ITextEditAuto::IncreaseIndent ( );
__declspec(implementation_key(4442)) HRESULT _ITextEditAuto::DecreaseIndent ( );
__declspec(implementation_key(4443)) HRESULT _ITextEditAuto::RestartNumbering ( );
__declspec(implementation_key(4444)) HRESULT _ITextEditAuto::ContinueNumbering ( );
__declspec(implementation_key(4445)) void _ITextEditAuto::PutNumberingStartValue ( int Value );
__declspec(implementation_key(4446)) int _ITextEditAuto::GetNumberingStartValue ( );
__declspec(implementation_key(4447)) TextEditPtr _ITextBoxAuto::GetEdit ( );
__declspec(implementation_key(4448)) void _ITextBoxAuto::PutHeight ( double Value );
__declspec(implementation_key(4449)) double _ITextBoxAuto::GetHeight ( );
__declspec(implementation_key(4450)) void _ITextBoxAuto::PutWidth ( double Value );
__declspec(implementation_key(4451)) double _ITextBoxAuto::GetWidth ( );
__declspec(implementation_key(4452)) void _ITextBoxAuto::PutRotationAngle ( double Value );
__declspec(implementation_key(4453)) double _ITextBoxAuto::GetRotationAngle ( );
__declspec(implementation_key(4454)) void _ITextBoxAuto::PutBorderType ( enum TextBorderTypeConstants Value );
__declspec(implementation_key(4455)) enum TextBorderTypeConstants _ITextBoxAuto::GetBorderType ( );
__declspec(implementation_key(4456)) void _ITextBoxAuto::PutBorderLineStyle ( _bstr_t Style );
__declspec(implementation_key(4457)) _bstr_t _ITextBoxAuto::GetBorderLineStyle ( );
__declspec(implementation_key(4458)) void _ITextBoxAuto::PutBorderLineWidth ( double Value );
__declspec(implementation_key(4459)) double _ITextBoxAuto::GetBorderLineWidth ( );
__declspec(implementation_key(4460)) void _ITextBoxAuto::PutBorderLineColor ( long Value );
__declspec(implementation_key(4461)) long _ITextBoxAuto::GetBorderLineColor ( );
__declspec(implementation_key(4462)) void _ITextBoxAuto::PutBorderOffset ( double Value );
__declspec(implementation_key(4463)) double _ITextBoxAuto::GetBorderOffset ( );
__declspec(implementation_key(4464)) void _ITextBoxAuto::PutVerticalAlignment ( enum TextVerticalAlignmentConstants Value );
__declspec(implementation_key(4465)) enum TextVerticalAlignmentConstants _ITextBoxAuto::GetVerticalAlignment ( );
__declspec(implementation_key(4466)) void _ITextBoxAuto::PutJustification ( enum TextJustificationConstants Value );
__declspec(implementation_key(4467)) enum TextJustificationConstants _ITextBoxAuto::GetJustification ( );
__declspec(implementation_key(4468)) HRESULT _ITextBoxAuto::SetOrigin ( double x, double y, double z );
__declspec(implementation_key(4469)) HRESULT _ITextBoxAuto::GetOrigin ( double * x, double * y, double * z );
__declspec(implementation_key(4470)) void _ITextBoxAuto::PutFill ( VARIANT_BOOL Flag );
__declspec(implementation_key(4471)) VARIANT_BOOL _ITextBoxAuto::GetFill ( );
__declspec(implementation_key(4472)) void _ITextBoxAuto::PutShadow ( VARIANT_BOOL Flag );
__declspec(implementation_key(4473)) VARIANT_BOOL _ITextBoxAuto::GetShadow ( );
__declspec(implementation_key(4474)) void _ITextBoxAuto::PutFillColor ( long FillColor );
__declspec(implementation_key(4475)) long _ITextBoxAuto::GetFillColor ( );
__declspec(implementation_key(4476)) void _ITextBoxAuto::PutShadowOffset ( double ShadowOffset );
__declspec(implementation_key(4477)) double _ITextBoxAuto::GetShadowOffset ( );
__declspec(implementation_key(4478)) void _ITextBoxAuto::PutFlowDirection ( enum TextFlowDirectionConstants flowDirn );
__declspec(implementation_key(4479)) enum TextFlowDirectionConstants _ITextBoxAuto::GetFlowDirection ( );
__declspec(implementation_key(4480)) void _ITextBoxAuto::PutFlowOrientation ( enum TextFlowOrientationConstants flowOrient );
__declspec(implementation_key(4481)) enum TextFlowOrientationConstants _ITextBoxAuto::GetFlowOrientation ( );
__declspec(implementation_key(4482)) void _ITextBoxAuto::PutText ( _bstr_t Text );
__declspec(implementation_key(4483)) _bstr_t _ITextBoxAuto::GetText ( );
__declspec(implementation_key(4484)) void _ITextBoxAuto::PutPropertyText ( _bstr_t _arg1 );
__declspec(implementation_key(4485)) HRESULT _ITextBoxAuto::FindAndReplacePropertyText ( _bstr_t findText, _bstr_t propText, VARIANT_BOOL ReplaceAll );
__declspec(implementation_key(4486)) void _ITextBoxAuto::PutLayer ( _bstr_t Layer );
__declspec(implementation_key(4487)) _bstr_t _ITextBoxAuto::GetLayer ( );
__declspec(implementation_key(4488)) void _ITextBoxAuto::PutPlacementType ( enum TextPlacementTypeConstants Type );
__declspec(implementation_key(4489)) enum TextPlacementTypeConstants _ITextBoxAuto::GetPlacementType ( );
__declspec(implementation_key(4490)) TGFramework::ApplicationPtr _ITextBoxAuto::GetApplication ( );
__declspec(implementation_key(4491)) long _ITextBoxAuto::GetIndex ( );
__declspec(implementation_key(4492)) _bstr_t _ITextBoxAuto::GetName ( const _variant_t & Recurse, long Lcid );
__declspec(implementation_key(4493)) IDispatchPtr _ITextBoxAuto::GetParent ( );
__declspec(implementation_key(4494)) long _ITextBoxAuto::GetType ( );
__declspec(implementation_key(4495)) long _ITextBoxAuto::GetZOrder ( );
__declspec(implementation_key(4496)) _bstr_t _ITextBoxAuto::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(4497)) IDispatchPtr _ITextBoxAuto::GetDocument ( );
__declspec(implementation_key(4498)) HRESULT _ITextBoxAuto::Copy ( );
__declspec(implementation_key(4499)) HRESULT _ITextBoxAuto::Cut ( );
__declspec(implementation_key(4500)) HRESULT _ITextBoxAuto::Delete ( );
__declspec(implementation_key(4501)) HRESULT _ITextBoxAuto::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(4502)) HRESULT _ITextBoxAuto::Scale ( double Factor );
__declspec(implementation_key(4503)) HRESULT _ITextBoxAuto::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(4504)) HRESULT _ITextBoxAuto::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(4505)) IDispatchPtr _ITextBoxAuto::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(4506)) IDispatchPtr _ITextBoxAuto::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(4507)) HRESULT _ITextBoxAuto::BringToFront ( );
__declspec(implementation_key(4508)) HRESULT _ITextBoxAuto::BringForward ( );
__declspec(implementation_key(4509)) HRESULT _ITextBoxAuto::SendToBack ( );
__declspec(implementation_key(4510)) HRESULT _ITextBoxAuto::SendBackward ( );
__declspec(implementation_key(4511)) HRESULT _ITextBoxAuto::Select ( );
__declspec(implementation_key(4512)) long _ITextBoxAuto::GetKeyPointCount ( );
__declspec(implementation_key(4513)) HRESULT _ITextBoxAuto::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(4514)) HRESULT _ITextBoxAuto::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(4515)) IDispatchPtr _ITextBoxAuto::GetAttributeSets ( );
__declspec(implementation_key(4516)) VARIANT_BOOL _ITextBoxAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(4517)) double _ITextBoxAuto::GetTextScale ( );
__declspec(implementation_key(4518)) void _ITextBoxAuto::PutTextScale ( double pdAngle );
__declspec(implementation_key(4519)) void _ITextBoxAuto::PutHorizontalAlignment ( enum TextHorizontalAlignmentConstants Value );
__declspec(implementation_key(4520)) enum TextHorizontalAlignmentConstants _ITextBoxAuto::GetHorizontalAlignment ( );
__declspec(implementation_key(4521)) HRESULT _ITextBoxAuto::PromoteToCurrentVersion ( );
__declspec(implementation_key(4522)) void _ITextBoxAuto::PutTabStopWidth ( double Value );
__declspec(implementation_key(4523)) double _ITextBoxAuto::GetTabStopWidth ( );
__declspec(implementation_key(4524)) void _ITextBoxAuto::PutMinimumAspectRatio ( double Value );
__declspec(implementation_key(4525)) double _ITextBoxAuto::GetMinimumAspectRatio ( );
__declspec(implementation_key(4526)) void _ITextBoxAuto::PutLineSpacingType ( enum TextLineSpacingTypeConstants Value );
__declspec(implementation_key(4527)) enum TextLineSpacingTypeConstants _ITextBoxAuto::GetLineSpacingType ( );
__declspec(implementation_key(4528)) void _ITextBoxAuto::PutTextControlType ( enum TextControlTypeConstants Value );
__declspec(implementation_key(4529)) enum TextControlTypeConstants _ITextBoxAuto::GetTextControlType ( );
__declspec(implementation_key(4530)) void _ITextBoxAuto::PutLineSpacing ( double Distance );
__declspec(implementation_key(4531)) double _ITextBoxAuto::GetLineSpacing ( );
__declspec(implementation_key(4532)) double _ITextBoxAuto::GetActualTextLength ( );
__declspec(implementation_key(4533)) void _ITextBoxAuto::PutFillBackgroundColor ( VARIANT_BOOL Flag );
__declspec(implementation_key(4534)) VARIANT_BOOL _ITextBoxAuto::GetFillBackgroundColor ( );
__declspec(implementation_key(4535)) HRESULT _ITextBoxAuto::GetReferencedObjectInfo ( SAFEARRAY * * ReferencedObjects, SAFEARRAY * * ReferencedObjectTypes );
__declspec(implementation_key(4536)) void _ITextBoxAuto::PutWatermark ( VARIANT_BOOL Flag );
__declspec(implementation_key(4537)) VARIANT_BOOL _ITextBoxAuto::GetWatermark ( );
__declspec(implementation_key(4538)) HRESULT _ITextBoxAuto::ReplaceTextWithSymbol ( _bstr_t Text );
__declspec(implementation_key(4539)) HRESULT _ITextBoxAuto::SaveAsNote ( _bstr_t NoteName, VARIANT_BOOL bNoteOverWrite );
__declspec(implementation_key(4540)) void _ITextBoxAuto::PutParallelToScreen ( VARIANT_BOOL bGetParallelToScreen );
__declspec(implementation_key(4541)) long _ITextBoxAuto::GetParallelToScreen ( );
__declspec(implementation_key(4542)) TGFramework::ApplicationPtr TextProfiles::GetApplication ( );
__declspec(implementation_key(4543)) IDispatchPtr TextProfiles::GetParent ( );
__declspec(implementation_key(4544)) long TextProfiles::GetCount ( );
__declspec(implementation_key(4545)) TextProfilePtr TextProfiles::Item ( const _variant_t & Index );
__declspec(implementation_key(4546)) TGFramework::ApplicationPtr TextProfile::GetApplication ( );
__declspec(implementation_key(4547)) IDispatchPtr TextProfile::GetParent ( );
__declspec(implementation_key(4548)) _bstr_t TextProfile::GetText ( );
__declspec(implementation_key(4549)) HRESULT TextProfile::GetCharCount ( long * NumChars );
__declspec(implementation_key(4550)) HRESULT TextProfile::GetCharCurveCount ( int CharIndex, long * NumCurves );
__declspec(implementation_key(4551)) HRESULT TextProfile::GetCharStrokedCurveData ( int CharIndex, int CurveIndex, long * NumNodes, VARIANT * Nodes, long * NumPoles, VARIANT * Poles, VARIANT * Knots, VARIANT * Rational, VARIANT * Weights, long * Degree, enum Geom2dFormConstants * Form, enum Geom2dScopeConstants * Scope );
__declspec(implementation_key(4552)) _bstr_t TextProfile::GetFontName ( );
__declspec(implementation_key(4553)) HRESULT TextProfile::GetBoldState ( int CharIndex, VARIANT_BOOL * IsBold );
__declspec(implementation_key(4554)) HRESULT TextProfile::GetItalicState ( int CharIndex, VARIANT_BOOL * IsItalic );
__declspec(implementation_key(4555)) double TextProfile::GetTextSize ( );
__declspec(implementation_key(4556)) HRESULT TextProfile::GetAlignment ( int TextLineIndex, enum TextNumberJustificationConstants * JustifValue );
__declspec(implementation_key(4557)) HRESULT TextProfile::Copy ( );
__declspec(implementation_key(4558)) HRESULT TextProfile::Cut ( );
__declspec(implementation_key(4559)) HRESULT TextProfile::Delete ( );
__declspec(implementation_key(4560)) HRESULT TextProfile::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(4561)) HRESULT TextProfile::GetAnchorPoint ( double * x, double * y );
__declspec(implementation_key(4562)) HRESULT TextProfile::SetAnchorPoint ( double x, double y );
__declspec(implementation_key(4563)) void TextProfile::PutAnchorPointLocation ( enum AnchorPointLocationConstants _arg1 );
__declspec(implementation_key(4564)) enum AnchorPointLocationConstants TextProfile::GetAnchorPointLocation ( );
__declspec(implementation_key(4565)) double TextProfile::GetLetterSpacing ( );
__declspec(implementation_key(4566)) double TextProfile::GetLineSpacing ( );
__declspec(implementation_key(4567)) double TextProfile::GetMargin ( );
__declspec(implementation_key(4568)) int TextProfile::GetSmoothness ( );
__declspec(implementation_key(4569)) void TextProfile::PutMargin ( double _arg1 );
__declspec(implementation_key(4570)) void TextProfile::PutLineSpacing ( double _arg1 );
__declspec(implementation_key(4571)) void TextProfile::PutLetterSpacing ( double _arg1 );
__declspec(implementation_key(4572)) void TextProfile::PutTextSize ( double _arg1 );
__declspec(implementation_key(4573)) void TextProfile::PutSmoothness ( int _arg1 );
__declspec(implementation_key(4574)) void TextProfile::PutFontName ( _bstr_t _arg1 );
__declspec(implementation_key(4575)) HRESULT TextProfile::SetAlignment ( int TextLineIndex, enum TextNumberJustificationConstants JustifValue );
__declspec(implementation_key(4576)) HRESULT TextProfile::SetBoldState ( int startCharIndex, int endCharIndex, VARIANT_BOOL IsBold );
__declspec(implementation_key(4577)) HRESULT TextProfile::SetItalicState ( int startCharIndex, int endCharIndex, VARIANT_BOOL IsItalic );
__declspec(implementation_key(4578)) void TextProfile::PutText ( _bstr_t _arg1 );
__declspec(implementation_key(4579)) IDispatchPtr TextProfile::GetAttributeSets ( );
__declspec(implementation_key(4580)) VARIANT_BOOL TextProfile::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(4581)) TGFramework::ApplicationPtr _ITextProfilesAuto::GetApplication ( );
__declspec(implementation_key(4582)) IDispatchPtr _ITextProfilesAuto::GetParent ( );
__declspec(implementation_key(4583)) long _ITextProfilesAuto::GetCount ( );
__declspec(implementation_key(4584)) TextProfilePtr _ITextProfilesAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(4585)) IUnknownPtr _ITextProfilesAuto::Get_NewEnum ( );
__declspec(implementation_key(4586)) TGFramework::ApplicationPtr _ITextProfileAuto::GetApplication ( );
__declspec(implementation_key(4587)) IDispatchPtr _ITextProfileAuto::GetParent ( );
__declspec(implementation_key(4588)) _bstr_t _ITextProfileAuto::GetText ( );
__declspec(implementation_key(4589)) HRESULT _ITextProfileAuto::GetCharCount ( long * NumChars );
__declspec(implementation_key(4590)) HRESULT _ITextProfileAuto::GetCharCurveCount ( int CharIndex, long * NumCurves );
__declspec(implementation_key(4591)) HRESULT _ITextProfileAuto::GetCharStrokedCurveData ( int CharIndex, int CurveIndex, long * NumNodes, VARIANT * Nodes, long * NumPoles, VARIANT * Poles, VARIANT * Knots, VARIANT * Rational, VARIANT * Weights, long * Degree, enum Geom2dFormConstants * Form, enum Geom2dScopeConstants * Scope );
__declspec(implementation_key(4592)) _bstr_t _ITextProfileAuto::GetFontName ( );
__declspec(implementation_key(4593)) HRESULT _ITextProfileAuto::GetBoldState ( int CharIndex, VARIANT_BOOL * IsBold );
__declspec(implementation_key(4594)) HRESULT _ITextProfileAuto::GetItalicState ( int CharIndex, VARIANT_BOOL * IsItalic );
__declspec(implementation_key(4595)) double _ITextProfileAuto::GetTextSize ( );
__declspec(implementation_key(4596)) HRESULT _ITextProfileAuto::GetAlignment ( int TextLineIndex, enum TextNumberJustificationConstants * JustifValue );
__declspec(implementation_key(4597)) HRESULT _ITextProfileAuto::Copy ( );
__declspec(implementation_key(4598)) HRESULT _ITextProfileAuto::Cut ( );
__declspec(implementation_key(4599)) HRESULT _ITextProfileAuto::Delete ( );
__declspec(implementation_key(4600)) HRESULT _ITextProfileAuto::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(4601)) HRESULT _ITextProfileAuto::GetAnchorPoint ( double * x, double * y );
__declspec(implementation_key(4602)) HRESULT _ITextProfileAuto::SetAnchorPoint ( double x, double y );
__declspec(implementation_key(4603)) void _ITextProfileAuto::PutAnchorPointLocation ( enum AnchorPointLocationConstants Value );
__declspec(implementation_key(4604)) enum AnchorPointLocationConstants _ITextProfileAuto::GetAnchorPointLocation ( );
__declspec(implementation_key(4605)) double _ITextProfileAuto::GetLetterSpacing ( );
__declspec(implementation_key(4606)) double _ITextProfileAuto::GetLineSpacing ( );
__declspec(implementation_key(4607)) double _ITextProfileAuto::GetMargin ( );
__declspec(implementation_key(4608)) int _ITextProfileAuto::GetSmoothness ( );
__declspec(implementation_key(4609)) void _ITextProfileAuto::PutMargin ( double Margin );
__declspec(implementation_key(4610)) void _ITextProfileAuto::PutLineSpacing ( double Distance );
__declspec(implementation_key(4611)) void _ITextProfileAuto::PutLetterSpacing ( double space );
__declspec(implementation_key(4612)) void _ITextProfileAuto::PutTextSize ( double TextSize );
__declspec(implementation_key(4613)) void _ITextProfileAuto::PutSmoothness ( int Smoothness );
__declspec(implementation_key(4614)) void _ITextProfileAuto::PutFontName ( _bstr_t FontName );
__declspec(implementation_key(4615)) HRESULT _ITextProfileAuto::SetAlignment ( int TextLineIndex, enum TextNumberJustificationConstants JustifValue );
__declspec(implementation_key(4616)) HRESULT _ITextProfileAuto::SetBoldState ( int startCharIndex, int endCharIndex, VARIANT_BOOL IsBold );
__declspec(implementation_key(4617)) HRESULT _ITextProfileAuto::SetItalicState ( int startCharIndex, int endCharIndex, VARIANT_BOOL IsItalic );
__declspec(implementation_key(4618)) void _ITextProfileAuto::PutText ( _bstr_t Text );
__declspec(implementation_key(4619)) IDispatchPtr _ITextProfileAuto::GetAttributeSets ( );
__declspec(implementation_key(4620)) VARIANT_BOOL _ITextProfileAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(4621)) TGFramework::ApplicationPtr DatumFrames::GetApplication ( );
__declspec(implementation_key(4622)) long DatumFrames::GetCount ( );
__declspec(implementation_key(4623)) IDispatchPtr DatumFrames::GetParent ( );
__declspec(implementation_key(4624)) DatumFramePtr DatumFrames::Item ( const _variant_t & Index );
__declspec(implementation_key(4625)) void DatumFrames::PutPlane ( IDispatch * _arg1 );
__declspec(implementation_key(4626)) IDispatchPtr DatumFrames::GetPlane ( );
__declspec(implementation_key(4627)) void DatumFrames::PutStyle ( struct DimensionStyle * _arg1 );
__declspec(implementation_key(4628)) DimensionStylePtr DatumFrames::GetStyle ( );
__declspec(implementation_key(4629)) DatumFramePtr DatumFrames::Add ( double x1, double y1, double z1 );
__declspec(implementation_key(4630)) DatumFramePtr DatumFrames::AddByTerminator ( IDispatch * TerminatorObject, double x1, double y1, double z1, VARIANT_BOOL keyPoint1 );
__declspec(implementation_key(4631)) HRESULT DatumFrames::ClearPlane ( );
__declspec(implementation_key(4632)) HRESULT DatumFrames::ClearStyle ( );
__declspec(implementation_key(4633)) AnnotInitDataPtr DatumFrames::GetAnnotInitData ( );
__declspec(implementation_key(4634)) DatumFramePtr DatumFrames::AddDatumFrame ( struct AnnotInitData * AnnotInitData );
__declspec(implementation_key(4635)) DimStylePtr DatumFrame::GetStyle ( );
__declspec(implementation_key(4636)) _bstr_t DatumFrame::GetDatum ( );
__declspec(implementation_key(4637)) void DatumFrame::PutDatum ( _bstr_t _arg1 );
__declspec(implementation_key(4638)) HRESULT DatumFrame::SetTerminator ( IDispatch * TerminatorObj, double x, double y, double z, VARIANT_BOOL keyPoint );
__declspec(implementation_key(4639)) HRESULT DatumFrame::GetTerminator ( IDispatch * * TerminatorObj, double * x, double * y, double * z, VARIANT_BOOL * keyPoint );
__declspec(implementation_key(4640)) HRESULT DatumFrame::SetFreeSpacePoint ( double x, double y, double z );
__declspec(implementation_key(4641)) HRESULT DatumFrame::GetFreeSpacePoint ( double * x, double * y, double * z );
__declspec(implementation_key(4642)) IDispatchPtr DatumFrame::GetPlane ( );
__declspec(implementation_key(4643)) TGFramework::ApplicationPtr DatumFrame::GetApplication ( );
__declspec(implementation_key(4644)) long DatumFrame::GetIndex ( );
__declspec(implementation_key(4645)) _bstr_t DatumFrame::GetName ( const _variant_t & Recurse );
__declspec(implementation_key(4646)) IDispatchPtr DatumFrame::GetParent ( );
__declspec(implementation_key(4647)) long DatumFrame::GetType ( );
__declspec(implementation_key(4648)) long DatumFrame::GetZOrder ( );
__declspec(implementation_key(4649)) _bstr_t DatumFrame::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(4650)) IDispatchPtr DatumFrame::GetDocument ( );
__declspec(implementation_key(4651)) HRESULT DatumFrame::Copy ( );
__declspec(implementation_key(4652)) HRESULT DatumFrame::Cut ( );
__declspec(implementation_key(4653)) HRESULT DatumFrame::Delete ( );
__declspec(implementation_key(4654)) HRESULT DatumFrame::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(4655)) HRESULT DatumFrame::Scale ( double Factor );
__declspec(implementation_key(4656)) HRESULT DatumFrame::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(4657)) HRESULT DatumFrame::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(4658)) IDispatchPtr DatumFrame::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(4659)) IDispatchPtr DatumFrame::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(4660)) HRESULT DatumFrame::BringToFront ( );
__declspec(implementation_key(4661)) HRESULT DatumFrame::BringForward ( );
__declspec(implementation_key(4662)) HRESULT DatumFrame::SendToBack ( );
__declspec(implementation_key(4663)) HRESULT DatumFrame::SendBackward ( );
__declspec(implementation_key(4664)) HRESULT DatumFrame::Select ( );
__declspec(implementation_key(4665)) double DatumFrame::GetBreakLineDistance ( );
__declspec(implementation_key(4666)) void DatumFrame::PutBreakLineDistance ( double _arg1 );
__declspec(implementation_key(4667)) VARIANT_BOOL DatumFrame::GetBreakLine ( );
__declspec(implementation_key(4668)) void DatumFrame::PutBreakLine ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4669)) VARIANT_BOOL DatumFrame::GetBreakLineDirection ( );
__declspec(implementation_key(4670)) void DatumFrame::PutBreakLineDirection ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4671)) VARIANT_BOOL DatumFrame::GetLeader ( );
__declspec(implementation_key(4672)) void DatumFrame::PutLeader ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4673)) long DatumFrame::GetVertexCount ( );
__declspec(implementation_key(4674)) HRESULT DatumFrame::GetVertices ( long * VertexCount, SAFEARRAY * * Vertices );
__declspec(implementation_key(4675)) HRESULT DatumFrame::SetVertices ( long VertexCount, SAFEARRAY * * Vertices );
__declspec(implementation_key(4676)) HRESULT DatumFrame::GetVertex ( long Index, double * x, double * y, double * z );
__declspec(implementation_key(4677)) HRESULT DatumFrame::SetVertex ( long Index, double x, double y, double z );
__declspec(implementation_key(4678)) HRESULT DatumFrame::InsertVertex ( long Index, double x, double y, double z );
__declspec(implementation_key(4679)) HRESULT DatumFrame::AddVertex ( double x, double y, double z );
__declspec(implementation_key(4680)) HRESULT DatumFrame::RemoveVertex ( long Index );
__declspec(implementation_key(4681)) long DatumFrame::GetKeyPointCount ( );
__declspec(implementation_key(4682)) HRESULT DatumFrame::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(4683)) HRESULT DatumFrame::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(4684)) IDispatchPtr DatumFrame::GetAttributeSets ( );
__declspec(implementation_key(4685)) VARIANT_BOOL DatumFrame::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(4686)) double DatumFrame::GetTextScale ( );
__declspec(implementation_key(4687)) void DatumFrame::PutTextScale ( double _arg1 );
__declspec(implementation_key(4688)) void DatumFrame::PutLayer ( _bstr_t _arg1 );
__declspec(implementation_key(4689)) _bstr_t DatumFrame::GetLayer ( );
__declspec(implementation_key(4690)) IDispatchPtr DatumFrame::GetPMIPlane ( );
__declspec(implementation_key(4691)) double DatumFrame::GetPMITrackDistance ( );
__declspec(implementation_key(4692)) void DatumFrame::PutPMITrackDistance ( double _arg1 );
__declspec(implementation_key(4693)) void DatumFrame::PutHidePMI ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4694)) VARIANT_BOOL DatumFrame::GetHidePMI ( );
__declspec(implementation_key(4695)) DisplayDataPtr DatumFrame::GetDisplayData ( );
__declspec(implementation_key(4696)) HRESULT DatumFrame::PromoteToCurrentVersion ( );
__declspec(implementation_key(4697)) void DatumFrame::PutPMIName ( _bstr_t _arg1 );
__declspec(implementation_key(4698)) _bstr_t DatumFrame::GetPMIName ( );
__declspec(implementation_key(4699)) HRESULT DatumFrame::TransformToModelCoordinates ( double InputX, double InputY, double InputZ, double * ModelX, double * ModelY, double * ModelZ );
__declspec(implementation_key(4700)) VARIANT_BOOL DatumFrame::GetIsTerminatorAttachedToEntity ( );
__declspec(implementation_key(4701)) HRESULT DatumFrame::GetReferencedGeometry ( SAFEARRAY * * ReferencedGeometries );
__declspec(implementation_key(4702)) HRESULT DatumFrame::SetReferencedGeometry ( SAFEARRAY * * ReferencedGeometries );
__declspec(implementation_key(4703)) TGFramework::ApplicationPtr _IDatumFramesAuto::GetApplication ( );
__declspec(implementation_key(4704)) long _IDatumFramesAuto::GetCount ( );
__declspec(implementation_key(4705)) IDispatchPtr _IDatumFramesAuto::GetParent ( );
__declspec(implementation_key(4706)) DatumFramePtr _IDatumFramesAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(4707)) IUnknownPtr _IDatumFramesAuto::Get_NewEnum ( );
__declspec(implementation_key(4708)) void _IDatumFramesAuto::PutPlane ( IDispatch * Plane );
__declspec(implementation_key(4709)) IDispatchPtr _IDatumFramesAuto::GetPlane ( );
__declspec(implementation_key(4710)) void _IDatumFramesAuto::PutStyle ( struct DimensionStyle * Style );
__declspec(implementation_key(4711)) DimensionStylePtr _IDatumFramesAuto::GetStyle ( );
__declspec(implementation_key(4712)) DatumFramePtr _IDatumFramesAuto::Add ( double x1, double y1, double z1 );
__declspec(implementation_key(4713)) DatumFramePtr _IDatumFramesAuto::AddByTerminator ( IDispatch * TerminatorObject, double x1, double y1, double z1, VARIANT_BOOL keyPoint1 );
__declspec(implementation_key(4714)) HRESULT _IDatumFramesAuto::ClearPlane ( );
__declspec(implementation_key(4715)) HRESULT _IDatumFramesAuto::ClearStyle ( );
__declspec(implementation_key(4716)) AnnotInitDataPtr _IDatumFramesAuto::GetAnnotInitData ( );
__declspec(implementation_key(4717)) DatumFramePtr _IDatumFramesAuto::AddDatumFrame ( struct AnnotInitData * AnnotInitData );
__declspec(implementation_key(4718)) DimStylePtr _IDatumFrameAuto::GetStyle ( );
__declspec(implementation_key(4719)) _bstr_t _IDatumFrameAuto::GetDatum ( );
__declspec(implementation_key(4720)) void _IDatumFrameAuto::PutDatum ( _bstr_t Text );
__declspec(implementation_key(4721)) HRESULT _IDatumFrameAuto::SetTerminator ( IDispatch * TerminatorObj, double x, double y, double z, VARIANT_BOOL keyPoint );
__declspec(implementation_key(4722)) HRESULT _IDatumFrameAuto::GetTerminator ( IDispatch * * TerminatorObj, double * x, double * y, double * z, VARIANT_BOOL * keyPoint );
__declspec(implementation_key(4723)) HRESULT _IDatumFrameAuto::SetFreeSpacePoint ( double x, double y, double z );
__declspec(implementation_key(4724)) HRESULT _IDatumFrameAuto::GetFreeSpacePoint ( double * x, double * y, double * z );
__declspec(implementation_key(4725)) IDispatchPtr _IDatumFrameAuto::GetPlane ( );
__declspec(implementation_key(4726)) TGFramework::ApplicationPtr _IDatumFrameAuto::GetApplication ( );
__declspec(implementation_key(4727)) long _IDatumFrameAuto::GetIndex ( );
__declspec(implementation_key(4728)) _bstr_t _IDatumFrameAuto::GetName ( const _variant_t & Recurse, long Lcid );
__declspec(implementation_key(4729)) IDispatchPtr _IDatumFrameAuto::GetParent ( );
__declspec(implementation_key(4730)) long _IDatumFrameAuto::GetType ( );
__declspec(implementation_key(4731)) long _IDatumFrameAuto::GetZOrder ( );
__declspec(implementation_key(4732)) _bstr_t _IDatumFrameAuto::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(4733)) IDispatchPtr _IDatumFrameAuto::GetDocument ( );
__declspec(implementation_key(4734)) HRESULT _IDatumFrameAuto::Copy ( );
__declspec(implementation_key(4735)) HRESULT _IDatumFrameAuto::Cut ( );
__declspec(implementation_key(4736)) HRESULT _IDatumFrameAuto::Delete ( );
__declspec(implementation_key(4737)) HRESULT _IDatumFrameAuto::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(4738)) HRESULT _IDatumFrameAuto::Scale ( double Factor );
__declspec(implementation_key(4739)) HRESULT _IDatumFrameAuto::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(4740)) HRESULT _IDatumFrameAuto::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(4741)) IDispatchPtr _IDatumFrameAuto::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(4742)) IDispatchPtr _IDatumFrameAuto::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(4743)) HRESULT _IDatumFrameAuto::BringToFront ( );
__declspec(implementation_key(4744)) HRESULT _IDatumFrameAuto::BringForward ( );
__declspec(implementation_key(4745)) HRESULT _IDatumFrameAuto::SendToBack ( );
__declspec(implementation_key(4746)) HRESULT _IDatumFrameAuto::SendBackward ( );
__declspec(implementation_key(4747)) HRESULT _IDatumFrameAuto::Select ( );
__declspec(implementation_key(4748)) double _IDatumFrameAuto::GetBreakLineDistance ( );
__declspec(implementation_key(4749)) void _IDatumFrameAuto::PutBreakLineDistance ( double Distance );
__declspec(implementation_key(4750)) VARIANT_BOOL _IDatumFrameAuto::GetBreakLine ( );
__declspec(implementation_key(4751)) void _IDatumFrameAuto::PutBreakLine ( VARIANT_BOOL Flag );
__declspec(implementation_key(4752)) VARIANT_BOOL _IDatumFrameAuto::GetBreakLineDirection ( );
__declspec(implementation_key(4753)) void _IDatumFrameAuto::PutBreakLineDirection ( VARIANT_BOOL Flag );
__declspec(implementation_key(4754)) VARIANT_BOOL _IDatumFrameAuto::GetLeader ( );
__declspec(implementation_key(4755)) void _IDatumFrameAuto::PutLeader ( VARIANT_BOOL Flag );
__declspec(implementation_key(4756)) long _IDatumFrameAuto::GetVertexCount ( );
__declspec(implementation_key(4757)) HRESULT _IDatumFrameAuto::GetVertices ( long * VertexCount, SAFEARRAY * * Vertices );
__declspec(implementation_key(4758)) HRESULT _IDatumFrameAuto::SetVertices ( long VertexCount, SAFEARRAY * * Vertices );
__declspec(implementation_key(4759)) HRESULT _IDatumFrameAuto::GetVertex ( long Index, double * x, double * y, double * z );
__declspec(implementation_key(4760)) HRESULT _IDatumFrameAuto::SetVertex ( long Index, double x, double y, double z );
__declspec(implementation_key(4761)) HRESULT _IDatumFrameAuto::InsertVertex ( long Index, double x, double y, double z );
__declspec(implementation_key(4762)) HRESULT _IDatumFrameAuto::AddVertex ( double x, double y, double z );
__declspec(implementation_key(4763)) HRESULT _IDatumFrameAuto::RemoveVertex ( long Index );
__declspec(implementation_key(4764)) long _IDatumFrameAuto::GetKeyPointCount ( );
__declspec(implementation_key(4765)) HRESULT _IDatumFrameAuto::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(4766)) HRESULT _IDatumFrameAuto::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(4767)) IDispatchPtr _IDatumFrameAuto::GetAttributeSets ( );
__declspec(implementation_key(4768)) VARIANT_BOOL _IDatumFrameAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(4769)) double _IDatumFrameAuto::GetTextScale ( );
__declspec(implementation_key(4770)) void _IDatumFrameAuto::PutTextScale ( double pdAngle );
__declspec(implementation_key(4771)) void _IDatumFrameAuto::PutLayer ( _bstr_t Layer );
__declspec(implementation_key(4772)) _bstr_t _IDatumFrameAuto::GetLayer ( );
__declspec(implementation_key(4773)) IDispatchPtr _IDatumFrameAuto::GetPMIPlane ( );
__declspec(implementation_key(4774)) double _IDatumFrameAuto::GetPMITrackDistance ( );
__declspec(implementation_key(4775)) void _IDatumFrameAuto::PutPMITrackDistance ( double pdPMITrackDistance );
__declspec(implementation_key(4776)) void _IDatumFrameAuto::PutHidePMI ( VARIANT_BOOL Value );
__declspec(implementation_key(4777)) VARIANT_BOOL _IDatumFrameAuto::GetHidePMI ( );
__declspec(implementation_key(4778)) DisplayDataPtr _IDatumFrameAuto::GetDisplayData ( );
__declspec(implementation_key(4779)) HRESULT _IDatumFrameAuto::PromoteToCurrentVersion ( );
__declspec(implementation_key(4780)) void _IDatumFrameAuto::PutPMIName ( _bstr_t Text );
__declspec(implementation_key(4781)) _bstr_t _IDatumFrameAuto::GetPMIName ( );
__declspec(implementation_key(4782)) HRESULT _IDatumFrameAuto::TransformToModelCoordinates ( double InputX, double InputY, double InputZ, double * ModelX, double * ModelY, double * ModelZ );
__declspec(implementation_key(4783)) VARIANT_BOOL _IDatumFrameAuto::GetIsTerminatorAttachedToEntity ( );
__declspec(implementation_key(4784)) HRESULT _IDatumFrameAuto::GetReferencedGeometry ( SAFEARRAY * * ReferencedGeometries );
__declspec(implementation_key(4785)) HRESULT _IDatumFrameAuto::SetReferencedGeometry ( SAFEARRAY * * ReferencedGeometries );
__declspec(implementation_key(4786)) TGFramework::ApplicationPtr FeatureControlFrames::GetApplication ( );
__declspec(implementation_key(4787)) long FeatureControlFrames::GetCount ( );
__declspec(implementation_key(4788)) IDispatchPtr FeatureControlFrames::GetParent ( );
__declspec(implementation_key(4789)) FeatureControlFramePtr FeatureControlFrames::Item ( const _variant_t & Index );
__declspec(implementation_key(4790)) void FeatureControlFrames::PutPlane ( IDispatch * _arg1 );
__declspec(implementation_key(4791)) IDispatchPtr FeatureControlFrames::GetPlane ( );
__declspec(implementation_key(4792)) void FeatureControlFrames::PutStyle ( struct DimensionStyle * _arg1 );
__declspec(implementation_key(4793)) DimensionStylePtr FeatureControlFrames::GetStyle ( );
__declspec(implementation_key(4794)) void FeatureControlFrames::PutDataSet ( struct FeatureControlFrameDataSet * _arg1 );
__declspec(implementation_key(4795)) FeatureControlFrameDataSetPtr FeatureControlFrames::GetDataSet ( );
__declspec(implementation_key(4796)) FeatureControlFramePtr FeatureControlFrames::Add ( double x, double y, double z );
__declspec(implementation_key(4797)) FeatureControlFramePtr FeatureControlFrames::AddByTerminator ( IDispatch * TerminatorObject, double x, double y, double z, VARIANT_BOOL keyPoint );
__declspec(implementation_key(4798)) HRESULT FeatureControlFrames::ClearPlane ( );
__declspec(implementation_key(4799)) HRESULT FeatureControlFrames::ClearStyle ( );
__declspec(implementation_key(4800)) HRESULT FeatureControlFrames::ClearDataSet ( );
__declspec(implementation_key(4801)) AnnotInitDataPtr FeatureControlFrames::GetAnnotInitData ( );
__declspec(implementation_key(4802)) FeatureControlFramePtr FeatureControlFrames::AddFeatureControlFrame ( struct AnnotInitData * AnnotInitData );
__declspec(implementation_key(4803)) DimStylePtr FeatureControlFrame::GetStyle ( );
__declspec(implementation_key(4804)) void FeatureControlFrame::PutBoxAlignment ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4805)) VARIANT_BOOL FeatureControlFrame::GetBoxAlignment ( );
__declspec(implementation_key(4806)) void FeatureControlFrame::PutCompositeFrame ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4807)) VARIANT_BOOL FeatureControlFrame::GetCompositeFrame ( );
__declspec(implementation_key(4808)) HRESULT FeatureControlFrame::SetTerminator ( IDispatch * TerminatorObj, double x, double y, double z, VARIANT_BOOL keyPoint );
__declspec(implementation_key(4809)) HRESULT FeatureControlFrame::GetTerminator ( IDispatch * * TerminatorObj, double * x, double * y, double * z, VARIANT_BOOL * keyPoint );
__declspec(implementation_key(4810)) HRESULT FeatureControlFrame::SetFreeSpacePoint ( double x, double y, double z );
__declspec(implementation_key(4811)) HRESULT FeatureControlFrame::GetFreeSpacePoint ( double * x, double * y, double * z );
__declspec(implementation_key(4812)) IDispatchPtr FeatureControlFrame::GetPlane ( );
__declspec(implementation_key(4813)) void FeatureControlFrame::PutFCFAllAround ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4814)) VARIANT_BOOL FeatureControlFrame::GetFCFAllAround ( );
__declspec(implementation_key(4815)) void FeatureControlFrame::PutPrimaryFrame ( _bstr_t _arg1 );
__declspec(implementation_key(4816)) _bstr_t FeatureControlFrame::GetPrimaryFrame ( );
__declspec(implementation_key(4817)) void FeatureControlFrame::PutSecondaryFrame ( _bstr_t _arg1 );
__declspec(implementation_key(4818)) _bstr_t FeatureControlFrame::GetSecondaryFrame ( );
__declspec(implementation_key(4819)) void FeatureControlFrame::PutProjectedToleranceFrame ( _bstr_t _arg1 );
__declspec(implementation_key(4820)) _bstr_t FeatureControlFrame::GetProjectedToleranceFrame ( );
__declspec(implementation_key(4821)) TGFramework::ApplicationPtr FeatureControlFrame::GetApplication ( );
__declspec(implementation_key(4822)) long FeatureControlFrame::GetIndex ( );
__declspec(implementation_key(4823)) _bstr_t FeatureControlFrame::GetName ( const _variant_t & Recurse );
__declspec(implementation_key(4824)) IDispatchPtr FeatureControlFrame::GetParent ( );
__declspec(implementation_key(4825)) long FeatureControlFrame::GetType ( );
__declspec(implementation_key(4826)) long FeatureControlFrame::GetZOrder ( );
__declspec(implementation_key(4827)) _bstr_t FeatureControlFrame::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(4828)) IDispatchPtr FeatureControlFrame::GetDocument ( );
__declspec(implementation_key(4829)) HRESULT FeatureControlFrame::Copy ( );
__declspec(implementation_key(4830)) HRESULT FeatureControlFrame::Cut ( );
__declspec(implementation_key(4831)) HRESULT FeatureControlFrame::Delete ( );
__declspec(implementation_key(4832)) HRESULT FeatureControlFrame::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(4833)) HRESULT FeatureControlFrame::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(4834)) IDispatchPtr FeatureControlFrame::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(4835)) HRESULT FeatureControlFrame::BringToFront ( );
__declspec(implementation_key(4836)) HRESULT FeatureControlFrame::BringForward ( );
__declspec(implementation_key(4837)) HRESULT FeatureControlFrame::SendToBack ( );
__declspec(implementation_key(4838)) HRESULT FeatureControlFrame::SendBackward ( );
__declspec(implementation_key(4839)) HRESULT FeatureControlFrame::Select ( );
__declspec(implementation_key(4840)) double FeatureControlFrame::GetBreakLineDistance ( );
__declspec(implementation_key(4841)) void FeatureControlFrame::PutBreakLineDistance ( double _arg1 );
__declspec(implementation_key(4842)) VARIANT_BOOL FeatureControlFrame::GetBreakLine ( );
__declspec(implementation_key(4843)) void FeatureControlFrame::PutBreakLine ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4844)) VARIANT_BOOL FeatureControlFrame::GetBreakLineDirection ( );
__declspec(implementation_key(4845)) void FeatureControlFrame::PutBreakLineDirection ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4846)) VARIANT_BOOL FeatureControlFrame::GetLeader ( );
__declspec(implementation_key(4847)) void FeatureControlFrame::PutLeader ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4848)) long FeatureControlFrame::GetVertexCount ( );
__declspec(implementation_key(4849)) HRESULT FeatureControlFrame::GetVertices ( long * VertexCount, SAFEARRAY * * Vertices );
__declspec(implementation_key(4850)) HRESULT FeatureControlFrame::SetVertices ( long VertexCount, SAFEARRAY * * Vertices );
__declspec(implementation_key(4851)) HRESULT FeatureControlFrame::GetVertex ( long Index, double * x, double * y, double * z );
__declspec(implementation_key(4852)) HRESULT FeatureControlFrame::SetVertex ( long Index, double x, double y, double z );
__declspec(implementation_key(4853)) HRESULT FeatureControlFrame::InsertVertex ( long Index, double x, double y, double z );
__declspec(implementation_key(4854)) HRESULT FeatureControlFrame::AddVertex ( double x, double y, double z );
__declspec(implementation_key(4855)) HRESULT FeatureControlFrame::RemoveVertex ( long Index );
__declspec(implementation_key(4856)) long FeatureControlFrame::GetKeyPointCount ( );
__declspec(implementation_key(4857)) HRESULT FeatureControlFrame::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(4858)) HRESULT FeatureControlFrame::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(4859)) double FeatureControlFrame::GetRotationAngle ( );
__declspec(implementation_key(4860)) void FeatureControlFrame::PutRotationAngle ( double _arg1 );
__declspec(implementation_key(4861)) double FeatureControlFrame::GetTextScale ( );
__declspec(implementation_key(4862)) void FeatureControlFrame::PutTextScale ( double _arg1 );
__declspec(implementation_key(4863)) void FeatureControlFrame::PutLayer ( _bstr_t _arg1 );
__declspec(implementation_key(4864)) _bstr_t FeatureControlFrame::GetLayer ( );
__declspec(implementation_key(4865)) IDispatchPtr FeatureControlFrame::GetPMIPlane ( );
__declspec(implementation_key(4866)) double FeatureControlFrame::GetPMITrackDistance ( );
__declspec(implementation_key(4867)) void FeatureControlFrame::PutPMITrackDistance ( double _arg1 );
__declspec(implementation_key(4868)) void FeatureControlFrame::PutHidePMI ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4869)) VARIANT_BOOL FeatureControlFrame::GetHidePMI ( );
__declspec(implementation_key(4870)) void FeatureControlFrame::PutFCFAllOver ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4871)) VARIANT_BOOL FeatureControlFrame::GetFCFAllOver ( );
__declspec(implementation_key(4872)) void FeatureControlFrame::PutTertiaryFrame ( _bstr_t _arg1 );
__declspec(implementation_key(4873)) _bstr_t FeatureControlFrame::GetTertiaryFrame ( );
__declspec(implementation_key(4874)) void FeatureControlFrame::PutQuaternaryFrame ( _bstr_t _arg1 );
__declspec(implementation_key(4875)) _bstr_t FeatureControlFrame::GetQuaternaryFrame ( );
__declspec(implementation_key(4876)) void FeatureControlFrame::PutCompositePrimaryAndSecondaryText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4877)) VARIANT_BOOL FeatureControlFrame::GetCompositePrimaryAndSecondaryText ( );
__declspec(implementation_key(4878)) void FeatureControlFrame::PutCompositeSecondaryAndTertiaryText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4879)) VARIANT_BOOL FeatureControlFrame::GetCompositeSecondaryAndTertiaryText ( );
__declspec(implementation_key(4880)) void FeatureControlFrame::PutCompositeTertiaryAndQuaternaryText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(4881)) VARIANT_BOOL FeatureControlFrame::GetCompositeTertiaryAndQuaternaryText ( );
__declspec(implementation_key(4882)) void FeatureControlFrame::PutOrientation ( enum DimFCFOrientationConstants _arg1 );
__declspec(implementation_key(4883)) enum DimFCFOrientationConstants FeatureControlFrame::GetOrientation ( );
__declspec(implementation_key(4884)) void FeatureControlFrame::PutLeaderTextConnectionPoint ( enum DimFCFLeaderTextConnectionPointConstants _arg1 );
__declspec(implementation_key(4885)) enum DimFCFLeaderTextConnectionPointConstants FeatureControlFrame::GetLeaderTextConnectionPoint ( );
__declspec(implementation_key(4886)) long FeatureControlFrame::GetFCFBorderPointCount ( );
__declspec(implementation_key(4887)) HRESULT FeatureControlFrame::FCFBorderPointAtIndex ( long Index, double * x, double * y, double * z );
__declspec(implementation_key(4888)) DisplayDataPtr FeatureControlFrame::GetDisplayData ( );
__declspec(implementation_key(4889)) HRESULT FeatureControlFrame::PromoteToCurrentVersion ( );
__declspec(implementation_key(4890)) HRESULT FeatureControlFrame::SetAlignmentShape ( IDispatch * AlignmentShapeObj, double x, double y );
__declspec(implementation_key(4891)) HRESULT FeatureControlFrame::GetAlignmentShape ( IDispatch * * AlignmentShapeObj, double * x, double * y );
__declspec(implementation_key(4892)) void FeatureControlFrame::PutPMIName ( _bstr_t _arg1 );
__declspec(implementation_key(4893)) _bstr_t FeatureControlFrame::GetPMIName ( );
__declspec(implementation_key(4894)) HRESULT FeatureControlFrame::TransformToModelCoordinates ( double InputX, double InputY, double InputZ, double * ModelX, double * ModelY, double * ModelZ );
__declspec(implementation_key(4895)) VARIANT_BOOL FeatureControlFrame::GetIsTerminatorAttachedToEntity ( );
__declspec(implementation_key(4896)) HRESULT FeatureControlFrame::GetReferencedGeometry ( SAFEARRAY * * ReferencedGeometries );
__declspec(implementation_key(4897)) HRESULT FeatureControlFrame::SetReferencedGeometry ( SAFEARRAY * * ReferencedGeometries );
__declspec(implementation_key(4898)) HRESULT FeatureControlFrame::GetReferencedObjectInfo ( SAFEARRAY * * ReferencedObjects, SAFEARRAY * * ReferencedObjectTypes );
__declspec(implementation_key(4899)) IDispatchPtr FeatureControlFrame::GetAttributeSets ( );
__declspec(implementation_key(4900)) VARIANT_BOOL FeatureControlFrame::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(4901)) DimStylePtr _IFeatureControlFrameAuto::GetStyle ( );
__declspec(implementation_key(4902)) void _IFeatureControlFrameAuto::PutBoxAlignment ( VARIANT_BOOL Flag );
__declspec(implementation_key(4903)) VARIANT_BOOL _IFeatureControlFrameAuto::GetBoxAlignment ( );
__declspec(implementation_key(4904)) void _IFeatureControlFrameAuto::PutCompositeFrame ( VARIANT_BOOL Flag );
__declspec(implementation_key(4905)) VARIANT_BOOL _IFeatureControlFrameAuto::GetCompositeFrame ( );
__declspec(implementation_key(4906)) HRESULT _IFeatureControlFrameAuto::SetTerminator ( IDispatch * TerminatorObj, double x, double y, double z, VARIANT_BOOL keyPoint );
__declspec(implementation_key(4907)) HRESULT _IFeatureControlFrameAuto::GetTerminator ( IDispatch * * TerminatorObj, double * x, double * y, double * z, VARIANT_BOOL * keyPoint );
__declspec(implementation_key(4908)) HRESULT _IFeatureControlFrameAuto::SetFreeSpacePoint ( double x, double y, double z );
__declspec(implementation_key(4909)) HRESULT _IFeatureControlFrameAuto::GetFreeSpacePoint ( double * x, double * y, double * z );
__declspec(implementation_key(4910)) IDispatchPtr _IFeatureControlFrameAuto::GetPlane ( );
__declspec(implementation_key(4911)) void _IFeatureControlFrameAuto::PutFCFAllAround ( VARIANT_BOOL Flag );
__declspec(implementation_key(4912)) VARIANT_BOOL _IFeatureControlFrameAuto::GetFCFAllAround ( );
__declspec(implementation_key(4913)) void _IFeatureControlFrameAuto::PutPrimaryFrame ( _bstr_t Text );
__declspec(implementation_key(4914)) _bstr_t _IFeatureControlFrameAuto::GetPrimaryFrame ( );
__declspec(implementation_key(4915)) void _IFeatureControlFrameAuto::PutSecondaryFrame ( _bstr_t Text );
__declspec(implementation_key(4916)) _bstr_t _IFeatureControlFrameAuto::GetSecondaryFrame ( );
__declspec(implementation_key(4917)) void _IFeatureControlFrameAuto::PutProjectedToleranceFrame ( _bstr_t Text );
__declspec(implementation_key(4918)) _bstr_t _IFeatureControlFrameAuto::GetProjectedToleranceFrame ( );
__declspec(implementation_key(4919)) TGFramework::ApplicationPtr _IFeatureControlFrameAuto::GetApplication ( );
__declspec(implementation_key(4920)) long _IFeatureControlFrameAuto::GetIndex ( );
__declspec(implementation_key(4921)) _bstr_t _IFeatureControlFrameAuto::GetName ( const _variant_t & Recurse, long Lcid );
__declspec(implementation_key(4922)) IDispatchPtr _IFeatureControlFrameAuto::GetParent ( );
__declspec(implementation_key(4923)) long _IFeatureControlFrameAuto::GetType ( );
__declspec(implementation_key(4924)) long _IFeatureControlFrameAuto::GetZOrder ( );
__declspec(implementation_key(4925)) _bstr_t _IFeatureControlFrameAuto::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(4926)) IDispatchPtr _IFeatureControlFrameAuto::GetDocument ( );
__declspec(implementation_key(4927)) HRESULT _IFeatureControlFrameAuto::Copy ( );
__declspec(implementation_key(4928)) HRESULT _IFeatureControlFrameAuto::Cut ( );
__declspec(implementation_key(4929)) HRESULT _IFeatureControlFrameAuto::Delete ( );
__declspec(implementation_key(4930)) HRESULT _IFeatureControlFrameAuto::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(4931)) HRESULT _IFeatureControlFrameAuto::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(4932)) IDispatchPtr _IFeatureControlFrameAuto::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(4933)) HRESULT _IFeatureControlFrameAuto::BringToFront ( );
__declspec(implementation_key(4934)) HRESULT _IFeatureControlFrameAuto::BringForward ( );
__declspec(implementation_key(4935)) HRESULT _IFeatureControlFrameAuto::SendToBack ( );
__declspec(implementation_key(4936)) HRESULT _IFeatureControlFrameAuto::SendBackward ( );
__declspec(implementation_key(4937)) HRESULT _IFeatureControlFrameAuto::Select ( );
__declspec(implementation_key(4938)) double _IFeatureControlFrameAuto::GetBreakLineDistance ( );
__declspec(implementation_key(4939)) void _IFeatureControlFrameAuto::PutBreakLineDistance ( double Distance );
__declspec(implementation_key(4940)) VARIANT_BOOL _IFeatureControlFrameAuto::GetBreakLine ( );
__declspec(implementation_key(4941)) void _IFeatureControlFrameAuto::PutBreakLine ( VARIANT_BOOL Flag );
__declspec(implementation_key(4942)) VARIANT_BOOL _IFeatureControlFrameAuto::GetBreakLineDirection ( );
__declspec(implementation_key(4943)) void _IFeatureControlFrameAuto::PutBreakLineDirection ( VARIANT_BOOL Flag );
__declspec(implementation_key(4944)) VARIANT_BOOL _IFeatureControlFrameAuto::GetLeader ( );
__declspec(implementation_key(4945)) void _IFeatureControlFrameAuto::PutLeader ( VARIANT_BOOL Flag );
__declspec(implementation_key(4946)) long _IFeatureControlFrameAuto::GetVertexCount ( );
__declspec(implementation_key(4947)) HRESULT _IFeatureControlFrameAuto::GetVertices ( long * VertexCount, SAFEARRAY * * Vertices );
__declspec(implementation_key(4948)) HRESULT _IFeatureControlFrameAuto::SetVertices ( long VertexCount, SAFEARRAY * * Vertices );
__declspec(implementation_key(4949)) HRESULT _IFeatureControlFrameAuto::GetVertex ( long Index, double * x, double * y, double * z );
__declspec(implementation_key(4950)) HRESULT _IFeatureControlFrameAuto::SetVertex ( long Index, double x, double y, double z );
__declspec(implementation_key(4951)) HRESULT _IFeatureControlFrameAuto::InsertVertex ( long Index, double x, double y, double z );
__declspec(implementation_key(4952)) HRESULT _IFeatureControlFrameAuto::AddVertex ( double x, double y, double z );
__declspec(implementation_key(4953)) HRESULT _IFeatureControlFrameAuto::RemoveVertex ( long Index );
__declspec(implementation_key(4954)) long _IFeatureControlFrameAuto::GetKeyPointCount ( );
__declspec(implementation_key(4955)) HRESULT _IFeatureControlFrameAuto::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(4956)) HRESULT _IFeatureControlFrameAuto::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(4957)) double _IFeatureControlFrameAuto::GetRotationAngle ( );
__declspec(implementation_key(4958)) void _IFeatureControlFrameAuto::PutRotationAngle ( double pdAngle );
__declspec(implementation_key(4959)) double _IFeatureControlFrameAuto::GetTextScale ( );
__declspec(implementation_key(4960)) void _IFeatureControlFrameAuto::PutTextScale ( double pdAngle );
__declspec(implementation_key(4961)) void _IFeatureControlFrameAuto::PutLayer ( _bstr_t Layer );
__declspec(implementation_key(4962)) _bstr_t _IFeatureControlFrameAuto::GetLayer ( );
__declspec(implementation_key(4963)) IDispatchPtr _IFeatureControlFrameAuto::GetPMIPlane ( );
__declspec(implementation_key(4964)) double _IFeatureControlFrameAuto::GetPMITrackDistance ( );
__declspec(implementation_key(4965)) void _IFeatureControlFrameAuto::PutPMITrackDistance ( double pdPMITrackDistance );
__declspec(implementation_key(4966)) void _IFeatureControlFrameAuto::PutHidePMI ( VARIANT_BOOL Value );
__declspec(implementation_key(4967)) VARIANT_BOOL _IFeatureControlFrameAuto::GetHidePMI ( );
__declspec(implementation_key(4968)) void _IFeatureControlFrameAuto::PutFCFAllOver ( VARIANT_BOOL Flag );
__declspec(implementation_key(4969)) VARIANT_BOOL _IFeatureControlFrameAuto::GetFCFAllOver ( );
__declspec(implementation_key(4970)) void _IFeatureControlFrameAuto::PutTertiaryFrame ( _bstr_t Text );
__declspec(implementation_key(4971)) _bstr_t _IFeatureControlFrameAuto::GetTertiaryFrame ( );
__declspec(implementation_key(4972)) void _IFeatureControlFrameAuto::PutQuaternaryFrame ( _bstr_t Text );
__declspec(implementation_key(4973)) _bstr_t _IFeatureControlFrameAuto::GetQuaternaryFrame ( );
__declspec(implementation_key(4974)) void _IFeatureControlFrameAuto::PutCompositePrimaryAndSecondaryText ( VARIANT_BOOL Flag );
__declspec(implementation_key(4975)) VARIANT_BOOL _IFeatureControlFrameAuto::GetCompositePrimaryAndSecondaryText ( );
__declspec(implementation_key(4976)) void _IFeatureControlFrameAuto::PutCompositeSecondaryAndTertiaryText ( VARIANT_BOOL Flag );
__declspec(implementation_key(4977)) VARIANT_BOOL _IFeatureControlFrameAuto::GetCompositeSecondaryAndTertiaryText ( );
__declspec(implementation_key(4978)) void _IFeatureControlFrameAuto::PutCompositeTertiaryAndQuaternaryText ( VARIANT_BOOL Flag );
__declspec(implementation_key(4979)) VARIANT_BOOL _IFeatureControlFrameAuto::GetCompositeTertiaryAndQuaternaryText ( );
__declspec(implementation_key(4980)) void _IFeatureControlFrameAuto::PutOrientation ( enum DimFCFOrientationConstants Flag );
__declspec(implementation_key(4981)) enum DimFCFOrientationConstants _IFeatureControlFrameAuto::GetOrientation ( );
__declspec(implementation_key(4982)) void _IFeatureControlFrameAuto::PutLeaderTextConnectionPoint ( enum DimFCFLeaderTextConnectionPointConstants Flag );
__declspec(implementation_key(4983)) enum DimFCFLeaderTextConnectionPointConstants _IFeatureControlFrameAuto::GetLeaderTextConnectionPoint ( );
__declspec(implementation_key(4984)) long _IFeatureControlFrameAuto::GetFCFBorderPointCount ( );
__declspec(implementation_key(4985)) HRESULT _IFeatureControlFrameAuto::FCFBorderPointAtIndex ( long Index, double * x, double * y, double * z );
__declspec(implementation_key(4986)) DisplayDataPtr _IFeatureControlFrameAuto::GetDisplayData ( );
__declspec(implementation_key(4987)) HRESULT _IFeatureControlFrameAuto::PromoteToCurrentVersion ( );
__declspec(implementation_key(4988)) HRESULT _IFeatureControlFrameAuto::SetAlignmentShape ( IDispatch * AlignmentShapeObj, double x, double y );
__declspec(implementation_key(4989)) HRESULT _IFeatureControlFrameAuto::GetAlignmentShape ( IDispatch * * AlignmentShapeObj, double * x, double * y );
__declspec(implementation_key(4990)) void _IFeatureControlFrameAuto::PutPMIName ( _bstr_t Text );
__declspec(implementation_key(4991)) _bstr_t _IFeatureControlFrameAuto::GetPMIName ( );
__declspec(implementation_key(4992)) HRESULT _IFeatureControlFrameAuto::TransformToModelCoordinates ( double InputX, double InputY, double InputZ, double * ModelX, double * ModelY, double * ModelZ );
__declspec(implementation_key(4993)) VARIANT_BOOL _IFeatureControlFrameAuto::GetIsTerminatorAttachedToEntity ( );
__declspec(implementation_key(4994)) HRESULT _IFeatureControlFrameAuto::GetReferencedGeometry ( SAFEARRAY * * ReferencedGeometries );
__declspec(implementation_key(4995)) HRESULT _IFeatureControlFrameAuto::SetReferencedGeometry ( SAFEARRAY * * ReferencedGeometries );
__declspec(implementation_key(4996)) HRESULT _IFeatureControlFrameAuto::GetReferencedObjectInfo ( SAFEARRAY * * ReferencedObjects, SAFEARRAY * * ReferencedObjectTypes );
__declspec(implementation_key(4997)) IDispatchPtr _IFeatureControlFrameAuto::GetAttributeSets ( );
__declspec(implementation_key(4998)) VARIANT_BOOL _IFeatureControlFrameAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(4999)) void FeatureControlFrameDataSet::PutBoxAlignment ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5000)) VARIANT_BOOL FeatureControlFrameDataSet::GetBoxAlignment ( );
__declspec(implementation_key(5001)) void FeatureControlFrameDataSet::PutCompositeFrame ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5002)) VARIANT_BOOL FeatureControlFrameDataSet::GetCompositeFrame ( );
__declspec(implementation_key(5003)) void FeatureControlFrameDataSet::PutFCFAllAround ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5004)) VARIANT_BOOL FeatureControlFrameDataSet::GetFCFAllAround ( );
__declspec(implementation_key(5005)) void FeatureControlFrameDataSet::PutPrimaryFrame ( _bstr_t _arg1 );
__declspec(implementation_key(5006)) _bstr_t FeatureControlFrameDataSet::GetPrimaryFrame ( );
__declspec(implementation_key(5007)) void FeatureControlFrameDataSet::PutSecondaryFrame ( _bstr_t _arg1 );
__declspec(implementation_key(5008)) _bstr_t FeatureControlFrameDataSet::GetSecondaryFrame ( );
__declspec(implementation_key(5009)) void FeatureControlFrameDataSet::PutProjectedToleranceFrame ( _bstr_t _arg1 );
__declspec(implementation_key(5010)) _bstr_t FeatureControlFrameDataSet::GetProjectedToleranceFrame ( );
__declspec(implementation_key(5011)) void FeatureControlFrameDataSet::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(5012)) _bstr_t FeatureControlFrameDataSet::GetName ( );
__declspec(implementation_key(5013)) void FeatureControlFrameDataSet::PutFCFAllOver ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5014)) VARIANT_BOOL FeatureControlFrameDataSet::GetFCFAllOver ( );
__declspec(implementation_key(5015)) void FeatureControlFrameDataSet::PutTertiaryFrame ( _bstr_t _arg1 );
__declspec(implementation_key(5016)) _bstr_t FeatureControlFrameDataSet::GetTertiaryFrame ( );
__declspec(implementation_key(5017)) void FeatureControlFrameDataSet::PutQuaternaryFrame ( _bstr_t _arg1 );
__declspec(implementation_key(5018)) _bstr_t FeatureControlFrameDataSet::GetQuaternaryFrame ( );
__declspec(implementation_key(5019)) void FeatureControlFrameDataSet::PutCompositePrimaryAndSecondaryText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5020)) VARIANT_BOOL FeatureControlFrameDataSet::GetCompositePrimaryAndSecondaryText ( );
__declspec(implementation_key(5021)) void FeatureControlFrameDataSet::PutCompositeSecondaryAndTertiaryText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5022)) VARIANT_BOOL FeatureControlFrameDataSet::GetCompositeSecondaryAndTertiaryText ( );
__declspec(implementation_key(5023)) void FeatureControlFrameDataSet::PutCompositeTertiaryAndQuaternaryText ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5024)) VARIANT_BOOL FeatureControlFrameDataSet::GetCompositeTertiaryAndQuaternaryText ( );
__declspec(implementation_key(5025)) IDispatchPtr FeatureControlFrameDataSet::GetAttributeSets ( );
__declspec(implementation_key(5026)) VARIANT_BOOL FeatureControlFrameDataSet::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(5027)) TGFramework::ApplicationPtr _IFeatureControlFramesAuto::GetApplication ( );
__declspec(implementation_key(5028)) long _IFeatureControlFramesAuto::GetCount ( );
__declspec(implementation_key(5029)) IDispatchPtr _IFeatureControlFramesAuto::GetParent ( );
__declspec(implementation_key(5030)) FeatureControlFramePtr _IFeatureControlFramesAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(5031)) IUnknownPtr _IFeatureControlFramesAuto::Get_NewEnum ( );
__declspec(implementation_key(5032)) void _IFeatureControlFramesAuto::PutPlane ( IDispatch * Plane );
__declspec(implementation_key(5033)) IDispatchPtr _IFeatureControlFramesAuto::GetPlane ( );
__declspec(implementation_key(5034)) void _IFeatureControlFramesAuto::PutStyle ( struct DimensionStyle * Style );
__declspec(implementation_key(5035)) DimensionStylePtr _IFeatureControlFramesAuto::GetStyle ( );
__declspec(implementation_key(5036)) void _IFeatureControlFramesAuto::PutDataSet ( struct FeatureControlFrameDataSet * DataSet );
__declspec(implementation_key(5037)) FeatureControlFrameDataSetPtr _IFeatureControlFramesAuto::GetDataSet ( );
__declspec(implementation_key(5038)) FeatureControlFramePtr _IFeatureControlFramesAuto::Add ( double x, double y, double z );
__declspec(implementation_key(5039)) FeatureControlFramePtr _IFeatureControlFramesAuto::AddByTerminator ( IDispatch * TerminatorObject, double x, double y, double z, VARIANT_BOOL keyPoint );
__declspec(implementation_key(5040)) HRESULT _IFeatureControlFramesAuto::ClearPlane ( );
__declspec(implementation_key(5041)) HRESULT _IFeatureControlFramesAuto::ClearStyle ( );
__declspec(implementation_key(5042)) HRESULT _IFeatureControlFramesAuto::ClearDataSet ( );
__declspec(implementation_key(5043)) AnnotInitDataPtr _IFeatureControlFramesAuto::GetAnnotInitData ( );
__declspec(implementation_key(5044)) FeatureControlFramePtr _IFeatureControlFramesAuto::AddFeatureControlFrame ( struct AnnotInitData * AnnotInitData );
__declspec(implementation_key(5045)) void _IFeatureControlFrameDataSetAuto::PutBoxAlignment ( VARIANT_BOOL Flag );
__declspec(implementation_key(5046)) VARIANT_BOOL _IFeatureControlFrameDataSetAuto::GetBoxAlignment ( );
__declspec(implementation_key(5047)) void _IFeatureControlFrameDataSetAuto::PutCompositeFrame ( VARIANT_BOOL Flag );
__declspec(implementation_key(5048)) VARIANT_BOOL _IFeatureControlFrameDataSetAuto::GetCompositeFrame ( );
__declspec(implementation_key(5049)) void _IFeatureControlFrameDataSetAuto::PutFCFAllAround ( VARIANT_BOOL Flag );
__declspec(implementation_key(5050)) VARIANT_BOOL _IFeatureControlFrameDataSetAuto::GetFCFAllAround ( );
__declspec(implementation_key(5051)) void _IFeatureControlFrameDataSetAuto::PutPrimaryFrame ( _bstr_t Text );
__declspec(implementation_key(5052)) _bstr_t _IFeatureControlFrameDataSetAuto::GetPrimaryFrame ( );
__declspec(implementation_key(5053)) void _IFeatureControlFrameDataSetAuto::PutSecondaryFrame ( _bstr_t Text );
__declspec(implementation_key(5054)) _bstr_t _IFeatureControlFrameDataSetAuto::GetSecondaryFrame ( );
__declspec(implementation_key(5055)) void _IFeatureControlFrameDataSetAuto::PutProjectedToleranceFrame ( _bstr_t Text );
__declspec(implementation_key(5056)) _bstr_t _IFeatureControlFrameDataSetAuto::GetProjectedToleranceFrame ( );
__declspec(implementation_key(5057)) void _IFeatureControlFrameDataSetAuto::PutName ( _bstr_t Name );
__declspec(implementation_key(5058)) _bstr_t _IFeatureControlFrameDataSetAuto::GetName ( );
__declspec(implementation_key(5059)) void _IFeatureControlFrameDataSetAuto::PutFCFAllOver ( VARIANT_BOOL Flag );
__declspec(implementation_key(5060)) VARIANT_BOOL _IFeatureControlFrameDataSetAuto::GetFCFAllOver ( );
__declspec(implementation_key(5061)) void _IFeatureControlFrameDataSetAuto::PutTertiaryFrame ( _bstr_t Text );
__declspec(implementation_key(5062)) _bstr_t _IFeatureControlFrameDataSetAuto::GetTertiaryFrame ( );
__declspec(implementation_key(5063)) void _IFeatureControlFrameDataSetAuto::PutQuaternaryFrame ( _bstr_t Text );
__declspec(implementation_key(5064)) _bstr_t _IFeatureControlFrameDataSetAuto::GetQuaternaryFrame ( );
__declspec(implementation_key(5065)) void _IFeatureControlFrameDataSetAuto::PutCompositePrimaryAndSecondaryText ( VARIANT_BOOL Flag );
__declspec(implementation_key(5066)) VARIANT_BOOL _IFeatureControlFrameDataSetAuto::GetCompositePrimaryAndSecondaryText ( );
__declspec(implementation_key(5067)) void _IFeatureControlFrameDataSetAuto::PutCompositeSecondaryAndTertiaryText ( VARIANT_BOOL Flag );
__declspec(implementation_key(5068)) VARIANT_BOOL _IFeatureControlFrameDataSetAuto::GetCompositeSecondaryAndTertiaryText ( );
__declspec(implementation_key(5069)) void _IFeatureControlFrameDataSetAuto::PutCompositeTertiaryAndQuaternaryText ( VARIANT_BOOL Flag );
__declspec(implementation_key(5070)) VARIANT_BOOL _IFeatureControlFrameDataSetAuto::GetCompositeTertiaryAndQuaternaryText ( );
__declspec(implementation_key(5071)) IDispatchPtr _IFeatureControlFrameDataSetAuto::GetAttributeSets ( );
__declspec(implementation_key(5072)) VARIANT_BOOL _IFeatureControlFrameDataSetAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(5073)) TGFramework::ApplicationPtr SurfaceFinishSymbols::GetApplication ( );
__declspec(implementation_key(5074)) long SurfaceFinishSymbols::GetCount ( );
__declspec(implementation_key(5075)) IDispatchPtr SurfaceFinishSymbols::GetParent ( );
__declspec(implementation_key(5076)) SurfaceFinishSymbolPtr SurfaceFinishSymbols::Item ( const _variant_t & Index );
__declspec(implementation_key(5077)) void SurfaceFinishSymbols::PutPlane ( IDispatch * _arg1 );
__declspec(implementation_key(5078)) IDispatchPtr SurfaceFinishSymbols::GetPlane ( );
__declspec(implementation_key(5079)) void SurfaceFinishSymbols::PutStyle ( struct DimensionStyle * _arg1 );
__declspec(implementation_key(5080)) DimensionStylePtr SurfaceFinishSymbols::GetStyle ( );
__declspec(implementation_key(5081)) void SurfaceFinishSymbols::PutDataSet ( struct SurfaceFinishSymbolDataSet * _arg1 );
__declspec(implementation_key(5082)) SurfaceFinishSymbolPtr SurfaceFinishSymbols::AddByTerminator ( IDispatch * TerminatorObject, double x1, double y1, double z1, VARIANT_BOOL keyPoint1 );
__declspec(implementation_key(5083)) HRESULT SurfaceFinishSymbols::ClearPlane ( );
__declspec(implementation_key(5084)) HRESULT SurfaceFinishSymbols::ClearStyle ( );
__declspec(implementation_key(5085)) HRESULT SurfaceFinishSymbols::ClearDataSet ( );
__declspec(implementation_key(5086)) AnnotInitDataPtr SurfaceFinishSymbols::GetAnnotInitData ( );
__declspec(implementation_key(5087)) SurfaceFinishSymbolPtr SurfaceFinishSymbols::AddSurfaceFinishSymbol ( struct AnnotInitData * AnnotInitData );
__declspec(implementation_key(5088)) DimStylePtr SurfaceFinishSymbol::GetStyle ( );
__declspec(implementation_key(5089)) void SurfaceFinishSymbol::PutSurfaceFinishSymbol ( enum DimSurfTextureSymTypeConstants _arg1 );
__declspec(implementation_key(5090)) enum DimSurfTextureSymTypeConstants SurfaceFinishSymbol::GetSurfaceFinishSymbol ( );
__declspec(implementation_key(5091)) void SurfaceFinishSymbol::PutMachiningAllowance ( _bstr_t _arg1 );
__declspec(implementation_key(5092)) _bstr_t SurfaceFinishSymbol::GetMachiningAllowance ( );
__declspec(implementation_key(5093)) void SurfaceFinishSymbol::PutMinimumRoughnessValue ( _bstr_t _arg1 );
__declspec(implementation_key(5094)) _bstr_t SurfaceFinishSymbol::GetMinimumRoughnessValue ( );
__declspec(implementation_key(5095)) void SurfaceFinishSymbol::PutMaximumRoughnessValue ( _bstr_t _arg1 );
__declspec(implementation_key(5096)) _bstr_t SurfaceFinishSymbol::GetMaximumRoughnessValue ( );
__declspec(implementation_key(5097)) void SurfaceFinishSymbol::PutProductionMethod ( _bstr_t _arg1 );
__declspec(implementation_key(5098)) _bstr_t SurfaceFinishSymbol::GetProductionMethod ( );
__declspec(implementation_key(5099)) void SurfaceFinishSymbol::PutRoughnessWidthCutOff ( _bstr_t _arg1 );
__declspec(implementation_key(5100)) _bstr_t SurfaceFinishSymbol::GetRoughnessWidthCutOff ( );
__declspec(implementation_key(5101)) void SurfaceFinishSymbol::PutSamplingLength ( _bstr_t _arg1 );
__declspec(implementation_key(5102)) _bstr_t SurfaceFinishSymbol::GetSamplingLength ( );
__declspec(implementation_key(5103)) void SurfaceFinishSymbol::PutSurfaceLaySymbol ( enum DimSurfTextureLaySymTypeConstants _arg1 );
__declspec(implementation_key(5104)) enum DimSurfTextureLaySymTypeConstants SurfaceFinishSymbol::GetSurfaceLaySymbol ( );
__declspec(implementation_key(5105)) HRESULT SurfaceFinishSymbol::SetTerminator ( IDispatch * TerminatorObj, double x, double y, double z, VARIANT_BOOL keyPoint );
__declspec(implementation_key(5106)) HRESULT SurfaceFinishSymbol::GetTerminator ( IDispatch * * TerminatorObj, double * x, double * y, double * z, VARIANT_BOOL * keyPoint );
__declspec(implementation_key(5107)) IDispatchPtr SurfaceFinishSymbol::GetPlane ( );
__declspec(implementation_key(5108)) TGFramework::ApplicationPtr SurfaceFinishSymbol::GetApplication ( );
__declspec(implementation_key(5109)) long SurfaceFinishSymbol::GetIndex ( );
__declspec(implementation_key(5110)) _bstr_t SurfaceFinishSymbol::GetName ( const _variant_t & Recurse );
__declspec(implementation_key(5111)) IDispatchPtr SurfaceFinishSymbol::GetParent ( );
__declspec(implementation_key(5112)) long SurfaceFinishSymbol::GetType ( );
__declspec(implementation_key(5113)) long SurfaceFinishSymbol::GetZOrder ( );
__declspec(implementation_key(5114)) _bstr_t SurfaceFinishSymbol::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(5115)) IDispatchPtr SurfaceFinishSymbol::GetDocument ( );
__declspec(implementation_key(5116)) HRESULT SurfaceFinishSymbol::Copy ( );
__declspec(implementation_key(5117)) HRESULT SurfaceFinishSymbol::Cut ( );
__declspec(implementation_key(5118)) HRESULT SurfaceFinishSymbol::Delete ( );
__declspec(implementation_key(5119)) HRESULT SurfaceFinishSymbol::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(5120)) HRESULT SurfaceFinishSymbol::Scale ( double Factor );
__declspec(implementation_key(5121)) HRESULT SurfaceFinishSymbol::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(5122)) HRESULT SurfaceFinishSymbol::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(5123)) IDispatchPtr SurfaceFinishSymbol::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(5124)) IDispatchPtr SurfaceFinishSymbol::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(5125)) HRESULT SurfaceFinishSymbol::BringToFront ( );
__declspec(implementation_key(5126)) HRESULT SurfaceFinishSymbol::BringForward ( );
__declspec(implementation_key(5127)) HRESULT SurfaceFinishSymbol::SendToBack ( );
__declspec(implementation_key(5128)) HRESULT SurfaceFinishSymbol::SendBackward ( );
__declspec(implementation_key(5129)) HRESULT SurfaceFinishSymbol::Select ( );
__declspec(implementation_key(5130)) double SurfaceFinishSymbol::GetBreakLineDistance ( );
__declspec(implementation_key(5131)) void SurfaceFinishSymbol::PutBreakLineDistance ( double _arg1 );
__declspec(implementation_key(5132)) VARIANT_BOOL SurfaceFinishSymbol::GetBreakLine ( );
__declspec(implementation_key(5133)) void SurfaceFinishSymbol::PutBreakLine ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5134)) VARIANT_BOOL SurfaceFinishSymbol::GetBreakLineDirection ( );
__declspec(implementation_key(5135)) void SurfaceFinishSymbol::PutBreakLineDirection ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5136)) VARIANT_BOOL SurfaceFinishSymbol::GetLeader ( );
__declspec(implementation_key(5137)) void SurfaceFinishSymbol::PutLeader ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5138)) long SurfaceFinishSymbol::GetVertexCount ( );
__declspec(implementation_key(5139)) HRESULT SurfaceFinishSymbol::GetVertices ( long * VertexCount, SAFEARRAY * * Vertices );
__declspec(implementation_key(5140)) HRESULT SurfaceFinishSymbol::SetVertices ( long VertexCount, SAFEARRAY * * Vertices );
__declspec(implementation_key(5141)) HRESULT SurfaceFinishSymbol::GetVertex ( long Index, double * x, double * y, double * z );
__declspec(implementation_key(5142)) HRESULT SurfaceFinishSymbol::SetVertex ( long Index, double x, double y, double z );
__declspec(implementation_key(5143)) HRESULT SurfaceFinishSymbol::InsertVertex ( long Index, double x, double y, double z );
__declspec(implementation_key(5144)) HRESULT SurfaceFinishSymbol::AddVertex ( double x, double y, double z );
__declspec(implementation_key(5145)) HRESULT SurfaceFinishSymbol::RemoveVertex ( long Index );
__declspec(implementation_key(5146)) long SurfaceFinishSymbol::GetKeyPointCount ( );
__declspec(implementation_key(5147)) HRESULT SurfaceFinishSymbol::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(5148)) HRESULT SurfaceFinishSymbol::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(5149)) double SurfaceFinishSymbol::GetRotationAngle ( );
__declspec(implementation_key(5150)) void SurfaceFinishSymbol::PutRotationAngle ( double _arg1 );
__declspec(implementation_key(5151)) void SurfaceFinishSymbol::PutAllAround ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5152)) VARIANT_BOOL SurfaceFinishSymbol::GetAllAround ( );
__declspec(implementation_key(5153)) void SurfaceFinishSymbol::PutRoughnessValue ( _bstr_t _arg1 );
__declspec(implementation_key(5154)) _bstr_t SurfaceFinishSymbol::GetRoughnessValue ( );
__declspec(implementation_key(5155)) void SurfaceFinishSymbol::PutRequirements ( _bstr_t _arg1 );
__declspec(implementation_key(5156)) _bstr_t SurfaceFinishSymbol::GetRequirements ( );
__declspec(implementation_key(5157)) double SurfaceFinishSymbol::GetTextScale ( );
__declspec(implementation_key(5158)) void SurfaceFinishSymbol::PutTextScale ( double _arg1 );
__declspec(implementation_key(5159)) void SurfaceFinishSymbol::PutLayer ( _bstr_t _arg1 );
__declspec(implementation_key(5160)) _bstr_t SurfaceFinishSymbol::GetLayer ( );
__declspec(implementation_key(5161)) IDispatchPtr SurfaceFinishSymbol::GetPMIPlane ( );
__declspec(implementation_key(5162)) double SurfaceFinishSymbol::GetPMITrackDistance ( );
__declspec(implementation_key(5163)) void SurfaceFinishSymbol::PutPMITrackDistance ( double _arg1 );
__declspec(implementation_key(5164)) void SurfaceFinishSymbol::PutAllAroundLeaderSymbol ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5165)) VARIANT_BOOL SurfaceFinishSymbol::GetAllAroundLeaderSymbol ( );
__declspec(implementation_key(5166)) void SurfaceFinishSymbol::PutCompressSymbolSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5167)) VARIANT_BOOL SurfaceFinishSymbol::GetCompressSymbolSize ( );
__declspec(implementation_key(5168)) void SurfaceFinishSymbol::PutHidePMI ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5169)) VARIANT_BOOL SurfaceFinishSymbol::GetHidePMI ( );
__declspec(implementation_key(5170)) DisplayDataPtr SurfaceFinishSymbol::GetDisplayData ( );
__declspec(implementation_key(5171)) HRESULT SurfaceFinishSymbol::PromoteToCurrentVersion ( );
__declspec(implementation_key(5172)) HRESULT SurfaceFinishSymbol::SetAlignmentShape ( IDispatch * AlignmentShapeObj, double x, double y );
__declspec(implementation_key(5173)) HRESULT SurfaceFinishSymbol::GetAlignmentShape ( IDispatch * * AlignmentShapeObj, double * x, double * y );
__declspec(implementation_key(5174)) void SurfaceFinishSymbol::PutPMIName ( _bstr_t _arg1 );
__declspec(implementation_key(5175)) _bstr_t SurfaceFinishSymbol::GetPMIName ( );
__declspec(implementation_key(5176)) HRESULT SurfaceFinishSymbol::TransformToModelCoordinates ( double InputX, double InputY, double InputZ, double * ModelX, double * ModelY, double * ModelZ );
__declspec(implementation_key(5177)) VARIANT_BOOL SurfaceFinishSymbol::GetIsTerminatorAttachedToEntity ( );
__declspec(implementation_key(5178)) HRESULT SurfaceFinishSymbol::GetReferencedGeometry ( SAFEARRAY * * ReferencedGeometries );
__declspec(implementation_key(5179)) HRESULT SurfaceFinishSymbol::SetReferencedGeometry ( SAFEARRAY * * ReferencedGeometries );
__declspec(implementation_key(5180)) IDispatchPtr SurfaceFinishSymbol::GetAttributeSets ( );
__declspec(implementation_key(5181)) VARIANT_BOOL SurfaceFinishSymbol::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(5182)) DimStylePtr _ISurfaceFinishSymbolAuto::GetStyle ( );
__declspec(implementation_key(5183)) void _ISurfaceFinishSymbolAuto::PutSurfaceFinishSymbol ( enum DimSurfTextureSymTypeConstants val );
__declspec(implementation_key(5184)) enum DimSurfTextureSymTypeConstants _ISurfaceFinishSymbolAuto::GetSurfaceFinishSymbol ( );
__declspec(implementation_key(5185)) void _ISurfaceFinishSymbolAuto::PutMachiningAllowance ( _bstr_t Text );
__declspec(implementation_key(5186)) _bstr_t _ISurfaceFinishSymbolAuto::GetMachiningAllowance ( );
__declspec(implementation_key(5187)) void _ISurfaceFinishSymbolAuto::PutMinimumRoughnessValue ( _bstr_t Text );
__declspec(implementation_key(5188)) _bstr_t _ISurfaceFinishSymbolAuto::GetMinimumRoughnessValue ( );
__declspec(implementation_key(5189)) void _ISurfaceFinishSymbolAuto::PutMaximumRoughnessValue ( _bstr_t Text );
__declspec(implementation_key(5190)) _bstr_t _ISurfaceFinishSymbolAuto::GetMaximumRoughnessValue ( );
__declspec(implementation_key(5191)) void _ISurfaceFinishSymbolAuto::PutProductionMethod ( _bstr_t Text );
__declspec(implementation_key(5192)) _bstr_t _ISurfaceFinishSymbolAuto::GetProductionMethod ( );
__declspec(implementation_key(5193)) void _ISurfaceFinishSymbolAuto::PutRoughnessWidthCutOff ( _bstr_t Text );
__declspec(implementation_key(5194)) _bstr_t _ISurfaceFinishSymbolAuto::GetRoughnessWidthCutOff ( );
__declspec(implementation_key(5195)) void _ISurfaceFinishSymbolAuto::PutSamplingLength ( _bstr_t Text );
__declspec(implementation_key(5196)) _bstr_t _ISurfaceFinishSymbolAuto::GetSamplingLength ( );
__declspec(implementation_key(5197)) void _ISurfaceFinishSymbolAuto::PutSurfaceLaySymbol ( enum DimSurfTextureLaySymTypeConstants Flag );
__declspec(implementation_key(5198)) enum DimSurfTextureLaySymTypeConstants _ISurfaceFinishSymbolAuto::GetSurfaceLaySymbol ( );
__declspec(implementation_key(5199)) HRESULT _ISurfaceFinishSymbolAuto::SetTerminator ( IDispatch * TerminatorObj, double x, double y, double z, VARIANT_BOOL keyPoint );
__declspec(implementation_key(5200)) HRESULT _ISurfaceFinishSymbolAuto::GetTerminator ( IDispatch * * TerminatorObj, double * x, double * y, double * z, VARIANT_BOOL * keyPoint );
__declspec(implementation_key(5201)) IDispatchPtr _ISurfaceFinishSymbolAuto::GetPlane ( );
__declspec(implementation_key(5202)) TGFramework::ApplicationPtr _ISurfaceFinishSymbolAuto::GetApplication ( );
__declspec(implementation_key(5203)) long _ISurfaceFinishSymbolAuto::GetIndex ( );
__declspec(implementation_key(5204)) _bstr_t _ISurfaceFinishSymbolAuto::GetName ( const _variant_t & Recurse, long Lcid );
__declspec(implementation_key(5205)) IDispatchPtr _ISurfaceFinishSymbolAuto::GetParent ( );
__declspec(implementation_key(5206)) long _ISurfaceFinishSymbolAuto::GetType ( );
__declspec(implementation_key(5207)) long _ISurfaceFinishSymbolAuto::GetZOrder ( );
__declspec(implementation_key(5208)) _bstr_t _ISurfaceFinishSymbolAuto::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(5209)) IDispatchPtr _ISurfaceFinishSymbolAuto::GetDocument ( );
__declspec(implementation_key(5210)) HRESULT _ISurfaceFinishSymbolAuto::Copy ( );
__declspec(implementation_key(5211)) HRESULT _ISurfaceFinishSymbolAuto::Cut ( );
__declspec(implementation_key(5212)) HRESULT _ISurfaceFinishSymbolAuto::Delete ( );
__declspec(implementation_key(5213)) HRESULT _ISurfaceFinishSymbolAuto::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(5214)) HRESULT _ISurfaceFinishSymbolAuto::Scale ( double Factor );
__declspec(implementation_key(5215)) HRESULT _ISurfaceFinishSymbolAuto::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(5216)) HRESULT _ISurfaceFinishSymbolAuto::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(5217)) IDispatchPtr _ISurfaceFinishSymbolAuto::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(5218)) IDispatchPtr _ISurfaceFinishSymbolAuto::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(5219)) HRESULT _ISurfaceFinishSymbolAuto::BringToFront ( );
__declspec(implementation_key(5220)) HRESULT _ISurfaceFinishSymbolAuto::BringForward ( );
__declspec(implementation_key(5221)) HRESULT _ISurfaceFinishSymbolAuto::SendToBack ( );
__declspec(implementation_key(5222)) HRESULT _ISurfaceFinishSymbolAuto::SendBackward ( );
__declspec(implementation_key(5223)) HRESULT _ISurfaceFinishSymbolAuto::Select ( );
__declspec(implementation_key(5224)) double _ISurfaceFinishSymbolAuto::GetBreakLineDistance ( );
__declspec(implementation_key(5225)) void _ISurfaceFinishSymbolAuto::PutBreakLineDistance ( double Distance );
__declspec(implementation_key(5226)) VARIANT_BOOL _ISurfaceFinishSymbolAuto::GetBreakLine ( );
__declspec(implementation_key(5227)) void _ISurfaceFinishSymbolAuto::PutBreakLine ( VARIANT_BOOL Flag );
__declspec(implementation_key(5228)) VARIANT_BOOL _ISurfaceFinishSymbolAuto::GetBreakLineDirection ( );
__declspec(implementation_key(5229)) void _ISurfaceFinishSymbolAuto::PutBreakLineDirection ( VARIANT_BOOL Flag );
__declspec(implementation_key(5230)) VARIANT_BOOL _ISurfaceFinishSymbolAuto::GetLeader ( );
__declspec(implementation_key(5231)) void _ISurfaceFinishSymbolAuto::PutLeader ( VARIANT_BOOL Flag );
__declspec(implementation_key(5232)) long _ISurfaceFinishSymbolAuto::GetVertexCount ( );
__declspec(implementation_key(5233)) HRESULT _ISurfaceFinishSymbolAuto::GetVertices ( long * VertexCount, SAFEARRAY * * Vertices );
__declspec(implementation_key(5234)) HRESULT _ISurfaceFinishSymbolAuto::SetVertices ( long VertexCount, SAFEARRAY * * Vertices );
__declspec(implementation_key(5235)) HRESULT _ISurfaceFinishSymbolAuto::GetVertex ( long Index, double * x, double * y, double * z );
__declspec(implementation_key(5236)) HRESULT _ISurfaceFinishSymbolAuto::SetVertex ( long Index, double x, double y, double z );
__declspec(implementation_key(5237)) HRESULT _ISurfaceFinishSymbolAuto::InsertVertex ( long Index, double x, double y, double z );
__declspec(implementation_key(5238)) HRESULT _ISurfaceFinishSymbolAuto::AddVertex ( double x, double y, double z );
__declspec(implementation_key(5239)) HRESULT _ISurfaceFinishSymbolAuto::RemoveVertex ( long Index );
__declspec(implementation_key(5240)) long _ISurfaceFinishSymbolAuto::GetKeyPointCount ( );
__declspec(implementation_key(5241)) HRESULT _ISurfaceFinishSymbolAuto::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(5242)) HRESULT _ISurfaceFinishSymbolAuto::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(5243)) double _ISurfaceFinishSymbolAuto::GetRotationAngle ( );
__declspec(implementation_key(5244)) void _ISurfaceFinishSymbolAuto::PutRotationAngle ( double pdAngle );
__declspec(implementation_key(5245)) void _ISurfaceFinishSymbolAuto::PutAllAround ( VARIANT_BOOL Flag );
__declspec(implementation_key(5246)) VARIANT_BOOL _ISurfaceFinishSymbolAuto::GetAllAround ( );
__declspec(implementation_key(5247)) void _ISurfaceFinishSymbolAuto::PutRoughnessValue ( _bstr_t Text );
__declspec(implementation_key(5248)) _bstr_t _ISurfaceFinishSymbolAuto::GetRoughnessValue ( );
__declspec(implementation_key(5249)) void _ISurfaceFinishSymbolAuto::PutRequirements ( _bstr_t Text );
__declspec(implementation_key(5250)) _bstr_t _ISurfaceFinishSymbolAuto::GetRequirements ( );
__declspec(implementation_key(5251)) double _ISurfaceFinishSymbolAuto::GetTextScale ( );
__declspec(implementation_key(5252)) void _ISurfaceFinishSymbolAuto::PutTextScale ( double pdAngle );
__declspec(implementation_key(5253)) void _ISurfaceFinishSymbolAuto::PutLayer ( _bstr_t Layer );
__declspec(implementation_key(5254)) _bstr_t _ISurfaceFinishSymbolAuto::GetLayer ( );
__declspec(implementation_key(5255)) IDispatchPtr _ISurfaceFinishSymbolAuto::GetPMIPlane ( );
__declspec(implementation_key(5256)) double _ISurfaceFinishSymbolAuto::GetPMITrackDistance ( );
__declspec(implementation_key(5257)) void _ISurfaceFinishSymbolAuto::PutPMITrackDistance ( double pdPMITrackDistance );
__declspec(implementation_key(5258)) void _ISurfaceFinishSymbolAuto::PutAllAroundLeaderSymbol ( VARIANT_BOOL Flag );
__declspec(implementation_key(5259)) VARIANT_BOOL _ISurfaceFinishSymbolAuto::GetAllAroundLeaderSymbol ( );
__declspec(implementation_key(5260)) void _ISurfaceFinishSymbolAuto::PutCompressSymbolSize ( VARIANT_BOOL Flag );
__declspec(implementation_key(5261)) VARIANT_BOOL _ISurfaceFinishSymbolAuto::GetCompressSymbolSize ( );
__declspec(implementation_key(5262)) void _ISurfaceFinishSymbolAuto::PutHidePMI ( VARIANT_BOOL Value );
__declspec(implementation_key(5263)) VARIANT_BOOL _ISurfaceFinishSymbolAuto::GetHidePMI ( );
__declspec(implementation_key(5264)) DisplayDataPtr _ISurfaceFinishSymbolAuto::GetDisplayData ( );
__declspec(implementation_key(5265)) HRESULT _ISurfaceFinishSymbolAuto::PromoteToCurrentVersion ( );
__declspec(implementation_key(5266)) HRESULT _ISurfaceFinishSymbolAuto::SetAlignmentShape ( IDispatch * AlignmentShapeObj, double x, double y );
__declspec(implementation_key(5267)) HRESULT _ISurfaceFinishSymbolAuto::GetAlignmentShape ( IDispatch * * AlignmentShapeObj, double * x, double * y );
__declspec(implementation_key(5268)) void _ISurfaceFinishSymbolAuto::PutPMIName ( _bstr_t Text );
__declspec(implementation_key(5269)) _bstr_t _ISurfaceFinishSymbolAuto::GetPMIName ( );
__declspec(implementation_key(5270)) HRESULT _ISurfaceFinishSymbolAuto::TransformToModelCoordinates ( double InputX, double InputY, double InputZ, double * ModelX, double * ModelY, double * ModelZ );
__declspec(implementation_key(5271)) VARIANT_BOOL _ISurfaceFinishSymbolAuto::GetIsTerminatorAttachedToEntity ( );
__declspec(implementation_key(5272)) HRESULT _ISurfaceFinishSymbolAuto::GetReferencedGeometry ( SAFEARRAY * * ReferencedGeometries );
__declspec(implementation_key(5273)) HRESULT _ISurfaceFinishSymbolAuto::SetReferencedGeometry ( SAFEARRAY * * ReferencedGeometries );
__declspec(implementation_key(5274)) IDispatchPtr _ISurfaceFinishSymbolAuto::GetAttributeSets ( );
__declspec(implementation_key(5275)) VARIANT_BOOL _ISurfaceFinishSymbolAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(5276)) void SurfaceFinishSymbolDataSet::PutSurfaceFinishSymbol ( enum DimSurfTextureSymTypeConstants _arg1 );
__declspec(implementation_key(5277)) enum DimSurfTextureSymTypeConstants SurfaceFinishSymbolDataSet::GetSurfaceFinishSymbol ( );
__declspec(implementation_key(5278)) void SurfaceFinishSymbolDataSet::PutMachiningAllowance ( _bstr_t _arg1 );
__declspec(implementation_key(5279)) _bstr_t SurfaceFinishSymbolDataSet::GetMachiningAllowance ( );
__declspec(implementation_key(5280)) void SurfaceFinishSymbolDataSet::PutMinimumRoughnessValue ( _bstr_t _arg1 );
__declspec(implementation_key(5281)) _bstr_t SurfaceFinishSymbolDataSet::GetMinimumRoughnessValue ( );
__declspec(implementation_key(5282)) void SurfaceFinishSymbolDataSet::PutMaximumRoughnessValue ( _bstr_t _arg1 );
__declspec(implementation_key(5283)) _bstr_t SurfaceFinishSymbolDataSet::GetMaximumRoughnessValue ( );
__declspec(implementation_key(5284)) void SurfaceFinishSymbolDataSet::PutProductionMethod ( _bstr_t _arg1 );
__declspec(implementation_key(5285)) _bstr_t SurfaceFinishSymbolDataSet::GetProductionMethod ( );
__declspec(implementation_key(5286)) void SurfaceFinishSymbolDataSet::PutRoughnessWidthCutOff ( _bstr_t _arg1 );
__declspec(implementation_key(5287)) _bstr_t SurfaceFinishSymbolDataSet::GetRoughnessWidthCutOff ( );
__declspec(implementation_key(5288)) void SurfaceFinishSymbolDataSet::PutSamplingLength ( _bstr_t _arg1 );
__declspec(implementation_key(5289)) _bstr_t SurfaceFinishSymbolDataSet::GetSamplingLength ( );
__declspec(implementation_key(5290)) void SurfaceFinishSymbolDataSet::PutSurfaceLaySymbol ( enum DimSurfTextureLaySymTypeConstants _arg1 );
__declspec(implementation_key(5291)) enum DimSurfTextureLaySymTypeConstants SurfaceFinishSymbolDataSet::GetSurfaceLaySymbol ( );
__declspec(implementation_key(5292)) void SurfaceFinishSymbolDataSet::PutAllAround ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5293)) VARIANT_BOOL SurfaceFinishSymbolDataSet::GetAllAround ( );
__declspec(implementation_key(5294)) void SurfaceFinishSymbolDataSet::PutRoughnessValue ( _bstr_t _arg1 );
__declspec(implementation_key(5295)) _bstr_t SurfaceFinishSymbolDataSet::GetRoughnessValue ( );
__declspec(implementation_key(5296)) void SurfaceFinishSymbolDataSet::PutRequirements ( _bstr_t _arg1 );
__declspec(implementation_key(5297)) _bstr_t SurfaceFinishSymbolDataSet::GetRequirements ( );
__declspec(implementation_key(5298)) void SurfaceFinishSymbolDataSet::PutAllAroundLeaderSymbol ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5299)) VARIANT_BOOL SurfaceFinishSymbolDataSet::GetAllAroundLeaderSymbol ( );
__declspec(implementation_key(5300)) void SurfaceFinishSymbolDataSet::PutCompressSymbolSize ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5301)) VARIANT_BOOL SurfaceFinishSymbolDataSet::GetCompressSymbolSize ( );
__declspec(implementation_key(5302)) void SurfaceFinishSymbolDataSet::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(5303)) _bstr_t SurfaceFinishSymbolDataSet::GetName ( );
__declspec(implementation_key(5304)) TGFramework::ApplicationPtr _ISurfaceFinishSymbolsAuto::GetApplication ( );
__declspec(implementation_key(5305)) long _ISurfaceFinishSymbolsAuto::GetCount ( );
__declspec(implementation_key(5306)) IDispatchPtr _ISurfaceFinishSymbolsAuto::GetParent ( );
__declspec(implementation_key(5307)) SurfaceFinishSymbolPtr _ISurfaceFinishSymbolsAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(5308)) IUnknownPtr _ISurfaceFinishSymbolsAuto::Get_NewEnum ( );
__declspec(implementation_key(5309)) void _ISurfaceFinishSymbolsAuto::PutPlane ( IDispatch * Plane );
__declspec(implementation_key(5310)) IDispatchPtr _ISurfaceFinishSymbolsAuto::GetPlane ( );
__declspec(implementation_key(5311)) void _ISurfaceFinishSymbolsAuto::PutStyle ( struct DimensionStyle * Style );
__declspec(implementation_key(5312)) DimensionStylePtr _ISurfaceFinishSymbolsAuto::GetStyle ( );
__declspec(implementation_key(5313)) void _ISurfaceFinishSymbolsAuto::PutDataSet ( struct SurfaceFinishSymbolDataSet * _arg1 );
__declspec(implementation_key(5314)) SurfaceFinishSymbolPtr _ISurfaceFinishSymbolsAuto::AddByTerminator ( IDispatch * TerminatorObject, double x1, double y1, double z1, VARIANT_BOOL keyPoint1 );
__declspec(implementation_key(5315)) HRESULT _ISurfaceFinishSymbolsAuto::ClearPlane ( );
__declspec(implementation_key(5316)) HRESULT _ISurfaceFinishSymbolsAuto::ClearStyle ( );
__declspec(implementation_key(5317)) HRESULT _ISurfaceFinishSymbolsAuto::ClearDataSet ( );
__declspec(implementation_key(5318)) AnnotInitDataPtr _ISurfaceFinishSymbolsAuto::GetAnnotInitData ( );
__declspec(implementation_key(5319)) SurfaceFinishSymbolPtr _ISurfaceFinishSymbolsAuto::AddSurfaceFinishSymbol ( struct AnnotInitData * AnnotInitData );
__declspec(implementation_key(5320)) void _ISurfaceFinishSymbolDataSetAuto::PutSurfaceFinishSymbol ( enum DimSurfTextureSymTypeConstants val );
__declspec(implementation_key(5321)) enum DimSurfTextureSymTypeConstants _ISurfaceFinishSymbolDataSetAuto::GetSurfaceFinishSymbol ( );
__declspec(implementation_key(5322)) void _ISurfaceFinishSymbolDataSetAuto::PutMachiningAllowance ( _bstr_t Text );
__declspec(implementation_key(5323)) _bstr_t _ISurfaceFinishSymbolDataSetAuto::GetMachiningAllowance ( );
__declspec(implementation_key(5324)) void _ISurfaceFinishSymbolDataSetAuto::PutMinimumRoughnessValue ( _bstr_t Text );
__declspec(implementation_key(5325)) _bstr_t _ISurfaceFinishSymbolDataSetAuto::GetMinimumRoughnessValue ( );
__declspec(implementation_key(5326)) void _ISurfaceFinishSymbolDataSetAuto::PutMaximumRoughnessValue ( _bstr_t Text );
__declspec(implementation_key(5327)) _bstr_t _ISurfaceFinishSymbolDataSetAuto::GetMaximumRoughnessValue ( );
__declspec(implementation_key(5328)) void _ISurfaceFinishSymbolDataSetAuto::PutProductionMethod ( _bstr_t Text );
__declspec(implementation_key(5329)) _bstr_t _ISurfaceFinishSymbolDataSetAuto::GetProductionMethod ( );
__declspec(implementation_key(5330)) void _ISurfaceFinishSymbolDataSetAuto::PutRoughnessWidthCutOff ( _bstr_t Text );
__declspec(implementation_key(5331)) _bstr_t _ISurfaceFinishSymbolDataSetAuto::GetRoughnessWidthCutOff ( );
__declspec(implementation_key(5332)) void _ISurfaceFinishSymbolDataSetAuto::PutSamplingLength ( _bstr_t Text );
__declspec(implementation_key(5333)) _bstr_t _ISurfaceFinishSymbolDataSetAuto::GetSamplingLength ( );
__declspec(implementation_key(5334)) void _ISurfaceFinishSymbolDataSetAuto::PutSurfaceLaySymbol ( enum DimSurfTextureLaySymTypeConstants Flag );
__declspec(implementation_key(5335)) enum DimSurfTextureLaySymTypeConstants _ISurfaceFinishSymbolDataSetAuto::GetSurfaceLaySymbol ( );
__declspec(implementation_key(5336)) void _ISurfaceFinishSymbolDataSetAuto::PutAllAround ( VARIANT_BOOL Flag );
__declspec(implementation_key(5337)) VARIANT_BOOL _ISurfaceFinishSymbolDataSetAuto::GetAllAround ( );
__declspec(implementation_key(5338)) void _ISurfaceFinishSymbolDataSetAuto::PutRoughnessValue ( _bstr_t Text );
__declspec(implementation_key(5339)) _bstr_t _ISurfaceFinishSymbolDataSetAuto::GetRoughnessValue ( );
__declspec(implementation_key(5340)) void _ISurfaceFinishSymbolDataSetAuto::PutRequirements ( _bstr_t Text );
__declspec(implementation_key(5341)) _bstr_t _ISurfaceFinishSymbolDataSetAuto::GetRequirements ( );
__declspec(implementation_key(5342)) void _ISurfaceFinishSymbolDataSetAuto::PutAllAroundLeaderSymbol ( VARIANT_BOOL Flag );
__declspec(implementation_key(5343)) VARIANT_BOOL _ISurfaceFinishSymbolDataSetAuto::GetAllAroundLeaderSymbol ( );
__declspec(implementation_key(5344)) void _ISurfaceFinishSymbolDataSetAuto::PutCompressSymbolSize ( VARIANT_BOOL Flag );
__declspec(implementation_key(5345)) VARIANT_BOOL _ISurfaceFinishSymbolDataSetAuto::GetCompressSymbolSize ( );
__declspec(implementation_key(5346)) void _ISurfaceFinishSymbolDataSetAuto::PutName ( _bstr_t Name );
__declspec(implementation_key(5347)) _bstr_t _ISurfaceFinishSymbolDataSetAuto::GetName ( );
__declspec(implementation_key(5348)) TGFramework::ApplicationPtr WeldSymbols::GetApplication ( );
__declspec(implementation_key(5349)) long WeldSymbols::GetCount ( );
__declspec(implementation_key(5350)) IDispatchPtr WeldSymbols::GetParent ( );
__declspec(implementation_key(5351)) WeldSymbolPtr WeldSymbols::Item ( const _variant_t & Index );
__declspec(implementation_key(5352)) void WeldSymbols::PutPlane ( IDispatch * _arg1 );
__declspec(implementation_key(5353)) IDispatchPtr WeldSymbols::GetPlane ( );
__declspec(implementation_key(5354)) void WeldSymbols::PutStyle ( struct DimensionStyle * _arg1 );
__declspec(implementation_key(5355)) DimensionStylePtr WeldSymbols::GetStyle ( );
__declspec(implementation_key(5356)) void WeldSymbols::PutDataSet ( struct WeldSymbolDataSet * _arg1 );
__declspec(implementation_key(5357)) WeldSymbolPtr WeldSymbols::Add ( double x1, double y1, double z1 );
__declspec(implementation_key(5358)) WeldSymbolPtr WeldSymbols::AddByTerminator ( IDispatch * TerminatorObject, double x1, double y1, double z1, VARIANT_BOOL keyPoint1 );
__declspec(implementation_key(5359)) HRESULT WeldSymbols::ClearPlane ( );
__declspec(implementation_key(5360)) HRESULT WeldSymbols::ClearStyle ( );
__declspec(implementation_key(5361)) HRESULT WeldSymbols::ClearDataSet ( );
__declspec(implementation_key(5362)) AnnotInitDataPtr WeldSymbols::GetAnnotInitData ( );
__declspec(implementation_key(5363)) WeldSymbolPtr WeldSymbols::AddWeldSymbol ( struct AnnotInitData * AnnotInitData );
__declspec(implementation_key(5364)) DimStylePtr WeldSymbol::GetStyle ( );
__declspec(implementation_key(5365)) void WeldSymbol::PutZSymbol ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5366)) VARIANT_BOOL WeldSymbol::GetZSymbol ( );
__declspec(implementation_key(5367)) void WeldSymbol::PutTail ( enum DimWeldTailTypeConstants _arg1 );
__declspec(implementation_key(5368)) enum DimWeldTailTypeConstants WeldSymbol::GetTail ( );
__declspec(implementation_key(5369)) void WeldSymbol::PutDashLine ( enum DimWeldDashLineTypeConstants _arg1 );
__declspec(implementation_key(5370)) enum DimWeldDashLineTypeConstants WeldSymbol::GetDashLine ( );
__declspec(implementation_key(5371)) void WeldSymbol::PutWeldInField ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5372)) VARIANT_BOOL WeldSymbol::GetWeldInField ( );
__declspec(implementation_key(5373)) void WeldSymbol::PutOffsetTopBottom ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5374)) VARIANT_BOOL WeldSymbol::GetOffsetTopBottom ( );
__declspec(implementation_key(5375)) void WeldSymbol::PutWeldAllAround ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5376)) VARIANT_BOOL WeldSymbol::GetWeldAllAround ( );
__declspec(implementation_key(5377)) void WeldSymbol::PutSymmetrical ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5378)) VARIANT_BOOL WeldSymbol::GetSymmetrical ( );
__declspec(implementation_key(5379)) void WeldSymbol::PutTopNote1 ( _bstr_t _arg1 );
__declspec(implementation_key(5380)) _bstr_t WeldSymbol::GetTopNote1 ( );
__declspec(implementation_key(5381)) void WeldSymbol::PutTopNote2 ( _bstr_t _arg1 );
__declspec(implementation_key(5382)) _bstr_t WeldSymbol::GetTopNote2 ( );
__declspec(implementation_key(5383)) void WeldSymbol::PutTopTreatmentType ( enum DimWeldTreatmentTypeConstants _arg1 );
__declspec(implementation_key(5384)) enum DimWeldTreatmentTypeConstants WeldSymbol::GetTopTreatmentType ( );
__declspec(implementation_key(5385)) void WeldSymbol::PutTopType ( enum DimWeldTypeConstants _arg1 );
__declspec(implementation_key(5386)) enum DimWeldTypeConstants WeldSymbol::GetTopType ( );
__declspec(implementation_key(5387)) void WeldSymbol::PutTopNote3 ( _bstr_t _arg1 );
__declspec(implementation_key(5388)) _bstr_t WeldSymbol::GetTopNote3 ( );
__declspec(implementation_key(5389)) void WeldSymbol::PutTopNoteZ ( _bstr_t _arg1 );
__declspec(implementation_key(5390)) _bstr_t WeldSymbol::GetTopNoteZ ( );
__declspec(implementation_key(5391)) void WeldSymbol::PutTailNote ( _bstr_t _arg1 );
__declspec(implementation_key(5392)) _bstr_t WeldSymbol::GetTailNote ( );
__declspec(implementation_key(5393)) void WeldSymbol::PutBottomNote1 ( _bstr_t _arg1 );
__declspec(implementation_key(5394)) _bstr_t WeldSymbol::GetBottomNote1 ( );
__declspec(implementation_key(5395)) void WeldSymbol::PutBottomNote2 ( _bstr_t _arg1 );
__declspec(implementation_key(5396)) _bstr_t WeldSymbol::GetBottomNote2 ( );
__declspec(implementation_key(5397)) void WeldSymbol::PutBottomTreatmentType ( enum DimWeldTreatmentTypeConstants _arg1 );
__declspec(implementation_key(5398)) enum DimWeldTreatmentTypeConstants WeldSymbol::GetBottomTreatmentType ( );
__declspec(implementation_key(5399)) void WeldSymbol::PutBottomType ( enum DimWeldTypeConstants _arg1 );
__declspec(implementation_key(5400)) enum DimWeldTypeConstants WeldSymbol::GetBottomType ( );
__declspec(implementation_key(5401)) void WeldSymbol::PutBottomNote3 ( _bstr_t _arg1 );
__declspec(implementation_key(5402)) _bstr_t WeldSymbol::GetBottomNote3 ( );
__declspec(implementation_key(5403)) void WeldSymbol::PutBottomNoteZ ( _bstr_t _arg1 );
__declspec(implementation_key(5404)) _bstr_t WeldSymbol::GetBottomNoteZ ( );
__declspec(implementation_key(5405)) HRESULT WeldSymbol::SetTerminator ( IDispatch * TerminatorObj, double x, double y, double z, VARIANT_BOOL keyPoint );
__declspec(implementation_key(5406)) HRESULT WeldSymbol::GetTerminator ( IDispatch * * TerminatorObj, double * x, double * y, double * z, VARIANT_BOOL * keyPoint );
__declspec(implementation_key(5407)) HRESULT WeldSymbol::SetFreeSpacePoint ( double x, double y, double z );
__declspec(implementation_key(5408)) HRESULT WeldSymbol::GetFreeSpacePoint ( double * x, double * y, double * z );
__declspec(implementation_key(5409)) IDispatchPtr WeldSymbol::GetPlane ( );
__declspec(implementation_key(5410)) TGFramework::ApplicationPtr WeldSymbol::GetApplication ( );
__declspec(implementation_key(5411)) long WeldSymbol::GetIndex ( );
__declspec(implementation_key(5412)) _bstr_t WeldSymbol::GetName ( const _variant_t & Recurse );
__declspec(implementation_key(5413)) IDispatchPtr WeldSymbol::GetParent ( );
__declspec(implementation_key(5414)) long WeldSymbol::GetType ( );
__declspec(implementation_key(5415)) long WeldSymbol::GetZOrder ( );
__declspec(implementation_key(5416)) _bstr_t WeldSymbol::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(5417)) IDispatchPtr WeldSymbol::GetDocument ( );
__declspec(implementation_key(5418)) HRESULT WeldSymbol::Copy ( );
__declspec(implementation_key(5419)) HRESULT WeldSymbol::Cut ( );
__declspec(implementation_key(5420)) HRESULT WeldSymbol::Delete ( );
__declspec(implementation_key(5421)) HRESULT WeldSymbol::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(5422)) HRESULT WeldSymbol::Scale ( double Factor );
__declspec(implementation_key(5423)) HRESULT WeldSymbol::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(5424)) HRESULT WeldSymbol::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(5425)) IDispatchPtr WeldSymbol::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(5426)) IDispatchPtr WeldSymbol::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(5427)) HRESULT WeldSymbol::BringToFront ( );
__declspec(implementation_key(5428)) HRESULT WeldSymbol::BringForward ( );
__declspec(implementation_key(5429)) HRESULT WeldSymbol::SendToBack ( );
__declspec(implementation_key(5430)) HRESULT WeldSymbol::SendBackward ( );
__declspec(implementation_key(5431)) HRESULT WeldSymbol::Select ( );
__declspec(implementation_key(5432)) double WeldSymbol::GetBreakLineDistance ( );
__declspec(implementation_key(5433)) void WeldSymbol::PutBreakLineDistance ( double _arg1 );
__declspec(implementation_key(5434)) VARIANT_BOOL WeldSymbol::GetBreakLine ( );
__declspec(implementation_key(5435)) void WeldSymbol::PutBreakLine ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5436)) VARIANT_BOOL WeldSymbol::GetBreakLineDirection ( );
__declspec(implementation_key(5437)) void WeldSymbol::PutBreakLineDirection ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5438)) VARIANT_BOOL WeldSymbol::GetLeader ( );
__declspec(implementation_key(5439)) void WeldSymbol::PutLeader ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5440)) long WeldSymbol::GetVertexCount ( );
__declspec(implementation_key(5441)) HRESULT WeldSymbol::GetVertices ( long * VertexCount, SAFEARRAY * * Vertices );
__declspec(implementation_key(5442)) HRESULT WeldSymbol::SetVertices ( long VertexCount, SAFEARRAY * * Vertices );
__declspec(implementation_key(5443)) HRESULT WeldSymbol::GetVertex ( long Index, double * x, double * y, double * z );
__declspec(implementation_key(5444)) HRESULT WeldSymbol::SetVertex ( long Index, double x, double y, double z );
__declspec(implementation_key(5445)) HRESULT WeldSymbol::InsertVertex ( long Index, double x, double y, double z );
__declspec(implementation_key(5446)) HRESULT WeldSymbol::AddVertex ( double x, double y, double z );
__declspec(implementation_key(5447)) HRESULT WeldSymbol::RemoveVertex ( long Index );
__declspec(implementation_key(5448)) long WeldSymbol::GetKeyPointCount ( );
__declspec(implementation_key(5449)) HRESULT WeldSymbol::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(5450)) HRESULT WeldSymbol::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(5451)) double WeldSymbol::GetRotationAngle ( );
__declspec(implementation_key(5452)) void WeldSymbol::PutRotationAngle ( double _arg1 );
__declspec(implementation_key(5453)) IDispatchPtr WeldSymbol::GetAttributeSets ( );
__declspec(implementation_key(5454)) VARIANT_BOOL WeldSymbol::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(5455)) void WeldSymbol::PutTailNote2 ( _bstr_t _arg1 );
__declspec(implementation_key(5456)) _bstr_t WeldSymbol::GetTailNote2 ( );
__declspec(implementation_key(5457)) void WeldSymbol::PutTopNoteCSize ( _bstr_t _arg1 );
__declspec(implementation_key(5458)) _bstr_t WeldSymbol::GetTopNoteCSize ( );
__declspec(implementation_key(5459)) void WeldSymbol::PutBottomNoteCSize ( _bstr_t _arg1 );
__declspec(implementation_key(5460)) _bstr_t WeldSymbol::GetBottomNoteCSize ( );
__declspec(implementation_key(5461)) void WeldSymbol::PutTopNoteAngle ( _bstr_t _arg1 );
__declspec(implementation_key(5462)) _bstr_t WeldSymbol::GetTopNoteAngle ( );
__declspec(implementation_key(5463)) void WeldSymbol::PutBottomNoteAngle ( _bstr_t _arg1 );
__declspec(implementation_key(5464)) _bstr_t WeldSymbol::GetBottomNoteAngle ( );
__declspec(implementation_key(5465)) void WeldSymbol::PutTopNoteDepth ( _bstr_t _arg1 );
__declspec(implementation_key(5466)) _bstr_t WeldSymbol::GetTopNoteDepth ( );
__declspec(implementation_key(5467)) void WeldSymbol::PutBottomNoteDepth ( _bstr_t _arg1 );
__declspec(implementation_key(5468)) _bstr_t WeldSymbol::GetBottomNoteDepth ( );
__declspec(implementation_key(5469)) void WeldSymbol::PutTopPosOffset ( int _arg1 );
__declspec(implementation_key(5470)) int WeldSymbol::GetTopPosOffset ( );
__declspec(implementation_key(5471)) void WeldSymbol::PutBottomPosOffset ( int _arg1 );
__declspec(implementation_key(5472)) int WeldSymbol::GetBottomPosOffset ( );
__declspec(implementation_key(5473)) double WeldSymbol::GetTextScale ( );
__declspec(implementation_key(5474)) void WeldSymbol::PutTextScale ( double _arg1 );
__declspec(implementation_key(5475)) void WeldSymbol::PutLayer ( _bstr_t _arg1 );
__declspec(implementation_key(5476)) _bstr_t WeldSymbol::GetLayer ( );
__declspec(implementation_key(5477)) IDispatchPtr WeldSymbol::GetPMIPlane ( );
__declspec(implementation_key(5478)) double WeldSymbol::GetPMITrackDistance ( );
__declspec(implementation_key(5479)) void WeldSymbol::PutPMITrackDistance ( double _arg1 );
__declspec(implementation_key(5480)) void WeldSymbol::PutHidePMI ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5481)) VARIANT_BOOL WeldSymbol::GetHidePMI ( );
__declspec(implementation_key(5482)) void WeldSymbol::PutTopWeldModifier ( enum DimWeldModifierConstants _arg1 );
__declspec(implementation_key(5483)) enum DimWeldModifierConstants WeldSymbol::GetTopWeldModifier ( );
__declspec(implementation_key(5484)) void WeldSymbol::PutBottomWeldModifier ( enum DimWeldModifierConstants _arg1 );
__declspec(implementation_key(5485)) enum DimWeldModifierConstants WeldSymbol::GetBottomWeldModifier ( );
__declspec(implementation_key(5486)) DisplayDataPtr WeldSymbol::GetDisplayData ( );
__declspec(implementation_key(5487)) HRESULT WeldSymbol::PromoteToCurrentVersion ( );
__declspec(implementation_key(5488)) HRESULT WeldSymbol::SetAlignmentShape ( IDispatch * AlignmentShapeObj, double x, double y );
__declspec(implementation_key(5489)) HRESULT WeldSymbol::GetAlignmentShape ( IDispatch * * AlignmentShapeObj, double * x, double * y );
__declspec(implementation_key(5490)) void WeldSymbol::PutPMIName ( _bstr_t _arg1 );
__declspec(implementation_key(5491)) _bstr_t WeldSymbol::GetPMIName ( );
__declspec(implementation_key(5492)) void WeldSymbol::PutWeldInFieldFlagDirection ( enum WeldSymbolFlagDirectionConstants _arg1 );
__declspec(implementation_key(5493)) enum WeldSymbolFlagDirectionConstants WeldSymbol::GetWeldInFieldFlagDirection ( );
__declspec(implementation_key(5494)) HRESULT WeldSymbol::TransformToModelCoordinates ( double InputX, double InputY, double InputZ, double * ModelX, double * ModelY, double * ModelZ );
__declspec(implementation_key(5495)) void WeldSymbol::PutCenterType ( enum DimWeldTypeConstants _arg1 );
__declspec(implementation_key(5496)) enum DimWeldTypeConstants WeldSymbol::GetCenterType ( );
__declspec(implementation_key(5497)) HRESULT WeldSymbol::SetCenterTreatmentTypes ( enum DimWeldTreatmentTypeConstants AboveType, enum DimWeldTreatmentTypeConstants BelowType );
__declspec(implementation_key(5498)) HRESULT WeldSymbol::GetCenterTreatmentTypes ( enum DimWeldTreatmentTypeConstants * AboveType, enum DimWeldTreatmentTypeConstants * BelowType );
__declspec(implementation_key(5499)) VARIANT_BOOL WeldSymbol::GetIsTerminatorAttachedToEntity ( );
__declspec(implementation_key(5500)) HRESULT WeldSymbol::GetReferencedGeometry ( SAFEARRAY * * ReferencedGeometries );
__declspec(implementation_key(5501)) HRESULT WeldSymbol::SetReferencedGeometry ( SAFEARRAY * * ReferencedGeometries );
__declspec(implementation_key(5502)) DimStylePtr _IWeldSymbolAuto::GetStyle ( );
__declspec(implementation_key(5503)) void _IWeldSymbolAuto::PutZSymbol ( VARIANT_BOOL Flag );
__declspec(implementation_key(5504)) VARIANT_BOOL _IWeldSymbolAuto::GetZSymbol ( );
__declspec(implementation_key(5505)) void _IWeldSymbolAuto::PutTail ( enum DimWeldTailTypeConstants pVal );
__declspec(implementation_key(5506)) enum DimWeldTailTypeConstants _IWeldSymbolAuto::GetTail ( );
__declspec(implementation_key(5507)) void _IWeldSymbolAuto::PutDashLine ( enum DimWeldDashLineTypeConstants pVal );
__declspec(implementation_key(5508)) enum DimWeldDashLineTypeConstants _IWeldSymbolAuto::GetDashLine ( );
__declspec(implementation_key(5509)) void _IWeldSymbolAuto::PutWeldInField ( VARIANT_BOOL Flag );
__declspec(implementation_key(5510)) VARIANT_BOOL _IWeldSymbolAuto::GetWeldInField ( );
__declspec(implementation_key(5511)) void _IWeldSymbolAuto::PutOffsetTopBottom ( VARIANT_BOOL Flag );
__declspec(implementation_key(5512)) VARIANT_BOOL _IWeldSymbolAuto::GetOffsetTopBottom ( );
__declspec(implementation_key(5513)) void _IWeldSymbolAuto::PutWeldAllAround ( VARIANT_BOOL Flag );
__declspec(implementation_key(5514)) VARIANT_BOOL _IWeldSymbolAuto::GetWeldAllAround ( );
__declspec(implementation_key(5515)) void _IWeldSymbolAuto::PutSymmetrical ( VARIANT_BOOL Flag );
__declspec(implementation_key(5516)) VARIANT_BOOL _IWeldSymbolAuto::GetSymmetrical ( );
__declspec(implementation_key(5517)) void _IWeldSymbolAuto::PutTopNote1 ( _bstr_t Text );
__declspec(implementation_key(5518)) _bstr_t _IWeldSymbolAuto::GetTopNote1 ( );
__declspec(implementation_key(5519)) void _IWeldSymbolAuto::PutTopNote2 ( _bstr_t Text );
__declspec(implementation_key(5520)) _bstr_t _IWeldSymbolAuto::GetTopNote2 ( );
__declspec(implementation_key(5521)) void _IWeldSymbolAuto::PutTopTreatmentType ( enum DimWeldTreatmentTypeConstants Type );
__declspec(implementation_key(5522)) enum DimWeldTreatmentTypeConstants _IWeldSymbolAuto::GetTopTreatmentType ( );
__declspec(implementation_key(5523)) void _IWeldSymbolAuto::PutTopType ( enum DimWeldTypeConstants Type );
__declspec(implementation_key(5524)) enum DimWeldTypeConstants _IWeldSymbolAuto::GetTopType ( );
__declspec(implementation_key(5525)) void _IWeldSymbolAuto::PutTopNote3 ( _bstr_t Text );
__declspec(implementation_key(5526)) _bstr_t _IWeldSymbolAuto::GetTopNote3 ( );
__declspec(implementation_key(5527)) void _IWeldSymbolAuto::PutTopNoteZ ( _bstr_t Text );
__declspec(implementation_key(5528)) _bstr_t _IWeldSymbolAuto::GetTopNoteZ ( );
__declspec(implementation_key(5529)) void _IWeldSymbolAuto::PutTailNote ( _bstr_t Text );
__declspec(implementation_key(5530)) _bstr_t _IWeldSymbolAuto::GetTailNote ( );
__declspec(implementation_key(5531)) void _IWeldSymbolAuto::PutBottomNote1 ( _bstr_t Text );
__declspec(implementation_key(5532)) _bstr_t _IWeldSymbolAuto::GetBottomNote1 ( );
__declspec(implementation_key(5533)) void _IWeldSymbolAuto::PutBottomNote2 ( _bstr_t Text );
__declspec(implementation_key(5534)) _bstr_t _IWeldSymbolAuto::GetBottomNote2 ( );
__declspec(implementation_key(5535)) void _IWeldSymbolAuto::PutBottomTreatmentType ( enum DimWeldTreatmentTypeConstants Type );
__declspec(implementation_key(5536)) enum DimWeldTreatmentTypeConstants _IWeldSymbolAuto::GetBottomTreatmentType ( );
__declspec(implementation_key(5537)) void _IWeldSymbolAuto::PutBottomType ( enum DimWeldTypeConstants Type );
__declspec(implementation_key(5538)) enum DimWeldTypeConstants _IWeldSymbolAuto::GetBottomType ( );
__declspec(implementation_key(5539)) void _IWeldSymbolAuto::PutBottomNote3 ( _bstr_t Text );
__declspec(implementation_key(5540)) _bstr_t _IWeldSymbolAuto::GetBottomNote3 ( );
__declspec(implementation_key(5541)) void _IWeldSymbolAuto::PutBottomNoteZ ( _bstr_t Text );
__declspec(implementation_key(5542)) _bstr_t _IWeldSymbolAuto::GetBottomNoteZ ( );
__declspec(implementation_key(5543)) HRESULT _IWeldSymbolAuto::SetTerminator ( IDispatch * TerminatorObj, double x, double y, double z, VARIANT_BOOL keyPoint );
__declspec(implementation_key(5544)) HRESULT _IWeldSymbolAuto::GetTerminator ( IDispatch * * TerminatorObj, double * x, double * y, double * z, VARIANT_BOOL * keyPoint );
__declspec(implementation_key(5545)) HRESULT _IWeldSymbolAuto::SetFreeSpacePoint ( double x, double y, double z );
__declspec(implementation_key(5546)) HRESULT _IWeldSymbolAuto::GetFreeSpacePoint ( double * x, double * y, double * z );
__declspec(implementation_key(5547)) IDispatchPtr _IWeldSymbolAuto::GetPlane ( );
__declspec(implementation_key(5548)) TGFramework::ApplicationPtr _IWeldSymbolAuto::GetApplication ( );
__declspec(implementation_key(5549)) long _IWeldSymbolAuto::GetIndex ( );
__declspec(implementation_key(5550)) _bstr_t _IWeldSymbolAuto::GetName ( const _variant_t & Recurse, long Lcid );
__declspec(implementation_key(5551)) IDispatchPtr _IWeldSymbolAuto::GetParent ( );
__declspec(implementation_key(5552)) long _IWeldSymbolAuto::GetType ( );
__declspec(implementation_key(5553)) long _IWeldSymbolAuto::GetZOrder ( );
__declspec(implementation_key(5554)) _bstr_t _IWeldSymbolAuto::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(5555)) IDispatchPtr _IWeldSymbolAuto::GetDocument ( );
__declspec(implementation_key(5556)) HRESULT _IWeldSymbolAuto::Copy ( );
__declspec(implementation_key(5557)) HRESULT _IWeldSymbolAuto::Cut ( );
__declspec(implementation_key(5558)) HRESULT _IWeldSymbolAuto::Delete ( );
__declspec(implementation_key(5559)) HRESULT _IWeldSymbolAuto::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(5560)) HRESULT _IWeldSymbolAuto::Scale ( double Factor );
__declspec(implementation_key(5561)) HRESULT _IWeldSymbolAuto::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(5562)) HRESULT _IWeldSymbolAuto::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(5563)) IDispatchPtr _IWeldSymbolAuto::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(5564)) IDispatchPtr _IWeldSymbolAuto::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(5565)) HRESULT _IWeldSymbolAuto::BringToFront ( );
__declspec(implementation_key(5566)) HRESULT _IWeldSymbolAuto::BringForward ( );
__declspec(implementation_key(5567)) HRESULT _IWeldSymbolAuto::SendToBack ( );
__declspec(implementation_key(5568)) HRESULT _IWeldSymbolAuto::SendBackward ( );
__declspec(implementation_key(5569)) HRESULT _IWeldSymbolAuto::Select ( );
__declspec(implementation_key(5570)) double _IWeldSymbolAuto::GetBreakLineDistance ( );
__declspec(implementation_key(5571)) void _IWeldSymbolAuto::PutBreakLineDistance ( double Distance );
__declspec(implementation_key(5572)) VARIANT_BOOL _IWeldSymbolAuto::GetBreakLine ( );
__declspec(implementation_key(5573)) void _IWeldSymbolAuto::PutBreakLine ( VARIANT_BOOL Flag );
__declspec(implementation_key(5574)) VARIANT_BOOL _IWeldSymbolAuto::GetBreakLineDirection ( );
__declspec(implementation_key(5575)) void _IWeldSymbolAuto::PutBreakLineDirection ( VARIANT_BOOL Flag );
__declspec(implementation_key(5576)) VARIANT_BOOL _IWeldSymbolAuto::GetLeader ( );
__declspec(implementation_key(5577)) void _IWeldSymbolAuto::PutLeader ( VARIANT_BOOL Flag );
__declspec(implementation_key(5578)) long _IWeldSymbolAuto::GetVertexCount ( );
__declspec(implementation_key(5579)) HRESULT _IWeldSymbolAuto::GetVertices ( long * VertexCount, SAFEARRAY * * Vertices );
__declspec(implementation_key(5580)) HRESULT _IWeldSymbolAuto::SetVertices ( long VertexCount, SAFEARRAY * * Vertices );
__declspec(implementation_key(5581)) HRESULT _IWeldSymbolAuto::GetVertex ( long Index, double * x, double * y, double * z );
__declspec(implementation_key(5582)) HRESULT _IWeldSymbolAuto::SetVertex ( long Index, double x, double y, double z );
__declspec(implementation_key(5583)) HRESULT _IWeldSymbolAuto::InsertVertex ( long Index, double x, double y, double z );
__declspec(implementation_key(5584)) HRESULT _IWeldSymbolAuto::AddVertex ( double x, double y, double z );
__declspec(implementation_key(5585)) HRESULT _IWeldSymbolAuto::RemoveVertex ( long Index );
__declspec(implementation_key(5586)) long _IWeldSymbolAuto::GetKeyPointCount ( );
__declspec(implementation_key(5587)) HRESULT _IWeldSymbolAuto::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(5588)) HRESULT _IWeldSymbolAuto::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(5589)) double _IWeldSymbolAuto::GetRotationAngle ( );
__declspec(implementation_key(5590)) void _IWeldSymbolAuto::PutRotationAngle ( double pdAngle );
__declspec(implementation_key(5591)) IDispatchPtr _IWeldSymbolAuto::GetAttributeSets ( );
__declspec(implementation_key(5592)) VARIANT_BOOL _IWeldSymbolAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(5593)) void _IWeldSymbolAuto::PutTailNote2 ( _bstr_t Text );
__declspec(implementation_key(5594)) _bstr_t _IWeldSymbolAuto::GetTailNote2 ( );
__declspec(implementation_key(5595)) void _IWeldSymbolAuto::PutTopNoteCSize ( _bstr_t Text );
__declspec(implementation_key(5596)) _bstr_t _IWeldSymbolAuto::GetTopNoteCSize ( );
__declspec(implementation_key(5597)) void _IWeldSymbolAuto::PutBottomNoteCSize ( _bstr_t Text );
__declspec(implementation_key(5598)) _bstr_t _IWeldSymbolAuto::GetBottomNoteCSize ( );
__declspec(implementation_key(5599)) void _IWeldSymbolAuto::PutTopNoteAngle ( _bstr_t Text );
__declspec(implementation_key(5600)) _bstr_t _IWeldSymbolAuto::GetTopNoteAngle ( );
__declspec(implementation_key(5601)) void _IWeldSymbolAuto::PutBottomNoteAngle ( _bstr_t Text );
__declspec(implementation_key(5602)) _bstr_t _IWeldSymbolAuto::GetBottomNoteAngle ( );
__declspec(implementation_key(5603)) void _IWeldSymbolAuto::PutTopNoteDepth ( _bstr_t Text );
__declspec(implementation_key(5604)) _bstr_t _IWeldSymbolAuto::GetTopNoteDepth ( );
__declspec(implementation_key(5605)) void _IWeldSymbolAuto::PutBottomNoteDepth ( _bstr_t Text );
__declspec(implementation_key(5606)) _bstr_t _IWeldSymbolAuto::GetBottomNoteDepth ( );
__declspec(implementation_key(5607)) void _IWeldSymbolAuto::PutTopPosOffset ( int Offset );
__declspec(implementation_key(5608)) int _IWeldSymbolAuto::GetTopPosOffset ( );
__declspec(implementation_key(5609)) void _IWeldSymbolAuto::PutBottomPosOffset ( int Offset );
__declspec(implementation_key(5610)) int _IWeldSymbolAuto::GetBottomPosOffset ( );
__declspec(implementation_key(5611)) double _IWeldSymbolAuto::GetTextScale ( );
__declspec(implementation_key(5612)) void _IWeldSymbolAuto::PutTextScale ( double pdAngle );
__declspec(implementation_key(5613)) void _IWeldSymbolAuto::PutLayer ( _bstr_t Layer );
__declspec(implementation_key(5614)) _bstr_t _IWeldSymbolAuto::GetLayer ( );
__declspec(implementation_key(5615)) IDispatchPtr _IWeldSymbolAuto::GetPMIPlane ( );
__declspec(implementation_key(5616)) double _IWeldSymbolAuto::GetPMITrackDistance ( );
__declspec(implementation_key(5617)) void _IWeldSymbolAuto::PutPMITrackDistance ( double pdPMITrackDistance );
__declspec(implementation_key(5618)) void _IWeldSymbolAuto::PutHidePMI ( VARIANT_BOOL Value );
__declspec(implementation_key(5619)) VARIANT_BOOL _IWeldSymbolAuto::GetHidePMI ( );
__declspec(implementation_key(5620)) void _IWeldSymbolAuto::PutTopWeldModifier ( enum DimWeldModifierConstants Type );
__declspec(implementation_key(5621)) enum DimWeldModifierConstants _IWeldSymbolAuto::GetTopWeldModifier ( );
__declspec(implementation_key(5622)) void _IWeldSymbolAuto::PutBottomWeldModifier ( enum DimWeldModifierConstants Type );
__declspec(implementation_key(5623)) enum DimWeldModifierConstants _IWeldSymbolAuto::GetBottomWeldModifier ( );
__declspec(implementation_key(5624)) DisplayDataPtr _IWeldSymbolAuto::GetDisplayData ( );
__declspec(implementation_key(5625)) HRESULT _IWeldSymbolAuto::PromoteToCurrentVersion ( );
__declspec(implementation_key(5626)) HRESULT _IWeldSymbolAuto::SetAlignmentShape ( IDispatch * AlignmentShapeObj, double x, double y );
__declspec(implementation_key(5627)) HRESULT _IWeldSymbolAuto::GetAlignmentShape ( IDispatch * * AlignmentShapeObj, double * x, double * y );
__declspec(implementation_key(5628)) void _IWeldSymbolAuto::PutPMIName ( _bstr_t Text );
__declspec(implementation_key(5629)) _bstr_t _IWeldSymbolAuto::GetPMIName ( );
__declspec(implementation_key(5630)) void _IWeldSymbolAuto::PutWeldInFieldFlagDirection ( enum WeldSymbolFlagDirectionConstants Flag );
__declspec(implementation_key(5631)) enum WeldSymbolFlagDirectionConstants _IWeldSymbolAuto::GetWeldInFieldFlagDirection ( );
__declspec(implementation_key(5632)) HRESULT _IWeldSymbolAuto::TransformToModelCoordinates ( double InputX, double InputY, double InputZ, double * ModelX, double * ModelY, double * ModelZ );
__declspec(implementation_key(5633)) void _IWeldSymbolAuto::PutCenterType ( enum DimWeldTypeConstants Type );
__declspec(implementation_key(5634)) enum DimWeldTypeConstants _IWeldSymbolAuto::GetCenterType ( );
__declspec(implementation_key(5635)) HRESULT _IWeldSymbolAuto::SetCenterTreatmentTypes ( enum DimWeldTreatmentTypeConstants AboveType, enum DimWeldTreatmentTypeConstants BelowType );
__declspec(implementation_key(5636)) HRESULT _IWeldSymbolAuto::GetCenterTreatmentTypes ( enum DimWeldTreatmentTypeConstants * AboveType, enum DimWeldTreatmentTypeConstants * BelowType );
__declspec(implementation_key(5637)) VARIANT_BOOL _IWeldSymbolAuto::GetIsTerminatorAttachedToEntity ( );
__declspec(implementation_key(5638)) HRESULT _IWeldSymbolAuto::GetReferencedGeometry ( SAFEARRAY * * ReferencedGeometries );
__declspec(implementation_key(5639)) HRESULT _IWeldSymbolAuto::SetReferencedGeometry ( SAFEARRAY * * ReferencedGeometries );
__declspec(implementation_key(5640)) void WeldSymbolDataSet::PutZSymbol ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5641)) VARIANT_BOOL WeldSymbolDataSet::GetZSymbol ( );
__declspec(implementation_key(5642)) void WeldSymbolDataSet::PutTail ( enum DimWeldTailTypeConstants _arg1 );
__declspec(implementation_key(5643)) enum DimWeldTailTypeConstants WeldSymbolDataSet::GetTail ( );
__declspec(implementation_key(5644)) void WeldSymbolDataSet::PutDashLine ( enum DimWeldDashLineTypeConstants _arg1 );
__declspec(implementation_key(5645)) enum DimWeldDashLineTypeConstants WeldSymbolDataSet::GetDashLine ( );
__declspec(implementation_key(5646)) void WeldSymbolDataSet::PutWeldInField ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5647)) VARIANT_BOOL WeldSymbolDataSet::GetWeldInField ( );
__declspec(implementation_key(5648)) void WeldSymbolDataSet::PutOffsetTopBottom ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5649)) VARIANT_BOOL WeldSymbolDataSet::GetOffsetTopBottom ( );
__declspec(implementation_key(5650)) void WeldSymbolDataSet::PutWeldAllAround ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5651)) VARIANT_BOOL WeldSymbolDataSet::GetWeldAllAround ( );
__declspec(implementation_key(5652)) void WeldSymbolDataSet::PutSymmetrical ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5653)) VARIANT_BOOL WeldSymbolDataSet::GetSymmetrical ( );
__declspec(implementation_key(5654)) void WeldSymbolDataSet::PutTopNote1 ( _bstr_t _arg1 );
__declspec(implementation_key(5655)) _bstr_t WeldSymbolDataSet::GetTopNote1 ( );
__declspec(implementation_key(5656)) void WeldSymbolDataSet::PutTopNote2 ( _bstr_t _arg1 );
__declspec(implementation_key(5657)) _bstr_t WeldSymbolDataSet::GetTopNote2 ( );
__declspec(implementation_key(5658)) void WeldSymbolDataSet::PutTopTreatmentType ( enum DimWeldTreatmentTypeConstants _arg1 );
__declspec(implementation_key(5659)) enum DimWeldTreatmentTypeConstants WeldSymbolDataSet::GetTopTreatmentType ( );
__declspec(implementation_key(5660)) void WeldSymbolDataSet::PutTopType ( enum DimWeldTypeConstants _arg1 );
__declspec(implementation_key(5661)) enum DimWeldTypeConstants WeldSymbolDataSet::GetTopType ( );
__declspec(implementation_key(5662)) void WeldSymbolDataSet::PutTopNote3 ( _bstr_t _arg1 );
__declspec(implementation_key(5663)) _bstr_t WeldSymbolDataSet::GetTopNote3 ( );
__declspec(implementation_key(5664)) void WeldSymbolDataSet::PutTopNoteZ ( _bstr_t _arg1 );
__declspec(implementation_key(5665)) _bstr_t WeldSymbolDataSet::GetTopNoteZ ( );
__declspec(implementation_key(5666)) void WeldSymbolDataSet::PutTailNote ( _bstr_t _arg1 );
__declspec(implementation_key(5667)) _bstr_t WeldSymbolDataSet::GetTailNote ( );
__declspec(implementation_key(5668)) void WeldSymbolDataSet::PutBottomNote1 ( _bstr_t _arg1 );
__declspec(implementation_key(5669)) _bstr_t WeldSymbolDataSet::GetBottomNote1 ( );
__declspec(implementation_key(5670)) void WeldSymbolDataSet::PutBottomNote2 ( _bstr_t _arg1 );
__declspec(implementation_key(5671)) _bstr_t WeldSymbolDataSet::GetBottomNote2 ( );
__declspec(implementation_key(5672)) void WeldSymbolDataSet::PutBottomTreatmentType ( enum DimWeldTreatmentTypeConstants _arg1 );
__declspec(implementation_key(5673)) enum DimWeldTreatmentTypeConstants WeldSymbolDataSet::GetBottomTreatmentType ( );
__declspec(implementation_key(5674)) void WeldSymbolDataSet::PutBottomType ( enum DimWeldTypeConstants _arg1 );
__declspec(implementation_key(5675)) enum DimWeldTypeConstants WeldSymbolDataSet::GetBottomType ( );
__declspec(implementation_key(5676)) void WeldSymbolDataSet::PutBottomNote3 ( _bstr_t _arg1 );
__declspec(implementation_key(5677)) _bstr_t WeldSymbolDataSet::GetBottomNote3 ( );
__declspec(implementation_key(5678)) void WeldSymbolDataSet::PutBottomNoteZ ( _bstr_t _arg1 );
__declspec(implementation_key(5679)) _bstr_t WeldSymbolDataSet::GetBottomNoteZ ( );
__declspec(implementation_key(5680)) void WeldSymbolDataSet::PutTopWeldModifier ( enum DimWeldModifierConstants _arg1 );
__declspec(implementation_key(5681)) enum DimWeldModifierConstants WeldSymbolDataSet::GetTopWeldModifier ( );
__declspec(implementation_key(5682)) void WeldSymbolDataSet::PutBottomWeldModifier ( enum DimWeldModifierConstants _arg1 );
__declspec(implementation_key(5683)) enum DimWeldModifierConstants WeldSymbolDataSet::GetBottomWeldModifier ( );
__declspec(implementation_key(5684)) TGFramework::ApplicationPtr _IWeldSymbolsAuto::GetApplication ( );
__declspec(implementation_key(5685)) long _IWeldSymbolsAuto::GetCount ( );
__declspec(implementation_key(5686)) IDispatchPtr _IWeldSymbolsAuto::GetParent ( );
__declspec(implementation_key(5687)) WeldSymbolPtr _IWeldSymbolsAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(5688)) IUnknownPtr _IWeldSymbolsAuto::Get_NewEnum ( );
__declspec(implementation_key(5689)) void _IWeldSymbolsAuto::PutPlane ( IDispatch * Plane );
__declspec(implementation_key(5690)) IDispatchPtr _IWeldSymbolsAuto::GetPlane ( );
__declspec(implementation_key(5691)) void _IWeldSymbolsAuto::PutStyle ( struct DimensionStyle * Style );
__declspec(implementation_key(5692)) DimensionStylePtr _IWeldSymbolsAuto::GetStyle ( );
__declspec(implementation_key(5693)) void _IWeldSymbolsAuto::PutDataSet ( struct WeldSymbolDataSet * _arg1 );
__declspec(implementation_key(5694)) WeldSymbolPtr _IWeldSymbolsAuto::Add ( double x1, double y1, double z1 );
__declspec(implementation_key(5695)) WeldSymbolPtr _IWeldSymbolsAuto::AddByTerminator ( IDispatch * TerminatorObject, double x1, double y1, double z1, VARIANT_BOOL keyPoint1 );
__declspec(implementation_key(5696)) HRESULT _IWeldSymbolsAuto::ClearPlane ( );
__declspec(implementation_key(5697)) HRESULT _IWeldSymbolsAuto::ClearStyle ( );
__declspec(implementation_key(5698)) HRESULT _IWeldSymbolsAuto::ClearDataSet ( );
__declspec(implementation_key(5699)) AnnotInitDataPtr _IWeldSymbolsAuto::GetAnnotInitData ( );
__declspec(implementation_key(5700)) WeldSymbolPtr _IWeldSymbolsAuto::AddWeldSymbol ( struct AnnotInitData * AnnotInitData );
__declspec(implementation_key(5701)) void _IWeldSymbolDataSetAuto::PutZSymbol ( VARIANT_BOOL Flag );
__declspec(implementation_key(5702)) VARIANT_BOOL _IWeldSymbolDataSetAuto::GetZSymbol ( );
__declspec(implementation_key(5703)) void _IWeldSymbolDataSetAuto::PutTail ( enum DimWeldTailTypeConstants pVal );
__declspec(implementation_key(5704)) enum DimWeldTailTypeConstants _IWeldSymbolDataSetAuto::GetTail ( );
__declspec(implementation_key(5705)) void _IWeldSymbolDataSetAuto::PutDashLine ( enum DimWeldDashLineTypeConstants pVal );
__declspec(implementation_key(5706)) enum DimWeldDashLineTypeConstants _IWeldSymbolDataSetAuto::GetDashLine ( );
__declspec(implementation_key(5707)) void _IWeldSymbolDataSetAuto::PutWeldInField ( VARIANT_BOOL Flag );
__declspec(implementation_key(5708)) VARIANT_BOOL _IWeldSymbolDataSetAuto::GetWeldInField ( );
__declspec(implementation_key(5709)) void _IWeldSymbolDataSetAuto::PutOffsetTopBottom ( VARIANT_BOOL Flag );
__declspec(implementation_key(5710)) VARIANT_BOOL _IWeldSymbolDataSetAuto::GetOffsetTopBottom ( );
__declspec(implementation_key(5711)) void _IWeldSymbolDataSetAuto::PutWeldAllAround ( VARIANT_BOOL Flag );
__declspec(implementation_key(5712)) VARIANT_BOOL _IWeldSymbolDataSetAuto::GetWeldAllAround ( );
__declspec(implementation_key(5713)) void _IWeldSymbolDataSetAuto::PutSymmetrical ( VARIANT_BOOL Flag );
__declspec(implementation_key(5714)) VARIANT_BOOL _IWeldSymbolDataSetAuto::GetSymmetrical ( );
__declspec(implementation_key(5715)) void _IWeldSymbolDataSetAuto::PutTopNote1 ( _bstr_t Text );
__declspec(implementation_key(5716)) _bstr_t _IWeldSymbolDataSetAuto::GetTopNote1 ( );
__declspec(implementation_key(5717)) void _IWeldSymbolDataSetAuto::PutTopNote2 ( _bstr_t Text );
__declspec(implementation_key(5718)) _bstr_t _IWeldSymbolDataSetAuto::GetTopNote2 ( );
__declspec(implementation_key(5719)) void _IWeldSymbolDataSetAuto::PutTopTreatmentType ( enum DimWeldTreatmentTypeConstants Type );
__declspec(implementation_key(5720)) enum DimWeldTreatmentTypeConstants _IWeldSymbolDataSetAuto::GetTopTreatmentType ( );
__declspec(implementation_key(5721)) void _IWeldSymbolDataSetAuto::PutTopType ( enum DimWeldTypeConstants Type );
__declspec(implementation_key(5722)) enum DimWeldTypeConstants _IWeldSymbolDataSetAuto::GetTopType ( );
__declspec(implementation_key(5723)) void _IWeldSymbolDataSetAuto::PutTopNote3 ( _bstr_t Text );
__declspec(implementation_key(5724)) _bstr_t _IWeldSymbolDataSetAuto::GetTopNote3 ( );
__declspec(implementation_key(5725)) void _IWeldSymbolDataSetAuto::PutTopNoteZ ( _bstr_t Text );
__declspec(implementation_key(5726)) _bstr_t _IWeldSymbolDataSetAuto::GetTopNoteZ ( );
__declspec(implementation_key(5727)) void _IWeldSymbolDataSetAuto::PutTailNote ( _bstr_t Text );
__declspec(implementation_key(5728)) _bstr_t _IWeldSymbolDataSetAuto::GetTailNote ( );
__declspec(implementation_key(5729)) void _IWeldSymbolDataSetAuto::PutBottomNote1 ( _bstr_t Text );
__declspec(implementation_key(5730)) _bstr_t _IWeldSymbolDataSetAuto::GetBottomNote1 ( );
__declspec(implementation_key(5731)) void _IWeldSymbolDataSetAuto::PutBottomNote2 ( _bstr_t Text );
__declspec(implementation_key(5732)) _bstr_t _IWeldSymbolDataSetAuto::GetBottomNote2 ( );
__declspec(implementation_key(5733)) void _IWeldSymbolDataSetAuto::PutBottomTreatmentType ( enum DimWeldTreatmentTypeConstants Type );
__declspec(implementation_key(5734)) enum DimWeldTreatmentTypeConstants _IWeldSymbolDataSetAuto::GetBottomTreatmentType ( );
__declspec(implementation_key(5735)) void _IWeldSymbolDataSetAuto::PutBottomType ( enum DimWeldTypeConstants Type );
__declspec(implementation_key(5736)) enum DimWeldTypeConstants _IWeldSymbolDataSetAuto::GetBottomType ( );
__declspec(implementation_key(5737)) void _IWeldSymbolDataSetAuto::PutBottomNote3 ( _bstr_t Text );
__declspec(implementation_key(5738)) _bstr_t _IWeldSymbolDataSetAuto::GetBottomNote3 ( );
__declspec(implementation_key(5739)) void _IWeldSymbolDataSetAuto::PutBottomNoteZ ( _bstr_t Text );
__declspec(implementation_key(5740)) _bstr_t _IWeldSymbolDataSetAuto::GetBottomNoteZ ( );
__declspec(implementation_key(5741)) void _IWeldSymbolDataSetAuto::PutTopWeldModifier ( enum DimWeldModifierConstants Type );
__declspec(implementation_key(5742)) enum DimWeldModifierConstants _IWeldSymbolDataSetAuto::GetTopWeldModifier ( );
__declspec(implementation_key(5743)) void _IWeldSymbolDataSetAuto::PutBottomWeldModifier ( enum DimWeldModifierConstants Type );
__declspec(implementation_key(5744)) enum DimWeldModifierConstants _IWeldSymbolDataSetAuto::GetBottomWeldModifier ( );
__declspec(implementation_key(5745)) TGFramework::ApplicationPtr CenterMarks::GetApplication ( );
__declspec(implementation_key(5746)) long CenterMarks::GetCount ( );
__declspec(implementation_key(5747)) IDispatchPtr CenterMarks::GetParent ( );
__declspec(implementation_key(5748)) CenterMarkPtr CenterMarks::Item ( const _variant_t & Index );
__declspec(implementation_key(5749)) void CenterMarks::PutPlane ( IDispatch * _arg1 );
__declspec(implementation_key(5750)) IDispatchPtr CenterMarks::GetPlane ( );
__declspec(implementation_key(5751)) void CenterMarks::PutStyle ( struct DimensionStyle * _arg1 );
__declspec(implementation_key(5752)) DimensionStylePtr CenterMarks::GetStyle ( );
__declspec(implementation_key(5753)) void CenterMarks::PutAxis ( IDispatch * _arg1 );
__declspec(implementation_key(5754)) IDispatchPtr CenterMarks::GetAxis ( );
__declspec(implementation_key(5755)) CenterMarkPtr CenterMarks::Add ( double x, double y, double z );
__declspec(implementation_key(5756)) CenterMarkPtr CenterMarks::AddByCenter ( IDispatch * CenterObject, double x, double y, double z, VARIANT_BOOL keyPoint );
__declspec(implementation_key(5757)) HRESULT CenterMarks::ClearPlane ( );
__declspec(implementation_key(5758)) HRESULT CenterMarks::ClearStyle ( );
__declspec(implementation_key(5759)) HRESULT CenterMarks::ClearAxis ( );
__declspec(implementation_key(5760)) CenterMarkPtr CenterMarks::Add2PointCenterMark ( IDispatch * Object1, double x1, double y1, double z1, VARIANT_BOOL keyPoint1, IDispatch * Object2, double x2, double y2, double z2, VARIANT_BOOL keyPoint2, VARIANT_BOOL bHonorKeyPoints );
__declspec(implementation_key(5761)) AnnotInitDataPtr CenterMarks::GetAnnotInitData ( );
__declspec(implementation_key(5762)) CenterMarkPtr CenterMarks::AddCenterMark ( struct AnnotInitData * AnnotInitData );
__declspec(implementation_key(5763)) DimStylePtr CenterMark::GetStyle ( );
__declspec(implementation_key(5764)) HRESULT CenterMark::SetCenter ( IDispatch * CenterObj, double x, double y, double z, VARIANT_BOOL keyPoint );
__declspec(implementation_key(5765)) HRESULT CenterMark::GetCenter ( IDispatch * * CenterObj, double * x, double * y, double * z, VARIANT_BOOL * keyPoint );
__declspec(implementation_key(5766)) HRESULT CenterMark::SetCenterPoint ( double x, double y, double z );
__declspec(implementation_key(5767)) HRESULT CenterMark::GetCenterPoint ( double * x, double * y, double * z );
__declspec(implementation_key(5768)) IDispatchPtr CenterMark::GetPlane ( );
__declspec(implementation_key(5769)) IDispatchPtr CenterMark::GetAxis ( );
__declspec(implementation_key(5770)) TGFramework::ApplicationPtr CenterMark::GetApplication ( );
__declspec(implementation_key(5771)) long CenterMark::GetIndex ( );
__declspec(implementation_key(5772)) _bstr_t CenterMark::GetName ( const _variant_t & Recurse );
__declspec(implementation_key(5773)) IDispatchPtr CenterMark::GetParent ( );
__declspec(implementation_key(5774)) long CenterMark::GetType ( );
__declspec(implementation_key(5775)) long CenterMark::GetZOrder ( );
__declspec(implementation_key(5776)) _bstr_t CenterMark::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(5777)) IDispatchPtr CenterMark::GetDocument ( );
__declspec(implementation_key(5778)) HRESULT CenterMark::Copy ( );
__declspec(implementation_key(5779)) HRESULT CenterMark::Cut ( );
__declspec(implementation_key(5780)) HRESULT CenterMark::Delete ( );
__declspec(implementation_key(5781)) HRESULT CenterMark::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(5782)) HRESULT CenterMark::Scale ( double Factor );
__declspec(implementation_key(5783)) HRESULT CenterMark::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(5784)) HRESULT CenterMark::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(5785)) IDispatchPtr CenterMark::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(5786)) IDispatchPtr CenterMark::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(5787)) HRESULT CenterMark::BringToFront ( );
__declspec(implementation_key(5788)) HRESULT CenterMark::BringForward ( );
__declspec(implementation_key(5789)) HRESULT CenterMark::SendToBack ( );
__declspec(implementation_key(5790)) HRESULT CenterMark::SendBackward ( );
__declspec(implementation_key(5791)) HRESULT CenterMark::Select ( );
__declspec(implementation_key(5792)) long CenterMark::GetKeyPointCount ( );
__declspec(implementation_key(5793)) HRESULT CenterMark::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(5794)) HRESULT CenterMark::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(5795)) IDispatchPtr CenterMark::GetConnectObject ( );
__declspec(implementation_key(5796)) VARIANT_BOOL CenterMark::GetTwoPoint ( );
__declspec(implementation_key(5797)) HRESULT CenterMark::SetArcCenter ( IDispatch * CenterObj, double x, double y, double z, VARIANT_BOOL keyPoint );
__declspec(implementation_key(5798)) HRESULT CenterMark::GetArcCenter ( IDispatch * * CenterObj, double * x, double * y, double * z, VARIANT_BOOL * keyPoint );
__declspec(implementation_key(5799)) HRESULT CenterMark::SetArcCenterPoint ( double x, double y, double z );
__declspec(implementation_key(5800)) HRESULT CenterMark::GetArcCenterPoint ( double * x, double * y, double * z );
__declspec(implementation_key(5801)) IDispatchPtr CenterMark::GetAttributeSets ( );
__declspec(implementation_key(5802)) VARIANT_BOOL CenterMark::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(5803)) double CenterMark::GetTextScale ( );
__declspec(implementation_key(5804)) void CenterMark::PutTextScale ( double _arg1 );
__declspec(implementation_key(5805)) void CenterMark::PutLayer ( _bstr_t _arg1 );
__declspec(implementation_key(5806)) _bstr_t CenterMark::GetLayer ( );
__declspec(implementation_key(5807)) HRESULT CenterMark::PromoteToCurrentVersion ( );
__declspec(implementation_key(5808)) void CenterMark::PutPMIName ( _bstr_t _arg1 );
__declspec(implementation_key(5809)) _bstr_t CenterMark::GetPMIName ( );
__declspec(implementation_key(5810)) void CenterMark::PutHidePMI ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5811)) VARIANT_BOOL CenterMark::GetHidePMI ( );
__declspec(implementation_key(5812)) IDispatchPtr CenterMark::GetPMIPlane ( );
__declspec(implementation_key(5813)) TGFramework::ApplicationPtr _ICenterMarksAuto::GetApplication ( );
__declspec(implementation_key(5814)) long _ICenterMarksAuto::GetCount ( );
__declspec(implementation_key(5815)) IDispatchPtr _ICenterMarksAuto::GetParent ( );
__declspec(implementation_key(5816)) CenterMarkPtr _ICenterMarksAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(5817)) IUnknownPtr _ICenterMarksAuto::Get_NewEnum ( );
__declspec(implementation_key(5818)) void _ICenterMarksAuto::PutPlane ( IDispatch * Plane );
__declspec(implementation_key(5819)) IDispatchPtr _ICenterMarksAuto::GetPlane ( );
__declspec(implementation_key(5820)) void _ICenterMarksAuto::PutStyle ( struct DimensionStyle * Style );
__declspec(implementation_key(5821)) DimensionStylePtr _ICenterMarksAuto::GetStyle ( );
__declspec(implementation_key(5822)) void _ICenterMarksAuto::PutAxis ( IDispatch * Axis );
__declspec(implementation_key(5823)) IDispatchPtr _ICenterMarksAuto::GetAxis ( );
__declspec(implementation_key(5824)) CenterMarkPtr _ICenterMarksAuto::Add ( double x, double y, double z );
__declspec(implementation_key(5825)) CenterMarkPtr _ICenterMarksAuto::AddByCenter ( IDispatch * CenterObject, double x, double y, double z, VARIANT_BOOL keyPoint );
__declspec(implementation_key(5826)) HRESULT _ICenterMarksAuto::ClearPlane ( );
__declspec(implementation_key(5827)) HRESULT _ICenterMarksAuto::ClearStyle ( );
__declspec(implementation_key(5828)) HRESULT _ICenterMarksAuto::ClearAxis ( );
__declspec(implementation_key(5829)) CenterMarkPtr _ICenterMarksAuto::Add2PointCenterMark ( IDispatch * Object1, double x1, double y1, double z1, VARIANT_BOOL keyPoint1, IDispatch * Object2, double x2, double y2, double z2, VARIANT_BOOL keyPoint2, VARIANT_BOOL bHonorKeyPoints );
__declspec(implementation_key(5830)) AnnotInitDataPtr _ICenterMarksAuto::GetAnnotInitData ( );
__declspec(implementation_key(5831)) CenterMarkPtr _ICenterMarksAuto::AddCenterMark ( struct AnnotInitData * AnnotInitData );
__declspec(implementation_key(5832)) DimStylePtr _ICenterMarkAuto::GetStyle ( );
__declspec(implementation_key(5833)) HRESULT _ICenterMarkAuto::SetCenter ( IDispatch * CenterObj, double x, double y, double z, VARIANT_BOOL keyPoint );
__declspec(implementation_key(5834)) HRESULT _ICenterMarkAuto::GetCenter ( IDispatch * * CenterObj, double * x, double * y, double * z, VARIANT_BOOL * keyPoint );
__declspec(implementation_key(5835)) HRESULT _ICenterMarkAuto::SetCenterPoint ( double x, double y, double z );
__declspec(implementation_key(5836)) HRESULT _ICenterMarkAuto::GetCenterPoint ( double * x, double * y, double * z );
__declspec(implementation_key(5837)) IDispatchPtr _ICenterMarkAuto::GetPlane ( );
__declspec(implementation_key(5838)) IDispatchPtr _ICenterMarkAuto::GetAxis ( );
__declspec(implementation_key(5839)) TGFramework::ApplicationPtr _ICenterMarkAuto::GetApplication ( );
__declspec(implementation_key(5840)) long _ICenterMarkAuto::GetIndex ( );
__declspec(implementation_key(5841)) _bstr_t _ICenterMarkAuto::GetName ( const _variant_t & Recurse, long Lcid );
__declspec(implementation_key(5842)) IDispatchPtr _ICenterMarkAuto::GetParent ( );
__declspec(implementation_key(5843)) long _ICenterMarkAuto::GetType ( );
__declspec(implementation_key(5844)) long _ICenterMarkAuto::GetZOrder ( );
__declspec(implementation_key(5845)) _bstr_t _ICenterMarkAuto::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(5846)) IDispatchPtr _ICenterMarkAuto::GetDocument ( );
__declspec(implementation_key(5847)) HRESULT _ICenterMarkAuto::Copy ( );
__declspec(implementation_key(5848)) HRESULT _ICenterMarkAuto::Cut ( );
__declspec(implementation_key(5849)) HRESULT _ICenterMarkAuto::Delete ( );
__declspec(implementation_key(5850)) HRESULT _ICenterMarkAuto::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(5851)) HRESULT _ICenterMarkAuto::Scale ( double Factor );
__declspec(implementation_key(5852)) HRESULT _ICenterMarkAuto::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(5853)) HRESULT _ICenterMarkAuto::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(5854)) IDispatchPtr _ICenterMarkAuto::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(5855)) IDispatchPtr _ICenterMarkAuto::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(5856)) HRESULT _ICenterMarkAuto::BringToFront ( );
__declspec(implementation_key(5857)) HRESULT _ICenterMarkAuto::BringForward ( );
__declspec(implementation_key(5858)) HRESULT _ICenterMarkAuto::SendToBack ( );
__declspec(implementation_key(5859)) HRESULT _ICenterMarkAuto::SendBackward ( );
__declspec(implementation_key(5860)) HRESULT _ICenterMarkAuto::Select ( );
__declspec(implementation_key(5861)) long _ICenterMarkAuto::GetKeyPointCount ( );
__declspec(implementation_key(5862)) HRESULT _ICenterMarkAuto::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(5863)) HRESULT _ICenterMarkAuto::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(5864)) IDispatchPtr _ICenterMarkAuto::GetConnectObject ( );
__declspec(implementation_key(5865)) VARIANT_BOOL _ICenterMarkAuto::GetTwoPoint ( );
__declspec(implementation_key(5866)) HRESULT _ICenterMarkAuto::SetArcCenter ( IDispatch * CenterObj, double x, double y, double z, VARIANT_BOOL keyPoint );
__declspec(implementation_key(5867)) HRESULT _ICenterMarkAuto::GetArcCenter ( IDispatch * * CenterObj, double * x, double * y, double * z, VARIANT_BOOL * keyPoint );
__declspec(implementation_key(5868)) HRESULT _ICenterMarkAuto::SetArcCenterPoint ( double x, double y, double z );
__declspec(implementation_key(5869)) HRESULT _ICenterMarkAuto::GetArcCenterPoint ( double * x, double * y, double * z );
__declspec(implementation_key(5870)) IDispatchPtr _ICenterMarkAuto::GetAttributeSets ( );
__declspec(implementation_key(5871)) VARIANT_BOOL _ICenterMarkAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(5872)) double _ICenterMarkAuto::GetTextScale ( );
__declspec(implementation_key(5873)) void _ICenterMarkAuto::PutTextScale ( double pdAngle );
__declspec(implementation_key(5874)) void _ICenterMarkAuto::PutLayer ( _bstr_t Layer );
__declspec(implementation_key(5875)) _bstr_t _ICenterMarkAuto::GetLayer ( );
__declspec(implementation_key(5876)) HRESULT _ICenterMarkAuto::PromoteToCurrentVersion ( );
__declspec(implementation_key(5877)) void _ICenterMarkAuto::PutPMIName ( _bstr_t Text );
__declspec(implementation_key(5878)) _bstr_t _ICenterMarkAuto::GetPMIName ( );
__declspec(implementation_key(5879)) void _ICenterMarkAuto::PutHidePMI ( VARIANT_BOOL Value );
__declspec(implementation_key(5880)) VARIANT_BOOL _ICenterMarkAuto::GetHidePMI ( );
__declspec(implementation_key(5881)) IDispatchPtr _ICenterMarkAuto::GetPMIPlane ( );
__declspec(implementation_key(5882)) TGFramework::ApplicationPtr CenterLines::GetApplication ( );
__declspec(implementation_key(5883)) long CenterLines::GetCount ( );
__declspec(implementation_key(5884)) IDispatchPtr CenterLines::GetParent ( );
__declspec(implementation_key(5885)) CenterLinePtr CenterLines::Item ( const _variant_t & Index );
__declspec(implementation_key(5886)) void CenterLines::PutPlane ( IDispatch * _arg1 );
__declspec(implementation_key(5887)) IDispatchPtr CenterLines::GetPlane ( );
__declspec(implementation_key(5888)) void CenterLines::PutStyle ( struct DimensionStyle * _arg1 );
__declspec(implementation_key(5889)) DimensionStylePtr CenterLines::GetStyle ( );
__declspec(implementation_key(5890)) CenterLinePtr CenterLines::Add ( double x1, double y1, double z1, double x2, double y2, double z2 );
__declspec(implementation_key(5891)) CenterLinePtr CenterLines::AddByStart ( IDispatch * StartObject, double x1, double y1, double z1, VARIANT_BOOL keyPoint, double x2, double y2, double z2 );
__declspec(implementation_key(5892)) CenterLinePtr CenterLines::AddByEnd ( IDispatch * EndObject, double x1, double y1, double z1, VARIANT_BOOL keyPoint1, double x2, double y2, double z2 );
__declspec(implementation_key(5893)) CenterLinePtr CenterLines::AddByStartEnd ( IDispatch * StartObject, double x1, double y1, double z1, VARIANT_BOOL keyPoint1, IDispatch * EndObject, double x2, double y2, double z2, VARIANT_BOOL keyPoint2 );
__declspec(implementation_key(5894)) HRESULT CenterLines::ClearPlane ( );
__declspec(implementation_key(5895)) HRESULT CenterLines::ClearStyle ( );
__declspec(implementation_key(5896)) CenterLinePtr CenterLines::AddBetweenTwoParallelLines ( IDispatch * StartObject, IDispatch * EndObject );
__declspec(implementation_key(5897)) CenterLinePtr CenterLines::AddCenterArcBy3Points ( IDispatch * StartObject, double Start_X, double Start_Y, double Start_Z, VARIANT_BOOL Start_Keypoint, IDispatch * EndObject, double End_X, double End_Y, double End_Z, VARIANT_BOOL End_Keypoint, IDispatch * CenterObject, double Center_X, double Center_Y, double Center_Z, VARIANT_BOOL Center_Keypoint );
__declspec(implementation_key(5898)) CenterLinePtr CenterLines::AddCenterArcBy2Arcs ( IDispatch * StartObject, IDispatch * EndObject );
__declspec(implementation_key(5899)) CenterLinePtr CenterLines::AddBetweenTwoLines ( IDispatch * StartObject, IDispatch * EndObject );
__declspec(implementation_key(5900)) AnnotInitDataPtr CenterLines::GetAnnotInitData ( );
__declspec(implementation_key(5901)) CenterLinePtr CenterLines::AddCenterLine ( struct AnnotInitData * AnnotInitData, long bIsBy2Lines );
__declspec(implementation_key(5902)) CenterLinePtr CenterLines::AddCenterArc ( struct AnnotInitData * AnnotInitData );
__declspec(implementation_key(5903)) CenterLinePtr CenterLines::AddCenterAxis ( struct AnnotInitData * AnnotInitData );
__declspec(implementation_key(5904)) DimStylePtr CenterLine::GetStyle ( );
__declspec(implementation_key(5905)) HRESULT CenterLine::SetStart ( IDispatch * StartObj, double x, double y, double z, VARIANT_BOOL keyPoint );
__declspec(implementation_key(5906)) HRESULT CenterLine::GetStart ( IDispatch * * StartObj, double * x, double * y, double * z, VARIANT_BOOL * keyPoint );
__declspec(implementation_key(5907)) HRESULT CenterLine::SetStartPoint ( double x, double y, double z );
__declspec(implementation_key(5908)) HRESULT CenterLine::GetStartPoint ( double * x, double * y, double * z );
__declspec(implementation_key(5909)) HRESULT CenterLine::SetEnd ( IDispatch * ConnectObject, double x, double y, double z, VARIANT_BOOL keyPoint );
__declspec(implementation_key(5910)) HRESULT CenterLine::GetEnd ( IDispatch * * ConnectObject, double * x, double * y, double * z, VARIANT_BOOL * keyPoint );
__declspec(implementation_key(5911)) HRESULT CenterLine::SetEndPoint ( double x, double y, double z );
__declspec(implementation_key(5912)) HRESULT CenterLine::GetEndPoint ( double * x, double * y, double * z );
__declspec(implementation_key(5913)) IDispatchPtr CenterLine::GetPlane ( );
__declspec(implementation_key(5914)) enum DimCenterlineTypeConstants CenterLine::GetCenterLineType ( );
__declspec(implementation_key(5915)) void CenterLine::PutCenterLineType ( enum DimCenterlineTypeConstants _arg1 );
__declspec(implementation_key(5916)) TGFramework::ApplicationPtr CenterLine::GetApplication ( );
__declspec(implementation_key(5917)) long CenterLine::GetIndex ( );
__declspec(implementation_key(5918)) _bstr_t CenterLine::GetName ( const _variant_t & Recurse );
__declspec(implementation_key(5919)) IDispatchPtr CenterLine::GetParent ( );
__declspec(implementation_key(5920)) long CenterLine::GetType ( );
__declspec(implementation_key(5921)) long CenterLine::GetZOrder ( );
__declspec(implementation_key(5922)) _bstr_t CenterLine::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(5923)) IDispatchPtr CenterLine::GetDocument ( );
__declspec(implementation_key(5924)) HRESULT CenterLine::Copy ( );
__declspec(implementation_key(5925)) HRESULT CenterLine::Cut ( );
__declspec(implementation_key(5926)) HRESULT CenterLine::Delete ( );
__declspec(implementation_key(5927)) HRESULT CenterLine::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(5928)) HRESULT CenterLine::Scale ( double Factor );
__declspec(implementation_key(5929)) HRESULT CenterLine::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(5930)) HRESULT CenterLine::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(5931)) IDispatchPtr CenterLine::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(5932)) IDispatchPtr CenterLine::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(5933)) HRESULT CenterLine::BringToFront ( );
__declspec(implementation_key(5934)) HRESULT CenterLine::BringForward ( );
__declspec(implementation_key(5935)) HRESULT CenterLine::SendToBack ( );
__declspec(implementation_key(5936)) HRESULT CenterLine::SendBackward ( );
__declspec(implementation_key(5937)) HRESULT CenterLine::Select ( );
__declspec(implementation_key(5938)) long CenterLine::GetKeyPointCount ( );
__declspec(implementation_key(5939)) HRESULT CenterLine::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(5940)) HRESULT CenterLine::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(5941)) HRESULT CenterLine::ConnectObjects ( IDispatch * * ConnectObject1, IDispatch * * ConnectObject2 );
__declspec(implementation_key(5942)) void CenterLine::PutLayer ( _bstr_t _arg1 );
__declspec(implementation_key(5943)) _bstr_t CenterLine::GetLayer ( );
__declspec(implementation_key(5944)) HRESULT CenterLine::SetCenter ( IDispatch * CenterObj, double x, double y, double z, VARIANT_BOOL keyPoint );
__declspec(implementation_key(5945)) HRESULT CenterLine::GetCenter ( IDispatch * * CenterObj, double * x, double * y, double * z, VARIANT_BOOL * keyPoint );
__declspec(implementation_key(5946)) HRESULT CenterLine::SetCenterPoint ( double x, double y, double z );
__declspec(implementation_key(5947)) HRESULT CenterLine::GetCenterPoint ( double * x, double * y, double * z );
__declspec(implementation_key(5948)) void CenterLine::PutPMIName ( _bstr_t _arg1 );
__declspec(implementation_key(5949)) _bstr_t CenterLine::GetPMIName ( );
__declspec(implementation_key(5950)) void CenterLine::PutHidePMI ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(5951)) VARIANT_BOOL CenterLine::GetHidePMI ( );
__declspec(implementation_key(5952)) IDispatchPtr CenterLine::GetPMIPlane ( );
__declspec(implementation_key(5953)) IDispatchPtr CenterLine::GetAttributeSets ( );
__declspec(implementation_key(5954)) VARIANT_BOOL CenterLine::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(5955)) TGFramework::ApplicationPtr _ICenterLinesAuto::GetApplication ( );
__declspec(implementation_key(5956)) long _ICenterLinesAuto::GetCount ( );
__declspec(implementation_key(5957)) IDispatchPtr _ICenterLinesAuto::GetParent ( );
__declspec(implementation_key(5958)) CenterLinePtr _ICenterLinesAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(5959)) IUnknownPtr _ICenterLinesAuto::Get_NewEnum ( );
__declspec(implementation_key(5960)) void _ICenterLinesAuto::PutPlane ( IDispatch * Plane );
__declspec(implementation_key(5961)) IDispatchPtr _ICenterLinesAuto::GetPlane ( );
__declspec(implementation_key(5962)) void _ICenterLinesAuto::PutStyle ( struct DimensionStyle * Style );
__declspec(implementation_key(5963)) DimensionStylePtr _ICenterLinesAuto::GetStyle ( );
__declspec(implementation_key(5964)) CenterLinePtr _ICenterLinesAuto::Add ( double x1, double y1, double z1, double x2, double y2, double z2 );
__declspec(implementation_key(5965)) CenterLinePtr _ICenterLinesAuto::AddByStart ( IDispatch * StartObject, double x1, double y1, double z1, VARIANT_BOOL keyPoint, double x2, double y2, double z2 );
__declspec(implementation_key(5966)) CenterLinePtr _ICenterLinesAuto::AddByEnd ( IDispatch * EndObject, double x1, double y1, double z1, VARIANT_BOOL keyPoint1, double x2, double y2, double z2 );
__declspec(implementation_key(5967)) CenterLinePtr _ICenterLinesAuto::AddByStartEnd ( IDispatch * StartObject, double x1, double y1, double z1, VARIANT_BOOL keyPoint1, IDispatch * EndObject, double x2, double y2, double z2, VARIANT_BOOL keyPoint2 );
__declspec(implementation_key(5968)) HRESULT _ICenterLinesAuto::ClearPlane ( );
__declspec(implementation_key(5969)) HRESULT _ICenterLinesAuto::ClearStyle ( );
__declspec(implementation_key(5970)) CenterLinePtr _ICenterLinesAuto::AddBetweenTwoParallelLines ( IDispatch * StartObject, IDispatch * EndObject );
__declspec(implementation_key(5971)) CenterLinePtr _ICenterLinesAuto::AddCenterArcBy3Points ( IDispatch * StartObject, double Start_X, double Start_Y, double Start_Z, VARIANT_BOOL Start_Keypoint, IDispatch * EndObject, double End_X, double End_Y, double End_Z, VARIANT_BOOL End_Keypoint, IDispatch * CenterObject, double Center_X, double Center_Y, double Center_Z, VARIANT_BOOL Center_Keypoint );
__declspec(implementation_key(5972)) CenterLinePtr _ICenterLinesAuto::AddCenterArcBy2Arcs ( IDispatch * StartObject, IDispatch * EndObject );
__declspec(implementation_key(5973)) CenterLinePtr _ICenterLinesAuto::AddBetweenTwoLines ( IDispatch * StartObject, IDispatch * EndObject );
__declspec(implementation_key(5974)) AnnotInitDataPtr _ICenterLinesAuto::GetAnnotInitData ( );
__declspec(implementation_key(5975)) CenterLinePtr _ICenterLinesAuto::AddCenterLine ( struct AnnotInitData * AnnotInitData, long bIsBy2Lines );
__declspec(implementation_key(5976)) CenterLinePtr _ICenterLinesAuto::AddCenterArc ( struct AnnotInitData * AnnotInitData );
__declspec(implementation_key(5977)) CenterLinePtr _ICenterLinesAuto::AddCenterAxis ( struct AnnotInitData * AnnotInitData );
__declspec(implementation_key(5978)) DimStylePtr _ICenterLineAuto::GetStyle ( );
__declspec(implementation_key(5979)) HRESULT _ICenterLineAuto::SetStart ( IDispatch * StartObj, double x, double y, double z, VARIANT_BOOL keyPoint );
__declspec(implementation_key(5980)) HRESULT _ICenterLineAuto::GetStart ( IDispatch * * StartObj, double * x, double * y, double * z, VARIANT_BOOL * keyPoint );
__declspec(implementation_key(5981)) HRESULT _ICenterLineAuto::SetStartPoint ( double x, double y, double z );
__declspec(implementation_key(5982)) HRESULT _ICenterLineAuto::GetStartPoint ( double * x, double * y, double * z );
__declspec(implementation_key(5983)) HRESULT _ICenterLineAuto::SetEnd ( IDispatch * ConnectObject, double x, double y, double z, VARIANT_BOOL keyPoint );
__declspec(implementation_key(5984)) HRESULT _ICenterLineAuto::GetEnd ( IDispatch * * ConnectObject, double * x, double * y, double * z, VARIANT_BOOL * keyPoint );
__declspec(implementation_key(5985)) HRESULT _ICenterLineAuto::SetEndPoint ( double x, double y, double z );
__declspec(implementation_key(5986)) HRESULT _ICenterLineAuto::GetEndPoint ( double * x, double * y, double * z );
__declspec(implementation_key(5987)) IDispatchPtr _ICenterLineAuto::GetPlane ( );
__declspec(implementation_key(5988)) enum DimCenterlineTypeConstants _ICenterLineAuto::GetCenterLineType ( );
__declspec(implementation_key(5989)) void _ICenterLineAuto::PutCenterLineType ( enum DimCenterlineTypeConstants Size );
__declspec(implementation_key(5990)) TGFramework::ApplicationPtr _ICenterLineAuto::GetApplication ( );
__declspec(implementation_key(5991)) long _ICenterLineAuto::GetIndex ( );
__declspec(implementation_key(5992)) _bstr_t _ICenterLineAuto::GetName ( const _variant_t & Recurse, long Lcid );
__declspec(implementation_key(5993)) IDispatchPtr _ICenterLineAuto::GetParent ( );
__declspec(implementation_key(5994)) long _ICenterLineAuto::GetType ( );
__declspec(implementation_key(5995)) long _ICenterLineAuto::GetZOrder ( );
__declspec(implementation_key(5996)) _bstr_t _ICenterLineAuto::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(5997)) IDispatchPtr _ICenterLineAuto::GetDocument ( );
__declspec(implementation_key(5998)) HRESULT _ICenterLineAuto::Copy ( );
__declspec(implementation_key(5999)) HRESULT _ICenterLineAuto::Cut ( );
__declspec(implementation_key(6000)) HRESULT _ICenterLineAuto::Delete ( );
__declspec(implementation_key(6001)) HRESULT _ICenterLineAuto::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(6002)) HRESULT _ICenterLineAuto::Scale ( double Factor );
__declspec(implementation_key(6003)) HRESULT _ICenterLineAuto::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(6004)) HRESULT _ICenterLineAuto::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(6005)) IDispatchPtr _ICenterLineAuto::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(6006)) IDispatchPtr _ICenterLineAuto::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(6007)) HRESULT _ICenterLineAuto::BringToFront ( );
__declspec(implementation_key(6008)) HRESULT _ICenterLineAuto::BringForward ( );
__declspec(implementation_key(6009)) HRESULT _ICenterLineAuto::SendToBack ( );
__declspec(implementation_key(6010)) HRESULT _ICenterLineAuto::SendBackward ( );
__declspec(implementation_key(6011)) HRESULT _ICenterLineAuto::Select ( );
__declspec(implementation_key(6012)) long _ICenterLineAuto::GetKeyPointCount ( );
__declspec(implementation_key(6013)) HRESULT _ICenterLineAuto::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(6014)) HRESULT _ICenterLineAuto::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(6015)) HRESULT _ICenterLineAuto::ConnectObjects ( IDispatch * * ConnectObject1, IDispatch * * ConnectObject2 );
__declspec(implementation_key(6016)) void _ICenterLineAuto::PutLayer ( _bstr_t Layer );
__declspec(implementation_key(6017)) _bstr_t _ICenterLineAuto::GetLayer ( );
__declspec(implementation_key(6018)) HRESULT _ICenterLineAuto::SetCenter ( IDispatch * CenterObj, double x, double y, double z, VARIANT_BOOL keyPoint );
__declspec(implementation_key(6019)) HRESULT _ICenterLineAuto::GetCenter ( IDispatch * * CenterObj, double * x, double * y, double * z, VARIANT_BOOL * keyPoint );
__declspec(implementation_key(6020)) HRESULT _ICenterLineAuto::SetCenterPoint ( double x, double y, double z );
__declspec(implementation_key(6021)) HRESULT _ICenterLineAuto::GetCenterPoint ( double * x, double * y, double * z );
__declspec(implementation_key(6022)) void _ICenterLineAuto::PutPMIName ( _bstr_t Text );
__declspec(implementation_key(6023)) _bstr_t _ICenterLineAuto::GetPMIName ( );
__declspec(implementation_key(6024)) void _ICenterLineAuto::PutHidePMI ( VARIANT_BOOL Value );
__declspec(implementation_key(6025)) VARIANT_BOOL _ICenterLineAuto::GetHidePMI ( );
__declspec(implementation_key(6026)) IDispatchPtr _ICenterLineAuto::GetPMIPlane ( );
__declspec(implementation_key(6027)) IDispatchPtr _ICenterLineAuto::GetAttributeSets ( );
__declspec(implementation_key(6028)) VARIANT_BOOL _ICenterLineAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(6029)) TGFramework::ApplicationPtr DatumTargets::GetApplication ( );
__declspec(implementation_key(6030)) long DatumTargets::GetCount ( );
__declspec(implementation_key(6031)) IDispatchPtr DatumTargets::GetParent ( );
__declspec(implementation_key(6032)) DatumTargetPtr DatumTargets::Item ( const _variant_t & Index );
__declspec(implementation_key(6033)) void DatumTargets::PutPlane ( IDispatch * _arg1 );
__declspec(implementation_key(6034)) IDispatchPtr DatumTargets::GetPlane ( );
__declspec(implementation_key(6035)) void DatumTargets::PutStyle ( struct DimensionStyle * _arg1 );
__declspec(implementation_key(6036)) DimensionStylePtr DatumTargets::GetStyle ( );
__declspec(implementation_key(6037)) DatumTargetPtr DatumTargets::Add ( double x1, double y1, double z1 );
__declspec(implementation_key(6038)) DatumTargetPtr DatumTargets::AddByTerminator ( IDispatch * TerminatorObject, double x1, double y1, double z1, VARIANT_BOOL keyPoint1 );
__declspec(implementation_key(6039)) HRESULT DatumTargets::ClearPlane ( );
__declspec(implementation_key(6040)) HRESULT DatumTargets::ClearStyle ( );
__declspec(implementation_key(6041)) AnnotInitDataPtr DatumTargets::GetAnnotInitData ( );
__declspec(implementation_key(6042)) DatumTargetPtr DatumTargets::AddDatumTarget ( struct AnnotInitData * AnnotInitData );
__declspec(implementation_key(6043)) DimStylePtr DatumTarget::GetStyle ( );
__declspec(implementation_key(6044)) _bstr_t DatumTarget::GetDatumReference ( );
__declspec(implementation_key(6045)) void DatumTarget::PutDatumReference ( _bstr_t _arg1 );
__declspec(implementation_key(6046)) double DatumTarget::GetDatumAreaSize ( );
__declspec(implementation_key(6047)) void DatumTarget::PutDatumAreaSize ( double _arg1 );
__declspec(implementation_key(6048)) HRESULT DatumTarget::SetTerminator ( IDispatch * TerminatorObj, double x, double y, double z, VARIANT_BOOL keyPoint );
__declspec(implementation_key(6049)) HRESULT DatumTarget::GetTerminator ( IDispatch * * TerminatorObj, double * x, double * y, double * z, VARIANT_BOOL * keyPoint );
__declspec(implementation_key(6050)) HRESULT DatumTarget::SetFreeSpacePoint ( double x, double y, double z );
__declspec(implementation_key(6051)) HRESULT DatumTarget::GetFreeSpacePoint ( double * x, double * y, double * z );
__declspec(implementation_key(6052)) enum DimDatumTargetLeaderTypeConstants DatumTarget::GetLeaderType ( );
__declspec(implementation_key(6053)) void DatumTarget::PutLeaderType ( enum DimDatumTargetLeaderTypeConstants _arg1 );
__declspec(implementation_key(6054)) VARIANT_BOOL DatumTarget::GetDatumAreaSizeDisplay ( );
__declspec(implementation_key(6055)) void DatumTarget::PutDatumAreaSizeDisplay ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6056)) TGFramework::ApplicationPtr DatumTarget::GetApplication ( );
__declspec(implementation_key(6057)) long DatumTarget::GetIndex ( );
__declspec(implementation_key(6058)) _bstr_t DatumTarget::GetName ( const _variant_t & Recurse );
__declspec(implementation_key(6059)) IDispatchPtr DatumTarget::GetParent ( );
__declspec(implementation_key(6060)) long DatumTarget::GetType ( );
__declspec(implementation_key(6061)) long DatumTarget::GetZOrder ( );
__declspec(implementation_key(6062)) _bstr_t DatumTarget::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(6063)) IDispatchPtr DatumTarget::GetDocument ( );
__declspec(implementation_key(6064)) HRESULT DatumTarget::Copy ( );
__declspec(implementation_key(6065)) HRESULT DatumTarget::Cut ( );
__declspec(implementation_key(6066)) HRESULT DatumTarget::Delete ( );
__declspec(implementation_key(6067)) HRESULT DatumTarget::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(6068)) HRESULT DatumTarget::Scale ( double Factor );
__declspec(implementation_key(6069)) HRESULT DatumTarget::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(6070)) HRESULT DatumTarget::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(6071)) IDispatchPtr DatumTarget::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(6072)) IDispatchPtr DatumTarget::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(6073)) HRESULT DatumTarget::BringToFront ( );
__declspec(implementation_key(6074)) HRESULT DatumTarget::BringForward ( );
__declspec(implementation_key(6075)) HRESULT DatumTarget::SendToBack ( );
__declspec(implementation_key(6076)) HRESULT DatumTarget::SendBackward ( );
__declspec(implementation_key(6077)) HRESULT DatumTarget::Select ( );
__declspec(implementation_key(6078)) double DatumTarget::GetBreakLineDistance ( );
__declspec(implementation_key(6079)) void DatumTarget::PutBreakLineDistance ( double _arg1 );
__declspec(implementation_key(6080)) VARIANT_BOOL DatumTarget::GetBreakLine ( );
__declspec(implementation_key(6081)) void DatumTarget::PutBreakLine ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6082)) VARIANT_BOOL DatumTarget::GetBreakLineDirection ( );
__declspec(implementation_key(6083)) void DatumTarget::PutBreakLineDirection ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6084)) VARIANT_BOOL DatumTarget::GetLeader ( );
__declspec(implementation_key(6085)) void DatumTarget::PutLeader ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6086)) long DatumTarget::GetVertexCount ( );
__declspec(implementation_key(6087)) HRESULT DatumTarget::GetVertices ( long * VertexCount, SAFEARRAY * * Vertices );
__declspec(implementation_key(6088)) HRESULT DatumTarget::SetVertices ( long VertexCount, SAFEARRAY * * Vertices );
__declspec(implementation_key(6089)) HRESULT DatumTarget::GetVertex ( long Index, double * x, double * y, double * z );
__declspec(implementation_key(6090)) HRESULT DatumTarget::SetVertex ( long Index, double x, double y, double z );
__declspec(implementation_key(6091)) HRESULT DatumTarget::InsertVertex ( long Index, double x, double y, double z );
__declspec(implementation_key(6092)) HRESULT DatumTarget::AddVertex ( double x, double y, double z );
__declspec(implementation_key(6093)) HRESULT DatumTarget::RemoveVertex ( long Index );
__declspec(implementation_key(6094)) long DatumTarget::GetKeyPointCount ( );
__declspec(implementation_key(6095)) HRESULT DatumTarget::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(6096)) HRESULT DatumTarget::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(6097)) IDispatchPtr DatumTarget::GetAttributeSets ( );
__declspec(implementation_key(6098)) VARIANT_BOOL DatumTarget::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(6099)) double DatumTarget::GetTextScale ( );
__declspec(implementation_key(6100)) void DatumTarget::PutTextScale ( double _arg1 );
__declspec(implementation_key(6101)) void DatumTarget::PutLayer ( _bstr_t _arg1 );
__declspec(implementation_key(6102)) _bstr_t DatumTarget::GetLayer ( );
__declspec(implementation_key(6103)) IDispatchPtr DatumTarget::GetPMIPlane ( );
__declspec(implementation_key(6104)) double DatumTarget::GetPMITrackDistance ( );
__declspec(implementation_key(6105)) void DatumTarget::PutPMITrackDistance ( double _arg1 );
__declspec(implementation_key(6106)) void DatumTarget::PutHidePMI ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6107)) VARIANT_BOOL DatumTarget::GetHidePMI ( );
__declspec(implementation_key(6108)) DisplayDataPtr DatumTarget::GetDisplayData ( );
__declspec(implementation_key(6109)) enum DimDatumTargetTypeConstants DatumTarget::GetDatumTargetType ( );
__declspec(implementation_key(6110)) void DatumTarget::PutDatumTargetType ( enum DimDatumTargetTypeConstants _arg1 );
__declspec(implementation_key(6111)) HRESULT DatumTarget::PromoteToCurrentVersion ( );
__declspec(implementation_key(6112)) HRESULT DatumTarget::SetAlignmentShape ( IDispatch * AlignmentShapeObj, double x, double y );
__declspec(implementation_key(6113)) HRESULT DatumTarget::GetAlignmentShape ( IDispatch * * AlignmentShapeObj, double * x, double * y );
__declspec(implementation_key(6114)) void DatumTarget::PutPMIName ( _bstr_t _arg1 );
__declspec(implementation_key(6115)) _bstr_t DatumTarget::GetPMIName ( );
__declspec(implementation_key(6116)) HRESULT DatumTarget::TransformToModelCoordinates ( double InputX, double InputY, double InputZ, double * ModelX, double * ModelY, double * ModelZ );
__declspec(implementation_key(6117)) VARIANT_BOOL DatumTarget::GetIsTerminatorAttachedToEntity ( );
__declspec(implementation_key(6118)) HRESULT DatumTarget::GetReferencedGeometry ( SAFEARRAY * * ReferencedGeometries );
__declspec(implementation_key(6119)) HRESULT DatumTarget::SetReferencedGeometry ( SAFEARRAY * * ReferencedGeometries );
__declspec(implementation_key(6120)) _bstr_t DatumTarget::GetDatumNumber ( );
__declspec(implementation_key(6121)) void DatumTarget::PutDatumNumber ( _bstr_t _arg1 );
__declspec(implementation_key(6122)) TGFramework::ApplicationPtr _IDatumTargetsAuto::GetApplication ( );
__declspec(implementation_key(6123)) long _IDatumTargetsAuto::GetCount ( );
__declspec(implementation_key(6124)) IDispatchPtr _IDatumTargetsAuto::GetParent ( );
__declspec(implementation_key(6125)) DatumTargetPtr _IDatumTargetsAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(6126)) IUnknownPtr _IDatumTargetsAuto::Get_NewEnum ( );
__declspec(implementation_key(6127)) void _IDatumTargetsAuto::PutPlane ( IDispatch * Plane );
__declspec(implementation_key(6128)) IDispatchPtr _IDatumTargetsAuto::GetPlane ( );
__declspec(implementation_key(6129)) void _IDatumTargetsAuto::PutStyle ( struct DimensionStyle * Style );
__declspec(implementation_key(6130)) DimensionStylePtr _IDatumTargetsAuto::GetStyle ( );
__declspec(implementation_key(6131)) DatumTargetPtr _IDatumTargetsAuto::Add ( double x1, double y1, double z1 );
__declspec(implementation_key(6132)) DatumTargetPtr _IDatumTargetsAuto::AddByTerminator ( IDispatch * TerminatorObject, double x1, double y1, double z1, VARIANT_BOOL keyPoint1 );
__declspec(implementation_key(6133)) HRESULT _IDatumTargetsAuto::ClearPlane ( );
__declspec(implementation_key(6134)) HRESULT _IDatumTargetsAuto::ClearStyle ( );
__declspec(implementation_key(6135)) AnnotInitDataPtr _IDatumTargetsAuto::GetAnnotInitData ( );
__declspec(implementation_key(6136)) DatumTargetPtr _IDatumTargetsAuto::AddDatumTarget ( struct AnnotInitData * AnnotInitData );
__declspec(implementation_key(6137)) DimStylePtr _IDatumTargetAuto::GetStyle ( );
__declspec(implementation_key(6138)) _bstr_t _IDatumTargetAuto::GetDatumReference ( );
__declspec(implementation_key(6139)) void _IDatumTargetAuto::PutDatumReference ( _bstr_t Text );
__declspec(implementation_key(6140)) double _IDatumTargetAuto::GetDatumAreaSize ( );
__declspec(implementation_key(6141)) void _IDatumTargetAuto::PutDatumAreaSize ( double Text );
__declspec(implementation_key(6142)) HRESULT _IDatumTargetAuto::SetTerminator ( IDispatch * TerminatorObj, double x, double y, double z, VARIANT_BOOL keyPoint );
__declspec(implementation_key(6143)) HRESULT _IDatumTargetAuto::GetTerminator ( IDispatch * * TerminatorObj, double * x, double * y, double * z, VARIANT_BOOL * keyPoint );
__declspec(implementation_key(6144)) HRESULT _IDatumTargetAuto::SetFreeSpacePoint ( double x, double y, double z );
__declspec(implementation_key(6145)) HRESULT _IDatumTargetAuto::GetFreeSpacePoint ( double * x, double * y, double * z );
__declspec(implementation_key(6146)) enum DimDatumTargetLeaderTypeConstants _IDatumTargetAuto::GetLeaderType ( );
__declspec(implementation_key(6147)) void _IDatumTargetAuto::PutLeaderType ( enum DimDatumTargetLeaderTypeConstants Size );
__declspec(implementation_key(6148)) VARIANT_BOOL _IDatumTargetAuto::GetDatumAreaSizeDisplay ( );
__declspec(implementation_key(6149)) void _IDatumTargetAuto::PutDatumAreaSizeDisplay ( VARIANT_BOOL Flag );
__declspec(implementation_key(6150)) TGFramework::ApplicationPtr _IDatumTargetAuto::GetApplication ( );
__declspec(implementation_key(6151)) long _IDatumTargetAuto::GetIndex ( );
__declspec(implementation_key(6152)) _bstr_t _IDatumTargetAuto::GetName ( const _variant_t & Recurse, long Lcid );
__declspec(implementation_key(6153)) IDispatchPtr _IDatumTargetAuto::GetParent ( );
__declspec(implementation_key(6154)) long _IDatumTargetAuto::GetType ( );
__declspec(implementation_key(6155)) long _IDatumTargetAuto::GetZOrder ( );
__declspec(implementation_key(6156)) _bstr_t _IDatumTargetAuto::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(6157)) IDispatchPtr _IDatumTargetAuto::GetDocument ( );
__declspec(implementation_key(6158)) HRESULT _IDatumTargetAuto::Copy ( );
__declspec(implementation_key(6159)) HRESULT _IDatumTargetAuto::Cut ( );
__declspec(implementation_key(6160)) HRESULT _IDatumTargetAuto::Delete ( );
__declspec(implementation_key(6161)) HRESULT _IDatumTargetAuto::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(6162)) HRESULT _IDatumTargetAuto::Scale ( double Factor );
__declspec(implementation_key(6163)) HRESULT _IDatumTargetAuto::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(6164)) HRESULT _IDatumTargetAuto::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(6165)) IDispatchPtr _IDatumTargetAuto::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(6166)) IDispatchPtr _IDatumTargetAuto::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(6167)) HRESULT _IDatumTargetAuto::BringToFront ( );
__declspec(implementation_key(6168)) HRESULT _IDatumTargetAuto::BringForward ( );
__declspec(implementation_key(6169)) HRESULT _IDatumTargetAuto::SendToBack ( );
__declspec(implementation_key(6170)) HRESULT _IDatumTargetAuto::SendBackward ( );
__declspec(implementation_key(6171)) HRESULT _IDatumTargetAuto::Select ( );
__declspec(implementation_key(6172)) double _IDatumTargetAuto::GetBreakLineDistance ( );
__declspec(implementation_key(6173)) void _IDatumTargetAuto::PutBreakLineDistance ( double Distance );
__declspec(implementation_key(6174)) VARIANT_BOOL _IDatumTargetAuto::GetBreakLine ( );
__declspec(implementation_key(6175)) void _IDatumTargetAuto::PutBreakLine ( VARIANT_BOOL Flag );
__declspec(implementation_key(6176)) VARIANT_BOOL _IDatumTargetAuto::GetBreakLineDirection ( );
__declspec(implementation_key(6177)) void _IDatumTargetAuto::PutBreakLineDirection ( VARIANT_BOOL Flag );
__declspec(implementation_key(6178)) VARIANT_BOOL _IDatumTargetAuto::GetLeader ( );
__declspec(implementation_key(6179)) void _IDatumTargetAuto::PutLeader ( VARIANT_BOOL Flag );
__declspec(implementation_key(6180)) long _IDatumTargetAuto::GetVertexCount ( );
__declspec(implementation_key(6181)) HRESULT _IDatumTargetAuto::GetVertices ( long * VertexCount, SAFEARRAY * * Vertices );
__declspec(implementation_key(6182)) HRESULT _IDatumTargetAuto::SetVertices ( long VertexCount, SAFEARRAY * * Vertices );
__declspec(implementation_key(6183)) HRESULT _IDatumTargetAuto::GetVertex ( long Index, double * x, double * y, double * z );
__declspec(implementation_key(6184)) HRESULT _IDatumTargetAuto::SetVertex ( long Index, double x, double y, double z );
__declspec(implementation_key(6185)) HRESULT _IDatumTargetAuto::InsertVertex ( long Index, double x, double y, double z );
__declspec(implementation_key(6186)) HRESULT _IDatumTargetAuto::AddVertex ( double x, double y, double z );
__declspec(implementation_key(6187)) HRESULT _IDatumTargetAuto::RemoveVertex ( long Index );
__declspec(implementation_key(6188)) long _IDatumTargetAuto::GetKeyPointCount ( );
__declspec(implementation_key(6189)) HRESULT _IDatumTargetAuto::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(6190)) HRESULT _IDatumTargetAuto::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(6191)) IDispatchPtr _IDatumTargetAuto::GetAttributeSets ( );
__declspec(implementation_key(6192)) VARIANT_BOOL _IDatumTargetAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(6193)) double _IDatumTargetAuto::GetTextScale ( );
__declspec(implementation_key(6194)) void _IDatumTargetAuto::PutTextScale ( double pdAngle );
__declspec(implementation_key(6195)) void _IDatumTargetAuto::PutLayer ( _bstr_t Layer );
__declspec(implementation_key(6196)) _bstr_t _IDatumTargetAuto::GetLayer ( );
__declspec(implementation_key(6197)) IDispatchPtr _IDatumTargetAuto::GetPMIPlane ( );
__declspec(implementation_key(6198)) double _IDatumTargetAuto::GetPMITrackDistance ( );
__declspec(implementation_key(6199)) void _IDatumTargetAuto::PutPMITrackDistance ( double pdPMITrackDistance );
__declspec(implementation_key(6200)) void _IDatumTargetAuto::PutHidePMI ( VARIANT_BOOL Value );
__declspec(implementation_key(6201)) VARIANT_BOOL _IDatumTargetAuto::GetHidePMI ( );
__declspec(implementation_key(6202)) DisplayDataPtr _IDatumTargetAuto::GetDisplayData ( );
__declspec(implementation_key(6203)) enum DimDatumTargetTypeConstants _IDatumTargetAuto::GetDatumTargetType ( );
__declspec(implementation_key(6204)) void _IDatumTargetAuto::PutDatumTargetType ( enum DimDatumTargetTypeConstants Type );
__declspec(implementation_key(6205)) HRESULT _IDatumTargetAuto::PromoteToCurrentVersion ( );
__declspec(implementation_key(6206)) HRESULT _IDatumTargetAuto::SetAlignmentShape ( IDispatch * AlignmentShapeObj, double x, double y );
__declspec(implementation_key(6207)) HRESULT _IDatumTargetAuto::GetAlignmentShape ( IDispatch * * AlignmentShapeObj, double * x, double * y );
__declspec(implementation_key(6208)) void _IDatumTargetAuto::PutPMIName ( _bstr_t Text );
__declspec(implementation_key(6209)) _bstr_t _IDatumTargetAuto::GetPMIName ( );
__declspec(implementation_key(6210)) HRESULT _IDatumTargetAuto::TransformToModelCoordinates ( double InputX, double InputY, double InputZ, double * ModelX, double * ModelY, double * ModelZ );
__declspec(implementation_key(6211)) VARIANT_BOOL _IDatumTargetAuto::GetIsTerminatorAttachedToEntity ( );
__declspec(implementation_key(6212)) HRESULT _IDatumTargetAuto::GetReferencedGeometry ( SAFEARRAY * * ReferencedGeometries );
__declspec(implementation_key(6213)) HRESULT _IDatumTargetAuto::SetReferencedGeometry ( SAFEARRAY * * ReferencedGeometries );
__declspec(implementation_key(6214)) _bstr_t _IDatumTargetAuto::GetDatumNumber ( );
__declspec(implementation_key(6215)) void _IDatumTargetAuto::PutDatumNumber ( _bstr_t Text );
__declspec(implementation_key(6216)) TGFramework::ApplicationPtr PinSymbols::GetApplication ( );
__declspec(implementation_key(6217)) long PinSymbols::GetCount ( );
__declspec(implementation_key(6218)) IDispatchPtr PinSymbols::GetParent ( );
__declspec(implementation_key(6219)) PinSymbolPtr PinSymbols::Item ( const _variant_t & Index );
__declspec(implementation_key(6220)) void PinSymbols::PutPlane ( IDispatch * _arg1 );
__declspec(implementation_key(6221)) IDispatchPtr PinSymbols::GetPlane ( );
__declspec(implementation_key(6222)) void PinSymbols::PutStyle ( struct DimensionStyle * _arg1 );
__declspec(implementation_key(6223)) DimensionStylePtr PinSymbols::GetStyle ( );
__declspec(implementation_key(6224)) PinSymbolPtr PinSymbols::Add ( double x1, double y1, double z1 );
__declspec(implementation_key(6225)) PinSymbolPtr PinSymbols::AddByTerminator ( IDispatch * TerminatorObject, double x1, double y1, double z1, VARIANT_BOOL keyPoint1 );
__declspec(implementation_key(6226)) HRESULT PinSymbols::ClearPlane ( );
__declspec(implementation_key(6227)) HRESULT PinSymbols::ClearStyle ( );
__declspec(implementation_key(6228)) AnnotInitDataPtr PinSymbols::GetAnnotInitData ( );
__declspec(implementation_key(6229)) PinSymbolPtr PinSymbols::AddPinSymbol ( struct AnnotInitData * AnnotInitData );
__declspec(implementation_key(6230)) DimStylePtr PinSymbol::GetStyle ( );
__declspec(implementation_key(6231)) _bstr_t PinSymbol::GetDatumReference ( );
__declspec(implementation_key(6232)) void PinSymbol::PutDatumReference ( _bstr_t _arg1 );
__declspec(implementation_key(6233)) HRESULT PinSymbol::SetTerminator ( IDispatch * TerminatorObj, double x, double y, double z, VARIANT_BOOL keyPoint );
__declspec(implementation_key(6234)) HRESULT PinSymbol::GetTerminator ( IDispatch * * TerminatorObj, double * x, double * y, double * z, VARIANT_BOOL * keyPoint );
__declspec(implementation_key(6235)) HRESULT PinSymbol::SetFreeSpacePoint ( double x, double y, double z );
__declspec(implementation_key(6236)) HRESULT PinSymbol::GetFreeSpacePoint ( double * x, double * y, double * z );
__declspec(implementation_key(6237)) void PinSymbol::PutPinSymbolTempRadius ( double _arg1 );
__declspec(implementation_key(6238)) double PinSymbol::GetPinSymbolTempRadius ( );
__declspec(implementation_key(6239)) void PinSymbol::PutPinSymbolTempStyle ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6240)) VARIANT_BOOL PinSymbol::GetPinSymbolTempStyle ( );
__declspec(implementation_key(6241)) TGFramework::ApplicationPtr PinSymbol::GetApplication ( );
__declspec(implementation_key(6242)) long PinSymbol::GetIndex ( );
__declspec(implementation_key(6243)) _bstr_t PinSymbol::GetName ( const _variant_t & Recurse );
__declspec(implementation_key(6244)) IDispatchPtr PinSymbol::GetParent ( );
__declspec(implementation_key(6245)) long PinSymbol::GetType ( );
__declspec(implementation_key(6246)) long PinSymbol::GetZOrder ( );
__declspec(implementation_key(6247)) _bstr_t PinSymbol::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(6248)) IDispatchPtr PinSymbol::GetDocument ( );
__declspec(implementation_key(6249)) HRESULT PinSymbol::Copy ( );
__declspec(implementation_key(6250)) HRESULT PinSymbol::Cut ( );
__declspec(implementation_key(6251)) HRESULT PinSymbol::Delete ( );
__declspec(implementation_key(6252)) HRESULT PinSymbol::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(6253)) HRESULT PinSymbol::Scale ( double Factor );
__declspec(implementation_key(6254)) HRESULT PinSymbol::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(6255)) HRESULT PinSymbol::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(6256)) IDispatchPtr PinSymbol::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(6257)) IDispatchPtr PinSymbol::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(6258)) HRESULT PinSymbol::BringToFront ( );
__declspec(implementation_key(6259)) HRESULT PinSymbol::BringForward ( );
__declspec(implementation_key(6260)) HRESULT PinSymbol::SendToBack ( );
__declspec(implementation_key(6261)) HRESULT PinSymbol::SendBackward ( );
__declspec(implementation_key(6262)) HRESULT PinSymbol::Select ( );
__declspec(implementation_key(6263)) double PinSymbol::GetBreakLineDistance ( );
__declspec(implementation_key(6264)) void PinSymbol::PutBreakLineDistance ( double _arg1 );
__declspec(implementation_key(6265)) VARIANT_BOOL PinSymbol::GetBreakLine ( );
__declspec(implementation_key(6266)) void PinSymbol::PutBreakLine ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6267)) VARIANT_BOOL PinSymbol::GetBreakLineDirection ( );
__declspec(implementation_key(6268)) void PinSymbol::PutBreakLineDirection ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6269)) VARIANT_BOOL PinSymbol::GetLeader ( );
__declspec(implementation_key(6270)) void PinSymbol::PutLeader ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6271)) long PinSymbol::GetVertexCount ( );
__declspec(implementation_key(6272)) HRESULT PinSymbol::GetVertices ( long * VertexCount, SAFEARRAY * * Vertices );
__declspec(implementation_key(6273)) HRESULT PinSymbol::SetVertices ( long VertexCount, SAFEARRAY * * Vertices );
__declspec(implementation_key(6274)) HRESULT PinSymbol::GetVertex ( long Index, double * x, double * y, double * z );
__declspec(implementation_key(6275)) HRESULT PinSymbol::SetVertex ( long Index, double x, double y, double z );
__declspec(implementation_key(6276)) HRESULT PinSymbol::InsertVertex ( long Index, double x, double y, double z );
__declspec(implementation_key(6277)) HRESULT PinSymbol::AddVertex ( double x, double y, double z );
__declspec(implementation_key(6278)) HRESULT PinSymbol::RemoveVertex ( long Index );
__declspec(implementation_key(6279)) long PinSymbol::GetKeyPointCount ( );
__declspec(implementation_key(6280)) HRESULT PinSymbol::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(6281)) HRESULT PinSymbol::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(6282)) IDispatchPtr PinSymbol::GetAttributeSets ( );
__declspec(implementation_key(6283)) VARIANT_BOOL PinSymbol::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(6284)) double PinSymbol::GetTextScale ( );
__declspec(implementation_key(6285)) void PinSymbol::PutTextScale ( double _arg1 );
__declspec(implementation_key(6286)) void PinSymbol::PutLayer ( _bstr_t _arg1 );
__declspec(implementation_key(6287)) _bstr_t PinSymbol::GetLayer ( );
__declspec(implementation_key(6288)) IDispatchPtr PinSymbol::GetPMIPlane ( );
__declspec(implementation_key(6289)) double PinSymbol::GetPMITrackDistance ( );
__declspec(implementation_key(6290)) void PinSymbol::PutPMITrackDistance ( double _arg1 );
__declspec(implementation_key(6291)) void PinSymbol::PutHidePMI ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6292)) VARIANT_BOOL PinSymbol::GetHidePMI ( );
__declspec(implementation_key(6293)) DisplayDataPtr PinSymbol::GetDisplayData ( );
__declspec(implementation_key(6294)) HRESULT PinSymbol::PromoteToCurrentVersion ( );
__declspec(implementation_key(6295)) HRESULT PinSymbol::SetAlignmentShape ( IDispatch * AlignmentShapeObj, double x, double y );
__declspec(implementation_key(6296)) HRESULT PinSymbol::GetAlignmentShape ( IDispatch * * AlignmentShapeObj, double * x, double * y );
__declspec(implementation_key(6297)) void PinSymbol::PutPMIName ( _bstr_t _arg1 );
__declspec(implementation_key(6298)) _bstr_t PinSymbol::GetPMIName ( );
__declspec(implementation_key(6299)) HRESULT PinSymbol::TransformToModelCoordinates ( double InputX, double InputY, double InputZ, double * ModelX, double * ModelY, double * ModelZ );
__declspec(implementation_key(6300)) VARIANT_BOOL PinSymbol::GetIsTerminatorAttachedToEntity ( );
__declspec(implementation_key(6301)) HRESULT PinSymbol::GetReferencedGeometry ( SAFEARRAY * * ReferencedGeometries );
__declspec(implementation_key(6302)) HRESULT PinSymbol::SetReferencedGeometry ( SAFEARRAY * * ReferencedGeometries );
__declspec(implementation_key(6303)) TGFramework::ApplicationPtr _IPinSymbolsAuto::GetApplication ( );
__declspec(implementation_key(6304)) long _IPinSymbolsAuto::GetCount ( );
__declspec(implementation_key(6305)) IDispatchPtr _IPinSymbolsAuto::GetParent ( );
__declspec(implementation_key(6306)) PinSymbolPtr _IPinSymbolsAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(6307)) IUnknownPtr _IPinSymbolsAuto::Get_NewEnum ( );
__declspec(implementation_key(6308)) void _IPinSymbolsAuto::PutPlane ( IDispatch * Plane );
__declspec(implementation_key(6309)) IDispatchPtr _IPinSymbolsAuto::GetPlane ( );
__declspec(implementation_key(6310)) void _IPinSymbolsAuto::PutStyle ( struct DimensionStyle * Style );
__declspec(implementation_key(6311)) DimensionStylePtr _IPinSymbolsAuto::GetStyle ( );
__declspec(implementation_key(6312)) PinSymbolPtr _IPinSymbolsAuto::Add ( double x1, double y1, double z1 );
__declspec(implementation_key(6313)) PinSymbolPtr _IPinSymbolsAuto::AddByTerminator ( IDispatch * TerminatorObject, double x1, double y1, double z1, VARIANT_BOOL keyPoint1 );
__declspec(implementation_key(6314)) HRESULT _IPinSymbolsAuto::ClearPlane ( );
__declspec(implementation_key(6315)) HRESULT _IPinSymbolsAuto::ClearStyle ( );
__declspec(implementation_key(6316)) AnnotInitDataPtr _IPinSymbolsAuto::GetAnnotInitData ( );
__declspec(implementation_key(6317)) PinSymbolPtr _IPinSymbolsAuto::AddPinSymbol ( struct AnnotInitData * AnnotInitData );
__declspec(implementation_key(6318)) DimStylePtr _IPinSymbolAuto::GetStyle ( );
__declspec(implementation_key(6319)) _bstr_t _IPinSymbolAuto::GetDatumReference ( );
__declspec(implementation_key(6320)) void _IPinSymbolAuto::PutDatumReference ( _bstr_t Text );
__declspec(implementation_key(6321)) HRESULT _IPinSymbolAuto::SetTerminator ( IDispatch * TerminatorObj, double x, double y, double z, VARIANT_BOOL keyPoint );
__declspec(implementation_key(6322)) HRESULT _IPinSymbolAuto::GetTerminator ( IDispatch * * TerminatorObj, double * x, double * y, double * z, VARIANT_BOOL * keyPoint );
__declspec(implementation_key(6323)) HRESULT _IPinSymbolAuto::SetFreeSpacePoint ( double x, double y, double z );
__declspec(implementation_key(6324)) HRESULT _IPinSymbolAuto::GetFreeSpacePoint ( double * x, double * y, double * z );
__declspec(implementation_key(6325)) void _IPinSymbolAuto::PutPinSymbolTempRadius ( double Radius );
__declspec(implementation_key(6326)) double _IPinSymbolAuto::GetPinSymbolTempRadius ( );
__declspec(implementation_key(6327)) void _IPinSymbolAuto::PutPinSymbolTempStyle ( VARIANT_BOOL Style );
__declspec(implementation_key(6328)) VARIANT_BOOL _IPinSymbolAuto::GetPinSymbolTempStyle ( );
__declspec(implementation_key(6329)) TGFramework::ApplicationPtr _IPinSymbolAuto::GetApplication ( );
__declspec(implementation_key(6330)) long _IPinSymbolAuto::GetIndex ( );
__declspec(implementation_key(6331)) _bstr_t _IPinSymbolAuto::GetName ( const _variant_t & Recurse, long Lcid );
__declspec(implementation_key(6332)) IDispatchPtr _IPinSymbolAuto::GetParent ( );
__declspec(implementation_key(6333)) long _IPinSymbolAuto::GetType ( );
__declspec(implementation_key(6334)) long _IPinSymbolAuto::GetZOrder ( );
__declspec(implementation_key(6335)) _bstr_t _IPinSymbolAuto::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(6336)) IDispatchPtr _IPinSymbolAuto::GetDocument ( );
__declspec(implementation_key(6337)) HRESULT _IPinSymbolAuto::Copy ( );
__declspec(implementation_key(6338)) HRESULT _IPinSymbolAuto::Cut ( );
__declspec(implementation_key(6339)) HRESULT _IPinSymbolAuto::Delete ( );
__declspec(implementation_key(6340)) HRESULT _IPinSymbolAuto::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(6341)) HRESULT _IPinSymbolAuto::Scale ( double Factor );
__declspec(implementation_key(6342)) HRESULT _IPinSymbolAuto::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(6343)) HRESULT _IPinSymbolAuto::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(6344)) IDispatchPtr _IPinSymbolAuto::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(6345)) IDispatchPtr _IPinSymbolAuto::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(6346)) HRESULT _IPinSymbolAuto::BringToFront ( );
__declspec(implementation_key(6347)) HRESULT _IPinSymbolAuto::BringForward ( );
__declspec(implementation_key(6348)) HRESULT _IPinSymbolAuto::SendToBack ( );
__declspec(implementation_key(6349)) HRESULT _IPinSymbolAuto::SendBackward ( );
__declspec(implementation_key(6350)) HRESULT _IPinSymbolAuto::Select ( );
__declspec(implementation_key(6351)) double _IPinSymbolAuto::GetBreakLineDistance ( );
__declspec(implementation_key(6352)) void _IPinSymbolAuto::PutBreakLineDistance ( double Distance );
__declspec(implementation_key(6353)) VARIANT_BOOL _IPinSymbolAuto::GetBreakLine ( );
__declspec(implementation_key(6354)) void _IPinSymbolAuto::PutBreakLine ( VARIANT_BOOL Flag );
__declspec(implementation_key(6355)) VARIANT_BOOL _IPinSymbolAuto::GetBreakLineDirection ( );
__declspec(implementation_key(6356)) void _IPinSymbolAuto::PutBreakLineDirection ( VARIANT_BOOL Flag );
__declspec(implementation_key(6357)) VARIANT_BOOL _IPinSymbolAuto::GetLeader ( );
__declspec(implementation_key(6358)) void _IPinSymbolAuto::PutLeader ( VARIANT_BOOL Flag );
__declspec(implementation_key(6359)) long _IPinSymbolAuto::GetVertexCount ( );
__declspec(implementation_key(6360)) HRESULT _IPinSymbolAuto::GetVertices ( long * VertexCount, SAFEARRAY * * Vertices );
__declspec(implementation_key(6361)) HRESULT _IPinSymbolAuto::SetVertices ( long VertexCount, SAFEARRAY * * Vertices );
__declspec(implementation_key(6362)) HRESULT _IPinSymbolAuto::GetVertex ( long Index, double * x, double * y, double * z );
__declspec(implementation_key(6363)) HRESULT _IPinSymbolAuto::SetVertex ( long Index, double x, double y, double z );
__declspec(implementation_key(6364)) HRESULT _IPinSymbolAuto::InsertVertex ( long Index, double x, double y, double z );
__declspec(implementation_key(6365)) HRESULT _IPinSymbolAuto::AddVertex ( double x, double y, double z );
__declspec(implementation_key(6366)) HRESULT _IPinSymbolAuto::RemoveVertex ( long Index );
__declspec(implementation_key(6367)) long _IPinSymbolAuto::GetKeyPointCount ( );
__declspec(implementation_key(6368)) HRESULT _IPinSymbolAuto::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(6369)) HRESULT _IPinSymbolAuto::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(6370)) IDispatchPtr _IPinSymbolAuto::GetAttributeSets ( );
__declspec(implementation_key(6371)) VARIANT_BOOL _IPinSymbolAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(6372)) double _IPinSymbolAuto::GetTextScale ( );
__declspec(implementation_key(6373)) void _IPinSymbolAuto::PutTextScale ( double pdAngle );
__declspec(implementation_key(6374)) void _IPinSymbolAuto::PutLayer ( _bstr_t Layer );
__declspec(implementation_key(6375)) _bstr_t _IPinSymbolAuto::GetLayer ( );
__declspec(implementation_key(6376)) IDispatchPtr _IPinSymbolAuto::GetPMIPlane ( );
__declspec(implementation_key(6377)) double _IPinSymbolAuto::GetPMITrackDistance ( );
__declspec(implementation_key(6378)) void _IPinSymbolAuto::PutPMITrackDistance ( double pdPMITrackDistance );
__declspec(implementation_key(6379)) void _IPinSymbolAuto::PutHidePMI ( VARIANT_BOOL Value );
__declspec(implementation_key(6380)) VARIANT_BOOL _IPinSymbolAuto::GetHidePMI ( );
__declspec(implementation_key(6381)) DisplayDataPtr _IPinSymbolAuto::GetDisplayData ( );
__declspec(implementation_key(6382)) HRESULT _IPinSymbolAuto::PromoteToCurrentVersion ( );
__declspec(implementation_key(6383)) HRESULT _IPinSymbolAuto::SetAlignmentShape ( IDispatch * AlignmentShapeObj, double x, double y );
__declspec(implementation_key(6384)) HRESULT _IPinSymbolAuto::GetAlignmentShape ( IDispatch * * AlignmentShapeObj, double * x, double * y );
__declspec(implementation_key(6385)) void _IPinSymbolAuto::PutPMIName ( _bstr_t Text );
__declspec(implementation_key(6386)) _bstr_t _IPinSymbolAuto::GetPMIName ( );
__declspec(implementation_key(6387)) HRESULT _IPinSymbolAuto::TransformToModelCoordinates ( double InputX, double InputY, double InputZ, double * ModelX, double * ModelY, double * ModelZ );
__declspec(implementation_key(6388)) VARIANT_BOOL _IPinSymbolAuto::GetIsTerminatorAttachedToEntity ( );
__declspec(implementation_key(6389)) HRESULT _IPinSymbolAuto::GetReferencedGeometry ( SAFEARRAY * * ReferencedGeometries );
__declspec(implementation_key(6390)) HRESULT _IPinSymbolAuto::SetReferencedGeometry ( SAFEARRAY * * ReferencedGeometries );
__declspec(implementation_key(6391)) TGFramework::ApplicationPtr DatumPoints::GetApplication ( );
__declspec(implementation_key(6392)) long DatumPoints::GetCount ( );
__declspec(implementation_key(6393)) IDispatchPtr DatumPoints::GetParent ( );
__declspec(implementation_key(6394)) DatumPointPtr DatumPoints::Item ( const _variant_t & Index );
__declspec(implementation_key(6395)) void DatumPoints::PutPlane ( IDispatch * _arg1 );
__declspec(implementation_key(6396)) IDispatchPtr DatumPoints::GetPlane ( );
__declspec(implementation_key(6397)) void DatumPoints::PutStyle ( struct DimensionStyle * _arg1 );
__declspec(implementation_key(6398)) DimensionStylePtr DatumPoints::GetStyle ( );
__declspec(implementation_key(6399)) void DatumPoints::PutAxis ( IDispatch * _arg1 );
__declspec(implementation_key(6400)) IDispatchPtr DatumPoints::GetAxis ( );
__declspec(implementation_key(6401)) DatumPointPtr DatumPoints::Add ( double x1, double y1, double z1 );
__declspec(implementation_key(6402)) DatumPointPtr DatumPoints::AddByElement ( IDispatch * TerminatorObject, double x1, double y1, double z1, VARIANT_BOOL keyPoint1 );
__declspec(implementation_key(6403)) HRESULT DatumPoints::ClearPlane ( );
__declspec(implementation_key(6404)) HRESULT DatumPoints::ClearStyle ( );
__declspec(implementation_key(6405)) AnnotInitDataPtr DatumPoints::GetAnnotInitData ( );
__declspec(implementation_key(6406)) DatumPointPtr DatumPoints::AddDatumPoint ( struct AnnotInitData * AnnotInitData );
__declspec(implementation_key(6407)) DimStylePtr DatumPoint::GetStyle ( );
__declspec(implementation_key(6408)) IDispatchPtr DatumPoint::GetPlane ( );
__declspec(implementation_key(6409)) double DatumPoint::GetAreaSize ( );
__declspec(implementation_key(6410)) void DatumPoint::PutAreaSize ( double _arg1 );
__declspec(implementation_key(6411)) enum DimDatumPointTypeConstants DatumPoint::GetPointType ( );
__declspec(implementation_key(6412)) void DatumPoint::PutPointType ( enum DimDatumPointTypeConstants _arg1 );
__declspec(implementation_key(6413)) HRESULT DatumPoint::SetElement ( IDispatch * CenterObj, double x, double y, double z, VARIANT_BOOL keyPoint );
__declspec(implementation_key(6414)) HRESULT DatumPoint::GetElement ( IDispatch * * CenterObj, double * x, double * y, double * z, VARIANT_BOOL * keyPoint );
__declspec(implementation_key(6415)) HRESULT DatumPoint::SetCenter ( double x, double y, double z );
__declspec(implementation_key(6416)) HRESULT DatumPoint::GetCenter ( double * x, double * y, double * z );
__declspec(implementation_key(6417)) HRESULT DatumPoint::SetFreeSpacePoint ( double x, double y, double z );
__declspec(implementation_key(6418)) HRESULT DatumPoint::GetFreeSpacePoint ( double * x, double * y, double * z );
__declspec(implementation_key(6419)) TGFramework::ApplicationPtr DatumPoint::GetApplication ( );
__declspec(implementation_key(6420)) long DatumPoint::GetIndex ( );
__declspec(implementation_key(6421)) _bstr_t DatumPoint::GetName ( const _variant_t & Recurse );
__declspec(implementation_key(6422)) IDispatchPtr DatumPoint::GetParent ( );
__declspec(implementation_key(6423)) long DatumPoint::GetType ( );
__declspec(implementation_key(6424)) long DatumPoint::GetZOrder ( );
__declspec(implementation_key(6425)) _bstr_t DatumPoint::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(6426)) IDispatchPtr DatumPoint::GetDocument ( );
__declspec(implementation_key(6427)) HRESULT DatumPoint::Copy ( );
__declspec(implementation_key(6428)) HRESULT DatumPoint::Cut ( );
__declspec(implementation_key(6429)) HRESULT DatumPoint::Delete ( );
__declspec(implementation_key(6430)) HRESULT DatumPoint::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(6431)) HRESULT DatumPoint::Scale ( double Factor );
__declspec(implementation_key(6432)) HRESULT DatumPoint::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(6433)) HRESULT DatumPoint::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(6434)) IDispatchPtr DatumPoint::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(6435)) IDispatchPtr DatumPoint::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(6436)) HRESULT DatumPoint::BringToFront ( );
__declspec(implementation_key(6437)) HRESULT DatumPoint::BringForward ( );
__declspec(implementation_key(6438)) HRESULT DatumPoint::SendToBack ( );
__declspec(implementation_key(6439)) HRESULT DatumPoint::SendBackward ( );
__declspec(implementation_key(6440)) HRESULT DatumPoint::Select ( );
__declspec(implementation_key(6441)) long DatumPoint::GetKeyPointCount ( );
__declspec(implementation_key(6442)) HRESULT DatumPoint::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(6443)) HRESULT DatumPoint::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(6444)) IDispatchPtr DatumPoint::GetAttributeSets ( );
__declspec(implementation_key(6445)) VARIANT_BOOL DatumPoint::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(6446)) double DatumPoint::GetTextScale ( );
__declspec(implementation_key(6447)) void DatumPoint::PutTextScale ( double _arg1 );
__declspec(implementation_key(6448)) void DatumPoint::PutLayer ( _bstr_t _arg1 );
__declspec(implementation_key(6449)) _bstr_t DatumPoint::GetLayer ( );
__declspec(implementation_key(6450)) IDispatchPtr DatumPoint::GetPMIPlane ( );
__declspec(implementation_key(6451)) double DatumPoint::GetPMITrackDistance ( );
__declspec(implementation_key(6452)) void DatumPoint::PutPMITrackDistance ( double _arg1 );
__declspec(implementation_key(6453)) void DatumPoint::PutHidePMI ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6454)) VARIANT_BOOL DatumPoint::GetHidePMI ( );
__declspec(implementation_key(6455)) DisplayDataPtr DatumPoint::GetDisplayData ( );
__declspec(implementation_key(6456)) HRESULT DatumPoint::SetRectangularDatumPointWidthAndHeight ( double dWidth, double dHeight );
__declspec(implementation_key(6457)) HRESULT DatumPoint::GetRectangularDatumPointWidthAndHeight ( double * pdWidth, double * pdHeight );
__declspec(implementation_key(6458)) HRESULT DatumPoint::PromoteToCurrentVersion ( );
__declspec(implementation_key(6459)) void DatumPoint::PutPMIName ( _bstr_t _arg1 );
__declspec(implementation_key(6460)) _bstr_t DatumPoint::GetPMIName ( );
__declspec(implementation_key(6461)) HRESULT DatumPoint::TransformToModelCoordinates ( double InputX, double InputY, double InputZ, double * ModelX, double * ModelY, double * ModelZ );
__declspec(implementation_key(6462)) HRESULT DatumPoint::GetReferencedGeometry ( SAFEARRAY * * ReferencedGeometries );
__declspec(implementation_key(6463)) HRESULT DatumPoint::SetReferencedGeometry ( SAFEARRAY * * ReferencedGeometries );
__declspec(implementation_key(6464)) TGFramework::ApplicationPtr _IDatumPointsAuto::GetApplication ( );
__declspec(implementation_key(6465)) long _IDatumPointsAuto::GetCount ( );
__declspec(implementation_key(6466)) IDispatchPtr _IDatumPointsAuto::GetParent ( );
__declspec(implementation_key(6467)) DatumPointPtr _IDatumPointsAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(6468)) IUnknownPtr _IDatumPointsAuto::Get_NewEnum ( );
__declspec(implementation_key(6469)) void _IDatumPointsAuto::PutPlane ( IDispatch * Plane );
__declspec(implementation_key(6470)) IDispatchPtr _IDatumPointsAuto::GetPlane ( );
__declspec(implementation_key(6471)) void _IDatumPointsAuto::PutStyle ( struct DimensionStyle * Style );
__declspec(implementation_key(6472)) DimensionStylePtr _IDatumPointsAuto::GetStyle ( );
__declspec(implementation_key(6473)) void _IDatumPointsAuto::PutAxis ( IDispatch * Axis );
__declspec(implementation_key(6474)) IDispatchPtr _IDatumPointsAuto::GetAxis ( );
__declspec(implementation_key(6475)) DatumPointPtr _IDatumPointsAuto::Add ( double x1, double y1, double z1 );
__declspec(implementation_key(6476)) DatumPointPtr _IDatumPointsAuto::AddByElement ( IDispatch * TerminatorObject, double x1, double y1, double z1, VARIANT_BOOL keyPoint1 );
__declspec(implementation_key(6477)) HRESULT _IDatumPointsAuto::ClearPlane ( );
__declspec(implementation_key(6478)) HRESULT _IDatumPointsAuto::ClearStyle ( );
__declspec(implementation_key(6479)) AnnotInitDataPtr _IDatumPointsAuto::GetAnnotInitData ( );
__declspec(implementation_key(6480)) DatumPointPtr _IDatumPointsAuto::AddDatumPoint ( struct AnnotInitData * AnnotInitData );
__declspec(implementation_key(6481)) DimStylePtr _IDatumPointAuto::GetStyle ( );
__declspec(implementation_key(6482)) IDispatchPtr _IDatumPointAuto::GetPlane ( );
__declspec(implementation_key(6483)) double _IDatumPointAuto::GetAreaSize ( );
__declspec(implementation_key(6484)) void _IDatumPointAuto::PutAreaSize ( double Size );
__declspec(implementation_key(6485)) enum DimDatumPointTypeConstants _IDatumPointAuto::GetPointType ( );
__declspec(implementation_key(6486)) void _IDatumPointAuto::PutPointType ( enum DimDatumPointTypeConstants Size );
__declspec(implementation_key(6487)) HRESULT _IDatumPointAuto::SetElement ( IDispatch * CenterObj, double x, double y, double z, VARIANT_BOOL keyPoint );
__declspec(implementation_key(6488)) HRESULT _IDatumPointAuto::GetElement ( IDispatch * * CenterObj, double * x, double * y, double * z, VARIANT_BOOL * keyPoint );
__declspec(implementation_key(6489)) HRESULT _IDatumPointAuto::SetCenter ( double x, double y, double z );
__declspec(implementation_key(6490)) HRESULT _IDatumPointAuto::GetCenter ( double * x, double * y, double * z );
__declspec(implementation_key(6491)) HRESULT _IDatumPointAuto::SetFreeSpacePoint ( double x, double y, double z );
__declspec(implementation_key(6492)) HRESULT _IDatumPointAuto::GetFreeSpacePoint ( double * x, double * y, double * z );
__declspec(implementation_key(6493)) TGFramework::ApplicationPtr _IDatumPointAuto::GetApplication ( );
__declspec(implementation_key(6494)) long _IDatumPointAuto::GetIndex ( );
__declspec(implementation_key(6495)) _bstr_t _IDatumPointAuto::GetName ( const _variant_t & Recurse, long Lcid );
__declspec(implementation_key(6496)) IDispatchPtr _IDatumPointAuto::GetParent ( );
__declspec(implementation_key(6497)) long _IDatumPointAuto::GetType ( );
__declspec(implementation_key(6498)) long _IDatumPointAuto::GetZOrder ( );
__declspec(implementation_key(6499)) _bstr_t _IDatumPointAuto::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(6500)) IDispatchPtr _IDatumPointAuto::GetDocument ( );
__declspec(implementation_key(6501)) HRESULT _IDatumPointAuto::Copy ( );
__declspec(implementation_key(6502)) HRESULT _IDatumPointAuto::Cut ( );
__declspec(implementation_key(6503)) HRESULT _IDatumPointAuto::Delete ( );
__declspec(implementation_key(6504)) HRESULT _IDatumPointAuto::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(6505)) HRESULT _IDatumPointAuto::Scale ( double Factor );
__declspec(implementation_key(6506)) HRESULT _IDatumPointAuto::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(6507)) HRESULT _IDatumPointAuto::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(6508)) IDispatchPtr _IDatumPointAuto::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(6509)) IDispatchPtr _IDatumPointAuto::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(6510)) HRESULT _IDatumPointAuto::BringToFront ( );
__declspec(implementation_key(6511)) HRESULT _IDatumPointAuto::BringForward ( );
__declspec(implementation_key(6512)) HRESULT _IDatumPointAuto::SendToBack ( );
__declspec(implementation_key(6513)) HRESULT _IDatumPointAuto::SendBackward ( );
__declspec(implementation_key(6514)) HRESULT _IDatumPointAuto::Select ( );
__declspec(implementation_key(6515)) long _IDatumPointAuto::GetKeyPointCount ( );
__declspec(implementation_key(6516)) HRESULT _IDatumPointAuto::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(6517)) HRESULT _IDatumPointAuto::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(6518)) IDispatchPtr _IDatumPointAuto::GetAttributeSets ( );
__declspec(implementation_key(6519)) VARIANT_BOOL _IDatumPointAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(6520)) double _IDatumPointAuto::GetTextScale ( );
__declspec(implementation_key(6521)) void _IDatumPointAuto::PutTextScale ( double pdAngle );
__declspec(implementation_key(6522)) void _IDatumPointAuto::PutLayer ( _bstr_t Layer );
__declspec(implementation_key(6523)) _bstr_t _IDatumPointAuto::GetLayer ( );
__declspec(implementation_key(6524)) IDispatchPtr _IDatumPointAuto::GetPMIPlane ( );
__declspec(implementation_key(6525)) double _IDatumPointAuto::GetPMITrackDistance ( );
__declspec(implementation_key(6526)) void _IDatumPointAuto::PutPMITrackDistance ( double pdPMITrackDistance );
__declspec(implementation_key(6527)) void _IDatumPointAuto::PutHidePMI ( VARIANT_BOOL Value );
__declspec(implementation_key(6528)) VARIANT_BOOL _IDatumPointAuto::GetHidePMI ( );
__declspec(implementation_key(6529)) DisplayDataPtr _IDatumPointAuto::GetDisplayData ( );
__declspec(implementation_key(6530)) HRESULT _IDatumPointAuto::SetRectangularDatumPointWidthAndHeight ( double dWidth, double dHeight );
__declspec(implementation_key(6531)) HRESULT _IDatumPointAuto::GetRectangularDatumPointWidthAndHeight ( double * pdWidth, double * pdHeight );
__declspec(implementation_key(6532)) HRESULT _IDatumPointAuto::PromoteToCurrentVersion ( );
__declspec(implementation_key(6533)) void _IDatumPointAuto::PutPMIName ( _bstr_t Text );
__declspec(implementation_key(6534)) _bstr_t _IDatumPointAuto::GetPMIName ( );
__declspec(implementation_key(6535)) HRESULT _IDatumPointAuto::TransformToModelCoordinates ( double InputX, double InputY, double InputZ, double * ModelX, double * ModelY, double * ModelZ );
__declspec(implementation_key(6536)) HRESULT _IDatumPointAuto::GetReferencedGeometry ( SAFEARRAY * * ReferencedGeometries );
__declspec(implementation_key(6537)) HRESULT _IDatumPointAuto::SetReferencedGeometry ( SAFEARRAY * * ReferencedGeometries );
__declspec(implementation_key(6538)) TGFramework::ApplicationPtr CornerAnnotations::GetApplication ( );
__declspec(implementation_key(6539)) long CornerAnnotations::GetCount ( );
__declspec(implementation_key(6540)) IDispatchPtr CornerAnnotations::GetParent ( );
__declspec(implementation_key(6541)) CornerAnnotationPtr CornerAnnotations::Item ( const _variant_t & Index );
__declspec(implementation_key(6542)) void CornerAnnotations::PutPlane ( IDispatch * _arg1 );
__declspec(implementation_key(6543)) IDispatchPtr CornerAnnotations::GetPlane ( );
__declspec(implementation_key(6544)) void CornerAnnotations::PutStyle ( struct DimensionStyle * _arg1 );
__declspec(implementation_key(6545)) DimensionStylePtr CornerAnnotations::GetStyle ( );
__declspec(implementation_key(6546)) CornerAnnotationPtr CornerAnnotations::Add ( double x1, double y1, double z1 );
__declspec(implementation_key(6547)) CornerAnnotationPtr CornerAnnotations::AddByTerminator ( IDispatch * TerminatorObject, double x1, double y1, double z1, VARIANT_BOOL keyPoint1 );
__declspec(implementation_key(6548)) HRESULT CornerAnnotations::ClearPlane ( );
__declspec(implementation_key(6549)) HRESULT CornerAnnotations::ClearStyle ( );
__declspec(implementation_key(6550)) AnnotInitDataPtr CornerAnnotations::GetAnnotInitData ( );
__declspec(implementation_key(6551)) CornerAnnotationPtr CornerAnnotations::AddCornerAnnotation ( struct AnnotInitData * AnnotInitData );
__declspec(implementation_key(6552)) DimStylePtr CornerAnnotation::GetStyle ( );
__declspec(implementation_key(6553)) HRESULT CornerAnnotation::SetTerminator ( IDispatch * TerminatorObj, double x, double y, double z, VARIANT_BOOL keyPoint );
__declspec(implementation_key(6554)) HRESULT CornerAnnotation::GetTerminator ( IDispatch * * TerminatorObj, double * x, double * y, double * z, VARIANT_BOOL * keyPoint );
__declspec(implementation_key(6555)) HRESULT CornerAnnotation::SetFreeSpacePoint ( double x, double y, double z );
__declspec(implementation_key(6556)) HRESULT CornerAnnotation::GetFreeSpacePoint ( double * x, double * y, double * z );
__declspec(implementation_key(6557)) IDispatchPtr CornerAnnotation::GetPlane ( );
__declspec(implementation_key(6558)) TGFramework::ApplicationPtr CornerAnnotation::GetApplication ( );
__declspec(implementation_key(6559)) long CornerAnnotation::GetIndex ( );
__declspec(implementation_key(6560)) _bstr_t CornerAnnotation::GetName ( const _variant_t & Recurse );
__declspec(implementation_key(6561)) IDispatchPtr CornerAnnotation::GetParent ( );
__declspec(implementation_key(6562)) long CornerAnnotation::GetType ( );
__declspec(implementation_key(6563)) long CornerAnnotation::GetZOrder ( );
__declspec(implementation_key(6564)) _bstr_t CornerAnnotation::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(6565)) IDispatchPtr CornerAnnotation::GetDocument ( );
__declspec(implementation_key(6566)) HRESULT CornerAnnotation::Copy ( );
__declspec(implementation_key(6567)) HRESULT CornerAnnotation::Cut ( );
__declspec(implementation_key(6568)) HRESULT CornerAnnotation::Delete ( );
__declspec(implementation_key(6569)) HRESULT CornerAnnotation::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(6570)) HRESULT CornerAnnotation::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(6571)) IDispatchPtr CornerAnnotation::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(6572)) HRESULT CornerAnnotation::BringToFront ( );
__declspec(implementation_key(6573)) HRESULT CornerAnnotation::BringForward ( );
__declspec(implementation_key(6574)) HRESULT CornerAnnotation::SendToBack ( );
__declspec(implementation_key(6575)) HRESULT CornerAnnotation::SendBackward ( );
__declspec(implementation_key(6576)) HRESULT CornerAnnotation::Select ( );
__declspec(implementation_key(6577)) double CornerAnnotation::GetBreakLineDistance ( );
__declspec(implementation_key(6578)) void CornerAnnotation::PutBreakLineDistance ( double _arg1 );
__declspec(implementation_key(6579)) VARIANT_BOOL CornerAnnotation::GetBreakLine ( );
__declspec(implementation_key(6580)) void CornerAnnotation::PutBreakLine ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6581)) VARIANT_BOOL CornerAnnotation::GetBreakLineDirection ( );
__declspec(implementation_key(6582)) void CornerAnnotation::PutBreakLineDirection ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6583)) VARIANT_BOOL CornerAnnotation::GetLeader ( );
__declspec(implementation_key(6584)) void CornerAnnotation::PutLeader ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6585)) long CornerAnnotation::GetVertexCount ( );
__declspec(implementation_key(6586)) HRESULT CornerAnnotation::GetVertices ( long * VertexCount, SAFEARRAY * * Vertices );
__declspec(implementation_key(6587)) HRESULT CornerAnnotation::SetVertices ( long VertexCount, SAFEARRAY * * Vertices );
__declspec(implementation_key(6588)) HRESULT CornerAnnotation::GetVertex ( long Index, double * x, double * y, double * z );
__declspec(implementation_key(6589)) HRESULT CornerAnnotation::SetVertex ( long Index, double x, double y, double z );
__declspec(implementation_key(6590)) HRESULT CornerAnnotation::InsertVertex ( long Index, double x, double y, double z );
__declspec(implementation_key(6591)) HRESULT CornerAnnotation::AddVertex ( double x, double y, double z );
__declspec(implementation_key(6592)) HRESULT CornerAnnotation::RemoveVertex ( long Index );
__declspec(implementation_key(6593)) long CornerAnnotation::GetKeyPointCount ( );
__declspec(implementation_key(6594)) HRESULT CornerAnnotation::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(6595)) HRESULT CornerAnnotation::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(6596)) IDispatchPtr CornerAnnotation::GetAttributeSets ( );
__declspec(implementation_key(6597)) VARIANT_BOOL CornerAnnotation::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(6598)) double CornerAnnotation::GetTextScale ( );
__declspec(implementation_key(6599)) void CornerAnnotation::PutTextScale ( double _arg1 );
__declspec(implementation_key(6600)) void CornerAnnotation::PutLayer ( _bstr_t _arg1 );
__declspec(implementation_key(6601)) _bstr_t CornerAnnotation::GetLayer ( );
__declspec(implementation_key(6602)) IDispatchPtr CornerAnnotation::GetPMIPlane ( );
__declspec(implementation_key(6603)) double CornerAnnotation::GetPMITrackDistance ( );
__declspec(implementation_key(6604)) void CornerAnnotation::PutPMITrackDistance ( double _arg1 );
__declspec(implementation_key(6605)) void CornerAnnotation::PutUpperToleranceForClassicSymbol ( _bstr_t _arg1 );
__declspec(implementation_key(6606)) _bstr_t CornerAnnotation::GetUpperToleranceForClassicSymbol ( );
__declspec(implementation_key(6607)) void CornerAnnotation::PutLowerToleranceForClassicSymbol ( _bstr_t _arg1 );
__declspec(implementation_key(6608)) _bstr_t CornerAnnotation::GetLowerToleranceForClassicSymbol ( );
__declspec(implementation_key(6609)) void CornerAnnotation::PutUpperToleranceForEnhancedSymbol ( _bstr_t _arg1 );
__declspec(implementation_key(6610)) _bstr_t CornerAnnotation::GetUpperToleranceForEnhancedSymbol ( );
__declspec(implementation_key(6611)) void CornerAnnotation::PutLowerToleranceForEnhancedSymbol ( _bstr_t _arg1 );
__declspec(implementation_key(6612)) _bstr_t CornerAnnotation::GetLowerToleranceForEnhancedSymbol ( );
__declspec(implementation_key(6613)) void CornerAnnotation::PutDirection1Tolerance ( _bstr_t _arg1 );
__declspec(implementation_key(6614)) _bstr_t CornerAnnotation::GetDirection1Tolerance ( );
__declspec(implementation_key(6615)) void CornerAnnotation::PutDirection2Tolerance ( _bstr_t _arg1 );
__declspec(implementation_key(6616)) _bstr_t CornerAnnotation::GetDirection2Tolerance ( );
__declspec(implementation_key(6617)) void CornerAnnotation::PutAllAround ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6618)) VARIANT_BOOL CornerAnnotation::GetAllAround ( );
__declspec(implementation_key(6619)) void CornerAnnotation::PutNoTextOnSymbol ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6620)) VARIANT_BOOL CornerAnnotation::GetNoTextOnSymbol ( );
__declspec(implementation_key(6621)) void CornerAnnotation::PutUseISODIN2000CornerAnnot ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6622)) VARIANT_BOOL CornerAnnotation::GetUseISODIN2000CornerAnnot ( );
__declspec(implementation_key(6623)) void CornerAnnotation::PutHidePMI ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6624)) VARIANT_BOOL CornerAnnotation::GetHidePMI ( );
__declspec(implementation_key(6625)) DisplayDataPtr CornerAnnotation::GetDisplayData ( );
__declspec(implementation_key(6626)) HRESULT CornerAnnotation::PromoteToCurrentVersion ( );
__declspec(implementation_key(6627)) HRESULT CornerAnnotation::SetAlignmentShape ( IDispatch * AlignmentShapeObj, double x, double y );
__declspec(implementation_key(6628)) HRESULT CornerAnnotation::GetAlignmentShape ( IDispatch * * AlignmentShapeObj, double * x, double * y );
__declspec(implementation_key(6629)) void CornerAnnotation::PutPMIName ( _bstr_t _arg1 );
__declspec(implementation_key(6630)) _bstr_t CornerAnnotation::GetPMIName ( );
__declspec(implementation_key(6631)) HRESULT CornerAnnotation::TransformToModelCoordinates ( double InputX, double InputY, double InputZ, double * ModelX, double * ModelY, double * ModelZ );
__declspec(implementation_key(6632)) VARIANT_BOOL CornerAnnotation::GetIsTerminatorAttachedToEntity ( );
__declspec(implementation_key(6633)) HRESULT CornerAnnotation::GetReferencedGeometry ( SAFEARRAY * * ReferencedGeometries );
__declspec(implementation_key(6634)) HRESULT CornerAnnotation::SetReferencedGeometry ( SAFEARRAY * * ReferencedGeometries );
__declspec(implementation_key(6635)) TGFramework::ApplicationPtr _ICornerAnnotationsAuto::GetApplication ( );
__declspec(implementation_key(6636)) long _ICornerAnnotationsAuto::GetCount ( );
__declspec(implementation_key(6637)) IDispatchPtr _ICornerAnnotationsAuto::GetParent ( );
__declspec(implementation_key(6638)) CornerAnnotationPtr _ICornerAnnotationsAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(6639)) IUnknownPtr _ICornerAnnotationsAuto::Get_NewEnum ( );
__declspec(implementation_key(6640)) void _ICornerAnnotationsAuto::PutPlane ( IDispatch * Plane );
__declspec(implementation_key(6641)) IDispatchPtr _ICornerAnnotationsAuto::GetPlane ( );
__declspec(implementation_key(6642)) void _ICornerAnnotationsAuto::PutStyle ( struct DimensionStyle * Style );
__declspec(implementation_key(6643)) DimensionStylePtr _ICornerAnnotationsAuto::GetStyle ( );
__declspec(implementation_key(6644)) CornerAnnotationPtr _ICornerAnnotationsAuto::Add ( double x1, double y1, double z1 );
__declspec(implementation_key(6645)) CornerAnnotationPtr _ICornerAnnotationsAuto::AddByTerminator ( IDispatch * TerminatorObject, double x1, double y1, double z1, VARIANT_BOOL keyPoint1 );
__declspec(implementation_key(6646)) HRESULT _ICornerAnnotationsAuto::ClearPlane ( );
__declspec(implementation_key(6647)) HRESULT _ICornerAnnotationsAuto::ClearStyle ( );
__declspec(implementation_key(6648)) AnnotInitDataPtr _ICornerAnnotationsAuto::GetAnnotInitData ( );
__declspec(implementation_key(6649)) CornerAnnotationPtr _ICornerAnnotationsAuto::AddCornerAnnotation ( struct AnnotInitData * AnnotInitData );
__declspec(implementation_key(6650)) DimStylePtr _ICornerAnnotationAuto::GetStyle ( );
__declspec(implementation_key(6651)) HRESULT _ICornerAnnotationAuto::SetTerminator ( IDispatch * TerminatorObj, double x, double y, double z, VARIANT_BOOL keyPoint );
__declspec(implementation_key(6652)) HRESULT _ICornerAnnotationAuto::GetTerminator ( IDispatch * * TerminatorObj, double * x, double * y, double * z, VARIANT_BOOL * keyPoint );
__declspec(implementation_key(6653)) HRESULT _ICornerAnnotationAuto::SetFreeSpacePoint ( double x, double y, double z );
__declspec(implementation_key(6654)) HRESULT _ICornerAnnotationAuto::GetFreeSpacePoint ( double * x, double * y, double * z );
__declspec(implementation_key(6655)) IDispatchPtr _ICornerAnnotationAuto::GetPlane ( );
__declspec(implementation_key(6656)) TGFramework::ApplicationPtr _ICornerAnnotationAuto::GetApplication ( );
__declspec(implementation_key(6657)) long _ICornerAnnotationAuto::GetIndex ( );
__declspec(implementation_key(6658)) _bstr_t _ICornerAnnotationAuto::GetName ( const _variant_t & Recurse, long Lcid );
__declspec(implementation_key(6659)) IDispatchPtr _ICornerAnnotationAuto::GetParent ( );
__declspec(implementation_key(6660)) long _ICornerAnnotationAuto::GetType ( );
__declspec(implementation_key(6661)) long _ICornerAnnotationAuto::GetZOrder ( );
__declspec(implementation_key(6662)) _bstr_t _ICornerAnnotationAuto::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(6663)) IDispatchPtr _ICornerAnnotationAuto::GetDocument ( );
__declspec(implementation_key(6664)) HRESULT _ICornerAnnotationAuto::Copy ( );
__declspec(implementation_key(6665)) HRESULT _ICornerAnnotationAuto::Cut ( );
__declspec(implementation_key(6666)) HRESULT _ICornerAnnotationAuto::Delete ( );
__declspec(implementation_key(6667)) HRESULT _ICornerAnnotationAuto::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(6668)) HRESULT _ICornerAnnotationAuto::Scale ( double Factor );
__declspec(implementation_key(6669)) HRESULT _ICornerAnnotationAuto::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(6670)) HRESULT _ICornerAnnotationAuto::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(6671)) IDispatchPtr _ICornerAnnotationAuto::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(6672)) IDispatchPtr _ICornerAnnotationAuto::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(6673)) HRESULT _ICornerAnnotationAuto::BringToFront ( );
__declspec(implementation_key(6674)) HRESULT _ICornerAnnotationAuto::BringForward ( );
__declspec(implementation_key(6675)) HRESULT _ICornerAnnotationAuto::SendToBack ( );
__declspec(implementation_key(6676)) HRESULT _ICornerAnnotationAuto::SendBackward ( );
__declspec(implementation_key(6677)) HRESULT _ICornerAnnotationAuto::Select ( );
__declspec(implementation_key(6678)) double _ICornerAnnotationAuto::GetBreakLineDistance ( );
__declspec(implementation_key(6679)) void _ICornerAnnotationAuto::PutBreakLineDistance ( double Distance );
__declspec(implementation_key(6680)) VARIANT_BOOL _ICornerAnnotationAuto::GetBreakLine ( );
__declspec(implementation_key(6681)) void _ICornerAnnotationAuto::PutBreakLine ( VARIANT_BOOL Flag );
__declspec(implementation_key(6682)) VARIANT_BOOL _ICornerAnnotationAuto::GetBreakLineDirection ( );
__declspec(implementation_key(6683)) void _ICornerAnnotationAuto::PutBreakLineDirection ( VARIANT_BOOL Flag );
__declspec(implementation_key(6684)) VARIANT_BOOL _ICornerAnnotationAuto::GetLeader ( );
__declspec(implementation_key(6685)) void _ICornerAnnotationAuto::PutLeader ( VARIANT_BOOL Flag );
__declspec(implementation_key(6686)) long _ICornerAnnotationAuto::GetVertexCount ( );
__declspec(implementation_key(6687)) HRESULT _ICornerAnnotationAuto::GetVertices ( long * VertexCount, SAFEARRAY * * Vertices );
__declspec(implementation_key(6688)) HRESULT _ICornerAnnotationAuto::SetVertices ( long VertexCount, SAFEARRAY * * Vertices );
__declspec(implementation_key(6689)) HRESULT _ICornerAnnotationAuto::GetVertex ( long Index, double * x, double * y, double * z );
__declspec(implementation_key(6690)) HRESULT _ICornerAnnotationAuto::SetVertex ( long Index, double x, double y, double z );
__declspec(implementation_key(6691)) HRESULT _ICornerAnnotationAuto::InsertVertex ( long Index, double x, double y, double z );
__declspec(implementation_key(6692)) HRESULT _ICornerAnnotationAuto::AddVertex ( double x, double y, double z );
__declspec(implementation_key(6693)) HRESULT _ICornerAnnotationAuto::RemoveVertex ( long Index );
__declspec(implementation_key(6694)) long _ICornerAnnotationAuto::GetKeyPointCount ( );
__declspec(implementation_key(6695)) HRESULT _ICornerAnnotationAuto::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(6696)) HRESULT _ICornerAnnotationAuto::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(6697)) IDispatchPtr _ICornerAnnotationAuto::GetAttributeSets ( );
__declspec(implementation_key(6698)) VARIANT_BOOL _ICornerAnnotationAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(6699)) double _ICornerAnnotationAuto::GetTextScale ( );
__declspec(implementation_key(6700)) void _ICornerAnnotationAuto::PutTextScale ( double pdAngle );
__declspec(implementation_key(6701)) void _ICornerAnnotationAuto::PutLayer ( _bstr_t Layer );
__declspec(implementation_key(6702)) _bstr_t _ICornerAnnotationAuto::GetLayer ( );
__declspec(implementation_key(6703)) IDispatchPtr _ICornerAnnotationAuto::GetPMIPlane ( );
__declspec(implementation_key(6704)) double _ICornerAnnotationAuto::GetPMITrackDistance ( );
__declspec(implementation_key(6705)) void _ICornerAnnotationAuto::PutPMITrackDistance ( double pdPMITrackDistance );
__declspec(implementation_key(6706)) void _ICornerAnnotationAuto::PutUpperToleranceForClassicSymbol ( _bstr_t Text );
__declspec(implementation_key(6707)) _bstr_t _ICornerAnnotationAuto::GetUpperToleranceForClassicSymbol ( );
__declspec(implementation_key(6708)) void _ICornerAnnotationAuto::PutLowerToleranceForClassicSymbol ( _bstr_t Text );
__declspec(implementation_key(6709)) _bstr_t _ICornerAnnotationAuto::GetLowerToleranceForClassicSymbol ( );
__declspec(implementation_key(6710)) void _ICornerAnnotationAuto::PutUpperToleranceForEnhancedSymbol ( _bstr_t Text );
__declspec(implementation_key(6711)) _bstr_t _ICornerAnnotationAuto::GetUpperToleranceForEnhancedSymbol ( );
__declspec(implementation_key(6712)) void _ICornerAnnotationAuto::PutLowerToleranceForEnhancedSymbol ( _bstr_t Text );
__declspec(implementation_key(6713)) _bstr_t _ICornerAnnotationAuto::GetLowerToleranceForEnhancedSymbol ( );
__declspec(implementation_key(6714)) void _ICornerAnnotationAuto::PutDirection1Tolerance ( _bstr_t Text );
__declspec(implementation_key(6715)) _bstr_t _ICornerAnnotationAuto::GetDirection1Tolerance ( );
__declspec(implementation_key(6716)) void _ICornerAnnotationAuto::PutDirection2Tolerance ( _bstr_t Text );
__declspec(implementation_key(6717)) _bstr_t _ICornerAnnotationAuto::GetDirection2Tolerance ( );
__declspec(implementation_key(6718)) void _ICornerAnnotationAuto::PutAllAround ( VARIANT_BOOL pbAllAround );
__declspec(implementation_key(6719)) VARIANT_BOOL _ICornerAnnotationAuto::GetAllAround ( );
__declspec(implementation_key(6720)) void _ICornerAnnotationAuto::PutNoTextOnSymbol ( VARIANT_BOOL pbNoTextOnSymbol );
__declspec(implementation_key(6721)) VARIANT_BOOL _ICornerAnnotationAuto::GetNoTextOnSymbol ( );
__declspec(implementation_key(6722)) void _ICornerAnnotationAuto::PutUseISODIN2000CornerAnnot ( VARIANT_BOOL pbUseISODIN2000CornerAnnot );
__declspec(implementation_key(6723)) VARIANT_BOOL _ICornerAnnotationAuto::GetUseISODIN2000CornerAnnot ( );
__declspec(implementation_key(6724)) void _ICornerAnnotationAuto::PutHidePMI ( VARIANT_BOOL Value );
__declspec(implementation_key(6725)) VARIANT_BOOL _ICornerAnnotationAuto::GetHidePMI ( );
__declspec(implementation_key(6726)) DisplayDataPtr _ICornerAnnotationAuto::GetDisplayData ( );
__declspec(implementation_key(6727)) HRESULT _ICornerAnnotationAuto::PromoteToCurrentVersion ( );
__declspec(implementation_key(6728)) HRESULT _ICornerAnnotationAuto::SetAlignmentShape ( IDispatch * AlignmentShapeObj, double x, double y );
__declspec(implementation_key(6729)) HRESULT _ICornerAnnotationAuto::GetAlignmentShape ( IDispatch * * AlignmentShapeObj, double * x, double * y );
__declspec(implementation_key(6730)) void _ICornerAnnotationAuto::PutPMIName ( _bstr_t Text );
__declspec(implementation_key(6731)) _bstr_t _ICornerAnnotationAuto::GetPMIName ( );
__declspec(implementation_key(6732)) HRESULT _ICornerAnnotationAuto::TransformToModelCoordinates ( double InputX, double InputY, double InputZ, double * ModelX, double * ModelY, double * ModelZ );
__declspec(implementation_key(6733)) VARIANT_BOOL _ICornerAnnotationAuto::GetIsTerminatorAttachedToEntity ( );
__declspec(implementation_key(6734)) HRESULT _ICornerAnnotationAuto::GetReferencedGeometry ( SAFEARRAY * * ReferencedGeometries );
__declspec(implementation_key(6735)) HRESULT _ICornerAnnotationAuto::SetReferencedGeometry ( SAFEARRAY * * ReferencedGeometries );
__declspec(implementation_key(6736)) TGFramework::ApplicationPtr BoltHoleCircles::GetApplication ( );
__declspec(implementation_key(6737)) long BoltHoleCircles::GetCount ( );
__declspec(implementation_key(6738)) IDispatchPtr BoltHoleCircles::GetParent ( );
__declspec(implementation_key(6739)) BoltHoleCirclePtr BoltHoleCircles::Item ( const _variant_t & Index );
__declspec(implementation_key(6740)) BoltHoleCirclePtr BoltHoleCircles::AddBoltHoleCircleBy3Points ( IDispatch * Object1, long Object1_Keypoint_Index, IDispatch * Object2, long Object2_Keypoint_Index, IDispatch * Object3, long Object3_Keypoint_Index );
__declspec(implementation_key(6741)) BoltHoleCirclePtr BoltHoleCircles::AddBoltHoleCircleByCenterAndRadius ( IDispatch * CenterObject, long CenterObject_KeyPointIndex, IDispatch * RadiusObject, long RadiusObject_KeypointIndex );
__declspec(implementation_key(6742)) BoltHoleCirclePtr BoltHoleCircles::AddBoltHoleCircleBy2Points ( IDispatch * Object1, long Object1_KeyPointIndex, IDispatch * Object2, long Object2_KeypointIndex );
__declspec(implementation_key(6743)) AnnotInitDataPtr BoltHoleCircles::GetAnnotInitData ( );
__declspec(implementation_key(6744)) BoltHoleCirclePtr BoltHoleCircles::AddBoltHoleCircle ( struct AnnotInitData * AnnotInitData, long bIsByCenterRadius );
__declspec(implementation_key(6745)) TGFramework::ApplicationPtr BoltHoleCircle::GetApplication ( );
__declspec(implementation_key(6746)) long BoltHoleCircle::GetIndex ( );
__declspec(implementation_key(6747)) _bstr_t BoltHoleCircle::GetName ( const _variant_t & Recurse );
__declspec(implementation_key(6748)) IDispatchPtr BoltHoleCircle::GetParent ( );
__declspec(implementation_key(6749)) long BoltHoleCircle::GetType ( );
__declspec(implementation_key(6750)) long BoltHoleCircle::GetZOrder ( );
__declspec(implementation_key(6751)) _bstr_t BoltHoleCircle::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(6752)) IDispatchPtr BoltHoleCircle::GetDocument ( );
__declspec(implementation_key(6753)) HRESULT BoltHoleCircle::Copy ( );
__declspec(implementation_key(6754)) HRESULT BoltHoleCircle::Cut ( );
__declspec(implementation_key(6755)) HRESULT BoltHoleCircle::Delete ( );
__declspec(implementation_key(6756)) HRESULT BoltHoleCircle::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(6757)) HRESULT BoltHoleCircle::BringToFront ( );
__declspec(implementation_key(6758)) HRESULT BoltHoleCircle::BringForward ( );
__declspec(implementation_key(6759)) HRESULT BoltHoleCircle::SendToBack ( );
__declspec(implementation_key(6760)) HRESULT BoltHoleCircle::SendBackward ( );
__declspec(implementation_key(6761)) HRESULT BoltHoleCircle::Select ( );
__declspec(implementation_key(6762)) double BoltHoleCircle::GetTextScale ( );
__declspec(implementation_key(6763)) void BoltHoleCircle::PutTextScale ( double _arg1 );
__declspec(implementation_key(6764)) long BoltHoleCircle::GetKeyPointCount ( );
__declspec(implementation_key(6765)) HRESULT BoltHoleCircle::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, enum HandleType * HandleType );
__declspec(implementation_key(6766)) DimStylePtr BoltHoleCircle::GetStyle ( );
__declspec(implementation_key(6767)) VARIANT_BOOL BoltHoleCircle::GetIsDefinedBy3Points ( );
__declspec(implementation_key(6768)) HRESULT BoltHoleCircle::AddMember ( IDispatch * Object, long Object_Keypoint_Index );
__declspec(implementation_key(6769)) HRESULT BoltHoleCircle::RemoveMember ( IDispatch * Object, const _variant_t & Object_Keypoint_Index );
__declspec(implementation_key(6770)) HRESULT BoltHoleCircle::Circle2d ( double * BHC_Circle2d_center_x, double * BHC_Circle2d_center_y, double * BHC_Circle2d_radius );
__declspec(implementation_key(6771)) VARIANT_BOOL BoltHoleCircle::GetIsAcceptableConnectElementOrMember ( IDispatch * Object );
__declspec(implementation_key(6772)) HRESULT BoltHoleCircle::GetConnectElements3Objects ( IDispatch * * Object1, int * Object1_Keypoint_Index, IDispatch * * Object2, int * Object2_Keypoint_Index, IDispatch * * Object3, int * Object3_Keypoint_Index );
__declspec(implementation_key(6773)) HRESULT BoltHoleCircle::GetConnectElementsCenterRadius ( IDispatch * * CenterObject, int * CenterObject_Keypoint_Index, IDispatch * * RadiusObject, int * RadiusObject_Keypoint_Index );
__declspec(implementation_key(6774)) VARIANT_BOOL BoltHoleCircle::GetIsMember ( IDispatch * Object, const _variant_t & Object_Keypoint_Index );
__declspec(implementation_key(6775)) IUnknownPtr BoltHoleCircle::Item ( const _variant_t & Index );
__declspec(implementation_key(6776)) long BoltHoleCircle::GetCount ( );
__declspec(implementation_key(6777)) void BoltHoleCircle::PutLayer ( _bstr_t _arg1 );
__declspec(implementation_key(6778)) _bstr_t BoltHoleCircle::GetLayer ( );
__declspec(implementation_key(6779)) VARIANT_BOOL BoltHoleCircle::GetIsDefinedBy2Points ( );
__declspec(implementation_key(6780)) HRESULT BoltHoleCircle::GetTrimArcEndPoints ( double * x1, double * y1, double * z1, double * x2, double * y2, double * z2 );
__declspec(implementation_key(6781)) HRESULT BoltHoleCircle::SetTrimArcEndPoints ( double x1, double y1, double z1, double x2, double y2, double z2 );
__declspec(implementation_key(6782)) void BoltHoleCircle::PutPMIName ( _bstr_t _arg1 );
__declspec(implementation_key(6783)) _bstr_t BoltHoleCircle::GetPMIName ( );
__declspec(implementation_key(6784)) void BoltHoleCircle::PutHidePMI ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(6785)) VARIANT_BOOL BoltHoleCircle::GetHidePMI ( );
__declspec(implementation_key(6786)) IDispatchPtr BoltHoleCircle::GetPMIPlane ( );
__declspec(implementation_key(6787)) TGFramework::ApplicationPtr _IBoltHoleCirclesAuto::GetApplication ( );
__declspec(implementation_key(6788)) long _IBoltHoleCirclesAuto::GetCount ( );
__declspec(implementation_key(6789)) IDispatchPtr _IBoltHoleCirclesAuto::GetParent ( );
__declspec(implementation_key(6790)) BoltHoleCirclePtr _IBoltHoleCirclesAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(6791)) IUnknownPtr _IBoltHoleCirclesAuto::Get_NewEnum ( );
__declspec(implementation_key(6792)) BoltHoleCirclePtr _IBoltHoleCirclesAuto::AddBoltHoleCircleBy3Points ( IDispatch * Object1, long Object1_Keypoint_Index, IDispatch * Object2, long Object2_Keypoint_Index, IDispatch * Object3, long Object3_Keypoint_Index );
__declspec(implementation_key(6793)) BoltHoleCirclePtr _IBoltHoleCirclesAuto::AddBoltHoleCircleByCenterAndRadius ( IDispatch * CenterObject, long CenterObject_KeyPointIndex, IDispatch * RadiusObject, long RadiusObject_KeypointIndex );
__declspec(implementation_key(6794)) BoltHoleCirclePtr _IBoltHoleCirclesAuto::AddBoltHoleCircleBy2Points ( IDispatch * Object1, long Object1_KeyPointIndex, IDispatch * Object2, long Object2_KeypointIndex );
__declspec(implementation_key(6795)) AnnotInitDataPtr _IBoltHoleCirclesAuto::GetAnnotInitData ( );
__declspec(implementation_key(6796)) BoltHoleCirclePtr _IBoltHoleCirclesAuto::AddBoltHoleCircle ( struct AnnotInitData * AnnotInitData, long bIsByCenterRadius );
__declspec(implementation_key(6797)) TGFramework::ApplicationPtr _IBoltHoleCircleAuto::GetApplication ( );
__declspec(implementation_key(6798)) long _IBoltHoleCircleAuto::GetIndex ( );
__declspec(implementation_key(6799)) _bstr_t _IBoltHoleCircleAuto::GetName ( const _variant_t & Recurse, long Lcid );
__declspec(implementation_key(6800)) IDispatchPtr _IBoltHoleCircleAuto::GetParent ( );
__declspec(implementation_key(6801)) long _IBoltHoleCircleAuto::GetType ( );
__declspec(implementation_key(6802)) long _IBoltHoleCircleAuto::GetZOrder ( );
__declspec(implementation_key(6803)) _bstr_t _IBoltHoleCircleAuto::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(6804)) IDispatchPtr _IBoltHoleCircleAuto::GetDocument ( );
__declspec(implementation_key(6805)) HRESULT _IBoltHoleCircleAuto::Copy ( );
__declspec(implementation_key(6806)) HRESULT _IBoltHoleCircleAuto::Cut ( );
__declspec(implementation_key(6807)) HRESULT _IBoltHoleCircleAuto::Delete ( );
__declspec(implementation_key(6808)) HRESULT _IBoltHoleCircleAuto::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(6809)) HRESULT _IBoltHoleCircleAuto::BringToFront ( );
__declspec(implementation_key(6810)) HRESULT _IBoltHoleCircleAuto::BringForward ( );
__declspec(implementation_key(6811)) HRESULT _IBoltHoleCircleAuto::SendToBack ( );
__declspec(implementation_key(6812)) HRESULT _IBoltHoleCircleAuto::SendBackward ( );
__declspec(implementation_key(6813)) HRESULT _IBoltHoleCircleAuto::Select ( );
__declspec(implementation_key(6814)) double _IBoltHoleCircleAuto::GetTextScale ( );
__declspec(implementation_key(6815)) void _IBoltHoleCircleAuto::PutTextScale ( double pdAngle );
__declspec(implementation_key(6816)) long _IBoltHoleCircleAuto::GetKeyPointCount ( );
__declspec(implementation_key(6817)) HRESULT _IBoltHoleCircleAuto::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, enum HandleType * HandleType );
__declspec(implementation_key(6818)) DimStylePtr _IBoltHoleCircleAuto::GetStyle ( );
__declspec(implementation_key(6819)) VARIANT_BOOL _IBoltHoleCircleAuto::GetIsDefinedBy3Points ( );
__declspec(implementation_key(6820)) HRESULT _IBoltHoleCircleAuto::AddMember ( IDispatch * Object, long Object_Keypoint_Index );
__declspec(implementation_key(6821)) HRESULT _IBoltHoleCircleAuto::RemoveMember ( IDispatch * Object, const _variant_t & Object_Keypoint_Index );
__declspec(implementation_key(6822)) HRESULT _IBoltHoleCircleAuto::Circle2d ( double * BHC_Circle2d_center_x, double * BHC_Circle2d_center_y, double * BHC_Circle2d_radius );
__declspec(implementation_key(6823)) VARIANT_BOOL _IBoltHoleCircleAuto::GetIsAcceptableConnectElementOrMember ( IDispatch * Object );
__declspec(implementation_key(6824)) HRESULT _IBoltHoleCircleAuto::GetConnectElements3Objects ( IDispatch * * Object1, int * Object1_Keypoint_Index, IDispatch * * Object2, int * Object2_Keypoint_Index, IDispatch * * Object3, int * Object3_Keypoint_Index );
__declspec(implementation_key(6825)) HRESULT _IBoltHoleCircleAuto::GetConnectElementsCenterRadius ( IDispatch * * CenterObject, int * CenterObject_Keypoint_Index, IDispatch * * RadiusObject, int * RadiusObject_Keypoint_Index );
__declspec(implementation_key(6826)) VARIANT_BOOL _IBoltHoleCircleAuto::GetIsMember ( IDispatch * Object, const _variant_t & Object_Keypoint_Index );
__declspec(implementation_key(6827)) IUnknownPtr _IBoltHoleCircleAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(6828)) IUnknownPtr _IBoltHoleCircleAuto::Get_NewEnum ( );
__declspec(implementation_key(6829)) long _IBoltHoleCircleAuto::GetCount ( );
__declspec(implementation_key(6830)) void _IBoltHoleCircleAuto::PutLayer ( _bstr_t Layer );
__declspec(implementation_key(6831)) _bstr_t _IBoltHoleCircleAuto::GetLayer ( );
__declspec(implementation_key(6832)) VARIANT_BOOL _IBoltHoleCircleAuto::GetIsDefinedBy2Points ( );
__declspec(implementation_key(6833)) HRESULT _IBoltHoleCircleAuto::GetTrimArcEndPoints ( double * x1, double * y1, double * z1, double * x2, double * y2, double * z2 );
__declspec(implementation_key(6834)) HRESULT _IBoltHoleCircleAuto::SetTrimArcEndPoints ( double x1, double y1, double z1, double x2, double y2, double z2 );
__declspec(implementation_key(6835)) void _IBoltHoleCircleAuto::PutPMIName ( _bstr_t Text );
__declspec(implementation_key(6836)) _bstr_t _IBoltHoleCircleAuto::GetPMIName ( );
__declspec(implementation_key(6837)) void _IBoltHoleCircleAuto::PutHidePMI ( VARIANT_BOOL Value );
__declspec(implementation_key(6838)) VARIANT_BOOL _IBoltHoleCircleAuto::GetHidePMI ( );
__declspec(implementation_key(6839)) IDispatchPtr _IBoltHoleCircleAuto::GetPMIPlane ( );
__declspec(implementation_key(6840)) TGFramework::ApplicationPtr Connectors::GetApplication ( );
__declspec(implementation_key(6841)) long Connectors::GetCount ( );
__declspec(implementation_key(6842)) IDispatchPtr Connectors::GetParent ( );
__declspec(implementation_key(6843)) ConnectorPtr Connectors::Item ( const _variant_t & Index );
__declspec(implementation_key(6844)) ConnectorPtr Connectors::AddConnectorByType ( IDispatch * Object1, double x1, double y1, double z1, long Object1_Keypoint_Index, IDispatch * Object2, double x2, double y2, double z2, long Object2_Keypoint_Index, enum ConnectorTypeConstants ConnectorType );
__declspec(implementation_key(6845)) ConnectorPtr Connectors::AddFreeSpaceConnectorByType ( double x1, double y1, double z1, double x2, double y2, double z2, enum ConnectorTypeConstants ConnectorType );
__declspec(implementation_key(6846)) TGFramework::ApplicationPtr Connector::GetApplication ( );
__declspec(implementation_key(6847)) long Connector::GetIndex ( );
__declspec(implementation_key(6848)) _bstr_t Connector::GetName ( const _variant_t & Recurse );
__declspec(implementation_key(6849)) IDispatchPtr Connector::GetParent ( );
__declspec(implementation_key(6850)) long Connector::GetType ( );
__declspec(implementation_key(6851)) long Connector::GetZOrder ( );
__declspec(implementation_key(6852)) _bstr_t Connector::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(6853)) IDispatchPtr Connector::GetDocument ( );
__declspec(implementation_key(6854)) HRESULT Connector::Copy ( );
__declspec(implementation_key(6855)) HRESULT Connector::Cut ( );
__declspec(implementation_key(6856)) HRESULT Connector::Delete ( );
__declspec(implementation_key(6857)) HRESULT Connector::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(6858)) HRESULT Connector::BringToFront ( );
__declspec(implementation_key(6859)) HRESULT Connector::BringForward ( );
__declspec(implementation_key(6860)) HRESULT Connector::SendToBack ( );
__declspec(implementation_key(6861)) HRESULT Connector::SendBackward ( );
__declspec(implementation_key(6862)) HRESULT Connector::Select ( );
__declspec(implementation_key(6863)) long Connector::GetKeyPointCount ( );
__declspec(implementation_key(6864)) HRESULT Connector::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, enum HandleType * HandleType );
__declspec(implementation_key(6865)) DimStylePtr Connector::GetStyle ( );
__declspec(implementation_key(6866)) HRESULT Connector::GetConnectorType ( enum ConnectorTypeConstants * ConnectorType );
__declspec(implementation_key(6867)) HRESULT Connector::SetConnectorType ( enum ConnectorTypeConstants ConnectorType );
__declspec(implementation_key(6868)) HRESULT Connector::GetStartElement ( IDispatch * * StartObj, double * x, double * y, double * z, int * StartKeyPointIndex );
__declspec(implementation_key(6869)) HRESULT Connector::SetStartElement ( IDispatch * StartObj, double x, double y, double z, int StartKeyPointIndex );
__declspec(implementation_key(6870)) HRESULT Connector::GetEndElement ( IDispatch * * EndObj, double * x, double * y, double * z, int * EndKeyPointIndex );
__declspec(implementation_key(6871)) HRESULT Connector::SetEndElement ( IDispatch * EndObj, double x, double y, double z, int EndKeyPointIndex );
__declspec(implementation_key(6872)) HRESULT Connector::GetCenterElement ( IDispatch * * CenterObj, double * x, double * y, double * z, int * CenterKeyPointIndex );
__declspec(implementation_key(6873)) HRESULT Connector::SetCenterElement ( IDispatch * CenterObj, double x, double y, double z, int CenterKeyPointIndex );
__declspec(implementation_key(6874)) HRESULT Connector::GetStartPoint ( double * x, double * y, double * z );
__declspec(implementation_key(6875)) HRESULT Connector::SetStartPoint ( double x, double y, double z );
__declspec(implementation_key(6876)) HRESULT Connector::GetEndPoint ( double * x, double * y, double * z );
__declspec(implementation_key(6877)) HRESULT Connector::SetEndPoint ( double x, double y, double z );
__declspec(implementation_key(6878)) HRESULT Connector::GetStartTerminatorType ( enum DimTermTypeConstants * StartTermType );
__declspec(implementation_key(6879)) HRESULT Connector::SetStartTerminatorType ( enum DimTermTypeConstants StartTermType );
__declspec(implementation_key(6880)) HRESULT Connector::GetEndTerminatorType ( enum DimTermTypeConstants * EndTermType );
__declspec(implementation_key(6881)) HRESULT Connector::SetEndTerminatorType ( enum DimTermTypeConstants EndTermType );
__declspec(implementation_key(6882)) HRESULT Connector::GetFlipState ( VARIANT_BOOL * FlipState );
__declspec(implementation_key(6883)) HRESULT Connector::SetFlipState ( VARIANT_BOOL FlipState );
__declspec(implementation_key(6884)) HRESULT Connector::GetJumpRadius ( double * JumpRadius );
__declspec(implementation_key(6885)) HRESULT Connector::SetJumpRadius ( double JumpRadius );
__declspec(implementation_key(6886)) double Connector::GetTextScale ( );
__declspec(implementation_key(6887)) void Connector::PutTextScale ( double _arg1 );
__declspec(implementation_key(6888)) void Connector::PutLayer ( _bstr_t _arg1 );
__declspec(implementation_key(6889)) _bstr_t Connector::GetLayer ( );
__declspec(implementation_key(6890)) HRESULT Connector::PromoteToCurrentVersion ( );
__declspec(implementation_key(6891)) IDispatchPtr Connector::GetAttributeSets ( );
__declspec(implementation_key(6892)) VARIANT_BOOL Connector::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(6893)) TGFramework::ApplicationPtr _IConnectorsAuto::GetApplication ( );
__declspec(implementation_key(6894)) long _IConnectorsAuto::GetCount ( );
__declspec(implementation_key(6895)) IDispatchPtr _IConnectorsAuto::GetParent ( );
__declspec(implementation_key(6896)) ConnectorPtr _IConnectorsAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(6897)) IUnknownPtr _IConnectorsAuto::Get_NewEnum ( );
__declspec(implementation_key(6898)) ConnectorPtr _IConnectorsAuto::AddConnectorByType ( IDispatch * Object1, double x1, double y1, double z1, long Object1_Keypoint_Index, IDispatch * Object2, double x2, double y2, double z2, long Object2_Keypoint_Index, enum ConnectorTypeConstants ConnectorType );
__declspec(implementation_key(6899)) ConnectorPtr _IConnectorsAuto::AddFreeSpaceConnectorByType ( double x1, double y1, double z1, double x2, double y2, double z2, enum ConnectorTypeConstants ConnectorType );
__declspec(implementation_key(6900)) TGFramework::ApplicationPtr _IConnectorAuto::GetApplication ( );
__declspec(implementation_key(6901)) long _IConnectorAuto::GetIndex ( );
__declspec(implementation_key(6902)) _bstr_t _IConnectorAuto::GetName ( const _variant_t & Recurse, long Lcid );
__declspec(implementation_key(6903)) IDispatchPtr _IConnectorAuto::GetParent ( );
__declspec(implementation_key(6904)) long _IConnectorAuto::GetType ( );
__declspec(implementation_key(6905)) long _IConnectorAuto::GetZOrder ( );
__declspec(implementation_key(6906)) _bstr_t _IConnectorAuto::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(6907)) IDispatchPtr _IConnectorAuto::GetDocument ( );
__declspec(implementation_key(6908)) HRESULT _IConnectorAuto::Copy ( );
__declspec(implementation_key(6909)) HRESULT _IConnectorAuto::Cut ( );
__declspec(implementation_key(6910)) HRESULT _IConnectorAuto::Delete ( );
__declspec(implementation_key(6911)) HRESULT _IConnectorAuto::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(6912)) HRESULT _IConnectorAuto::BringToFront ( );
__declspec(implementation_key(6913)) HRESULT _IConnectorAuto::BringForward ( );
__declspec(implementation_key(6914)) HRESULT _IConnectorAuto::SendToBack ( );
__declspec(implementation_key(6915)) HRESULT _IConnectorAuto::SendBackward ( );
__declspec(implementation_key(6916)) HRESULT _IConnectorAuto::Select ( );
__declspec(implementation_key(6917)) long _IConnectorAuto::GetKeyPointCount ( );
__declspec(implementation_key(6918)) HRESULT _IConnectorAuto::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, enum HandleType * HandleType );
__declspec(implementation_key(6919)) DimStylePtr _IConnectorAuto::GetStyle ( );
__declspec(implementation_key(6920)) HRESULT _IConnectorAuto::GetConnectorType ( enum ConnectorTypeConstants * ConnectorType );
__declspec(implementation_key(6921)) HRESULT _IConnectorAuto::SetConnectorType ( enum ConnectorTypeConstants ConnectorType );
__declspec(implementation_key(6922)) HRESULT _IConnectorAuto::GetStartElement ( IDispatch * * StartObj, double * x, double * y, double * z, int * StartKeyPointIndex );
__declspec(implementation_key(6923)) HRESULT _IConnectorAuto::SetStartElement ( IDispatch * StartObj, double x, double y, double z, int StartKeyPointIndex );
__declspec(implementation_key(6924)) HRESULT _IConnectorAuto::GetEndElement ( IDispatch * * EndObj, double * x, double * y, double * z, int * EndKeyPointIndex );
__declspec(implementation_key(6925)) HRESULT _IConnectorAuto::SetEndElement ( IDispatch * EndObj, double x, double y, double z, int EndKeyPointIndex );
__declspec(implementation_key(6926)) HRESULT _IConnectorAuto::GetCenterElement ( IDispatch * * CenterObj, double * x, double * y, double * z, int * CenterKeyPointIndex );
__declspec(implementation_key(6927)) HRESULT _IConnectorAuto::SetCenterElement ( IDispatch * CenterObj, double x, double y, double z, int CenterKeyPointIndex );
__declspec(implementation_key(6928)) HRESULT _IConnectorAuto::GetStartPoint ( double * x, double * y, double * z );
__declspec(implementation_key(6929)) HRESULT _IConnectorAuto::SetStartPoint ( double x, double y, double z );
__declspec(implementation_key(6930)) HRESULT _IConnectorAuto::GetEndPoint ( double * x, double * y, double * z );
__declspec(implementation_key(6931)) HRESULT _IConnectorAuto::SetEndPoint ( double x, double y, double z );
__declspec(implementation_key(6932)) HRESULT _IConnectorAuto::GetStartTerminatorType ( enum DimTermTypeConstants * StartTermType );
__declspec(implementation_key(6933)) HRESULT _IConnectorAuto::SetStartTerminatorType ( enum DimTermTypeConstants StartTermType );
__declspec(implementation_key(6934)) HRESULT _IConnectorAuto::GetEndTerminatorType ( enum DimTermTypeConstants * EndTermType );
__declspec(implementation_key(6935)) HRESULT _IConnectorAuto::SetEndTerminatorType ( enum DimTermTypeConstants EndTermType );
__declspec(implementation_key(6936)) HRESULT _IConnectorAuto::GetFlipState ( VARIANT_BOOL * FlipState );
__declspec(implementation_key(6937)) HRESULT _IConnectorAuto::SetFlipState ( VARIANT_BOOL FlipState );
__declspec(implementation_key(6938)) HRESULT _IConnectorAuto::GetJumpRadius ( double * JumpRadius );
__declspec(implementation_key(6939)) HRESULT _IConnectorAuto::SetJumpRadius ( double JumpRadius );
__declspec(implementation_key(6940)) double _IConnectorAuto::GetTextScale ( );
__declspec(implementation_key(6941)) void _IConnectorAuto::PutTextScale ( double pdAngle );
__declspec(implementation_key(6942)) void _IConnectorAuto::PutLayer ( _bstr_t Layer );
__declspec(implementation_key(6943)) _bstr_t _IConnectorAuto::GetLayer ( );
__declspec(implementation_key(6944)) HRESULT _IConnectorAuto::PromoteToCurrentVersion ( );
__declspec(implementation_key(6945)) IDispatchPtr _IConnectorAuto::GetAttributeSets ( );
__declspec(implementation_key(6946)) VARIANT_BOOL _IConnectorAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(6947)) GroupPtr Groups::Item ( const _variant_t & Index );
__declspec(implementation_key(6948)) TGFramework::ApplicationPtr Groups::GetApplication ( );
__declspec(implementation_key(6949)) long Groups::GetCount ( );
__declspec(implementation_key(6950)) IDispatchPtr Groups::GetParent ( );
__declspec(implementation_key(6951)) GroupPtr Groups::Add ( const _variant_t & Name );
__declspec(implementation_key(6952)) HRESULT Groups::Remove ( const _variant_t & Index );
__declspec(implementation_key(6953)) GroupPtr Groups::AddEmptyGroup ( );
__declspec(implementation_key(6954)) IDispatchPtr Group::GetStyle ( );
__declspec(implementation_key(6955)) HRESULT Group::Ungroup ( );
__declspec(implementation_key(6956)) HRESULT Group::AddToGroup ( const _variant_t & NumObjects, const _variant_t & Objects );
__declspec(implementation_key(6957)) HRESULT Group::RemoveFromGroup ( const _variant_t & NumObjects, const _variant_t & Objects );
__declspec(implementation_key(6958)) IDispatchPtr Group::Item ( const _variant_t & Index );
__declspec(implementation_key(6959)) long Group::GetCount ( );
__declspec(implementation_key(6960)) long Group::IsNested ( );
__declspec(implementation_key(6961)) long Group::HasNested ( );
__declspec(implementation_key(6962)) void Group::PutLayer ( _bstr_t _arg1 );
__declspec(implementation_key(6963)) _bstr_t Group::GetLayer ( );
__declspec(implementation_key(6964)) TGFramework::ApplicationPtr Group::GetApplication ( );
__declspec(implementation_key(6965)) long Group::GetIndex ( );
__declspec(implementation_key(6966)) _bstr_t Group::GetName ( const _variant_t & Recurse );
__declspec(implementation_key(6967)) IDispatchPtr Group::GetParent ( );
__declspec(implementation_key(6968)) long Group::GetType ( );
__declspec(implementation_key(6969)) long Group::GetZOrder ( );
__declspec(implementation_key(6970)) _bstr_t Group::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(6971)) IDispatchPtr Group::GetDocument ( );
__declspec(implementation_key(6972)) HRESULT Group::Copy ( );
__declspec(implementation_key(6973)) HRESULT Group::Cut ( );
__declspec(implementation_key(6974)) HRESULT Group::Delete ( );
__declspec(implementation_key(6975)) HRESULT Group::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(6976)) HRESULT Group::Scale ( double Factor );
__declspec(implementation_key(6977)) HRESULT Group::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(6978)) HRESULT Group::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(6979)) IDispatchPtr Group::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(6980)) IDispatchPtr Group::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(6981)) HRESULT Group::BringToFront ( );
__declspec(implementation_key(6982)) HRESULT Group::BringForward ( );
__declspec(implementation_key(6983)) HRESULT Group::SendToBack ( );
__declspec(implementation_key(6984)) HRESULT Group::SendBackward ( );
__declspec(implementation_key(6985)) HRESULT Group::Select ( );
__declspec(implementation_key(6986)) long Group::GetKeyPointCount ( );
__declspec(implementation_key(6987)) HRESULT Group::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(6988)) HRESULT Group::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(6989)) DimensionsPtr Group::GetDimensions ( );
__declspec(implementation_key(6990)) LeadersPtr Group::GetLeaders ( );
__declspec(implementation_key(6991)) BalloonsPtr Group::GetBalloons ( );
__declspec(implementation_key(6992)) Lines2dPtr Group::GetLines2d ( );
__declspec(implementation_key(6993)) Circles2dPtr Group::GetCircles2d ( );
__declspec(implementation_key(6994)) Arcs2dPtr Group::GetArcs2d ( );
__declspec(implementation_key(6995)) Ellipses2dPtr Group::GetEllipses2d ( );
__declspec(implementation_key(6996)) BSplineCurves2dPtr Group::GetBSplineCurves2d ( );
__declspec(implementation_key(6997)) Points2dPtr Group::GetPoints2d ( );
__declspec(implementation_key(6998)) EllipticalArcs2dPtr Group::GetEllipticalArcs2d ( );
__declspec(implementation_key(6999)) Curves2dPtr Group::GetCurves2d ( );
__declspec(implementation_key(7000)) LineStrings2dPtr Group::GetLineStrings2d ( );
__declspec(implementation_key(7001)) ComplexStrings2dPtr Group::GetComplexStrings2d ( );
__declspec(implementation_key(7002)) Boundaries2dPtr Group::GetBoundaries2d ( );
__declspec(implementation_key(7003)) TextBoxesPtr Group::GetTextBoxes ( );
__declspec(implementation_key(7004)) TextProfilesPtr Group::GetTextProfiles ( );
__declspec(implementation_key(7005)) DatumFramesPtr Group::GetDatumFrames ( );
__declspec(implementation_key(7006)) FeatureControlFramesPtr Group::GetFeatureControlFrames ( );
__declspec(implementation_key(7007)) SurfaceFinishSymbolsPtr Group::GetSurfaceFinishSymbols ( );
__declspec(implementation_key(7008)) WeldSymbolsPtr Group::GetWeldSymbols ( );
__declspec(implementation_key(7009)) CenterMarksPtr Group::GetCenterMarks ( );
__declspec(implementation_key(7010)) CenterLinesPtr Group::GetCenterLines ( );
__declspec(implementation_key(7011)) DatumTargetsPtr Group::GetDatumTargets ( );
__declspec(implementation_key(7012)) PinSymbolsPtr Group::GetPinSymbols ( );
__declspec(implementation_key(7013)) DatumPointsPtr Group::GetDatumPoints ( );
__declspec(implementation_key(7014)) CornerAnnotationsPtr Group::GetCornerAnnotations ( );
__declspec(implementation_key(7015)) BoltHoleCirclesPtr Group::GetBoltHoleCircles ( );
__declspec(implementation_key(7016)) ConnectorsPtr Group::GetConnectors ( );
__declspec(implementation_key(7017)) IDispatchPtr Group::GetSymbols ( );
__declspec(implementation_key(7018)) GroupsPtr Group::GetGroups ( );
__declspec(implementation_key(7019)) IDispatchPtr Group::GetAttributeSets ( );
__declspec(implementation_key(7020)) VARIANT_BOOL Group::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(7021)) void Group::PutVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7022)) VARIANT_BOOL Group::GetVisible ( );
__declspec(implementation_key(7023)) void Group::PutLocatable ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7024)) VARIANT_BOOL Group::GetLocatable ( );
__declspec(implementation_key(7025)) void Group::PutEditable ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7026)) VARIANT_BOOL Group::GetEditable ( );
__declspec(implementation_key(7027)) void Group::PutUserDefinedName ( _bstr_t _arg1 );
__declspec(implementation_key(7028)) _bstr_t Group::GetUserDefinedName ( );
__declspec(implementation_key(7029)) IDispatchPtr Group::GetDrawingViews ( );
__declspec(implementation_key(7030)) enum LayoutElementTypeConstants Group::GetLayoutElementType ( );
__declspec(implementation_key(7031)) GroupPtr _IGroupsAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(7032)) IUnknownPtr _IGroupsAuto::Get_NewEnum ( );
__declspec(implementation_key(7033)) TGFramework::ApplicationPtr _IGroupsAuto::GetApplication ( );
__declspec(implementation_key(7034)) long _IGroupsAuto::GetCount ( );
__declspec(implementation_key(7035)) IDispatchPtr _IGroupsAuto::GetParent ( );
__declspec(implementation_key(7036)) GroupPtr _IGroupsAuto::Add ( const _variant_t & Name );
__declspec(implementation_key(7037)) HRESULT _IGroupsAuto::Remove ( const _variant_t & Index );
__declspec(implementation_key(7038)) GroupPtr _IGroupsAuto::AddEmptyGroup ( );
__declspec(implementation_key(7039)) IDispatchPtr _IGroupAuto::GetStyle ( );
__declspec(implementation_key(7040)) HRESULT _IGroupAuto::Ungroup ( );
__declspec(implementation_key(7041)) HRESULT _IGroupAuto::AddToGroup ( const _variant_t & NumObjects, const _variant_t & Objects );
__declspec(implementation_key(7042)) HRESULT _IGroupAuto::RemoveFromGroup ( const _variant_t & NumObjects, const _variant_t & Objects );
__declspec(implementation_key(7043)) IDispatchPtr _IGroupAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(7044)) IUnknownPtr _IGroupAuto::Get_NewEnum ( );
__declspec(implementation_key(7045)) long _IGroupAuto::GetCount ( );
__declspec(implementation_key(7046)) long _IGroupAuto::IsNested ( );
__declspec(implementation_key(7047)) long _IGroupAuto::HasNested ( );
__declspec(implementation_key(7048)) void _IGroupAuto::PutLayer ( _bstr_t Layer );
__declspec(implementation_key(7049)) _bstr_t _IGroupAuto::GetLayer ( );
__declspec(implementation_key(7050)) TGFramework::ApplicationPtr _IGroupAuto::GetApplication ( );
__declspec(implementation_key(7051)) long _IGroupAuto::GetIndex ( );
__declspec(implementation_key(7052)) _bstr_t _IGroupAuto::GetName ( const _variant_t & Recurse, long Lcid );
__declspec(implementation_key(7053)) IDispatchPtr _IGroupAuto::GetParent ( );
__declspec(implementation_key(7054)) long _IGroupAuto::GetType ( );
__declspec(implementation_key(7055)) long _IGroupAuto::GetZOrder ( );
__declspec(implementation_key(7056)) _bstr_t _IGroupAuto::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(7057)) IDispatchPtr _IGroupAuto::GetDocument ( );
__declspec(implementation_key(7058)) HRESULT _IGroupAuto::Copy ( );
__declspec(implementation_key(7059)) HRESULT _IGroupAuto::Cut ( );
__declspec(implementation_key(7060)) HRESULT _IGroupAuto::Delete ( );
__declspec(implementation_key(7061)) HRESULT _IGroupAuto::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(7062)) HRESULT _IGroupAuto::Scale ( double Factor );
__declspec(implementation_key(7063)) HRESULT _IGroupAuto::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(7064)) HRESULT _IGroupAuto::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(7065)) IDispatchPtr _IGroupAuto::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(7066)) IDispatchPtr _IGroupAuto::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(7067)) HRESULT _IGroupAuto::BringToFront ( );
__declspec(implementation_key(7068)) HRESULT _IGroupAuto::BringForward ( );
__declspec(implementation_key(7069)) HRESULT _IGroupAuto::SendToBack ( );
__declspec(implementation_key(7070)) HRESULT _IGroupAuto::SendBackward ( );
__declspec(implementation_key(7071)) HRESULT _IGroupAuto::Select ( );
__declspec(implementation_key(7072)) long _IGroupAuto::GetKeyPointCount ( );
__declspec(implementation_key(7073)) HRESULT _IGroupAuto::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(7074)) HRESULT _IGroupAuto::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(7075)) DimensionsPtr _IGroupAuto::GetDimensions ( );
__declspec(implementation_key(7076)) LeadersPtr _IGroupAuto::GetLeaders ( );
__declspec(implementation_key(7077)) BalloonsPtr _IGroupAuto::GetBalloons ( );
__declspec(implementation_key(7078)) Lines2dPtr _IGroupAuto::GetLines2d ( );
__declspec(implementation_key(7079)) Circles2dPtr _IGroupAuto::GetCircles2d ( );
__declspec(implementation_key(7080)) Arcs2dPtr _IGroupAuto::GetArcs2d ( );
__declspec(implementation_key(7081)) Ellipses2dPtr _IGroupAuto::GetEllipses2d ( );
__declspec(implementation_key(7082)) BSplineCurves2dPtr _IGroupAuto::GetBSplineCurves2d ( );
__declspec(implementation_key(7083)) Points2dPtr _IGroupAuto::GetPoints2d ( );
__declspec(implementation_key(7084)) EllipticalArcs2dPtr _IGroupAuto::GetEllipticalArcs2d ( );
__declspec(implementation_key(7085)) Curves2dPtr _IGroupAuto::GetCurves2d ( );
__declspec(implementation_key(7086)) LineStrings2dPtr _IGroupAuto::GetLineStrings2d ( );
__declspec(implementation_key(7087)) ComplexStrings2dPtr _IGroupAuto::GetComplexStrings2d ( );
__declspec(implementation_key(7088)) Boundaries2dPtr _IGroupAuto::GetBoundaries2d ( );
__declspec(implementation_key(7089)) TextBoxesPtr _IGroupAuto::GetTextBoxes ( );
__declspec(implementation_key(7090)) TextProfilesPtr _IGroupAuto::GetTextProfiles ( );
__declspec(implementation_key(7091)) DatumFramesPtr _IGroupAuto::GetDatumFrames ( );
__declspec(implementation_key(7092)) FeatureControlFramesPtr _IGroupAuto::GetFeatureControlFrames ( );
__declspec(implementation_key(7093)) SurfaceFinishSymbolsPtr _IGroupAuto::GetSurfaceFinishSymbols ( );
__declspec(implementation_key(7094)) WeldSymbolsPtr _IGroupAuto::GetWeldSymbols ( );
__declspec(implementation_key(7095)) CenterMarksPtr _IGroupAuto::GetCenterMarks ( );
__declspec(implementation_key(7096)) CenterLinesPtr _IGroupAuto::GetCenterLines ( );
__declspec(implementation_key(7097)) DatumTargetsPtr _IGroupAuto::GetDatumTargets ( );
__declspec(implementation_key(7098)) PinSymbolsPtr _IGroupAuto::GetPinSymbols ( );
__declspec(implementation_key(7099)) DatumPointsPtr _IGroupAuto::GetDatumPoints ( );
__declspec(implementation_key(7100)) CornerAnnotationsPtr _IGroupAuto::GetCornerAnnotations ( );
__declspec(implementation_key(7101)) BoltHoleCirclesPtr _IGroupAuto::GetBoltHoleCircles ( );
__declspec(implementation_key(7102)) ConnectorsPtr _IGroupAuto::GetConnectors ( );
__declspec(implementation_key(7103)) IDispatchPtr _IGroupAuto::GetSymbols ( );
__declspec(implementation_key(7104)) GroupsPtr _IGroupAuto::GetGroups ( );
__declspec(implementation_key(7105)) IDispatchPtr _IGroupAuto::GetAttributeSets ( );
__declspec(implementation_key(7106)) VARIANT_BOOL _IGroupAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(7107)) void _IGroupAuto::PutVisible ( VARIANT_BOOL Visible );
__declspec(implementation_key(7108)) VARIANT_BOOL _IGroupAuto::GetVisible ( );
__declspec(implementation_key(7109)) void _IGroupAuto::PutLocatable ( VARIANT_BOOL Locatable );
__declspec(implementation_key(7110)) VARIANT_BOOL _IGroupAuto::GetLocatable ( );
__declspec(implementation_key(7111)) void _IGroupAuto::PutEditable ( VARIANT_BOOL Editable );
__declspec(implementation_key(7112)) VARIANT_BOOL _IGroupAuto::GetEditable ( );
__declspec(implementation_key(7113)) void _IGroupAuto::PutUserDefinedName ( _bstr_t Name );
__declspec(implementation_key(7114)) _bstr_t _IGroupAuto::GetUserDefinedName ( );
__declspec(implementation_key(7115)) IDispatchPtr _IGroupAuto::GetDrawingViews ( );
__declspec(implementation_key(7116)) enum LayoutElementTypeConstants _IGroupAuto::GetLayoutElementType ( );
__declspec(implementation_key(7117)) void _IGroupStyleAuto::PutLinearColor ( long Color );
__declspec(implementation_key(7118)) long _IGroupStyleAuto::GetLinearColor ( );
__declspec(implementation_key(7119)) double _IGroupStyleAuto::GetWidth ( );
__declspec(implementation_key(7120)) void _IGroupStyleAuto::PutWidth ( double PenWidth );
__declspec(implementation_key(7121)) void _IGroupStyleAuto::PutUnits ( long Units );
__declspec(implementation_key(7122)) long _IGroupStyleAuto::GetUnits ( );
__declspec(implementation_key(7123)) VARIANT_BOOL _IGroupStyleAuto::GetAutoPhase ( );
__declspec(implementation_key(7124)) void _IGroupStyleAuto::PutAutoPhase ( VARIANT_BOOL AutoPhase );
__declspec(implementation_key(7125)) long _IGroupStyleAuto::GetDashGapCount ( );
__declspec(implementation_key(7126)) double _IGroupStyleAuto::GetDashStrokePercent ( );
__declspec(implementation_key(7127)) void _IGroupStyleAuto::PutDashStrokePercent ( double DashStrokePercent );
__declspec(implementation_key(7128)) void _IGroupStyleAuto::PutLinearName ( _bstr_t StyleName );
__declspec(implementation_key(7129)) _bstr_t _IGroupStyleAuto::GetLinearName ( );
__declspec(implementation_key(7130)) void _IGroupStyleAuto::PutDashName ( _bstr_t StyleName );
__declspec(implementation_key(7131)) _bstr_t _IGroupStyleAuto::GetDashName ( );
__declspec(implementation_key(7132)) HRESULT _IGroupStyleAuto::UseActiveStyle ( long StyleType );
__declspec(implementation_key(7133)) HRESULT _IGroupStyleAuto::SetDashGap ( long DashCount, SAFEARRAY * * Dashes );
__declspec(implementation_key(7134)) HRESULT _IGroupStyleAuto::GetDashGap ( long DashCount, SAFEARRAY * * Dashes );
__declspec(implementation_key(7135)) TGFramework::ApplicationPtr _IDimensionStylesAuto::GetApplication ( );
__declspec(implementation_key(7136)) long _IDimensionStylesAuto::GetCount ( );
__declspec(implementation_key(7137)) IDispatchPtr _IDimensionStylesAuto::GetParent ( );
__declspec(implementation_key(7138)) DimensionStylePtr _IDimensionStylesAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(7139)) IUnknownPtr _IDimensionStylesAuto::Get_NewEnum ( );
__declspec(implementation_key(7140)) DimensionStylePtr _IDimensionStylesAuto::Add ( _bstr_t Name, _bstr_t Parent );
__declspec(implementation_key(7141)) HRESULT _IDimensionStylesAuto::Remove ( _bstr_t Name );
__declspec(implementation_key(7142)) _bstr_t _IDimensionStylesAuto::GetActive ( );
__declspec(implementation_key(7143)) void _IDimensionStylesAuto::PutActive ( _bstr_t Name );
__declspec(implementation_key(7144)) HRESULT _IDimensionStylesAuto::AddEx ( _bstr_t Name, VARIANT_BOOL bOverride, IDispatch * pSourceDoc );
__declspec(implementation_key(7145)) VARIANT_BOOL _IDimensionStylesAuto::IsDimStyleExists ( _bstr_t DimensionStyle );
__declspec(implementation_key(7146)) TGFramework::ApplicationPtr _IFeatureControlFrameDataSetsAuto::GetApplication ( );
__declspec(implementation_key(7147)) long _IFeatureControlFrameDataSetsAuto::GetCount ( );
__declspec(implementation_key(7148)) IDispatchPtr _IFeatureControlFrameDataSetsAuto::GetParent ( );
__declspec(implementation_key(7149)) FeatureControlFrameDataSetPtr _IFeatureControlFrameDataSetsAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(7150)) IUnknownPtr _IFeatureControlFrameDataSetsAuto::Get_NewEnum ( );
__declspec(implementation_key(7151)) FeatureControlFrameDataSetPtr _IFeatureControlFrameDataSetsAuto::Add ( _bstr_t Name );
__declspec(implementation_key(7152)) HRESULT _IFeatureControlFrameDataSetsAuto::Remove ( _bstr_t Name );
__declspec(implementation_key(7153)) TGFramework::ApplicationPtr _IWeldSymbolDataSetsAuto::GetApplication ( );
__declspec(implementation_key(7154)) long _IWeldSymbolDataSetsAuto::GetCount ( );
__declspec(implementation_key(7155)) IDispatchPtr _IWeldSymbolDataSetsAuto::GetParent ( );
__declspec(implementation_key(7156)) WeldSymbolDataSetPtr _IWeldSymbolDataSetsAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(7157)) IUnknownPtr _IWeldSymbolDataSetsAuto::Get_NewEnum ( );
__declspec(implementation_key(7158)) WeldSymbolDataSetPtr _IWeldSymbolDataSetsAuto::Add ( _bstr_t Name );
__declspec(implementation_key(7159)) HRESULT _IWeldSymbolDataSetsAuto::Remove ( _bstr_t Name );
__declspec(implementation_key(7160)) TGFramework::ApplicationPtr _ISurfaceFinishSymbolDataSetsAuto::GetApplication ( );
__declspec(implementation_key(7161)) long _ISurfaceFinishSymbolDataSetsAuto::GetCount ( );
__declspec(implementation_key(7162)) IDispatchPtr _ISurfaceFinishSymbolDataSetsAuto::GetParent ( );
__declspec(implementation_key(7163)) SurfaceFinishSymbolDataSetPtr _ISurfaceFinishSymbolDataSetsAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(7164)) IUnknownPtr _ISurfaceFinishSymbolDataSetsAuto::Get_NewEnum ( );
__declspec(implementation_key(7165)) SurfaceFinishSymbolDataSetPtr _ISurfaceFinishSymbolDataSetsAuto::Add ( _bstr_t Name );
__declspec(implementation_key(7166)) HRESULT _ISurfaceFinishSymbolDataSetsAuto::Remove ( _bstr_t Name );
__declspec(implementation_key(7167)) enum FrameShapeConstants _IFrameAuto::GetShapeOption ( );
__declspec(implementation_key(7168)) void _IFrameAuto::PutShapeOption ( enum FrameShapeConstants ShapeOption );
__declspec(implementation_key(7169)) VARIANT_BOOL _IFrameAuto::GetBorderPrinted ( );
__declspec(implementation_key(7170)) void _IFrameAuto::PutBorderPrinted ( VARIANT_BOOL Printed );
__declspec(implementation_key(7171)) VARIANT_BOOL _IFrameAuto::GetBorderVisible ( );
__declspec(implementation_key(7172)) void _IFrameAuto::PutBorderVisible ( VARIANT_BOOL Visible );
__declspec(implementation_key(7173)) double _IFrameAuto::GetMargin ( );
__declspec(implementation_key(7174)) void _IFrameAuto::PutMargin ( double Margin );
__declspec(implementation_key(7175)) double _IFrameAuto::GetBorderWidth ( );
__declspec(implementation_key(7176)) void _IFrameAuto::PutBorderWidth ( double Margin );
__declspec(implementation_key(7177)) long _IFrameAuto::GetBorderColor ( );
__declspec(implementation_key(7178)) void _IFrameAuto::PutBorderColor ( long Color );
__declspec(implementation_key(7179)) _bstr_t _IFrameAuto::GetBorderDashTypeName ( );
__declspec(implementation_key(7180)) void _IFrameAuto::PutBorderDashTypeName ( _bstr_t Name );
__declspec(implementation_key(7181)) VARIANT_BOOL _ISmartFrame2dDefaultsAuto::GetContentsVisible ( );
__declspec(implementation_key(7182)) void _ISmartFrame2dDefaultsAuto::PutContentsVisible ( VARIANT_BOOL Visible );
__declspec(implementation_key(7183)) double _ISmartFrame2dDefaultsAuto::GetCropBottom ( );
__declspec(implementation_key(7184)) void _ISmartFrame2dDefaultsAuto::PutCropBottom ( double Distance );
__declspec(implementation_key(7185)) double _ISmartFrame2dDefaultsAuto::GetCropLeft ( );
__declspec(implementation_key(7186)) void _ISmartFrame2dDefaultsAuto::PutCropLeft ( double Distance );
__declspec(implementation_key(7187)) double _ISmartFrame2dDefaultsAuto::GetCropRight ( );
__declspec(implementation_key(7188)) void _ISmartFrame2dDefaultsAuto::PutCropRight ( double Distance );
__declspec(implementation_key(7189)) double _ISmartFrame2dDefaultsAuto::GetCropTop ( );
__declspec(implementation_key(7190)) void _ISmartFrame2dDefaultsAuto::PutCropTop ( double Distance );
__declspec(implementation_key(7191)) VARIANT_BOOL _ISmartFrame2dDefaultsAuto::GetIsLinkPublic ( );
__declspec(implementation_key(7192)) void _ISmartFrame2dDefaultsAuto::PutIsLinkPublic ( VARIANT_BOOL IsPublic );
__declspec(implementation_key(7193)) VARIANT_BOOL _ISmartFrame2dDefaultsAuto::GetProtectFromSelection ( );
__declspec(implementation_key(7194)) void _ISmartFrame2dDefaultsAuto::PutProtectFromSelection ( VARIANT_BOOL Protect );
__declspec(implementation_key(7195)) double _ISmartFrame2dDefaultsAuto::GetRotation ( );
__declspec(implementation_key(7196)) void _ISmartFrame2dDefaultsAuto::PutRotation ( double Angle );
__declspec(implementation_key(7197)) double _ISmartFrame2dDefaultsAuto::GetScaleFactor ( );
__declspec(implementation_key(7198)) void _ISmartFrame2dDefaultsAuto::PutScaleFactor ( double Factor );
__declspec(implementation_key(7199)) enum UpdateOptionConstants _ISmartFrame2dDefaultsAuto::GetUpdateOption ( );
__declspec(implementation_key(7200)) void _ISmartFrame2dDefaultsAuto::PutUpdateOption ( enum UpdateOptionConstants option );
__declspec(implementation_key(7201)) HRESULT _ISmartFrame2dDefaultsAuto::GetOrigin ( double * xOrigin, double * yOrigin );
__declspec(implementation_key(7202)) HRESULT _ISmartFrame2dDefaultsAuto::SetOrigin ( double xOrigin, double yOrigin );
__declspec(implementation_key(7203)) enum FrameShapeConstants Frame::GetShapeOption ( );
__declspec(implementation_key(7204)) void Frame::PutShapeOption ( enum FrameShapeConstants _arg1 );
__declspec(implementation_key(7205)) VARIANT_BOOL Frame::GetBorderPrinted ( );
__declspec(implementation_key(7206)) void Frame::PutBorderPrinted ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7207)) VARIANT_BOOL Frame::GetBorderVisible ( );
__declspec(implementation_key(7208)) void Frame::PutBorderVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7209)) double Frame::GetMargin ( );
__declspec(implementation_key(7210)) void Frame::PutMargin ( double _arg1 );
__declspec(implementation_key(7211)) double Frame::GetBorderWidth ( );
__declspec(implementation_key(7212)) void Frame::PutBorderWidth ( double _arg1 );
__declspec(implementation_key(7213)) long Frame::GetBorderColor ( );
__declspec(implementation_key(7214)) void Frame::PutBorderColor ( long _arg1 );
__declspec(implementation_key(7215)) _bstr_t Frame::GetBorderDashTypeName ( );
__declspec(implementation_key(7216)) void Frame::PutBorderDashTypeName ( _bstr_t _arg1 );
__declspec(implementation_key(7217)) TGFramework::ApplicationPtr SmartFrame2dStyle::GetApplication ( );
__declspec(implementation_key(7218)) IDispatchPtr SmartFrame2dStyle::GetParent ( );
__declspec(implementation_key(7219)) long SmartFrame2dStyle::GetType ( );
__declspec(implementation_key(7220)) SmartFrame2dDefaultsPtr SmartFrame2dStyle::GetBehaviorDefaults ( );
__declspec(implementation_key(7221)) FramePtr SmartFrame2dStyle::GetFrameDefaults ( );
__declspec(implementation_key(7222)) VARIANT_BOOL SmartFrame2dStyle::GetLocateChildren ( );
__declspec(implementation_key(7223)) void SmartFrame2dStyle::PutLocateChildren ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7224)) _bstr_t SmartFrame2dStyle::GetName ( );
__declspec(implementation_key(7225)) void SmartFrame2dStyle::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(7226)) enum PlacementMethodConstants SmartFrame2dStyle::GetPlacement ( );
__declspec(implementation_key(7227)) void SmartFrame2dStyle::PutPlacement ( enum PlacementMethodConstants _arg1 );
__declspec(implementation_key(7228)) VARIANT_BOOL SmartFrame2dStyle::GetPrinted ( );
__declspec(implementation_key(7229)) void SmartFrame2dStyle::PutPrinted ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7230)) enum SizeModeConstants SmartFrame2dStyle::GetSizeMode ( );
__declspec(implementation_key(7231)) void SmartFrame2dStyle::PutSizeMode ( enum SizeModeConstants _arg1 );
__declspec(implementation_key(7232)) enum FrameShapeConstants SmartFrame2dStyle::GetShapeOption ( );
__declspec(implementation_key(7233)) void SmartFrame2dStyle::PutShapeOption ( enum FrameShapeConstants _arg1 );
__declspec(implementation_key(7234)) VARIANT_BOOL SmartFrame2dStyle::GetBorderPrinted ( );
__declspec(implementation_key(7235)) void SmartFrame2dStyle::PutBorderPrinted ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7236)) VARIANT_BOOL SmartFrame2dStyle::GetBorderVisible ( );
__declspec(implementation_key(7237)) void SmartFrame2dStyle::PutBorderVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7238)) double SmartFrame2dStyle::GetMargin ( );
__declspec(implementation_key(7239)) void SmartFrame2dStyle::PutMargin ( double _arg1 );
__declspec(implementation_key(7240)) double SmartFrame2dStyle::GetBorderWidth ( );
__declspec(implementation_key(7241)) void SmartFrame2dStyle::PutBorderWidth ( double _arg1 );
__declspec(implementation_key(7242)) long SmartFrame2dStyle::GetBorderColor ( );
__declspec(implementation_key(7243)) void SmartFrame2dStyle::PutBorderColor ( long _arg1 );
__declspec(implementation_key(7244)) _bstr_t SmartFrame2dStyle::GetBorderDashTypeName ( );
__declspec(implementation_key(7245)) void SmartFrame2dStyle::PutBorderDashTypeName ( _bstr_t _arg1 );
__declspec(implementation_key(7246)) VARIANT_BOOL SmartFrame2dStyle::GetContentsVisible ( );
__declspec(implementation_key(7247)) void SmartFrame2dStyle::PutContentsVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7248)) double SmartFrame2dStyle::GetCropBottom ( );
__declspec(implementation_key(7249)) void SmartFrame2dStyle::PutCropBottom ( double _arg1 );
__declspec(implementation_key(7250)) double SmartFrame2dStyle::GetCropLeft ( );
__declspec(implementation_key(7251)) void SmartFrame2dStyle::PutCropLeft ( double _arg1 );
__declspec(implementation_key(7252)) double SmartFrame2dStyle::GetCropRight ( );
__declspec(implementation_key(7253)) void SmartFrame2dStyle::PutCropRight ( double _arg1 );
__declspec(implementation_key(7254)) double SmartFrame2dStyle::GetCropTop ( );
__declspec(implementation_key(7255)) void SmartFrame2dStyle::PutCropTop ( double _arg1 );
__declspec(implementation_key(7256)) VARIANT_BOOL SmartFrame2dStyle::GetIsLinkPublic ( );
__declspec(implementation_key(7257)) void SmartFrame2dStyle::PutIsLinkPublic ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7258)) VARIANT_BOOL SmartFrame2dStyle::GetProtectFromSelection ( );
__declspec(implementation_key(7259)) void SmartFrame2dStyle::PutProtectFromSelection ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7260)) double SmartFrame2dStyle::GetRotation ( );
__declspec(implementation_key(7261)) void SmartFrame2dStyle::PutRotation ( double _arg1 );
__declspec(implementation_key(7262)) double SmartFrame2dStyle::GetScaleFactor ( );
__declspec(implementation_key(7263)) void SmartFrame2dStyle::PutScaleFactor ( double _arg1 );
__declspec(implementation_key(7264)) enum UpdateOptionConstants SmartFrame2dStyle::GetUpdateOption ( );
__declspec(implementation_key(7265)) void SmartFrame2dStyle::PutUpdateOption ( enum UpdateOptionConstants _arg1 );
__declspec(implementation_key(7266)) HRESULT SmartFrame2dStyle::GetOrigin ( double * xOrigin, double * yOrigin );
__declspec(implementation_key(7267)) HRESULT SmartFrame2dStyle::SetOrigin ( double xOrigin, double yOrigin );
__declspec(implementation_key(7268)) IDispatchPtr SmartFrame2dStyle::GetAttributeSets ( );
__declspec(implementation_key(7269)) VARIANT_BOOL SmartFrame2dStyle::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(7270)) VARIANT_BOOL SmartFrame2dDefaults::GetContentsVisible ( );
__declspec(implementation_key(7271)) void SmartFrame2dDefaults::PutContentsVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7272)) double SmartFrame2dDefaults::GetCropBottom ( );
__declspec(implementation_key(7273)) void SmartFrame2dDefaults::PutCropBottom ( double _arg1 );
__declspec(implementation_key(7274)) double SmartFrame2dDefaults::GetCropLeft ( );
__declspec(implementation_key(7275)) void SmartFrame2dDefaults::PutCropLeft ( double _arg1 );
__declspec(implementation_key(7276)) double SmartFrame2dDefaults::GetCropRight ( );
__declspec(implementation_key(7277)) void SmartFrame2dDefaults::PutCropRight ( double _arg1 );
__declspec(implementation_key(7278)) double SmartFrame2dDefaults::GetCropTop ( );
__declspec(implementation_key(7279)) void SmartFrame2dDefaults::PutCropTop ( double _arg1 );
__declspec(implementation_key(7280)) VARIANT_BOOL SmartFrame2dDefaults::GetIsLinkPublic ( );
__declspec(implementation_key(7281)) void SmartFrame2dDefaults::PutIsLinkPublic ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7282)) VARIANT_BOOL SmartFrame2dDefaults::GetProtectFromSelection ( );
__declspec(implementation_key(7283)) void SmartFrame2dDefaults::PutProtectFromSelection ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7284)) double SmartFrame2dDefaults::GetRotation ( );
__declspec(implementation_key(7285)) void SmartFrame2dDefaults::PutRotation ( double _arg1 );
__declspec(implementation_key(7286)) double SmartFrame2dDefaults::GetScaleFactor ( );
__declspec(implementation_key(7287)) void SmartFrame2dDefaults::PutScaleFactor ( double _arg1 );
__declspec(implementation_key(7288)) enum UpdateOptionConstants SmartFrame2dDefaults::GetUpdateOption ( );
__declspec(implementation_key(7289)) void SmartFrame2dDefaults::PutUpdateOption ( enum UpdateOptionConstants _arg1 );
__declspec(implementation_key(7290)) HRESULT SmartFrame2dDefaults::GetOrigin ( double * xOrigin, double * yOrigin );
__declspec(implementation_key(7291)) HRESULT SmartFrame2dDefaults::SetOrigin ( double xOrigin, double yOrigin );
__declspec(implementation_key(7292)) TGFramework::ApplicationPtr _ISmartFrame2dStyleAuto::GetApplication ( );
__declspec(implementation_key(7293)) IDispatchPtr _ISmartFrame2dStyleAuto::GetParent ( );
__declspec(implementation_key(7294)) long _ISmartFrame2dStyleAuto::GetType ( );
__declspec(implementation_key(7295)) SmartFrame2dDefaultsPtr _ISmartFrame2dStyleAuto::GetBehaviorDefaults ( );
__declspec(implementation_key(7296)) FramePtr _ISmartFrame2dStyleAuto::GetFrameDefaults ( );
__declspec(implementation_key(7297)) VARIANT_BOOL _ISmartFrame2dStyleAuto::GetLocateChildren ( );
__declspec(implementation_key(7298)) void _ISmartFrame2dStyleAuto::PutLocateChildren ( VARIANT_BOOL Locate );
__declspec(implementation_key(7299)) _bstr_t _ISmartFrame2dStyleAuto::GetName ( );
__declspec(implementation_key(7300)) void _ISmartFrame2dStyleAuto::PutName ( _bstr_t Name );
__declspec(implementation_key(7301)) enum PlacementMethodConstants _ISmartFrame2dStyleAuto::GetPlacement ( );
__declspec(implementation_key(7302)) void _ISmartFrame2dStyleAuto::PutPlacement ( enum PlacementMethodConstants option );
__declspec(implementation_key(7303)) VARIANT_BOOL _ISmartFrame2dStyleAuto::GetPrinted ( );
__declspec(implementation_key(7304)) void _ISmartFrame2dStyleAuto::PutPrinted ( VARIANT_BOOL Printed );
__declspec(implementation_key(7305)) enum SizeModeConstants _ISmartFrame2dStyleAuto::GetSizeMode ( );
__declspec(implementation_key(7306)) void _ISmartFrame2dStyleAuto::PutSizeMode ( enum SizeModeConstants Mode );
__declspec(implementation_key(7307)) enum FrameShapeConstants _ISmartFrame2dStyleAuto::GetShapeOption ( );
__declspec(implementation_key(7308)) void _ISmartFrame2dStyleAuto::PutShapeOption ( enum FrameShapeConstants ShapeOption );
__declspec(implementation_key(7309)) VARIANT_BOOL _ISmartFrame2dStyleAuto::GetBorderPrinted ( );
__declspec(implementation_key(7310)) void _ISmartFrame2dStyleAuto::PutBorderPrinted ( VARIANT_BOOL Printed );
__declspec(implementation_key(7311)) VARIANT_BOOL _ISmartFrame2dStyleAuto::GetBorderVisible ( );
__declspec(implementation_key(7312)) void _ISmartFrame2dStyleAuto::PutBorderVisible ( VARIANT_BOOL Visible );
__declspec(implementation_key(7313)) double _ISmartFrame2dStyleAuto::GetMargin ( );
__declspec(implementation_key(7314)) void _ISmartFrame2dStyleAuto::PutMargin ( double Margin );
__declspec(implementation_key(7315)) double _ISmartFrame2dStyleAuto::GetBorderWidth ( );
__declspec(implementation_key(7316)) void _ISmartFrame2dStyleAuto::PutBorderWidth ( double Margin );
__declspec(implementation_key(7317)) long _ISmartFrame2dStyleAuto::GetBorderColor ( );
__declspec(implementation_key(7318)) void _ISmartFrame2dStyleAuto::PutBorderColor ( long Color );
__declspec(implementation_key(7319)) _bstr_t _ISmartFrame2dStyleAuto::GetBorderDashTypeName ( );
__declspec(implementation_key(7320)) void _ISmartFrame2dStyleAuto::PutBorderDashTypeName ( _bstr_t Name );
__declspec(implementation_key(7321)) VARIANT_BOOL _ISmartFrame2dStyleAuto::GetContentsVisible ( );
__declspec(implementation_key(7322)) void _ISmartFrame2dStyleAuto::PutContentsVisible ( VARIANT_BOOL Visible );
__declspec(implementation_key(7323)) double _ISmartFrame2dStyleAuto::GetCropBottom ( );
__declspec(implementation_key(7324)) void _ISmartFrame2dStyleAuto::PutCropBottom ( double Distance );
__declspec(implementation_key(7325)) double _ISmartFrame2dStyleAuto::GetCropLeft ( );
__declspec(implementation_key(7326)) void _ISmartFrame2dStyleAuto::PutCropLeft ( double Distance );
__declspec(implementation_key(7327)) double _ISmartFrame2dStyleAuto::GetCropRight ( );
__declspec(implementation_key(7328)) void _ISmartFrame2dStyleAuto::PutCropRight ( double Distance );
__declspec(implementation_key(7329)) double _ISmartFrame2dStyleAuto::GetCropTop ( );
__declspec(implementation_key(7330)) void _ISmartFrame2dStyleAuto::PutCropTop ( double Distance );
__declspec(implementation_key(7331)) VARIANT_BOOL _ISmartFrame2dStyleAuto::GetIsLinkPublic ( );
__declspec(implementation_key(7332)) void _ISmartFrame2dStyleAuto::PutIsLinkPublic ( VARIANT_BOOL IsPublic );
__declspec(implementation_key(7333)) VARIANT_BOOL _ISmartFrame2dStyleAuto::GetProtectFromSelection ( );
__declspec(implementation_key(7334)) void _ISmartFrame2dStyleAuto::PutProtectFromSelection ( VARIANT_BOOL Protect );
__declspec(implementation_key(7335)) double _ISmartFrame2dStyleAuto::GetRotation ( );
__declspec(implementation_key(7336)) void _ISmartFrame2dStyleAuto::PutRotation ( double Angle );
__declspec(implementation_key(7337)) double _ISmartFrame2dStyleAuto::GetScaleFactor ( );
__declspec(implementation_key(7338)) void _ISmartFrame2dStyleAuto::PutScaleFactor ( double Factor );
__declspec(implementation_key(7339)) enum UpdateOptionConstants _ISmartFrame2dStyleAuto::GetUpdateOption ( );
__declspec(implementation_key(7340)) void _ISmartFrame2dStyleAuto::PutUpdateOption ( enum UpdateOptionConstants option );
__declspec(implementation_key(7341)) HRESULT _ISmartFrame2dStyleAuto::GetOrigin ( double * xOrigin, double * yOrigin );
__declspec(implementation_key(7342)) HRESULT _ISmartFrame2dStyleAuto::SetOrigin ( double xOrigin, double yOrigin );
__declspec(implementation_key(7343)) IDispatchPtr _ISmartFrame2dStyleAuto::GetAttributeSets ( );
__declspec(implementation_key(7344)) VARIANT_BOOL _ISmartFrame2dStyleAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(7345)) FramePtr _ISmartFrame2dAuto::GetFrame ( );
__declspec(implementation_key(7346)) void _ISmartFrame2dAuto::PutStyle ( struct SmartFrame2dStyle * Style );
__declspec(implementation_key(7347)) SmartFrame2dStylePtr _ISmartFrame2dAuto::GetStyle ( );
__declspec(implementation_key(7348)) void _ISmartFrame2dAuto::PutContentsVisible ( VARIANT_BOOL Visible );
__declspec(implementation_key(7349)) VARIANT_BOOL _ISmartFrame2dAuto::GetContentsVisible ( );
__declspec(implementation_key(7350)) void _ISmartFrame2dAuto::PutCropRight ( double Distance );
__declspec(implementation_key(7351)) double _ISmartFrame2dAuto::GetCropRight ( );
__declspec(implementation_key(7352)) void _ISmartFrame2dAuto::PutCropTop ( double Offset );
__declspec(implementation_key(7353)) double _ISmartFrame2dAuto::GetCropTop ( );
__declspec(implementation_key(7354)) void _ISmartFrame2dAuto::PutCropBottom ( double Distance );
__declspec(implementation_key(7355)) double _ISmartFrame2dAuto::GetCropBottom ( );
__declspec(implementation_key(7356)) void _ISmartFrame2dAuto::PutCropLeft ( double Distance );
__declspec(implementation_key(7357)) double _ISmartFrame2dAuto::GetCropLeft ( );
__declspec(implementation_key(7358)) void _ISmartFrame2dAuto::PutDescription ( _bstr_t Description );
__declspec(implementation_key(7359)) _bstr_t _ISmartFrame2dAuto::GetDescription ( );
__declspec(implementation_key(7360)) void _ISmartFrame2dAuto::PutDisplayType ( enum DisplayTypeConstants Type );
__declspec(implementation_key(7361)) enum DisplayTypeConstants _ISmartFrame2dAuto::GetDisplayType ( );
__declspec(implementation_key(7362)) VARIANT_BOOL _ISmartFrame2dAuto::GetIsLink ( );
__declspec(implementation_key(7363)) void _ISmartFrame2dAuto::PutIsLinkPublic ( VARIANT_BOOL LinkPublic );
__declspec(implementation_key(7364)) VARIANT_BOOL _ISmartFrame2dAuto::GetIsLinkPublic ( );
__declspec(implementation_key(7365)) _bstr_t _ISmartFrame2dAuto::GetObjectType ( );
__declspec(implementation_key(7366)) long _ISmartFrame2dAuto::GetObjectVerbsCount ( );
__declspec(implementation_key(7367)) void _ISmartFrame2dAuto::PutProtectFromSelection ( VARIANT_BOOL Protect );
__declspec(implementation_key(7368)) VARIANT_BOOL _ISmartFrame2dAuto::GetProtectFromSelection ( );
__declspec(implementation_key(7369)) void _ISmartFrame2dAuto::PutRotationAngle ( double Angle );
__declspec(implementation_key(7370)) double _ISmartFrame2dAuto::GetRotationAngle ( );
__declspec(implementation_key(7371)) void _ISmartFrame2dAuto::PutScaleFactor ( double ScaleFactor );
__declspec(implementation_key(7372)) double _ISmartFrame2dAuto::GetScaleFactor ( );
__declspec(implementation_key(7373)) IDispatchPtr _ISmartFrame2dAuto::GetObject ( );
__declspec(implementation_key(7374)) void _ISmartFrame2dAuto::PutAutomaticLinkUpdate ( VARIANT_BOOL Automatic );
__declspec(implementation_key(7375)) VARIANT_BOOL _ISmartFrame2dAuto::GetAutomaticLinkUpdate ( );
__declspec(implementation_key(7376)) _bstr_t _ISmartFrame2dAuto::LinkMoniker ( const _variant_t & WantDisplayableVersion );
__declspec(implementation_key(7377)) _bstr_t _ISmartFrame2dAuto::ObjectVerbs ( const _variant_t & Index );
__declspec(implementation_key(7378)) HRESULT _ISmartFrame2dAuto::GetOrigin ( double * x, double * y );
__declspec(implementation_key(7379)) HRESULT _ISmartFrame2dAuto::SetOrigin ( double x, double y );
__declspec(implementation_key(7380)) HRESULT _ISmartFrame2dAuto::ChangeCrop ( double top, double bottom, double left, double right );
__declspec(implementation_key(7381)) HRESULT _ISmartFrame2dAuto::CreateLink ( const _variant_t & SourceDoc, const _variant_t & SourceItem );
__declspec(implementation_key(7382)) HRESULT _ISmartFrame2dAuto::CreateEmbed ( const _variant_t & SourceDoc, const _variant_t & ObjectType );
__declspec(implementation_key(7383)) HRESULT _ISmartFrame2dAuto::DoVerb ( const _variant_t & DoVerb );
__declspec(implementation_key(7384)) HRESULT _ISmartFrame2dAuto::Fit ( );
__declspec(implementation_key(7385)) HRESULT _ISmartFrame2dAuto::Update ( );
__declspec(implementation_key(7386)) TGFramework::ApplicationPtr _ISmartFrame2dAuto::GetApplication ( );
__declspec(implementation_key(7387)) long _ISmartFrame2dAuto::GetIndex ( );
__declspec(implementation_key(7388)) _bstr_t _ISmartFrame2dAuto::GetName ( const _variant_t & Recurse, long Lcid );
__declspec(implementation_key(7389)) IDispatchPtr _ISmartFrame2dAuto::GetParent ( );
__declspec(implementation_key(7390)) long _ISmartFrame2dAuto::GetType ( );
__declspec(implementation_key(7391)) long _ISmartFrame2dAuto::GetZOrder ( );
__declspec(implementation_key(7392)) _bstr_t _ISmartFrame2dAuto::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(7393)) IDispatchPtr _ISmartFrame2dAuto::GetDocument ( );
__declspec(implementation_key(7394)) HRESULT _ISmartFrame2dAuto::Copy ( );
__declspec(implementation_key(7395)) HRESULT _ISmartFrame2dAuto::Cut ( );
__declspec(implementation_key(7396)) HRESULT _ISmartFrame2dAuto::Delete ( );
__declspec(implementation_key(7397)) HRESULT _ISmartFrame2dAuto::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(7398)) HRESULT _ISmartFrame2dAuto::Scale ( double Factor );
__declspec(implementation_key(7399)) HRESULT _ISmartFrame2dAuto::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(7400)) HRESULT _ISmartFrame2dAuto::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(7401)) IDispatchPtr _ISmartFrame2dAuto::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(7402)) IDispatchPtr _ISmartFrame2dAuto::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(7403)) HRESULT _ISmartFrame2dAuto::BringToFront ( );
__declspec(implementation_key(7404)) HRESULT _ISmartFrame2dAuto::BringForward ( );
__declspec(implementation_key(7405)) HRESULT _ISmartFrame2dAuto::SendToBack ( );
__declspec(implementation_key(7406)) HRESULT _ISmartFrame2dAuto::SendBackward ( );
__declspec(implementation_key(7407)) HRESULT _ISmartFrame2dAuto::Select ( );
__declspec(implementation_key(7408)) enum FrameShapeConstants _ISmartFrame2dAuto::GetShapeOption ( );
__declspec(implementation_key(7409)) void _ISmartFrame2dAuto::PutShapeOption ( enum FrameShapeConstants ShapeOption );
__declspec(implementation_key(7410)) VARIANT_BOOL _ISmartFrame2dAuto::GetBorderPrinted ( );
__declspec(implementation_key(7411)) void _ISmartFrame2dAuto::PutBorderPrinted ( VARIANT_BOOL Printed );
__declspec(implementation_key(7412)) VARIANT_BOOL _ISmartFrame2dAuto::GetBorderVisible ( );
__declspec(implementation_key(7413)) void _ISmartFrame2dAuto::PutBorderVisible ( VARIANT_BOOL Visible );
__declspec(implementation_key(7414)) double _ISmartFrame2dAuto::GetMargin ( );
__declspec(implementation_key(7415)) void _ISmartFrame2dAuto::PutMargin ( double Margin );
__declspec(implementation_key(7416)) double _ISmartFrame2dAuto::GetBorderWidth ( );
__declspec(implementation_key(7417)) void _ISmartFrame2dAuto::PutBorderWidth ( double Margin );
__declspec(implementation_key(7418)) long _ISmartFrame2dAuto::GetBorderColor ( );
__declspec(implementation_key(7419)) void _ISmartFrame2dAuto::PutBorderColor ( long Color );
__declspec(implementation_key(7420)) _bstr_t _ISmartFrame2dAuto::GetBorderDashTypeName ( );
__declspec(implementation_key(7421)) void _ISmartFrame2dAuto::PutBorderDashTypeName ( _bstr_t Name );
__declspec(implementation_key(7422)) long _ISmartFrame2dAuto::GetKeyPointCount ( );
__declspec(implementation_key(7423)) HRESULT _ISmartFrame2dAuto::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(7424)) HRESULT _ISmartFrame2dAuto::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(7425)) IDispatchPtr _ISmartFrame2dAuto::GetAttributeSets ( );
__declspec(implementation_key(7426)) VARIANT_BOOL _ISmartFrame2dAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(7427)) void _ISmartFrame2dAuto::PutLayer ( _bstr_t Layer );
__declspec(implementation_key(7428)) _bstr_t _ISmartFrame2dAuto::GetLayer ( );
__declspec(implementation_key(7429)) FramePtr SmartFrame2d::GetFrame ( );
__declspec(implementation_key(7430)) void SmartFrame2d::PutStyle ( struct SmartFrame2dStyle * _arg1 );
__declspec(implementation_key(7431)) SmartFrame2dStylePtr SmartFrame2d::GetStyle ( );
__declspec(implementation_key(7432)) void SmartFrame2d::PutContentsVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7433)) VARIANT_BOOL SmartFrame2d::GetContentsVisible ( );
__declspec(implementation_key(7434)) void SmartFrame2d::PutCropRight ( double _arg1 );
__declspec(implementation_key(7435)) double SmartFrame2d::GetCropRight ( );
__declspec(implementation_key(7436)) void SmartFrame2d::PutCropTop ( double _arg1 );
__declspec(implementation_key(7437)) double SmartFrame2d::GetCropTop ( );
__declspec(implementation_key(7438)) void SmartFrame2d::PutCropBottom ( double _arg1 );
__declspec(implementation_key(7439)) double SmartFrame2d::GetCropBottom ( );
__declspec(implementation_key(7440)) void SmartFrame2d::PutCropLeft ( double _arg1 );
__declspec(implementation_key(7441)) double SmartFrame2d::GetCropLeft ( );
__declspec(implementation_key(7442)) void SmartFrame2d::PutDescription ( _bstr_t _arg1 );
__declspec(implementation_key(7443)) _bstr_t SmartFrame2d::GetDescription ( );
__declspec(implementation_key(7444)) void SmartFrame2d::PutDisplayType ( enum DisplayTypeConstants _arg1 );
__declspec(implementation_key(7445)) enum DisplayTypeConstants SmartFrame2d::GetDisplayType ( );
__declspec(implementation_key(7446)) VARIANT_BOOL SmartFrame2d::GetIsLink ( );
__declspec(implementation_key(7447)) void SmartFrame2d::PutIsLinkPublic ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7448)) VARIANT_BOOL SmartFrame2d::GetIsLinkPublic ( );
__declspec(implementation_key(7449)) _bstr_t SmartFrame2d::GetObjectType ( );
__declspec(implementation_key(7450)) long SmartFrame2d::GetObjectVerbsCount ( );
__declspec(implementation_key(7451)) void SmartFrame2d::PutProtectFromSelection ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7452)) VARIANT_BOOL SmartFrame2d::GetProtectFromSelection ( );
__declspec(implementation_key(7453)) void SmartFrame2d::PutRotationAngle ( double _arg1 );
__declspec(implementation_key(7454)) double SmartFrame2d::GetRotationAngle ( );
__declspec(implementation_key(7455)) void SmartFrame2d::PutScaleFactor ( double _arg1 );
__declspec(implementation_key(7456)) double SmartFrame2d::GetScaleFactor ( );
__declspec(implementation_key(7457)) IDispatchPtr SmartFrame2d::GetObject ( );
__declspec(implementation_key(7458)) void SmartFrame2d::PutAutomaticLinkUpdate ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7459)) VARIANT_BOOL SmartFrame2d::GetAutomaticLinkUpdate ( );
__declspec(implementation_key(7460)) _bstr_t SmartFrame2d::LinkMoniker ( const _variant_t & WantDisplayableVersion );
__declspec(implementation_key(7461)) _bstr_t SmartFrame2d::ObjectVerbs ( const _variant_t & Index );
__declspec(implementation_key(7462)) HRESULT SmartFrame2d::GetOrigin ( double * x, double * y );
__declspec(implementation_key(7463)) HRESULT SmartFrame2d::SetOrigin ( double x, double y );
__declspec(implementation_key(7464)) HRESULT SmartFrame2d::ChangeCrop ( double top, double bottom, double left, double right );
__declspec(implementation_key(7465)) HRESULT SmartFrame2d::CreateLink ( const _variant_t & SourceDoc, const _variant_t & SourceItem );
__declspec(implementation_key(7466)) HRESULT SmartFrame2d::CreateEmbed ( const _variant_t & SourceDoc, const _variant_t & ObjectType );
__declspec(implementation_key(7467)) HRESULT SmartFrame2d::DoVerb ( const _variant_t & DoVerb );
__declspec(implementation_key(7468)) HRESULT SmartFrame2d::Fit ( );
__declspec(implementation_key(7469)) HRESULT SmartFrame2d::Update ( );
__declspec(implementation_key(7470)) TGFramework::ApplicationPtr SmartFrame2d::GetApplication ( );
__declspec(implementation_key(7471)) long SmartFrame2d::GetIndex ( );
__declspec(implementation_key(7472)) _bstr_t SmartFrame2d::GetName ( const _variant_t & Recurse );
__declspec(implementation_key(7473)) IDispatchPtr SmartFrame2d::GetParent ( );
__declspec(implementation_key(7474)) long SmartFrame2d::GetType ( );
__declspec(implementation_key(7475)) long SmartFrame2d::GetZOrder ( );
__declspec(implementation_key(7476)) _bstr_t SmartFrame2d::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(7477)) IDispatchPtr SmartFrame2d::GetDocument ( );
__declspec(implementation_key(7478)) HRESULT SmartFrame2d::Copy ( );
__declspec(implementation_key(7479)) HRESULT SmartFrame2d::Cut ( );
__declspec(implementation_key(7480)) HRESULT SmartFrame2d::Delete ( );
__declspec(implementation_key(7481)) HRESULT SmartFrame2d::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(7482)) HRESULT SmartFrame2d::Scale ( double Factor );
__declspec(implementation_key(7483)) HRESULT SmartFrame2d::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(7484)) HRESULT SmartFrame2d::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(7485)) IDispatchPtr SmartFrame2d::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(7486)) IDispatchPtr SmartFrame2d::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(7487)) HRESULT SmartFrame2d::BringToFront ( );
__declspec(implementation_key(7488)) HRESULT SmartFrame2d::BringForward ( );
__declspec(implementation_key(7489)) HRESULT SmartFrame2d::SendToBack ( );
__declspec(implementation_key(7490)) HRESULT SmartFrame2d::SendBackward ( );
__declspec(implementation_key(7491)) HRESULT SmartFrame2d::Select ( );
__declspec(implementation_key(7492)) enum FrameShapeConstants SmartFrame2d::GetShapeOption ( );
__declspec(implementation_key(7493)) void SmartFrame2d::PutShapeOption ( enum FrameShapeConstants _arg1 );
__declspec(implementation_key(7494)) VARIANT_BOOL SmartFrame2d::GetBorderPrinted ( );
__declspec(implementation_key(7495)) void SmartFrame2d::PutBorderPrinted ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7496)) VARIANT_BOOL SmartFrame2d::GetBorderVisible ( );
__declspec(implementation_key(7497)) void SmartFrame2d::PutBorderVisible ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7498)) double SmartFrame2d::GetMargin ( );
__declspec(implementation_key(7499)) void SmartFrame2d::PutMargin ( double _arg1 );
__declspec(implementation_key(7500)) double SmartFrame2d::GetBorderWidth ( );
__declspec(implementation_key(7501)) void SmartFrame2d::PutBorderWidth ( double _arg1 );
__declspec(implementation_key(7502)) long SmartFrame2d::GetBorderColor ( );
__declspec(implementation_key(7503)) void SmartFrame2d::PutBorderColor ( long _arg1 );
__declspec(implementation_key(7504)) _bstr_t SmartFrame2d::GetBorderDashTypeName ( );
__declspec(implementation_key(7505)) void SmartFrame2d::PutBorderDashTypeName ( _bstr_t _arg1 );
__declspec(implementation_key(7506)) long SmartFrame2d::GetKeyPointCount ( );
__declspec(implementation_key(7507)) HRESULT SmartFrame2d::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(7508)) HRESULT SmartFrame2d::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(7509)) IDispatchPtr SmartFrame2d::GetAttributeSets ( );
__declspec(implementation_key(7510)) VARIANT_BOOL SmartFrame2d::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(7511)) void SmartFrame2d::PutLayer ( _bstr_t _arg1 );
__declspec(implementation_key(7512)) _bstr_t SmartFrame2d::GetLayer ( );
__declspec(implementation_key(7513)) TGFramework::ApplicationPtr _ISmartFrames2dAuto::GetApplication ( );
__declspec(implementation_key(7514)) long _ISmartFrames2dAuto::GetCount ( );
__declspec(implementation_key(7515)) IDispatchPtr _ISmartFrames2dAuto::GetParent ( );
__declspec(implementation_key(7516)) SmartFrame2dPtr _ISmartFrames2dAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(7517)) IUnknownPtr _ISmartFrames2dAuto::Get_NewEnum ( );
__declspec(implementation_key(7518)) SmartFrame2dPtr _ISmartFrames2dAuto::AddBy2Points ( _bstr_t StyleName, double x1, double y1, double x2, double y2 );
__declspec(implementation_key(7519)) SmartFrame2dPtr _ISmartFrames2dAuto::AddByOrigin ( _bstr_t StyleName, double x1, double y1, double top, double bottom, double left, double right );
__declspec(implementation_key(7520)) SmartFrame2dStylePtr _ISmartFrame2dStylesAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(7521)) IUnknownPtr _ISmartFrame2dStylesAuto::Get_NewEnum ( );
__declspec(implementation_key(7522)) TGFramework::ApplicationPtr _ISmartFrame2dStylesAuto::GetApplication ( );
__declspec(implementation_key(7523)) IDispatchPtr _ISmartFrame2dStylesAuto::GetParent ( );
__declspec(implementation_key(7524)) long _ISmartFrame2dStylesAuto::GetCount ( );
__declspec(implementation_key(7525)) long _ISmartFrame2dStylesAuto::GetType ( );
__declspec(implementation_key(7526)) SmartFrame2dStylePtr _ISmartFrame2dStylesAuto::Add ( _bstr_t Name, _bstr_t Parent );
__declspec(implementation_key(7527)) TGFramework::ApplicationPtr _IVFSetAuto::GetApplication ( );
__declspec(implementation_key(7528)) IDispatchPtr _IVFSetAuto::GetParent ( );
__declspec(implementation_key(7529)) HRESULT _IVFSetAuto::SetCriteria ( _bstr_t Name, long Scope, long Color, double Width, _bstr_t LINESTYLE, VARIANT_BOOL DISPLAY, VARIANT_BOOL Locate, long flagsToSet );
__declspec(implementation_key(7530)) HRESULT _IVFSetAuto::GetCriteria ( _bstr_t Name, long Scope, long * Color, double * Width, BSTR * LINESTYLE, VARIANT_BOOL * DISPLAY, VARIANT_BOOL * Locate, long flagsToSet );
__declspec(implementation_key(7531)) HRESULT _IVFSetAuto::ResetAll ( long Scope );
__declspec(implementation_key(7532)) HRESULT _IVFSetAuto::SetAll ( long Scope, long Color, double Width, _bstr_t LINESTYLE, VARIANT_BOOL DISPLAY, VARIANT_BOOL Locate, long flagsToSet );
__declspec(implementation_key(7533)) HRESULT _IVFSetAuto::CheckForDefault ( VARIANT_BOOL * bSetting );
__declspec(implementation_key(7534)) TGFramework::ApplicationPtr _IRectangularPattern2dAuto::GetApplication ( );
__declspec(implementation_key(7535)) IDispatchPtr _IRectangularPattern2dAuto::GetParent ( );
__declspec(implementation_key(7536)) void _IRectangularPattern2dAuto::PutStaggerType ( enum StaggerTypeConstants StaggerType );
__declspec(implementation_key(7537)) enum StaggerTypeConstants _IRectangularPattern2dAuto::GetStaggerType ( );
__declspec(implementation_key(7538)) void _IRectangularPattern2dAuto::PutStaggerOffset ( double StaggerOffset );
__declspec(implementation_key(7539)) double _IRectangularPattern2dAuto::GetStaggerOffset ( );
__declspec(implementation_key(7540)) VARIANT_BOOL _IRectangularPattern2dAuto::GetStaggerOffsetHalf ( );
__declspec(implementation_key(7541)) void _IRectangularPattern2dAuto::PutStaggerOffsetHalf ( VARIANT_BOOL HalfOffset );
__declspec(implementation_key(7542)) VARIANT_BOOL _IRectangularPattern2dAuto::GetStaggerIncludeLast ( );
__declspec(implementation_key(7543)) void _IRectangularPattern2dAuto::PutStaggerIncludeLast ( VARIANT_BOOL StaggerIncludeLast );
__declspec(implementation_key(7544)) enum PatternOffsetTypeConstants _IRectangularPattern2dAuto::GetOffsetType ( );
__declspec(implementation_key(7545)) void _IRectangularPattern2dAuto::PutOffsetType ( enum PatternOffsetTypeConstants OffsetType );
__declspec(implementation_key(7546)) double _IRectangularPattern2dAuto::GetWidth ( );
__declspec(implementation_key(7547)) void _IRectangularPattern2dAuto::PutWidth ( double Width );
__declspec(implementation_key(7548)) double _IRectangularPattern2dAuto::GetHeight ( );
__declspec(implementation_key(7549)) void _IRectangularPattern2dAuto::PutHeight ( double Height );
__declspec(implementation_key(7550)) double _IRectangularPattern2dAuto::GetXSpace ( );
__declspec(implementation_key(7551)) void _IRectangularPattern2dAuto::PutXSpace ( double space );
__declspec(implementation_key(7552)) double _IRectangularPattern2dAuto::GetYSpace ( );
__declspec(implementation_key(7553)) void _IRectangularPattern2dAuto::PutYSpace ( double space );
__declspec(implementation_key(7554)) long _IRectangularPattern2dAuto::GetXCount ( );
__declspec(implementation_key(7555)) void _IRectangularPattern2dAuto::PutXCount ( long XCount );
__declspec(implementation_key(7556)) long _IRectangularPattern2dAuto::GetYCount ( );
__declspec(implementation_key(7557)) void _IRectangularPattern2dAuto::PutYCount ( long YCount );
__declspec(implementation_key(7558)) long _IRectangularPattern2dAuto::GetReferenceOccurrence ( );
__declspec(implementation_key(7559)) void _IRectangularPattern2dAuto::PutReferenceOccurrence ( long RefOccurrence );
__declspec(implementation_key(7560)) VARIANT_BOOL _IRectangularPattern2dAuto::GetSuppressed ( long Occurrence );
__declspec(implementation_key(7561)) void _IRectangularPattern2dAuto::PutSuppressed ( long Occurrence, VARIANT_BOOL IsSuppressed );
__declspec(implementation_key(7562)) HRESULT _IRectangularPattern2dAuto::GetGeometry ( struct Line2d * * Line1, struct Line2d * * Line2, struct Line2d * * Line3, struct Line2d * * Line4 );
__declspec(implementation_key(7563)) void _IRectangularPattern2dAuto::PutLayer ( _bstr_t Layer );
__declspec(implementation_key(7564)) _bstr_t _IRectangularPattern2dAuto::GetLayer ( );
__declspec(implementation_key(7565)) long _IRectangularPattern2dAuto::GetType ( );
__declspec(implementation_key(7566)) SAFEARRAY * _IRectangularPattern2dAuto::GetParentGeometries ( );
__declspec(implementation_key(7567)) TGFramework::ApplicationPtr RectangularPattern2d::GetApplication ( );
__declspec(implementation_key(7568)) IDispatchPtr RectangularPattern2d::GetParent ( );
__declspec(implementation_key(7569)) void RectangularPattern2d::PutStaggerType ( enum StaggerTypeConstants _arg1 );
__declspec(implementation_key(7570)) enum StaggerTypeConstants RectangularPattern2d::GetStaggerType ( );
__declspec(implementation_key(7571)) void RectangularPattern2d::PutStaggerOffset ( double _arg1 );
__declspec(implementation_key(7572)) double RectangularPattern2d::GetStaggerOffset ( );
__declspec(implementation_key(7573)) VARIANT_BOOL RectangularPattern2d::GetStaggerOffsetHalf ( );
__declspec(implementation_key(7574)) void RectangularPattern2d::PutStaggerOffsetHalf ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7575)) VARIANT_BOOL RectangularPattern2d::GetStaggerIncludeLast ( );
__declspec(implementation_key(7576)) void RectangularPattern2d::PutStaggerIncludeLast ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7577)) enum PatternOffsetTypeConstants RectangularPattern2d::GetOffsetType ( );
__declspec(implementation_key(7578)) void RectangularPattern2d::PutOffsetType ( enum PatternOffsetTypeConstants _arg1 );
__declspec(implementation_key(7579)) double RectangularPattern2d::GetWidth ( );
__declspec(implementation_key(7580)) void RectangularPattern2d::PutWidth ( double _arg1 );
__declspec(implementation_key(7581)) double RectangularPattern2d::GetHeight ( );
__declspec(implementation_key(7582)) void RectangularPattern2d::PutHeight ( double _arg1 );
__declspec(implementation_key(7583)) double RectangularPattern2d::GetXSpace ( );
__declspec(implementation_key(7584)) void RectangularPattern2d::PutXSpace ( double _arg1 );
__declspec(implementation_key(7585)) double RectangularPattern2d::GetYSpace ( );
__declspec(implementation_key(7586)) void RectangularPattern2d::PutYSpace ( double _arg1 );
__declspec(implementation_key(7587)) long RectangularPattern2d::GetXCount ( );
__declspec(implementation_key(7588)) void RectangularPattern2d::PutXCount ( long _arg1 );
__declspec(implementation_key(7589)) long RectangularPattern2d::GetYCount ( );
__declspec(implementation_key(7590)) void RectangularPattern2d::PutYCount ( long _arg1 );
__declspec(implementation_key(7591)) long RectangularPattern2d::GetReferenceOccurrence ( );
__declspec(implementation_key(7592)) void RectangularPattern2d::PutReferenceOccurrence ( long _arg1 );
__declspec(implementation_key(7593)) VARIANT_BOOL RectangularPattern2d::GetSuppressed ( long Occurrence );
__declspec(implementation_key(7594)) void RectangularPattern2d::PutSuppressed ( long Occurrence, VARIANT_BOOL _arg2 );
__declspec(implementation_key(7595)) HRESULT RectangularPattern2d::GetGeometry ( struct Line2d * * Line1, struct Line2d * * Line2, struct Line2d * * Line3, struct Line2d * * Line4 );
__declspec(implementation_key(7596)) void RectangularPattern2d::PutLayer ( _bstr_t _arg1 );
__declspec(implementation_key(7597)) _bstr_t RectangularPattern2d::GetLayer ( );
__declspec(implementation_key(7598)) long RectangularPattern2d::GetType ( );
__declspec(implementation_key(7599)) SAFEARRAY * RectangularPattern2d::GetParentGeometries ( );
__declspec(implementation_key(7600)) TGFramework::ApplicationPtr _IRectangularPatterns2dAuto::GetApplication ( );
__declspec(implementation_key(7601)) IDispatchPtr _IRectangularPatterns2dAuto::GetParent ( );
__declspec(implementation_key(7602)) long _IRectangularPatterns2dAuto::GetCount ( );
__declspec(implementation_key(7603)) IUnknownPtr _IRectangularPatterns2dAuto::Get_NewEnum ( );
__declspec(implementation_key(7604)) RectangularPattern2dPtr _IRectangularPatterns2dAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(7605)) RectangularPattern2dPtr _IRectangularPatterns2dAuto::Add ( double OriginX, double OriginY, double Width, double Height, double Angle, enum PatternOffsetTypeConstants OffsetType, long XCount, long YCount, double XSpace, double YSpace, const _variant_t & StaggerType, const _variant_t & StaggerOffset, const _variant_t & StaggerOffsetHalf, const _variant_t & StaggerIncludeLast );
__declspec(implementation_key(7606)) RectangularPattern2dPtr _IRectangularPatterns2dAuto::AddEx ( SAFEARRAY * * GeomArray, long NumOfElements, double OriginX, double OriginY, double Width, double Height, double Angle, enum PatternOffsetTypeConstants OffsetType, long XCount, long YCount, double XSpace, double YSpace, const _variant_t & StaggerType, const _variant_t & StaggerOffset, const _variant_t & StaggerOffsetHalf, const _variant_t & StaggerIncludeLast );
__declspec(implementation_key(7607)) TGFramework::ApplicationPtr _ICircularPattern2dAuto::GetApplication ( );
__declspec(implementation_key(7608)) IDispatchPtr _ICircularPattern2dAuto::GetGeometry ( );
__declspec(implementation_key(7609)) enum TGFramework::ObjectType _ICircularPattern2dAuto::GetGeometryType ( );
__declspec(implementation_key(7610)) enum PatternOffsetTypeConstants _ICircularPattern2dAuto::GetOffsetType ( );
__declspec(implementation_key(7611)) void _ICircularPattern2dAuto::PutOffsetType ( enum PatternOffsetTypeConstants OffsetType );
__declspec(implementation_key(7612)) long _ICircularPattern2dAuto::GetCount ( );
__declspec(implementation_key(7613)) void _ICircularPattern2dAuto::PutCount ( long Count );
__declspec(implementation_key(7614)) double _ICircularPattern2dAuto::GetAngularSpacing ( );
__declspec(implementation_key(7615)) void _ICircularPattern2dAuto::PutAngularSpacing ( double AngularSpacing );
__declspec(implementation_key(7616)) long _ICircularPattern2dAuto::GetReferenceOccurrence ( );
__declspec(implementation_key(7617)) void _ICircularPattern2dAuto::PutReferenceOccurrence ( long RefOccurrence );
__declspec(implementation_key(7618)) VARIANT_BOOL _ICircularPattern2dAuto::GetSuppressed ( long Occurrence );
__declspec(implementation_key(7619)) void _ICircularPattern2dAuto::PutSuppressed ( long Occurrence, VARIANT_BOOL IsSuppressed );
__declspec(implementation_key(7620)) IDispatchPtr _ICircularPattern2dAuto::GetParent ( );
__declspec(implementation_key(7621)) void _ICircularPattern2dAuto::PutLayer ( _bstr_t Layer );
__declspec(implementation_key(7622)) _bstr_t _ICircularPattern2dAuto::GetLayer ( );
__declspec(implementation_key(7623)) long _ICircularPattern2dAuto::GetType ( );
__declspec(implementation_key(7624)) SAFEARRAY * _ICircularPattern2dAuto::GetParentGeometries ( );
__declspec(implementation_key(7625)) TGFramework::ApplicationPtr CircularPattern2d::GetApplication ( );
__declspec(implementation_key(7626)) IDispatchPtr CircularPattern2d::GetGeometry ( );
__declspec(implementation_key(7627)) enum TGFramework::ObjectType CircularPattern2d::GetGeometryType ( );
__declspec(implementation_key(7628)) enum PatternOffsetTypeConstants CircularPattern2d::GetOffsetType ( );
__declspec(implementation_key(7629)) void CircularPattern2d::PutOffsetType ( enum PatternOffsetTypeConstants _arg1 );
__declspec(implementation_key(7630)) long CircularPattern2d::GetCount ( );
__declspec(implementation_key(7631)) void CircularPattern2d::PutCount ( long _arg1 );
__declspec(implementation_key(7632)) double CircularPattern2d::GetAngularSpacing ( );
__declspec(implementation_key(7633)) void CircularPattern2d::PutAngularSpacing ( double _arg1 );
__declspec(implementation_key(7634)) long CircularPattern2d::GetReferenceOccurrence ( );
__declspec(implementation_key(7635)) void CircularPattern2d::PutReferenceOccurrence ( long _arg1 );
__declspec(implementation_key(7636)) VARIANT_BOOL CircularPattern2d::GetSuppressed ( long Occurrence );
__declspec(implementation_key(7637)) void CircularPattern2d::PutSuppressed ( long Occurrence, VARIANT_BOOL _arg2 );
__declspec(implementation_key(7638)) IDispatchPtr CircularPattern2d::GetParent ( );
__declspec(implementation_key(7639)) void CircularPattern2d::PutLayer ( _bstr_t _arg1 );
__declspec(implementation_key(7640)) _bstr_t CircularPattern2d::GetLayer ( );
__declspec(implementation_key(7641)) long CircularPattern2d::GetType ( );
__declspec(implementation_key(7642)) SAFEARRAY * CircularPattern2d::GetParentGeometries ( );
__declspec(implementation_key(7643)) TGFramework::ApplicationPtr _ICircularPatterns2dAuto::GetApplication ( );
__declspec(implementation_key(7644)) IDispatchPtr _ICircularPatterns2dAuto::GetParent ( );
__declspec(implementation_key(7645)) long _ICircularPatterns2dAuto::GetCount ( );
__declspec(implementation_key(7646)) IUnknownPtr _ICircularPatterns2dAuto::Get_NewEnum ( );
__declspec(implementation_key(7647)) CircularPattern2dPtr _ICircularPatterns2dAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(7648)) CircularPattern2dPtr _ICircularPatterns2dAuto::AddByCircle ( double CenterX, double CenterY, double StartX, double StartY, enum Geom2dOrientationConstants Orientation, enum PatternOffsetTypeConstants OffsetType, long Count, double AngularSpacing );
__declspec(implementation_key(7649)) CircularPattern2dPtr _ICircularPatterns2dAuto::AddByArc ( double CenterX, double CenterY, double StartX, double StartY, double SweepAngle, enum Geom2dOrientationConstants Orientation, enum PatternOffsetTypeConstants OffsetType, long Count, double AngularSpacing );
__declspec(implementation_key(7650)) CircularPattern2dPtr _ICircularPatterns2dAuto::AddByCircleEx ( SAFEARRAY * * GeomArray, long NumOfElements, double CenterX, double CenterY, double StartX, double StartY, enum Geom2dOrientationConstants Orientation, enum PatternOffsetTypeConstants OffsetType, long Count, double AngularSpacing );
__declspec(implementation_key(7651)) CircularPattern2dPtr _ICircularPatterns2dAuto::AddByArcEx ( SAFEARRAY * * GeomArray, long NumOfElements, double CenterX, double CenterY, double StartX, double StartY, double SweepAngle, enum Geom2dOrientationConstants Orientation, enum PatternOffsetTypeConstants OffsetType, long Count, double AngularSpacing );
__declspec(implementation_key(7652)) TGFramework::ApplicationPtr _IImage2dAuto::GetApplication ( );
__declspec(implementation_key(7653)) IDispatchPtr _IImage2dAuto::GetParent ( );
__declspec(implementation_key(7654)) void _IImage2dAuto::PutLockAspectRatio ( VARIANT_BOOL Lock );
__declspec(implementation_key(7655)) VARIANT_BOOL _IImage2dAuto::GetLockAspectRatio ( );
__declspec(implementation_key(7656)) void _IImage2dAuto::PutResetAspectRatio ( VARIANT_BOOL Reset );
__declspec(implementation_key(7657)) VARIANT_BOOL _IImage2dAuto::GetResetAspectRatio ( );
__declspec(implementation_key(7658)) VARIANT_BOOL _IImage2dAuto::GetFlipHorizontal ( );
__declspec(implementation_key(7659)) void _IImage2dAuto::PutFlipHorizontal ( VARIANT_BOOL FlipHorizontal );
__declspec(implementation_key(7660)) VARIANT_BOOL _IImage2dAuto::GetFlipVertical ( );
__declspec(implementation_key(7661)) void _IImage2dAuto::PutFlipVertical ( VARIANT_BOOL FlipVertical );
__declspec(implementation_key(7662)) VARIANT_BOOL _IImage2dAuto::GetShowBorder ( );
__declspec(implementation_key(7663)) void _IImage2dAuto::PutShowBorder ( VARIANT_BOOL ShowBorder );
__declspec(implementation_key(7664)) void _IImage2dAuto::PutBorderColor ( long BorderColor );
__declspec(implementation_key(7665)) long _IImage2dAuto::GetBorderColor ( );
__declspec(implementation_key(7666)) void _IImage2dAuto::PutBorderWidth ( double BorderColor );
__declspec(implementation_key(7667)) double _IImage2dAuto::GetBorderWidth ( );
__declspec(implementation_key(7668)) void _IImage2dAuto::PutBorderStyleName ( _bstr_t Name );
__declspec(implementation_key(7669)) _bstr_t _IImage2dAuto::GetBorderStyleName ( );
__declspec(implementation_key(7670)) void _IImage2dAuto::PutBorderTypeName ( _bstr_t Name );
__declspec(implementation_key(7671)) _bstr_t _IImage2dAuto::GetBorderTypeName ( );
__declspec(implementation_key(7672)) double _IImage2dAuto::GetWidth ( );
__declspec(implementation_key(7673)) void _IImage2dAuto::PutWidth ( double Width );
__declspec(implementation_key(7674)) double _IImage2dAuto::GetHeight ( );
__declspec(implementation_key(7675)) void _IImage2dAuto::PutHeight ( double Height );
__declspec(implementation_key(7676)) double _IImage2dAuto::GetAngle ( );
__declspec(implementation_key(7677)) void _IImage2dAuto::PutAngle ( double Angle );
__declspec(implementation_key(7678)) HRESULT _IImage2dAuto::GetOrigin ( double * x, double * y );
__declspec(implementation_key(7679)) HRESULT _IImage2dAuto::SetOrigin ( double x, double y );
__declspec(implementation_key(7680)) int _IImage2dAuto::GetOpacity ( );
__declspec(implementation_key(7681)) void _IImage2dAuto::PutOpacity ( int pnOpacity );
__declspec(implementation_key(7682)) HRESULT _IImage2dAuto::GetTransparentColor ( float * pfRed, float * pfGreen, float * pfBlue );
__declspec(implementation_key(7683)) HRESULT _IImage2dAuto::SetTransparentColor ( float fRed, float fGreen, float fBlue );
__declspec(implementation_key(7684)) VARIANT_BOOL _IImage2dAuto::GetIsLink ( );
__declspec(implementation_key(7685)) HRESULT _IImage2dAuto::Update ( );
__declspec(implementation_key(7686)) HRESULT _IImage2dAuto::DoVerb ( const _variant_t & DoVerb );
__declspec(implementation_key(7687)) IDispatchPtr _IImage2dAuto::GetAttributeSets ( );
__declspec(implementation_key(7688)) VARIANT_BOOL _IImage2dAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(7689)) void _IImage2dAuto::PutLayer ( _bstr_t Layer );
__declspec(implementation_key(7690)) _bstr_t _IImage2dAuto::GetLayer ( );
__declspec(implementation_key(7691)) long _IImage2dAuto::GetType ( );
__declspec(implementation_key(7692)) HRESULT _IImage2dAuto::SaveImageAs ( _bstr_t FilePath );
__declspec(implementation_key(7693)) _bstr_t _IImage2dAuto::GetImageFileName ( );
__declspec(implementation_key(7694)) VARIANT_BOOL _IImage2dAuto::GetDecal ( );
__declspec(implementation_key(7695)) TGFramework::ApplicationPtr Image2d::GetApplication ( );
__declspec(implementation_key(7696)) IDispatchPtr Image2d::GetParent ( );
__declspec(implementation_key(7697)) void Image2d::PutLockAspectRatio ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7698)) VARIANT_BOOL Image2d::GetLockAspectRatio ( );
__declspec(implementation_key(7699)) void Image2d::PutResetAspectRatio ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7700)) VARIANT_BOOL Image2d::GetResetAspectRatio ( );
__declspec(implementation_key(7701)) VARIANT_BOOL Image2d::GetFlipHorizontal ( );
__declspec(implementation_key(7702)) void Image2d::PutFlipHorizontal ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7703)) VARIANT_BOOL Image2d::GetFlipVertical ( );
__declspec(implementation_key(7704)) void Image2d::PutFlipVertical ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7705)) VARIANT_BOOL Image2d::GetShowBorder ( );
__declspec(implementation_key(7706)) void Image2d::PutShowBorder ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7707)) void Image2d::PutBorderColor ( long _arg1 );
__declspec(implementation_key(7708)) long Image2d::GetBorderColor ( );
__declspec(implementation_key(7709)) void Image2d::PutBorderWidth ( double _arg1 );
__declspec(implementation_key(7710)) double Image2d::GetBorderWidth ( );
__declspec(implementation_key(7711)) void Image2d::PutBorderStyleName ( _bstr_t _arg1 );
__declspec(implementation_key(7712)) _bstr_t Image2d::GetBorderStyleName ( );
__declspec(implementation_key(7713)) void Image2d::PutBorderTypeName ( _bstr_t _arg1 );
__declspec(implementation_key(7714)) _bstr_t Image2d::GetBorderTypeName ( );
__declspec(implementation_key(7715)) double Image2d::GetWidth ( );
__declspec(implementation_key(7716)) void Image2d::PutWidth ( double _arg1 );
__declspec(implementation_key(7717)) double Image2d::GetHeight ( );
__declspec(implementation_key(7718)) void Image2d::PutHeight ( double _arg1 );
__declspec(implementation_key(7719)) double Image2d::GetAngle ( );
__declspec(implementation_key(7720)) void Image2d::PutAngle ( double _arg1 );
__declspec(implementation_key(7721)) HRESULT Image2d::GetOrigin ( double * x, double * y );
__declspec(implementation_key(7722)) HRESULT Image2d::SetOrigin ( double x, double y );
__declspec(implementation_key(7723)) int Image2d::GetOpacity ( );
__declspec(implementation_key(7724)) void Image2d::PutOpacity ( int _arg1 );
__declspec(implementation_key(7725)) HRESULT Image2d::GetTransparentColor ( float * pfRed, float * pfGreen, float * pfBlue );
__declspec(implementation_key(7726)) HRESULT Image2d::SetTransparentColor ( float fRed, float fGreen, float fBlue );
__declspec(implementation_key(7727)) VARIANT_BOOL Image2d::GetIsLink ( );
__declspec(implementation_key(7728)) HRESULT Image2d::Update ( );
__declspec(implementation_key(7729)) HRESULT Image2d::DoVerb ( const _variant_t & DoVerb );
__declspec(implementation_key(7730)) IDispatchPtr Image2d::GetAttributeSets ( );
__declspec(implementation_key(7731)) VARIANT_BOOL Image2d::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(7732)) void Image2d::PutLayer ( _bstr_t _arg1 );
__declspec(implementation_key(7733)) _bstr_t Image2d::GetLayer ( );
__declspec(implementation_key(7734)) long Image2d::GetType ( );
__declspec(implementation_key(7735)) HRESULT Image2d::SaveImageAs ( _bstr_t FilePath );
__declspec(implementation_key(7736)) _bstr_t Image2d::GetImageFileName ( );
__declspec(implementation_key(7737)) VARIANT_BOOL Image2d::GetDecal ( );
__declspec(implementation_key(7738)) TGFramework::ApplicationPtr _IImages2dAuto::GetApplication ( );
__declspec(implementation_key(7739)) IDispatchPtr _IImages2dAuto::GetParent ( );
__declspec(implementation_key(7740)) long _IImages2dAuto::GetCount ( );
__declspec(implementation_key(7741)) IUnknownPtr _IImages2dAuto::Get_NewEnum ( );
__declspec(implementation_key(7742)) Image2dPtr _IImages2dAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(7743)) Image2dPtr _IImages2dAuto::AddImage ( VARIANT_BOOL blink, _bstr_t ImageDocumentName );
__declspec(implementation_key(7744)) Image2dPtr _IImages2dAuto::AddDecalImage ( VARIANT_BOOL Link, _bstr_t ImageDocumentName );
__declspec(implementation_key(7745)) TGFramework::ApplicationPtr _IComponentImage2dAuto::GetApplication ( );
__declspec(implementation_key(7746)) IDispatchPtr _IComponentImage2dAuto::GetParent ( );
__declspec(implementation_key(7747)) IDispatchPtr _IComponentImage2dAuto::GetAttributeSets ( );
__declspec(implementation_key(7748)) VARIANT_BOOL _IComponentImage2dAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(7749)) GeometryStyle2dPtr _IComponentImage2dAuto::GetStyle ( );
__declspec(implementation_key(7750)) void _IComponentImage2dAuto::PutLayer ( _bstr_t Layer );
__declspec(implementation_key(7751)) _bstr_t _IComponentImage2dAuto::GetLayer ( );
__declspec(implementation_key(7752)) long _IComponentImage2dAuto::GetType ( );
__declspec(implementation_key(7753)) HRESULT _IComponentImage2dAuto::Delete ( );
__declspec(implementation_key(7754)) TGFramework::ApplicationPtr ComponentImage2d::GetApplication ( );
__declspec(implementation_key(7755)) IDispatchPtr ComponentImage2d::GetParent ( );
__declspec(implementation_key(7756)) IDispatchPtr ComponentImage2d::GetAttributeSets ( );
__declspec(implementation_key(7757)) VARIANT_BOOL ComponentImage2d::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(7758)) GeometryStyle2dPtr ComponentImage2d::GetStyle ( );
__declspec(implementation_key(7759)) void ComponentImage2d::PutLayer ( _bstr_t _arg1 );
__declspec(implementation_key(7760)) _bstr_t ComponentImage2d::GetLayer ( );
__declspec(implementation_key(7761)) long ComponentImage2d::GetType ( );
__declspec(implementation_key(7762)) HRESULT ComponentImage2d::Delete ( );
__declspec(implementation_key(7763)) TGFramework::ApplicationPtr _IComponentImages2dAuto::GetApplication ( );
__declspec(implementation_key(7764)) IDispatchPtr _IComponentImages2dAuto::GetParent ( );
__declspec(implementation_key(7765)) long _IComponentImages2dAuto::GetCount ( );
__declspec(implementation_key(7766)) IUnknownPtr _IComponentImages2dAuto::Get_NewEnum ( );
__declspec(implementation_key(7767)) ComponentImage2dPtr _IComponentImages2dAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(7768)) ComponentImage2dPtr _IComponentImages2dAuto::AddComponentImage ( enum ComponentImageCreationModeConstants CreationMode, const _variant_t & NumElements, const _variant_t & Elements );
__declspec(implementation_key(7769)) TGFramework::FillStylePtr _IAreaPropertiesAuto::GetAreaFillStyle ( );
__declspec(implementation_key(7770)) void _IAreaPropertiesAuto::PutAreaFillStyle ( struct TGFramework::FillStyle * Style );
__declspec(implementation_key(7771)) DimStylePtr _IAreaPropertiesAuto::GetAxesStyle ( );
__declspec(implementation_key(7772)) DimStylePtr _IAreaPropertiesAuto::GetAxesLabelStyle ( );
__declspec(implementation_key(7773)) _bstr_t _IAreaPropertiesAuto::GetLayer ( );
__declspec(implementation_key(7774)) void _IAreaPropertiesAuto::PutLayer ( _bstr_t Layer );
__declspec(implementation_key(7775)) TGFramework::ApplicationPtr _IAreaPropertiesAuto::GetApplication ( );
__declspec(implementation_key(7776)) long _IAreaPropertiesAuto::GetIndex ( );
__declspec(implementation_key(7777)) _bstr_t _IAreaPropertiesAuto::GetName ( const _variant_t & Recurse, long Lcid );
__declspec(implementation_key(7778)) IDispatchPtr _IAreaPropertiesAuto::GetParent ( );
__declspec(implementation_key(7779)) long _IAreaPropertiesAuto::GetType ( );
__declspec(implementation_key(7780)) _bstr_t _IAreaPropertiesAuto::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(7781)) IDispatchPtr _IAreaPropertiesAuto::GetDocument ( );
__declspec(implementation_key(7782)) HRESULT _IAreaPropertiesAuto::Copy ( );
__declspec(implementation_key(7783)) HRESULT _IAreaPropertiesAuto::Cut ( );
__declspec(implementation_key(7784)) HRESULT _IAreaPropertiesAuto::Delete ( );
__declspec(implementation_key(7785)) HRESULT _IAreaPropertiesAuto::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(7786)) HRESULT _IAreaPropertiesAuto::Scale ( double Factor );
__declspec(implementation_key(7787)) HRESULT _IAreaPropertiesAuto::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(7788)) HRESULT _IAreaPropertiesAuto::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(7789)) IDispatchPtr _IAreaPropertiesAuto::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(7790)) IDispatchPtr _IAreaPropertiesAuto::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(7791)) HRESULT _IAreaPropertiesAuto::BringToFront ( );
__declspec(implementation_key(7792)) HRESULT _IAreaPropertiesAuto::BringForward ( );
__declspec(implementation_key(7793)) HRESULT _IAreaPropertiesAuto::SendToBack ( );
__declspec(implementation_key(7794)) HRESULT _IAreaPropertiesAuto::SendBackward ( );
__declspec(implementation_key(7795)) HRESULT _IAreaPropertiesAuto::GetAreaProperties ( double * dArea, double * dAreaCenterX, double * dAreaCenterY, double * dMIX, double * dMIY, double * dMIXY, double * dPrincipalMIX, double * dPrincipalMIY, double * dAngleOfOrientation, double * dPrincipalXX, double * dPrincipalXY, double * dPrincipalYX, double * dPrincipalYY, double * dPerimeter );
__declspec(implementation_key(7796)) HRESULT _IAreaPropertiesAuto::SetAxesLength ( VARIANT_BOOL bPrincipalAxes, double dLength );
__declspec(implementation_key(7797)) HRESULT _IAreaPropertiesAuto::ShowAxes ( VARIANT_BOOL bPrincipalAxes, VARIANT_BOOL bShow );
__declspec(implementation_key(7798)) HRESULT _IAreaPropertiesAuto::AddBoundaries ( long ParentBoundariesCount, SAFEARRAY * * ParentBoundaries, double xFloodPoint, double yFloodPoint );
__declspec(implementation_key(7799)) HRESULT _IAreaPropertiesAuto::SetAxesLabels ( _bstr_t ModelXAxesLabel, _bstr_t ModelYAxesLabel, _bstr_t PrincipalXAxesLabel, _bstr_t PrincipalYAxesLabel );
__declspec(implementation_key(7800)) TGFramework::FillStylePtr AreaProperties::GetAreaFillStyle ( );
__declspec(implementation_key(7801)) void AreaProperties::PutAreaFillStyle ( struct TGFramework::FillStyle * _arg1 );
__declspec(implementation_key(7802)) DimStylePtr AreaProperties::GetAxesStyle ( );
__declspec(implementation_key(7803)) DimStylePtr AreaProperties::GetAxesLabelStyle ( );
__declspec(implementation_key(7804)) _bstr_t AreaProperties::GetLayer ( );
__declspec(implementation_key(7805)) void AreaProperties::PutLayer ( _bstr_t _arg1 );
__declspec(implementation_key(7806)) TGFramework::ApplicationPtr AreaProperties::GetApplication ( );
__declspec(implementation_key(7807)) long AreaProperties::GetIndex ( );
__declspec(implementation_key(7808)) _bstr_t AreaProperties::GetName ( const _variant_t & Recurse );
__declspec(implementation_key(7809)) IDispatchPtr AreaProperties::GetParent ( );
__declspec(implementation_key(7810)) long AreaProperties::GetType ( );
__declspec(implementation_key(7811)) _bstr_t AreaProperties::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(7812)) IDispatchPtr AreaProperties::GetDocument ( );
__declspec(implementation_key(7813)) HRESULT AreaProperties::Copy ( );
__declspec(implementation_key(7814)) HRESULT AreaProperties::Cut ( );
__declspec(implementation_key(7815)) HRESULT AreaProperties::Delete ( );
__declspec(implementation_key(7816)) HRESULT AreaProperties::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(7817)) HRESULT AreaProperties::Scale ( double Factor );
__declspec(implementation_key(7818)) HRESULT AreaProperties::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(7819)) HRESULT AreaProperties::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(7820)) IDispatchPtr AreaProperties::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(7821)) IDispatchPtr AreaProperties::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(7822)) HRESULT AreaProperties::BringToFront ( );
__declspec(implementation_key(7823)) HRESULT AreaProperties::BringForward ( );
__declspec(implementation_key(7824)) HRESULT AreaProperties::SendToBack ( );
__declspec(implementation_key(7825)) HRESULT AreaProperties::SendBackward ( );
__declspec(implementation_key(7826)) HRESULT AreaProperties::GetAreaProperties ( double * dArea, double * dAreaCenterX, double * dAreaCenterY, double * dMIX, double * dMIY, double * dMIXY, double * dPrincipalMIX, double * dPrincipalMIY, double * dAngleOfOrientation, double * dPrincipalXX, double * dPrincipalXY, double * dPrincipalYX, double * dPrincipalYY, double * dPerimeter );
__declspec(implementation_key(7827)) HRESULT AreaProperties::SetAxesLength ( VARIANT_BOOL bPrincipalAxes, double dLength );
__declspec(implementation_key(7828)) HRESULT AreaProperties::ShowAxes ( VARIANT_BOOL bPrincipalAxes, VARIANT_BOOL bShow );
__declspec(implementation_key(7829)) HRESULT AreaProperties::AddBoundaries ( long ParentBoundariesCount, SAFEARRAY * * ParentBoundaries, double xFloodPoint, double yFloodPoint );
__declspec(implementation_key(7830)) HRESULT AreaProperties::SetAxesLabels ( _bstr_t ModelXAxesLabel, _bstr_t ModelYAxesLabel, _bstr_t PrincipalXAxesLabel, _bstr_t PrincipalYAxesLabel );
__declspec(implementation_key(7831)) AreaPropertiesPtr _IAreaPropertiesCollectionAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(7832)) IUnknownPtr _IAreaPropertiesCollectionAuto::Get_NewEnum ( );
__declspec(implementation_key(7833)) TGFramework::ApplicationPtr _IAreaPropertiesCollectionAuto::GetApplication ( );
__declspec(implementation_key(7834)) long _IAreaPropertiesCollectionAuto::GetCount ( );
__declspec(implementation_key(7835)) IDispatchPtr _IAreaPropertiesCollectionAuto::GetParent ( );
__declspec(implementation_key(7836)) AreaPropertiesPtr _IAreaPropertiesCollectionAuto::Add ( long ParentBoundariesCount, SAFEARRAY * * ParentBoundaries, double xFloodPoint, double yFloodPoint );
__declspec(implementation_key(7837)) TGFramework::ApplicationPtr _IPMIAuto::GetApplication ( );
__declspec(implementation_key(7838)) IDispatchPtr _IPMIAuto::GetDimensions ( );
__declspec(implementation_key(7839)) IDispatchPtr _IPMIAuto::GetBalloons ( );
__declspec(implementation_key(7840)) IDispatchPtr _IPMIAuto::GetCornerAnnotations ( );
__declspec(implementation_key(7841)) IDispatchPtr _IPMIAuto::GetDatumFrames ( );
__declspec(implementation_key(7842)) IDispatchPtr _IPMIAuto::GetDatumPoints ( );
__declspec(implementation_key(7843)) IDispatchPtr _IPMIAuto::GetDatumTargets ( );
__declspec(implementation_key(7844)) IDispatchPtr _IPMIAuto::GetPinSymbols ( );
__declspec(implementation_key(7845)) IDispatchPtr _IPMIAuto::GetFeatureControlFrames ( );
__declspec(implementation_key(7846)) IDispatchPtr _IPMIAuto::GetLeaders ( );
__declspec(implementation_key(7847)) IDispatchPtr _IPMIAuto::GetSurfaceFinishSymbols ( );
__declspec(implementation_key(7848)) IDispatchPtr _IPMIAuto::GetWeldSymbols ( );
__declspec(implementation_key(7849)) IDispatchPtr _IPMIAuto::GetGostWeldSymbols ( );
__declspec(implementation_key(7850)) IDispatchPtr _IPMIAuto::GetSymbolicPMIGroup ( );
__declspec(implementation_key(7851)) IDispatchPtr _IPMIAuto::GetPMIModelViews ( );
__declspec(implementation_key(7852)) IDispatchPtr _IPMIAuto::GetCenterMarks ( );
__declspec(implementation_key(7853)) IDispatchPtr _IPMIAuto::GetCenterLines ( );
__declspec(implementation_key(7854)) IDispatchPtr _IPMIAuto::GetBoltHoleCircles ( );
__declspec(implementation_key(7855)) void _IPMIAuto::PutAxis ( IDispatch * Axis );
__declspec(implementation_key(7856)) IDispatchPtr _IPMIAuto::GetAxis ( );
__declspec(implementation_key(7857)) HRESULT _IPMIAuto::ClearAxis ( );
__declspec(implementation_key(7858)) void _IPMIAuto::PutActivePlane ( IDispatch * Plane );
__declspec(implementation_key(7859)) IDispatchPtr _IPMIAuto::GetActivePlane ( );
__declspec(implementation_key(7860)) HRESULT _IPMIAuto::ClearActivePlane ( );
__declspec(implementation_key(7861)) void _IPMIAuto::PutShowDimensions ( VARIANT_BOOL Value );
__declspec(implementation_key(7862)) VARIANT_BOOL _IPMIAuto::GetShowDimensions ( );
__declspec(implementation_key(7863)) void _IPMIAuto::PutShowAnnotations ( VARIANT_BOOL Value );
__declspec(implementation_key(7864)) VARIANT_BOOL _IPMIAuto::GetShowAnnotations ( );
__declspec(implementation_key(7865)) void _IPMIAuto::PutShow ( VARIANT_BOOL Value );
__declspec(implementation_key(7866)) VARIANT_BOOL _IPMIAuto::GetShow ( );
__declspec(implementation_key(7867)) void _IPMIAuto::PutPMIPixelMode ( VARIANT_BOOL Value );
__declspec(implementation_key(7868)) VARIANT_BOOL _IPMIAuto::GetPMIPixelMode ( );
__declspec(implementation_key(7869)) void _IPMIAuto::PutPMIPixelSize ( int Value );
__declspec(implementation_key(7870)) int _IPMIAuto::GetPMIPixelSize ( );
__declspec(implementation_key(7871)) IDispatchPtr _IPMIAuto::GetTextBoxes ( );
__declspec(implementation_key(7872)) DimStylePtr _IGostWeldSymbolAuto::GetStyle ( );
__declspec(implementation_key(7873)) HRESULT _IGostWeldSymbolAuto::SetTerminator ( IDispatch * TerminatorObj, double x, double y, double z, VARIANT_BOOL keyPoint );
__declspec(implementation_key(7874)) HRESULT _IGostWeldSymbolAuto::GetTerminator ( IDispatch * * TerminatorObj, double * x, double * y, double * z, VARIANT_BOOL * keyPoint );
__declspec(implementation_key(7875)) IDispatchPtr _IGostWeldSymbolAuto::GetAttributeSets ( );
__declspec(implementation_key(7876)) VARIANT_BOOL _IGostWeldSymbolAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(7877)) IDispatchPtr _IGostWeldSymbolAuto::GetPlane ( );
__declspec(implementation_key(7878)) TGFramework::ApplicationPtr _IGostWeldSymbolAuto::GetApplication ( );
__declspec(implementation_key(7879)) long _IGostWeldSymbolAuto::GetIndex ( );
__declspec(implementation_key(7880)) _bstr_t _IGostWeldSymbolAuto::GetName ( const _variant_t & Recurse, long Lcid );
__declspec(implementation_key(7881)) IDispatchPtr _IGostWeldSymbolAuto::GetParent ( );
__declspec(implementation_key(7882)) long _IGostWeldSymbolAuto::GetType ( );
__declspec(implementation_key(7883)) long _IGostWeldSymbolAuto::GetZOrder ( );
__declspec(implementation_key(7884)) _bstr_t _IGostWeldSymbolAuto::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(7885)) IDispatchPtr _IGostWeldSymbolAuto::GetDocument ( );
__declspec(implementation_key(7886)) HRESULT _IGostWeldSymbolAuto::Copy ( );
__declspec(implementation_key(7887)) HRESULT _IGostWeldSymbolAuto::Cut ( );
__declspec(implementation_key(7888)) HRESULT _IGostWeldSymbolAuto::Delete ( );
__declspec(implementation_key(7889)) HRESULT _IGostWeldSymbolAuto::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(7890)) HRESULT _IGostWeldSymbolAuto::Scale ( double Factor );
__declspec(implementation_key(7891)) HRESULT _IGostWeldSymbolAuto::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(7892)) HRESULT _IGostWeldSymbolAuto::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(7893)) IDispatchPtr _IGostWeldSymbolAuto::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(7894)) IDispatchPtr _IGostWeldSymbolAuto::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(7895)) HRESULT _IGostWeldSymbolAuto::BringToFront ( );
__declspec(implementation_key(7896)) HRESULT _IGostWeldSymbolAuto::BringForward ( );
__declspec(implementation_key(7897)) HRESULT _IGostWeldSymbolAuto::SendToBack ( );
__declspec(implementation_key(7898)) HRESULT _IGostWeldSymbolAuto::SendBackward ( );
__declspec(implementation_key(7899)) HRESULT _IGostWeldSymbolAuto::Select ( );
__declspec(implementation_key(7900)) double _IGostWeldSymbolAuto::GetBreakLineDistance ( );
__declspec(implementation_key(7901)) void _IGostWeldSymbolAuto::PutBreakLineDistance ( double Distance );
__declspec(implementation_key(7902)) VARIANT_BOOL _IGostWeldSymbolAuto::GetBreakLine ( );
__declspec(implementation_key(7903)) void _IGostWeldSymbolAuto::PutBreakLine ( VARIANT_BOOL Flag );
__declspec(implementation_key(7904)) VARIANT_BOOL _IGostWeldSymbolAuto::GetBreakLineDirection ( );
__declspec(implementation_key(7905)) void _IGostWeldSymbolAuto::PutBreakLineDirection ( VARIANT_BOOL Flag );
__declspec(implementation_key(7906)) VARIANT_BOOL _IGostWeldSymbolAuto::GetLeader ( );
__declspec(implementation_key(7907)) void _IGostWeldSymbolAuto::PutLeader ( VARIANT_BOOL Flag );
__declspec(implementation_key(7908)) long _IGostWeldSymbolAuto::GetVertexCount ( );
__declspec(implementation_key(7909)) HRESULT _IGostWeldSymbolAuto::GetVertices ( long * VertexCount, SAFEARRAY * * Vertices );
__declspec(implementation_key(7910)) HRESULT _IGostWeldSymbolAuto::SetVertices ( long VertexCount, SAFEARRAY * * Vertices );
__declspec(implementation_key(7911)) HRESULT _IGostWeldSymbolAuto::GetVertex ( long Index, double * x, double * y, double * z );
__declspec(implementation_key(7912)) HRESULT _IGostWeldSymbolAuto::SetVertex ( long Index, double x, double y, double z );
__declspec(implementation_key(7913)) HRESULT _IGostWeldSymbolAuto::InsertVertex ( long Index, double x, double y, double z );
__declspec(implementation_key(7914)) HRESULT _IGostWeldSymbolAuto::AddVertex ( double x, double y, double z );
__declspec(implementation_key(7915)) HRESULT _IGostWeldSymbolAuto::RemoveVertex ( long Index );
__declspec(implementation_key(7916)) long _IGostWeldSymbolAuto::GetKeyPointCount ( );
__declspec(implementation_key(7917)) HRESULT _IGostWeldSymbolAuto::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(7918)) HRESULT _IGostWeldSymbolAuto::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(7919)) double _IGostWeldSymbolAuto::GetRotationAngle ( );
__declspec(implementation_key(7920)) void _IGostWeldSymbolAuto::PutRotationAngle ( double pdAngle );
__declspec(implementation_key(7921)) VARIANT_BOOL _IGostWeldSymbolAuto::GetWeldInField ( );
__declspec(implementation_key(7922)) void _IGostWeldSymbolAuto::PutWeldInField ( VARIANT_BOOL Flag );
__declspec(implementation_key(7923)) VARIANT_BOOL _IGostWeldSymbolAuto::GetWeldAllAround ( );
__declspec(implementation_key(7924)) void _IGostWeldSymbolAuto::PutWeldAllAround ( VARIANT_BOOL Flag );
__declspec(implementation_key(7925)) double _IGostWeldSymbolAuto::GetTextScale ( );
__declspec(implementation_key(7926)) void _IGostWeldSymbolAuto::PutTextScale ( double pdAngle );
__declspec(implementation_key(7927)) void _IGostWeldSymbolAuto::PutLayer ( _bstr_t Layer );
__declspec(implementation_key(7928)) _bstr_t _IGostWeldSymbolAuto::GetLayer ( );
__declspec(implementation_key(7929)) IDispatchPtr _IGostWeldSymbolAuto::GetPMIPlane ( );
__declspec(implementation_key(7930)) double _IGostWeldSymbolAuto::GetPMITrackDistance ( );
__declspec(implementation_key(7931)) void _IGostWeldSymbolAuto::PutPMITrackDistance ( double pdPMITrackDistance );
__declspec(implementation_key(7932)) void _IGostWeldSymbolAuto::PutAboveBreakLineText ( _bstr_t Text );
__declspec(implementation_key(7933)) _bstr_t _IGostWeldSymbolAuto::GetAboveBreakLineText ( );
__declspec(implementation_key(7934)) void _IGostWeldSymbolAuto::PutBelowBreakLineText ( _bstr_t Text );
__declspec(implementation_key(7935)) _bstr_t _IGostWeldSymbolAuto::GetBelowBreakLineText ( );
__declspec(implementation_key(7936)) void _IGostWeldSymbolAuto::PutAboveLeaderLineText ( _bstr_t Text );
__declspec(implementation_key(7937)) _bstr_t _IGostWeldSymbolAuto::GetAboveLeaderLineText ( );
__declspec(implementation_key(7938)) void _IGostWeldSymbolAuto::PutBelowLeaderLineText ( _bstr_t Text );
__declspec(implementation_key(7939)) _bstr_t _IGostWeldSymbolAuto::GetBelowLeaderLineText ( );
__declspec(implementation_key(7940)) VARIANT_BOOL _IGostWeldSymbolAuto::GetPermanentJoint ( );
__declspec(implementation_key(7941)) void _IGostWeldSymbolAuto::PutPermanentJoint ( VARIANT_BOOL Flag );
__declspec(implementation_key(7942)) void _IGostWeldSymbolAuto::PutPermanentJointType ( enum DimGostWeldPermanentJointTypeConstants pVal );
__declspec(implementation_key(7943)) enum DimGostWeldPermanentJointTypeConstants _IGostWeldSymbolAuto::GetPermanentJointType ( );
__declspec(implementation_key(7944)) void _IGostWeldSymbolAuto::PutTerminatorSideType ( enum DimGostWeldTerminatorTypeConstants pVal );
__declspec(implementation_key(7945)) enum DimGostWeldTerminatorTypeConstants _IGostWeldSymbolAuto::GetTerminatorSideType ( );
__declspec(implementation_key(7946)) void _IGostWeldSymbolAuto::PutHidePMI ( VARIANT_BOOL Value );
__declspec(implementation_key(7947)) VARIANT_BOOL _IGostWeldSymbolAuto::GetHidePMI ( );
__declspec(implementation_key(7948)) DisplayDataPtr _IGostWeldSymbolAuto::GetDisplayData ( );
__declspec(implementation_key(7949)) HRESULT _IGostWeldSymbolAuto::PromoteToCurrentVersion ( );
__declspec(implementation_key(7950)) void _IGostWeldSymbolAuto::PutPMIName ( _bstr_t Text );
__declspec(implementation_key(7951)) _bstr_t _IGostWeldSymbolAuto::GetPMIName ( );
__declspec(implementation_key(7952)) void _IGostWeldSymbolAuto::PutWeldInFieldFlagDirection ( enum WeldSymbolFlagDirectionConstants Flag );
__declspec(implementation_key(7953)) enum WeldSymbolFlagDirectionConstants _IGostWeldSymbolAuto::GetWeldInFieldFlagDirection ( );
__declspec(implementation_key(7954)) HRESULT _IGostWeldSymbolAuto::TransformToModelCoordinates ( double InputX, double InputY, double InputZ, double * ModelX, double * ModelY, double * ModelZ );
__declspec(implementation_key(7955)) VARIANT_BOOL _IGostWeldSymbolAuto::GetIsTerminatorAttachedToEntity ( );
__declspec(implementation_key(7956)) HRESULT _IGostWeldSymbolAuto::GetReferencedGeometry ( SAFEARRAY * * ReferencedGeometries );
__declspec(implementation_key(7957)) HRESULT _IGostWeldSymbolAuto::SetReferencedGeometry ( SAFEARRAY * * ReferencedGeometries );
__declspec(implementation_key(7958)) HRESULT _IGostWeldSymbolAuto::GetReferencedObjectInfo ( SAFEARRAY * * ReferencedObjects, SAFEARRAY * * ReferencedObjectTypes );
__declspec(implementation_key(7959)) DimStylePtr GostWeldSymbol::GetStyle ( );
__declspec(implementation_key(7960)) HRESULT GostWeldSymbol::SetTerminator ( IDispatch * TerminatorObj, double x, double y, double z, VARIANT_BOOL keyPoint );
__declspec(implementation_key(7961)) HRESULT GostWeldSymbol::GetTerminator ( IDispatch * * TerminatorObj, double * x, double * y, double * z, VARIANT_BOOL * keyPoint );
__declspec(implementation_key(7962)) IDispatchPtr GostWeldSymbol::GetAttributeSets ( );
__declspec(implementation_key(7963)) VARIANT_BOOL GostWeldSymbol::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(7964)) IDispatchPtr GostWeldSymbol::GetPlane ( );
__declspec(implementation_key(7965)) TGFramework::ApplicationPtr GostWeldSymbol::GetApplication ( );
__declspec(implementation_key(7966)) long GostWeldSymbol::GetIndex ( );
__declspec(implementation_key(7967)) _bstr_t GostWeldSymbol::GetName ( const _variant_t & Recurse );
__declspec(implementation_key(7968)) IDispatchPtr GostWeldSymbol::GetParent ( );
__declspec(implementation_key(7969)) long GostWeldSymbol::GetType ( );
__declspec(implementation_key(7970)) long GostWeldSymbol::GetZOrder ( );
__declspec(implementation_key(7971)) _bstr_t GostWeldSymbol::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(7972)) IDispatchPtr GostWeldSymbol::GetDocument ( );
__declspec(implementation_key(7973)) HRESULT GostWeldSymbol::Copy ( );
__declspec(implementation_key(7974)) HRESULT GostWeldSymbol::Cut ( );
__declspec(implementation_key(7975)) HRESULT GostWeldSymbol::Delete ( );
__declspec(implementation_key(7976)) HRESULT GostWeldSymbol::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(7977)) HRESULT GostWeldSymbol::Scale ( double Factor );
__declspec(implementation_key(7978)) HRESULT GostWeldSymbol::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(7979)) HRESULT GostWeldSymbol::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(7980)) IDispatchPtr GostWeldSymbol::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(7981)) IDispatchPtr GostWeldSymbol::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(7982)) HRESULT GostWeldSymbol::BringToFront ( );
__declspec(implementation_key(7983)) HRESULT GostWeldSymbol::BringForward ( );
__declspec(implementation_key(7984)) HRESULT GostWeldSymbol::SendToBack ( );
__declspec(implementation_key(7985)) HRESULT GostWeldSymbol::SendBackward ( );
__declspec(implementation_key(7986)) HRESULT GostWeldSymbol::Select ( );
__declspec(implementation_key(7987)) double GostWeldSymbol::GetBreakLineDistance ( );
__declspec(implementation_key(7988)) void GostWeldSymbol::PutBreakLineDistance ( double _arg1 );
__declspec(implementation_key(7989)) VARIANT_BOOL GostWeldSymbol::GetBreakLine ( );
__declspec(implementation_key(7990)) void GostWeldSymbol::PutBreakLine ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7991)) VARIANT_BOOL GostWeldSymbol::GetBreakLineDirection ( );
__declspec(implementation_key(7992)) void GostWeldSymbol::PutBreakLineDirection ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7993)) VARIANT_BOOL GostWeldSymbol::GetLeader ( );
__declspec(implementation_key(7994)) void GostWeldSymbol::PutLeader ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(7995)) long GostWeldSymbol::GetVertexCount ( );
__declspec(implementation_key(7996)) HRESULT GostWeldSymbol::GetVertices ( long * VertexCount, SAFEARRAY * * Vertices );
__declspec(implementation_key(7997)) HRESULT GostWeldSymbol::SetVertices ( long VertexCount, SAFEARRAY * * Vertices );
__declspec(implementation_key(7998)) HRESULT GostWeldSymbol::GetVertex ( long Index, double * x, double * y, double * z );
__declspec(implementation_key(7999)) HRESULT GostWeldSymbol::SetVertex ( long Index, double x, double y, double z );
__declspec(implementation_key(8000)) HRESULT GostWeldSymbol::InsertVertex ( long Index, double x, double y, double z );
__declspec(implementation_key(8001)) HRESULT GostWeldSymbol::AddVertex ( double x, double y, double z );
__declspec(implementation_key(8002)) HRESULT GostWeldSymbol::RemoveVertex ( long Index );
__declspec(implementation_key(8003)) long GostWeldSymbol::GetKeyPointCount ( );
__declspec(implementation_key(8004)) HRESULT GostWeldSymbol::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(8005)) HRESULT GostWeldSymbol::SetKeyPoint ( long Index, double x, double y, double z );
__declspec(implementation_key(8006)) double GostWeldSymbol::GetRotationAngle ( );
__declspec(implementation_key(8007)) void GostWeldSymbol::PutRotationAngle ( double _arg1 );
__declspec(implementation_key(8008)) VARIANT_BOOL GostWeldSymbol::GetWeldInField ( );
__declspec(implementation_key(8009)) void GostWeldSymbol::PutWeldInField ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8010)) VARIANT_BOOL GostWeldSymbol::GetWeldAllAround ( );
__declspec(implementation_key(8011)) void GostWeldSymbol::PutWeldAllAround ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8012)) double GostWeldSymbol::GetTextScale ( );
__declspec(implementation_key(8013)) void GostWeldSymbol::PutTextScale ( double _arg1 );
__declspec(implementation_key(8014)) void GostWeldSymbol::PutLayer ( _bstr_t _arg1 );
__declspec(implementation_key(8015)) _bstr_t GostWeldSymbol::GetLayer ( );
__declspec(implementation_key(8016)) IDispatchPtr GostWeldSymbol::GetPMIPlane ( );
__declspec(implementation_key(8017)) double GostWeldSymbol::GetPMITrackDistance ( );
__declspec(implementation_key(8018)) void GostWeldSymbol::PutPMITrackDistance ( double _arg1 );
__declspec(implementation_key(8019)) void GostWeldSymbol::PutAboveBreakLineText ( _bstr_t _arg1 );
__declspec(implementation_key(8020)) _bstr_t GostWeldSymbol::GetAboveBreakLineText ( );
__declspec(implementation_key(8021)) void GostWeldSymbol::PutBelowBreakLineText ( _bstr_t _arg1 );
__declspec(implementation_key(8022)) _bstr_t GostWeldSymbol::GetBelowBreakLineText ( );
__declspec(implementation_key(8023)) void GostWeldSymbol::PutAboveLeaderLineText ( _bstr_t _arg1 );
__declspec(implementation_key(8024)) _bstr_t GostWeldSymbol::GetAboveLeaderLineText ( );
__declspec(implementation_key(8025)) void GostWeldSymbol::PutBelowLeaderLineText ( _bstr_t _arg1 );
__declspec(implementation_key(8026)) _bstr_t GostWeldSymbol::GetBelowLeaderLineText ( );
__declspec(implementation_key(8027)) VARIANT_BOOL GostWeldSymbol::GetPermanentJoint ( );
__declspec(implementation_key(8028)) void GostWeldSymbol::PutPermanentJoint ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8029)) void GostWeldSymbol::PutPermanentJointType ( enum DimGostWeldPermanentJointTypeConstants _arg1 );
__declspec(implementation_key(8030)) enum DimGostWeldPermanentJointTypeConstants GostWeldSymbol::GetPermanentJointType ( );
__declspec(implementation_key(8031)) void GostWeldSymbol::PutTerminatorSideType ( enum DimGostWeldTerminatorTypeConstants _arg1 );
__declspec(implementation_key(8032)) enum DimGostWeldTerminatorTypeConstants GostWeldSymbol::GetTerminatorSideType ( );
__declspec(implementation_key(8033)) void GostWeldSymbol::PutHidePMI ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8034)) VARIANT_BOOL GostWeldSymbol::GetHidePMI ( );
__declspec(implementation_key(8035)) DisplayDataPtr GostWeldSymbol::GetDisplayData ( );
__declspec(implementation_key(8036)) HRESULT GostWeldSymbol::PromoteToCurrentVersion ( );
__declspec(implementation_key(8037)) void GostWeldSymbol::PutPMIName ( _bstr_t _arg1 );
__declspec(implementation_key(8038)) _bstr_t GostWeldSymbol::GetPMIName ( );
__declspec(implementation_key(8039)) void GostWeldSymbol::PutWeldInFieldFlagDirection ( enum WeldSymbolFlagDirectionConstants _arg1 );
__declspec(implementation_key(8040)) enum WeldSymbolFlagDirectionConstants GostWeldSymbol::GetWeldInFieldFlagDirection ( );
__declspec(implementation_key(8041)) HRESULT GostWeldSymbol::TransformToModelCoordinates ( double InputX, double InputY, double InputZ, double * ModelX, double * ModelY, double * ModelZ );
__declspec(implementation_key(8042)) VARIANT_BOOL GostWeldSymbol::GetIsTerminatorAttachedToEntity ( );
__declspec(implementation_key(8043)) HRESULT GostWeldSymbol::GetReferencedGeometry ( SAFEARRAY * * ReferencedGeometries );
__declspec(implementation_key(8044)) HRESULT GostWeldSymbol::SetReferencedGeometry ( SAFEARRAY * * ReferencedGeometries );
__declspec(implementation_key(8045)) HRESULT GostWeldSymbol::GetReferencedObjectInfo ( SAFEARRAY * * ReferencedObjects, SAFEARRAY * * ReferencedObjectTypes );
__declspec(implementation_key(8046)) TGFramework::ApplicationPtr _IGostWeldSymbolsAuto::GetApplication ( );
__declspec(implementation_key(8047)) long _IGostWeldSymbolsAuto::GetCount ( );
__declspec(implementation_key(8048)) IDispatchPtr _IGostWeldSymbolsAuto::GetParent ( );
__declspec(implementation_key(8049)) GostWeldSymbolPtr _IGostWeldSymbolsAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(8050)) IUnknownPtr _IGostWeldSymbolsAuto::Get_NewEnum ( );
__declspec(implementation_key(8051)) void _IGostWeldSymbolsAuto::PutPlane ( IDispatch * Plane );
__declspec(implementation_key(8052)) IDispatchPtr _IGostWeldSymbolsAuto::GetPlane ( );
__declspec(implementation_key(8053)) void _IGostWeldSymbolsAuto::PutStyle ( struct DimensionStyle * Style );
__declspec(implementation_key(8054)) DimensionStylePtr _IGostWeldSymbolsAuto::GetStyle ( );
__declspec(implementation_key(8055)) GostWeldSymbolPtr _IGostWeldSymbolsAuto::AddByTerminator ( IDispatch * TerminatorObject, double x1, double y1, double z1, VARIANT_BOOL keyPoint1 );
__declspec(implementation_key(8056)) HRESULT _IGostWeldSymbolsAuto::ClearPlane ( );
__declspec(implementation_key(8057)) HRESULT _IGostWeldSymbolsAuto::ClearStyle ( );
__declspec(implementation_key(8058)) AnnotInitDataPtr _IGostWeldSymbolsAuto::GetAnnotInitData ( );
__declspec(implementation_key(8059)) GostWeldSymbolPtr _IGostWeldSymbolsAuto::AddGostWeldSymbol ( struct AnnotInitData * AnnotInitData );
__declspec(implementation_key(8060)) IDispatchPtr _ISymbolicPMIAuto::GetAttributeSets ( );
__declspec(implementation_key(8061)) VARIANT_BOOL _ISymbolicPMIAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(8062)) TGFramework::ApplicationPtr _ISymbolicPMIAuto::GetApplication ( );
__declspec(implementation_key(8063)) long _ISymbolicPMIAuto::GetIndex ( );
__declspec(implementation_key(8064)) _bstr_t _ISymbolicPMIAuto::GetName ( const _variant_t & Recurse, long Lcid );
__declspec(implementation_key(8065)) IDispatchPtr _ISymbolicPMIAuto::GetParent ( );
__declspec(implementation_key(8066)) long _ISymbolicPMIAuto::GetType ( );
__declspec(implementation_key(8067)) _bstr_t _ISymbolicPMIAuto::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(8068)) IDispatchPtr _ISymbolicPMIAuto::GetDocument ( );
__declspec(implementation_key(8069)) HRESULT _ISymbolicPMIAuto::Delete ( );
__declspec(implementation_key(8070)) HRESULT _ISymbolicPMIAuto::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(8071)) HRESULT _ISymbolicPMIAuto::Select ( );
__declspec(implementation_key(8072)) void _ISymbolicPMIAuto::PutHidePMI ( VARIANT_BOOL Value );
__declspec(implementation_key(8073)) VARIANT_BOOL _ISymbolicPMIAuto::GetHidePMI ( );
__declspec(implementation_key(8074)) TGFramework::ApplicationPtr _ISymbolicPMIGroupAuto::GetApplication ( );
__declspec(implementation_key(8075)) long _ISymbolicPMIGroupAuto::GetCount ( );
__declspec(implementation_key(8076)) IDispatchPtr _ISymbolicPMIGroupAuto::GetParent ( );
__declspec(implementation_key(8077)) IDispatchPtr _ISymbolicPMIGroupAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(8078)) IUnknownPtr _ISymbolicPMIGroupAuto::Get_NewEnum ( );
__declspec(implementation_key(8079)) Relation2dPtr Relations2d::Item ( const _variant_t & Index );
__declspec(implementation_key(8080)) long Relations2d::GetCount ( );
__declspec(implementation_key(8081)) Relation2dPtr Relations2d::AddHorizontalAlign ( IDispatch * Object1, long Index1, IDispatch * Object2, long Index2, const _variant_t & guaranteed_ok );
__declspec(implementation_key(8082)) Relation2dPtr Relations2d::AddVerticalAlign ( IDispatch * Object1, long Index1, IDispatch * Object2, long Index2, const _variant_t & guaranteed_ok );
__declspec(implementation_key(8083)) Relation2dPtr Relations2d::AddConcentric ( IDispatch * Object1, IDispatch * Object2, const _variant_t & guaranteed_ok );
__declspec(implementation_key(8084)) Relation2dPtr Relations2d::AddFix ( IDispatch * Object, const _variant_t & guaranteed_ok );
__declspec(implementation_key(8085)) Relation2dPtr Relations2d::AddKeypointFix ( IDispatch * Object, long Index, const _variant_t & guaranteed_ok );
__declspec(implementation_key(8086)) Relation2dPtr Relations2d::AddHorizontal ( IDispatch * Object, const _variant_t & guaranteed_ok );
__declspec(implementation_key(8087)) Relation2dPtr Relations2d::AddVertical ( IDispatch * Object, const _variant_t & guaranteed_ok );
__declspec(implementation_key(8088)) Relation2dPtr Relations2d::AddParallel ( IDispatch * Object1, IDispatch * Object2, const _variant_t & guaranteed_ok );
__declspec(implementation_key(8089)) Relation2dPtr Relations2d::AddPerpendicular ( IDispatch * Object1, IDispatch * Object2, const _variant_t & guaranteed_ok );
__declspec(implementation_key(8090)) Relation2dPtr Relations2d::AddTangent ( IDispatch * Object1, IDispatch * Object2, const _variant_t & guaranteed_ok );
__declspec(implementation_key(8091)) Relation2dPtr Relations2d::AddEqualDirection ( IDispatch * Object1, long Index1, IDispatch * Object2, long Index2, const _variant_t & guaranteed_ok );
__declspec(implementation_key(8092)) Relation2dPtr Relations2d::AddTangentEqualCurvature ( IDispatch * Object1, long Index1, IDispatch * Object2, long Index2, const _variant_t & guaranteed_ok );
__declspec(implementation_key(8093)) Relation2dPtr Relations2d::AddEqualDirectionEqualCurvature ( IDispatch * Object1, long Index1, IDispatch * Object2, long Index2, const _variant_t & guaranteed_ok );
__declspec(implementation_key(8094)) Relation2dPtr Relations2d::AddTangentBetweenCompoundCurves ( long NumberElements1, SAFEARRAY * * Elements1, long NumberElements2, SAFEARRAY * * Elements2, const _variant_t & guaranteed_ok );
__declspec(implementation_key(8095)) Relation2dPtr Relations2d::AddIntersection ( IDispatch * Object1, long Index, IDispatch * Object2, IDispatch * Object3, const _variant_t & guaranteed_ok );
__declspec(implementation_key(8096)) Relation2dPtr Relations2d::AddPointOn ( IDispatch * Object1, long Index, IDispatch * Object2, const _variant_t & guaranteed_ok );
__declspec(implementation_key(8097)) Relation2dPtr Relations2d::AddPointOnCompoundCurve ( IDispatch * Object1, long Index, long NumberElements, SAFEARRAY * * Elements, const _variant_t & guaranteed_ok );
__declspec(implementation_key(8098)) Relation2dPtr Relations2d::AddKeypoint ( IDispatch * Object1, long Index1, IDispatch * Object2, long Index2, const _variant_t & guaranteed_ok );
__declspec(implementation_key(8099)) Relation2dPtr Relations2d::AddSymmetric ( IDispatch * pLine, IDispatch * Object2, IDispatch * Object3, const _variant_t & guaranteed_ok );
__declspec(implementation_key(8100)) Relation2dPtr Relations2d::AddEqual ( IDispatch * Object1, IDispatch * Object2, const _variant_t & guaranteed_ok );
__declspec(implementation_key(8101)) Relation2dPtr Relations2d::AddSet ( long NumberElements, SAFEARRAY * * Elements );
__declspec(implementation_key(8102)) Relation2dPtr Relations2d::AddColinear ( IDispatch * Object1, IDispatch * Object2, const _variant_t & guaranteed_ok );
__declspec(implementation_key(8103)) Relation2dPtr Relations2d::AddFillet ( IDispatch * Object1, long Index1, IDispatch * Arc, long arc_index, IDispatch * Object2, long Index2, const _variant_t & guaranteed_ok );
__declspec(implementation_key(8104)) Relation2dPtr Relations2d::AddLink ( IDispatch * Object1, IDispatch * Object2, const _variant_t & guaranteed_ok );
__declspec(implementation_key(8105)) Relation2dPtr Relations2d::AddChamfer ( IDispatch * Object1, long Index1, IDispatch * Line, long line_index, IDispatch * Object2, long Index2, const _variant_t & guaranteed_ok );
__declspec(implementation_key(8106)) HRESULT Relations2d::AddAutoConstraints ( double dist_tol, double angle_tol, long NumElements, SAFEARRAY * * Elements, long NumCnstrTypes, SAFEARRAY * * CnstrTypes, long * NumCnstrs, SAFEARRAY * * Cnstrs, const _variant_t & varXOriginUnk, const _variant_t & varYOriginUnk, const _variant_t & Xdim_pos_x, const _variant_t & Xdim_pos_y, const _variant_t & Ydim_pos_x, const _variant_t & Ydim_pos_y, const _variant_t & DimPlacementOptions, const _variant_t & LinearDimOptions, VARIANT_BOOL PlaceRadiusDimOnCircle, VARIANT_BOOL PlaceRadiusDimOnArc, VARIANT_BOOL PlaceDistanceDimFromCircleCenter );
__declspec(implementation_key(8107)) long BackDrop::GetMarginColor ( );
__declspec(implementation_key(8108)) void BackDrop::PutMarginColor ( long _arg1 );
__declspec(implementation_key(8109)) void BackDrop::PutMarginDisplay ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8110)) VARIANT_BOOL BackDrop::GetMarginDisplay ( );
__declspec(implementation_key(8111)) long BackDrop::GetGridColor ( );
__declspec(implementation_key(8112)) void BackDrop::PutGridColor ( long _arg1 );
__declspec(implementation_key(8113)) enum GridTypeConstants BackDrop::GetGridType ( );
__declspec(implementation_key(8114)) void BackDrop::PutGridType ( enum GridTypeConstants _arg1 );
__declspec(implementation_key(8115)) void BackDrop::PutDynamicGridSpacing ( enum DynamicGridSpacingConstants _arg1 );
__declspec(implementation_key(8116)) enum DynamicGridSpacingConstants BackDrop::GetDynamicGridSpacing ( );
__declspec(implementation_key(8117)) double BackDrop::GetStaticGridSpacing ( );
__declspec(implementation_key(8118)) void BackDrop::PutStaticGridSpacing ( double _arg1 );
__declspec(implementation_key(8119)) VARIANT_BOOL BackDrop::GetGridDisplay ( );
__declspec(implementation_key(8120)) void BackDrop::PutGridDisplay ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8121)) void BackDrop::PutUseCustomSheetColor ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8122)) VARIANT_BOOL BackDrop::GetUseCustomSheetColor ( );
__declspec(implementation_key(8123)) long BackDrop::GetCustomSheetColor ( );
__declspec(implementation_key(8124)) void BackDrop::PutCustomSheetColor ( long _arg1 );
__declspec(implementation_key(8125)) IDispatchPtr BackDrop::GetAttributeSets ( );
__declspec(implementation_key(8126)) VARIANT_BOOL BackDrop::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(8127)) void GroupStyle::PutLinearColor ( long _arg1 );
__declspec(implementation_key(8128)) long GroupStyle::GetLinearColor ( );
__declspec(implementation_key(8129)) double GroupStyle::GetWidth ( );
__declspec(implementation_key(8130)) void GroupStyle::PutWidth ( double _arg1 );
__declspec(implementation_key(8131)) void GroupStyle::PutUnits ( long _arg1 );
__declspec(implementation_key(8132)) long GroupStyle::GetUnits ( );
__declspec(implementation_key(8133)) VARIANT_BOOL GroupStyle::GetAutoPhase ( );
__declspec(implementation_key(8134)) void GroupStyle::PutAutoPhase ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8135)) long GroupStyle::GetDashGapCount ( );
__declspec(implementation_key(8136)) double GroupStyle::GetDashStrokePercent ( );
__declspec(implementation_key(8137)) void GroupStyle::PutDashStrokePercent ( double _arg1 );
__declspec(implementation_key(8138)) void GroupStyle::PutLinearName ( _bstr_t _arg1 );
__declspec(implementation_key(8139)) _bstr_t GroupStyle::GetLinearName ( );
__declspec(implementation_key(8140)) void GroupStyle::PutDashName ( _bstr_t _arg1 );
__declspec(implementation_key(8141)) _bstr_t GroupStyle::GetDashName ( );
__declspec(implementation_key(8142)) HRESULT GroupStyle::UseActiveStyle ( long StyleType );
__declspec(implementation_key(8143)) HRESULT GroupStyle::SetDashGap ( long DashCount, SAFEARRAY * * Dashes );
__declspec(implementation_key(8144)) HRESULT GroupStyle::GetDashGap ( long DashCount, SAFEARRAY * * Dashes );
__declspec(implementation_key(8145)) TGFramework::ApplicationPtr DimensionStyles::GetApplication ( );
__declspec(implementation_key(8146)) long DimensionStyles::GetCount ( );
__declspec(implementation_key(8147)) IDispatchPtr DimensionStyles::GetParent ( );
__declspec(implementation_key(8148)) DimensionStylePtr DimensionStyles::Item ( const _variant_t & Index );
__declspec(implementation_key(8149)) DimensionStylePtr DimensionStyles::Add ( _bstr_t Name, _bstr_t Parent );
__declspec(implementation_key(8150)) HRESULT DimensionStyles::Remove ( _bstr_t Name );
__declspec(implementation_key(8151)) _bstr_t DimensionStyles::GetActive ( );
__declspec(implementation_key(8152)) void DimensionStyles::PutActive ( _bstr_t _arg1 );
__declspec(implementation_key(8153)) HRESULT DimensionStyles::AddEx ( _bstr_t Name, VARIANT_BOOL bOverride, IDispatch * pSourceDoc );
__declspec(implementation_key(8154)) VARIANT_BOOL DimensionStyles::IsDimStyleExists ( _bstr_t DimensionStyle );
__declspec(implementation_key(8155)) void DrawingViewStyle::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(8156)) _bstr_t DrawingViewStyle::GetName ( );
__declspec(implementation_key(8157)) _bstr_t DrawingViewStyle::GetDescription ( );
__declspec(implementation_key(8158)) void DrawingViewStyle::PutDimensionStyle ( struct DimensionStyle * _arg1 );
__declspec(implementation_key(8159)) DimensionStylePtr DrawingViewStyle::GetDimensionStyle ( );
__declspec(implementation_key(8160)) void DrawingViewStyle::PutCodeASSuffix ( enum DrawingViewCaptionTypeConstants dvtype, _bstr_t _arg2 );
__declspec(implementation_key(8161)) _bstr_t DrawingViewStyle::GetCodeASSuffix ( enum DrawingViewCaptionTypeConstants dvtype );
__declspec(implementation_key(8162)) void DrawingViewStyle::PutShowCodeASSuffix ( enum DrawingViewCaptionTypeConstants dvtype, VARIANT_BOOL _arg2 );
__declspec(implementation_key(8163)) VARIANT_BOOL DrawingViewStyle::GetShowCodeASSuffix ( enum DrawingViewCaptionTypeConstants dvtype );
__declspec(implementation_key(8164)) void DrawingViewStyle::PutCodeLNAnnotationSheetNumber ( _bstr_t _arg1 );
__declspec(implementation_key(8165)) _bstr_t DrawingViewStyle::GetCodeLNAnnotationSheetNumber ( );
__declspec(implementation_key(8166)) void DrawingViewStyle::PutShowCodeLNAnnotationSheetNumber ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8167)) VARIANT_BOOL DrawingViewStyle::GetShowCodeLNAnnotationSheetNumber ( );
__declspec(implementation_key(8168)) void DrawingViewStyle::PutCodeVSViewScale ( _bstr_t _arg1 );
__declspec(implementation_key(8169)) _bstr_t DrawingViewStyle::GetCodeVSViewScale ( );
__declspec(implementation_key(8170)) void DrawingViewStyle::PutShowCodeVSViewScale ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8171)) VARIANT_BOOL DrawingViewStyle::GetShowCodeVSViewScale ( );
__declspec(implementation_key(8172)) void DrawingViewStyle::PutCodeVNViewSheetNumber ( _bstr_t _arg1 );
__declspec(implementation_key(8173)) _bstr_t DrawingViewStyle::GetCodeVNViewSheetNumber ( );
__declspec(implementation_key(8174)) void DrawingViewStyle::PutShowCodeVNViewSheetNumber ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8175)) VARIANT_BOOL DrawingViewStyle::GetShowCodeVNViewSheetNumber ( );
__declspec(implementation_key(8176)) void DrawingViewStyle::PutCodeVRViewRotationAngle ( _bstr_t _arg1 );
__declspec(implementation_key(8177)) _bstr_t DrawingViewStyle::GetCodeVRViewRotationAngle ( );
__declspec(implementation_key(8178)) void DrawingViewStyle::PutShowCodeVRViewRotationAngle ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8179)) VARIANT_BOOL DrawingViewStyle::GetShowCodeVRViewRotationAngle ( );
__declspec(implementation_key(8180)) void DrawingViewStyle::PutCaptionPrimary ( enum DrawingViewCaptionTypeConstants dvtype, _bstr_t _arg2 );
__declspec(implementation_key(8181)) _bstr_t DrawingViewStyle::GetCaptionPrimary ( enum DrawingViewCaptionTypeConstants dvtype );
__declspec(implementation_key(8182)) void DrawingViewStyle::PutCaptionSecondary ( enum DrawingViewCaptionTypeConstants dvtype, _bstr_t _arg2 );
__declspec(implementation_key(8183)) _bstr_t DrawingViewStyle::GetCaptionSecondary ( enum DrawingViewCaptionTypeConstants dvtype );
__declspec(implementation_key(8184)) void DrawingViewStyle::PutShowPrimaryCaption ( enum DrawingViewCaptionTypeConstants dvtype, VARIANT_BOOL _arg2 );
__declspec(implementation_key(8185)) VARIANT_BOOL DrawingViewStyle::GetShowPrimaryCaption ( enum DrawingViewCaptionTypeConstants dvtype );
__declspec(implementation_key(8186)) void DrawingViewStyle::PutShowSecondaryCaption ( enum DrawingViewCaptionTypeConstants dvtype, VARIANT_BOOL _arg2 );
__declspec(implementation_key(8187)) VARIANT_BOOL DrawingViewStyle::GetShowSecondaryCaption ( enum DrawingViewCaptionTypeConstants dvtype );
__declspec(implementation_key(8188)) void DrawingViewStyle::PutCaptionAnnotation ( enum DrawingViewAnnotationTypeConstants dvtype, _bstr_t _arg2 );
__declspec(implementation_key(8189)) _bstr_t DrawingViewStyle::GetCaptionAnnotation ( enum DrawingViewAnnotationTypeConstants dvtype );
__declspec(implementation_key(8190)) void DrawingViewStyle::PutShowAnnotationCaption ( enum DrawingViewAnnotationTypeConstants dvtype, VARIANT_BOOL _arg2 );
__declspec(implementation_key(8191)) VARIANT_BOOL DrawingViewStyle::GetShowAnnotationCaption ( enum DrawingViewAnnotationTypeConstants dvtype );
__declspec(implementation_key(8192)) void DrawingViewStyle::PutPrimaryCaptionFont ( _bstr_t _arg1 );
__declspec(implementation_key(8193)) _bstr_t DrawingViewStyle::GetPrimaryCaptionFont ( );
__declspec(implementation_key(8194)) void DrawingViewStyle::PutPrimaryCaptionFontStyle ( enum DimTextFontStyleConstants _arg1 );
__declspec(implementation_key(8195)) enum DimTextFontStyleConstants DrawingViewStyle::GetPrimaryCaptionFontStyle ( );
__declspec(implementation_key(8196)) void DrawingViewStyle::PutPrimaryCaptionColor ( long _arg1 );
__declspec(implementation_key(8197)) long DrawingViewStyle::GetPrimaryCaptionColor ( );
__declspec(implementation_key(8198)) void DrawingViewStyle::PutPrimaryCaptionTextSize ( double _arg1 );
__declspec(implementation_key(8199)) double DrawingViewStyle::GetPrimaryCaptionTextSize ( );
__declspec(implementation_key(8200)) void DrawingViewStyle::PutPrimaryCaptionTextAutoFillBackground ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8201)) VARIANT_BOOL DrawingViewStyle::GetPrimaryCaptionTextAutoFillBackground ( );
__declspec(implementation_key(8202)) void DrawingViewStyle::PutPrimaryCaptionTextAlignment ( enum DrawingViewCaptionTextAlignment _arg1 );
__declspec(implementation_key(8203)) enum DrawingViewCaptionTextAlignment DrawingViewStyle::GetPrimaryCaptionTextAlignment ( );
__declspec(implementation_key(8204)) void DrawingViewStyle::PutSecondaryCaptionFont ( _bstr_t _arg1 );
__declspec(implementation_key(8205)) _bstr_t DrawingViewStyle::GetSecondaryCaptionFont ( );
__declspec(implementation_key(8206)) void DrawingViewStyle::PutSecondaryCaptionFontStyle ( enum DimTextFontStyleConstants _arg1 );
__declspec(implementation_key(8207)) enum DimTextFontStyleConstants DrawingViewStyle::GetSecondaryCaptionFontStyle ( );
__declspec(implementation_key(8208)) void DrawingViewStyle::PutSecondaryCaptionColor ( long _arg1 );
__declspec(implementation_key(8209)) long DrawingViewStyle::GetSecondaryCaptionColor ( );
__declspec(implementation_key(8210)) void DrawingViewStyle::PutSecondaryCaptionTextSize ( double _arg1 );
__declspec(implementation_key(8211)) double DrawingViewStyle::GetSecondaryCaptionTextSize ( );
__declspec(implementation_key(8212)) void DrawingViewStyle::PutSecondaryCaptionTextAutoFillBackground ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8213)) VARIANT_BOOL DrawingViewStyle::GetSecondaryCaptionTextAutoFillBackground ( );
__declspec(implementation_key(8214)) void DrawingViewStyle::PutSecondaryCaptionTextAlignment ( enum DrawingViewCaptionTextAlignment _arg1 );
__declspec(implementation_key(8215)) enum DrawingViewCaptionTextAlignment DrawingViewStyle::GetSecondaryCaptionTextAlignment ( );
__declspec(implementation_key(8216)) void DrawingViewStyle::PutShowPrimarySecondayCaptionSeparator ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8217)) VARIANT_BOOL DrawingViewStyle::GetShowPrimarySecondayCaptionSeparator ( );
__declspec(implementation_key(8218)) void DrawingViewStyle::PutViewCaptionLocation ( enum DimViewCaptionLocationConstants _arg1 );
__declspec(implementation_key(8219)) enum DimViewCaptionLocationConstants DrawingViewStyle::GetViewCaptionLocation ( );
__declspec(implementation_key(8220)) void DrawingViewStyle::PutCPLCaptionLocation ( enum DimViewCPLCaptionLocationConstants _arg1 );
__declspec(implementation_key(8221)) enum DimViewCPLCaptionLocationConstants DrawingViewStyle::GetCPLCaptionLocation ( );
__declspec(implementation_key(8222)) void DrawingViewStyle::PutVPLCaptionAtEnd ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8223)) VARIANT_BOOL DrawingViewStyle::GetVPLCaptionAtEnd ( );
__declspec(implementation_key(8224)) void DrawingViewStyle::PutViewSheetNumberLocation ( enum DrawingViewStyleSheetNumberLocationConstants _arg1 );
__declspec(implementation_key(8225)) enum DrawingViewStyleSheetNumberLocationConstants DrawingViewStyle::GetViewSheetNumberLocation ( );
__declspec(implementation_key(8226)) void DrawingViewStyle::PutViewBorderLineType ( _bstr_t _arg1 );
__declspec(implementation_key(8227)) _bstr_t DrawingViewStyle::GetViewBorderLineType ( );
__declspec(implementation_key(8228)) void DrawingViewStyle::PutViewBorderLineWidth ( double _arg1 );
__declspec(implementation_key(8229)) double DrawingViewStyle::GetViewBorderLineWidth ( );
__declspec(implementation_key(8230)) void DrawingViewStyle::PutViewAnnotationLineType ( _bstr_t _arg1 );
__declspec(implementation_key(8231)) _bstr_t DrawingViewStyle::GetViewAnnotationLineType ( );
__declspec(implementation_key(8232)) void DrawingViewStyle::PutViewAnnotationLineWidth ( double _arg1 );
__declspec(implementation_key(8233)) double DrawingViewStyle::GetViewAnnotationLineWidth ( );
__declspec(implementation_key(8234)) void DrawingViewStyle::PutTerminatorDisplay ( enum DimTermDisplayTypeConstants _arg1 );
__declspec(implementation_key(8235)) enum DimTermDisplayTypeConstants DrawingViewStyle::GetTerminatorDisplay ( );
__declspec(implementation_key(8236)) void DrawingViewStyle::PutTerminatorType ( enum DimTermTypeConstants _arg1 );
__declspec(implementation_key(8237)) enum DimTermTypeConstants DrawingViewStyle::GetTerminatorType ( );
__declspec(implementation_key(8238)) void DrawingViewStyle::PutTerminatorSize ( double _arg1 );
__declspec(implementation_key(8239)) double DrawingViewStyle::GetTerminatorSize ( );
__declspec(implementation_key(8240)) void DrawingViewStyle::PutThinTerminatorLines ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8241)) VARIANT_BOOL DrawingViewStyle::GetThinTerminatorLines ( );
__declspec(implementation_key(8242)) void DrawingViewStyle::PutCuttingPlaneLineDisplay ( enum DimViewCuttingPlaneDisplayTypeConstants _arg1 );
__declspec(implementation_key(8243)) enum DimViewCuttingPlaneDisplayTypeConstants DrawingViewStyle::GetCuttingPlaneLineDisplay ( );
__declspec(implementation_key(8244)) void DrawingViewStyle::PutCuttingPlaneLineDisplayStyle ( enum CuttingPlaneLineDisplayStyleConstants _arg1 );
__declspec(implementation_key(8245)) enum CuttingPlaneLineDisplayStyleConstants DrawingViewStyle::GetCuttingPlaneLineDisplayStyle ( );
__declspec(implementation_key(8246)) void DrawingViewStyle::PutThickLineLengthRatio ( double _arg1 );
__declspec(implementation_key(8247)) double DrawingViewStyle::GetThickLineLengthRatio ( );
__declspec(implementation_key(8248)) void DrawingViewStyle::PutCuttingPlaneLineArrowOffset ( double _arg1 );
__declspec(implementation_key(8249)) double DrawingViewStyle::GetCuttingPlaneLineArrowOffset ( );
__declspec(implementation_key(8250)) void DrawingViewStyle::PutViewPlaneLineDisplay ( enum DimViewPlaneDisplayTypeConstants _arg1 );
__declspec(implementation_key(8251)) enum DimViewPlaneDisplayTypeConstants DrawingViewStyle::GetViewPlaneLineDisplay ( );
__declspec(implementation_key(8252)) void DrawingViewStyle::PutParent ( _bstr_t _arg1 );
__declspec(implementation_key(8253)) _bstr_t DrawingViewStyle::GetParent ( );
__declspec(implementation_key(8254)) IDispatchPtr DrawingViewStyle::GetAttributeSets ( );
__declspec(implementation_key(8255)) VARIANT_BOOL DrawingViewStyle::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(8256)) void _IDrawingViewStyleAuto::PutName ( _bstr_t Name );
__declspec(implementation_key(8257)) _bstr_t _IDrawingViewStyleAuto::GetName ( );
__declspec(implementation_key(8258)) _bstr_t _IDrawingViewStyleAuto::GetDescription ( );
__declspec(implementation_key(8259)) void _IDrawingViewStyleAuto::PutDimensionStyle ( struct DimensionStyle * ppObj );
__declspec(implementation_key(8260)) DimensionStylePtr _IDrawingViewStyleAuto::GetDimensionStyle ( );
__declspec(implementation_key(8261)) void _IDrawingViewStyleAuto::PutCodeASSuffix ( enum DrawingViewCaptionTypeConstants dvtype, _bstr_t caption );
__declspec(implementation_key(8262)) _bstr_t _IDrawingViewStyleAuto::GetCodeASSuffix ( enum DrawingViewCaptionTypeConstants dvtype );
__declspec(implementation_key(8263)) void _IDrawingViewStyleAuto::PutShowCodeASSuffix ( enum DrawingViewCaptionTypeConstants dvtype, VARIANT_BOOL Show );
__declspec(implementation_key(8264)) VARIANT_BOOL _IDrawingViewStyleAuto::GetShowCodeASSuffix ( enum DrawingViewCaptionTypeConstants dvtype );
__declspec(implementation_key(8265)) void _IDrawingViewStyleAuto::PutCodeLNAnnotationSheetNumber ( _bstr_t caption );
__declspec(implementation_key(8266)) _bstr_t _IDrawingViewStyleAuto::GetCodeLNAnnotationSheetNumber ( );
__declspec(implementation_key(8267)) void _IDrawingViewStyleAuto::PutShowCodeLNAnnotationSheetNumber ( VARIANT_BOOL Show );
__declspec(implementation_key(8268)) VARIANT_BOOL _IDrawingViewStyleAuto::GetShowCodeLNAnnotationSheetNumber ( );
__declspec(implementation_key(8269)) void _IDrawingViewStyleAuto::PutCodeVSViewScale ( _bstr_t caption );
__declspec(implementation_key(8270)) _bstr_t _IDrawingViewStyleAuto::GetCodeVSViewScale ( );
__declspec(implementation_key(8271)) void _IDrawingViewStyleAuto::PutShowCodeVSViewScale ( VARIANT_BOOL Show );
__declspec(implementation_key(8272)) VARIANT_BOOL _IDrawingViewStyleAuto::GetShowCodeVSViewScale ( );
__declspec(implementation_key(8273)) void _IDrawingViewStyleAuto::PutCodeVNViewSheetNumber ( _bstr_t caption );
__declspec(implementation_key(8274)) _bstr_t _IDrawingViewStyleAuto::GetCodeVNViewSheetNumber ( );
__declspec(implementation_key(8275)) void _IDrawingViewStyleAuto::PutShowCodeVNViewSheetNumber ( VARIANT_BOOL Show );
__declspec(implementation_key(8276)) VARIANT_BOOL _IDrawingViewStyleAuto::GetShowCodeVNViewSheetNumber ( );
__declspec(implementation_key(8277)) void _IDrawingViewStyleAuto::PutCodeVRViewRotationAngle ( _bstr_t caption );
__declspec(implementation_key(8278)) _bstr_t _IDrawingViewStyleAuto::GetCodeVRViewRotationAngle ( );
__declspec(implementation_key(8279)) void _IDrawingViewStyleAuto::PutShowCodeVRViewRotationAngle ( VARIANT_BOOL Show );
__declspec(implementation_key(8280)) VARIANT_BOOL _IDrawingViewStyleAuto::GetShowCodeVRViewRotationAngle ( );
__declspec(implementation_key(8281)) void _IDrawingViewStyleAuto::PutCaptionPrimary ( enum DrawingViewCaptionTypeConstants dvtype, _bstr_t caption );
__declspec(implementation_key(8282)) _bstr_t _IDrawingViewStyleAuto::GetCaptionPrimary ( enum DrawingViewCaptionTypeConstants dvtype );
__declspec(implementation_key(8283)) void _IDrawingViewStyleAuto::PutCaptionSecondary ( enum DrawingViewCaptionTypeConstants dvtype, _bstr_t caption );
__declspec(implementation_key(8284)) _bstr_t _IDrawingViewStyleAuto::GetCaptionSecondary ( enum DrawingViewCaptionTypeConstants dvtype );
__declspec(implementation_key(8285)) void _IDrawingViewStyleAuto::PutShowPrimaryCaption ( enum DrawingViewCaptionTypeConstants dvtype, VARIANT_BOOL Show );
__declspec(implementation_key(8286)) VARIANT_BOOL _IDrawingViewStyleAuto::GetShowPrimaryCaption ( enum DrawingViewCaptionTypeConstants dvtype );
__declspec(implementation_key(8287)) void _IDrawingViewStyleAuto::PutShowSecondaryCaption ( enum DrawingViewCaptionTypeConstants dvtype, VARIANT_BOOL Show );
__declspec(implementation_key(8288)) VARIANT_BOOL _IDrawingViewStyleAuto::GetShowSecondaryCaption ( enum DrawingViewCaptionTypeConstants dvtype );
__declspec(implementation_key(8289)) void _IDrawingViewStyleAuto::PutCaptionAnnotation ( enum DrawingViewAnnotationTypeConstants dvtype, _bstr_t caption );
__declspec(implementation_key(8290)) _bstr_t _IDrawingViewStyleAuto::GetCaptionAnnotation ( enum DrawingViewAnnotationTypeConstants dvtype );
__declspec(implementation_key(8291)) void _IDrawingViewStyleAuto::PutShowAnnotationCaption ( enum DrawingViewAnnotationTypeConstants dvtype, VARIANT_BOOL Show );
__declspec(implementation_key(8292)) VARIANT_BOOL _IDrawingViewStyleAuto::GetShowAnnotationCaption ( enum DrawingViewAnnotationTypeConstants dvtype );
__declspec(implementation_key(8293)) void _IDrawingViewStyleAuto::PutPrimaryCaptionFont ( _bstr_t FontName );
__declspec(implementation_key(8294)) _bstr_t _IDrawingViewStyleAuto::GetPrimaryCaptionFont ( );
__declspec(implementation_key(8295)) void _IDrawingViewStyleAuto::PutPrimaryCaptionFontStyle ( enum DimTextFontStyleConstants val );
__declspec(implementation_key(8296)) enum DimTextFontStyleConstants _IDrawingViewStyleAuto::GetPrimaryCaptionFontStyle ( );
__declspec(implementation_key(8297)) void _IDrawingViewStyleAuto::PutPrimaryCaptionColor ( long val );
__declspec(implementation_key(8298)) long _IDrawingViewStyleAuto::GetPrimaryCaptionColor ( );
__declspec(implementation_key(8299)) void _IDrawingViewStyleAuto::PutPrimaryCaptionTextSize ( double val );
__declspec(implementation_key(8300)) double _IDrawingViewStyleAuto::GetPrimaryCaptionTextSize ( );
__declspec(implementation_key(8301)) void _IDrawingViewStyleAuto::PutPrimaryCaptionTextAutoFillBackground ( VARIANT_BOOL val );
__declspec(implementation_key(8302)) VARIANT_BOOL _IDrawingViewStyleAuto::GetPrimaryCaptionTextAutoFillBackground ( );
__declspec(implementation_key(8303)) void _IDrawingViewStyleAuto::PutPrimaryCaptionTextAlignment ( enum DrawingViewCaptionTextAlignment val );
__declspec(implementation_key(8304)) enum DrawingViewCaptionTextAlignment _IDrawingViewStyleAuto::GetPrimaryCaptionTextAlignment ( );
__declspec(implementation_key(8305)) void _IDrawingViewStyleAuto::PutSecondaryCaptionFont ( _bstr_t FontName );
__declspec(implementation_key(8306)) _bstr_t _IDrawingViewStyleAuto::GetSecondaryCaptionFont ( );
__declspec(implementation_key(8307)) void _IDrawingViewStyleAuto::PutSecondaryCaptionFontStyle ( enum DimTextFontStyleConstants val );
__declspec(implementation_key(8308)) enum DimTextFontStyleConstants _IDrawingViewStyleAuto::GetSecondaryCaptionFontStyle ( );
__declspec(implementation_key(8309)) void _IDrawingViewStyleAuto::PutSecondaryCaptionColor ( long val );
__declspec(implementation_key(8310)) long _IDrawingViewStyleAuto::GetSecondaryCaptionColor ( );
__declspec(implementation_key(8311)) void _IDrawingViewStyleAuto::PutSecondaryCaptionTextSize ( double val );
__declspec(implementation_key(8312)) double _IDrawingViewStyleAuto::GetSecondaryCaptionTextSize ( );
__declspec(implementation_key(8313)) void _IDrawingViewStyleAuto::PutSecondaryCaptionTextAutoFillBackground ( VARIANT_BOOL val );
__declspec(implementation_key(8314)) VARIANT_BOOL _IDrawingViewStyleAuto::GetSecondaryCaptionTextAutoFillBackground ( );
__declspec(implementation_key(8315)) void _IDrawingViewStyleAuto::PutSecondaryCaptionTextAlignment ( enum DrawingViewCaptionTextAlignment val );
__declspec(implementation_key(8316)) enum DrawingViewCaptionTextAlignment _IDrawingViewStyleAuto::GetSecondaryCaptionTextAlignment ( );
__declspec(implementation_key(8317)) void _IDrawingViewStyleAuto::PutShowPrimarySecondayCaptionSeparator ( VARIANT_BOOL val );
__declspec(implementation_key(8318)) VARIANT_BOOL _IDrawingViewStyleAuto::GetShowPrimarySecondayCaptionSeparator ( );
__declspec(implementation_key(8319)) void _IDrawingViewStyleAuto::PutViewCaptionLocation ( enum DimViewCaptionLocationConstants val );
__declspec(implementation_key(8320)) enum DimViewCaptionLocationConstants _IDrawingViewStyleAuto::GetViewCaptionLocation ( );
__declspec(implementation_key(8321)) void _IDrawingViewStyleAuto::PutCPLCaptionLocation ( enum DimViewCPLCaptionLocationConstants val );
__declspec(implementation_key(8322)) enum DimViewCPLCaptionLocationConstants _IDrawingViewStyleAuto::GetCPLCaptionLocation ( );
__declspec(implementation_key(8323)) void _IDrawingViewStyleAuto::PutVPLCaptionAtEnd ( VARIANT_BOOL val );
__declspec(implementation_key(8324)) VARIANT_BOOL _IDrawingViewStyleAuto::GetVPLCaptionAtEnd ( );
__declspec(implementation_key(8325)) void _IDrawingViewStyleAuto::PutViewSheetNumberLocation ( enum DrawingViewStyleSheetNumberLocationConstants val );
__declspec(implementation_key(8326)) enum DrawingViewStyleSheetNumberLocationConstants _IDrawingViewStyleAuto::GetViewSheetNumberLocation ( );
__declspec(implementation_key(8327)) void _IDrawingViewStyleAuto::PutViewBorderLineType ( _bstr_t val );
__declspec(implementation_key(8328)) _bstr_t _IDrawingViewStyleAuto::GetViewBorderLineType ( );
__declspec(implementation_key(8329)) void _IDrawingViewStyleAuto::PutViewBorderLineWidth ( double val );
__declspec(implementation_key(8330)) double _IDrawingViewStyleAuto::GetViewBorderLineWidth ( );
__declspec(implementation_key(8331)) void _IDrawingViewStyleAuto::PutViewAnnotationLineType ( _bstr_t val );
__declspec(implementation_key(8332)) _bstr_t _IDrawingViewStyleAuto::GetViewAnnotationLineType ( );
__declspec(implementation_key(8333)) void _IDrawingViewStyleAuto::PutViewAnnotationLineWidth ( double val );
__declspec(implementation_key(8334)) double _IDrawingViewStyleAuto::GetViewAnnotationLineWidth ( );
__declspec(implementation_key(8335)) void _IDrawingViewStyleAuto::PutTerminatorDisplay ( enum DimTermDisplayTypeConstants val );
__declspec(implementation_key(8336)) enum DimTermDisplayTypeConstants _IDrawingViewStyleAuto::GetTerminatorDisplay ( );
__declspec(implementation_key(8337)) void _IDrawingViewStyleAuto::PutTerminatorType ( enum DimTermTypeConstants val );
__declspec(implementation_key(8338)) enum DimTermTypeConstants _IDrawingViewStyleAuto::GetTerminatorType ( );
__declspec(implementation_key(8339)) void _IDrawingViewStyleAuto::PutTerminatorSize ( double val );
__declspec(implementation_key(8340)) double _IDrawingViewStyleAuto::GetTerminatorSize ( );
__declspec(implementation_key(8341)) void _IDrawingViewStyleAuto::PutThinTerminatorLines ( VARIANT_BOOL val );
__declspec(implementation_key(8342)) VARIANT_BOOL _IDrawingViewStyleAuto::GetThinTerminatorLines ( );
__declspec(implementation_key(8343)) void _IDrawingViewStyleAuto::PutCuttingPlaneLineDisplay ( enum DimViewCuttingPlaneDisplayTypeConstants val );
__declspec(implementation_key(8344)) enum DimViewCuttingPlaneDisplayTypeConstants _IDrawingViewStyleAuto::GetCuttingPlaneLineDisplay ( );
__declspec(implementation_key(8345)) void _IDrawingViewStyleAuto::PutCuttingPlaneLineDisplayStyle ( enum CuttingPlaneLineDisplayStyleConstants val );
__declspec(implementation_key(8346)) enum CuttingPlaneLineDisplayStyleConstants _IDrawingViewStyleAuto::GetCuttingPlaneLineDisplayStyle ( );
__declspec(implementation_key(8347)) void _IDrawingViewStyleAuto::PutThickLineLengthRatio ( double val );
__declspec(implementation_key(8348)) double _IDrawingViewStyleAuto::GetThickLineLengthRatio ( );
__declspec(implementation_key(8349)) void _IDrawingViewStyleAuto::PutCuttingPlaneLineArrowOffset ( double val );
__declspec(implementation_key(8350)) double _IDrawingViewStyleAuto::GetCuttingPlaneLineArrowOffset ( );
__declspec(implementation_key(8351)) void _IDrawingViewStyleAuto::PutViewPlaneLineDisplay ( enum DimViewPlaneDisplayTypeConstants val );
__declspec(implementation_key(8352)) enum DimViewPlaneDisplayTypeConstants _IDrawingViewStyleAuto::GetViewPlaneLineDisplay ( );
__declspec(implementation_key(8353)) void _IDrawingViewStyleAuto::PutParent ( _bstr_t Parent );
__declspec(implementation_key(8354)) _bstr_t _IDrawingViewStyleAuto::GetParent ( );
__declspec(implementation_key(8355)) IDispatchPtr _IDrawingViewStyleAuto::GetAttributeSets ( );
__declspec(implementation_key(8356)) VARIANT_BOOL _IDrawingViewStyleAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(8357)) _bstr_t DrawingViewStyles::GetActive ( );
__declspec(implementation_key(8358)) void DrawingViewStyles::PutActive ( _bstr_t _arg1 );
__declspec(implementation_key(8359)) DrawingViewStylePtr DrawingViewStyles::Add ( _bstr_t Name, _bstr_t Parent );
__declspec(implementation_key(8360)) TGFramework::ApplicationPtr DrawingViewStyles::GetApplication ( );
__declspec(implementation_key(8361)) long DrawingViewStyles::GetCount ( );
__declspec(implementation_key(8362)) IDispatchPtr DrawingViewStyles::GetParent ( );
__declspec(implementation_key(8363)) DrawingViewStylePtr DrawingViewStyles::Item ( const _variant_t & Index );
__declspec(implementation_key(8364)) HRESULT DrawingViewStyles::Remove ( _bstr_t Name );
__declspec(implementation_key(8365)) _bstr_t _IDrawingViewStylesAuto::GetActive ( );
__declspec(implementation_key(8366)) void _IDrawingViewStylesAuto::PutActive ( _bstr_t Name );
__declspec(implementation_key(8367)) DrawingViewStylePtr _IDrawingViewStylesAuto::Add ( _bstr_t Name, _bstr_t Parent );
__declspec(implementation_key(8368)) TGFramework::ApplicationPtr _IDrawingViewStylesAuto::GetApplication ( );
__declspec(implementation_key(8369)) long _IDrawingViewStylesAuto::GetCount ( );
__declspec(implementation_key(8370)) IDispatchPtr _IDrawingViewStylesAuto::GetParent ( );
__declspec(implementation_key(8371)) DrawingViewStylePtr _IDrawingViewStylesAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(8372)) HRESULT _IDrawingViewStylesAuto::Remove ( _bstr_t Name );
__declspec(implementation_key(8373)) IUnknownPtr _IDrawingViewStylesAuto::Get_NewEnum ( );
__declspec(implementation_key(8374)) TGFramework::ApplicationPtr FeatureControlFrameDataSets::GetApplication ( );
__declspec(implementation_key(8375)) long FeatureControlFrameDataSets::GetCount ( );
__declspec(implementation_key(8376)) IDispatchPtr FeatureControlFrameDataSets::GetParent ( );
__declspec(implementation_key(8377)) FeatureControlFrameDataSetPtr FeatureControlFrameDataSets::Item ( const _variant_t & Index );
__declspec(implementation_key(8378)) FeatureControlFrameDataSetPtr FeatureControlFrameDataSets::Add ( _bstr_t Name );
__declspec(implementation_key(8379)) HRESULT FeatureControlFrameDataSets::Remove ( _bstr_t Name );
__declspec(implementation_key(8380)) TGFramework::ApplicationPtr WeldSymbolDataSets::GetApplication ( );
__declspec(implementation_key(8381)) long WeldSymbolDataSets::GetCount ( );
__declspec(implementation_key(8382)) IDispatchPtr WeldSymbolDataSets::GetParent ( );
__declspec(implementation_key(8383)) WeldSymbolDataSetPtr WeldSymbolDataSets::Item ( const _variant_t & Index );
__declspec(implementation_key(8384)) WeldSymbolDataSetPtr WeldSymbolDataSets::Add ( _bstr_t Name );
__declspec(implementation_key(8385)) HRESULT WeldSymbolDataSets::Remove ( _bstr_t Name );
__declspec(implementation_key(8386)) TGFramework::ApplicationPtr SurfaceFinishSymbolDataSets::GetApplication ( );
__declspec(implementation_key(8387)) long SurfaceFinishSymbolDataSets::GetCount ( );
__declspec(implementation_key(8388)) IDispatchPtr SurfaceFinishSymbolDataSets::GetParent ( );
__declspec(implementation_key(8389)) SurfaceFinishSymbolDataSetPtr SurfaceFinishSymbolDataSets::Item ( const _variant_t & Index );
__declspec(implementation_key(8390)) SurfaceFinishSymbolDataSetPtr SurfaceFinishSymbolDataSets::Add ( _bstr_t Name );
__declspec(implementation_key(8391)) HRESULT SurfaceFinishSymbolDataSets::Remove ( _bstr_t Name );
__declspec(implementation_key(8392)) TGFramework::ApplicationPtr SmartFrames2d::GetApplication ( );
__declspec(implementation_key(8393)) long SmartFrames2d::GetCount ( );
__declspec(implementation_key(8394)) IDispatchPtr SmartFrames2d::GetParent ( );
__declspec(implementation_key(8395)) SmartFrame2dPtr SmartFrames2d::Item ( const _variant_t & Index );
__declspec(implementation_key(8396)) SmartFrame2dPtr SmartFrames2d::AddBy2Points ( _bstr_t StyleName, double x1, double y1, double x2, double y2 );
__declspec(implementation_key(8397)) SmartFrame2dPtr SmartFrames2d::AddByOrigin ( _bstr_t StyleName, double x1, double y1, double top, double bottom, double left, double right );
__declspec(implementation_key(8398)) SmartFrame2dStylePtr SmartFrame2dStyles::Item ( const _variant_t & Index );
__declspec(implementation_key(8399)) TGFramework::ApplicationPtr SmartFrame2dStyles::GetApplication ( );
__declspec(implementation_key(8400)) IDispatchPtr SmartFrame2dStyles::GetParent ( );
__declspec(implementation_key(8401)) long SmartFrame2dStyles::GetCount ( );
__declspec(implementation_key(8402)) long SmartFrame2dStyles::GetType ( );
__declspec(implementation_key(8403)) SmartFrame2dStylePtr SmartFrame2dStyles::Add ( _bstr_t Name, _bstr_t Parent );
__declspec(implementation_key(8404)) TGFramework::ApplicationPtr VFSet::GetApplication ( );
__declspec(implementation_key(8405)) IDispatchPtr VFSet::GetParent ( );
__declspec(implementation_key(8406)) HRESULT VFSet::SetCriteria ( _bstr_t Name, long Scope, long Color, double Width, _bstr_t LINESTYLE, VARIANT_BOOL DISPLAY, VARIANT_BOOL Locate, long flagsToSet );
__declspec(implementation_key(8407)) HRESULT VFSet::GetCriteria ( _bstr_t Name, long Scope, long * Color, double * Width, BSTR * LINESTYLE, VARIANT_BOOL * DISPLAY, VARIANT_BOOL * Locate, long flagsToSet );
__declspec(implementation_key(8408)) HRESULT VFSet::ResetAll ( long Scope );
__declspec(implementation_key(8409)) HRESULT VFSet::SetAll ( long Scope, long Color, double Width, _bstr_t LINESTYLE, VARIANT_BOOL DISPLAY, VARIANT_BOOL Locate, long flagsToSet );
__declspec(implementation_key(8410)) HRESULT VFSet::CheckForDefault ( VARIANT_BOOL * bSetting );
__declspec(implementation_key(8411)) TGFramework::ApplicationPtr AnnotAlignmentShape::GetApplication ( );
__declspec(implementation_key(8412)) long AnnotAlignmentShape::GetIndex ( );
__declspec(implementation_key(8413)) _bstr_t AnnotAlignmentShape::GetName ( const _variant_t & Recurse );
__declspec(implementation_key(8414)) IDispatchPtr AnnotAlignmentShape::GetParent ( );
__declspec(implementation_key(8415)) long AnnotAlignmentShape::GetType ( );
__declspec(implementation_key(8416)) long AnnotAlignmentShape::GetZOrder ( );
__declspec(implementation_key(8417)) _bstr_t AnnotAlignmentShape::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(8418)) IDispatchPtr AnnotAlignmentShape::GetDocument ( );
__declspec(implementation_key(8419)) HRESULT AnnotAlignmentShape::Copy ( );
__declspec(implementation_key(8420)) HRESULT AnnotAlignmentShape::Cut ( );
__declspec(implementation_key(8421)) HRESULT AnnotAlignmentShape::Delete ( );
__declspec(implementation_key(8422)) HRESULT AnnotAlignmentShape::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(8423)) HRESULT AnnotAlignmentShape::BringToFront ( );
__declspec(implementation_key(8424)) HRESULT AnnotAlignmentShape::BringForward ( );
__declspec(implementation_key(8425)) HRESULT AnnotAlignmentShape::SendToBack ( );
__declspec(implementation_key(8426)) HRESULT AnnotAlignmentShape::SendBackward ( );
__declspec(implementation_key(8427)) HRESULT AnnotAlignmentShape::Select ( );
__declspec(implementation_key(8428)) long AnnotAlignmentShape::GetClosedAlignmentShape ( );
__declspec(implementation_key(8429)) long AnnotAlignmentShape::GetUniformSpacing ( );
__declspec(implementation_key(8430)) void AnnotAlignmentShape::PutUniformSpacing ( long _arg1 );
__declspec(implementation_key(8431)) long AnnotAlignmentShape::GetMinimumSpacing ( );
__declspec(implementation_key(8432)) void AnnotAlignmentShape::PutMinimumSpacing ( long _arg1 );
__declspec(implementation_key(8433)) double AnnotAlignmentShape::GetMinimumSpacingValue ( );
__declspec(implementation_key(8434)) void AnnotAlignmentShape::PutMinimumSpacingValue ( double _arg1 );
__declspec(implementation_key(8435)) HRESULT AnnotAlignmentShape::GetGeometry ( SAFEARRAY * * ppPointsX, SAFEARRAY * * ppPointsY );
__declspec(implementation_key(8436)) int AnnotAlignmentShape::GetVertexCount ( );
__declspec(implementation_key(8437)) HRESULT AnnotAlignmentShape::InsertVertex ( double PointsX, double PointsY );
__declspec(implementation_key(8438)) HRESULT AnnotAlignmentShape::RemoveVertex ( int nIndex );
__declspec(implementation_key(8439)) HRESULT AnnotAlignmentShape::ModifyVertex ( int nIndex, double dNexX, double dNewY );
__declspec(implementation_key(8440)) IDispatchPtr AnnotAlignmentShape::GetDrawingView ( );
__declspec(implementation_key(8441)) void AnnotAlignmentShape::PutDrawingView ( IDispatch * _arg1 );
__declspec(implementation_key(8442)) enum DimItemNumDirConstants AnnotAlignmentShape::GetItemNumberDirection ( );
__declspec(implementation_key(8443)) void AnnotAlignmentShape::PutItemNumberDirection ( enum DimItemNumDirConstants _arg1 );
__declspec(implementation_key(8444)) IDispatchPtr AnnotAlignmentShape::GetFirstBalloon ( );
__declspec(implementation_key(8445)) void AnnotAlignmentShape::PutFirstBalloon ( IDispatch * _arg1 );
__declspec(implementation_key(8446)) TGFramework::ApplicationPtr _IAnnotAlignmentShapeAuto::GetApplication ( );
__declspec(implementation_key(8447)) long _IAnnotAlignmentShapeAuto::GetIndex ( );
__declspec(implementation_key(8448)) _bstr_t _IAnnotAlignmentShapeAuto::GetName ( const _variant_t & Recurse, long Lcid );
__declspec(implementation_key(8449)) IDispatchPtr _IAnnotAlignmentShapeAuto::GetParent ( );
__declspec(implementation_key(8450)) long _IAnnotAlignmentShapeAuto::GetType ( );
__declspec(implementation_key(8451)) long _IAnnotAlignmentShapeAuto::GetZOrder ( );
__declspec(implementation_key(8452)) _bstr_t _IAnnotAlignmentShapeAuto::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(8453)) IDispatchPtr _IAnnotAlignmentShapeAuto::GetDocument ( );
__declspec(implementation_key(8454)) HRESULT _IAnnotAlignmentShapeAuto::Copy ( );
__declspec(implementation_key(8455)) HRESULT _IAnnotAlignmentShapeAuto::Cut ( );
__declspec(implementation_key(8456)) HRESULT _IAnnotAlignmentShapeAuto::Delete ( );
__declspec(implementation_key(8457)) HRESULT _IAnnotAlignmentShapeAuto::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(8458)) HRESULT _IAnnotAlignmentShapeAuto::BringToFront ( );
__declspec(implementation_key(8459)) HRESULT _IAnnotAlignmentShapeAuto::BringForward ( );
__declspec(implementation_key(8460)) HRESULT _IAnnotAlignmentShapeAuto::SendToBack ( );
__declspec(implementation_key(8461)) HRESULT _IAnnotAlignmentShapeAuto::SendBackward ( );
__declspec(implementation_key(8462)) HRESULT _IAnnotAlignmentShapeAuto::Select ( );
__declspec(implementation_key(8463)) long _IAnnotAlignmentShapeAuto::GetClosedAlignmentShape ( );
__declspec(implementation_key(8464)) long _IAnnotAlignmentShapeAuto::GetUniformSpacing ( );
__declspec(implementation_key(8465)) void _IAnnotAlignmentShapeAuto::PutUniformSpacing ( long bIsUniformSpacing );
__declspec(implementation_key(8466)) long _IAnnotAlignmentShapeAuto::GetMinimumSpacing ( );
__declspec(implementation_key(8467)) void _IAnnotAlignmentShapeAuto::PutMinimumSpacing ( long pbIsMiniumSpacing );
__declspec(implementation_key(8468)) double _IAnnotAlignmentShapeAuto::GetMinimumSpacingValue ( );
__declspec(implementation_key(8469)) void _IAnnotAlignmentShapeAuto::PutMinimumSpacingValue ( double pdMiniumSpacing );
__declspec(implementation_key(8470)) HRESULT _IAnnotAlignmentShapeAuto::GetGeometry ( SAFEARRAY * * ppPointsX, SAFEARRAY * * ppPointsY );
__declspec(implementation_key(8471)) int _IAnnotAlignmentShapeAuto::GetVertexCount ( );
__declspec(implementation_key(8472)) HRESULT _IAnnotAlignmentShapeAuto::InsertVertex ( double PointsX, double PointsY );
__declspec(implementation_key(8473)) HRESULT _IAnnotAlignmentShapeAuto::RemoveVertex ( int nIndex );
__declspec(implementation_key(8474)) HRESULT _IAnnotAlignmentShapeAuto::ModifyVertex ( int nIndex, double dNexX, double dNewY );
__declspec(implementation_key(8475)) IDispatchPtr _IAnnotAlignmentShapeAuto::GetDrawingView ( );
__declspec(implementation_key(8476)) void _IAnnotAlignmentShapeAuto::PutDrawingView ( IDispatch * ppDrawingView );
__declspec(implementation_key(8477)) enum DimItemNumDirConstants _IAnnotAlignmentShapeAuto::GetItemNumberDirection ( );
__declspec(implementation_key(8478)) void _IAnnotAlignmentShapeAuto::PutItemNumberDirection ( enum DimItemNumDirConstants pnItemNumberDirection );
__declspec(implementation_key(8479)) IDispatchPtr _IAnnotAlignmentShapeAuto::GetFirstBalloon ( );
__declspec(implementation_key(8480)) void _IAnnotAlignmentShapeAuto::PutFirstBalloon ( IDispatch * ppFirstBalloon );
__declspec(implementation_key(8481)) TGFramework::ApplicationPtr AnnotAlignmentShapes::GetApplication ( );
__declspec(implementation_key(8482)) long AnnotAlignmentShapes::GetCount ( );
__declspec(implementation_key(8483)) IDispatchPtr AnnotAlignmentShapes::GetParent ( );
__declspec(implementation_key(8484)) AnnotAlignmentShapePtr AnnotAlignmentShapes::Item ( const _variant_t & Index );
__declspec(implementation_key(8485)) AnnotAlignmentShapePtr AnnotAlignmentShapes::AddAnnotAlignmentShape ( SAFEARRAY * * ppPointsX, SAFEARRAY * * ppPointsY );
__declspec(implementation_key(8486)) TGFramework::ApplicationPtr _IAnnotAlignmentShapesAuto::GetApplication ( );
__declspec(implementation_key(8487)) long _IAnnotAlignmentShapesAuto::GetCount ( );
__declspec(implementation_key(8488)) IDispatchPtr _IAnnotAlignmentShapesAuto::GetParent ( );
__declspec(implementation_key(8489)) AnnotAlignmentShapePtr _IAnnotAlignmentShapesAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(8490)) IUnknownPtr _IAnnotAlignmentShapesAuto::Get_NewEnum ( );
__declspec(implementation_key(8491)) AnnotAlignmentShapePtr _IAnnotAlignmentShapesAuto::AddAnnotAlignmentShape ( SAFEARRAY * * ppPointsX, SAFEARRAY * * ppPointsY );
__declspec(implementation_key(8492)) TGFramework::ApplicationPtr TechnicalRequirement::GetApplication ( );
__declspec(implementation_key(8493)) long TechnicalRequirement::GetIndex ( );
__declspec(implementation_key(8494)) IDispatchPtr TechnicalRequirement::GetParent ( );
__declspec(implementation_key(8495)) HRESULT TechnicalRequirement::Delete ( );
__declspec(implementation_key(8496)) HRESULT TechnicalRequirement::GetOrigin ( double * x, double * y, double * z );
__declspec(implementation_key(8497)) HRESULT TechnicalRequirement::SetOrigin ( double x, double y, double z );
__declspec(implementation_key(8498)) _variant_t TechnicalRequirement::GetDisplayedDetails ( );
__declspec(implementation_key(8499)) _bstr_t TechnicalRequirement::GetDisplayedTitle ( );
__declspec(implementation_key(8500)) enum TextNumberFormatConstants TechnicalRequirement::GetNumberingFormat ( );
__declspec(implementation_key(8501)) void TechnicalRequirement::PutNumberingFormat ( enum TextNumberFormatConstants _arg1 );
__declspec(implementation_key(8502)) enum TextNumberTypeConstants TechnicalRequirement::GetNumberType ( );
__declspec(implementation_key(8503)) void TechnicalRequirement::PutNumberType ( enum TextNumberTypeConstants _arg1 );
__declspec(implementation_key(8504)) HRESULT TechnicalRequirement::GetReferencedObjectInfo ( SAFEARRAY * * ReferencedObjects, SAFEARRAY * * ReferencedObjectTypes );
__declspec(implementation_key(8505)) TGFramework::ApplicationPtr _ITechnicalRequirementAuto::GetApplication ( );
__declspec(implementation_key(8506)) long _ITechnicalRequirementAuto::GetIndex ( );
__declspec(implementation_key(8507)) IDispatchPtr _ITechnicalRequirementAuto::GetParent ( );
__declspec(implementation_key(8508)) HRESULT _ITechnicalRequirementAuto::Delete ( );
__declspec(implementation_key(8509)) HRESULT _ITechnicalRequirementAuto::GetOrigin ( double * x, double * y, double * z );
__declspec(implementation_key(8510)) HRESULT _ITechnicalRequirementAuto::SetOrigin ( double x, double y, double z );
__declspec(implementation_key(8511)) _variant_t _ITechnicalRequirementAuto::GetDisplayedDetails ( );
__declspec(implementation_key(8512)) _bstr_t _ITechnicalRequirementAuto::GetDisplayedTitle ( );
__declspec(implementation_key(8513)) enum TextNumberFormatConstants _ITechnicalRequirementAuto::GetNumberingFormat ( );
__declspec(implementation_key(8514)) void _ITechnicalRequirementAuto::PutNumberingFormat ( enum TextNumberFormatConstants numberFormat );
__declspec(implementation_key(8515)) enum TextNumberTypeConstants _ITechnicalRequirementAuto::GetNumberType ( );
__declspec(implementation_key(8516)) void _ITechnicalRequirementAuto::PutNumberType ( enum TextNumberTypeConstants NumberType );
__declspec(implementation_key(8517)) HRESULT _ITechnicalRequirementAuto::GetReferencedObjectInfo ( SAFEARRAY * * ReferencedObjects, SAFEARRAY * * ReferencedObjectTypes );
__declspec(implementation_key(8518)) IDispatchPtr TechnicalRequirements::GetApplication ( );
__declspec(implementation_key(8519)) long TechnicalRequirements::GetCount ( );
__declspec(implementation_key(8520)) IDispatchPtr TechnicalRequirements::GetParent ( );
__declspec(implementation_key(8521)) TechnicalRequirementPtr TechnicalRequirements::Item ( const _variant_t & Index );
__declspec(implementation_key(8522)) TechnicalRequirementPtr TechnicalRequirements::Add ( double x1, double y1, double z1, const _variant_t & techDetails, enum TextNumberTypeConstants NumberType, enum TextNumberFormatConstants numberFormat, _bstr_t title );
__declspec(implementation_key(8523)) IDispatchPtr _ITechnicalRequirementsAuto::GetApplication ( );
__declspec(implementation_key(8524)) long _ITechnicalRequirementsAuto::GetCount ( );
__declspec(implementation_key(8525)) IDispatchPtr _ITechnicalRequirementsAuto::GetParent ( );
__declspec(implementation_key(8526)) TechnicalRequirementPtr _ITechnicalRequirementsAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(8527)) IUnknownPtr _ITechnicalRequirementsAuto::Get_NewEnum ( );
__declspec(implementation_key(8528)) TechnicalRequirementPtr _ITechnicalRequirementsAuto::Add ( double x1, double y1, double z1, const _variant_t & techDetails, enum TextNumberTypeConstants NumberType, enum TextNumberFormatConstants numberFormat, _bstr_t title );
__declspec(implementation_key(8529)) TGFramework::ApplicationPtr PMIModelViews::GetApplication ( );
__declspec(implementation_key(8530)) long PMIModelViews::GetCount ( );
__declspec(implementation_key(8531)) IDispatchPtr PMIModelViews::GetParent ( );
__declspec(implementation_key(8532)) PMIModelViewPtr PMIModelViews::Item ( const _variant_t & Index );
__declspec(implementation_key(8533)) PMIModelViewPtr PMIModelViews::Add ( _bstr_t Text, enum PMIRenderModeConstants RenderMode );
__declspec(implementation_key(8534)) PMIModelViewPtr PMIModelViews::AddByStandardViewOrientation ( enum PMIModelViewStandardOrientationConstants ViewOrientation, enum PMIRenderModeConstants RenderMode, long bReplaceExistingModelView );
__declspec(implementation_key(8535)) _bstr_t PMIModelView::GetName ( );
__declspec(implementation_key(8536)) void PMIModelView::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(8537)) enum PMIRenderModeConstants PMIModelView::GetRenderMode ( );
__declspec(implementation_key(8538)) void PMIModelView::PutRenderMode ( enum PMIRenderModeConstants _arg1 );
__declspec(implementation_key(8539)) enum TGFramework::PMISectionDisplayModeConstants PMIModelView::GetSectionDisplayMode ( );
__declspec(implementation_key(8540)) void PMIModelView::PutSectionDisplayMode ( enum TGFramework::PMISectionDisplayModeConstants _arg1 );
__declspec(implementation_key(8541)) long PMIModelView::GetShowCuttingPlane ( );
__declspec(implementation_key(8542)) void PMIModelView::PutShowCuttingPlane ( long _arg1 );
__declspec(implementation_key(8543)) DimensionPtr PMIModelView::GetDimensionItem ( const _variant_t & Index );
__declspec(implementation_key(8544)) IDispatchPtr PMIModelView::GetAnnotationItem ( const _variant_t & Index );
__declspec(implementation_key(8545)) TGFramework::SectionViewPtr PMIModelView::GetSectionItem ( const _variant_t & Index );
__declspec(implementation_key(8546)) long PMIModelView::GetDimensionCount ( );
__declspec(implementation_key(8547)) long PMIModelView::GetAnnotationCount ( );
__declspec(implementation_key(8548)) long PMIModelView::GetSectionCount ( );
__declspec(implementation_key(8549)) HRESULT PMIModelView::SetShowHidePMISections ( long bShowPMISections );
__declspec(implementation_key(8550)) HRESULT PMIModelView::SetShowHideDimensions ( long bShowDimensions );
__declspec(implementation_key(8551)) HRESULT PMIModelView::SetShowHideAnnotations ( long bShowAnnotations );
__declspec(implementation_key(8552)) HRESULT PMIModelView::AddDimAnnotOrSectionToView ( IUnknown * DimAnnotOrSection );
__declspec(implementation_key(8553)) HRESULT PMIModelView::RemoveDimAnnotOrSectionFromView ( IUnknown * DimAnnotOrSection );
__declspec(implementation_key(8554)) HRESULT PMIModelView::Delete ( );
__declspec(implementation_key(8555)) HRESULT PMIModelView::Apply ( );
__declspec(implementation_key(8556)) HRESULT PMIModelView::SetViewOrientationToCurrentView ( );
__declspec(implementation_key(8557)) enum TGFramework::ObjectType PMIModelView::AnnotationItemType ( const _variant_t & Index );
__declspec(implementation_key(8558)) HRESULT PMIModelView::SetShowHideComponentsToCurrentView ( IUnknown * ComponentUnknown, long bShow );
__declspec(implementation_key(8559)) HRESULT PMIModelView::Update ( );
__declspec(implementation_key(8560)) VARIANT_BOOL PMIModelView::GetIncludeIn3dPdfPublish ( );
__declspec(implementation_key(8561)) void PMIModelView::PutIncludeIn3dPdfPublish ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8562)) _bstr_t _IPMIModelViewAuto::GetName ( );
__declspec(implementation_key(8563)) void _IPMIModelViewAuto::PutName ( _bstr_t Name );
__declspec(implementation_key(8564)) enum PMIRenderModeConstants _IPMIModelViewAuto::GetRenderMode ( );
__declspec(implementation_key(8565)) void _IPMIModelViewAuto::PutRenderMode ( enum PMIRenderModeConstants RenderMode );
__declspec(implementation_key(8566)) enum TGFramework::PMISectionDisplayModeConstants _IPMIModelViewAuto::GetSectionDisplayMode ( );
__declspec(implementation_key(8567)) void _IPMIModelViewAuto::PutSectionDisplayMode ( enum TGFramework::PMISectionDisplayModeConstants SectionDisplayMode );
__declspec(implementation_key(8568)) long _IPMIModelViewAuto::GetShowCuttingPlane ( );
__declspec(implementation_key(8569)) void _IPMIModelViewAuto::PutShowCuttingPlane ( long pbShowCuttingPlane );
__declspec(implementation_key(8570)) DimensionPtr _IPMIModelViewAuto::GetDimensionItem ( const _variant_t & Index );
__declspec(implementation_key(8571)) IDispatchPtr _IPMIModelViewAuto::GetAnnotationItem ( const _variant_t & Index );
__declspec(implementation_key(8572)) TGFramework::SectionViewPtr _IPMIModelViewAuto::GetSectionItem ( const _variant_t & Index );
__declspec(implementation_key(8573)) long _IPMIModelViewAuto::GetDimensionCount ( );
__declspec(implementation_key(8574)) long _IPMIModelViewAuto::GetAnnotationCount ( );
__declspec(implementation_key(8575)) long _IPMIModelViewAuto::GetSectionCount ( );
__declspec(implementation_key(8576)) HRESULT _IPMIModelViewAuto::SetShowHidePMISections ( long bShowPMISections );
__declspec(implementation_key(8577)) HRESULT _IPMIModelViewAuto::SetShowHideDimensions ( long bShowDimensions );
__declspec(implementation_key(8578)) HRESULT _IPMIModelViewAuto::SetShowHideAnnotations ( long bShowAnnotations );
__declspec(implementation_key(8579)) HRESULT _IPMIModelViewAuto::AddDimAnnotOrSectionToView ( IUnknown * DimAnnotOrSection );
__declspec(implementation_key(8580)) HRESULT _IPMIModelViewAuto::RemoveDimAnnotOrSectionFromView ( IUnknown * DimAnnotOrSection );
__declspec(implementation_key(8581)) HRESULT _IPMIModelViewAuto::Delete ( );
__declspec(implementation_key(8582)) HRESULT _IPMIModelViewAuto::Apply ( );
__declspec(implementation_key(8583)) HRESULT _IPMIModelViewAuto::SetViewOrientationToCurrentView ( );
__declspec(implementation_key(8584)) enum TGFramework::ObjectType _IPMIModelViewAuto::AnnotationItemType ( const _variant_t & Index );
__declspec(implementation_key(8585)) HRESULT _IPMIModelViewAuto::SetShowHideComponentsToCurrentView ( IUnknown * ComponentUnknown, long bShow );
__declspec(implementation_key(8586)) HRESULT _IPMIModelViewAuto::Update ( );
__declspec(implementation_key(8587)) VARIANT_BOOL _IPMIModelViewAuto::GetIncludeIn3dPdfPublish ( );
__declspec(implementation_key(8588)) void _IPMIModelViewAuto::PutIncludeIn3dPdfPublish ( VARIANT_BOOL IncludeInPublish );
__declspec(implementation_key(8589)) TGFramework::ApplicationPtr _IPMIModelViewsAuto::GetApplication ( );
__declspec(implementation_key(8590)) long _IPMIModelViewsAuto::GetCount ( );
__declspec(implementation_key(8591)) IDispatchPtr _IPMIModelViewsAuto::GetParent ( );
__declspec(implementation_key(8592)) PMIModelViewPtr _IPMIModelViewsAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(8593)) PMIModelViewPtr _IPMIModelViewsAuto::Add ( _bstr_t Text, enum PMIRenderModeConstants RenderMode );
__declspec(implementation_key(8594)) PMIModelViewPtr _IPMIModelViewsAuto::AddByStandardViewOrientation ( enum PMIModelViewStandardOrientationConstants ViewOrientation, enum PMIRenderModeConstants RenderMode, long bReplaceExistingModelView );
__declspec(implementation_key(8595)) TGFramework::ApplicationPtr RectangularPatterns2d::GetApplication ( );
__declspec(implementation_key(8596)) IDispatchPtr RectangularPatterns2d::GetParent ( );
__declspec(implementation_key(8597)) long RectangularPatterns2d::GetCount ( );
__declspec(implementation_key(8598)) RectangularPattern2dPtr RectangularPatterns2d::Item ( const _variant_t & Index );
__declspec(implementation_key(8599)) RectangularPattern2dPtr RectangularPatterns2d::Add ( double OriginX, double OriginY, double Width, double Height, double Angle, enum PatternOffsetTypeConstants OffsetType, long XCount, long YCount, double XSpace, double YSpace, const _variant_t & StaggerType, const _variant_t & StaggerOffset, const _variant_t & StaggerOffsetHalf, const _variant_t & StaggerIncludeLast );
__declspec(implementation_key(8600)) RectangularPattern2dPtr RectangularPatterns2d::AddEx ( SAFEARRAY * * GeomArray, long NumOfElements, double OriginX, double OriginY, double Width, double Height, double Angle, enum PatternOffsetTypeConstants OffsetType, long XCount, long YCount, double XSpace, double YSpace, const _variant_t & StaggerType, const _variant_t & StaggerOffset, const _variant_t & StaggerOffsetHalf, const _variant_t & StaggerIncludeLast );
__declspec(implementation_key(8601)) TGFramework::ApplicationPtr CircularPatterns2d::GetApplication ( );
__declspec(implementation_key(8602)) IDispatchPtr CircularPatterns2d::GetParent ( );
__declspec(implementation_key(8603)) long CircularPatterns2d::GetCount ( );
__declspec(implementation_key(8604)) CircularPattern2dPtr CircularPatterns2d::Item ( const _variant_t & Index );
__declspec(implementation_key(8605)) CircularPattern2dPtr CircularPatterns2d::AddByCircle ( double CenterX, double CenterY, double StartX, double StartY, enum Geom2dOrientationConstants Orientation, enum PatternOffsetTypeConstants OffsetType, long Count, double AngularSpacing );
__declspec(implementation_key(8606)) CircularPattern2dPtr CircularPatterns2d::AddByArc ( double CenterX, double CenterY, double StartX, double StartY, double SweepAngle, enum Geom2dOrientationConstants Orientation, enum PatternOffsetTypeConstants OffsetType, long Count, double AngularSpacing );
__declspec(implementation_key(8607)) CircularPattern2dPtr CircularPatterns2d::AddByCircleEx ( SAFEARRAY * * GeomArray, long NumOfElements, double CenterX, double CenterY, double StartX, double StartY, enum Geom2dOrientationConstants Orientation, enum PatternOffsetTypeConstants OffsetType, long Count, double AngularSpacing );
__declspec(implementation_key(8608)) CircularPattern2dPtr CircularPatterns2d::AddByArcEx ( SAFEARRAY * * GeomArray, long NumOfElements, double CenterX, double CenterY, double StartX, double StartY, double SweepAngle, enum Geom2dOrientationConstants Orientation, enum PatternOffsetTypeConstants OffsetType, long Count, double AngularSpacing );
__declspec(implementation_key(8609)) TGFramework::ApplicationPtr Images2d::GetApplication ( );
__declspec(implementation_key(8610)) IDispatchPtr Images2d::GetParent ( );
__declspec(implementation_key(8611)) long Images2d::GetCount ( );
__declspec(implementation_key(8612)) Image2dPtr Images2d::Item ( const _variant_t & Index );
__declspec(implementation_key(8613)) Image2dPtr Images2d::AddImage ( VARIANT_BOOL blink, _bstr_t ImageDocumentName );
__declspec(implementation_key(8614)) Image2dPtr Images2d::AddDecalImage ( VARIANT_BOOL Link, _bstr_t ImageDocumentName );
__declspec(implementation_key(8615)) TGFramework::ApplicationPtr ComponentImages2d::GetApplication ( );
__declspec(implementation_key(8616)) IDispatchPtr ComponentImages2d::GetParent ( );
__declspec(implementation_key(8617)) long ComponentImages2d::GetCount ( );
__declspec(implementation_key(8618)) ComponentImage2dPtr ComponentImages2d::Item ( const _variant_t & Index );
__declspec(implementation_key(8619)) ComponentImage2dPtr ComponentImages2d::AddComponentImage ( enum ComponentImageCreationModeConstants CreationMode, const _variant_t & NumElements, const _variant_t & Elements );
__declspec(implementation_key(8620)) AreaPropertiesPtr AreaPropertiesCollection::Item ( const _variant_t & Index );
__declspec(implementation_key(8621)) TGFramework::ApplicationPtr AreaPropertiesCollection::GetApplication ( );
__declspec(implementation_key(8622)) long AreaPropertiesCollection::GetCount ( );
__declspec(implementation_key(8623)) IDispatchPtr AreaPropertiesCollection::GetParent ( );
__declspec(implementation_key(8624)) AreaPropertiesPtr AreaPropertiesCollection::Add ( long ParentBoundariesCount, SAFEARRAY * * ParentBoundaries, double xFloodPoint, double yFloodPoint );
__declspec(implementation_key(8625)) TGFramework::ApplicationPtr PMI::GetApplication ( );
__declspec(implementation_key(8626)) IDispatchPtr PMI::GetDimensions ( );
__declspec(implementation_key(8627)) IDispatchPtr PMI::GetBalloons ( );
__declspec(implementation_key(8628)) IDispatchPtr PMI::GetCornerAnnotations ( );
__declspec(implementation_key(8629)) IDispatchPtr PMI::GetDatumFrames ( );
__declspec(implementation_key(8630)) IDispatchPtr PMI::GetDatumPoints ( );
__declspec(implementation_key(8631)) IDispatchPtr PMI::GetDatumTargets ( );
__declspec(implementation_key(8632)) IDispatchPtr PMI::GetPinSymbols ( );
__declspec(implementation_key(8633)) IDispatchPtr PMI::GetFeatureControlFrames ( );
__declspec(implementation_key(8634)) IDispatchPtr PMI::GetLeaders ( );
__declspec(implementation_key(8635)) IDispatchPtr PMI::GetSurfaceFinishSymbols ( );
__declspec(implementation_key(8636)) IDispatchPtr PMI::GetWeldSymbols ( );
__declspec(implementation_key(8637)) IDispatchPtr PMI::GetGostWeldSymbols ( );
__declspec(implementation_key(8638)) IDispatchPtr PMI::GetSymbolicPMIGroup ( );
__declspec(implementation_key(8639)) IDispatchPtr PMI::GetPMIModelViews ( );
__declspec(implementation_key(8640)) IDispatchPtr PMI::GetCenterMarks ( );
__declspec(implementation_key(8641)) IDispatchPtr PMI::GetCenterLines ( );
__declspec(implementation_key(8642)) IDispatchPtr PMI::GetBoltHoleCircles ( );
__declspec(implementation_key(8643)) void PMI::PutAxis ( IDispatch * _arg1 );
__declspec(implementation_key(8644)) IDispatchPtr PMI::GetAxis ( );
__declspec(implementation_key(8645)) HRESULT PMI::ClearAxis ( );
__declspec(implementation_key(8646)) void PMI::PutActivePlane ( IDispatch * _arg1 );
__declspec(implementation_key(8647)) IDispatchPtr PMI::GetActivePlane ( );
__declspec(implementation_key(8648)) HRESULT PMI::ClearActivePlane ( );
__declspec(implementation_key(8649)) void PMI::PutShowDimensions ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8650)) VARIANT_BOOL PMI::GetShowDimensions ( );
__declspec(implementation_key(8651)) void PMI::PutShowAnnotations ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8652)) VARIANT_BOOL PMI::GetShowAnnotations ( );
__declspec(implementation_key(8653)) void PMI::PutShow ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8654)) VARIANT_BOOL PMI::GetShow ( );
__declspec(implementation_key(8655)) void PMI::PutPMIPixelMode ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8656)) VARIANT_BOOL PMI::GetPMIPixelMode ( );
__declspec(implementation_key(8657)) void PMI::PutPMIPixelSize ( int _arg1 );
__declspec(implementation_key(8658)) int PMI::GetPMIPixelSize ( );
__declspec(implementation_key(8659)) IDispatchPtr PMI::GetTextBoxes ( );
__declspec(implementation_key(8660)) IDispatchPtr SymbolicPMI::GetAttributeSets ( );
__declspec(implementation_key(8661)) VARIANT_BOOL SymbolicPMI::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(8662)) TGFramework::ApplicationPtr SymbolicPMI::GetApplication ( );
__declspec(implementation_key(8663)) long SymbolicPMI::GetIndex ( );
__declspec(implementation_key(8664)) _bstr_t SymbolicPMI::GetName ( const _variant_t & Recurse );
__declspec(implementation_key(8665)) IDispatchPtr SymbolicPMI::GetParent ( );
__declspec(implementation_key(8666)) long SymbolicPMI::GetType ( );
__declspec(implementation_key(8667)) _bstr_t SymbolicPMI::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(8668)) IDispatchPtr SymbolicPMI::GetDocument ( );
__declspec(implementation_key(8669)) HRESULT SymbolicPMI::Delete ( );
__declspec(implementation_key(8670)) HRESULT SymbolicPMI::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(8671)) HRESULT SymbolicPMI::Select ( );
__declspec(implementation_key(8672)) void SymbolicPMI::PutHidePMI ( VARIANT_BOOL _arg1 );
__declspec(implementation_key(8673)) VARIANT_BOOL SymbolicPMI::GetHidePMI ( );
__declspec(implementation_key(8674)) TGFramework::ApplicationPtr SymbolicPMIGroup::GetApplication ( );
__declspec(implementation_key(8675)) long SymbolicPMIGroup::GetCount ( );
__declspec(implementation_key(8676)) IDispatchPtr SymbolicPMIGroup::GetParent ( );
__declspec(implementation_key(8677)) IDispatchPtr SymbolicPMIGroup::Item ( const _variant_t & Index );
__declspec(implementation_key(8678)) TGFramework::ApplicationPtr GostWeldSymbols::GetApplication ( );
__declspec(implementation_key(8679)) long GostWeldSymbols::GetCount ( );
__declspec(implementation_key(8680)) IDispatchPtr GostWeldSymbols::GetParent ( );
__declspec(implementation_key(8681)) GostWeldSymbolPtr GostWeldSymbols::Item ( const _variant_t & Index );
__declspec(implementation_key(8682)) void GostWeldSymbols::PutPlane ( IDispatch * _arg1 );
__declspec(implementation_key(8683)) IDispatchPtr GostWeldSymbols::GetPlane ( );
__declspec(implementation_key(8684)) void GostWeldSymbols::PutStyle ( struct DimensionStyle * _arg1 );
__declspec(implementation_key(8685)) DimensionStylePtr GostWeldSymbols::GetStyle ( );
__declspec(implementation_key(8686)) GostWeldSymbolPtr GostWeldSymbols::AddByTerminator ( IDispatch * TerminatorObject, double x1, double y1, double z1, VARIANT_BOOL keyPoint1 );
__declspec(implementation_key(8687)) HRESULT GostWeldSymbols::ClearPlane ( );
__declspec(implementation_key(8688)) HRESULT GostWeldSymbols::ClearStyle ( );
__declspec(implementation_key(8689)) AnnotInitDataPtr GostWeldSymbols::GetAnnotInitData ( );
__declspec(implementation_key(8690)) GostWeldSymbolPtr GostWeldSymbols::AddGostWeldSymbol ( struct AnnotInitData * AnnotInitData );
__declspec(implementation_key(8691)) void TableStyle::PutName ( _bstr_t _arg1 );
__declspec(implementation_key(8692)) _bstr_t TableStyle::GetName ( );
__declspec(implementation_key(8693)) void TableStyle::PutTitleTextStyle ( _bstr_t _arg1 );
__declspec(implementation_key(8694)) _bstr_t TableStyle::GetTitleTextStyle ( );
__declspec(implementation_key(8695)) void TableStyle::PutHeaderTextStyle ( _bstr_t _arg1 );
__declspec(implementation_key(8696)) _bstr_t TableStyle::GetHeaderTextStyle ( );
__declspec(implementation_key(8697)) void TableStyle::PutDataTextStyle ( _bstr_t _arg1 );
__declspec(implementation_key(8698)) _bstr_t TableStyle::GetDataTextStyle ( );
__declspec(implementation_key(8699)) void TableStyle::PutLineColor ( enum TableStyleLineTypeConstants lineType, long _arg2 );
__declspec(implementation_key(8700)) long TableStyle::GetLineColor ( enum TableStyleLineTypeConstants lineType );
__declspec(implementation_key(8701)) void TableStyle::PutLineDashType ( enum TableStyleLineTypeConstants lineType, _bstr_t _arg2 );
__declspec(implementation_key(8702)) _bstr_t TableStyle::GetLineDashType ( enum TableStyleLineTypeConstants lineType );
__declspec(implementation_key(8703)) void TableStyle::PutLineWidth ( enum TableStyleLineTypeConstants lineType, double _arg2 );
__declspec(implementation_key(8704)) double TableStyle::GetLineWidth ( enum TableStyleLineTypeConstants lineType );
__declspec(implementation_key(8705)) IDispatchPtr TableStyle::GetAttributeSets ( );
__declspec(implementation_key(8706)) VARIANT_BOOL TableStyle::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(8707)) void _ITableStyleAuto::PutName ( _bstr_t Name );
__declspec(implementation_key(8708)) _bstr_t _ITableStyleAuto::GetName ( );
__declspec(implementation_key(8709)) void _ITableStyleAuto::PutTitleTextStyle ( _bstr_t TitleTextStyle );
__declspec(implementation_key(8710)) _bstr_t _ITableStyleAuto::GetTitleTextStyle ( );
__declspec(implementation_key(8711)) void _ITableStyleAuto::PutHeaderTextStyle ( _bstr_t HeaderTextStyle );
__declspec(implementation_key(8712)) _bstr_t _ITableStyleAuto::GetHeaderTextStyle ( );
__declspec(implementation_key(8713)) void _ITableStyleAuto::PutDataTextStyle ( _bstr_t DataTextStyle );
__declspec(implementation_key(8714)) _bstr_t _ITableStyleAuto::GetDataTextStyle ( );
__declspec(implementation_key(8715)) void _ITableStyleAuto::PutLineColor ( enum TableStyleLineTypeConstants lineType, long val );
__declspec(implementation_key(8716)) long _ITableStyleAuto::GetLineColor ( enum TableStyleLineTypeConstants lineType );
__declspec(implementation_key(8717)) void _ITableStyleAuto::PutLineDashType ( enum TableStyleLineTypeConstants lineType, _bstr_t val );
__declspec(implementation_key(8718)) _bstr_t _ITableStyleAuto::GetLineDashType ( enum TableStyleLineTypeConstants lineType );
__declspec(implementation_key(8719)) void _ITableStyleAuto::PutLineWidth ( enum TableStyleLineTypeConstants lineType, double val );
__declspec(implementation_key(8720)) double _ITableStyleAuto::GetLineWidth ( enum TableStyleLineTypeConstants lineType );
__declspec(implementation_key(8721)) IDispatchPtr _ITableStyleAuto::GetAttributeSets ( );
__declspec(implementation_key(8722)) VARIANT_BOOL _ITableStyleAuto::GetIsAttributeSetPresent ( _bstr_t Name );
__declspec(implementation_key(8723)) TableStylePtr TableStyles::Add ( _bstr_t Name, _bstr_t Parent );
__declspec(implementation_key(8724)) TGFramework::ApplicationPtr TableStyles::GetApplication ( );
__declspec(implementation_key(8725)) long TableStyles::GetCount ( );
__declspec(implementation_key(8726)) IDispatchPtr TableStyles::GetParent ( );
__declspec(implementation_key(8727)) TableStylePtr TableStyles::Item ( const _variant_t & Index );
__declspec(implementation_key(8728)) HRESULT TableStyles::Remove ( _bstr_t Name );
__declspec(implementation_key(8729)) TableStylePtr _ITableStylesAuto::Add ( _bstr_t Name, _bstr_t Parent );
__declspec(implementation_key(8730)) TGFramework::ApplicationPtr _ITableStylesAuto::GetApplication ( );
__declspec(implementation_key(8731)) long _ITableStylesAuto::GetCount ( );
__declspec(implementation_key(8732)) IDispatchPtr _ITableStylesAuto::GetParent ( );
__declspec(implementation_key(8733)) TableStylePtr _ITableStylesAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(8734)) HRESULT _ITableStylesAuto::Remove ( _bstr_t Name );
__declspec(implementation_key(8735)) IUnknownPtr _ITableStylesAuto::Get_NewEnum ( );
__declspec(implementation_key(8736)) GeometryStyle2dPtr Conic2d::GetStyle ( );
__declspec(implementation_key(8737)) Relationships2dPtr Conic2d::GetRelationships ( );
__declspec(implementation_key(8738)) _bstr_t Conic2d::GetLayer ( );
__declspec(implementation_key(8739)) void Conic2d::PutLayer ( _bstr_t _arg1 );
__declspec(implementation_key(8740)) TGFramework::ApplicationPtr Conic2d::GetApplication ( );
__declspec(implementation_key(8741)) long Conic2d::GetIndex ( );
__declspec(implementation_key(8742)) _bstr_t Conic2d::GetName ( const _variant_t & Recurse );
__declspec(implementation_key(8743)) IDispatchPtr Conic2d::GetParent ( );
__declspec(implementation_key(8744)) long Conic2d::GetType ( );
__declspec(implementation_key(8745)) long Conic2d::GetZOrder ( );
__declspec(implementation_key(8746)) _bstr_t Conic2d::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(8747)) IDispatchPtr Conic2d::GetDocument ( );
__declspec(implementation_key(8748)) HRESULT Conic2d::Copy ( );
__declspec(implementation_key(8749)) HRESULT Conic2d::Cut ( );
__declspec(implementation_key(8750)) HRESULT Conic2d::Delete ( );
__declspec(implementation_key(8751)) HRESULT Conic2d::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(8752)) HRESULT Conic2d::Scale ( double Factor );
__declspec(implementation_key(8753)) HRESULT Conic2d::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(8754)) IDispatchPtr Conic2d::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(8755)) IDispatchPtr Conic2d::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(8756)) HRESULT Conic2d::SplitAtPoint ( double x, double y, VARIANT * OtherSplitElement );
__declspec(implementation_key(8757)) HRESULT Conic2d::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(8758)) long Conic2d::GetSegmentedStyleCount ( );
__declspec(implementation_key(8759)) HRESULT Conic2d::AddSegmentedStyle ( double x1, double y1, double x2, double y2, IDispatch * Style );
__declspec(implementation_key(8760)) HRESULT Conic2d::GetSegmentedStyle ( long Index, double * x1, double * y1, double * x2, double * y2, IDispatch * * Style );
__declspec(implementation_key(8761)) HRESULT Conic2d::SetSegmentedStyle ( long Index, IDispatch * Style );
__declspec(implementation_key(8762)) HRESULT Conic2d::RemoveSegmentedStyle ( long Index );
__declspec(implementation_key(8763)) HRESULT Conic2d::RemoveAllSegmentedStyles ( );
__declspec(implementation_key(8764)) HRESULT Conic2d::RemoveAllSegmentedStylesBetween ( double x1, double y1, double x2, double y2 );
__declspec(implementation_key(8765)) HRESULT Conic2d::BringToFront ( );
__declspec(implementation_key(8766)) HRESULT Conic2d::BringForward ( );
__declspec(implementation_key(8767)) HRESULT Conic2d::SendToBack ( );
__declspec(implementation_key(8768)) HRESULT Conic2d::SendBackward ( );
__declspec(implementation_key(8769)) HRESULT Conic2d::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(8770)) HRESULT Conic2d::Trim ( double x, double y, IDispatch * CutObj1, const _variant_t & CutObj2 );
__declspec(implementation_key(8771)) HRESULT Conic2d::GetStartPoint ( double * x, double * y );
__declspec(implementation_key(8772)) HRESULT Conic2d::SetStartPoint ( double x, double y );
__declspec(implementation_key(8773)) HRESULT Conic2d::GetEndPoint ( double * x, double * y );
__declspec(implementation_key(8774)) HRESULT Conic2d::SetEndPoint ( double x, double y );
__declspec(implementation_key(8775)) HRESULT Conic2d::GetControlPoint ( double * x, double * y );
__declspec(implementation_key(8776)) HRESULT Conic2d::SetControlPoint ( double x, double y );
__declspec(implementation_key(8777)) void Conic2d::PutRhoValue ( double _arg1 );
__declspec(implementation_key(8778)) double Conic2d::GetRhoValue ( );
__declspec(implementation_key(8779)) GeometryStyle2dPtr _IConic2dAuto::GetStyle ( );
__declspec(implementation_key(8780)) Relationships2dPtr _IConic2dAuto::GetRelationships ( );
__declspec(implementation_key(8781)) _bstr_t _IConic2dAuto::GetLayer ( );
__declspec(implementation_key(8782)) void _IConic2dAuto::PutLayer ( _bstr_t Layer );
__declspec(implementation_key(8783)) TGFramework::ApplicationPtr _IConic2dAuto::GetApplication ( );
__declspec(implementation_key(8784)) long _IConic2dAuto::GetIndex ( );
__declspec(implementation_key(8785)) _bstr_t _IConic2dAuto::GetName ( const _variant_t & Recurse, long Lcid );
__declspec(implementation_key(8786)) IDispatchPtr _IConic2dAuto::GetParent ( );
__declspec(implementation_key(8787)) long _IConic2dAuto::GetType ( );
__declspec(implementation_key(8788)) long _IConic2dAuto::GetZOrder ( );
__declspec(implementation_key(8789)) _bstr_t _IConic2dAuto::GetKey ( const _variant_t & Recurse );
__declspec(implementation_key(8790)) IDispatchPtr _IConic2dAuto::GetDocument ( );
__declspec(implementation_key(8791)) HRESULT _IConic2dAuto::Copy ( );
__declspec(implementation_key(8792)) HRESULT _IConic2dAuto::Cut ( );
__declspec(implementation_key(8793)) HRESULT _IConic2dAuto::Delete ( );
__declspec(implementation_key(8794)) HRESULT _IConic2dAuto::Move ( double XFrom, double YFrom, double XTo, double YTo );
__declspec(implementation_key(8795)) HRESULT _IConic2dAuto::Scale ( double Factor );
__declspec(implementation_key(8796)) HRESULT _IConic2dAuto::Rotate ( double Angle, double x, double y );
__declspec(implementation_key(8797)) IDispatchPtr _IConic2dAuto::Duplicate ( const _variant_t & XDistance, const _variant_t & YDistance );
__declspec(implementation_key(8798)) IDispatchPtr _IConic2dAuto::Mirror ( double x1, double y1, double x2, double y2, const _variant_t & BooleanCopyFlag );
__declspec(implementation_key(8799)) HRESULT _IConic2dAuto::SplitAtPoint ( double x, double y, VARIANT * OtherSplitElement );
__declspec(implementation_key(8800)) HRESULT _IConic2dAuto::Range ( double * XMinimum, double * YMinimum, double * XMaximum, double * YMaximum );
__declspec(implementation_key(8801)) long _IConic2dAuto::GetSegmentedStyleCount ( );
__declspec(implementation_key(8802)) HRESULT _IConic2dAuto::AddSegmentedStyle ( double x1, double y1, double x2, double y2, IDispatch * Style );
__declspec(implementation_key(8803)) HRESULT _IConic2dAuto::GetSegmentedStyle ( long Index, double * x1, double * y1, double * x2, double * y2, IDispatch * * Style );
__declspec(implementation_key(8804)) HRESULT _IConic2dAuto::SetSegmentedStyle ( long Index, IDispatch * Style );
__declspec(implementation_key(8805)) HRESULT _IConic2dAuto::RemoveSegmentedStyle ( long Index );
__declspec(implementation_key(8806)) HRESULT _IConic2dAuto::RemoveAllSegmentedStyles ( );
__declspec(implementation_key(8807)) HRESULT _IConic2dAuto::RemoveAllSegmentedStylesBetween ( double x1, double y1, double x2, double y2 );
__declspec(implementation_key(8808)) HRESULT _IConic2dAuto::BringToFront ( );
__declspec(implementation_key(8809)) HRESULT _IConic2dAuto::BringForward ( );
__declspec(implementation_key(8810)) HRESULT _IConic2dAuto::SendToBack ( );
__declspec(implementation_key(8811)) HRESULT _IConic2dAuto::SendBackward ( );
__declspec(implementation_key(8812)) HRESULT _IConic2dAuto::GetKeyPoint ( long Index, double * x, double * y, double * z, enum TGFramework::KeyPointType * KeypointType, long * HandleType );
__declspec(implementation_key(8813)) HRESULT _IConic2dAuto::Trim ( double x, double y, IDispatch * CutObj1, const _variant_t & CutObj2 );
__declspec(implementation_key(8814)) HRESULT _IConic2dAuto::GetStartPoint ( double * x, double * y );
__declspec(implementation_key(8815)) HRESULT _IConic2dAuto::SetStartPoint ( double x, double y );
__declspec(implementation_key(8816)) HRESULT _IConic2dAuto::GetEndPoint ( double * x, double * y );
__declspec(implementation_key(8817)) HRESULT _IConic2dAuto::SetEndPoint ( double x, double y );
__declspec(implementation_key(8818)) HRESULT _IConic2dAuto::GetControlPoint ( double * x, double * y );
__declspec(implementation_key(8819)) HRESULT _IConic2dAuto::SetControlPoint ( double x, double y );
__declspec(implementation_key(8820)) void _IConic2dAuto::PutRhoValue ( double RhoValue );
__declspec(implementation_key(8821)) double _IConic2dAuto::GetRhoValue ( );
__declspec(implementation_key(8822)) Conic2dPtr Conics2d::Item ( const _variant_t & Index );
__declspec(implementation_key(8823)) TGFramework::ApplicationPtr Conics2d::GetApplication ( );
__declspec(implementation_key(8824)) long Conics2d::GetCount ( );
__declspec(implementation_key(8825)) IDispatchPtr Conics2d::GetParent ( );
__declspec(implementation_key(8826)) Conic2dPtr Conics2d::AddByThreePointsAndRhoValue ( double xStart, double yStart, double xEnd, double yEnd, double xControl, double yControl, double RhoValue );
__declspec(implementation_key(8827)) Conic2dPtr _IConics2dAuto::Item ( const _variant_t & Index );
__declspec(implementation_key(8828)) IUnknownPtr _IConics2dAuto::Get_NewEnum ( );
__declspec(implementation_key(8829)) TGFramework::ApplicationPtr _IConics2dAuto::GetApplication ( );
__declspec(implementation_key(8830)) long _IConics2dAuto::GetCount ( );
__declspec(implementation_key(8831)) IDispatchPtr _IConics2dAuto::GetParent ( );
__declspec(implementation_key(8832)) Conic2dPtr _IConics2dAuto::AddByThreePointsAndRhoValue ( double xStart, double yStart, double xEnd, double yEnd, double xControl, double yControl, double RhoValue );
#pragma stop_map_region

} // namespace TGFrameworkSupport

#pragma pack(pop)
